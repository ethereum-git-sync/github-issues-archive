{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/419/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/419/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/419/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/419",
  "id": 301059586,
  "node_id": "MDU6SXNzdWUzMDEwNTk1ODY=",
  "number": 419,
  "title": "Minimal testnet for sharding",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 17,
  "created_at": "2018-02-28T15:08:30Z",
  "updated_at": "2018-06-15T07:44:58Z",
  "closed_at": "2018-06-15T07:44:58Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nWe need the minimal P2P code to do the following.\r\n\r\n- Maintain connections to peers, probably from a hardcoded list or at least a list of bootnodes.\r\n- Gossip protocol to pass around new blocks/collations.\r\n- ???\r\n\r\n### How can it be fixed\r\n\r\nStarting point should probably be\r\n\r\n- `p2p.lightchain.LightChain` \r\n- `p2p.peer.LESPeer`\r\n- `p2p.les`\r\n\r\nWe'll need to implement `Command` classes for a minimal subset of commands needed to pass around blocks.  Looking at the existing commands we will probably need a set of commands loosely as follows.\r\n\r\n- `Status` - For initial handshake and connecting to *useful* peers.\r\n- `Announce` - For letting peers know they have a new block.\r\n- `GetXXX` and `XXX` for things like requesting and sending blocks or headers.\r\n\r\nThen we'll need to implement a `Protocol` class to wrap these commands, similar to `LESProtocol`.\r\n\r\nAnd then finally, a `ShardChain` class like `LightChain` which uses the protocol to join the network, find suitable peers, learn the appropraite chain of blocks that it should sync with and then request the blocks and headers and do whatever is needed with them.",
  "closed_by": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/419/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 1,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/419/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369315918",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-369315918",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 369315918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTMxNTkxOA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T17:28:31Z",
    "updated_at": "2018-02-28T17:28:31Z",
    "author_association": "MEMBER",
    "body": "For proposer, if we'd like to decrease the dependency of \"minimal P2P code\" and \"sharding mechanism\" at the beginning to make sure the P2P network works, we can start from implementing P2P layer with main chain data since the node doesn't execute the *transactions*:\r\n\r\n1. Make an LES node to sync chain data with Rinkeby of Mainnet.\r\n2. Export the chain data of node 1 as the testing chain data.\r\n3. Implement the logic to syncing the block headers.\r\n4. Write a script to start `node A` and import the testing chain data.\r\n5. Make another `node B` try to sync with `node B`. \r\n\r\n@pipermerriam  do you think it's practical? Or Trinity has already supported this kind of basic network?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369315918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369319157",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-369319157",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 369319157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTMxOTE1Nw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T17:37:40Z",
    "updated_at": "2018-02-28T17:37:40Z",
    "author_association": "MEMBER",
    "body": "@hwwhww Yes, I think this could be practical.  Are we talking about purely using block headers? or do you want blocks too?  Right now the `LightChain` implementation will sync the full header chain so part 1 is done.\r\n\r\nExporting the data could be done any number of ways with some simple scripting.\r\n\r\nping @gsalgado right now we appear to have code to connect to external peers, but am I correct that we would still need to implement something that listens for incoming connections?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369319157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369322685",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-369322685",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 369322685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTMyMjY4NQ==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T17:47:51Z",
    "updated_at": "2018-02-28T17:47:51Z",
    "author_association": "MEMBER",
    "body": "That's correct, we need to listen to incoming connections and use `p2p.auth.HandshakeResponder` to establish the shared secrets and get a `Peer` instance that can then perform the base- and sub-proto handshakes. The tests in `test_auth.py` show how to use `HandshakeResponder`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369322685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369353634",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-369353634",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 369353634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTM1MzYzNA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T19:25:42Z",
    "updated_at": "2018-02-28T19:25:42Z",
    "author_association": "MEMBER",
    "body": "@gsalgado \r\n\r\nFurther questions about how this would be setup.\r\n\r\nI'm assuming we'd need to use [`asyncio.start_server`](https://docs.python.org/3.5/library/asyncio-stream.html#asyncio.start_server) to bind something to listen on the desired address/port.  That returns a `reader/writer` pair.  From what I can tell the `reader/writer` pair can then be used to initialize a `Peer` instance.  What I'm not sure of is where the `HandshakeInitiator` comes into play.\r\n\r\nI feel like I'm missing something because `p2p.auth.handshake` seems to do what we want, but only when we *know* what the enode is already.\r\n\r\nSorry if I'm being dense, but I'm having trouble understanding how `HandshakeInitiator` would be used with any of the mechanisms that I currently understand for starting a server or listening for incoming connections.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369353634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369362244",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-369362244",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 369362244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTM2MjI0NA==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T19:53:47Z",
    "updated_at": "2018-02-28T19:54:20Z",
    "author_association": "MEMBER",
    "body": "For the `Peer` we need the reader/writer plus the shared secrets established as part of the auth handshake. What we have currently is `p2p.auth.handshake`, which uses `HandshakeInitiator` to connect to a remote node, send the initial auth msg, read the auth ack and, from those two msgs, derive the shared secrets. What we are missing is a new function (`p2p.auth.receive_handshake()`, maybe) that uses a `HandshakeResponder` to accept a connection, read the auth init msg, reply with a auth ack and derive the shared secrets from those two msgs",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369362244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369374563",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-369374563",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 369374563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTM3NDU2Mw==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T20:37:53Z",
    "updated_at": "2018-02-28T20:37:53Z",
    "author_association": "MEMBER",
    "body": "Actually, it seems like the new `receive_handshake()` function could be the callback passed to `asyncio.start_server`; it'd take a reader/writer and do the following: \r\n\r\n1. Read the auth init msg\r\n2. Decrypt/decode it (`HandshakeResponder.decode_authentication()` does that, but it will have to be moved into a standalone function, I believe) and from that get the remote's pubkey\r\n3. Create a `HandshakeResponder` instance using the remote's pubkey and its address (obtained via `writer.get_extra_info()`, it seems) \r\n4. Call `HandshakeResponder.create_auth_ack_message()` to create the reply\r\n5. Send that to the remote\r\n6. Call `HandshakeResponder.derive_shared_secrets()` and use that to create a `Peer` instance",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369374563/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369454658",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-369454658",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 369454658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTQ1NDY1OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T02:34:39Z",
    "updated_at": "2018-03-01T02:34:39Z",
    "author_association": "MEMBER",
    "body": "> Actually, it seems like the new `receive_handshake()` function could be the callback\r\n\r\nI assume that's in one of your currently pending pull requests?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369454658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369464792",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-369464792",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 369464792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTQ2NDc5Mg==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T03:41:59Z",
    "updated_at": "2018-03-01T03:41:59Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam \r\n> Are we talking about purely using block headers? or do you want blocks too?\r\n\r\nJust block headers.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369464792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369510862",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-369510862",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 369510862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTUxMDg2Mg==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T08:15:45Z",
    "updated_at": "2018-03-01T08:15:45Z",
    "author_association": "MEMBER",
    "body": "> Actually, it seems like the new receive_handshake() function could be the callback\r\n>> I assume that's in one of your currently pending pull requests?\r\n\r\nNope, that's the function name I'd suggested in the previous comment, to handle the auth handshake for incoming peer connections",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/369510862/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370222218",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-370222218",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 370222218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDIyMjIxOA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-04T11:39:20Z",
    "updated_at": "2018-03-04T11:39:20Z",
    "author_association": "MEMBER",
    "body": "@gsalgado @pipermerriam Am I right that what we *need* for sharding minimal testnet includes implementing `receive_handshake()` function? If this is a task that research team could do, would you give us some recommended reading resource and create a new ticket for that? Thank you.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370222218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370531348",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-370531348",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 370531348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDUzMTM0OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-05T19:18:00Z",
    "updated_at": "2018-03-05T19:18:00Z",
    "author_association": "MEMBER",
    "body": "@hwwhww yes, I believe all of that is correct.\r\n\r\nI believe that @gsalgado 's [comment from a bit higher up in this issue](https://github.com/ethereum/py-evm/issues/419#issuecomment-369374563) gives a pretty decent outline of what is to be done.  I'll recap here.\r\n\r\n* create a new stand-alone function `receive_handshake(reader, writer, ...)`\r\n* the `receive_handshake` function will be used as the `client_connected_cb` parameter for the [`asyncio.start_server`](https://docs.python.org/3.5/library/asyncio-stream.html#asyncio.start_server) function.\r\n* Use the `reader` to read the auth init message.\r\n* Use `HandshakeResponder.decode_authentication(auth_init_message)` on the auth init message.\r\n* Some extra changes are likely required to allow retrieval of the remote's public key from the auth init message.\r\n* extract the remote's address via the [`writer.get_extra_info()`](https://docs.python.org/3.5/library/asyncio-stream.html#asyncio.StreamWriter.get_extra_info) API.\r\n* Use `HandshakeResponder.create_auth_ack_message()` to create a reply for the handshake.\r\n* Use the `writer` to send the reply to the remote.\r\n* Use `HandshakeResponder.derive_shared_secrets()` and use the return values to instantiate a `Peer` instance.\r\n\r\n@gsalgado where do you think this orchestration code should live.  I assume in the `PeerPool`?  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370531348/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370767977",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-370767977",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 370767977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDc2Nzk3Nw==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T12:36:21Z",
    "updated_at": "2018-03-06T12:36:21Z",
    "author_association": "MEMBER",
    "body": "I think it might make more sense to have a new service (`p2p.Server`, maybe?) that creates and runs a `PeerPool`, then calls `await asyncio.start_server()` to get new incoming connections and pass them on to the `PeerPool` after the auth and base-protocol handshakes are complete",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370767977/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370801278",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-370801278",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 370801278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDgwMTI3OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T14:37:15Z",
    "updated_at": "2018-03-06T14:37:15Z",
    "author_association": "MEMBER",
    "body": "lets call it something like `PeerListener`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370801278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370804453",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-370804453",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 370804453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDgwNDQ1Mw==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T14:46:31Z",
    "updated_at": "2018-03-06T14:46:31Z",
    "author_association": "MEMBER",
    "body": "I suggested `p2p.Server` because I envisioned it'd be the main service, responsible for orchestrating all others. It'd accept incoming peer connections but also run the `DiscoveryProtocol`, tell `PeerPool` to connect to more nodes when necessary, and pass that pool to other services like `LightChain` or the new `ChainSyncer`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/370804453/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/377914114",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-377914114",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 377914114,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzkxNDExNA==",
    "user": {
      "login": "jamesray1",
      "id": 16969914,
      "node_id": "MDQ6VXNlcjE2OTY5OTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16969914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesray1",
      "html_url": "https://github.com/jamesray1",
      "followers_url": "https://api.github.com/users/jamesray1/followers",
      "following_url": "https://api.github.com/users/jamesray1/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesray1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesray1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesray1/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesray1/orgs",
      "repos_url": "https://api.github.com/users/jamesray1/repos",
      "events_url": "https://api.github.com/users/jamesray1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesray1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-02T11:51:01Z",
    "updated_at": "2018-04-02T11:59:27Z",
    "author_association": "NONE",
    "body": "Given that light clients won't be implemented until phase 3 with the new roadmap I would say that this issue can be labeled phase 3, with a new issue created for the sharding subprotocol in phase 1.\r\n\r\nRefer to:\r\n- [Sharding introduction](https://docs.google.com/presentation/d/1mdmmgQlRFUvznq1jdmRwkwEyQB0YON5yAg4ArxtanE4/edit?usp=sharing)\r\n   * networking diagram on slides 82–87",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/377914114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378806416",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-378806416",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 378806416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODgwNjQxNg==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T02:58:41Z",
    "updated_at": "2018-04-05T02:58:41Z",
    "author_association": "MEMBER",
    "body": "@jamesray1 This issue is not for implementing sharding state light client. It's for the basic phase 1 testnet.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378806416/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378808070",
    "html_url": "https://github.com/ethereum/py-evm/issues/419#issuecomment-378808070",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/419",
    "id": 378808070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODgwODA3MA==",
    "user": {
      "login": "jamesray1",
      "id": 16969914,
      "node_id": "MDQ6VXNlcjE2OTY5OTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16969914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesray1",
      "html_url": "https://github.com/jamesray1",
      "followers_url": "https://api.github.com/users/jamesray1/followers",
      "following_url": "https://api.github.com/users/jamesray1/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesray1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesray1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesray1/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesray1/orgs",
      "repos_url": "https://api.github.com/users/jamesray1/repos",
      "events_url": "https://api.github.com/users/jamesray1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesray1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T03:11:29Z",
    "updated_at": "2018-04-05T03:11:53Z",
    "author_association": "NONE",
    "body": "OK, I guess when I looked at the proposal `p2p.lightchain.LightChain`, `p2p.peer.LESPeer`, `p2p.les`, `LESProtocol` I thought it might have something to do with P2P in the context of light clients, but I don't know anything about these.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/378808070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
