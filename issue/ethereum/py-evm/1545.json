{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1545",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1545/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1545/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1545/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1545",
  "id": 387266990,
  "node_id": "MDU6SXNzdWUzODcyNjY5OTA=",
  "number": 1545,
  "title": "Introduce label system for plugins",
  "user": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 815420353,
      "node_id": "MDU6TGFiZWw4MTU0MjAzNTM=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/comp:%20trinity",
      "name": "comp: trinity",
      "color": "bfd4f2",
      "default": false,
      "description": ""
    },
    {
      "id": 983614747,
      "node_id": "MDU6TGFiZWw5ODM2MTQ3NDc=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20feature",
      "name": "type: feature",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983616278,
      "node_id": "MDU6TGFiZWw5ODM2MTYyNzg=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20RFC%20/%20discussion%20/%20question",
      "name": "type: RFC / discussion / question",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983628230,
      "node_id": "MDU6TGFiZWw5ODM2MjgyMzA=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/prio:%20P3%20important",
      "name": "prio: P3 important",
      "color": "fad8c7",
      "default": false,
      "description": ""
    },
    {
      "id": 983629570,
      "node_id": "MDU6TGFiZWw5ODM2Mjk1NzA=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/effort:%20E1%20hours",
      "name": "effort: E1 hours",
      "color": "bfe5bf",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-12-04T12:39:54Z",
  "updated_at": "2018-12-05T09:32:17Z",
  "closed_at": "2018-12-05T09:32:17Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nToday, trinity supports two different node types:\r\n\r\n- Ethereum 1.0 full node\r\n- Ethereum 1.0 light node\r\n\r\nIn the future I believe that we want to support at least two more node types with this code base:\r\n\r\n- Ethereum 2.0 / Serenity beacon node\r\n- Ethereum 2.0 / Serenity validator node\r\n- ???\r\n\r\nThere's already PR #1536 that adds support for a `trinity-beacon` command to demonstrate one possible path to maintain an entirely different node type in this code base.\r\n\r\nThe way I see our client architecture evolving Trinity is basically layered in:\r\n\r\n- Reusable APIs / Primitives\r\n- Plugins\r\n- Core (DB Access, Event Bus, Plugin Infrastructure, Logging)\r\n\r\nWe end up with a relatively lightweight core, a set of libraries and plugins that wire things together.\r\n\r\nIn this kind of architecture, not every plugin ends up being useful for every node type. Some of our plugins may be useful for every node type e.g.\r\n\r\n- `trinity attach`\r\n- `trinity fix-unclean-shutdown` (also, in the long term I hope we can obsolete that one)\r\n\r\nSome of them may only be useful for an Ethereum 1 light node e.g.\r\n\r\n- `LightPeerChainBridge`\r\n\r\nEven today already ensure that some plugins would only run in some context e.g.\r\n\r\nhttps://github.com/ethereum/py-evm/blob/8ba5ed751926ae993487aed10b3b7c65aa6a8cde/trinity/plugins/builtin/light_peer_chain_bridge/plugin.py#L43-L45\r\n\r\nHowever, we not only need to keep plugins from running in the wrong context, some plugins simply should not be loaded at all so that they don't even show up in the context of `--help`.\r\n\r\n### How can it be fixed\r\n\r\nIntroduce some form of label system for plugins. Similar how plugins advertise their name, they could advertise labels e.g.\r\n\r\n```python\r\n    @property\r\n    def labels(self) -> Tuple[str,..]:\r\n        return (PluginLabels.ETHEREUM1_FULL_NODE, PluginLabels.ETHEREUM1_LIGHT_NODE)\r\n```\r\n\r\nThis would give nodes (even 3rd party nodes that others may build) the flexibility to simply filter the plugins that are registered at a `PluginManager` instance for specific labels.",
  "closed_by": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1545/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1545/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444086245",
    "html_url": "https://github.com/ethereum/py-evm/issues/1545#issuecomment-444086245",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1545",
    "id": 444086245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDA4NjI0NQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T12:40:55Z",
    "updated_at": "2018-12-04T12:40:55Z",
    "author_association": "MEMBER",
    "body": "This is flagged as \"Good First Issue\" but it needs some discussion before we decide if we want to go that way. /cc @carver @pipermerriam ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444086245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444173020",
    "html_url": "https://github.com/ethereum/py-evm/issues/1545#issuecomment-444173020",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1545",
    "id": 444173020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDE3MzAyMA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T16:54:25Z",
    "updated_at": "2018-12-04T16:54:25Z",
    "author_association": "MEMBER",
    "body": "I'm :-1: on \"Good First Issue\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444173020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444175401",
    "html_url": "https://github.com/ethereum/py-evm/issues/1545#issuecomment-444175401",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1545",
    "id": 444175401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDE3NTQwMQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T17:00:49Z",
    "updated_at": "2018-12-04T17:00:49Z",
    "author_association": "MEMBER",
    "body": "I'd like to put this into context with the boot process.  It looks something like:\r\n\r\n1. initial plugin setup.\r\n2. plugins modify CLI parser\r\n3. CLI parser parses arguments\r\n4. convert parsed arguments to trinity config\r\n5. either run `trinity_boot` process or other executable from CLI parser.\r\n\r\nThis issues seems to want to add a step between 1) \"initial plugin setup\" and 2) \"plugins modify CLI parser\" so that a plugin can exclude itself from the cli parser **if** it's not appropriate to be present based on the command being run.  However, this is problematic because the command isn't *knowable* until after step 3.\r\n\r\nSo it's unclear to me how we could implement this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444175401/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444296498",
    "html_url": "https://github.com/ethereum/py-evm/issues/1545#issuecomment-444296498",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1545",
    "id": 444296498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDI5NjQ5OA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T23:16:09Z",
    "updated_at": "2018-12-04T23:16:09Z",
    "author_association": "MEMBER",
    "body": "> This issues seems to want to add a step between 1) \"initial plugin setup\" and 2) \"plugins modify CLI parser\" ... However, this is problematic because the command isn't knowable until after step 3.\r\n\r\nRight, I guess the original command (eg~ `trinity` vs `trinity-beacon`) could affect which plugins are loaded, because it could use a different parser entirely. Then you don't get the light-vs-full plugin differentiation, though. At which point the benefits of the labeling seems slim. \r\n\r\nI guess the implication is that maybe it's just fine to decide at plugin boot time whether to run or shutdown, rather than add labeling. Any other use cases besides the CLI `--help` that labels would help with?\r\n\r\n---\r\n\r\nMeta: I removed Good First Issue. Let's have this be the \"flesh out the idea & API\" issue, and once it's solid, we can implement the labels in one or two plugins. After that's reviewed and merged, then we can add another issue that extends the API to all plugins, and that could be a GFI.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444296498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444419276",
    "html_url": "https://github.com/ethereum/py-evm/issues/1545#issuecomment-444419276",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1545",
    "id": 444419276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDQxOTI3Ng==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T09:32:17Z",
    "updated_at": "2018-12-05T09:32:17Z",
    "author_association": "MEMBER",
    "body": "My initial idea was to just filter what goes in here based on the labels\r\n\r\nhttps://github.com/ethereum/py-evm/blob/de91bc13f47d020d26854f3d14fb9b5898845451/trinity/main.py#L380\r\n\r\nBut now that I thought about it a bit more I think I agree that it is unnecessary complex basically because for *built-in* plugins we could just hardcode the used plugins in the bootstrap code of each different node.\r\n\r\nI think it is slightly more complicated for external plugins. Let's assume that a user wants to run an Ethereum 1 node as well as a Ethereum 2 beacon node.\r\n\r\nShould these be two different applications installed into two different virtual directories? If yes, then the separation of external plugins comes natural as ultimately the user will just install plugin A in the installation directory of the Ethereum 1 node and plugin B in the installation directory of the beacon node.\r\n\r\nIf however, we aim to support running a beacon node and an ethereum 1 node from one installation directory, then we will need some form of management to decide which plugins are being used for which program.\r\n\r\nSo this either means:\r\n\r\n- each plugin needs to decide which node it supports\r\n- each plugin uses something like labels\r\n- we use some form of config file with different sections for each supported node in which plugins can be configured per node\r\n\r\nAnyway, my main motivation for now is to move the Ethereum 2.0 stuff forward and hence come up with a short term solution to not have incompatible plugins start with the `trinity-beacon` command and I think that doesn't need any of the more sophisticated solutions just yet.\r\n\r\nI'll propose something in a PR that we can discuss futher. Closing here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/444419276/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
