{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/2028",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/2028/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/2028/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/2028/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/2028",
  "id": 996745938,
  "node_id": "I_kwDOBJ456s47aSLS",
  "number": 2028,
  "title": "RPC implementation",
  "user": {
    "login": "gpsanant",
    "id": 32277907,
    "node_id": "MDQ6VXNlcjMyMjc3OTA3",
    "avatar_url": "https://avatars.githubusercontent.com/u/32277907?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gpsanant",
    "html_url": "https://github.com/gpsanant",
    "followers_url": "https://api.github.com/users/gpsanant/followers",
    "following_url": "https://api.github.com/users/gpsanant/following{/other_user}",
    "gists_url": "https://api.github.com/users/gpsanant/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gpsanant/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gpsanant/subscriptions",
    "organizations_url": "https://api.github.com/users/gpsanant/orgs",
    "repos_url": "https://api.github.com/users/gpsanant/repos",
    "events_url": "https://api.github.com/users/gpsanant/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gpsanant/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-09-15T07:22:41Z",
  "updated_at": "2021-09-17T19:56:22Z",
  "closed_at": "2021-09-17T19:56:21Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "* py-evm Version: Latest\r\n\r\n### What is wrong?\r\n\r\nI was wondering whether there is an RPC for py-evm to interact with the cahin in a normal way so I could hook Metamask up to a py-evm instance. Is this possible? If not, I was thinking of implementing my own, but can seems to figure out how to implement the event listeners for filtering logs and the `eth_call` method. Any ideas?\r\n\r\n",
  "closed_by": {
    "login": "carver",
    "id": 205327,
    "node_id": "MDQ6VXNlcjIwNTMyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carver",
    "html_url": "https://github.com/carver",
    "followers_url": "https://api.github.com/users/carver/followers",
    "following_url": "https://api.github.com/users/carver/following{/other_user}",
    "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
    "organizations_url": "https://api.github.com/users/carver/orgs",
    "repos_url": "https://api.github.com/users/carver/repos",
    "events_url": "https://api.github.com/users/carver/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carver/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/2028/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/2028/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/922045157",
    "html_url": "https://github.com/ethereum/py-evm/issues/2028#issuecomment-922045157",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/2028",
    "id": 922045157,
    "node_id": "IC_kwDOBJ456s429Url",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-17T19:56:21Z",
    "updated_at": "2021-09-17T19:56:21Z",
    "author_association": "MEMBER",
    "body": "py-evm only implements the virtual machine, not a full node. There was an attempt to build a full node, called Trinity, but it's currently on ice. If you want a development chain based on py-evm, you could try out eth-tester (which is integrated into web3.py).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/922045157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
