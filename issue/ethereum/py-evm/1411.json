{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1411",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1411/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1411/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1411/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1411",
  "id": 371882486,
  "node_id": "MDU6SXNzdWUzNzE4ODI0ODY=",
  "number": 1411,
  "title": "`VM.validate_header()` is called twice during `Chain.import_block()`?",
  "user": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 983616278,
      "node_id": "MDU6TGFiZWw5ODM2MTYyNzg=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20RFC%20/%20discussion%20/%20question",
      "name": "type: RFC / discussion / question",
      "color": "eeeeee",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-10-19T09:43:03Z",
  "updated_at": "2018-10-22T15:31:00Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nThe current calling route:\r\n\r\n\r\n```python\r\nclass Chain(BaseChain):\r\n    def import_block(self,\r\n                     block: BaseBlock,\r\n                     perform_validation: bool=True\r\n                     ) -> Tuple[BaseBlock, Tuple[BaseBlock, ...], Tuple[BaseBlock, ...]]:\r\n        ....\r\n        base_header_for_import = self.create_header_from_parent(parent_header)\r\n        imported_block = self.get_vm(base_header_for_import).import_block(block)\r\n        # ^^^^^^ dive into VM.import_block()\r\n\r\n        # Validate the imported block.\r\n        if perform_validation:\r\n        # ^^^^^^ perform_validation is True by default.\r\n            validate_imported_block_unchanged(imported_block, block)\r\n            self.validate_block(imported_block)\r\n        ....\r\n\r\n    def validate_block(self, block: BaseBlock) -> None:\r\n        if block.is_genesis:\r\n            raise ValidationError(\"Cannot validate genesis block this way\")\r\n        VM = self.get_vm_class_for_block_number(BlockNumber(block.number))\r\n        parent_block = self.get_block_by_hash(block.header.parent_hash)\r\n        VM.validate_header(block.header, parent_block.header, check_seal=True)\r\n        # ^^^^^^ second time call VM.validate_header!\r\n        ....\r\n```\r\n\r\n```python\r\nclass VM(BaseVM):\r\n    def import_block(self, block):\r\n        ....\r\n        return self.mine_block()\r\n\r\n    def mine_block(self, *args, **kwargs):\r\n        ....\r\n        # Perform validation\r\n        self.validate_block(final_block)\r\n\r\n        return final_block\r\n\r\n    def validate_block(self, block):\r\n        ....\r\n        if block.is_genesis:\r\n            validate_length_lte(block.header.extra_data, 32, title=\"BlockHeader.extra_data\")\r\n        else:\r\n            parent_header = get_parent_header(block.header, self.chaindb)\r\n            self.validate_header(block.header, parent_header)\r\n            # ^^^^^^ first time calling VM.validate_header! check_seal is True by default.\r\n        ....\r\n```\r\n\r\n### How can it be fixed\r\n\r\nIs `Chain.import_block` the main API for syncing?\r\nI guess `perform_validation` is for testing. Can we remove the second call and set the first call `check_seal=True`?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1411/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1411/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431430352",
    "html_url": "https://github.com/ethereum/py-evm/issues/1411#issuecomment-431430352",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1411",
    "id": 431430352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTQzMDM1Mg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T17:00:55Z",
    "updated_at": "2018-10-19T17:00:55Z",
    "author_association": "MEMBER",
    "body": "1. I recall `perform_validation` being for testing.  At the time we couldn't figure out a better solution.\r\n2. I suspect one of these can be removed **but** it isn't clear to me which one and how because I think what we're seeing is multiple different use cases (probably 3), where two of them only hit that validation once, but `import_block` hitting both.\r\n\r\nIt'd be ideal to fix this, but I think it'll require some experimentation to figure out exactly how.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431430352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431476545",
    "html_url": "https://github.com/ethereum/py-evm/issues/1411#issuecomment-431476545",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1411",
    "id": 431476545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTQ3NjU0NQ==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T19:40:58Z",
    "updated_at": "2018-10-19T19:40:58Z",
    "author_association": "MEMBER",
    "body": "It looks like so far they are both used only privately and a couple places.\r\n\r\nAFAICT, the tension comes from these two goals:\r\n1. We don't want `VM.import_block` to just *work* if the block is invalid, and have to check it later.\r\n2. A full `validate_block` has to be done at the chain level, because you need `Chain` to validate the uncles.\r\n\r\nSo VM ends up doing a partial check, and relies on chain to do the rest. Which leads to messy buggy code that caused this issue.\r\n\r\nMaybe importing a block should become only a chain level thing and that's what calls to the VM's API to accomplish the import. Which I guess is potentially loosening goal 1. I think that's okay if we remove the name `import_block` and replace it with something that doesn't sound like it does validation, like `rebuilt_block = VM.rebuild_block(original_block)`. It wouldn't have side-effects or do any validations, just regenerate the final state according to the VM's rules. Then the caller would do the necessary validation, and persisting (which it already does...).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431476545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431795028",
    "html_url": "https://github.com/ethereum/py-evm/issues/1411#issuecomment-431795028",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1411",
    "id": 431795028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTc5NTAyOA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-22T10:18:20Z",
    "updated_at": "2018-10-22T10:18:20Z",
    "author_association": "MEMBER",
    "body": "> A full validate_block has to be done at the chain level, because you need Chain to validate the uncles.\r\n\r\n@pipermerriam off-topic question: for beacon chain, do we have to implement `validate_block` in `BeaconChain` to be aligned with `Chain`, although beacon chain doesn't have uncles? Currently the [`process_block`](https://github.com/ethereum/py-evm/blob/36ddf161a3b66ede2479ddf02fe3a143ccc6dedc/eth/beacon/state_machines/base.py#L290) function will `validate_attestations`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431795028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431866610",
    "html_url": "https://github.com/ethereum/py-evm/issues/1411#issuecomment-431866610",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1411",
    "id": 431866610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTg2NjYxMA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-22T15:20:46Z",
    "updated_at": "2018-10-22T15:20:46Z",
    "author_association": "MEMBER",
    "body": "@hwwhww 1) I'm not sure I understand your question and 2) `BeaconChain` should not try to be shaped like `Chain` in any case where it doesn't fit well.  It's better for `BeaconChain` to be properly architected than for it to have API parity with `Chain`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431866610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431869672",
    "html_url": "https://github.com/ethereum/py-evm/issues/1411#issuecomment-431869672",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1411",
    "id": 431869672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTg2OTY3Mg==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-22T15:31:00Z",
    "updated_at": "2018-10-22T15:31:00Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam whoops sorry, my question was do I *have* to extract the block validation from `BeaconStateMachine.import_block` and `BeaconStateMachine.process_block`, and make `BeaconChain` trigger the block validation.\r\nYour second response answered my question. 👍 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/431869672/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
