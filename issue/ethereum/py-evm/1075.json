{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1075",
  "id": 343884015,
  "node_id": "MDU6SXNzdWUzNDM4ODQwMTU=",
  "number": 1075,
  "title": "Trinity: Need a transparent way to run services in their own process.",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 815420353,
      "node_id": "MDU6TGFiZWw4MTU0MjAzNTM=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/comp:%20trinity",
      "name": "comp: trinity",
      "color": "bfd4f2",
      "default": false,
      "description": ""
    },
    {
      "id": 889922027,
      "node_id": "MDU6TGFiZWw4ODk5MjIwMjc=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/comp:%20p2p",
      "name": "comp: p2p",
      "color": "bfd4f2",
      "default": false,
      "description": ""
    },
    {
      "id": 983616278,
      "node_id": "MDU6TGFiZWw5ODM2MTYyNzg=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20RFC%20/%20discussion%20/%20question",
      "name": "type: RFC / discussion / question",
      "color": "eeeeee",
      "default": false,
      "description": ""
    },
    {
      "id": 983628230,
      "node_id": "MDU6TGFiZWw5ODM2MjgyMzA=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/prio:%20P3%20important",
      "name": "prio: P3 important",
      "color": "fad8c7",
      "default": false,
      "description": ""
    },
    {
      "id": 983629919,
      "node_id": "MDU6TGFiZWw5ODM2Mjk5MTk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/effort:%20E2%20days",
      "name": "effort: E2 days",
      "color": "bfe5bf",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2018-07-24T04:53:27Z",
  "updated_at": "2018-09-17T11:30:01Z",
  "closed_at": "2018-09-17T11:30:01Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nThe problem statement:  Our current model for exposing APIs across processes is very verbose, requiring a lot of boilerplate.  The overhead for supporting an API across a subprocess boundary is high.  High overhead like that isn't sustainable if we're going to expose a lot of cross process APIs which I think we need.\r\n\r\nIt needs to be lower, ideally much lower.  We don't need 100% deep access to everything across service boundaries, but we do need it to be easier to expose access to APIs in a sustainable way.\r\n\r\n### How can it be fixed\r\n\r\nI'm not sure, but I have ideas. (see comments)\r\n",
  "closed_by": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1075/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/407281196",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-407281196",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 407281196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzI4MTE5Ng==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-24T04:57:05Z",
    "updated_at": "2018-07-24T04:57:05Z",
    "author_association": "MEMBER",
    "body": "Thoughs in no particular order.\r\n\r\n- It should be declarative\r\n- We need both sync and async apis\r\n- Minimal orchestration like setting up managers, and additional IPC files.\r\n- It needs to be really hard for two systems to deadlock waiting for each other in some way.\r\n\r\nNice to have\r\n- type checks work across API boundaries.\r\n- ways to *simulate* in a testing environment without the subprocesses.\r\n- easy and concise way to do calls with timeouts.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/407281196/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/407764624",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-407764624",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 407764624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzc2NDYyNA==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T14:01:42Z",
    "updated_at": "2018-07-25T14:01:42Z",
    "author_association": "MEMBER",
    "body": "Whatever that will be, it will be needed for the plugins as well which could either mean, there are different kind of base plugins that use that, or that the plugin manager will use it or idk. I think it makes sense to come up with something that doesn't *live* inside the plugin facilities but is designed to work well with them (whatever that will mean in practice)\r\n\r\n>type checks work across API boundaries\r\n\r\nI'm tempted to raise priority for that. The loose typing of the proxy types right now is really nasty and already caused us quite some bugs in the past. I remember I once looked into it and there was something strange going that prevented me from coming up with something to raise type safety.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/407764624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/408492282",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-408492282",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 408492282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODQ5MjI4Mg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T17:51:33Z",
    "updated_at": "2018-07-27T17:51:33Z",
    "author_association": "MEMBER",
    "body": "Noting here that #1101 is probably a great issue to use to figure this pattern out.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/408492282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413489849",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-413489849",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 413489849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzQ4OTg0OQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-16T09:52:53Z",
    "updated_at": "2018-08-16T09:53:15Z",
    "author_association": "MEMBER",
    "body": "**TLDR**:\r\n\r\n- I think communication should be largely based on a single event bus (see #1172)\r\n- inter-process events should be shallow, pickable DTOs\r\n- services should expose APIs for other processes to call\r\n\r\nI was about to create a separate issue but now I think a comment here may be better suited. I started thinking about how we could move the transaction pool into it's own process. The main problem here is the interaction with the `PeerPool` which currently lives in the same process as the transaction pool but would then live outside.\r\n\r\nCurrently, the transaction pool contains code such as:\r\n\r\nhttps://github.com/ethereum/py-evm/blob/e9f1216d8d3efe0c465fe0c5cb2a79b0fa3f2154/trinity/plugins/builtin/tx_pool/pool.py#L90-L105\r\n\r\nThis is going to be problematic in a multiprocess world as the peers are stateful objects that can't just be serialized/deserialized without messing up that state (e.g. state about in-flight requests etc)\r\n\r\nMy current thinking is, that in an architecture that relies heavily on decoupled processes, we should largely communicate with shallow, pickable events. E.g. in the context of the `PeerPool` that could mean that the `PeerPool` would raise `PeerJoined` /`PeerLeft` events on a generic, application wide event bus (see #1172 for a PoC) where these events would contain a representation of a `Peer` that really only is a very shallow pickable representation of a peer without actual functionality. A simple [`Data Transfer Object (DTO)`](https://en.wikipedia.org/wiki/Data_transfer_object) basically.\r\n\r\nSimilarly, other processes could receive a set of all connected peers to loop over (might actually be able to avoid that) but those would also really just loop over a set of DTOs instead of the fat objects we use today.\r\n\r\nHowever, that DTO would contain some unique id that the actual `PeerPool` (that lives in another process) can match against its internal *stateful* representation of peers.\r\n\r\nIn that model a separate process such as the transaction pool wouldn't directly call `receiving_peer.sub_proto.send_transactions(filtered_tx)` but rather something like `eth_protocol_service.send_transactions(dto_peer, transactions)`. Notice that the `eth_protocol_service` **does** live in the same process as the `PeerPool`. Basically, I think that all the communication with the peers should go through that single process.\r\n\r\nSo, behind the scenes the `eth_protocol_service` can look up the correct peer (based on that unique id in the DTO) and perform the actual networking with the peer.\r\n\r\nAlso note that the `transactions` here aren't critical as those qualify as non-stateful, pickable DTOs already.\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413489849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413684135",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-413684135",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 413684135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzY4NDEzNQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-16T21:03:29Z",
    "updated_at": "2018-08-16T21:03:29Z",
    "author_association": "MEMBER",
    "body": "cc @cburgdorf \r\n\r\nI think I'm quickly approaching being in full agreement with you.  Here's a PR with me experimenting with how to move the JSON-RPC server to a dedicated process:\r\n\r\nhttps://github.com/ethereum/py-evm/pull/1191\r\n\r\nIt's pretty gross.  some of that is just me doing a quick/dirty implementation to see what it is like.  However, there is a decent bit of boilerplate needed to share objects across process boundaries, and in general it is **very** fragile.\r\n\r\nThe event bus idea is sitting well with me, however, there are a few things that I believe will still require us to use some of the multiprocessing shared objects.  The main one that comes to min is `eth_call` which will need `Chain` class locally that uses the `ProxyBaseDB` under the hood to get at the database while keeping the CPU stuff in the JSON-RPC process.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413684135/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413798154",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-413798154",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 413798154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzc5ODE1NA==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T08:38:46Z",
    "updated_at": "2018-08-17T09:10:25Z",
    "author_association": "MEMBER",
    "body": ">I think I'm quickly approaching being in full agreement with you\r\n\r\nHappy to see our ideas are converging!\r\n\r\n>Here's a PR with me experimenting with how to move the JSON-RPC server to a dedicated process\r\n\r\nI'll check it out in a minute.\r\n\r\n>However, there is a decent bit of boilerplate needed to share objects across process boundaries, and in general it is very fragile\r\n\r\n>The event bus idea is sitting well with me, however, there are a few things that I believe will still require us to use some of the multiprocessing shared object\r\n\r\nI agree. It's my current thinking that we will need some of the proxy stuff. In fact, I guess many plugins may end up providing an RPC style API based on these proxy types to be called from other processes. However, I think it should be minimized as much as possible. There are several reasons why I think so:\r\n\r\n1. RPC style based on proxies is less explicit, hiding the fact that we are in fact doing one of the most costly operations possible (that is, cross process communication). Or to cite from that [article](http://www.inspirel.com/articles/RPC_vs_Messaging.html)\r\n\r\n>Messaging as a communication concept is very much different from RPC in that it does not attempt to hide the physical aspects of communication. It is still trying to hide the implementation details, but not to the point of dismissing the notions related to run-time costs of exchanging data\r\n\r\n2. So far, typing around proxies seems to have unsolved problems which were causing us lots of runtime errors in the past (thing added on actual type not added on proxy etc). It's probably fixable but we haven't found a good solution for it afaik\r\n\r\n3. I *believe* RPC style with proxies is less efficient and robust than messaging in general. I don't have hard numbers to back this but I've worked on distributed systems in .NET back in 2010 and it's been the common sense in the .NET community that RPC style should be avoided. And I *think* this has evolved in a language / framework agnostic believe. Related short article that I found: http://www.inspirel.com/articles/RPC_vs_Messaging.html\r\n\r\nSo, while my current thinking still includes that we'll need some of the proxy stuff, I think the less we need of it, the better. I think that we could even build more APIs on top of the message bus that would allow to further get rid of RPC style calls.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413798154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413911752",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-413911752",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 413911752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzkxMTc1Mg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T16:02:01Z",
    "updated_at": "2018-08-17T16:02:01Z",
    "author_association": "MEMBER",
    "body": "@cburgdorf maybe you can take #1191 and do another iteration on it for a POC for changing it to use an event bus to retrieve the peer count.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413911752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413936589",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-413936589",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 413936589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzkzNjU4OQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T17:33:58Z",
    "updated_at": "2018-08-17T17:33:58Z",
    "author_association": "MEMBER",
    "body": "Will do. I have the head full of thoughts but I'm on mobile (on a beautiful\nCroatian beach btw) so I'll share them another time.\n\nOn Fri, Aug 17, 2018, 18:02 Piper Merriam <notifications@github.com> wrote:\n\n> @cburgdorf <https://github.com/cburgdorf> maybe you can take #1191\n> <https://github.com/ethereum/py-evm/pull/1191> and do another iteration\n> on it for a POC for changing it to use an event bus to retrieve the peer\n> count.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/py-evm/issues/1075#issuecomment-413911752>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAfzldb1ZLzR1rj8pLgXxqUAL153S8RAks5uRuj6gaJpZM4VcFJl>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/413936589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414379794",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-414379794",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 414379794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDM3OTc5NA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-20T16:31:42Z",
    "updated_at": "2018-08-20T16:31:42Z",
    "author_association": "MEMBER",
    "body": "I've removed this from the \"Dorothy Vaughan\" release as I believe we have the following tasks blocking this (all of which I think need to have their own issues written up)\r\n\r\n- Change how peer pool interactions happen to be \"event bus\" based.  Motivation here is that access to the peer pool will be ubiquitous and exposing those APIs via Proxy objects is looking untenable.\r\n- Modify the RPCServer class to not be in charge of instantiating the `Module` objects.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414379794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414653879",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-414653879",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 414653879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDY1Mzg3OQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T12:18:01Z",
    "updated_at": "2018-08-21T12:18:01Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam here's a super rough and buggy PoC\r\n\r\nhttps://github.com/ethereum/py-evm/pull/1202",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/414653879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/421976943",
    "html_url": "https://github.com/ethereum/py-evm/issues/1075#issuecomment-421976943",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1075",
    "id": 421976943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTk3Njk0Mw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-17T11:30:01Z",
    "updated_at": "2018-09-17T11:30:01Z",
    "author_association": "MEMBER",
    "body": "While there is certainly lots of room for improvements, I think the gist of the issue has been addressed. \r\n\r\n1. Services that run in separate processes should be written as plugins derived from `BaseIsolatedPlugin`\r\n\r\n2. The way to communicate with other processes is through the `lahja` eventbus.\r\n\r\n3. A reference implementation exists with the `JSON-RPC` server that was recently refactored into a plugin.\r\n\r\nhttps://github.com/ethereum/py-evm/blob/1006923c7d2f4f6e6317e172757967c7a4b7bf02/trinity/plugins/builtin/json_rpc/plugin.py#L30-L70\r\n\r\nI'm closing this for now. Feel free to reopen if you think we should keep this open.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/421976943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
