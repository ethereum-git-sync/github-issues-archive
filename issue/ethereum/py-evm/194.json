{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/194/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/194/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/194/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/194",
  "id": 279233710,
  "node_id": "MDU6SXNzdWUyNzkyMzM3MTA=",
  "number": 194,
  "title": "STUB: New transaction format",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2017-12-05T03:31:00Z",
  "updated_at": "2018-01-10T05:28:31Z",
  "closed_at": "2017-12-16T13:30:29Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "See [sharding doc](https://github.com/ethereum/sharding/blob/develop/docs/doc.md#transaction-format)\r\n\r\n- [x] Update `Transaction` format (depend on #203 and #192)\r\n    The format of a transaction now becomes:\r\n    ```python\r\n    [\r\n        chain_id,      # 1 on mainnet\r\n        shard_id,      # the shard the transaction goes onto\r\n        target,        # account the tx goes to\r\n        data,          # transaction data\r\n        start_gas,     # starting gas\r\n        gasprice,      # gasprice\r\n        access_list,   # access list (see below for specification)\r\n        code           # initcode of the target (for account creation)\r\n    ]\r\n    ```\r\n~- [ ] Update `apply_transaction` function procedure~\r\n\r\n  ",
  "closed_by": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/194/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/194/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/351357915",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-351357915",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 351357915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTM1NzkxNQ==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T11:01:08Z",
    "updated_at": "2017-12-13T11:02:10Z",
    "author_association": "MEMBER",
    "body": "I'm gonna start working on this, but disregard any account abstraction stuff for the moment (as there's no clear/single specification yet). So the transaction object will include nonce and signature. Removing those should be trivial later.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/351357915/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/352183700",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-352183700",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 352183700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjE4MzcwMA==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-16T13:30:29Z",
    "updated_at": "2017-12-16T13:30:29Z",
    "author_association": "MEMBER",
    "body": "Closing this with #223 (`apply_transaction` hasn't been updated yet, but this belongs more to #203 in my opinion)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/352183700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/355998211",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-355998211",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 355998211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTk5ODIxMQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T15:29:34Z",
    "updated_at": "2018-01-08T15:29:34Z",
    "author_association": "MEMBER",
    "body": "@jannikluhn  I will add a new ticket for `apply_transaction` with new transaction format. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/355998211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356043803",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-356043803",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 356043803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjA0MzgwMw==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T17:59:32Z",
    "updated_at": "2018-01-08T17:59:32Z",
    "author_association": "MEMBER",
    "body": "@hwwhww This seems to be included in #238 already. I think it will need some updates concerning gas calculation / payment and maybe state access restrictions, but the basics seem to be there. Can you comment, @NIC619 ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356043803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356165381",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-356165381",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 356165381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjE2NTM4MQ==",
    "user": {
      "login": "NIC619",
      "id": 17670147,
      "node_id": "MDQ6VXNlcjE3NjcwMTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/17670147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NIC619",
      "html_url": "https://github.com/NIC619",
      "followers_url": "https://api.github.com/users/NIC619/followers",
      "following_url": "https://api.github.com/users/NIC619/following{/other_user}",
      "gists_url": "https://api.github.com/users/NIC619/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NIC619/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NIC619/subscriptions",
      "organizations_url": "https://api.github.com/users/NIC619/orgs",
      "repos_url": "https://api.github.com/users/NIC619/repos",
      "events_url": "https://api.github.com/users/NIC619/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NIC619/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T02:59:26Z",
    "updated_at": "2018-01-09T02:59:26Z",
    "author_association": "MEMBER",
    "body": "I updated the `execute_transaction` with the new transaction format in #238.\r\nRegarding gas calculation, intrinsic gas cost is updated to also includes size of `tx.code`. Should we include the cost of reading access list?\r\nRegarding payment, gas cost is updated to be paid by `tx.to`.\r\nRegarding state access restriction, it seems to met that it's already be done in #202 ?\r\n\r\n@jannikluhn @hwwhww  Please let me know if there's any update that's missing regarding the new transaction format. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356165381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356253377",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-356253377",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 356253377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjI1MzM3Nw==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T11:06:23Z",
    "updated_at": "2018-01-09T11:06:23Z",
    "author_association": "MEMBER",
    "body": "@NIC619 I think the only thing wrong with the transaction format itself is that `gas_price` is still part of it (at least given https://ethresear.ch/t/tradeoffs-in-account-abstraction-proposals/263/23). Regarding transaction execution I can see three things which need to be changed long term, but are probably fine for now:\r\n\r\n- gas subtraction at the protocol level (this should be solved in #234 I guess)\r\n- there should be a way to stop execution after N gas has been consumed unless PAYGAS has been called (depending on the chosen account abstraction proposal)\r\n- IMO the hardest one: There needs to be a way to construct the access list without prior knowledge. So there should be a execution mode that works with an empty access list (or a placeholder) and that keeps track of which storage slots are accessed. The problem here is that changing the access list potentially changes the code path (as it changes SIGHASH). Also, it may require signing the same transaction twice (with the empty and with the filled access list).\r\n\r\n> Should we include the cost of reading access list?\r\n\r\nGood point, my guess is that with stateless clients gas costs of state access in general will need to be revised significantly.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356253377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356272353",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-356272353",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 356272353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjI3MjM1Mw==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T12:37:07Z",
    "updated_at": "2018-01-09T12:37:16Z",
    "author_association": "MEMBER",
    "body": "@jannikluhn \r\n> There needs to be a way to construct the access list without prior knowledge. So there should be a execution mode that works with an empty access list (or a placeholder) and that keeps track of which storage slots are accessed. The problem here is that changing the access list potentially changes the code path (as it changes SIGHASH). Also, it may require signing the same transaction twice (with the empty and with the filled access list).\r\n\r\nCould you open a new ticket to describe \"constructing the access list\"? Or reopen #192 for the whole access restriction mechanism? 🙂\r\n\r\n\r\n> Should we include the cost of reading access list?\r\n\r\nIs it already be included in the cost of `SLOAD` and `SSTORE` implicitly?\r\n\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356272353/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356275586",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-356275586",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 356275586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjI3NTU4Ng==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T12:52:26Z",
    "updated_at": "2018-01-09T12:52:37Z",
    "author_association": "MEMBER",
    "body": "> Could you open a new ticket to describe \"constructing the access list\"? Or reopen #192 for the whole access restriction mechanism? :slightly_smiling_face:\r\n\r\nWill do.\r\n\r\n> Is it already be included in the cost of SLOAD and SSTORE implicitly?\r\n\r\nCharging per access list entry would mean that accessing the same storage slot multiple times wouldn't cost more which is reasonable. On the other hand we can't discriminate between read and writes there. So a combination of both would probably make sense.\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356275586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356496025",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-356496025",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 356496025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjQ5NjAyNQ==",
    "user": {
      "login": "NIC619",
      "id": 17670147,
      "node_id": "MDQ6VXNlcjE3NjcwMTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/17670147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NIC619",
      "html_url": "https://github.com/NIC619",
      "followers_url": "https://api.github.com/users/NIC619/followers",
      "following_url": "https://api.github.com/users/NIC619/following{/other_user}",
      "gists_url": "https://api.github.com/users/NIC619/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NIC619/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NIC619/subscriptions",
      "organizations_url": "https://api.github.com/users/NIC619/orgs",
      "repos_url": "https://api.github.com/users/NIC619/repos",
      "events_url": "https://api.github.com/users/NIC619/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NIC619/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-10T04:23:52Z",
    "updated_at": "2018-01-10T04:37:53Z",
    "author_association": "MEMBER",
    "body": "@jannikluhn yes, `gas_price` will be removed in #234.\r\n\r\n> there should be a way to stop execution after N gas has been consumed unless PAYGAS has been called (depending on the chosen account abstraction proposal)\r\n\r\nI think there would be something like `check_PAYGAS_execution` which basically acts like `execute_transaction` but with a gas limit(specified by miner?) and returns `True` if PAYGAS` opcode is execute or return `False` if gas limit reached.\r\n\r\n> IMO the hardest one: There needs to be a way to construct the access list without prior knowledge. So there should be a execution mode that works with an empty access list (or a placeholder) and that keeps track of which storage slots are accessed. The problem here is that changing the access list potentially changes the code path (as it changes SIGHASH). Also, it may require signing the same transaction twice (with the empty and with the filled access list).\r\n\r\n@ jannikluhn Can you elaborate more on \"The problem here is that changing the access list potentially changes the code path (as it changes SIGHASH).\"? Sorry I didn't follow.\r\nAs for signing transaction twice, based on my understanding, signing transaction is not needed in Account Abstraction as transaction sender is always `ENTRY_POINT`? Or I probably have misunderstood something.\r\n\r\n> Is it already be included in the cost of SLOAD and SSTORE implicitly?\r\n\r\n@hwwhww My understanding is that it will be charged twice. One as the cost of witness data and one as data operated by `SLOAD/SSTORE`.\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356496025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356503391",
    "html_url": "https://github.com/ethereum/py-evm/issues/194#issuecomment-356503391",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/194",
    "id": 356503391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjUwMzM5MQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-10T05:25:19Z",
    "updated_at": "2018-01-10T05:28:31Z",
    "author_association": "MEMBER",
    "body": "> There needs to be a way to construct the access list without prior knowledge. So there should be a execution mode that works with an empty access list (or a placeholder) and that keeps track of which storage slots are accessed.\r\n\r\nIMO doing this with an execution mode is a bad idea; it would break in any scenario where the keys accessed depend even slightly on variables that could be affected by third parties. The access lists should be generated by something which gets added to Viper; you would pass a function name and arguments and Viper would reply back with what addresses and storage keys could get read or written.\r\n\r\nFor now, I recommend that we stick to setting the access list to be the sender and receiver, including their entire storage, and possibly add a field for \"manually add an additional address\" for transactions to contracts that trigger payouts to third-party addresses; don't bother doing partial storage witnesses until later. Even sender and receiver only covers a huge number of use cases.\r\n\r\n> Good point, my guess is that with stateless clients gas costs of state access in general will need to be revised significantly.\r\n\r\nYep! My personal preference at the moment BTW is that we charge a clean 4 gas per byte for all transaction or witness data, and we compute witness sizes based on the trie/state root at the start of collation execution (ie. part of the witness verification step of verifying a collation).\r\n\r\nRegarding cost of SLOAD and SSTORE, I recommend just keeping the status quo for now.\r\n\r\n> I think there would be something like check_PAYGAS_execution which basically acts like execute_transaction but with a gas limit(specified by miner?) and returns True if PAYGASopcode is execute or returnFalse` if gas limit reached.\r\n\r\nI think the solution may be simpler. Rather than just returning success or failure, we could return two kinds of failure, one where PAYGAS is executed, and if so with what gasprice, and the other where PAYGAS is not executed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356503391/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
