{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/214",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/214/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/214/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/214/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/214",
  "id": 281543692,
  "node_id": "MDU6SXNzdWUyODE1NDM2OTI=",
  "number": 214,
  "title": "Standalone RPC test harness",
  "user": {
    "login": "carver",
    "id": 205327,
    "node_id": "MDQ6VXNlcjIwNTMyNw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carver",
    "html_url": "https://github.com/carver",
    "followers_url": "https://api.github.com/users/carver/followers",
    "following_url": "https://api.github.com/users/carver/following{/other_user}",
    "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
    "organizations_url": "https://api.github.com/users/carver/orgs",
    "repos_url": "https://api.github.com/users/carver/repos",
    "events_url": "https://api.github.com/users/carver/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carver/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/py-evm/milestones/1",
    "html_url": "https://github.com/ethereum/py-evm/milestone/1",
    "labels_url": "https://api.github.com/repos/ethereum/py-evm/milestones/1/labels",
    "id": 2977955,
    "node_id": "MDk6TWlsZXN0b25lMjk3Nzk1NQ==",
    "number": 1,
    "title": "MVP-public-alpha",
    "description": "Things needed for a MVP public alpha release.",
    "creator": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 1,
    "closed_issues": 21,
    "state": "closed",
    "created_at": "2017-12-13T18:00:19Z",
    "updated_at": "2018-12-21T18:43:35Z",
    "due_on": "2018-05-29T07:00:00Z",
    "closed_at": "2018-06-21T17:52:09Z"
  },
  "comments": 3,
  "created_at": "2017-12-12T21:30:08Z",
  "updated_at": "2018-03-27T21:57:49Z",
  "closed_at": "2018-03-27T21:57:49Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## What is wrong?\r\n\r\nTesting the RPC methods is an enormous job, depending on a lot of chain state setup. That setup is starting to look like duplicate work of the https://github.com/ethereum/tests library.\r\n\r\n## How can it be fixed\r\n\r\nBuild a standalone RPC test harness. All tests would be derived from `/ethereum/tests/BlockchainTests/*`. It would work like so:\r\n\r\n1. Launch the IPC RPC server of the node\r\n2. For each test:\r\n   1. Use a custom `debug_resetChainTo` RPC command to replace the current chain with a new one, defined by the fixture.\r\n   2. Convert all the fixture fields like `postState` into RPC queries, like: `eth_getCode`, `eth_getStorage`, etc. and validate the results.\r\n\r\nA benefit of it being standalone is that it's plausible that other nodes would be interested in implementing `debug_resetChainTo` and using the harness for testing also.\r\n\r\n### `debug_resetChainTo`\r\n\r\nSend a complete spec for a single test. The first parameter is the path to the test, and the dict is the second, like:\r\n\r\n```\r\n{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"debug_resetChainTo\", \"params\": [\r\n  \"/BlockchainTests/bcValidBlockTest/dataTx.json\",\r\n  {\r\n        \"_info\" : {\r\n            \"comment\" : \"\",\r\n            \"filledwith\" : \"cpp-1.3.0+commit.70e7d177.Linux.g++\",\r\n            \"source\" : \"../../tests/src/BlockchainTestsFiller/bcValidBlockTest/dataTxFiller.json\"\r\n        },\r\n        \"blocks\" : [\r\n            {\r\n                \"blockHeader\" : {\r\n                    \"bloom\" : \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n                    \"coinbase\" : \"0x8888f1f195afa192cfee860698584c030f4c9db1\",\r\n                    \"difficulty\" : \"0x020000\",\r\n                    \"extraData\" : \"\",\r\n                    \"gasLimit\" : \"0x2fefba\",\r\n                    \"gasUsed\" : \"0x00\",\r\n                    \"hash\" : \"0xe932b23f84c3b28afb6bdc5ab36377ab510b5c3913c7e5646d1a2d6536e13934\",\r\n                    \"mixHash\" : \"0x7e747686cc66c89b48bb295df8acf06c0a06e9893c79e0e829bdd778d53d0063\",\r\n                    \"nonce\" : \"0x71f452524892b4f2\",\r\n                    \"number\" : \"0x01\",\r\n                    \"parentHash\" : \"0x636aff25807a6331b7c9a8e4c984f3f8e38d7608adf34ee801f5265ca4fe19ac\",\r\n                    \"receiptTrie\" : \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n                    \"stateRoot\" : \"0xb9985a0b5c09bb476161bcd55aa5fddf7601e4791b19b9b192b99bd74384edeb\",\r\n                    \"timestamp\" : \"0x59af0130\",\r\n                    \"transactionsTrie\" : \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n                    \"uncleHash\" : \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\"\r\n                },\r\n                \"rlp\" : \"0xf901fcf901f7a0636aff25807a6331b7c9a8e4c984f3f8e38d7608adf34ee801f5265ca4fe19aca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0b9985a0b5c09bb476161bcd55aa5fddf7601e4791b19b9b192b99bd74384edeba056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bfefba808459af013080a07e747686cc66c89b48bb295df8acf06c0a06e9893c79e0e829bdd778d53d00638871f452524892b4f2c0c0\",\r\n                \"transactions\" : [\r\n                ],\r\n                \"uncleHeaders\" : [\r\n                ]\r\n            }\r\n        ],\r\n        \"genesisBlockHeader\" : {\r\n            \"bloom\" : \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n            \"coinbase\" : \"0x8888f1f195afa192cfee860698584c030f4c9db1\",\r\n            \"difficulty\" : \"0x020000\",\r\n            \"extraData\" : \"0x42\",\r\n            \"gasLimit\" : \"0x2fefd8\",\r\n            \"gasUsed\" : \"0x64\",\r\n            \"hash\" : \"0x636aff25807a6331b7c9a8e4c984f3f8e38d7608adf34ee801f5265ca4fe19ac\",\r\n            \"mixHash\" : \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n            \"nonce\" : \"0x0102030405060708\",\r\n            \"number\" : \"0x00\",\r\n            \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n            \"receiptTrie\" : \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n            \"stateRoot\" : \"0xcafd881ab193703b83816c49ff6c2bf6ba6f464a1be560c42106128c8dbc35e7\",\r\n            \"timestamp\" : \"0x54c98c81\",\r\n            \"transactionsTrie\" : \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n            \"uncleHash\" : \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\"\r\n        },\r\n        \"genesisRLP\" : \"0xf901fcf901f7a00000000000000000000000000000000000000000000000000000000000000000a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0cafd881ab193703b83816c49ff6c2bf6ba6f464a1be560c42106128c8dbc35e7a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bfefd8648454c98c8142a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421880102030405060708c0c0\",\r\n        \"lastblockhash\" : \"0xe932b23f84c3b28afb6bdc5ab36377ab510b5c3913c7e5646d1a2d6536e13934\",\r\n        \"network\" : \"Byzantium\",\r\n        \"postState\" : {\r\n            \"0x8888f1f195afa192cfee860698584c030f4c9db1\" : {\r\n                \"balance\" : \"0x29a2241af62c0000\",\r\n                \"code\" : \"\",\r\n                \"nonce\" : \"0x00\",\r\n                \"storage\" : {\r\n                }\r\n            },\r\n            \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\" : {\r\n                \"balance\" : \"0x02540be400\",\r\n                \"code\" : \"\",\r\n                \"nonce\" : \"0x00\",\r\n                \"storage\" : {\r\n                }\r\n            }\r\n        },\r\n        \"pre\" : {\r\n            \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\" : {\r\n                \"balance\" : \"0x02540be400\",\r\n                \"code\" : \"\",\r\n                \"nonce\" : \"0x00\",\r\n                \"storage\" : {\r\n                }\r\n            }\r\n        }\r\n    }\r\n]}\r\n```\r\n\r\n### Invoking RPC methods to test against:\r\n\r\nNow it should be possible to make these assertions (using a shorthand for calling the RPC method):\r\n\r\n```\r\neth_getBalance(\"0x8888f1f195afa192cfee860698584c030f4c9db1\", \"0x0\") == \"0x0\"\r\neth_getBalance(\"0x8888f1f195afa192cfee860698584c030f4c9db1\", \"earliest\") == \"0x0\"\r\neth_getBalance(\"0x8888f1f195afa192cfee860698584c030f4c9db1\", \"0x1\") == \"0x29a2241af62c0000\"\r\neth_getBalance(\"0x8888f1f195afa192cfee860698584c030f4c9db1\", \"latest\") == \"0x29a2241af62c0000\"\r\neth_getCode(\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"latest\") == \"0x\"\r\neth_getBlockByNumber(\"0x0\") == {\r\n            \"bloom\" : \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n            \"coinbase\" : \"0x8888f1f195afa192cfee860698584c030f4c9db1\",\r\n            \"difficulty\" : \"0x020000\",\r\n            \"extraData\" : \"0x42\",\r\n            \"gasLimit\" : \"0x2fefd8\",\r\n            \"gasUsed\" : \"0x64\",\r\n            \"hash\" : \"0x636aff25807a6331b7c9a8e4c984f3f8e38d7608adf34ee801f5265ca4fe19ac\",\r\n            \"mixHash\" : \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n            \"nonce\" : \"0x0102030405060708\",\r\n            \"number\" : \"0x00\",\r\n            \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n            \"receiptTrie\" : \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n            \"stateRoot\" : \"0xcafd881ab193703b83816c49ff6c2bf6ba6f464a1be560c42106128c8dbc35e7\",\r\n            \"timestamp\" : \"0x54c98c81\",\r\n            \"transactionsTrie\" : \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n            \"uncleHash\" : \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\"\r\n        }\r\n# etc...\r\n```\r\n\r\n### Open Questions\r\n\r\n- What would be the best way to test the \"pending\" state? Maybe make `debug_resetChainTo` leave the last block as pending, and use `evm_mine` to seal the last block for final tests?\r\n- Does the node need the name of the test spec in `debug_resetChainTo` (eg~ \"dataTx_Byzantium\" in the above example)?\r\n- Does the node need the path to the test for setup, or can it be dropped from the request? (eg~ \"/BlockchainTests/bcValidBlockTest/dataTx.json\" above)",
  "closed_by": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/214/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/214/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/351220764",
    "html_url": "https://github.com/ethereum/py-evm/issues/214#issuecomment-351220764",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/214",
    "id": 351220764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTIyMDc2NA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T22:47:13Z",
    "updated_at": "2017-12-12T22:47:13Z",
    "author_association": "MEMBER",
    "body": "> What would be the best way to test the \"pending\" state?\r\n\r\nPending is for pending transactions so we'd need a transaction pool of some sort to be able to do that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/351220764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/351222754",
    "html_url": "https://github.com/ethereum/py-evm/issues/214#issuecomment-351222754",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/214",
    "id": 351222754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTIyMjc1NA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T22:55:58Z",
    "updated_at": "2017-12-12T22:55:58Z",
    "author_association": "MEMBER",
    "body": "> Does the node need the name of the test spec in debug_resetChainTo (eg~ \"dataTx_Byzantium\" in the above example)?\r\n\r\nIit will need to know what network it's on `Byzantium/FrontierToHomesteadAt5/etc`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/351222754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/351229026",
    "html_url": "https://github.com/ethereum/py-evm/issues/214#issuecomment-351229026",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/214",
    "id": 351229026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTIyOTAyNg==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T23:25:44Z",
    "updated_at": "2017-12-12T23:25:44Z",
    "author_association": "MEMBER",
    "body": "> Iit will need to know what network it's on `Byzantium/FrontierToHomesteadAt5/etc`\r\n\r\nLooks like that is specified in the `\"network\"` field.\r\n\r\n> Pending is for pending transactions so we'd need a transaction pool of some sort to be able to do that.\r\n\r\nOk I'll punt :football: until that minor issue is resolved...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/351229026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
