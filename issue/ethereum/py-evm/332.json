{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/332",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/332/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/332/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/332/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/332",
  "id": 293061048,
  "node_id": "MDU6SXNzdWUyOTMwNjEwNDg=",
  "number": 332,
  "title": "JSON-fixture tests builder tool",
  "user": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-01-31T07:46:16Z",
  "updated_at": "2018-02-28T10:13:07Z",
  "closed_at": "2018-02-28T10:13:07Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\nSince we made (and may make more) protocol changes for Ethereum 2.0, it's better to be well-tested with more various JSON-fixture tests.\r\n\r\n### How can it be fixed\r\nAs @pipermerriam suggested, we can write a tool to record EVM execution and export it in the JSON-fixture tests format.",
  "closed_by": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/332/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/332/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/362541119",
    "html_url": "https://github.com/ethereum/py-evm/issues/332#issuecomment-362541119",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/332",
    "id": 362541119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjU0MTExOQ==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T09:59:52Z",
    "updated_at": "2018-02-02T09:59:52Z",
    "author_association": "MEMBER",
    "body": "What do you think of the following scheme:\r\n\r\n```\r\ntest1 = StateTest(\r\n    name=\"CallIncrementsNonce\"\r\n\r\n    env={  # should have a sensible default because most tests won't touch it\r\n        # ...\r\n    },\r\n    pre_state={\r\n        ACCOUNT_ADDRESS: ACCOUNT_CODE,\r\n    },\r\n\r\n    transaction=UnsignedUserAccountTransaction(\r\n        **DEFAULT_TX_PARAMS\r\n    ).as_signed_transaction(PRIVATE_KEY),\r\n\r\n    output=None,\r\n    state_updates=[\r\n        (ACCOUNT_ADDRESS, \"storage\", 0, 1),\r\n    ],\r\n    logs=[],\r\n    gas_payment=0,\r\n)\r\n\r\ntest2 = StateTest(...)\r\n\r\ntest_group = TestGroup([test1, test2])\r\nprint(test_group.to_json())\r\n```\r\n\r\nInitially I thought we'd want a more complex solution, but now I don't think this would make test creation more clear or concise. So basically, most fields from the JSON file are specified directly. Only the transaction is given by a transaction object, and instead of the complete final state only state changes are given. Changes can be either given as a dictionary (similar to `pre_state`) or as a flat list to avoid unnecessary nesting especially for storage. Now that I think about it, `pre_state` could be such a list as well.\r\n\r\n`TestGroup` groups the tests (obviously) and creates the JSON representation. For this, the `post_state` is constructed and the state root is calculated (by setting the state directly, not by executing the transaction). If multiple tests share the same name they are required to have the same pre_state as well. In this case a single \"parametrized\" test is created (see \"indexes\" in the state test files).\r\n\r\nIf many tests share the same `pre_state` (one of the cases I thought a more complex design might be useful), `functools.partial` could be used to avoid repetition. To test a sequence of transactions, multiple tests have to be generated (because state tests allow only for a single transaction), but for that a helper can be used (saves setting env and pre_state):\r\n\r\n```\r\ntest3 = test2.extend(\r\n    # same parameters as StateTest, excluding env and pre_state\r\n)\r\n```\r\n\r\nVMTests have mostly the same fields, but \"transaction\" is replaced with \"exec\":\r\n\r\n```\r\ntest1 = VMTest(\r\n    name=\"PAYGAS\",\r\n    env={\r\n        # ...\r\n    },\r\n    pre_state={\r\n        # ...\r\n    },\r\n    exec={\r\n        \"code\": [PUSH1, b\"\\x00\", PAYGAS],\r\n    },\r\n    state_updates=[],\r\n    logs=[],\r\n    paygas_gasprice=0,\r\n)\r\n```\r\n\r\nSo the only thing that is simplified compared to the raw JSON is that the executed code is specified using the mnemonics instead of raw bytecode. Also, the code is automatically deployed (i.e. the code doesn't have to be repeated in pre_state).\r\n\r\nI'm gonna start implementing it like this, but I'm very willing to start all over again in case someone has a better approach.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/362541119/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/362712985",
    "html_url": "https://github.com/ethereum/py-evm/issues/332#issuecomment-362712985",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/332",
    "id": 362712985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjcxMjk4NQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T21:28:49Z",
    "updated_at": "2018-02-02T21:28:49Z",
    "author_association": "MEMBER",
    "body": "@jannikluhn I think this is a solid start, though I think we would benefit from being able to use at least some of the same infrastructure for both these tests and the actual JSON fixture tests.  Lets see what this looks like once some code exists and we can iterate from there. 👍 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/362712985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
