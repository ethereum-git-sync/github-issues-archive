{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1208",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1208/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1208/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1208/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1208",
  "id": 352954792,
  "node_id": "MDU6SXNzdWUzNTI5NTQ3OTI=",
  "number": 1208,
  "title": "Can't read state of deployed contract",
  "user": {
    "login": "paymog",
    "id": 1986950,
    "node_id": "MDQ6VXNlcjE5ODY5NTA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paymog",
    "html_url": "https://github.com/paymog",
    "followers_url": "https://api.github.com/users/paymog/followers",
    "following_url": "https://api.github.com/users/paymog/following{/other_user}",
    "gists_url": "https://api.github.com/users/paymog/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paymog/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
    "organizations_url": "https://api.github.com/users/paymog/orgs",
    "repos_url": "https://api.github.com/users/paymog/repos",
    "events_url": "https://api.github.com/users/paymog/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paymog/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-08-22T13:30:57Z",
  "updated_at": "2018-08-22T14:23:10Z",
  "closed_at": "2018-08-22T14:23:10Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "* py-evm Version: 0.2.0a26\r\n* OS: osx\r\n* Python Version (python --version): Python 3.6.5\r\n\r\n* Environment (output of `pip freeze`):\r\n\r\n```\r\naiohttp==2.3.10\r\namqp==2.3.2\r\naniso8601==3.0.2\r\nappnope==0.1.0\r\nasn1crypto==0.24.0\r\nasync-lru==0.1.0\r\nasync-timeout==3.0.0\r\nattrdict==2.0.0\r\nbackcall==0.1.0\r\nbilliard==3.5.0.4\r\nbitcoin==1.1.42\r\ncelery==4.2.0\r\ncertifi==2018.4.16\r\ncffi==1.11.5\r\nchardet==3.0.4\r\nclick==6.7\r\ncoincurve==7.1.0\r\ncoverage==4.5.1\r\ncryptography==2.3.1\r\ncytoolz==0.9.0.1\r\ndecorator==4.3.0\r\ndj-database-url==0.5.0\r\nDjango==2.0.6\r\ndjango-celery-beat==1.1.1\r\ndjango-celery-results==1.0.1\r\ndjango-cors-headers==2.3.0\r\neth-abi==1.1.1\r\neth-account==0.2.3\r\neth-bloom==1.0.0\r\neth-hash==0.1.4\r\neth-keyfile==0.5.1\r\neth-keys==0.2.0b3\r\neth-rlp==0.1.2\r\neth-tester==0.1.0b27\r\neth-utils==1.0.3\r\nFlask==1.0.2\r\nFlask-GraphQL==1.4.1\r\ngraphene==2.1\r\ngraphene-django==2.0.0\r\ngraphql-core==2.0\r\ngraphql-relay==0.4.5\r\nhexbytes==0.1.0\r\nidna==2.7\r\nidna-ssl==1.1.0\r\nipython==6.5.0\r\nipython-genutils==0.2.0\r\niso8601==0.1.12\r\nitsdangerous==0.24\r\njedi==0.12.1\r\nJinja2==2.10\r\nkombu==4.2.1\r\nlru-dict==1.1.6\r\nlxml==4.2.4\r\nMarkupSafe==1.0\r\nmultidict==4.3.1\r\nnetdisco==2.0.0\r\nnetifaces==0.10.7\r\nparsimonious==0.8.0\r\nparso==0.3.1\r\npbkdf2==1.3\r\npexpect==4.6.0\r\npickleshare==0.7.4\r\nplyvel==1.0.4\r\npromise==2.1\r\nprompt-toolkit==1.0.15\r\npsycopg2==2.7.5\r\npsycopg2-binary==2.7.5\r\nptyprocess==0.6.0\r\npy-ecc==1.4.3\r\npy-evm==0.2.0a26\r\npy-solc==3.1.0\r\npycparser==2.18\r\npycryptodome==3.6.1\r\npyethash==0.1.27\r\nPyGithub==1.40\r\nPygments==2.2.0\r\nPyJWT==1.6.4\r\npysha3==1.0.2\r\npython-dateutil==2.7.3\r\npytz==2018.5\r\nPyYAML==3.12\r\nredis==2.10.6\r\nrepoze.lru==0.7\r\nrequests==2.19.1\r\nrlp==1.0.2\r\nRx==1.6.1\r\nscrypt==0.8.6\r\nsecp256k1==0.13.2\r\nsemantic-version==2.6.0\r\nsimplegeneric==0.8.1\r\nsingledispatch==3.4.0.3\r\nsix==1.11.0\r\nSQLAlchemy==1.2.9\r\ntoolz==0.9.0\r\ntraitlets==4.3.2\r\ntrie==1.3.8\r\ntyping==3.6.4\r\nuPnPClient==0.0.8\r\nurllib3==1.23\r\nvine==1.1.4\r\nwcwidth==0.1.7\r\nweb3==4.3.0\r\nwebsockets==4.0.1\r\nWerkzeug==0.14.1\r\nyarl==1.2.6\r\nzeroconf==0.20.0\r\n```\r\n\r\n### What is wrong?\r\n\r\nI recently switched from `pyethereum` to `PyEvm` and I'm having trouble reading the state of contracts deployed in a test environment. I'm also finding that during contract deployment, I *need* to specify the `gas` where I didn't need to before when I used `pyethereum`. Is there a way around this?\r\n\r\n```python\r\nfrom web3 import Web3\r\nfrom web3.providers.eth_tester import EthereumTesterProvider\r\nfrom eth_tester import PyEVMBackend\r\nfrom backend.server.utils.contract_compiler import ContractCompiler\r\nimport unittest\r\nfrom web3.contract import ConciseContract\r\nfrom eth_tester import EthereumTester\r\nW3 = Web3(EthereumTesterProvider(EthereumTester(PyEVMBackend())))\r\n\r\n\r\nclass TestMyERC20Contract(unittest.TestCase):\r\n\r\n    def test(self):\r\n        # compiler is a class I wrote which performs contract compilation\r\n        compiler = ContractCompiler()\r\n        contract_interface = compiler.get_contract_interface(\"mycro.sol\", \"MycroCoin\")\r\n        contract = W3.eth.contract(abi=contract_interface['abi'], bytecode=contract_interface['bin'])\r\n\r\n        tx_hash = contract.constructor().transact(transaction={'from': W3.eth.accounts[0], 'gas': 3100000})\r\n        tx_receipt = W3.eth.waitForTransactionReceipt(tx_hash)\r\n        contract_address = tx_receipt['contractAddress']\r\n\r\n        abi = contract_interface['abi']\r\n        contract_instance = W3.eth.contract(address=contract_address, abi=abi,\r\n                                            ContractFactoryClass=ConciseContract)\r\n\r\n        # need to recreate the contract now that we've successfully deployed and have a contract address\r\n        contract = W3.eth.contract(address=contract_address, abi=contract_interface['abi'])\r\n\r\n        # seems to succeed\r\n        contract_instance.transfer(W3.eth.accounts[1], 10, transact={'from': W3.eth.accounts[0]})\r\n\r\n        # fails\r\n        contract.functions.totalSupply().call()\r\n\r\n        # also fails\r\n        contract_instance.totalSupply()\r\n```\r\n\r\nThe full output of the error is below. I get the same error for both of the failing lines.\r\n\r\n```\r\nTesting started at 9:28 AM ...\r\n/Users/paymahn/mycro/backend/venv/bin/python /Applications/PyCharm.app/Contents/helpers/pycharm/_jb_unittest_runner.py --target backend.tests.test_fake\r\nLaunching unittests with arguments python -m unittest backend.tests.test_fake in /Users/paymahn/mycro/backend/tests\r\n\r\n\r\nRan 1 test in 0.907s\r\n\r\nFAILED (errors=1)\r\n\r\nError\r\nTraceback (most recent call last):\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/web3/contract.py\", line 1363, in call_contract_function\r\n    output_data = decode_abi(output_types, return_data)\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/eth_abi/abi.py\", line 96, in decode_abi\r\n    return decoder(stream)\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 118, in __call__\r\n    return self.decode(stream)\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/eth_utils/functional.py\", line 22, in inner\r\n    return callback(fn(*args, **kwargs))\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 164, in decode\r\n    yield decoder(stream)\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 118, in __call__\r\n    return self.decode(stream)\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 186, in decode\r\n    raw_data = self.read_data_from_stream(stream)\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/eth_abi/decoding.py\", line 279, in read_data_from_stream\r\n    len(data),\r\neth_abi.exceptions.InsufficientDataBytes: Tried to read 32 bytes.  Only got 0 bytes\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/unittest/case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/unittest/case.py\", line 605, in run\r\n    testMethod()\r\n  File \"/Users/paymahn/mycro/backend/tests/test_fake.py\", line 34, in test\r\n    contract.functions.totalSupply().call()\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/web3/contract.py\", line 1106, in call\r\n    **self.kwargs\r\n  File \"/Users/paymahn/mycro/backend/venv/lib/python3.6/site-packages/web3/contract.py\", line 1385, in call_contract_function\r\n    raise BadFunctionCallOutput(msg) from e\r\nweb3.exceptions.BadFunctionCallOutput: Could not transact with/call contract function, is contract deployed correctly and chain synced?\r\n```\r\n",
  "closed_by": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1208/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1208/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/415049727",
    "html_url": "https://github.com/ethereum/py-evm/issues/1208#issuecomment-415049727",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1208",
    "id": 415049727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTA0OTcyNw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-22T14:23:07Z",
    "updated_at": "2018-08-22T14:23:07Z",
    "author_association": "MEMBER",
    "body": "This belongs in the `web3.py` repo, not an issue with py-evm.  Please re-open there.\r\n\r\nI'd suggest trying to check if there is code at the contract address using `w3.eth.getCode(contract_address)`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/415049727/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
