{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/453",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/453/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/453/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/453/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/453",
  "id": 303988687,
  "node_id": "MDU6SXNzdWUzMDM5ODg2ODc=",
  "number": 453,
  "title": "estimate_gas should work with unsigned transactions",
  "user": {
    "login": "dylanjw",
    "id": 8933231,
    "node_id": "MDQ6VXNlcjg5MzMyMzE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8933231?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dylanjw",
    "html_url": "https://github.com/dylanjw",
    "followers_url": "https://api.github.com/users/dylanjw/followers",
    "following_url": "https://api.github.com/users/dylanjw/following{/other_user}",
    "gists_url": "https://api.github.com/users/dylanjw/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dylanjw/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dylanjw/subscriptions",
    "organizations_url": "https://api.github.com/users/dylanjw/orgs",
    "repos_url": "https://api.github.com/users/dylanjw/repos",
    "events_url": "https://api.github.com/users/dylanjw/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dylanjw/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1169245993,
      "node_id": "MDU6TGFiZWwxMTY5MjQ1OTkz",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/Probably%20Close",
      "name": "Probably Close",
      "color": "5319e7",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2018-03-09T21:39:01Z",
  "updated_at": "2018-12-21T18:35:29Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "* py-evm Version: v0.2.0-alpha.6-621-gb1967a8\r\n* OS: linux\r\n* Python Version (python --version): 3.6.3\r\n\r\n### What is wrong?\r\n\r\nGas estimation should not require a signed transaction.  An example use case is getting a gas price estimate for transactions before local signing, where the private key is not available to the node.\r\n\r\n### How can it be fixed\r\n\r\nThe instance of `SpoofTransaction` can be extended to provide the rest of the missing attributes from an unsigned transaction object.  The following stack trace + exceptions show each dependent attribute that would need to be added to SpoofTransaction when passing an unsigned transaction object.  Note, Im passing in a SpoofTransaction object to chain.Chain.estimate_gas(), adding override attributes one at a time to get all required attributes: \r\n\r\n`instrinsic_gas`\r\n\r\n```python\r\neth_tester/main.py:445: in estimate_gas\r\n    raw_gas_estimate = self.backend.estimate_gas(raw_transaction)\r\neth_tester/backends/pyevm/main.py:444: in estimate_gas\r\n    return self.chain.estimate_gas(spoof_evm_transaction)\r\n../py-evm/evm/chains/base.py:478: in estimate_gas\r\n    return self.gas_estimator(state, transaction)\r\ncytoolz/functoolz.pyx:232: in cytoolz.functoolz.curry.__call__\r\n    ???\r\n../py-evm/evm/estimators/gas.py:54: in binary_gas_search\r\n    minimum_transaction = SpoofTransaction(transaction, gas=transaction.intrinsic_gas)\r\n[...]\r\nE           AttributeError: 'SpuriousDragonUnsignedTransaction' object has no attribute 'intrinsic_gas'\r\n```\r\n\r\n`get_sender()`\r\n\r\n```python\r\n    def __init__(self, transaction, **overrides):\r\n        if 'get_sender' not in overrides:\r\n>           current_sender = transaction.get_sender()\r\nE           AttributeError: 'SpuriousDragonUnsignedTransaction' object has no attribute 'get_sender'\r\n```\r\n\r\n`s`, `r`, & `v` in `validate_transaction`\r\n\r\n```\r\neth_tester/main.py:445: in estimate_gas\r\n    raw_gas_estimate = self.backend.estimate_gas(raw_transaction)\r\neth_tester/backends/pyevm/main.py:444: in estimate_gas\r\n    return self.chain.estimate_gas(spoof_evm_transaction)\r\n../py-evm/evm/chains/base.py:478: in estimate_gas\r\n    return self.gas_estimator(state, transaction)\r\ncytoolz/functoolz.pyx:232: in cytoolz.functoolz.curry.__call__\r\n    ???\r\n../py-evm/evm/estimators/gas.py:55: in binary_gas_search\r\n    if _get_computation_error(state, minimum_transaction) is None:\r\n../py-evm/evm/estimators/gas.py:29: in _get_computation_error\r\n    computation = state.execute_transaction(transaction)\r\n../py-evm/evm/vm/forks/spurious_dragon/vm_state.py:22: in execute_transaction\r\n    computation = _execute_frontier_transaction(self, transaction)\r\n../py-evm/evm/vm/forks/frontier/vm_state.py:56: in _execute_frontier_transaction\r\n    vm_state.validate_transaction(transaction)\r\n../py-evm/evm/vm/forks/homestead/vm_state.py:13: in validate_transaction\r\n    validate_homestead_transaction(self, transaction)\r\n../py-evm/evm/vm/forks/homestead/validation.py:14: in validate_homestead_transaction\r\n    if transaction.s > SECPK1_N // 2 or transaction.s == 0:\r\n../py-evm/evm/utils/spoof.py:10: in __getattr__\r\n    return getattr(self.spoof_target, attr)\r\n```\r\n\r\n`sender`\r\n\r\n```\r\neth_tester/main.py:445: in estimate_gas\r\n    raw_gas_estimate = self.backend.estimate_gas(raw_transaction)\r\neth_tester/backends/pyevm/main.py:444: in estimate_gas\r\n    return self.chain.estimate_gas(spoof_evm_transaction)\r\n../py-evm/evm/chains/base.py:478: in estimate_gas\r\n    return self.gas_estimator(state, transaction)\r\ncytoolz/functoolz.pyx:232: in cytoolz.functoolz.curry.__call__\r\n    ???\r\n../py-evm/evm/estimators/gas.py:55: in binary_gas_search\r\n    if _get_computation_error(state, minimum_transaction) is None:\r\n../py-evm/evm/estimators/gas.py:29: in _get_computation_error\r\n    computation = state.execute_transaction(transaction)\r\n../py-evm/evm/vm/forks/spurious_dragon/vm_state.py:22: in execute_transaction\r\n    computation = _execute_frontier_transaction(self, transaction)\r\n../py-evm/evm/vm/forks/frontier/vm_state.py:56: in _execute_frontier_transaction\r\n    vm_state.validate_transaction(transaction)\r\n../py-evm/evm/vm/forks/homestead/vm_state.py:13: in validate_transaction\r\n    validate_homestead_transaction(self, transaction)\r\n../py-evm/evm/vm/forks/homestead/validation.py:17: in validate_homestead_transaction\r\n    validate_frontier_transaction(evm, transaction)\r\n../py-evm/evm/vm/forks/frontier/validation.py:8: in validate_frontier_transaction\r\n    sender_balance = vm_state.read_only_state_db.get_balance(transaction.sender)\r\n../py-evm/evm/utils/spoof.py:10: in __getattr__\r\n    return getattr(self.spoof_target, attr)\r\nAttributeError: 'SpuriousDragonUnsignedTransaction' object has no attribute 'sender'\r\n```\r\n\r\nIm unsure if this approach will break anything.  A few questions I have:\r\n\r\n- what is the effect of inserting dummy values for v, s and r in the context of gas estimation?  Im hoping none.\r\n- Is this overdoing it with SpoofTransaction?  How much work is involved in an alternative solution? Like the doCall() method in go-ethereum that does apply_message on a vm state context and throws it away after getting the result.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/453/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/453/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372406622",
    "html_url": "https://github.com/ethereum/py-evm/issues/453#issuecomment-372406622",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/453",
    "id": 372406622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQwNjYyMg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T18:01:47Z",
    "updated_at": "2018-03-12T18:01:47Z",
    "author_association": "MEMBER",
    "body": "> what is the effect of inserting dummy values for v, s and r in the context of gas estimation? Im hoping none.\r\n\r\nShould be *minimal* depending on what else you spoof.  Looking into what happens when transactions get validated is probably the right place to start here.\r\n\r\n> Is this overdoing it\r\n\r\nAs long as our mechanism for gas estimation appropriately handles things like gas refunds, base transaction gas costs, etc, I'm fine with whatever approach we choose.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372406622/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/373234679",
    "html_url": "https://github.com/ethereum/py-evm/issues/453#issuecomment-373234679",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/453",
    "id": 373234679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIzNDY3OQ==",
    "user": {
      "login": "dylanjw",
      "id": 8933231,
      "node_id": "MDQ6VXNlcjg5MzMyMzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8933231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dylanjw",
      "html_url": "https://github.com/dylanjw",
      "followers_url": "https://api.github.com/users/dylanjw/followers",
      "following_url": "https://api.github.com/users/dylanjw/following{/other_user}",
      "gists_url": "https://api.github.com/users/dylanjw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dylanjw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dylanjw/subscriptions",
      "organizations_url": "https://api.github.com/users/dylanjw/orgs",
      "repos_url": "https://api.github.com/users/dylanjw/repos",
      "events_url": "https://api.github.com/users/dylanjw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dylanjw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-15T01:57:43Z",
    "updated_at": "2018-03-15T01:57:43Z",
    "author_association": "MEMBER",
    "body": "I think if the transaction execution refactor in: https://github.com/ethereum/py-evm/pull/383 could include an entrypoint to pass a message rather than a transaction, it would be pretty easy to implement a `call` method to use in the gas estimation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/373234679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/373444119",
    "html_url": "https://github.com/ethereum/py-evm/issues/453#issuecomment-373444119",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/453",
    "id": 373444119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzQ0NDExOQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-15T16:45:36Z",
    "updated_at": "2018-03-15T16:45:36Z",
    "author_association": "MEMBER",
    "body": "Can that be done by just manually constructing the `message` instance and then manually calling `executor.run_computation -> executor.run_post_computation` with the `message` instance?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/373444119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
