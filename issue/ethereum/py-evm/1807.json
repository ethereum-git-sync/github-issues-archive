{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/1807",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/1807/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/1807/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/1807/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/1807",
  "id": 476618088,
  "node_id": "MDU6SXNzdWU0NzY2MTgwODg=",
  "number": 1807,
  "title": "Loosen hard dependency on `DatabaseAPI` to allow more flexibility in storage.",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-08-05T01:22:18Z",
  "updated_at": "2019-11-29T15:51:08Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nI *think* our database model needs thought.\r\n\r\nWe are already in a good place having `HeaderDB`, `ChainDB`, `AccountDB` and `AccountStorageDB`.  Conceptually I think these constructs are the right direction.\r\n\r\nHowever, everything we do is heavily tied to a base key/value store architecture based on the `DatabaseAPI` (previously `BaseDB`).  This constrains us to a few things which I think need to be addressed at some point for Trinity to really thrive.\r\n\r\n1. Only a key/value store type of API for interacting with the database.\r\n2. Combined storage for all Chain and state data\r\n\r\n\r\n### How can it be fixed\r\n\r\nI'm only just starting to think about this but the *ideal* solution should be able to support the following functionality.\r\n\r\n1. Separate storage mechanisms for different data types (headers, blocks, transactions, receipts, account state, contract state).\r\n    - We should be able to store each of these separately if desired.\r\n2. Separate storage mechanisms for the same data types\r\n    - We should be able to store **old** chain data in a different spot than new chain data.\r\n\r\nWe can likely already accomplish the majority of these things using the existing `ChainDB` and `HeaderDB` APIs however I believe we have to eliminate the base requirement that these APIs simply depend on a simple key-value store to allow for them to leverage different storage mechanisms.\r\n\r\nOne complication that we have to deal with now is that the `VirtualMachineAPI` and `ChainAPI` both have hard dependencies on the `DatabaseAPI`.  For now, we can probably get away with defining a base abstraction for accessing raw account state and still allow each `VirtualMachineAPI` implementation to wrap that in it's own APIs specific to it's chain rules.  Same with `AccountStorageDB`.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/1807/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/1807/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/559750631",
    "html_url": "https://github.com/ethereum/py-evm/issues/1807#issuecomment-559750631",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1807",
    "id": 559750631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTc1MDYzMQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T10:53:57Z",
    "updated_at": "2019-11-29T10:54:11Z",
    "author_association": "MEMBER",
    "body": "As you say, I think we are already half way there. What we currently have with `HeaderDB`, `AccountDB` is not too far from something like the repository pattern imho.\r\n\r\n```python\r\nclass RepositoryAPI(ABC, Generic[TEntity, TEntityKey]):\r\n\r\n    @abstractmethod\r\n    def find(self, key TEntityKey) -> TEntity:\r\n        ...\r\n\r\n    @abstractmethod\r\n    def add(self, key TEntity) -> None:\r\n        ...\r\n\r\n    @abstractmethod\r\n    def delete(self, key TEntityKey) -> None:\r\n        ...\r\n```\r\n\r\nWe'd then have `BlockRepository`, `TransactionRepository`, `ReceiptRepository` and so on. Each of them can possibly use a different technology for persistence and one could also split things further up to have different repositories for the same type to create things like `AncientBlockRepository` etc.\r\n\r\nThis isn't too different from where we are except that (as you pointed out) we are currently bleeding a raw `DatabaseAPI` directly into the `Chain` and `VM`. I guess that's the main thing to tackle. If we get rid of that, then each entity is accessed by it's own repository or (db if you will, it's all just names...) and each could theoretically use it's entirely different way of persistence.\r\n\r\nNot sure if this adds anything from what you've already said but I just stumbled over this issue today when I was working on #1886 and thought I leave a comment.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/559750631/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/559829505",
    "html_url": "https://github.com/ethereum/py-evm/issues/1807#issuecomment-559829505",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/1807",
    "id": 559829505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTgyOTUwNQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T15:51:08Z",
    "updated_at": "2019-11-29T15:51:08Z",
    "author_association": "MEMBER",
    "body": "There is one nuance to this which is that some of these need *context*.  For example we probably need to store the most recent 1000 blocks somewhere like a fast K/V store, but then once blocks are at least 1000 blocks old then they would be migrated to the ancient block store.  This means that the database needs to have some concept of context into what the canonical chain head is...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/559829505/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
