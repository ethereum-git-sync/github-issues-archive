{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/258",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/258/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/258/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/258/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/258",
  "id": 287164384,
  "node_id": "MDU6SXNzdWUyODcxNjQzODQ=",
  "number": 258,
  "title": "Interaction between shard chain client and main chain node",
  "user": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-01-09T17:13:10Z",
  "updated_at": "2018-09-26T07:58:07Z",
  "closed_at": "2018-09-26T07:58:07Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\nLet's discuss where/when the `ShardChain` object or other objects would call VMC handler.\r\n\r\nSome known cases:\r\n1. CLI: the validators would call `deposit` or `withdraw` functions.\r\n2. Shard chain clients need to watch the main chain VMC state **all the time**.\r\n    * The `add_header` log would trigger shard chain clients to update their head collation.\r\n    * Validators have to call `get_eligible_proposer` periodically to check if they are the sampled collator.\r\n3. Before `create_collation` algorithm  (looks like would be implemented in `ShardVM`), the validators need to have some main chain data of `period_start_prevhash`.\r\n3. During `create_collation` algorithm, it requires calling `fetch_candidate_head` to get data from VMC.\r\n4. After `create_collation` algorithm, the collator would call `add_header` function.\r\n\r\n\r\n### How can it be fixed\r\nTBD\r\n",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/258/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/258/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356351551",
    "html_url": "https://github.com/ethereum/py-evm/issues/258#issuecomment-356351551",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/258",
    "id": 356351551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjM1MTU1MQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-09T17:15:58Z",
    "updated_at": "2018-01-09T17:15:58Z",
    "author_association": "MEMBER",
    "body": "@mhchia  Would you mind filling this ticket?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/356351551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357418611",
    "html_url": "https://github.com/ethereum/py-evm/issues/258#issuecomment-357418611",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/258",
    "id": 357418611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzQxODYxMQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-13T08:27:49Z",
    "updated_at": "2018-01-13T08:27:49Z",
    "author_association": "MEMBER",
    "body": "I realized that it's better to focus on how/when/where do the interaction between shard chain client and main chain node, so I updated the title and content of this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/357418611/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/359879350",
    "html_url": "https://github.com/ethereum/py-evm/issues/258#issuecomment-359879350",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/258",
    "id": 359879350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTg3OTM1MA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T18:09:34Z",
    "updated_at": "2018-01-23T18:09:34Z",
    "author_association": "MEMBER",
    "body": "I use some user stories to describe the requirements/functionality and some possible procedures that related to main chain, and there may be *other better mechanisms* to achieve the same goals. (I don’t intend to introduce any new development model into our work, just try to make it intelligible and the user stories may help us to figure out the basic function of the shard clients.)\r\n\r\nNone of the high-level stuff should be started implementing immediately, but I believe that having a clear picture could benefit the low-level implementation too.\r\n\r\nThe following doc is still in discussion. Thank @mhchia for reviewing. Any feedback is highly appreciated.\r\n\r\n---\r\n\r\n## The User Types\r\n\r\n### 1. Regular shard client\r\n* Request archival nodes for witness data \r\n* Types\r\n    1. Validators (Collator)\r\n        * Shuffling depends on VMC\r\n    2. Only watching specific shards\r\n\r\n### 2. Archival shard node\r\n* Regular clients + Watching all shards + Storing archive data\r\n\r\n### 3. Main chain full node\r\n* Don’t need to mine, just sync with the main chain\r\n* Provide RPC interface\r\n\r\n> p.s. we don’t discuss the light client now.\r\n\r\n\r\n## Communication Approaches\r\n\r\n* **[JSON-RPC]**: the shard client calls main chain full node\r\n* **[P2P]**: the Sharding Wire Protocol\r\n\r\n## User Stories\r\n\r\n### Story 1: The validator needs to have a tool to manage the keystore\r\n\r\n### Story 2: The shard client user can deposit on VMC to become a validator\r\n* **[UX]** Trigger **deposit procedure** on CLI;\r\n* **deposit procedure**\r\n\t* **[JSON-RPC]** Send the `deposit-tx` to VMC;\r\n\t* **[JSON-RPC]** Use log filter to get the execution result - `the_validator_index`;\r\n\t* Store the `validator_index` to the profile.\r\n\r\n### Story 3: The shard client validator can withdraw from VMC\r\n* **[UX]** Trigger **withdraw procedure** on CLI;\r\n* **withdraw procedure**\r\n\t* Get the `validator_index` from the profile;\r\n\t* **[JSON-RPC]** Send the `withdraw-tx` to VMC;\r\n\t* **[JSON-RPC]** Use log filter to get the execution result - `is_success` or not.\r\n\t\r\n### Story 4: The shard regular node and the archival shard node needs to follow the status of VMC\r\n* Get the latest collation header information from VMC:\r\n\t* **[JSON-RPC]** Use log filter to watch the `CollationAdded` log from `add_header` function of VMC for the shard that the client’s watching for (in the local `watching` list);\r\n\t* **[P2P]** If there’s a new collation in VMC, try to download the collation.\r\n* On receiving a new collation, apply the fork choice rule with the collation info from VMC.\r\n\r\n### Story 5: The shard validator needs to be ready to build the collation and then build the collation.\r\n* The shard validator needs to make the message call  `get_eligible_proposor` to check if they are the collator periodically:\r\n    * **[Polling JSON-RPC]** Ask the main chain via message-call;\r\n\t    * Now the `SHARD_COUNT` is 100, if we need to poll with 100 times / 14s? (14s is the average block time)\r\n\t\t    * *Or* maybe we can register a callback function doing this to the block filter in web3.py?\r\n\r\n                ```python\r\n                def callback(vmc):\r\n                    valcode_addr = vmc.call(params).get_eligible_proposer(shard_id, period)\r\n                    if valcode_addr == my_address:\r\n                        # I am collator, do something\r\n                ```\r\n* If the validator calls `get_eligible_proposer` and finds itself to be the collator (has the permission to propose collation):\r\n\t* Add the given `shard_id` in local `watching` list;\r\n\t* Do P2P Discovery on the shard chain;\r\n\t* `CREATE_COLLATION` - see [sharing/doc.md](https://github.com/ethereum/sharding/blob/develop/docs/doc.md) for detailed procedure, the following steps could be in parallel:\r\n\t\t* [fetch_candidate_head](https://github.com/ethereum/py-evm/pull/265) will apply `getNextLog`;\r\n\t\t\t* **[JSON-RPC]**  Use log filter to query `CollationAdded` logs.\r\n\t\t* **[P2P]** Download the collation from archival shard nodes;\r\n\t\t* **[JSON-RPC]** Before executing txs, the shard client needs some information from main chain:\r\n\t\t\t1. *256-previous-main-chain-blockhashes*;\r\n\t\t\t2. the block header of the `period_start_prevhash` block to provide the blockchain information opcodes in VM.\r\n\t\t * Transaction-gathering\r\n\t\t\t * **[P2P]** Get the available transactions\r\n\t\t * Apply transactions and finalize the collation\r\n\t\t * Broadcast the collation\r\n\t\t\t * **[P2P]** Broadcast to shard chain via Wire Protocol;\r\n\t\t\t * **[JSON-RPC]** Broadcast to main chain via sending `add_header` transaction.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/359879350/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360193071",
    "html_url": "https://github.com/ethereum/py-evm/issues/258#issuecomment-360193071",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/258",
    "id": 360193071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDE5MzA3MQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T16:34:37Z",
    "updated_at": "2018-01-24T16:34:37Z",
    "author_association": "MEMBER",
    "body": "> Story 4: The shard regular node and the archival shard node needs to follow the status of VMC\r\n\r\nYou also need to handle the possibility of a reorg on the main chain, so blocks (and therefore `CollationAdded` logs) getting reverted.\r\n\r\n> Do P2P Discovery on the shard chain;\r\n\r\nNote that for v1, if we want to simplify this part we can just do everything over one p2p network. Creating a p2p network where you can reliably do discovery on any of the shard sub-channels within a few seconds may be nontrivial.\r\n\r\n> Now the SHARD_COUNT is 100, if we need to poll with 100 times / 14s? (14s is the average block time)\r\n\r\nIf this is really that bad for efficiency, then we could add to the valmgr contract a multi-poll option where you do one call and it checks the eligible proposer on all the shards.\r\n\r\n> fetch_candidate_head will apply getNextLog;\r\n\r\nTechnically, it's `guess_head` that you want to do here, not `fetch_candidate_head`. `fetch_candidate_head` is a method that just outputs a possible head; `guess_head` _uses_ `fetch_candidate_head` but then tries to check that block's ancestors\r\n\r\n> [JSON-RPC] Before executing txs, the shard client needs some information from main chain:\r\n256-previous-main-chain-blockhashes;\r\n\r\nNote that this is required not just to make your own collation, but also to verify previous collations as part of `guess_head`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/360193071/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
