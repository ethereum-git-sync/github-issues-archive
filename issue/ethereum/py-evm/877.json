{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/877",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/877/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/877/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/877/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/877",
  "id": 329814024,
  "node_id": "MDU6SXNzdWUzMjk4MTQwMjQ=",
  "number": 877,
  "title": "Check if we can initialize the PeerPool earlier",
  "user": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-06-06T10:47:45Z",
  "updated_at": "2018-06-21T09:14:46Z",
  "closed_at": "2018-06-21T09:14:46Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\n\r\nThis is a follow up to the discussion @pipermerriam and I had [here](https://github.com/ethereum/py-evm/pull/867#discussion_r193187256).\r\n\r\nCurrently the `PeerPool` isn't available until some other async tasks are resolved. This issue serves as a reminder to check whether the `PeerPool` could be created synchronously earlier.\r\n\r\n### How can it be fixed\r\n\r\nA possible idea would be to create the `PeerPool` early on without the dependencies that first need to be resolved asynchronously and then as a second step, once these dependencies are resolved, call some initialization API on the `PeerPool`. Before that, the `PeerPool` would already exist but would reside in some sort of `bootstrapping` mode until that API is called.\r\n\r\nNot sure, if I like that tbh. ¯\\_(ツ)_/¯\r\n",
  "closed_by": {
    "login": "cburgdorf",
    "id": 521109,
    "node_id": "MDQ6VXNlcjUyMTEwOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cburgdorf",
    "html_url": "https://github.com/cburgdorf",
    "followers_url": "https://api.github.com/users/cburgdorf/followers",
    "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
    "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
    "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
    "repos_url": "https://api.github.com/users/cburgdorf/repos",
    "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/877/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/877/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/395145049",
    "html_url": "https://github.com/ethereum/py-evm/issues/877#issuecomment-395145049",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/877",
    "id": 395145049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTE0NTA0OQ==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-06T17:13:10Z",
    "updated_at": "2018-06-06T17:13:10Z",
    "author_association": "MEMBER",
    "body": "ISTM that the problem here is the fact that `Server.peer_pool` only gets set in `Server._run()` and not in `Server.__init__()`, as it should. IIUC we do that because of some (far from ideal) server or sharding tests. If we fix those tests we could then initiate a `PeerPool` and assign it to `Server.peer_pool` in `Server.__init__()`, as I think we should do",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/395145049/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/395450437",
    "html_url": "https://github.com/ethereum/py-evm/issues/877#issuecomment-395450437",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/877",
    "id": 395450437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTQ1MDQzNw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T14:54:25Z",
    "updated_at": "2018-06-07T14:54:25Z",
    "author_association": "MEMBER",
    "body": "@gsalgado That is correct but the `PeerPool` depends on the `DiscoveryProtocol`\r\n\r\nhttps://github.com/ethereum/py-evm/blob/af3ac1ddd3c5cf18253b79ce4c9ea356556c83f1/p2p/server.py#L266\r\n\r\nWhich depends on the external ip address\r\n\r\nhttps://github.com/ethereum/py-evm/blob/af3ac1ddd3c5cf18253b79ce4c9ea356556c83f1/p2p/server.py#L263-L264\r\n\r\nWhich we get from the `upnp_dev`\r\n\r\nhttps://github.com/ethereum/py-evm/blob/af3ac1ddd3c5cf18253b79ce4c9ea356556c83f1/p2p/server.py#L252\r\n\r\nWhich we `await` on in the beginning.\r\n\r\nhttps://github.com/ethereum/py-evm/blob/af3ac1ddd3c5cf18253b79ce4c9ea356556c83f1/p2p/server.py#L249\r\n\r\nSo what I meant to say is that it seems to me that we can create the `PeerPool` early on in `__init__` but we either have to pass in something like an `Awaitable[DiscoveryProtocol]` and `await` that inside or we introduce some method to set the `DiscoveryProtocol` after creation. Either way it seems that this would leave the `PeerPool` in a state where it can't fully operate yet until the `DiscoveryProtocol` (which is waiting on the external IP) is resolved.\r\n\r\nAm I reading that wrong?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/395450437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/395683725",
    "html_url": "https://github.com/ethereum/py-evm/issues/877#issuecomment-395683725",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/877",
    "id": 395683725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTY4MzcyNQ==",
    "user": {
      "login": "gsalgado",
      "id": 412274,
      "node_id": "MDQ6VXNlcjQxMjI3NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/412274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsalgado",
      "html_url": "https://github.com/gsalgado",
      "followers_url": "https://api.github.com/users/gsalgado/followers",
      "following_url": "https://api.github.com/users/gsalgado/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions",
      "organizations_url": "https://api.github.com/users/gsalgado/orgs",
      "repos_url": "https://api.github.com/users/gsalgado/repos",
      "events_url": "https://api.github.com/users/gsalgado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsalgado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T08:07:47Z",
    "updated_at": "2018-06-08T08:07:47Z",
    "author_association": "MEMBER",
    "body": "Oh, that is right, `DiscoveryProtocol` is the problematic piece... Can't think of a nice way to solve this :-(",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/395683725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/395698896",
    "html_url": "https://github.com/ethereum/py-evm/issues/877#issuecomment-395698896",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/877",
    "id": 395698896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTY5ODg5Ng==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T09:04:28Z",
    "updated_at": "2018-06-08T09:04:28Z",
    "author_association": "MEMBER",
    "body": "@gsalgado I have tinkered a bit with the idea of creating the PeerPool and passing in a `Future[DiscoveryProtocol]` (aka `Awaitable[DiscoveryProtocol]`). It's not pretty yet because it basically just pushes down the problem one level deeper (now `PeerPool` will magically have the `self.discovery` appearing in the *done callback*)\r\n\r\nBut it's really just earlier WIP stuff anyway and it's my first attempt of getting my feet wet with asyncio in Python :sweat_smile: \r\n\r\nhttps://github.com/ethereum/py-evm/pull/886",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/395698896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/399033503",
    "html_url": "https://github.com/ethereum/py-evm/issues/877#issuecomment-399033503",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/877",
    "id": 399033503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTAzMzUwMw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-21T09:14:46Z",
    "updated_at": "2018-06-21T09:14:46Z",
    "author_association": "MEMBER",
    "body": "Solved problem. Closing.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/399033503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
