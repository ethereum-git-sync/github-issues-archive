{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/592/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/592/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/592/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/592",
  "id": 317353283,
  "node_id": "MDU6SXNzdWUzMTczNTMyODM=",
  "number": 592,
  "title": "Add benchmarking test suite.",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 631592722,
      "node_id": "MDU6TGFiZWw2MzE1OTI3MjI=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/Good%20First%20Issue",
      "name": "Good First Issue",
      "color": "0e8a16",
      "default": false,
      "description": null
    },
    {
      "id": 983616758,
      "node_id": "MDU6TGFiZWw5ODM2MTY3NTg=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/type:%20tests",
      "name": "type: tests",
      "color": "eeeeee",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 22,
  "created_at": "2018-04-24T18:56:49Z",
  "updated_at": "2018-12-15T01:16:55Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Currently we don't have good benchmarking tools.\r\n\r\nLets write a script that does the following.\r\n\r\n- ~~For each set of mainnet VM rules, build a chain of X empty blocks.~~ ✅\r\n  - ~~one using `mine_block`~~ ✅\r\n  - ~~another using `import_block`~~ ✅\r\n- ~~For each set of mainnet VM rules, build a chain of X block, each full of simple value transfer transactions.~~ ✅\r\n  - ~~`sender` should be static across all tests~~ ✅\r\n  - ~~one run using empty `to` accounts.~~ ✅\r\n  - ~~one run using existing `to` accounts.~~ ✅\r\n- For each set of mainnet VM rules, benchmark using the open zeppelin ERC20 token contract.\r\n  - one run with X calls to `transfer`\r\n  - one run with X calls to `approve`\r\n  - one run with X calls to `transferFrom`\r\n- ~For each set of mainnet VM rules, benchmark deployment of the open zeppelin ERC20 token contract.~ ✅\r\n- For each set of mainnet VM rules, benchmark DOS style transaction spam.\r\n  - Make X calls to a contract which uses all available gas to create empty contracts.\r\n  - Make X calls to a contract which uses all available gas on SSTORE operations.\r\n  - Two more same as above but which revert at the end of contract execution.\r\n- ~For each set of mainnet VM rules, benchmark gas per second for block import.~ ✅\r\n  - ~Measure for pure value transfer transactions.~ ✅\r\n  - ~Measure for representative EVM execution (which will have to be an approximation.  probably worth starting with just ERC20 contracts and transfers and then expanding from there.~ ✅\r\n- ensure blocks use pre  generated fixtures with real blocks that qualify the PoW so that we don't miss to benchmark the POW validation/verification overhead\r\n- have at least one benchmark to use `LevelDB` rather than `MemoryDB` (ideally all of them but may be too big of an performance hit)\r\n\r\nThese benchmark scripts should produce detailed output to the console and be added as a stand-alone test run in our CI environment.  Any failing benchmark scripts should cause CI to fail.\r\n\r\nStats worth tracking:\r\n\r\n- time to run\r\n- total DB size",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/592/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/592/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384119150",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-384119150",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 384119150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDExOTE1MA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-25T00:10:32Z",
    "updated_at": "2018-04-25T00:10:32Z",
    "author_association": "MEMBER",
    "body": "> Any failing benchmark scripts should cause CI to fail.\r\n\r\nWhere passing presumably means both correctness and within some tolerance of a performance target.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384119150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384135360",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-384135360",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 384135360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDEzNTM2MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-25T01:49:22Z",
    "updated_at": "2018-04-25T01:49:22Z",
    "author_association": "MEMBER",
    "body": "> Where passing presumably means both correctness and within some tolerance of a performance target.\r\n\r\nI don't think so.  That statement was more to ensure that the benchmarks remain functional through code changes and merges as to not code rot.  I don't think it's reasonable to try and code in performance targets because there are going to be big differences depending on if things are running in travis, on you local machine, etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384135360/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384607545",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-384607545",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 384607545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDYwNzU0NQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T11:33:01Z",
    "updated_at": "2018-04-26T11:33:01Z",
    "author_association": "MEMBER",
    "body": "Just to reassure I got it right:\r\n\r\n1. These would most likely be standalone scripts not using `pytest`\r\n2. The benchmarking aspect has nothing to do with the runtime performance but is really all about ensuring certain test scenarios still work.\r\n\r\nQuestioning my own question: What's the reason these would not just be a couple new pytest tests? The detailed console output? If yes, I think `pytest` could be run with [`-s`](https://stackoverflow.com/questions/14405063/how-can-i-see-normal-print-output-created-during-pytest-run/41533292) to see all regular output.\r\n\r\nI think that would make a good ticket for me to work on.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384607545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384724251",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-384724251",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 384724251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDcyNDI1MQ==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T17:31:10Z",
    "updated_at": "2018-04-26T17:33:06Z",
    "author_association": "MEMBER",
    "body": "> What's the reason these would not just be a couple new pytest tests? The detailed console output?\r\n\r\nThere are a number of parameters you might want to tweak when running a benchmark, like how many iterations to run, or which database to use. It seems unnecessarily complicated to pass those parameters in through pytest.\r\n\r\nBut (additionally) running the benchmark in pytest is valuable to make sure that the benchmark is kept up to date with any trinity API changes. I'm imagining a test as simple as:\r\n\r\n```py\r\ndef test_benchmarking_is_stable():\r\n    run_benchmark(iterations=3)\r\n    # yay, didn't crash\r\n```\r\n\r\n> The benchmarking aspect has nothing to do with the runtime performance but is really all about ensuring certain test scenarios still work.\r\n\r\nThe test is to make sure the benchmark completes without errors. The benchmarking _is_ about runtime performance.\r\n\r\n---\r\n\r\nBut also this is my loose interpretation of where Piper was going, so all of this is only IMO.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384724251/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384731314",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-384731314",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 384731314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDczMTMxNA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T17:54:32Z",
    "updated_at": "2018-04-26T17:55:42Z",
    "author_association": "MEMBER",
    "body": "Maybe clearer to talk about this in two separate components.\r\n\r\n1. A benchmarking script (maybe in `./scripts/benchmark.py`) that could be run with `python scripts/benchmark.py` which output benchmarking results to stdout.  Doesn't need to be fancy, doesn't need CLI args or anything like that really for MVP.\r\n2. A new test suite which imports and runs the benchmarks as part of CI to ensure that the benchmarking scripts are maintained in working order.\r\n\r\nBenchmarks from the script are a noisy signal that we can use to make rough comparisons of performance changes as well as a really noisy data set for performance over time since we can pull data from historical CI runs.\r\n\r\nI think this is equivalent to what @carver wrote but in my own words.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384731314/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384734349",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-384734349",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 384734349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDczNDM0OQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T18:03:18Z",
    "updated_at": "2018-04-26T18:03:18Z",
    "author_association": "MEMBER",
    "body": "Got it. I'd be happy to give that a try. The stuff I'll learn from putting the pieces together will greatly help me for the documentation tasks. Killing two birds with one stone. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/384734349/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/385981595",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-385981595",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 385981595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTk4MTU5NQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T13:42:07Z",
    "updated_at": "2018-05-02T13:42:07Z",
    "author_association": "MEMBER",
    "body": "Let me play the blockchain noob again. When you say\r\n\r\n>For each set of mainnet VM rules, build a chain of X empty blocks\r\n\r\nWhat different kind of sets are we talking about? Isn't the only right set as of now the following:\r\n\r\nhttps://github.com/ethereum/py-evm/blob/00e494c00841e4c670fa9041cce72271c4d82355/evm/chains/mainnet/__init__.py#L22-L28\r\n\r\nDo you mean we need to build chains for the chain as it was back then at Frontier fork, at the Homestead fork etc pp? If that is what is meant my follow up question would go: Why would we care about standalone configs for these past forks if the *current* mainnet chain incorporates these VMs anyway?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/385981595/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386040383",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-386040383",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 386040383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjA0MDM4Mw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T16:34:39Z",
    "updated_at": "2018-05-02T16:34:39Z",
    "author_association": "MEMBER",
    "body": "```python\r\nOnlyFrontierChain(Chain):\r\n    vm_configuration = (\r\n        (0, FrontierVM),\r\n    )\r\n```\r\n\r\nSimply a chain with only a single VM in its configuration.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386040383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386040837",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-386040837",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 386040837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjA0MDgzNw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T16:36:06Z",
    "updated_at": "2018-05-02T16:36:06Z",
    "author_association": "MEMBER",
    "body": "Why would we care about standalone configs for these past forks if the *current* mainnet chain incorporates these VMs anyway? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386040837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386040975",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-386040975",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 386040975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjA0MDk3NQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T16:36:32Z",
    "updated_at": "2018-05-02T16:36:32Z",
    "author_association": "MEMBER",
    "body": "Also worth pointing out that this is the reason for the `Configurable` API.\r\n\r\nInstead of having to define all of these classes just for testing you can do this.\r\n\r\n```python\r\n@pytest.fixture(params=[FrontierVM, HomesteadVM, ...])\r\ndef chain_for_testing(request):\r\n    return Chain.configure(vm_configuration=((0, request.param),))\r\n```\r\n\r\nAllows for dynamically creating alternately configured objects for dynamic scenarios like testing.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386040975/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386041719",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-386041719",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 386041719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjA0MTcxOQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T16:38:57Z",
    "updated_at": "2018-05-02T16:38:57Z",
    "author_association": "MEMBER",
    "body": "> Why would we care about standalone configs for these past forks if the current mainnet chain incorporates these VMs anyway?\r\n\r\nAh, we're benchmarking any subtle differences in the different in the VM rules and how they effect performance.  Each VM may have different logic for importing and finalizing blocks so we want to be able to see if one set of rules is majorly effecting performance.  Without testing each VM in isolation we'd likely only be hitting either the earliest or latest VM rules, not realizing that some recent change caused the `HomesteadVM` to take a 10x performance hit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386041719/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386043392",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-386043392",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 386043392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjA0MzM5Mg==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T16:44:35Z",
    "updated_at": "2018-05-02T16:44:35Z",
    "author_association": "MEMBER",
    "body": ">Without testing each VM in isolation we'd likely only be hitting either the earliest or latest VM rules, not realizing that some recent change caused the HomesteadVM to take a 10x performance hit.\r\n\r\nNails it. Thanks! ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386043392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386806464",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-386806464",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 386806464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjgwNjQ2NA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-05T13:40:30Z",
    "updated_at": "2018-05-05T13:40:30Z",
    "author_association": "MEMBER",
    "body": "@cburgdorf I added one more suite which might be the most important one on measuring gas per second for importing blocks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386806464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386816636",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-386816636",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 386816636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjgxNjYzNg==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-05T16:17:03Z",
    "updated_at": "2018-05-05T16:17:03Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam makes perfect sense. I initially planned to have a super early draft PR open this week but didn't manage in time. Now I'll be gone from Monday so I have to delay. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386816636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386838495",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-386838495",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 386838495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjgzODQ5NQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-05T22:08:22Z",
    "updated_at": "2018-05-05T22:08:35Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam I started hacking *something* together but it's really just a dirty pile of :hankey: at this point. Just opening the PR to for the illusion of progress ;)\r\n\r\nhttps://github.com/ethereum/py-evm/pull/650",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/386838495/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/387117998",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-387117998",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 387117998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzExNzk5OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-07T16:14:58Z",
    "updated_at": "2018-05-07T16:14:58Z",
    "author_association": "MEMBER",
    "body": "That is some good looking 💩 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/387117998/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/398880943",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-398880943",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 398880943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODg4MDk0Mw==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T20:11:50Z",
    "updated_at": "2018-06-20T20:11:50Z",
    "author_association": "MEMBER",
    "body": "I re-labeled this as \"Good First Issue\". The ground work for this is done and it's a matter of adding further benchmarks [here](https://github.com/ethereum/py-evm/tree/9a527cacc5136a0c9c08744138fa7f421afc5bca/scripts/benchmark/checks)\r\n\r\nI'm happy to provide guidance as good as I can.\r\n\r\n@williambannas Might also be interesting to you?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/398880943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/398914769",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-398914769",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 398914769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODkxNDc2OQ==",
    "user": {
      "login": "williambannas",
      "id": 8254092,
      "node_id": "MDQ6VXNlcjgyNTQwOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8254092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/williambannas",
      "html_url": "https://github.com/williambannas",
      "followers_url": "https://api.github.com/users/williambannas/followers",
      "following_url": "https://api.github.com/users/williambannas/following{/other_user}",
      "gists_url": "https://api.github.com/users/williambannas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/williambannas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/williambannas/subscriptions",
      "organizations_url": "https://api.github.com/users/williambannas/orgs",
      "repos_url": "https://api.github.com/users/williambannas/repos",
      "events_url": "https://api.github.com/users/williambannas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/williambannas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T22:14:29Z",
    "updated_at": "2018-06-20T22:14:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cburgdorf  id love to help out with this issue thank you ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/398914769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/404302595",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-404302595",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 404302595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDMwMjU5NQ==",
    "user": {
      "login": "williambannas",
      "id": 8254092,
      "node_id": "MDQ6VXNlcjgyNTQwOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8254092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/williambannas",
      "html_url": "https://github.com/williambannas",
      "followers_url": "https://api.github.com/users/williambannas/followers",
      "following_url": "https://api.github.com/users/williambannas/following{/other_user}",
      "gists_url": "https://api.github.com/users/williambannas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/williambannas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/williambannas/subscriptions",
      "organizations_url": "https://api.github.com/users/williambannas/orgs",
      "repos_url": "https://api.github.com/users/williambannas/repos",
      "events_url": "https://api.github.com/users/williambannas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/williambannas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T20:41:20Z",
    "updated_at": "2018-07-11T20:41:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "> ensure blocks use pre generated fixtures with real blocks that qualify the PoW so that we don't miss to benchmark the POW validation/verification overhead\r\n\r\nIs this already satisfied? In my understanding it is, because chain.mine_block() is called which would do the validation/verification. (I think after going through it)\r\n\r\nOr should there be another benchmark that mines empty blocks with POW including the nonce and the mix_hash?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/404302595/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/404429011",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-404429011",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 404429011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDQyOTAxMQ==",
    "user": {
      "login": "cburgdorf",
      "id": 521109,
      "node_id": "MDQ6VXNlcjUyMTEwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/521109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cburgdorf",
      "html_url": "https://github.com/cburgdorf",
      "followers_url": "https://api.github.com/users/cburgdorf/followers",
      "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
      "repos_url": "https://api.github.com/users/cburgdorf/repos",
      "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-12T08:14:55Z",
    "updated_at": "2018-07-12T08:14:55Z",
    "author_association": "MEMBER",
    "body": "@williambannas \r\n\r\n>Is this already satisfied? \r\n\r\nIt is not. We currently disable verification as seen here:\r\n\r\nhttps://github.com/ethereum/py-evm/blob/8335f32888a1429f39787e236ead27e23ae92e0d/scripts/benchmark/utils/chain_plumbing.py#L87\r\n\r\nThis allows us to call `mine_block()` to basically anchor a block in the chain that, under real world conditions, would not be accepted because it doesn't qualify the proof of work algorithm.\r\n\r\nThe idea would be to create fixture files with real blocks that *do* qualify the PoW so that we don't need to disable the verification.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/404429011/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/409438188",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-409438188",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 409438188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTQzODE4OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-01T03:32:25Z",
    "updated_at": "2018-08-01T03:32:25Z",
    "author_association": "MEMBER",
    "body": "I think we'd benefit from benchmarking both the fast sync and state sync operations.  I haven't spent much time thinking about what exactly we should benchmark here, but I think it would be valuable for us to have a good understanding of what the theoretical maximum throughput of those services can be.\r\n\r\ncc @gsalgado \r\n\r\nOff the top of my head:\r\n\r\n- State sync\r\n  - For each of 1-n peer connections, all of which have the desired state trie, how fast can we sync as measured by trie-nodes-per-second\r\n- Fast sync\r\n  - For each of 1-n peer connections, all of which have the chain data we want, how fast can we sync as measured by blocks/s and transactions/s using *heavy* blocks full of basic value transfer transactions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/409438188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/447524010",
    "html_url": "https://github.com/ethereum/py-evm/issues/592#issuecomment-447524010",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/592",
    "id": 447524010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzUyNDAxMA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-15T01:16:55Z",
    "updated_at": "2018-12-15T01:16:55Z",
    "author_association": "MEMBER",
    "body": "This is probably done, just need to run through all the proposed benchmarks to see if any are missing (and split them out into new issues)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/447524010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
