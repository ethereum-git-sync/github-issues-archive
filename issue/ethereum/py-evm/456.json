{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/456",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/456/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/456/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/456/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/456",
  "id": 304173720,
  "node_id": "MDU6SXNzdWUzMDQxNzM3MjA=",
  "number": 456,
  "title": "SMC (VMC) get_validators_max_index",
  "user": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-03-11T16:50:47Z",
  "updated_at": "2018-06-15T07:44:40Z",
  "closed_at": "2018-06-15T07:44:40Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\nIf the collator deposit (register) on SMC, `get_validators_max_index` will return a different result, and then the `get_eligible_proposer` (`get_eligible_collator`) function will return a different result with the same input for different lastest block number.\r\n\r\n### How can it be fixed\r\n1. When we were using \"shuffling cycle\" in the old PoC, we set `validators[validator_index].cycle` as the cycle that the validator would be included after. Now we can set `collators[validator_index].period` as the period number that the collator would be included after. \r\n2. Any better solution for `get_validators_max_index`....? The current solution limits the \"maximum collator size\" to `1024` so it's not cool.\r\n",
  "closed_by": {
    "login": "jannikluhn",
    "id": 29854669,
    "node_id": "MDQ6VXNlcjI5ODU0NjY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jannikluhn",
    "html_url": "https://github.com/jannikluhn",
    "followers_url": "https://api.github.com/users/jannikluhn/followers",
    "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
    "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
    "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
    "repos_url": "https://api.github.com/users/jannikluhn/repos",
    "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/456/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/456/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372197670",
    "html_url": "https://github.com/ethereum/py-evm/issues/456#issuecomment-372197670",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/456",
    "id": 372197670,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjE5NzY3MA==",
    "user": {
      "login": "mhchia",
      "id": 8223657,
      "node_id": "MDQ6VXNlcjgyMjM2NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8223657?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mhchia",
      "html_url": "https://github.com/mhchia",
      "followers_url": "https://api.github.com/users/mhchia/followers",
      "following_url": "https://api.github.com/users/mhchia/following{/other_user}",
      "gists_url": "https://api.github.com/users/mhchia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mhchia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mhchia/subscriptions",
      "organizations_url": "https://api.github.com/users/mhchia/orgs",
      "repos_url": "https://api.github.com/users/mhchia/repos",
      "events_url": "https://api.github.com/users/mhchia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mhchia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T05:29:54Z",
    "updated_at": "2018-03-12T05:32:08Z",
    "author_association": "MEMBER",
    "body": "1. I think `collators[validator_index].period` is a good solution, if we want to limit the result of `get_eligible_collator` to be fixed during a period. However, it will still need a `for` loop to iterate through the `collators`, and since `add_header` calls `get_eligible_collator`, the required gas of `add_header` will thus increase.\r\n\r\n2. IMO, Maybe we can just modify 1024 to a big enough number. Since the number of iterations of `for` loop is bound by\r\n```\r\nif i >= all_validator_slots_num:\r\n```\r\nwhere `all_validator_slots_num = self.num_validators + self.empty_slots_stack_top`, so it seems not a problem to just modify `1024`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372197670/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372230808",
    "html_url": "https://github.com/ethereum/py-evm/issues/456#issuecomment-372230808",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/456",
    "id": 372230808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjIzMDgwOA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T08:39:30Z",
    "updated_at": "2018-03-13T09:38:27Z",
    "author_association": "MEMBER",
    "body": "The problem is that a huge number loop may be a bad idea for gas estimating. And it's inefficient to loop the validator pool.\r\n\r\nAn alternative solution: minus the new validators that join the pool recently. \r\n**Warning: I haven't tested those codes yet....so it probably goes wrong...!**\r\n\r\n1. Add a new mapping `registered_period: uint256 period  -> uint256 collators_num`\r\nIn `deposit()`:\r\n\r\n```python\r\n@public\r\n@payable\r\ndef deposit() -> num:\r\n\r\n    ...\r\n\r\n    self.validators[index] = {\r\n        deposit: msg.value,\r\n        addr: validator_addr,\r\n    }\r\n    self.num_validators += 1\r\n    self.is_validator_deposited[validator_addr] = True\r\n\r\n+   current_period = floor(decimal(block.number / self.period_length))\r\n+   self.registered_period[current_period] += 1\r\n\r\n    log.Deposit(index, validator_addr, msg.value)\r\n\r\n    return index\r\n```\r\n\r\n2. Update `get_validators_max_index`. The input parameter `period` is the expected period and we assume that it wonâ€™t be called when `current_period > period`. (At least it's meaningless for collating when `current_period > period`.)\r\n\r\n```python\r\n@internal\r\ndef get_validators_max_index(period) -> num:\r\n    all_validator_slots_num = self.num_validators + self.empty_slots_stack_top\r\n\r\n+   preparing_collators_num = 0\r\n\r\n+   # from i = 0 to i = self.lookahead_periods\r\n+   for i in range(self.lookahead_periods + 1):\r\n+       preparing_collators_num += self.registered_period[period - i]\r\n+   return all_validator_slots_num - preparing_collators_num\r\n```\r\n\r\nIt takes additional mapping to log the period that the collator joined the pool in exchange for only 5 lookups times.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372230808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372233849",
    "html_url": "https://github.com/ethereum/py-evm/issues/456#issuecomment-372233849",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/456",
    "id": 372233849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjIzMzg0OQ==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T08:51:29Z",
    "updated_at": "2018-03-12T08:52:06Z",
    "author_association": "MEMBER",
    "body": "And we can set a deposit lockup window (which is longer than `lookahead_periods`) when calling `deposit/register`, so calling `withdraw/deregister` won't affect the recent `registered_period` logs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372233849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372241420",
    "html_url": "https://github.com/ethereum/py-evm/issues/456#issuecomment-372241420",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/456",
    "id": 372241420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjI0MTQyMA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-12T09:19:25Z",
    "updated_at": "2018-03-12T09:58:12Z",
    "author_association": "MEMBER",
    "body": "p.s. the previous solution that we applied for solving shuffling cycle validator pool:\r\n\r\n\r\nSet `validators[validator_index].cycle` in `def deposit(validation_code_addr: address, return_addr: address)`:\r\n\r\nhttps://github.com/ethereum/sharding/blob/50e686f6597b8d0553dc0b964ea91441ae4e3fe6/sharding/contracts/validator_manager.v.py#L111-L136\r\n\r\nFilter the new collators in `def get_validators_max_index()`:\r\n\r\nhttps://github.com/ethereum/sharding/blob/50e686f6597b8d0553dc0b964ea91441ae4e3fe6/sharding/contracts/validator_manager.v.py#L95-L108",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372241420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372551032",
    "html_url": "https://github.com/ethereum/py-evm/issues/456#issuecomment-372551032",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/456",
    "id": 372551032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjU1MTAzMg==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-13T05:25:31Z",
    "updated_at": "2018-03-13T05:25:31Z",
    "author_association": "MEMBER",
    "body": "Fixed lockup mechanism: `withdraw` (`deregister_collator `) removes an entry from `collator_registry` (and `collator_pool`), adds an entry to `collator_lockups`, and returns True on success. \r\n\r\n\r\n1. Add a new mapping `registered_period: uint256 period  -> uint256 collators_num`. In `deposit()`:\r\n\r\n```python\r\n@public\r\n@payable\r\ndef deposit() -> num:\r\n\r\n    ...\r\n\r\n    self.validators[index] = {\r\n        deposit: msg.value,\r\n        addr: validator_addr,\r\n    }\r\n    self.num_validators += 1\r\n    self.is_validator_deposited[validator_addr] = True\r\n\r\n+   current_period = floor(decimal(block.number / self.period_length))\r\n+   self.registered_period[current_period] += 1\r\n\r\n    log.Deposit(index, validator_addr, msg.value)\r\n\r\n    return index\r\n```\r\n2. Add a new mapping `deregistered_period: uint256 period  -> uint256 collators_num`. Update the mapping in `withdraw()`.\r\n\r\n3. Update `get_validators_max_index`. The input parameter `period` is the expected period and we assume that it wonâ€™t be called when `current_period > period`. (At least it's meaningless for collating when `current_period > period`.)\r\n\r\n```python\r\n@internal\r\ndef get_validators_max_index(period) -> num:\r\n+   preparing_collators_num = 0\r\n+   existing_collators_num = 0\r\n\r\n+   # from i = 0 to i = self.lookahead_periods\r\n+   for i in range(self.lookahead_periods + 1):\r\n+       preparing_collators_num += self.registered_period[period - i]\r\n+       existing_collators_num += self.deregistered_period[period - i]\r\n+   return self.num_validators - preparing_collators_num + existing_collators_num\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/372551032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
