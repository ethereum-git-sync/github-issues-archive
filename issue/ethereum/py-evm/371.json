{
  "url": "https://api.github.com/repos/ethereum/py-evm/issues/371",
  "repository_url": "https://api.github.com/repos/ethereum/py-evm",
  "labels_url": "https://api.github.com/repos/ethereum/py-evm/issues/371/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/py-evm/issues/371/comments",
  "events_url": "https://api.github.com/repos/ethereum/py-evm/issues/371/events",
  "html_url": "https://github.com/ethereum/py-evm/issues/371",
  "id": 297118395,
  "node_id": "MDU6SXNzdWUyOTcxMTgzOTU=",
  "number": 371,
  "title": "Add probe_PAYGAS_mode utility function",
  "user": {
    "login": "NIC619",
    "id": 17670147,
    "node_id": "MDQ6VXNlcjE3NjcwMTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/17670147?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/NIC619",
    "html_url": "https://github.com/NIC619",
    "followers_url": "https://api.github.com/users/NIC619/followers",
    "following_url": "https://api.github.com/users/NIC619/following{/other_user}",
    "gists_url": "https://api.github.com/users/NIC619/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/NIC619/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/NIC619/subscriptions",
    "organizations_url": "https://api.github.com/users/NIC619/orgs",
    "repos_url": "https://api.github.com/users/NIC619/repos",
    "events_url": "https://api.github.com/users/NIC619/events{/privacy}",
    "received_events_url": "https://api.github.com/users/NIC619/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 769749869,
      "node_id": "MDU6TGFiZWw3Njk3NDk4Njk=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/eth2.0",
      "name": "eth2.0",
      "color": "ff95ca",
      "default": false,
      "description": ""
    },
    {
      "id": 916505596,
      "node_id": "MDU6TGFiZWw5MTY1MDU1OTY=",
      "url": "https://api.github.com/repos/ethereum/py-evm/labels/Sharding%20-%20state%20layer",
      "name": "Sharding - state layer",
      "color": "0178aa",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-02-14T14:37:27Z",
  "updated_at": "2018-09-26T12:24:12Z",
  "closed_at": "2018-09-26T12:24:11Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### What is wrong?\r\nAfter `gas_price` is abstracted away and `PAYGAS` is introduced, miner SHOULD(but not mandatory) check if `PAYGAS` is triggered before fully executing a transaction.\r\n\r\n### How can it be fixed\r\nAdd a `probe_PAYGAS_mode` utility function which executes a transaction with a rather small amount of gas. If miner wants to make sure they will be paid, they should call this function before applying a transaction.\r\n\r\nNote: This should be a function that exists in a layer on top of py-evm(or maybe Trinity).\r\n\r\nThis function computationally normally execute a transaction. Normally this execution terminates with `OutOfGas` error. After the execution terminates, check if `PAYGAS` is triggered and return result.\r\n\r\nThere is one adjustable system parameter `probe_PAYGAS_mode_gas` that specifies how much gas is provisioned for the execution. Miner should be able to adjust this value depending on how much gas(computation resource) they are willing to risk.\r\n\r\nPossible extensions:\r\n- This function returns `True` of `False` indicating if miner will get paid. Additionally we can also return the value of gas price set by `PAYGAS`, to help prioritizing transactions in transaction pool.\r\n- modify `PAYGAS`: If `PAYGAS` is triggered in `probe_PAYGAS_mode`, terminates immediately. This helps saving some computation otherwise it terminates only when gas has run out.\r\n- Should probably check if it terminates in ways that we are expecting, e.g, `OutOfGas` or `PAYGAS` triggered. ",
  "closed_by": {
    "login": "hwwhww",
    "id": 9263930,
    "node_id": "MDQ6VXNlcjkyNjM5MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hwwhww",
    "html_url": "https://github.com/hwwhww",
    "followers_url": "https://api.github.com/users/hwwhww/followers",
    "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
    "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
    "organizations_url": "https://api.github.com/users/hwwhww/orgs",
    "repos_url": "https://api.github.com/users/hwwhww/repos",
    "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hwwhww/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/371/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/py-evm/issues/371/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/365703415",
    "html_url": "https://github.com/ethereum/py-evm/issues/371#issuecomment-365703415",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/371",
    "id": 365703415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTcwMzQxNQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-14T18:38:48Z",
    "updated_at": "2018-02-14T18:38:57Z",
    "author_association": "MEMBER",
    "body": "I had the following thought.  \r\n\r\nModifying the gas limit could have the unfortunate side effect of invalidating certain transactions that would normally succeed *if* the contract code has any logic switches based on the amount of gas provided.\r\n\r\nTo fix this, we'd need to inject the *check* all the way down into the `Computation.apply_computation` method.  This has the side-benefit of not needing to double execute every transaction.\r\n\r\n```python\r\n# in `computation.py`\r\nclass PAYGASFriendlyComputationMixin:\r\n    @classmethod\r\n    def apply_computation(cls, vm_state, message):\r\n        \"\"\"\r\n        Perform the computation that would be triggered by the VM message.\r\n        \"\"\"\r\n        with cls(vm_state, message) as computation:\r\n            # Early exit on pre-compiles\r\n            if message.code_address in computation.precompiles:\r\n                computation.precompiles[message.code_address](computation)\r\n                return computation\r\n\r\n            for opcode in computation.code:\r\n                #\r\n                # inject check for whether PAYGAS has been called and abort with special \r\n                # exception if it has not and we've exceeded the gas requirements.\r\n                #\r\n                opcode_fn = computation.get_opcode_fn(computation.opcodes, opcode)\r\n\r\n                computation.logger.trace(\r\n                    \"OPCODE: 0x%x (%s) | pc: %s\",\r\n                    opcode,\r\n                    opcode_fn.mnemonic,\r\n                    max(0, computation.code.pc - 1),\r\n                )\r\n\r\n                try:\r\n                    opcode_fn(computation=computation)\r\n                except Halt:\r\n                    break\r\n        return computation\r\n\r\n# in miner script\r\ntry:\r\n    chain.apply_transaction(transaction)\r\nexcept SomeCustomPAYGASError:\r\n    # discard transaction and continue\r\n    ...\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/365703415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/365896360",
    "html_url": "https://github.com/ethereum/py-evm/issues/371#issuecomment-365896360",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/371",
    "id": 365896360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTg5NjM2MA==",
    "user": {
      "login": "jannikluhn",
      "id": 29854669,
      "node_id": "MDQ6VXNlcjI5ODU0NjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29854669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jannikluhn",
      "html_url": "https://github.com/jannikluhn",
      "followers_url": "https://api.github.com/users/jannikluhn/followers",
      "following_url": "https://api.github.com/users/jannikluhn/following{/other_user}",
      "gists_url": "https://api.github.com/users/jannikluhn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jannikluhn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jannikluhn/subscriptions",
      "organizations_url": "https://api.github.com/users/jannikluhn/orgs",
      "repos_url": "https://api.github.com/users/jannikluhn/repos",
      "events_url": "https://api.github.com/users/jannikluhn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jannikluhn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T11:11:28Z",
    "updated_at": "2018-02-15T11:12:02Z",
    "author_association": "MEMBER",
    "body": "To make this more general, how about adding an optional `post_opcode_callback` (or `pre_opcode_callback`) parameter to `apply_computation`? The callback could inspect the state of the computation and, if necessary, raise an exception (or return `False`) to abort the execution. Miners could add some `check_gas_payment` as a callback, but this could also be used for other things (mainly debugging and testing, but maybe also as an easy to access but low level entry point for chain analysis or contract watcher tools). Disadvantage would be that the parameter would have to be added to the whole stack of `apply_computation` functions and friends, so it's not as non-invasive as the mixin solution.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/365896360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/366023986",
    "html_url": "https://github.com/ethereum/py-evm/issues/371#issuecomment-366023986",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/371",
    "id": 366023986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjAyMzk4Ng==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T18:48:16Z",
    "updated_at": "2018-02-15T18:48:16Z",
    "author_association": "MEMBER",
    "body": "I think requiring it to be passed through the whole stack is a no-go for a callback based solution.  I have ruminated on solutions for more elegant modification of the `Chain` object and all of it's various dependencies.  Ideally, it'd be nice to be able to swap out the deeply buried `Transaction` class for a specific VM (`Chain -> VM -> VMState -> Block -> Transaction`) with a simple one-liner API.\r\n\r\n```python\r\nMainnetChain.new_magic_configuration_method(\r\n    'frontier.vm.vm_state.block.transaction_class',\r\n    MySpecialTransactionClass,\r\n)\r\n```\r\n\r\nThis would allow this sort of *deep* modification of the configuration such as injecting a *mixin* class with an overridden `apply_computation` method into *all* of the `Computation` classes.  At that point, it'd be easy for the `Computation` class to expose the functionality you suggest in the `post_opcode_callback`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/366023986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/366177900",
    "html_url": "https://github.com/ethereum/py-evm/issues/371#issuecomment-366177900",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/371",
    "id": 366177900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjE3NzkwMA==",
    "user": {
      "login": "NIC619",
      "id": 17670147,
      "node_id": "MDQ6VXNlcjE3NjcwMTQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/17670147?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NIC619",
      "html_url": "https://github.com/NIC619",
      "followers_url": "https://api.github.com/users/NIC619/followers",
      "following_url": "https://api.github.com/users/NIC619/following{/other_user}",
      "gists_url": "https://api.github.com/users/NIC619/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NIC619/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NIC619/subscriptions",
      "organizations_url": "https://api.github.com/users/NIC619/orgs",
      "repos_url": "https://api.github.com/users/NIC619/repos",
      "events_url": "https://api.github.com/users/NIC619/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NIC619/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T08:56:32Z",
    "updated_at": "2018-02-16T08:56:32Z",
    "author_association": "MEMBER",
    "body": "@pipermerriam You are right. Altering the gas limit might end up in unexpected behaviors. And the way around it is instead checking those conditions(`PAYGAS` triggered or not, `OutOfGas` of not, etc.) after each opcode is executed as you suggested.\r\n\r\n@jannikluhn I really like the `opcode_callback` idea. People can customize their own debug/analysis tool with this.\r\nWe can set injecting check as short term goal and opcode callback as long term goal(if `new_magic_configuration_method` idea is implemented).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/366177900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/424695474",
    "html_url": "https://github.com/ethereum/py-evm/issues/371#issuecomment-424695474",
    "issue_url": "https://api.github.com/repos/ethereum/py-evm/issues/371",
    "id": 424695474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDY5NTQ3NA==",
    "user": {
      "login": "hwwhww",
      "id": 9263930,
      "node_id": "MDQ6VXNlcjkyNjM5MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9263930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hwwhww",
      "html_url": "https://github.com/hwwhww",
      "followers_url": "https://api.github.com/users/hwwhww/followers",
      "following_url": "https://api.github.com/users/hwwhww/following{/other_user}",
      "gists_url": "https://api.github.com/users/hwwhww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hwwhww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hwwhww/subscriptions",
      "organizations_url": "https://api.github.com/users/hwwhww/orgs",
      "repos_url": "https://api.github.com/users/hwwhww/repos",
      "events_url": "https://api.github.com/users/hwwhww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hwwhww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-26T12:24:11Z",
    "updated_at": "2018-09-26T12:24:11Z",
    "author_association": "MEMBER",
    "body": "deactivate",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/py-evm/issues/comments/424695474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
