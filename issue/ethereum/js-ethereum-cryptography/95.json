{
  "url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography/issues/95",
  "repository_url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography",
  "labels_url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography/issues/95/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography/issues/95/comments",
  "events_url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography/issues/95/events",
  "html_url": "https://github.com/ethereum/js-ethereum-cryptography/issues/95",
  "id": 1926271700,
  "node_id": "I_kwDODJLAss5y0JLU",
  "number": 95,
  "title": "Error: recovery id invalid at Signature.recoverPublicKey",
  "user": {
    "login": "m-gunes",
    "id": 10936838,
    "node_id": "MDQ6VXNlcjEwOTM2ODM4",
    "avatar_url": "https://avatars.githubusercontent.com/u/10936838?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/m-gunes",
    "html_url": "https://github.com/m-gunes",
    "followers_url": "https://api.github.com/users/m-gunes/followers",
    "following_url": "https://api.github.com/users/m-gunes/following{/other_user}",
    "gists_url": "https://api.github.com/users/m-gunes/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/m-gunes/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/m-gunes/subscriptions",
    "organizations_url": "https://api.github.com/users/m-gunes/orgs",
    "repos_url": "https://api.github.com/users/m-gunes/repos",
    "events_url": "https://api.github.com/users/m-gunes/events{/privacy}",
    "received_events_url": "https://api.github.com/users/m-gunes/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-10-04T13:52:03Z",
  "updated_at": "2023-10-05T04:48:11Z",
  "closed_at": "2023-10-05T04:48:11Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```javascript\r\n// Client\r\n\r\nfunction signMessage(message, privateKey){\r\n  const msgHash = keccak256(utf8ToBytes(message));\r\n  const signature = secp256k1.sign(msgHash, privateKey); \r\n  console.log('signature', signature); // {r: 1234.., s:5677.., recovery: 1}\r\n  return signature.toCompactHex();\r\n}\r\n\r\n```\r\nThe client sends the signature in hex format.\r\n\r\n```javascript\r\n// Server\r\n\r\n  const msgHash = keccak256(utf8ToBytes(String(amount)));\r\n  const sig = secp256k1.Signature.fromCompact(signature);\r\n  console.log(\"sig\", sig); // {r: 1234.., s:5677.., recovery: undefined}\r\n  const publicKey = sig.recoverPublicKey(msgHash).toRawBytes();\r\n\r\n```\r\nTo recover the publicKey, after applying fromCompact function, the signature recovery property becomes undefined (expecting 1) and recoverPublicKey() throw error: ```recovery id invalid.```\r\n\r\nIn this scenario I solved the problem in the server by adding the recovery bit.\r\n\r\n```javascript\r\n const sig = secp256k1.Signature.fromCompact(signature).addRecoveryBit(1);\r\n```\r\n\r\nI'm really not sure if this is a problem or if the way I'm sending signatures from client to server is correct. This is my first time using the library and I'm trying to learn more about it. Can someone tell me what's going on?\r\n\r\nBy the way, I would be happy if someone could share some documentations about the library. I couldn't find it.\r\n",
  "closed_by": {
    "login": "paulmillr",
    "id": 574696,
    "node_id": "MDQ6VXNlcjU3NDY5Ng==",
    "avatar_url": "https://avatars.githubusercontent.com/u/574696?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulmillr",
    "html_url": "https://github.com/paulmillr",
    "followers_url": "https://api.github.com/users/paulmillr/followers",
    "following_url": "https://api.github.com/users/paulmillr/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulmillr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulmillr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulmillr/subscriptions",
    "organizations_url": "https://api.github.com/users/paulmillr/orgs",
    "repos_url": "https://api.github.com/users/paulmillr/repos",
    "events_url": "https://api.github.com/users/paulmillr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulmillr/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography/issues/95/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography/issues/95/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography/issues/comments/1748026134",
    "html_url": "https://github.com/ethereum/js-ethereum-cryptography/issues/95#issuecomment-1748026134",
    "issue_url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography/issues/95",
    "id": 1748026134,
    "node_id": "IC_kwDODJLAss5oMMMW",
    "user": {
      "login": "paulmillr",
      "id": 574696,
      "node_id": "MDQ6VXNlcjU3NDY5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/574696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulmillr",
      "html_url": "https://github.com/paulmillr",
      "followers_url": "https://api.github.com/users/paulmillr/followers",
      "following_url": "https://api.github.com/users/paulmillr/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulmillr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulmillr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulmillr/subscriptions",
      "organizations_url": "https://api.github.com/users/paulmillr/orgs",
      "repos_url": "https://api.github.com/users/paulmillr/repos",
      "events_url": "https://api.github.com/users/paulmillr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulmillr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-05T04:48:03Z",
    "updated_at": "2023-10-05T04:48:03Z",
    "author_association": "COLLABORATOR",
    "body": ">The `secp256k1` submodule provides a library for elliptic curve operations on\r\nthe curve secp256k1. For detailed documentation, follow [README of `noble-curves`](https://github.com/paulmillr/noble-curves), which the module uses as a backend.\r\n\r\nHere's the quote from README.\r\n\r\nThe recovery bit is not serialized by design, because it's not standard. So, you need to preserve recovery bit somewhere if you're transferring it with the signature. Ethereum usually has recovery bit specified in `v` value of `transaction`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/js-ethereum-cryptography/issues/comments/1748026134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
