{
  "url": "https://api.github.com/repos/ethereum/pm/issues/28",
  "repository_url": "https://api.github.com/repos/ethereum/pm",
  "labels_url": "https://api.github.com/repos/ethereum/pm/issues/28/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/pm/issues/28/comments",
  "events_url": "https://api.github.com/repos/ethereum/pm/issues/28/events",
  "html_url": "https://github.com/ethereum/pm/issues/28",
  "id": 278490815,
  "node_id": "MDU6SXNzdWUyNzg0OTA4MTU=",
  "number": 28,
  "title": "Ethereum Core Devs Meeting 30 Agenda",
  "user": {
    "login": "Souptacular",
    "id": 3460120,
    "node_id": "MDQ6VXNlcjM0NjAxMjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3460120?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Souptacular",
    "html_url": "https://github.com/Souptacular",
    "followers_url": "https://api.github.com/users/Souptacular/followers",
    "following_url": "https://api.github.com/users/Souptacular/following{/other_user}",
    "gists_url": "https://api.github.com/users/Souptacular/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Souptacular/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Souptacular/subscriptions",
    "organizations_url": "https://api.github.com/users/Souptacular/orgs",
    "repos_url": "https://api.github.com/users/Souptacular/repos",
    "events_url": "https://api.github.com/users/Souptacular/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Souptacular/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 43,
  "created_at": "2017-12-01T14:55:49Z",
  "updated_at": "2021-03-29T15:38:20Z",
  "closed_at": "2018-01-24T05:01:36Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Ethereum Core Devs Meeting 30 Agenda\r\n### Meeting Date/Time: Friday 12/15/17 at 14:00 UTC\r\n### Meeting Duration 1.5 hours\r\n### [YouTube Live Stream Link](https://www.youtube.com/watch?v=naPA7tjrgsk)\r\n# Agenda\r\n\r\n1. Testing Updates.\r\n2. Digital cats caused network congestion this month. Meow.\r\n  a. Why did this happen and what solutions are available to prevent future network congestion? See comments below for some ideas.\r\n  b. [Stateless Clients proposal](https://github.com/ethereum/pm/issues/28#issuecomment-349676284).\r\n  c. [Would having minimum system requirements to set up an optimal client/full node help?](https://github.com/ethereum/pm/issues/28#issuecomment-351141485)\r\n  d. [Is the bottleneck is not just disk bandwidth, but specifically sequential disk bandwidth? ](https://github.com/ethereum/pm/issues/28#issuecomment-351350231)\r\n  e. [Vitalik has some ideas around gas cost changes and scalability-relevant client optimizations.](https://github.com/ethereum/pm/issues/28#issuecomment-350941632)\r\n3. [Plans on Quantum-resistant cryptography and any plans to include it in the next update?](https://github.com/ethereum/pm/issues/28#issuecomment-350954470)\r\n4. [Introduction to K-EVM team (Everett H.)](https://github.com/kframework/evm-semantics)\r\n5. [Does it remain the case that the Yellow Paper is intended to be Ethereum's formal specification?](https://github.com/ethereum/pm/issues/27#issuecomment-347997598)\r\n\r\nTime permitting:\r\n6. [Parity stuck ether proposals](https://paritytech.io/blog/on-classes-of-stuck-ether-and-potential-solutions-2.html).\r\n7. POA Testnet unification [Update]\r\n8. Core team updates.\r\n\r\nPlease provide comments to add or correct agenda topics.",
  "closed_by": {
    "login": "Souptacular",
    "id": 3460120,
    "node_id": "MDQ6VXNlcjM0NjAxMjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3460120?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Souptacular",
    "html_url": "https://github.com/Souptacular",
    "followers_url": "https://api.github.com/users/Souptacular/followers",
    "following_url": "https://api.github.com/users/Souptacular/following{/other_user}",
    "gists_url": "https://api.github.com/users/Souptacular/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Souptacular/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Souptacular/subscriptions",
    "organizations_url": "https://api.github.com/users/Souptacular/orgs",
    "repos_url": "https://api.github.com/users/Souptacular/repos",
    "events_url": "https://api.github.com/users/Souptacular/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Souptacular/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/pm/issues/28/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/pm/issues/28/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349448245",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-349448245",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 349448245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTQ0ODI0NQ==",
    "user": {
      "login": "5chdn",
      "id": 15729797,
      "node_id": "MDQ6VXNlcjE1NzI5Nzk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/15729797?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/5chdn",
      "html_url": "https://github.com/5chdn",
      "followers_url": "https://api.github.com/users/5chdn/followers",
      "following_url": "https://api.github.com/users/5chdn/following{/other_user}",
      "gists_url": "https://api.github.com/users/5chdn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/5chdn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/5chdn/subscriptions",
      "organizations_url": "https://api.github.com/users/5chdn/orgs",
      "repos_url": "https://api.github.com/users/5chdn/repos",
      "events_url": "https://api.github.com/users/5chdn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/5chdn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T21:31:39Z",
    "updated_at": "2017-12-06T09:58:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Shall we talk about transaction backlogs?\r\n\r\n![https_ 2f 2fblueprint-api-production s3 amazonaws com 2fuploads 2fcard 2fimage 2f667581 2f7e9f9d4e-58af-4ae6-b741-b99756ad9fac](https://user-images.githubusercontent.com/15729797/33631776-d2b05954-da0b-11e7-9806-eac96518871a.png)\r\n\r\nJust some random thoughts.\r\n\r\n- Shouldn't the block gas limit go up at this consistently high transaction load?\r\n\r\n![screenshot at 2017-12-06 10-51-33](https://user-images.githubusercontent.com/15729797/33655663-ffac8ae6-da73-11e7-9fcd-a7d9f799082e.png)\r\n\r\n- Is there anything short-term we can do? Like recommending higher gas limits? Is it even safe to recommend higher block gas limits? If yes, what would be a reasonable limit?\r\n\r\n- Is there anything we can do to improve applications like crypto-kitties to use less gas, or anything else to relax the situation? Did anyone look into options yet?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349448245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349601431",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-349601431",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 349601431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTYwMTQzMQ==",
    "user": {
      "login": "ethernian",
      "id": 4574735,
      "node_id": "MDQ6VXNlcjQ1NzQ3MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4574735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernian",
      "html_url": "https://github.com/ethernian",
      "followers_url": "https://api.github.com/users/ethernian/followers",
      "following_url": "https://api.github.com/users/ethernian/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernian/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernian/orgs",
      "repos_url": "https://api.github.com/users/ethernian/repos",
      "events_url": "https://api.github.com/users/ethernian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T10:41:29Z",
    "updated_at": "2017-12-06T16:36:49Z",
    "author_association": "NONE",
    "body": "> Is there anything short-term we can do?\r\n\r\nJust a mid-term raw idea (not perfect, I know): \r\nWe could limit gas usage (or increase min gas price specifically for heavy contracts) per contract group (contracts with the same codebase) if network becomes overloaded. A contract deployer can't easily overcome this restriction by delivering many slightly altered contracts with another codebase, because this bunch of different contracts could not be so easily trusted and accepted as the single one. Such \"loadbalancing\" is in tradeoff to acceptance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349601431/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 5,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349636766",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-349636766",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 349636766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTYzNjc2Ng==",
    "user": {
      "login": "v1thesource",
      "id": 11030857,
      "node_id": "MDQ6VXNlcjExMDMwODU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/11030857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/v1thesource",
      "html_url": "https://github.com/v1thesource",
      "followers_url": "https://api.github.com/users/v1thesource/followers",
      "following_url": "https://api.github.com/users/v1thesource/following{/other_user}",
      "gists_url": "https://api.github.com/users/v1thesource/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/v1thesource/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/v1thesource/subscriptions",
      "organizations_url": "https://api.github.com/users/v1thesource/orgs",
      "repos_url": "https://api.github.com/users/v1thesource/repos",
      "events_url": "https://api.github.com/users/v1thesource/events{/privacy}",
      "received_events_url": "https://api.github.com/users/v1thesource/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T13:17:42Z",
    "updated_at": "2017-12-06T13:17:42Z",
    "author_association": "NONE",
    "body": "With Cryptokitties making up >10% of all tx's currently (https://ethgasstation.info/gasguzzlers.php), the best medium-term solution may be helping them implement a payment channel mechanism. Uncles / total blocks per day is around 21%, which is not disastrous, but is only aggravated by a gas limit increase. If the gas limit is increased, we'd have to tell everyone to wait for more block confirmations per tx to make sure they get on the right chain. \r\n\r\nCrazy idea, but at this point it may be worth looking at increasing the target time per block from ~15s. Users will have to wait for multiple confirmations anyway with the current increasing uncle rate, at least with a higher block time interval we can increase the gas limit with a reduced effect on uncle rate.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349636766/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349667807",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-349667807",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 349667807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTY2NzgwNw==",
    "user": {
      "login": "rolandkofler",
      "id": 979444,
      "node_id": "MDQ6VXNlcjk3OTQ0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolandkofler",
      "html_url": "https://github.com/rolandkofler",
      "followers_url": "https://api.github.com/users/rolandkofler/followers",
      "following_url": "https://api.github.com/users/rolandkofler/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolandkofler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolandkofler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolandkofler/subscriptions",
      "organizations_url": "https://api.github.com/users/rolandkofler/orgs",
      "repos_url": "https://api.github.com/users/rolandkofler/repos",
      "events_url": "https://api.github.com/users/rolandkofler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolandkofler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T15:09:19Z",
    "updated_at": "2017-12-06T15:09:19Z",
    "author_association": "NONE",
    "body": "@dip239 while I see the first part of the idea, the second part \"contracts must be audited\" is easly circumvented by adding harmless nonsense functions. And it would be lead to batteries of loadbalancer contracts anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349667807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349676284",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-349676284",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 349676284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTY3NjI4NA==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T15:36:16Z",
    "updated_at": "2017-12-06T15:36:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would like to bring up the Stateless Clients proposal, as I described here: https://medium.com/@akhounov/how-to-speed-up-ethereum-in-the-face-of-crypto-kitties-7a9c901d98e9\r\n\r\nI am collecting more data now about how much impact it can make, and what is the overhead, hopefully can present something very briefly",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349676284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349690022",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-349690022",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 349690022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTY5MDAyMg==",
    "user": {
      "login": "ethernian",
      "id": 4574735,
      "node_id": "MDQ6VXNlcjQ1NzQ3MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4574735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernian",
      "html_url": "https://github.com/ethernian",
      "followers_url": "https://api.github.com/users/ethernian/followers",
      "following_url": "https://api.github.com/users/ethernian/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernian/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernian/orgs",
      "repos_url": "https://api.github.com/users/ethernian/repos",
      "events_url": "https://api.github.com/users/ethernian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-06T16:17:21Z",
    "updated_at": "2017-12-06T16:17:21Z",
    "author_association": "NONE",
    "body": ">  part \"contracts must be audited\" is easly circumvented by adding harmless nonsense functions\r\n\r\nMy idea is not perfect, I agree, it is more the way of thinking about the problem: I am just trying to punisch an excessive gas consumption by target contracts instead of gas provisioning by transactions.\r\n \r\nNevertheless my point was, that \"loadbalancing\" will not working \"for free\": a careful user needs to trust N contracts instead of single one if their codebase is not identical. Personally I wouldn't trust a bunch of  loadbalancing contracts with \"almost\" the same code: too much to check every single one. \r\nBut CryptoKitty players possibly do not care about contracts they trust at all. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/349690022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350008317",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-350008317",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 350008317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDAwODMxNw==",
    "user": {
      "login": "coinaisseur",
      "id": 33495445,
      "node_id": "MDQ6VXNlcjMzNDk1NDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/33495445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coinaisseur",
      "html_url": "https://github.com/coinaisseur",
      "followers_url": "https://api.github.com/users/coinaisseur/followers",
      "following_url": "https://api.github.com/users/coinaisseur/following{/other_user}",
      "gists_url": "https://api.github.com/users/coinaisseur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coinaisseur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coinaisseur/subscriptions",
      "organizations_url": "https://api.github.com/users/coinaisseur/orgs",
      "repos_url": "https://api.github.com/users/coinaisseur/repos",
      "events_url": "https://api.github.com/users/coinaisseur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coinaisseur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-07T15:50:40Z",
    "updated_at": "2017-12-07T15:50:40Z",
    "author_association": "NONE",
    "body": "Whatever solution we adopt, we can all agree that this is an emergency situation that must be solved short term. With the 'accidental' success of CryptoKitties, we can assume there are a bunch of developers coding Ethereum dApps right now as I write this message, so this transaction backlog will only get worse from now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350008317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350050217",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-350050217",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 350050217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDA1MDIxNw==",
    "user": {
      "login": "ethernian",
      "id": 4574735,
      "node_id": "MDQ6VXNlcjQ1NzQ3MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4574735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernian",
      "html_url": "https://github.com/ethernian",
      "followers_url": "https://api.github.com/users/ethernian/followers",
      "following_url": "https://api.github.com/users/ethernian/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernian/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernian/orgs",
      "repos_url": "https://api.github.com/users/ethernian/repos",
      "events_url": "https://api.github.com/users/ethernian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-07T18:14:57Z",
    "updated_at": "2017-12-07T18:14:57Z",
    "author_association": "NONE",
    "body": "Thought more: \r\n... there should be some \"central contract\" behind the \"loadbalancer\", coordinating the whole application. We could sum all gas burned in all transactions going through this \"central contract\" in some time frame (TxGasBurningRate for this contract). If the network is currently overloaded AND some contract is involved into excessive gas burning, all transactions going throw it should be deincentivized by higher gas price.\r\n\r\nfurther discussion is moved to [ethereum/research](https://gitter.im/ethereum/research)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350050217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350234207",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-350234207",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 350234207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDIzNDIwNw==",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-08T10:51:20Z",
    "updated_at": "2017-12-08T10:51:20Z",
    "author_association": "NONE",
    "body": "Might be missing something obvious here: Why do we have a static blocktime target, variable gas limits, and (a more abstract) acceptable uncle rate (which is actually variable). Why isn't the blocktime target also variable in order to target a more well defined/specified uncle rate target? (or uncle/time rate to keep it fair for miners) ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350234207/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350941632",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-350941632",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 350941632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDk0MTYzMg==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T04:25:45Z",
    "updated_at": "2017-12-12T04:31:18Z",
    "author_association": "MEMBER",
    "body": "> Why isn't the blocktime target also variable in order to target a more well defined/specified uncle rate target?\r\n\r\nThe blocktime target _is_ flexible as of Byzantium, to keep total rewards roughly constant. See it rising slightly here: https://etherscan.io/chart/blocktime\r\n\r\nI personally oppose further blocktime increases. The contribution of the fast blocktime to the total uncle rate is relatively small, and furthermore it's ADDITIVE, not multiplicative, with contribution to uncle rate from capacity. That is:\r\n\r\n    uncle_rate ~= k1 / blocktime + k2 * gas_per_sec\r\n\r\nThis is confirmed with bitcoin in Decker and Wattenhofer's 2013 paper, and experience suggests the same is true with ethereum. Right now it's the second term in the sum that is the problem, not the first.\r\n\r\nIMO we should consider a few optimizations:\r\n\r\n* Do another round of increasing gas costs on account-accessing opcodes (BALANCE, EXTCODESIZE, etc), and SLOAD, as that's still our major weak point from the PoV of DoS resistance. I'd recommend SLOAD -> 320, BALANCE -> 800, EXTCODESIZE/CALL/CALLCODE/DELEGATECALL/.... -> 1200. But we should add an exception, that self-calls and calls to precompiles cost only 100.\r\n* Some variant of https://github.com/ethereum/EIPs/issues/168 and https://github.com/ethereum/EIPs/issues/169 to alleviate state size growth\r\n* Increase the cost of sending a tx by 30000 if it goes to a currently empty account\r\n\r\nI also totally support the idea of stateless clients. Right now it actually already is possible to implement without any core protocol changes, as long as **miners** are stateful. There's also the possibility of a \"stateless partially full node\" - be a light node by default, but fully (statelessly) verify specific blocks if a trusted server tells you that they're invalid. This gives the security model that you won't accept an invalid block unless BOTH (i) there is an active 51% attack, and (ii) all trusted servers you're connecting to are colluding.\r\n\r\nAlso, it would make sense to have a much more coordinated benchmarking effort, so we can see what opcodes are currently the slowest, and what can be done to improve their execution speed.\r\n\r\nFinally, we should have a poll on where we are at for key scalability-relevant client optimizations. This includes:\r\n\r\n* Garbage collection\r\n* On-disk state caching\r\n* State tree pruning\r\n* Network compression\r\n* Database optimization",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350941632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350954470",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-350954470",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 350954470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDk1NDQ3MA==",
    "user": {
      "login": "tejasriram",
      "id": 26278822,
      "node_id": "MDQ6VXNlcjI2Mjc4ODIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26278822?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tejasriram",
      "html_url": "https://github.com/tejasriram",
      "followers_url": "https://api.github.com/users/tejasriram/followers",
      "following_url": "https://api.github.com/users/tejasriram/following{/other_user}",
      "gists_url": "https://api.github.com/users/tejasriram/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tejasriram/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tejasriram/subscriptions",
      "organizations_url": "https://api.github.com/users/tejasriram/orgs",
      "repos_url": "https://api.github.com/users/tejasriram/repos",
      "events_url": "https://api.github.com/users/tejasriram/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tejasriram/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T06:06:04Z",
    "updated_at": "2017-12-12T06:06:04Z",
    "author_association": "NONE",
    "body": "I would like to hear about the Ethereum team's plans on Quantum-resistant cryptography and any plans to include it in the next update?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/350954470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351141485",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351141485",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351141485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTE0MTQ4NQ==",
    "user": {
      "login": "RSAManagement",
      "id": 32518081,
      "node_id": "MDQ6VXNlcjMyNTE4MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/32518081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RSAManagement",
      "html_url": "https://github.com/RSAManagement",
      "followers_url": "https://api.github.com/users/RSAManagement/followers",
      "following_url": "https://api.github.com/users/RSAManagement/following{/other_user}",
      "gists_url": "https://api.github.com/users/RSAManagement/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RSAManagement/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RSAManagement/subscriptions",
      "organizations_url": "https://api.github.com/users/RSAManagement/orgs",
      "repos_url": "https://api.github.com/users/RSAManagement/repos",
      "events_url": "https://api.github.com/users/RSAManagement/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RSAManagement/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T18:24:11Z",
    "updated_at": "2017-12-12T18:24:11Z",
    "author_association": "NONE",
    "body": "Hallo, I would like the foundation to recommend the minimum system requirements to set up an optimal client/full node. This is probably a basic step to mitigate a bit the uncle rate problem, it seem that the hard drive is one of the most important bottleneck given the high number of I/O calls to the database. \r\nhttps://medium.com/@akhounov/how-to-speed-up-ethereum-in-the-face-of-crypto-kitties-7a9c901d98e9",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351141485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351343485",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351343485",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351343485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTM0MzQ4NQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T10:04:48Z",
    "updated_at": "2017-12-13T10:04:48Z",
    "author_association": "MEMBER",
    "body": "> I would like to hear about the Ethereum team's plans on Quantum-resistant cryptography and any plans to include it in the next update?\r\n\r\nProperly incorporating this requires account abstraction, which is going into the sharding spec; I don't think there is yet consensus on how/when it's going into the main chain. Abstraction will also be available for Casper validators.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351343485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351348217",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351348217",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351348217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTM0ODIxNw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T10:22:27Z",
    "updated_at": "2017-12-13T10:22:27Z",
    "author_association": "MEMBER",
    "body": "See my comment on stateless client numbers here:\r\n\r\nhttps://medium.com/@VitalikButerin/regarding-bandwidth-requirements-for-stateless-clients-i-can-give-some-precise-numbers-be357fb69b6d",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351348217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351350231",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351350231",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351350231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTM1MDIzMQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T10:30:15Z",
    "updated_at": "2017-12-13T10:30:15Z",
    "author_association": "MEMBER",
    "body": "I do have a question that I'd like to hear answered as well as possible.\r\n\r\nIt seems to me that the bottleneck is not just disk bandwidth, but specifically sequential disk bandwidth. That is, for example, if we somehow magically knew ahead of time what state tree nodes need to be accessed, and we could make the accesses happen in parallel, then processing speed could be increased greatly.\r\n\r\nFirst, is this true? That is, is it the case that loading 1000 specific state trie keys from the DB in parallel is much faster than doing it sequentially? Second, if so, how much faster?\r\n\r\nIf there are substantial gains to be made, then there are clever things we can do, like requiring miners to provide a witness specifying what accounts and storage keys get accessed in the block, and additionally it means that there are potential great scalability gains in EIP 648.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351350231/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351356763",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351356763",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351356763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTM1Njc2Mw==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T10:56:09Z",
    "updated_at": "2017-12-13T10:56:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vbuterin Thanks a lot of the answers! I am still trying to do the full mode sync of geth, and now I hit the road block because my SSD is only 500Gb and doing it on HDD is simply too slow, so I am currently stuck around block 4.5m - 9th of November 2017 :). That is why I am trying to optimise geth a bit. But I have managed to compute the sizes of the witness for the blocks around DoS attacks in September 2016. Very often, the witness would be like 37Mb. I have not analysed yet why.\r\n\r\nRegarding your second question about parallel reads from the DB, I also thought about it and I looked at how exactly geth (and parity too) organises the accounts and their storage - I will prepare a blog post on that, because it also explain how I calculated the witness size.\r\nI also looked at LevelDB implementation that geth uses to see if there is any gain from concurrent reads. I doubt there is. Because of the way the data is stored, there is no locality, and data even from the nearby trie branches are randomly scattered across the whole database. So reading them in parallel would require loading more LevelDB blocks into memory and seeking them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351356763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351382748",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351382748",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351382748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTM4Mjc0OA==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T12:53:36Z",
    "updated_at": "2017-12-13T12:53:36Z",
    "author_association": "MEMBER",
    "body": "@Souptacular About KEVM, Everett and some of his colleagues will be joining the call.  So give me an agenda item: \"introduction KEVM (Everett)\".  It would fit nicely before the YP discussion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351382748/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351386197",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351386197",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351386197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTM4NjE5Nw==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T13:08:39Z",
    "updated_at": "2017-12-13T13:08:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vbuterin Actually I take it back - I think there will be improvement in trying to access trie nodes in parallel. Because currently lots of time is spent in navigating down the trie, reading lower level only after the higher one. And that exacerbate the high latency of HDD/SDD. I will definite try that.\r\nAnother thing we could do is only include parts of the keys in the \"witness hint\", lets say, only first 8 bytes instead of all 32, and use non-exact seek operation to read from DB. I will look into that too.\r\n\r\n@pirapira That is great! I have read KEVM paper after DevCon3 and will be curious to hear the discussion",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351386197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351404275",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351404275",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351404275,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQwNDI3NQ==",
    "user": {
      "login": "pkieltyka",
      "id": 18831,
      "node_id": "MDQ6VXNlcjE4ODMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/18831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pkieltyka",
      "html_url": "https://github.com/pkieltyka",
      "followers_url": "https://api.github.com/users/pkieltyka/followers",
      "following_url": "https://api.github.com/users/pkieltyka/following{/other_user}",
      "gists_url": "https://api.github.com/users/pkieltyka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pkieltyka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pkieltyka/subscriptions",
      "organizations_url": "https://api.github.com/users/pkieltyka/orgs",
      "repos_url": "https://api.github.com/users/pkieltyka/repos",
      "events_url": "https://api.github.com/users/pkieltyka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pkieltyka/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T14:19:23Z",
    "updated_at": "2017-12-13T14:25:47Z",
    "author_association": "NONE",
    "body": "Im just following the discussion regarding data storage - I highly recommend the embedded db https://github.com/dgraph-io/badger which is a RocksDB implementation in pure Go. It's very robust, tested, and supports concurrent reads, ACID transactions, batching and snapshots. The original RocksDB btw is a fork of LevelDB by Facebook with more concurrency features/tuning - so I expect the work necessary to replace geth's existing use of github.com/syndtr/goleveldb/leveldb to badger will be quite minimal. The benefits: more performance, no more CGO for the db (leaks? call penalty?), and maybe disk space too depending if there is any data compaction in geth's db (to release old unused space from deleted/changed entries), or opportunities for compression.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351404275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351407342",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351407342",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351407342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQwNzM0Mg==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T14:30:25Z",
    "updated_at": "2017-12-13T14:30:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pkieltyka I have encountered BadgerDB yesterday and it looks interesting. Another thing to try, thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351407342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351513086",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351513086",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351513086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTUxMzA4Ng==",
    "user": {
      "login": "5chdn",
      "id": 15729797,
      "node_id": "MDQ6VXNlcjE1NzI5Nzk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/15729797?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/5chdn",
      "html_url": "https://github.com/5chdn",
      "followers_url": "https://api.github.com/users/5chdn/followers",
      "following_url": "https://api.github.com/users/5chdn/following{/other_user}",
      "gists_url": "https://api.github.com/users/5chdn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/5chdn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/5chdn/subscriptions",
      "organizations_url": "https://api.github.com/users/5chdn/orgs",
      "repos_url": "https://api.github.com/users/5chdn/repos",
      "events_url": "https://api.github.com/users/5chdn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/5chdn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T20:31:08Z",
    "updated_at": "2017-12-13T20:31:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @pkieltyka just FYI, we have massive issues with RocksDB and are currently in the process of replacing it in Parity. https://github.com/paritytech/parity/issues/6280",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351513086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351519060",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351519060",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351519060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTUxOTA2MA==",
    "user": {
      "login": "pkieltyka",
      "id": 18831,
      "node_id": "MDQ6VXNlcjE4ODMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/18831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pkieltyka",
      "html_url": "https://github.com/pkieltyka",
      "followers_url": "https://api.github.com/users/pkieltyka/followers",
      "following_url": "https://api.github.com/users/pkieltyka/following{/other_user}",
      "gists_url": "https://api.github.com/users/pkieltyka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pkieltyka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pkieltyka/subscriptions",
      "organizations_url": "https://api.github.com/users/pkieltyka/orgs",
      "repos_url": "https://api.github.com/users/pkieltyka/repos",
      "events_url": "https://api.github.com/users/pkieltyka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pkieltyka/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T20:55:09Z",
    "updated_at": "2017-12-13T20:55:09Z",
    "author_association": "NONE",
    "body": "@5chdn I wasn't suggesting to use RocksDB, I suggested to evaluate Badger, an alternative implementation of a LSM in pure Go, inspired by RocksDB. I don't think that issue applies here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351519060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351614908",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351614908",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351614908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTYxNDkwOA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T05:45:09Z",
    "updated_at": "2017-12-14T05:45:09Z",
    "author_association": "MEMBER",
    "body": "I just synced geth, parity and harmony over the last few days to see how they are handling the load.\r\n\r\nHere is my feedback. I ran this on Ubuntu 17.10, with a 512GB SSD with 16 GB RAM; in all three clients I used the appropriate setting to set the cache size to 6 GB.\r\n\r\n* **Parity** - the warp sync feature failed outright (never even once downloaded a single chunk), and the client did a full sync. This finished after ~2.5 days (not constant online, there were a few offline periods). The processing speed was sometimes ~25-40 mgas/s, and sometimes ~5 mgas/s (see https://github.com/paritytech/parity/issues/7258). Storage size is 41 GB.\r\n* **Geth** - the client randomly crashed the first couple of times I ran it, and then the third time it managed to download all the block receipts/headers and concentrated on downloading the state, and that time it worked. Took ~8 hours, with a total of ~50 million state objects. When processing blocks, the speed is sometimes ~20-30 mgas/s, and sometimes ~3-6 mgas/s. Storage size is 47 GB.\r\n* **Harmony** - the client successfully did the fast sync, in ~8 hours, with a total of ~60 million state objects (maybe harmony counts contract code as a state object and geth doesn't, or something similar? not sure what is causing the disagreement; both times it synced around block 4.7m). When processing blocks, the speed is sometimes ~20-30 mgas/s, and sometimes ~3-8 mgas/s. Storage size is 25 GB.\r\n\r\nThoughts at first glance:\r\n\r\n* We should really look into DB optimization\r\n* All clients should bump up the default cache sizes\r\n* We need to fast sync work more reliably, and particuarly make it not lose progress if the user closes the client halfway through the fast sync process",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351614908/reactions",
      "total_count": 11,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351638886",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351638886",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351638886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTYzODg4Ng==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T08:15:01Z",
    "updated_at": "2017-12-14T08:15:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I managed to do the fast sync too. But not the \"full\" sync mode. Never mind, I have now ordered 4TB SSD, should arrive in a couple of days :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351638886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351685985",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351685985",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351685985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTY4NTk4NQ==",
    "user": {
      "login": "5chdn",
      "id": 15729797,
      "node_id": "MDQ6VXNlcjE1NzI5Nzk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/15729797?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/5chdn",
      "html_url": "https://github.com/5chdn",
      "followers_url": "https://api.github.com/users/5chdn/followers",
      "following_url": "https://api.github.com/users/5chdn/following{/other_user}",
      "gists_url": "https://api.github.com/users/5chdn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/5chdn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/5chdn/subscriptions",
      "organizations_url": "https://api.github.com/users/5chdn/orgs",
      "repos_url": "https://api.github.com/users/5chdn/repos",
      "events_url": "https://api.github.com/users/5chdn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/5chdn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T11:32:59Z",
    "updated_at": "2017-12-14T11:32:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vbuterin yes, the warp issue is a well-known annoyance. https://github.com/paritytech/parity/issues/6372",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351685985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351686804",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351686804",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351686804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTY4NjgwNA==",
    "user": {
      "login": "LefterisJP",
      "id": 1658405,
      "node_id": "MDQ6VXNlcjE2NTg0MDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1658405?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LefterisJP",
      "html_url": "https://github.com/LefterisJP",
      "followers_url": "https://api.github.com/users/LefterisJP/followers",
      "following_url": "https://api.github.com/users/LefterisJP/following{/other_user}",
      "gists_url": "https://api.github.com/users/LefterisJP/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LefterisJP/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LefterisJP/subscriptions",
      "organizations_url": "https://api.github.com/users/LefterisJP/orgs",
      "repos_url": "https://api.github.com/users/LefterisJP/repos",
      "events_url": "https://api.github.com/users/LefterisJP/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LefterisJP/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T11:37:00Z",
    "updated_at": "2017-12-14T11:47:01Z",
    "author_association": "MEMBER",
    "body": "> I have now ordered 4TB SSD\r\n\r\n@AlexeyAkhunov \r\nOh damn yeah. Need that too. Any model recommentation?\r\n\r\n@vbuterin I have not tried Harmony, but I have similar experience with geth and parity.\r\n\r\nOne other thing that would be really really nice, but probably quite difficult to achieve, is make it possible to do a sync in an HDD. I have tried to do mainnet syncs in HDDs many times. Fast/warp works fine (after many many retries), but after finishing it an HDD just can't keep up with the network with neither parity nor geth.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351686804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351695022",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351695022",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351695022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTY5NTAyMg==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T12:16:41Z",
    "updated_at": "2017-12-14T12:17:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@LefterisJP \r\n\r\n> Any model recommentation?\r\n\r\nI chose Samsung 850 EVO, but cannot recommend it until I use myself :)\r\n\r\n> make it possible to do a sync in an HDD\r\n\r\nI am trying to hack together a version of geth that can do that. That is what I have spent most of my time last few days...\r\nOtherwise we would have lost the ability to run full nodes without SSD",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351695022/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351967511",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351967511",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351967511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTk2NzUxMQ==",
    "user": {
      "login": "cslarson",
      "id": 900470,
      "node_id": "MDQ6VXNlcjkwMDQ3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/900470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cslarson",
      "html_url": "https://github.com/cslarson",
      "followers_url": "https://api.github.com/users/cslarson/followers",
      "following_url": "https://api.github.com/users/cslarson/following{/other_user}",
      "gists_url": "https://api.github.com/users/cslarson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cslarson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cslarson/subscriptions",
      "organizations_url": "https://api.github.com/users/cslarson/orgs",
      "repos_url": "https://api.github.com/users/cslarson/repos",
      "events_url": "https://api.github.com/users/cslarson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cslarson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T10:13:51Z",
    "updated_at": "2017-12-15T10:14:07Z",
    "author_association": "NONE",
    "body": "EIP648 (Easy parallelizability) was [brought up on reddit](https://www.reddit.com/r/ethereum/comments/7hxe91/should_easy_parallelizability_issue_648/) and there was some hope there might be some discussion of it during the dev meeting. Where/If it fits into the roadmap would be great to hear.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351967511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351968340",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351968340",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351968340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTk2ODM0MA==",
    "user": {
      "login": "RSAManagement",
      "id": 32518081,
      "node_id": "MDQ6VXNlcjMyNTE4MDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/32518081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RSAManagement",
      "html_url": "https://github.com/RSAManagement",
      "followers_url": "https://api.github.com/users/RSAManagement/followers",
      "following_url": "https://api.github.com/users/RSAManagement/following{/other_user}",
      "gists_url": "https://api.github.com/users/RSAManagement/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RSAManagement/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RSAManagement/subscriptions",
      "organizations_url": "https://api.github.com/users/RSAManagement/orgs",
      "repos_url": "https://api.github.com/users/RSAManagement/repos",
      "events_url": "https://api.github.com/users/RSAManagement/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RSAManagement/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T10:17:36Z",
    "updated_at": "2017-12-15T10:18:08Z",
    "author_association": "NONE",
    "body": "I would like to add some more observations : \r\n1- It seems to me that the uncle rate is partially related to reaching the block gas limit and to growth of the mempool size. So probably raising carefully the block gas limit could lower a bit the uncle rate. (in the short term)\r\n\r\nQuestion is: How much does it cost in terms of computational stress (time to manage and broadcast a block) the mempool management when the the gas limit is reached ? Is it something to do in this specific area?\r\n\r\n2-  the actual uncle rate is high (about 26%) but lower than the 33% we reach a couple of weeks ago when the gas limit was 6.7 mil. (now is about 8 mil.).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351968340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351972476",
    "html_url": "https://github.com/ethereum/pm/issues/28#issuecomment-351972476",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/28",
    "id": 351972476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTk3MjQ3Ng==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T10:36:02Z",
    "updated_at": "2017-12-15T10:36:02Z",
    "author_association": "MEMBER",
    "body": "@pkieltyka yes have been looking into badger, and done some experiments. Orignally, I think a major blocker was that badger did `panic` on every fault, instead of surfacing errors. IIUC, that's been changed now, and we've done some more experiments. @fjl knows more, here's the first experiment from May this year: https://github.com/fjl/go-ethereum/tree/badger-exp ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/351972476/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
