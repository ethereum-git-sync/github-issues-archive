{
  "url": "https://api.github.com/repos/ethereum/pm/issues/231",
  "repository_url": "https://api.github.com/repos/ethereum/pm",
  "labels_url": "https://api.github.com/repos/ethereum/pm/issues/231/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/pm/issues/231/comments",
  "events_url": "https://api.github.com/repos/ethereum/pm/issues/231/events",
  "html_url": "https://github.com/ethereum/pm/issues/231",
  "id": 757782305,
  "node_id": "MDU6SXNzdWU3NTc3ODIzMDU=",
  "number": 231,
  "title": "Breakout-room discussion #6 (EIP-2718 encoding option)",
  "user": {
    "login": "poojaranjan",
    "id": 29681685,
    "node_id": "MDQ6VXNlcjI5NjgxNjg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/29681685?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/poojaranjan",
    "html_url": "https://github.com/poojaranjan",
    "followers_url": "https://api.github.com/users/poojaranjan/followers",
    "following_url": "https://api.github.com/users/poojaranjan/following{/other_user}",
    "gists_url": "https://api.github.com/users/poojaranjan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/poojaranjan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/poojaranjan/subscriptions",
    "organizations_url": "https://api.github.com/users/poojaranjan/orgs",
    "repos_url": "https://api.github.com/users/poojaranjan/repos",
    "events_url": "https://api.github.com/users/poojaranjan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/poojaranjan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2866593601,
      "node_id": "MDU6TGFiZWwyODY2NTkzNjAx",
      "url": "https://api.github.com/repos/ethereum/pm/labels/agenda",
      "name": "agenda",
      "color": "0052cc",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2020-12-05T21:18:28Z",
  "updated_at": "2021-03-29T15:30:27Z",
  "closed_at": "2020-12-21T15:36:16Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Date and Time\r\n- Meeting Date/Time: Dec 07, 2020 1500 UTC\r\n- Meeting Duration: 60 mins\r\n\r\n## Location\r\nZoom: Will be shared in the breakout-room in EthR&D discord channel\r\n\r\n## Agenda\r\n\r\nDiscussion continued on [EIP-2718: Typed Transaction Envelope](https://eips.ethereum.org/EIPS/eip-2718) to have a consensus on the encoding option.\r\n\r\n* [Micah's comment](https://github.com/ethereum/pm/issues/231#issuecomment-739465644)  \r\n\r\n  - How do we hash typed transactions?\r\n  - How do we wire encode (devp2p) typed transactions?\r\n  - How do we wire encode (devp2p) legacy transactions?\r\n\r\n* Options under consideration: \r\n\r\n  A. https://discord.com/channels/595666850260713488/779922457631916064/784269200700473356 is the current spec.\r\n  B. https://discord.com/channels/595666850260713488/779922457631916064/784274373883985950 is an alternative spec.\r\n  C. https://discord.com/channels/595666850260713488/779922457631916064/784275462343229540 is another proposed alternative spec.\r\n\r\n",
  "closed_by": {
    "login": "timbeiko",
    "id": 9390255,
    "node_id": "MDQ6VXNlcjkzOTAyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9390255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/timbeiko",
    "html_url": "https://github.com/timbeiko",
    "followers_url": "https://api.github.com/users/timbeiko/followers",
    "following_url": "https://api.github.com/users/timbeiko/following{/other_user}",
    "gists_url": "https://api.github.com/users/timbeiko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/timbeiko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/timbeiko/subscriptions",
    "organizations_url": "https://api.github.com/users/timbeiko/orgs",
    "repos_url": "https://api.github.com/users/timbeiko/repos",
    "events_url": "https://api.github.com/users/timbeiko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/timbeiko/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/pm/issues/231/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/pm/issues/231/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/739465644",
    "html_url": "https://github.com/ethereum/pm/issues/231#issuecomment-739465644",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/231",
    "id": 739465644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTQ2NTY0NA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-06T07:10:34Z",
    "updated_at": "2020-12-07T15:25:51Z",
    "author_association": "MEMBER",
    "body": "The questions we need to answer:\r\n1. How do we hash typed transactions?\r\n2. How do we wire encode (devp2p) typed transactions?\r\n3. How do we wire encode (devp2p) legacy transactions?\r\n\r\nThe current 2976 specification changes the way we wire encode legacy transactions.  This is incompatible with the \"retroactive devp2p protocol change\" that @karalabe proposed and we agreed on in the ACD call.  I suspect there is a desire to *not* change the way legacy transactions are encoded for now.\r\n\r\nNone of the current specifications define how we hash typed transactions.  I think many have assumed that we would just do `keccak256(TransactionType || TransactionPayload)` but that isn't actually defined anywhere.  I believe the hash is only used in JSON-RPC and devp2p, which is why it isn't part of 2718.  We should probably define this explicitly in 2976.\r\n\r\nWhile questions 1 and 3 have somewhat \"obvious\" answers that aren't particularly contentious, question 2 has several options that not everyone agrees on and different clients have implemented different things.\r\n\r\n## Legacy Transaction Format\r\n```py\r\ntxList = rlpEncode([\r\n\t...,\r\n\trlp_encode([nonce, ...]),\r\n\t...,\r\n])\r\n```\r\n\r\n```py\r\ntxList = rlpEncode([\r\n\t...,\r\n\t[nonce, ...],\r\n\t...,\r\n])\r\n```\r\n\r\n## Opaque bytes\r\n```py\r\ntxList = rlp_encode([\r\n\t...,\r\n\tBytes.concat([0x01], rlp_encode([chainId, nonce, ...])),\r\n\t...,\r\n])\r\n```\r\n\r\n## RLP envelope\r\n```py\r\ntxList = rlp_encode([\r\n\t...,\r\n\t[0x01, [chainId, nonce, ...]],\r\n\t...,\r\n])\r\n```\r\n## Custom RLP encoding\r\n```py\r\ntxList = rlp_encode([\r\n\t...,\r\n\t[0x01, cahinId, nonce, ...],\r\n\t...,\r\n])\r\n```\r\n\r\n## RLP heterogeneous sequence\r\n```py\r\ntxList = rlp_encode([\r\n\t...,\r\n\t0x01,\r\n\t[chainId, nonce, ...],\r\n\t...,\r\n])\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/739465644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/739720482",
    "html_url": "https://github.com/ethereum/pm/issues/231#issuecomment-739720482",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/231",
    "id": 739720482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTcyMDQ4Mg==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-07T07:12:43Z",
    "updated_at": "2020-12-07T07:12:43Z",
    "author_association": "MEMBER",
    "body": "This is what I believe the corresponding RLP bytes of each of the above approaches should look like. I've omitted the signature field for simplicity.\r\n\r\n### Opaque Bytes\r\nThe decoder will first read the byte string into a buffer. Those bytes will then be decoded into a transaction. IMO, it seems weird to encode wrap legacy transactions in a byte string.\r\n\r\n```javascript\r\ntxList = rlp_encode([..., Bytes.concat([0x01], rlp_encode([chainId, nonce, ...])), ...,])\r\n```\r\n```asm\r\n; legacy transaction\r\nb8 XX         ; byte string length\r\n  f8 XX       ; RLP payload length (tx decoder should notice \"fX\" start and realize the tx is legacy type)\r\n    80        ; account nonce\r\n    0a        ; gas price\r\n    aa        ; gas limit\r\n    bb        ; calldata\r\n    0a        ; amount\r\n    80        ; payload\r\n\r\n; typed transaction\r\nb8 XX         ; byte string length\r\n  01          ; transaction type \r\n  f8 XX       ; RLP payload length (note, this will be arbitrarily defined depending on the tx type)\r\n    01        ; chain id\r\n    80        ; account nonce\r\n    0a        ; gas price\r\n    aa        ; gas limit\r\n    bb        ; calldata\r\n    80        ; amount\r\n    80        ; payload\r\n```\r\n\r\n### RLP envelope\r\nThe decoder will read the RLP list, starting with the first element. If that first element denotes a typed transaction, the remaining bytes of the inner list will be passed to the transaction decoder. This is essentially the same as above, except that it doesn't wrap legacy txs, but uses an RLP list more as a byte string.\r\n```javascript\r\ntxList = rlp_encode([..., [0x01, [chainId, nonce, ...]], ...])\r\n```\r\n\r\n```asm\r\n; legacy transaction\r\nf8 XX \r\n  80        ; account nonce\r\n  0a        ; gas price\r\n  aa        ; gas limit\r\n  bb        ; calldata\r\n  0a        ; amount\r\n  80        ; payload\r\n\r\n; typed transaction\r\nf8 XX         ; byte string length\r\n  01          ; transaction type \r\n  f8 XX       ; RLP payload length (note, this will be arbitrarily defined depending on the tx type)\r\n    01        ; chain id\r\n    80        ; account nonce\r\n    0a        ; gas price\r\n    aa        ; gas limit\r\n    bb        ; calldata\r\n    80        ; amount\r\n    80        ; payload\r\n```\r\n\r\n### Custom RLP encoding\r\nI'm not sure I've represented this correctly, because as-is it's possible that the transaction type will conflict with the account nonce.\r\n```javascript\r\ntxList = rlp_encode([..., [0x01, cahinId, nonce, ...], ...])\r\n```\r\n\r\n```asm\r\n; legacy transaction\r\nf8 XX \r\n  80        ; account nonce\r\n  0a        ; gas price\r\n  aa        ; gas limit\r\n  bb        ; calldata  \r\n  0a        ; amount\r\n  80        ; payload\r\n\r\n; typed transaction\r\nf8 XX       ; byte string length\r\n  01        ; transaction type \r\n  01        ; chain id\r\n  80        ; account nonce\r\n  0a        ; gas price\r\n  aa        ; gas limit\r\n  bb        ; calldata\r\n  80        ; amount\r\n  80        ; payload\r\n```\r\n\r\n### RLP heterogeneous sequence\r\nThe decoder will read each element in the list. If it encounters a list, it decodes that as a legacy tx. If it encounters an integer, it will pass the remaining bytes to that typed transaction's decoder.\r\n```javascript\r\ntxList = rlp_encode([..., 0x01, [chainId, nonce, ...], ...])\r\n```\r\n```asm\r\n; legacy transaction\r\nf8 XX       ; RLP payload length (tx decoder should notice \"fX\" start and realize the tx is legacy type)\r\n  80        ; account nonce\r\n  0a        ; gas price\r\n  aa        ; gas limit\r\n  bb        ; calldata\r\n  0a        ; amount\r\n  80        ; payload\r\n\r\n; typed transaction\r\n01          ; transaction type \r\nf8 XX       ; RLP payload length (note, this will be arbitrarily defined depending on the tx type)\r\n  01        ; chain id\r\n  80        ; account nonce\r\n  0a        ; gas price\r\n  aa        ; gas limit\r\n  bb        ; calldata\r\n  80        ; amount\r\n  80        ; payload\r\n```\r\n\r\n## My thoughts\r\nI believe we'll be best off going with either the *Opaque bytes* approach or the *RLP heterogeneous sequence*. At this point, I'm not terribly attached to either. My argument for *Opaque bytes* is that it keeps a clean interface to interact with a transaction list. If we ever support non-RLP typed txs, it allows a decoder to still determine the number of txs in the list. My argument for *RLP heterogeneous sequence* is that these are RLP bytes, we shouldn't get too hooked on what they look like or their interface. This format is very amenable to decoding and doesn't wrap things in unnecessary bytes. It's also highly unlikely we'll introduce a non-RLP tx type without a significant overhaul to this system anyways.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/739720482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/739998185",
    "html_url": "https://github.com/ethereum/pm/issues/231#issuecomment-739998185",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/231",
    "id": 739998185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTk5ODE4NQ==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-07T15:42:13Z",
    "updated_at": "2020-12-08T03:51:00Z",
    "author_association": "MEMBER",
    "body": "## Decisions\r\n1. `keccak256(TransactionType || TransactionPayload)`\r\n2. Opaque Bytes\r\n3. Continue serializing as RLP list of items\r\n4. Clients MUST NOT propagate typed transaction before the Berlin fork.\r\n\r\nFinal serialization (signature omitted for simplicity):\r\n```asm\r\n; legacy transaction\r\nf8 XX       ; RLP payload length (tx decoder should notice \"fX\" start and realize the tx is legacy type)\r\n  80        ; account nonce\r\n  0a        ; gas price\r\n  aa        ; gas limit\r\n  bb        ; to\r\n  0a        ; amount\r\n  80        ; calldata\r\n\r\n; typed transaction\r\nb8 XX         ; byte string length\r\n  01          ; transaction type \r\n  f8 XX       ; RLP payload length (note, this will be arbitrarily defined depending on the tx type)\r\n    01        ; chain id\r\n    80        ; account nonce\r\n    0a        ; gas price\r\n    aa        ; gas limit\r\n    bb        ; to\r\n    80        ; amount\r\n    80        ; calldata\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/739998185/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/740462468",
    "html_url": "https://github.com/ethereum/pm/issues/231#issuecomment-740462468",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/231",
    "id": 740462468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MDQ2MjQ2OA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-08T08:20:20Z",
    "updated_at": "2020-12-08T08:20:20Z",
    "author_association": "MEMBER",
    "body": "[EIP-2976](https://eips.ethereum.org/EIPS/eip-2976) has been updated with the decisions made in the meeting.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/740462468/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/740610925",
    "html_url": "https://github.com/ethereum/pm/issues/231#issuecomment-740610925",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/231",
    "id": 740610925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MDYxMDkyNQ==",
    "user": {
      "login": "poojaranjan",
      "id": 29681685,
      "node_id": "MDQ6VXNlcjI5NjgxNjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/29681685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/poojaranjan",
      "html_url": "https://github.com/poojaranjan",
      "followers_url": "https://api.github.com/users/poojaranjan/followers",
      "following_url": "https://api.github.com/users/poojaranjan/following{/other_user}",
      "gists_url": "https://api.github.com/users/poojaranjan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/poojaranjan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/poojaranjan/subscriptions",
      "organizations_url": "https://api.github.com/users/poojaranjan/orgs",
      "repos_url": "https://api.github.com/users/poojaranjan/repos",
      "events_url": "https://api.github.com/users/poojaranjan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/poojaranjan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-08T13:12:30Z",
    "updated_at": "2020-12-08T13:12:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Videos: \r\n* [Breakout room # 6 (Pt. 1)](https://youtu.be/NPDPPDq97i4)\r\n* [Breakout room # 6 (Pt. 2)](https://youtu.be/0Ne02zozLxU)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/740610925/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
