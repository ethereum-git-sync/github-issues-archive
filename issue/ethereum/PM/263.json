{
  "url": "https://api.github.com/repos/ethereum/pm/issues/263",
  "repository_url": "https://api.github.com/repos/ethereum/pm",
  "labels_url": "https://api.github.com/repos/ethereum/pm/issues/263/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/pm/issues/263/comments",
  "events_url": "https://api.github.com/repos/ethereum/pm/issues/263/events",
  "html_url": "https://github.com/ethereum/pm/issues/263",
  "id": 820270363,
  "node_id": "MDU6SXNzdWU4MjAyNzAzNjM=",
  "number": 263,
  "title": "Proposal to remove EIP-2315 (simple subroutines) from Berlin",
  "user": {
    "login": "lightclient",
    "id": 14004106,
    "node_id": "MDQ6VXNlcjE0MDA0MTA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lightclient",
    "html_url": "https://github.com/lightclient",
    "followers_url": "https://api.github.com/users/lightclient/followers",
    "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
    "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
    "organizations_url": "https://api.github.com/users/lightclient/orgs",
    "repos_url": "https://api.github.com/users/lightclient/repos",
    "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lightclient/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2021-03-02T18:22:45Z",
  "updated_at": "2021-03-29T15:41:29Z",
  "closed_at": "2021-03-05T15:00:49Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "EIP-2315 has a long history. It descends from EIP-615, a much more heavy-handed approach to improving the EVM semantics to produce more efficient code from compilers and be more amenable to static analysis. That EIP was abandoned due it's complexity and [lack of concrete improvements](https://ethereum-magicians.org/t/eip-615-subroutines-and-static-jumps-for-the-evm-last-call/3472/18?u=matt) to code efficiency.\r\n\r\nEIP-2315 was proposed in late 2019 as a backwards-compatible mechanism for improving calling conventions within the EVM. A [thorough analysis](https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229) was done in April 2020 by several members of the [evmone](https://github.com/ethereum/evmone) team. It appears that the \"fallthrough subroutine\" case was addressed [with a modification](https://github.com/ethereum/EIPs/pull/2646) to 2315 which would revert if a `beginsub` was called directly instead of as the result of a `jumpsub`. There were several other pieces of feedback that do not seem to have been addressed, including the note that `JUMP`s across subroutines would i) complicate static analysis ii) inhibit the translation of EVM bytecode to LLVM IR.\r\n\r\nIt is irregular to propose that an EIP is removed from a hardfork after it is scheduled. However, I think we should focus on the issue at hand rather than argue about past failures of the process. EIP-2315 has been publicly opposed by several members of the Solidity team over the last few days, including @chriseth ([link](https://twitter.com/ethchris/status/1366436964153651204?s=20)) and @ekpyron ([link](https://twitter.com/ethchris/status/1366436964153651204?s=20)).\r\n\r\nIf they don't believe the EIP will be useful for the Solidity compiler, then it is unlikely that the EIP will be used by many contracts on mainnet. Therefore, it will increase the complexity of the EVM with little to no benefit. For this reason, I'd like to propose that the EIP is removed from Berlin and these issues be worked out before including it into a fork.\r\n\r\nOne critique of this proposal will be that this EIP is a stepping stone to future changes, possibly even full EIP-615-like support. Generally, splitting large EIPs into smaller EIPs make sense. However, I think each step should be useful on its own. There is a clear debate around this EIP's usefulness, and even arguments that it may encumber future changes. By introducing changes piecewise, we run the risk that something better comes along or worse or it turns out that the future changes do not make it into the protocol.\r\n\r\n--\r\n\r\nOn a personal note, I want to apologize for bringing this up so late in the process. As I said above, such a proposal is irregular and I feel partially to blame for not spending more time reviewing this EIP and making sure that it met the needs of its users. I will make a much more dedicated effort for future forks to ensure that this situation doesn't happen again.",
  "closed_by": {
    "login": "lightclient",
    "id": 14004106,
    "node_id": "MDQ6VXNlcjE0MDA0MTA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lightclient",
    "html_url": "https://github.com/lightclient",
    "followers_url": "https://api.github.com/users/lightclient/followers",
    "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
    "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
    "organizations_url": "https://api.github.com/users/lightclient/orgs",
    "repos_url": "https://api.github.com/users/lightclient/repos",
    "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lightclient/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/pm/issues/263/reactions",
    "total_count": 3,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/pm/issues/263/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/789412865",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-789412865",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 789412865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTQxMjg2NQ==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-03T04:08:51Z",
    "updated_at": "2021-03-03T04:46:02Z",
    "author_association": "NONE",
    "body": ">It is irregular to propose that an EIP is removed from a hardfork after it is scheduled.\r\n\r\nHighly irregular, and a very bad precedent.\r\n\r\n> A thorough analysis was done in April 2020 by several members of the evmone team.\r\n\r\nYes, and we discussed it thoroughly at the time.  One change - not walking into subroutines - we agreed was useful and straightforward to implement - a semantic change to make BEGINSUB throw if executed. \r\n\r\nAnother - disallowing jumps into subroutines - was more difficult to implement, as it required syntactic analysis of EVM bytecode.  It was not just a semantics change.  EIP-615 attempted to impose syntactic restrictions, and that was part of why it failed.\r\n\r\nThe suggestion for a BEGINDATA opcode I judged to be independent of this proposal, and better proposed separately, which it has been -- https://eips.ethereum.org/EIPS/eip-2327.  \r\n\r\nThe authors of that analysis - including members of the Solidity team - have not objected to moving this proposal forward after our discussion.  Until now.\r\n\r\n> EIP-2315 has been publicly opposed by several members of the Solidity team over the last few days...\r\n\r\nI was told today that they found ways to get the same gas costs for subroutine calls and returns without using dedicated opcodes, and that using them would impede optimizations.  I've yet to see a written analysis to engage with, and find the claims to be surprising. \r\n\r\n> ... If they don't believe the EIP will be useful for the Solidity compiler, then it is unlikely that the EIP will be used by many contracts on mainnet. Therefore, it will increase the complexity of the EVM with little to no benefit. For this reason, I'd like to propose that the EIP is removed from Berlin and these issues be worked out before including it into a fork.\r\n\r\nThe Vyper team wants to use them.   Wei Tang was looking forward to these opcodes to improve his LLVM-to-EVM translator.  For other possible users I'd have to wrack my brain and dig though old business cards for conversations at conferences over the years.  Maybe chase down lots of \"likes\" on Twitter.  But EVM programming does not begin and end with Solidity.\r\n\r\nFurther, the changes are done and the increase in complexity - IMHO - is small.\r\n\r\n> One critique of this proposal will be that this EIP is a stepping stone to future changes ...\r\n\r\nYes, it is a first step in that direction, but useful in its own right.  And yes EIP-615 gives a general direction for future changes.\r\n\r\n> There is a clear debate around this EIP's usefulness, and even arguments that it may encumber future changes.\r\n\r\nNot all that clear, as it arose only today in one chat channel.\r\n\r\nOpcodes for subroutine calls and returns are useful and used in almost every real and virtual machine I know of.  I don't expect these will impede future progress, given they haven't slowed down progress anywhere else.\r\n\r\n>... introducing changes piecewise, we run the risk that something better comes along or worse or it turns out that the future changes do not make it into the protocol.\r\n\r\nLet us not let the (possible, future) best be the enemy of the good.\r\n\r\n> ...  I'd like to propose that the EIP is removed from Berlin and these issues be worked out before including it into a fork.\r\n\r\nMy time and resources as a champion are limited.  I've already spent years working out these  issues.  And there is little reason for me believe that having been worked out, new issues won't be raised prior to its next scheduled upgrade.  I am not hearing any objections that couldn't be or haven't been raised before, and certainly none worth removing the EIP over.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/789412865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/789455494",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-789455494",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 789455494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTQ1NTQ5NA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-03T05:53:50Z",
    "updated_at": "2021-03-03T05:53:50Z",
    "author_association": "MEMBER",
    "body": "@fubuloubu - the current maintainer of Vyper - has publicly expressed a desire for this EIP and an indication that they will use it.  https://twitter.com/fubuloubu/status/1366949333854277632",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/789455494/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/789477832",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-789477832",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 789477832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTQ3NzgzMg==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-03T06:39:43Z",
    "updated_at": "2021-03-03T06:45:29Z",
    "author_association": "MEMBER",
    "body": "The entire Vyper team has been looking forward to moving to subroutines and abandoning usage of dynamic jumps entirely for over 3 years now. I've also heard many folks from the security community express support for subroutines, if not EIP-2315 specifically. For the Solidity team, it might be difficult to make the transition or even use this feature in the first place, but I don't think that should block it's introduction if at least one other compiler team would make use of it.\r\n\r\nIt sounds like there are no specific technical concerns to this moving forwards, simply some questioning usefulness to their specific projects. I would argue that it being useful to several users outside of the Solidity team should alleviate that concern. I believe this proposal pushes us in a better direction, having not made any progress on EIP-615 due to concerns of complexity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/789477832/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790052597",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-790052597",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 790052597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDA1MjU5Nw==",
    "user": {
      "login": "timbeiko",
      "id": 9390255,
      "node_id": "MDQ6VXNlcjkzOTAyNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9390255?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timbeiko",
      "html_url": "https://github.com/timbeiko",
      "followers_url": "https://api.github.com/users/timbeiko/followers",
      "following_url": "https://api.github.com/users/timbeiko/following{/other_user}",
      "gists_url": "https://api.github.com/users/timbeiko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timbeiko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timbeiko/subscriptions",
      "organizations_url": "https://api.github.com/users/timbeiko/orgs",
      "repos_url": "https://api.github.com/users/timbeiko/repos",
      "events_url": "https://api.github.com/users/timbeiko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timbeiko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-03T21:02:25Z",
    "updated_at": "2021-03-03T21:02:53Z",
    "author_association": "MEMBER",
    "body": "Surfacing various client team's position about keeping 2315 in Berlin from the discord: \r\n- Geth: wants to wait until ACD to discuss ([link](https://discord.com/channels/595666850260713488/745077610685661265/816711025365745725))\r\n- Nethermind: OK with keeping 2315 in Berlin ([link](https://discord.com/channels/595666850260713488/745077610685661265/816592814279491644))\r\n- OpenEthereum: OK with keeping 2315 in Berlin ([link](https://discord.com/channels/595666850260713488/745077610685661265/816575688793653308))\r\n- Besu: OK with keeping 2315 in Berlin ([link](https://discord.com/channels/595666850260713488/745077610685661265/816695884225708043))",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790052597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790381273",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-790381273",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 790381273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDM4MTI3Mw==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T07:17:49Z",
    "updated_at": "2021-03-04T07:17:49Z",
    "author_association": "MEMBER",
    "body": "I will make a more proper response tomorrow, but for those interested currently: I have created a timeline of events to understand how we ended up in this situation with EIP-2315. I have done my best to provide an unbiased commentary of events. Please feel free to verify my commentary against the provided links.\r\n\r\n--\r\n\r\n**17.10.2019**: Greg publishes first draft as issue #2315. [[1]]\r\n**18.10.2019**: Alan Li (lead of EVM-LLVM project) receives the proposal positively. He notes that it would great if EVM had multi-byte instructions. [[2]]\r\n**18.10.2019**: Alex B responds he is in favor of multi-byte instructions, but this was an issue that EIP-615 ran into. He says EVM versioning would allow for this.\r\n**21.1.2020**: Greg opens PR 2484 to create EIP-2315. [[3]]\r\n**22.1.2020**: lithp posts that he doesn't understand the value of the EIP. [[4]]\r\n**22.1.2020**: Greg states that the value of the EIP is lower gas costs for contracts and easier static analysis. [[5]]\r\n**23.1.2020**: Martin leaves some comments on the PR. The EIP currently lists no security considerations, but Martin points out that subroutines will \"affect program flow analysis frameworks\" and those frameworks will need to be updated. [[6]]\r\n**23.1.2020**: Alex suggests that a `JUMPDEST` could follow `JUMPSUB` to maintain the current program flow. The thread is not resolved. [[7]]\r\n**1.2.2020**: Greg merges the draft into EIP repository. [[3]]\r\n**1.2.2020**: Greg requests that the EIP be discussed in ACD 80. [[8]]\r\n**7.2.2020**: The EIP is discussed in **ACD 80**. Martin states that the EIP is technically feasible, but that he wants to understand how much it improves things. Danno voices his support, noting that EIP-615 was too much but this is a good first step. [[9]]\r\n**17.2.2020**: Greg posts some solidity compiled bytecode and shows that subroutines would reduce the cost by 66%. [[10]]\r\n**21.2.2020**: The EIP is discussed during **ACD 81**. Greg gives a summary of the EIP and notes that it will \"bring the EVM up to 1970 standards\". Alan agrees. Peter says that on the surface, the EIP looks nice - however, he'd like to hack something into the solidity compiler to gauge how much of an improvement it provides. Alan says that subroutines has nothing to do with the solidity language - just compiler and EVM changes. Peter reiterates that it seems like the whole point of subroutines is to make code more efficient so he'd like to have that confirmed before shipping. Felix agrees that it should be confirmed before inclusion. James asks if the benchmarks are produced, are there any other oppositions to the EIP. Martin responds that there are not. Greg states that in the EIP's appendix there is an example that shows the improved gas costs. He agrees that it should be benchmarked, but expects the gas savings to be substantial. Felix notes that he expects the same, but would prefer to confirm it before shipping the EIP. The EIP is moved to EFI and James states that the next step is to produce the benchmarks. *This is not acknowledged as a decision in the notes*. [[11]]\r\n**26.2.2020**: Alex asks if the EIP is actually better for static analysis since the subroutines destinations are still dynamic. [[12]]\r\n**26.2.2020**: Greg says that some kinds are easier, but that he's heard complaints about deciphering subroutines in EVM code. [[13]]\r\n**28.2.2020**: Alex responds to Greg's previous claim that subroutines were 66% faster than solidity compiled code stating this was because he compiled the code with functions marked `public`. [[14]]\r\n**6.3.2020**: An update is given in **ACD 82** on the EIP, stating that the work is ongoing. [[15]]\r\n**7.3.2020**: Chris posts that the only benefit of this EIP is juggling the stack to access return addresses. He notes that a \"rotate stack\" opcode would be a much simpler change to achieve the same thing. He goes onto say that he'd like to restrict jumping into subroutines, but concedes that is likely too complex. He closes by stating that he cannot state whether the EIP is worth pursuing because Solidity will not benefit from it. He would like \"people working on debuggers (remix, truffle, etc), static analysis tools and VM implementations\" to review the EIP. [[16]]\r\n**19.3.2020**: Martin requests Alex and Chris review the EIP at a high-level to understand their stance on it. [[17]]\r\n**19.3.2020**: Chris responds that he would like this EIP to be clear about its goals. He notes that does not help static analysis enough to be included and it is only marginally more efficient than a stack rotation opcode (which would be more general purpose). He reiterates that the EIP author should be getting opinions from debugger and bytecode analyzer developers. [[18]]\r\n**20.3.2020**: In **ACD 83** Martin states that the EIP was discussed with the Vyper team and they gave it the thumbs up. He notes there is some ongoing discussions in the FEM thread. [[19]]\r\n**3.4.2020**: Alex posts that there is a discrepancy between EIP-615 this EIP, because in EIP-615 the `JUMPSUB` jumps to an immediate destination whereas this EIP's `JUMPSUB` jumps to a dynamic destination. He notes that he doesn't understand how having dynamic `JUMPSUB`s will help when other types of dynamic jumps. He would like to see the static version as part of the proposal, although it may not need to be implemented immediately. [[20]]\r\n**3.4.2020**: The EIP is discussed in **ACD 84**. Martin shares some updates made to the spec. Greg states that he is very happy with the EIP. Hudson asks if it should be moved to accepted. Tomasz says that if uses cases for codegend and code verification are there, then its fine. Hudson moves the EIP to accepted. [[21]]\r\n**4.4.2020**: Martin disagrees with Alex, stating that he doesn't believe multi-byte opcodes would be major issue. [[22]]\r\n**17.4.2020**: The EIP is discussed in **ACD 85**. Only updates on client implementations are given. [[23]]\r\n**29.4.2020**: Paweł publishes an analysis of the EIP. In the analysis, he notes multiple concerns including fallthrough behavior and jumping across subroutines. [[24]]\r\n**29.4.2020**: Martin responds that the fallthrough issue can be resolved easily, but the jumping across subroutines is unfortunate. [[25]]\r\n**29.4.2020**: Alexey notes his concern with the ability to jump across subroutines and that he thinks if structural restrictions are not introduced for legacy jumps, it will be a messy situation. He concede with Greg that it is a slippery slope back to EIP-615, but hopes that it may cause the former opponents of EIP-615 to reconsider their hypothesis that splitting the EIP into smaller pieces is simpler. [[26]]\r\n**1.5.2020**: The EIP is discussed in **ACD 86**. Martin summarizes the analysis published by Paweł et al. He notes that many people have commented that they prefer to not have the ability to jump into and out of subroutines. Greg says that he does not want to restrict that, because he wants this EIP to be as simple as possible. He notes the discussion is ongoing. James says that he thinks it was premature to schedule the EIP for Berlin and would like to wait until the discussions play out. Martin says that he'd like to go back to the format where EIPs are done when they're done and then they're slated for a hardfork. James agrees and says its not fair to say whether the EIP will or will not be ready for Berlin at this time. [[27]]\r\n**1.5.2020**: Greg posts that he is worried about making subroutines syntactic. He says his intent is to provide a pure control flow mechanism with a Forth-style return stack. He acknowledges how, as written, the EIP may cause problems for LLVM compilation. [[28]]\r\n**1.5.2020**: Paweł posts that this EIP is good starting place, but that there should be two additional restrictions (stated above) that will maintain the EVM \"look and feel\" of the EIP. [[29]]\r\n**12.5.2020**: Chris reiterates that this EIP does not very beneficial to compilers and that if a subroutine returns a value, it may actually be for efficient to use a regular jump. [[30]]\r\n**13.5.2020**: Alan disagrees that the EIP is not beneficial to compilers. [[31]]\r\n**15.5.2020**: The EIP is discussed in **ACD 87**. Péter notes that the specification isn't complete yet. Martin concurs. Greg says it should be complete in the next week. [[32]]\r\n**20.5.2020**: Chris opens a PR into the EIP to restrict jumping into a subroutine. Greg opposes the change, while Martin thinks it's good. *The PR is never resolved and is eventually closed for inactivity*. [[33]]\r\n**29.5.2020**: The EIP is discussed in **ACD 88**. Martin states that he is feeling general consensus on the EIP. He notes the subroutines restrictions that have been proposed and acknowledges that proposal is still being discussed. [[34]]\r\n**4.9.2020**: The EIP is discussed in **ACD 95**. Greg says that there is still a discussion of whether jumping into subroutines should be allowed and he is more amenable to it. [[35]]\r\n**16.9.2020**: Alex pings Greg to review Chris' PR regarding the restriction of jumping into subroutines. [[36]] \r\n**17.9.2020**: Greg says the PR overall looks good, but is confused by a section. [[37]]\r\n**18.9.2020**: The EIP is discussed in **ACD 96**. Hudson says that there is still an outstanding question as to whether restrict jumping into subroutines. Greg says the discussion can move to FEM in the interest of time, but that he is inclined to accept the restriction. Greg says that believes what exists is ready to go and that everyone agrees with this. Martin agrees. Alex and Paweł say they are still in favor of the restriction. Martin notes that the change will generally make clients more complex, but should be okay. He notes that it may be difficult to get in other clients. James says the current version can go into YoloV2 and the version with the jump restriction can go into YoloV3, if it is finalized. [[38]]\r\n**19.2.2020**: Greg resolves his confusion from above, but notes that he believes the proposal break backwards compatibility and is therefore against it. *No additional comments are made regarding the EIP in the analysis thread.* [[39]]\r\n*Note: ACD 96 is the last time I found 2315 discussed in an ACD. Meeting notes were missing for 98 & 100, so I'm not sure if restricting jumping was discussed in those.*\r\n**1.3.2021**: Chris posts on twitter that he still doesn't believe the EIP is useful. [[40]]\r\n**1.3.2021**: Daniel posts that he believes the EIP doesn't achieve what it claims, namely improved efficiency and static analysis, to a degree that warrants its inclusion in a hard fork.\r\n**2.3.2021**: I read these posts and share them in ACD discord. [[41]]\r\n\r\n[1]: https://github.com/ethereum/EIPs/issues/2315\r\n[2]: https://github.com/ethereum/EIPs/issues/2315#issuecomment-543713409\r\n[3]: https://github.com/ethereum/EIPs/pull/2484\r\n[4]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/2?u=matt\r\n[5]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/3?u=matt\r\n[6]: https://github.com/ethereum/EIPs/pull/2484#discussion_r369997523\r\n[7]: https://github.com/ethereum/EIPs/pull/2484#discussion_r370040341\r\n[8]: https://github.com/ethereum/pm/issues/150#issuecomment-581097099\r\n[9]: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2080.md#eip-2315-simple-subroutines-for-the-evm\r\n[10]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/12?u=matt\r\n[11]: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2081.md#eip-2315\r\n[12]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/17?u=matt\r\n[13]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/18?u=matt\r\n[14]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/18?u=matt\r\n[15]: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2082.md\r\n[16]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/22?u=matt\r\n[17]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/29?u=matt\r\n[18]: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2083.md#eip---2515-2315\r\n[19]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/30?u=matt\r\n[20]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/36?u=matt\r\n[21]: https://youtu.be/JqxVvJBhTxo?t=795\r\n[22]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/40?u=matt\r\n[23]: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2085.md#eip-2315-simple-subroutines-for-the-evm\r\n[24]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229\r\n[25]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/2?u=matt\r\n[26]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/4?u=matt\r\n[27]: https://youtu.be/MOZ7_0Tb95M?t=705\r\n[28]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/17?u=matt\r\n[29]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/18?u=matt\r\n[30]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/26?u=matt\r\n[31]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/29?u=matt\r\n[32]: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2087.md#agenda-1-berlin-eips\r\n[33]: https://github.com/ethereum/EIPs/pull/2663\r\n[34]: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2088.md#1a-eip-2315-simple-subroutines-for-the-evm\r\n[35]: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2095.md#14-eip-2315-simple-subroutines-for-the-evm\r\n[36]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/57?u=matt\r\n[37]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/58?u=matt\r\n[38]: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2096.md#2f-eip-2315-simple-subroutines-for-the-evm\r\n[39]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229/60?u=matt\r\n[40]: https://twitter.com/ethchris/status/1366436964153651204?s=20\r\n[41]: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941/74?u=matt\r\n[42]: https://discord.com/channels/595666850260713488/745077610685661265/816346145382989864",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790381273/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790423785",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-790423785",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 790423785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDQyMzc4NQ==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T08:25:19Z",
    "updated_at": "2021-03-04T09:47:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think from what @lightclient posted above (great work, BTW), it is clear that there were 2 points of contention with regards to the properties of the subroutines:\r\n1. Whether the `JUMPSUB` uses jump location from the stack, or from the immediate as a part of the opcode. Eventually the stack solution was used, and I agree with Chris (after my own analysis) that this effectively made this variant of subroutines non beneficial for one of initially stated goals - ease of static analysis due to lack of dynamic jumps. It actually makes that stated goal harder to achieve because to do so, `JUMPSUB` opcode will need to be deprecated as well as `JUMP` and `JUMPI`.\r\n2. Whether the jumping from the middle of one subroutine into the middle of another subroutine is allowed. Eventually this was allowed, I believe to simplify the implementation and therefore expedite the acceptance of EIP. I believe (after my own analysis) that this decision has unfortunately mostly eroded another stated benefit of the subroutines - strict \"first in/first out\" behaviour of subroutines calling each other (as we are used as programmers). As a result, simple emulation of the implemented behaviour by using combination of `PUSH` and `JUMP` opcodes seems to suffice.\r\n\r\nThere were other observations made after my analysis:\r\n1. The claim (now apparently retracted) by the EIP author that subroutines are present in every modern virtual machine might be true for the original definition of subroutine from EIP-615 (they would go under the names of virtual and static methods in Java, compiled into `invokevirtual` and `invokestatic`, under the name of \"functions\" in Web Assembly). However, in the definition of \"subroutine\" we ended up in this EIP-2315, the only similar thing I found so far is the concept of \"subroutine\" in JVM, which is implemented by the pair of instructions `jsr` and `ret`. These instructions seem to only be produced by Java Complier to compactly compile `finally {}` blocks. Also, since `ret` uses a local variable for its return location, this seems to be the only instruction that makes JVM not dynamic-jump free.\r\n2. The term \"subroutine\" that was used throughout the process of rejecting EIP-615, then splitting part of it into EIP-2315, and then adapting EIP-2315 for the ease of implementation, have probably led to much confusion and surprise. Because what we got in the end does not look and feel like a \"subroutine\" (function) that a programmer's intuition usually tells us. I must confess I did not notice that change and assumed until very recently that EIP-2315 still proposed the subroutine in similar meaning to EIP-615 that is why I did not think about objecting earlier.\r\n3. The claim that the use of subroutines from EIP-2315 will be beneficial for Vyper compiler as a safely measure for inter-contract calls, needs to be revisited. I have a suspicion (also looking at the timeline posted above) that the Vyper team gave their thumbs up to the proposal while it was still restricting cross subroutine jumps, which does make sense to me. I find the argument for still using subroutines in the current EIP-2315 form (without cross-jump restriction) as a safety feature, much weaker and perhaps non-existent.\r\n4. Reference implementation of the currently proposed form of this EIP was done in go-ethererum. After the review of the implementation, I concluded that it does not incur extra performance overhead on other opcodes. However, in evmone implementation, EIP-2315 seems to be introducing overhead to all the execution. After looking at the implementation of jumps (and now of `JUMPSUB` in particular), I think the reason for the presence of this overhead in evmone and its absence in go-ethereum is most probably the fact that evmone has ostensibly more optimised implementation of jumps that does more work upfront but less work during the actual jump. Such more optimised implementation suffers extra overhead due to more work upfront to potentially handle `JUMPSUB`. Since go-ethereum does not have these optimisations and did not experience this overhead, this issue has not been flagged until the evmone implementation was benchmarked.\r\n\r\nAnd finally, as frustrating as it may be for @gcolvin and other authors, we are not trying to belittle your efforts on this. I am offering my bit of skill and expertise here, without claiming any expert authority, but just having done some analysis myself. I think trusting expert authority a bit too much was one of the reason we got into this situation. Experts do make mistakes and everyone has blindspots. Hope this was useful for anybody ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790423785/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790424619",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-790424619",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 790424619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDQyNDYxOQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T08:26:47Z",
    "updated_at": "2021-03-04T08:26:47Z",
    "author_association": "MEMBER",
    "body": "Thank you very much for this interesting timeline! If it is correct, it confirms my impression that the EIP was never properly accepted. It was moved to accepted once, but that was never reflected on the proposal or the discussion thread. Also it was further discussed and modified after this point in time.\r\n\r\nPlease also note that my request to clarify the goals of the EIP was never reacted upon. Also during 2020 I was trying to make the EIP better for static analysis because I thought this was the goal. Since no static analysis exerts participated in the discussion, we don't know if the modifications improved the situation. Recently it turned out that at least on the initial example in the EIP, the subroutine version is more expensive, so the gas savings goal is also questionable.\r\n\r\nI have said that elsewhere, but wanted to repeat it here: I'm totally fine with this being part of Berlin if that is the wish of the ACD, I just want to advise that it is a change that is very difficult if not impossible to undo or modify, it's not just adding a new opcode, it's a much more profound change and it's a change whose short and long-term benefits are unclear.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790424619/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790456076",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-790456076",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 790456076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDQ1NjA3Ng==",
    "user": {
      "login": "q9f",
      "id": 58883403,
      "node_id": "MDQ6VXNlcjU4ODgzNDAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/58883403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/q9f",
      "html_url": "https://github.com/q9f",
      "followers_url": "https://api.github.com/users/q9f/followers",
      "following_url": "https://api.github.com/users/q9f/following{/other_user}",
      "gists_url": "https://api.github.com/users/q9f/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/q9f/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/q9f/subscriptions",
      "organizations_url": "https://api.github.com/users/q9f/orgs",
      "repos_url": "https://api.github.com/users/q9f/repos",
      "events_url": "https://api.github.com/users/q9f/events{/privacy}",
      "received_events_url": "https://api.github.com/users/q9f/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T09:09:34Z",
    "updated_at": "2021-03-04T09:09:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Surfacing various client team's position about keeping 2315 in Berlin from the discord\r\n\r\nWith respect to the process, we always only accepted proposals without any outstanding technical concerns. I haven't followed the discussions last year but from what I read in the summary, there are yet some questions and concerns to be addressed. We can find that out on Friday.\r\n\r\nI'm not confident to make a technical comment on the proposal, but would like to emphasize that we should rather risk breaking testnets by pulling 2315 just to be on the safe side than activating a feature on mainnet prematurely. Just from looking at the time left for Berlin, the only realistic question to ask right now is not \"shall we keep 2315 in Berlin\" but \"will pulling 2315 from Berlin have any unintended side-effects?\"\r\n\r\nOnce everything is resolved, we can reconsider it for London, but given the current debate we should buy some time for 2315.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790456076/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790584107",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-790584107",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 790584107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDU4NDEwNw==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T12:31:13Z",
    "updated_at": "2021-03-04T12:31:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I do not actually agree that this sets a \"very bad precedent\". What is worse: \"They found out very late in the process the EIP does not meet initial requirements and does not seem to be useful, and decided to take it out while it was still in their hands\" or \"They found out very late in the process the EIP does not meet initial requirements and does not seem to be useful, and decided to leave it as it is, because it has been accepted, and they did not want to make EIP authors too upset, and they were worried about setting a bad precedent\"?\r\nFrom my humble point of view, the second is the worst option. The first actually shows that people care a lot about what goes in. The second shows that people care more about sunk costs and optics. Sorry if this is too harsh.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790584107/reactions",
      "total_count": 17,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 6,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790666799",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-790666799",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 790666799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDY2Njc5OQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T14:42:01Z",
    "updated_at": "2021-03-04T14:59:19Z",
    "author_association": "MEMBER",
    "body": "Another way to word the latter:\r\n> Some people *suggested* that the EIP may not be worth doing, but there wasn't enough time to thoroughly evaluate it again before Berlin so we pulled it despite the fact that back when we *did* have time to think about it we decided it was a good idea.\r\n\r\nWhile it is certainly possible that the people suggesting it isn't worth doing are right, the problem is that we don't have enough time to dive deep and thus we are allowing a well timed *suggestion* of \"not worth it\" to block an EIP.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790666799/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790738007",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-790738007",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 790738007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDczODAwNw==",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T16:18:17Z",
    "updated_at": "2021-03-04T16:18:41Z",
    "author_association": "MEMBER",
    "body": "I would rather put it like this,\r\n\r\n```\r\nit was decided that an EIP needs some better review, so to avoid the issues its better to wait with it hardcode implementation for security reasons.\r\n``` \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790738007/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790910171",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-790910171",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 790910171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDkxMDE3MQ==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T20:15:39Z",
    "updated_at": "2021-03-04T20:15:39Z",
    "author_association": "MEMBER",
    "body": "It appears things are leaning towards removing EIP-2315, so I'll keep this post short.\r\n\r\nThose who support EIP-2315 in Berlin continue to base their argument for inclusion on the past decision by ACD to accept the EIP ([1], [2], [3], [4], [5], [6], [7]). We have processes to avoid these types of situations and make our lives easier. Those processes are only as airtight as the humans who design and implement them. Humans make mistakes and those mistakes can manifest anywhere at anytime. There is no need to be victims of our own creation. \r\n\r\nA mistake was made in the process, and EIP-2315 should not have been accepted. As far back as ACD 81, the Geth team [requested benchmarks](https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2081.md#eip-2315) be done to prove gains claimed by the EIP. These benchmarks did not materialize. In ACD 84, @Souptacular motioned to move the EIP to accepted. @tkstanczak [reiterated](https://youtu.be/JqxVvJBhTxo?t=795) that if the use cases were there (improved codegen + static analysis) then he was onboard. Neither had been proved, yet the EIP was scheduled for Berlin. In ACD 86, @MadeofTin [concedes](https://www.youtube.com/watch?t=705&v=MOZ7_0Tb95M&feature=youtu.be) that moving the EIP to accepted was premature given the continued debate regarding the spec. Even [months later](https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2096.md#2f-eip-2315-simple-subroutines-for-the-evm), in the last reference I can find to the EIP in an ACD call, @Souptacular notes that there are still outstanding questions around the spec. @gcolvin stated that it would be resolved offline in the Magicians thread, but it was not resolved.\r\n\r\nThroughout this, at almost every step of the way @axic, @chfast, and @chriseth were voicing concerns with the proposal. An [analysis](https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm-analysis/4229) was written and a [PR](https://github.com/ethereum/EIPs/pull/2663) was opened to the EIP to avoid jumping into and out of subroutines - which is probably the strongest complaint against the EIP. Unfortunately for some reason, they became less involved with the EIP last fall and it managed to spend several more months on the Berlin docket. This gave the EIP an undue sense of authority for those less involved in the discussion of its viability. The *process* should've ensured their complaints with the EIP were resolved, but it didn't. It would have been nice if they were there to continue fighting it, but they weren't. They had already spent months fighting it - the *process* should've blocked the EIP until the discussion was resolved.\r\n\r\nIn terms of technical complaints of the EIP, I'm not correct person to speak on the issue. Hopefully @AlexeyAkhunov's thoughts above in combination with @chfast's analysis is enough to concede that the usefulness of this EIP is still being questioned.\r\n\r\nAlthough this is a highly irregular proposal, it is not personal. I sincerely apologize for disruption it has caused. I plan to do my part moving forward to avoid this happening again in the future. I hope that we can have further constructive conversations as a group to improve the EIP process.\r\n\r\n[1]: https://discord.com/channels/595666850260713488/745077610685661265/817001840934912091\r\n[2]: https://discord.com/channels/595666850260713488/745077610685661265/817048897994227733\r\n[3]: https://discord.com/channels/595666850260713488/745077610685661265/816674924122734652\r\n[4]: https://discord.com/channels/595666850260713488/745077610685661265/816558088684306453\r\n[5]: https://discord.com/channels/595666850260713488/745077610685661265/816427076327440445\r\n[6]: https://discord.com/channels/595666850260713488/745077610685661265/816480165809881118\r\n[7]: https://discord.com/channels/595666850260713488/745077610685661265/817072075856412672",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/790910171/reactions",
      "total_count": 11,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/791473406",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-791473406",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 791473406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTQ3MzQwNg==",
    "user": {
      "login": "lightclient",
      "id": 14004106,
      "node_id": "MDQ6VXNlcjE0MDA0MTA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14004106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightclient",
      "html_url": "https://github.com/lightclient",
      "followers_url": "https://api.github.com/users/lightclient/followers",
      "following_url": "https://api.github.com/users/lightclient/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightclient/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightclient/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightclient/subscriptions",
      "organizations_url": "https://api.github.com/users/lightclient/orgs",
      "repos_url": "https://api.github.com/users/lightclient/repos",
      "events_url": "https://api.github.com/users/lightclient/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightclient/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-05T15:00:46Z",
    "updated_at": "2021-03-05T15:00:46Z",
    "author_association": "MEMBER",
    "body": "This proposal was accepted in ACD 107. EIP-2315 will be removed from Berlin.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/791473406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/791492828",
    "html_url": "https://github.com/ethereum/pm/issues/263#issuecomment-791492828",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/263",
    "id": 791492828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTQ5MjgyOA==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-05T15:31:35Z",
    "updated_at": "2021-03-05T15:31:35Z",
    "author_association": "NONE",
    "body": "While waiting for my girlfriend to come celebrate my birthday I took time to listen in on the meeting and review the notes above.\r\n\r\nI'd like to thank Peter for his comment on the \"nastiness\" of this decision and its follow-on effects.  For myself, I am left to seriously reconsider my future involvement with the Ethereum project.  And to seriously question whether I could in good conscience advise others to participate.  Unless they enjoy chaos and disappointment.\r\n\r\nIt is true that a single technical concern (whether to bear the cost to prevent branching into subroutines) remained active for some time after initial acceptance, as I attempted to give it the best consideration I could.  In the end, as author, I made the choice not to accept the change, for reasons I stated at the time -- from the very start I meant this proposal to be a very small change to provide subroutines with Forth semantics, and not to impose syntactic restrictions.\r\n\r\nThe issue was not raised again until Christian made a comment - not on the ACD channel, but on Twitter - that for him it remained a blocking objection.  That objection left me - unprepared and at the last minute - trying to field objections and explain decisions long since made.  I should not have needed to do that.\r\n\r\nI put some degree of blame on the client teams themselves.  Before implementing, testing, and scheduling an EIP for an upgrade I believe it falls on them to do their own due diligence.  To be convinced that the EIP is really an improvement to the protocol, and be able to justify their decision.\r\n\r\nAnd Hudson, thank you for keeping the discussion respectful and on track, as disappointed as I am in the outcome.  I hope this sad turn of affairs leads to some serious soul-searching -- we have tasked ourselves with the research, development, and management of a network with a current market capitalization of $173 billion USD.  I have no clue how many businesses are building on that network, or how many livelihoods it supports.  We must learn to operate like professionals.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/791492828/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
