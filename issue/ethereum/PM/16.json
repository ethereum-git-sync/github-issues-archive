{
  "url": "https://api.github.com/repos/ethereum/pm/issues/16",
  "repository_url": "https://api.github.com/repos/ethereum/pm",
  "labels_url": "https://api.github.com/repos/ethereum/pm/issues/16/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/pm/issues/16/comments",
  "events_url": "https://api.github.com/repos/ethereum/pm/issues/16/events",
  "html_url": "https://github.com/ethereum/pm/issues/16",
  "id": 233844072,
  "node_id": "MDU6SXNzdWUyMzM4NDQwNzI=",
  "number": 16,
  "title": "All Core Devs Meeting 18 Agenda",
  "user": {
    "login": "Souptacular",
    "id": 3460120,
    "node_id": "MDQ6VXNlcjM0NjAxMjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3460120?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Souptacular",
    "html_url": "https://github.com/Souptacular",
    "followers_url": "https://api.github.com/users/Souptacular/followers",
    "following_url": "https://api.github.com/users/Souptacular/following{/other_user}",
    "gists_url": "https://api.github.com/users/Souptacular/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Souptacular/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Souptacular/subscriptions",
    "organizations_url": "https://api.github.com/users/Souptacular/orgs",
    "repos_url": "https://api.github.com/users/Souptacular/repos",
    "events_url": "https://api.github.com/users/Souptacular/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Souptacular/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2866593601,
      "node_id": "MDU6TGFiZWwyODY2NTkzNjAx",
      "url": "https://api.github.com/repos/ethereum/pm/labels/agenda",
      "name": "agenda",
      "color": "0052cc",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2017-06-06T10:16:48Z",
  "updated_at": "2021-03-29T15:38:17Z",
  "closed_at": "2017-06-22T02:15:16Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# All Core Devs Meeting 18 Agenda\r\n### Meeting Date/Time: Friday 6/16/17 at 14:00 UTC\r\n### Meeting Duration 1.5 hours\r\n### [YouTube Live Stream Link](https://www.youtube.com/watch?v=8jWhPylWros)\r\n# Agenda\r\n\r\n1. Metropolis updates/EIPs.\r\n  **a. Any \"subtleties\" or questions we need to work out.**\r\n        1. [EIP 206 REVERT Opcode : The \"Specification\" section in the EIP does not specify that REVERT can return data to the caller. Neither does it specify how the caller can access the returned data.](https://github.com/ethereum/EIPs/pull/206#issuecomment-308324622) [Yoichi]\r\n        2. [EIP 208 Abstraction of transaction origin and signature: Atomicity over an ECDSA's accounts operations](https://github.com/ethereum/EIPs/pull/208#issuecomment-307681408) [Jeff Coleman]\r\n        3. EIP 208: ethereum/EIPs#208 Concerns [Martin H.S]\r\n             i. A transaction hash no longer uniquely identifies an execution, since a transaction at least theoretically can be included in multiple blocks, or multiple times in a block.\r\n             ii. Do we need to modify rpc-call which assumes hash = unique execution, to return a list of transactions instead of a single element?\r\n            iii. What side-effects does the breaking of this invariant have on the clients?\r\n        4. [EIP 211 RETURNDATACOPY and RETURNDATASIZE: This is complete right?](https://github.com/ethereum/EIPs/pull/211) [Hudson]\r\n        5. [EIP 213 zkSNARK verification primitives: Gas costs for additional and mult. on EC](https://github.com/ethereum/EIPs/pull/213#issuecomment-305423098) [Christian or someone]\r\n        6. [EIP 214 STATICCALL: Various potential errors](https://github.com/ethereum/EIPs/pull/214#issuecomment-306800891) [Vitalik]\r\n  **b. Updates to testing.**\r\n        - Documentation and other updates\r\n  **c. Details and implementations of EIPs.**\r\n        - Updates from client teams.\r\n            - geth - https://github.com/ethereum/go-ethereum/pull/14337\r\n            - Parity - https://github.com/paritytech/parity/issues/4833\r\n            - cpp-ethereum - https://github.com/ethereum/cpp-ethereum/issues/4050\r\n            - yellowpaper -  https://github.com/ethereum/yellowpaper/issues/229\r\n            - pyethapp\r\n            - Other clients\r\n  **d. Review time estimate for testing/release.**\r\n\r\nPlease provide comments to add or correct agenda topics.",
  "closed_by": {
    "login": "Souptacular",
    "id": 3460120,
    "node_id": "MDQ6VXNlcjM0NjAxMjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3460120?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Souptacular",
    "html_url": "https://github.com/Souptacular",
    "followers_url": "https://api.github.com/users/Souptacular/followers",
    "following_url": "https://api.github.com/users/Souptacular/following{/other_user}",
    "gists_url": "https://api.github.com/users/Souptacular/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Souptacular/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Souptacular/subscriptions",
    "organizations_url": "https://api.github.com/users/Souptacular/orgs",
    "repos_url": "https://api.github.com/users/Souptacular/repos",
    "events_url": "https://api.github.com/users/Souptacular/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Souptacular/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/pm/issues/16/reactions",
    "total_count": 7,
    "+1": 7,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/pm/issues/16/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/306463467",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-306463467",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 306463467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjQ2MzQ2Nw==",
    "user": {
      "login": "sophiii",
      "id": 27499732,
      "node_id": "MDQ6VXNlcjI3NDk5NzMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/27499732?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiii",
      "html_url": "https://github.com/sophiii",
      "followers_url": "https://api.github.com/users/sophiii/followers",
      "following_url": "https://api.github.com/users/sophiii/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiii/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiii/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiii/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiii/orgs",
      "repos_url": "https://api.github.com/users/sophiii/repos",
      "events_url": "https://api.github.com/users/sophiii/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiii/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T11:54:06Z",
    "updated_at": "2017-06-06T11:54:06Z",
    "author_association": "NONE",
    "body": "I would like to see some of the subtleties around  #EIP208 discussed. Specifically I am worried about transaction validation leading to DOS attacks. \r\n\r\nI think the current strategy of white listing proxy accounts is not enough as the contract the proxy calls could throw and this would revet the gas that was paid to the miner. \r\n\r\nSecondly these is a possibility that this could lead to a network split attack. An attacker makes a contract that would fail to pay 1/2 of the nodes if they are the one to mine an a proxy transaction there. Then makes a proxy transaction that calls that contract and broadcasts it. 1/2 of the nodes see this transaction as valid so they rebroadcast it. When they rebroadcast it to a node that this transaction does not pay they see it as invalid and blacklist the sender as sending bad transactions. Over time an attacker could isolate a specific miner or group of nodes this way.\r\n\r\nSee my comments https://github.com/ethereum/EIPs/pull/208/files\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/306463467/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308323278",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-308323278",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 308323278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODMyMzI3OA==",
    "user": {
      "login": "Souptacular",
      "id": 3460120,
      "node_id": "MDQ6VXNlcjM0NjAxMjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3460120?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Souptacular",
      "html_url": "https://github.com/Souptacular",
      "followers_url": "https://api.github.com/users/Souptacular/followers",
      "following_url": "https://api.github.com/users/Souptacular/following{/other_user}",
      "gists_url": "https://api.github.com/users/Souptacular/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Souptacular/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Souptacular/subscriptions",
      "organizations_url": "https://api.github.com/users/Souptacular/orgs",
      "repos_url": "https://api.github.com/users/Souptacular/repos",
      "events_url": "https://api.github.com/users/Souptacular/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Souptacular/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T05:26:59Z",
    "updated_at": "2017-06-14T05:26:59Z",
    "author_association": "MEMBER",
    "body": "@sophiii would you like to attend the meeting to voice your concerns?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308323278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308331672",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-308331672",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 308331672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODMzMTY3Mg==",
    "user": {
      "login": "obscuren",
      "id": 6264126,
      "node_id": "MDQ6VXNlcjYyNjQxMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6264126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obscuren",
      "html_url": "https://github.com/obscuren",
      "followers_url": "https://api.github.com/users/obscuren/followers",
      "following_url": "https://api.github.com/users/obscuren/following{/other_user}",
      "gists_url": "https://api.github.com/users/obscuren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obscuren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obscuren/subscriptions",
      "organizations_url": "https://api.github.com/users/obscuren/orgs",
      "repos_url": "https://api.github.com/users/obscuren/repos",
      "events_url": "https://api.github.com/users/obscuren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obscuren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T06:25:27Z",
    "updated_at": "2017-06-14T06:25:27Z",
    "author_association": "MEMBER",
    "body": "The initial idea is to ignore any broadcasted abstract transactions and gradually come up with a strategy to accept them in the transaction pool. We will still accept the transactions as valid if the transaction was included by a miner.\r\n\r\nThe EIP allows for further experimentation. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308331672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308529071",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-308529071",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 308529071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODUyOTA3MQ==",
    "user": {
      "login": "sophiii",
      "id": 27499732,
      "node_id": "MDQ6VXNlcjI3NDk5NzMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/27499732?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiii",
      "html_url": "https://github.com/sophiii",
      "followers_url": "https://api.github.com/users/sophiii/followers",
      "following_url": "https://api.github.com/users/sophiii/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiii/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiii/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiii/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiii/orgs",
      "repos_url": "https://api.github.com/users/sophiii/repos",
      "events_url": "https://api.github.com/users/sophiii/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiii/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T19:08:34Z",
    "updated_at": "2017-06-14T19:09:04Z",
    "author_association": "NONE",
    "body": "@Souptacular I would be happy to. \r\n@obscuren  I am worried that after some experimenting we will realize that there is no DOS proof method of validateing other than very restrictive white listing. So i want to raise the issue now in case that we need to build a less DOS able transaction abstraction format. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308529071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308951256",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-308951256",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 308951256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODk1MTI1Ng==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-16T07:08:55Z",
    "updated_at": "2017-06-16T07:08:55Z",
    "author_association": "MEMBER",
    "body": "I'd like to add \r\n\r\n* EIP 208: https://github.com/ethereum/EIPs/pull/208#issuecomment-297976646\r\n  * A transaction hash no longer uniquely identifies an execution, since a transaction at least theoretically can be included in multiple blocks, or multiple times in a block.\r\n    * Do we need to modify rpc-call which assumes `hash = unique execution`, to return a list of transactions instead of a single element?\r\n    * What side-effects does the breaking of this invariant have on the clients? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308951256/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308971799",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-308971799",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 308971799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODk3MTc5OQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-16T08:54:20Z",
    "updated_at": "2017-06-16T08:54:20Z",
    "author_association": "MEMBER",
    "body": "> @obscuren I am worried that after some experimenting we will realize that there is no DOS proof method of validateing other than very restrictive white listing\r\n\r\nEven if this is true, IMO that is totally okay. Even if we have a whitelist that accepts proxy accounts of a very specific format, that have a purity-checked signature checker followed by a specific piece of code to increment the nonce and forward the call, that is still an improvement over the status quo.\r\n\r\n> However miners will only include transactions that pay them. Could this result in valid transactions that never get executed as the payment fails and thus no miner wants to include them?\r\n\r\nYes. But that's a feature, not a bug. Of course transactions that do not pay for their own gas should not get included.\r\n\r\n> This could lead to alot of over heard for miners dealing with these transactions that will never get processed but are still valid.\r\n\r\nThe overhead should be bounded in terms of gas; elsewhere I suggested targeting a bound of 200000 as that's high enough to do ring signatures, hash ladder signatures and pairing-based BLS signatures but nothing more complex.\r\n\r\n> I think that this is not enough to ensure the miner gets paid. As a transaction can throw in an external contract which will undo the previous payment.\r\n\r\nWhat do you mean by \"external contract\". Think of the \"intended call tower\" as being:\r\n\r\n* NULL_SENDER calls ACCOUNT\r\n* ACCOUNT checks signature and nonce, increments nonce\r\n* ACCOUNT calls CALLEE\r\n* ACCOUNT calls COINBASE to pay for gas\r\n\r\nACCOUNT can be required to contain \"assert msg.sender == NULL_SENDER\" to prevent re-entrancy attacks. Whatever happens inside CALLEE can at worst lead to CALLEE consuming all of its gas; there's no risk of it \"breaking out\" in any way. And the call to COINBASE would only have 2300 gas, so it can't do anything interesting.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308971799/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308973403",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-308973403",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 308973403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODk3MzQwMw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-16T09:01:52Z",
    "updated_at": "2017-06-16T09:01:52Z",
    "author_association": "MEMBER",
    "body": "> Do we need to modify rpc-call which assumes hash = unique execution, to return a list of transactions instead of a single element?\r\n\r\nMy preference is for any RPC call that currently uses a hash to refer to a transaction to instead refer (in the EIP86 case) to the _first successful execution_ of a transaction, meaning the first execution that did not throw/revert in the outermost layer of execution. Later on we can add the ability to look up all positions where a given transaction was included (ie. `tx -> ((blknum, txindex), (blknum, txindex) ... )`), and then the ability to look up a transaction receipt by `(blknum, txindex)`. This abstraction also has the benefit that it increases efficiency, as you can look up all _receipts_ in a block without ever accessing the _transactions_.\r\n\r\nThere **are** situations where I expect multiple executions of the same tx will be a totally legitimate and regular thing. The main one I can think of is where a contract periodically issues a bounty to \"poke\" it (eg. ethereum alarm clock) and exactly the same poke transaction is used multiple times because there's no reason to change the data around. But we can use initially restrictive whitelists to mostly prevent this from happening until all the tooling is finished.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308973403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308973951",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-308973951",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 308973951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODk3Mzk1MQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-16T09:04:22Z",
    "updated_at": "2017-06-16T09:04:22Z",
    "author_association": "MEMBER",
    "body": "Also, I realized there is one really cool benefit of EIP86: because the set of non-includeability conditions for a tx can expand, we can have ICOs where all the failed transactions do not clog up the blockchain. Somewhere between 50-99% of ICO purchases on average fail, so I can see this being a significant de-facto capacity boost.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/308973951/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/309011949",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-309011949",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 309011949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTAxMTk0OQ==",
    "user": {
      "login": "sophiii",
      "id": 27499732,
      "node_id": "MDQ6VXNlcjI3NDk5NzMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/27499732?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiii",
      "html_url": "https://github.com/sophiii",
      "followers_url": "https://api.github.com/users/sophiii/followers",
      "following_url": "https://api.github.com/users/sophiii/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiii/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiii/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiii/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiii/orgs",
      "repos_url": "https://api.github.com/users/sophiii/repos",
      "events_url": "https://api.github.com/users/sophiii/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiii/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-16T12:18:46Z",
    "updated_at": "2017-06-16T12:18:46Z",
    "author_association": "NONE",
    "body": "@vbuterin If the Callee cannot break out there is no problem. I will keep thinking about this but for now @Souptacular can you remove my item from the agenda and i can add to a future meeting if i find anything else ;-)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/309011949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/309204373",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-309204373",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 309204373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTIwNDM3Mw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-17T09:27:59Z",
    "updated_at": "2017-06-17T09:27:59Z",
    "author_association": "MEMBER",
    "body": "Regarding EIP86, and specifically the part where the address of a contract created by a transaction changes from `sha3([sender, nonce])` to `sha3(sender ++ initcode)`: there is a theoretical possibility that this would lead to loss of funds, if users send ETH to addresses of the form `sha3([sender, nonce])` where contracts have _not yet_ been created, expecting to _create contracts in the future_ at those addresses to spend the funds.\r\n\r\nThere is currently no reason to believe that such a technique is in significant use, but a small risk nevertheless exists. The somewhat larger risk of losses comes from combination bugs: situations where a user sends ETH to a contract that does not exist (eg. because they meant to send ETC to a contract that exists on the ETC chain, but instead sent ETH), and right now _some_ of those situations are recoverable, as the user can sometimes just recreate the contract on the ETH chain, but with EIP86 this will become impossible because the address generation mechanism will change.\r\n\r\nThere are two possible paths:\r\n\r\n1. Be very loud and clear about the fact that this compatibility-breaking change is happening, so that people can create the contracts before Metropolis happens.\r\n2. Make the Metropolis change ONLY apply if `tx.sender == NULL_SENDER` (ie. the transaction is an EIP86 transaction). This parallels the existence of CREATE and CREATE2 opcodes in metropolis.\r\n\r\n(1) is marginally cleaner, (2) is marginally safer. Note that if we later on want to make a compulsory transition from regular accounts to EIP86 accounts (my preference: eventually we should, so that we can gain the simplicity benefits of the protocol only having one type of account), we _do_ need to be loud and clear about the impact that this will have on people sending ETH (or other tokens) to not-yet-existent contracts, and how people who want to do such a thing can do so safely (namely, using EIP86 transactions and the CREATE2 opcode).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/309204373/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/pm/issues/comments/310256385",
    "html_url": "https://github.com/ethereum/pm/issues/16#issuecomment-310256385",
    "issue_url": "https://api.github.com/repos/ethereum/pm/issues/16",
    "id": 310256385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDI1NjM4NQ==",
    "user": {
      "login": "Souptacular",
      "id": 3460120,
      "node_id": "MDQ6VXNlcjM0NjAxMjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3460120?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Souptacular",
      "html_url": "https://github.com/Souptacular",
      "followers_url": "https://api.github.com/users/Souptacular/followers",
      "following_url": "https://api.github.com/users/Souptacular/following{/other_user}",
      "gists_url": "https://api.github.com/users/Souptacular/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Souptacular/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Souptacular/subscriptions",
      "organizations_url": "https://api.github.com/users/Souptacular/orgs",
      "repos_url": "https://api.github.com/users/Souptacular/repos",
      "events_url": "https://api.github.com/users/Souptacular/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Souptacular/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-22T02:15:16Z",
    "updated_at": "2017-06-22T02:15:16Z",
    "author_association": "MEMBER",
    "body": "Added notes and audio/video here: https://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Meeting%2018.md\r\n\r\nClosing issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/pm/issues/comments/310256385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
