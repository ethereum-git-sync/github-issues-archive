{
  "url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
  "repository_url": "https://api.github.com/repos/ethereum/devp2p",
  "labels_url": "https://api.github.com/repos/ethereum/devp2p/issues/141/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/devp2p/issues/141/comments",
  "events_url": "https://api.github.com/repos/ethereum/devp2p/issues/141/events",
  "html_url": "https://github.com/ethereum/devp2p/issues/141",
  "id": 576087600,
  "node_id": "MDU6SXNzdWU1NzYwODc2MDA=",
  "number": 141,
  "title": "Step back to FindNeighbors instead of FINDNODE",
  "user": {
    "login": "zilm13",
    "id": 6196452,
    "node_id": "MDQ6VXNlcjYxOTY0NTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zilm13",
    "html_url": "https://github.com/zilm13",
    "followers_url": "https://api.github.com/users/zilm13/followers",
    "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
    "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
    "organizations_url": "https://api.github.com/users/zilm13/orgs",
    "repos_url": "https://api.github.com/users/zilm13/repos",
    "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zilm13/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/devp2p/milestones/2",
    "html_url": "https://github.com/ethereum/devp2p/milestone/2",
    "labels_url": "https://api.github.com/repos/ethereum/devp2p/milestones/2/labels",
    "id": 4220807,
    "node_id": "MDk6TWlsZXN0b25lNDIyMDgwNw==",
    "number": 2,
    "title": "Discovery v5.1",
    "description": "",
    "creator": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 22,
    "state": "closed",
    "created_at": "2019-04-11T11:36:18Z",
    "updated_at": "2020-10-07T19:09:49Z",
    "due_on": null,
    "closed_at": "2020-10-07T19:09:49Z"
  },
  "comments": 13,
  "created_at": "2020-03-05T08:50:25Z",
  "updated_at": "2020-10-07T14:30:19Z",
  "closed_at": "2020-10-07T14:30:19Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi, @fjl\r\n\r\nI made some research with simulation including case in neighbors lookup [we were talking about](https://github.com/ethereum/devp2p/issues/130#issuecomment-562229042): in reply to query `FINDNODE(d)` return nodes not only from `d`, but, for example, from buckets with smaller index, if there are less than 16 ENRs in `d` bucket.\r\n\r\nResearch is here:\r\nhttps://hackmd.io/@zilm/BykU7RRGL\r\nSimulator made in Kotlin is here:\r\nhttps://github.com/zilm13/discv5/tree/161315190a647552aec64e800c13e92aa89a5282\r\n\r\nMy findings is that returning nodes from <= buckets doesn't work: while being better than current *V5* method with young nodes, it becomes worse in a mature network, where most nodes have top buckets full. So I think that it's not a good idea. \r\n\r\nBut my research shows that overall V5's `FINDNODE` method always uses more traffic and is slower than V4's `FindNeighbors`. Traffic is not an issue for Discovery as protocol usage is negligible compared to blocks and other, but lookup time is an issue, especially when we are going to use it in topics search. So, I think it's better to step back here and use method with peerId/hash input.\r\n\r\nBut, if we stick with `FINDNODE`, you should add to specification some changes you already did in *Geth*:\r\n- limit number of `FINDNODE` requests to 3 per every node lookup\r\n- ask developers to verify distances for every node in `NODES` reply\r\n\r\nIt will help other developers to implement *V5* better.\r\n",
  "closed_by": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/141/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/devp2p/issues/141/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/595465234",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-595465234",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 595465234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTQ2NTIzNA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-05T21:50:18Z",
    "updated_at": "2020-03-05T21:50:18Z",
    "author_association": "MEMBER",
    "body": "Thank you for this very comprehensive report. I think your report shows that the idea to use the bucket index in FINDNODE is not the best choice. We knew it's not optimal, but your text shows we should definitely improve it. I don't want to switch back to the discovery v4 semantics because it is much easier to attack the FindNeighbors message.\r\n\r\nOne thing I couldn't figure out is whether you are limiting the `FindNodesStrict` strategy to three requests per node. It [doesn't look like it in the code](https://github.com/zilm13/discv5/blob/161315190a647552aec64e800c13e92aa89a5282/src/main/kotlin/org/ethereum/discv5/core/Node.kt#L49). Maybe we should simulate that too.\r\n\r\nSomething else that might be a misunderstanding in the Java/Kotlin implementation\r\nof the protocol: \r\n\r\n> Original Kademlia and both V4 and V5 Discovery implementations require testing whether the head peer is alive when adding new peers to any full bucket[21]. \r\n\r\nIn the discovery v5 spec, we explicitly recommend to [use asynchronous liveness checks](https://github.com/ethereum/devp2p/blob/master/discv5/discv5-theory.md#table-maintenance-in-practice) and a replacement cache.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/595465234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/595674060",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-595674060",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 595674060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTY3NDA2MA==",
    "user": {
      "login": "zilm13",
      "id": 6196452,
      "node_id": "MDQ6VXNlcjYxOTY0NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zilm13",
      "html_url": "https://github.com/zilm13",
      "followers_url": "https://api.github.com/users/zilm13/followers",
      "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
      "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
      "organizations_url": "https://api.github.com/users/zilm13/orgs",
      "repos_url": "https://api.github.com/users/zilm13/repos",
      "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zilm13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-06T09:11:38Z",
    "updated_at": "2020-03-06T09:11:38Z",
    "author_association": "NONE",
    "body": "> I don't want to switch back to the discovery v4 semantics because it is much easier to attack the FindNeighbors message.\r\n\r\nThe issue is that current V5 semantics could be attacked in the same way. So, what ideas do you have?\r\n\r\n> One thing I couldn't figure out is whether you are limiting the FindNodesStrict strategy to three requests per node\r\n\r\nI've not limited it, because I did simulator from spec, not from *Geth* code. I checked your code later. And, the set of nodes called *Old network* provides the similar outcome you get with such limit, because the worse node in that network have 3 top buckets full, and you always have more than 16 nodes in any table. Yeah, there is a small chance that you fall in a small index, but it's really small. I could test it explicitly, with copying your rule but it will be very similar to the results of *Mature network* simulation.  \r\n\r\n> Something else that might be a misunderstanding in the Java/Kotlin implementation\r\nof the protocol\r\n\r\nYeah I remember this, but simulator should be simplified a bit. And I didn't have down nodes of any kind in this simulation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/595674060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596069763",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-596069763",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 596069763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjA2OTc2Mw==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-07T10:01:24Z",
    "updated_at": "2020-03-07T10:01:24Z",
    "author_association": "MEMBER",
    "body": "> The issue is that current V5 semantics could be attacked in the same way. So, what ideas do you have?\r\n\r\nIf the FINDNODE message contains the lookup target directly (like in discv4), an attacker node can return nodes which are very close to the target and make the lookup terminate early with a chosen result. This attack is not possible with the current FINDNODE message in discv5.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596069763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596069856",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-596069856",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 596069856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjA2OTg1Ng==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-07T10:02:13Z",
    "updated_at": "2020-03-07T10:02:13Z",
    "author_association": "MEMBER",
    "body": "(sorry pressed wrong button)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596069856/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596207646",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-596207646",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 596207646,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjIwNzY0Ng==",
    "user": {
      "login": "zilm13",
      "id": 6196452,
      "node_id": "MDQ6VXNlcjYxOTY0NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zilm13",
      "html_url": "https://github.com/zilm13",
      "followers_url": "https://api.github.com/users/zilm13/followers",
      "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
      "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
      "organizations_url": "https://api.github.com/users/zilm13/orgs",
      "repos_url": "https://api.github.com/users/zilm13/repos",
      "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zilm13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-08T13:47:45Z",
    "updated_at": "2020-03-08T13:47:45Z",
    "author_association": "NONE",
    "body": "@fjl oh, it's another point I'd like to change. In \r\n\r\n> The lookup initiator starts by picking α closest nodes to the target it knows of from the local table. The initiator then sends FINDNODE requests to those nodes. α is an implementation-defined concurrency parameter, typically 3. As NEIGHBORS responses are received, the initiator resends FINDNODE to nodes it has learned about from previous queries. Of the k nodes the initiator has heard of closest to the target, it picks α that it has not yet queried and sends FINDNODE to them. The lookup terminates when the initiator has queried and gotten responses from the k closest nodes it has seen.\r\n> \r\n> To improve the resilience of lookups against adversarial nodes, the algorithm may be adapted to perform network traversal on multiple disjoint paths. Not only does this approach benefit security, it also improves effectiveness because more nodes are visited during a single lookup. The initial k closest nodes are partioned into multiple independent 'path' buckets, and ​concurrent FINDNODE​ requests executed as described above, with one difference: results discovered on one path are not reused on another, i.e. each path attempts to reach the closest nodes to the lookup target independently without reusing intermediate results found on another path. Note that it is still necessary to track previously asked nodes across all paths to keep the paths disjoint.\r\n\r\nWhy do we keep first part? We already have changed original Kademlia and are not obliged to follow it in every part. First method is proved to be easily attacked by number of researchers (for example, [Ingmar Baumgart and Sebastian Mies \"S/Kademlia: A Practicable Approach Towards Secure Key-Based Routing\"](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.68.4986&rep=rep1&type=pdf)). The second option, if we use 3 disjoint paths will not cost anything (though already mentioned article recommends  8 bucket 8 paths/ 16 bucket 4 paths setup). I'd require disjoint paths in spec.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596207646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596215594",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-596215594",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 596215594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjIxNTU5NA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-08T15:07:53Z",
    "updated_at": "2020-03-08T15:07:53Z",
    "author_association": "MEMBER",
    "body": "What do you want me to write in the spec? I am trying to make the spec understandable even for people without a lot of knowledge of Kademlia. That's why I think its good to explain the simple lookup first.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596215594/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596249754",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-596249754",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 596249754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjI0OTc1NA==",
    "user": {
      "login": "zilm13",
      "id": 6196452,
      "node_id": "MDQ6VXNlcjYxOTY0NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zilm13",
      "html_url": "https://github.com/zilm13",
      "followers_url": "https://api.github.com/users/zilm13/followers",
      "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
      "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
      "organizations_url": "https://api.github.com/users/zilm13/orgs",
      "repos_url": "https://api.github.com/users/zilm13/repos",
      "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zilm13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-08T20:37:28Z",
    "updated_at": "2020-03-08T21:29:45Z",
    "author_association": "NONE",
    "body": "No, no, I just ask why to allow joint search from first paragraph (which came from Kademlia), as it's very vulnerable. We could require developers to use 3 disjoint paths instead. So not *may*, but require in second paragraph. As original method is vulnerable.\r\n\r\nAnd I got your idea about not sharing nodeId as protection. I think it's still vulnerable. You could return peers with uniform distribution (something alike of course), so few will be 100% hit on the next step etc. I will try to simulate this on Monday, to see whether it's viable.\r\n\r\nupdate: I guess it will be something like 5\\*16 (where 5 is number of hops) or 6\\*16 real network nodes compared to 16 in *V4* for the same attack. And no increase in PoW requirements (nodeId generation). 5-6x increase in ip address requirements sounds good, but I still think that amount of additional requests in normal network work is too big penalty for this improvement.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596249754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596745130",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-596745130",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 596745130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Njc0NTEzMA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-09T19:47:17Z",
    "updated_at": "2020-03-09T21:47:02Z",
    "author_association": "MEMBER",
    "body": "Let's try to think about it in another way: the lookup algorithm can have these abstract properties: \r\n\r\n- *correctness*: does it find the closest nodes at all? does it terminate?\r\n- *performance*: how many hops does it take to terminate?\r\n- *total size*: how many unique nodes, including intermediate nodes, did the lookup visit?\r\n\r\nOne thing to realize is that for discovery this last property (*total size*) is more important than performance. We use lookup for these three things:\r\n\r\n1. As a way to walk the DHT in a randomized way. The goal here is to visit many unique nodes.\r\n2. To find our own neighbors for bucket refresh.\r\n3. To find the newest ENR of a specific other node for the 'resolve' operation. 'resolve' is almost never used. It's mostly for debugging.\r\n\r\nOut of these three, (1) happens most often, but if you think about it (1) doesn't even need the *correctness* property. We need *correctness* for (2) and (3). We need *performance* for (3) only. This is why I think it's OK not to optimize the lookup for performance.\r\n\r\nMaybe we should try to make another kind of simulation to check what the total number of nodes visited during lookup is with those different kinds of FINDNODE implementations/strategies. This would be very good to know.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596745130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596746988",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-596746988",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 596746988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Njc0Njk4OA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-09T19:51:48Z",
    "updated_at": "2020-03-09T19:59:35Z",
    "author_association": "MEMBER",
    "body": "I totally agree about the spec changes you requested so far:\r\n\r\n- There needs to be a limit for FINDNODE requests to a specific node during lookup.\r\n- Implementations must verify NODES distance.\r\n- Implementations \"should\" (not \"may\") do lookup over disjoint paths or something like it.\r\n\r\nI will add these changes in the next spec update. \r\n\r\nI don't want to change the FINDNODE parameter/semantics yet. We can always add another version in a future protocol update. Right now I'm happy you are researching this topic. We still have some time left to do experiments before the discv5 network is really launched, and topics are not implemented yet. I want to try and make the topics work before changing FINDNODE again.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596746988/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596795305",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-596795305",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 596795305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Njc5NTMwNQ==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-09T21:46:37Z",
    "updated_at": "2020-03-09T21:46:37Z",
    "author_association": "MEMBER",
    "body": "Maybe it would help with the traffic to add a kind of multi-distance version of FINDNODE, like  `FINDNODE [d1, d2, ...]` where the server fills the response buffer with nodes at d1, then d2, ... up to the response limit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/596795305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/597295497",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-597295497",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 597295497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzI5NTQ5Nw==",
    "user": {
      "login": "zilm13",
      "id": 6196452,
      "node_id": "MDQ6VXNlcjYxOTY0NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zilm13",
      "html_url": "https://github.com/zilm13",
      "followers_url": "https://api.github.com/users/zilm13/followers",
      "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
      "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
      "organizations_url": "https://api.github.com/users/zilm13/orgs",
      "repos_url": "https://api.github.com/users/zilm13/repos",
      "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zilm13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-10T20:22:13Z",
    "updated_at": "2020-03-11T08:45:34Z",
    "author_association": "NONE",
    "body": "@fjl how about let's call it between us \r\n*Find Neighbors Near The Distance(d)*\r\nso we get best from both worlds. Function returns k (16) nodes, we don't need any additional requests. And we don't disclose search hash.\r\n\r\n**update:** But it if we decide that we don't need any nodes except d, d+1, d-1 (because everything else is too far), your last suggestion looks cleaner. Sounds reasonable",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/597295497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/597554265",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-597554265",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 597554265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzU1NDI2NQ==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-11T10:25:55Z",
    "updated_at": "2020-03-11T10:25:55Z",
    "author_association": "MEMBER",
    "body": "I proposed the multi-distance request because response validation is still possible with that. For  `FIND-NODES-NEAR [d]` no validation is possible on the client side.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/597554265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/597751461",
    "html_url": "https://github.com/ethereum/devp2p/issues/141#issuecomment-597751461",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/141",
    "id": 597751461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzc1MTQ2MQ==",
    "user": {
      "login": "zilm13",
      "id": 6196452,
      "node_id": "MDQ6VXNlcjYxOTY0NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zilm13",
      "html_url": "https://github.com/zilm13",
      "followers_url": "https://api.github.com/users/zilm13/followers",
      "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
      "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
      "organizations_url": "https://api.github.com/users/zilm13/orgs",
      "repos_url": "https://api.github.com/users/zilm13/repos",
      "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zilm13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-11T17:02:00Z",
    "updated_at": "2020-03-11T17:02:00Z",
    "author_association": "NONE",
    "body": "@fjl yeah, I like it, we get 1 query and it has clear interface",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/597751461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
