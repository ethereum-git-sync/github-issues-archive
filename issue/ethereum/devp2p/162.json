{
  "url": "https://api.github.com/repos/ethereum/devp2p/issues/162",
  "repository_url": "https://api.github.com/repos/ethereum/devp2p",
  "labels_url": "https://api.github.com/repos/ethereum/devp2p/issues/162/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/devp2p/issues/162/comments",
  "events_url": "https://api.github.com/repos/ethereum/devp2p/issues/162/events",
  "html_url": "https://github.com/ethereum/devp2p/issues/162",
  "id": 712871671,
  "node_id": "MDU6SXNzdWU3MTI4NzE2NzE=",
  "number": 162,
  "title": "Use utils.Limiter for discv5",
  "user": {
    "login": "zsfelfoldi",
    "id": 9884311,
    "node_id": "MDQ6VXNlcjk4ODQzMTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9884311?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zsfelfoldi",
    "html_url": "https://github.com/zsfelfoldi",
    "followers_url": "https://api.github.com/users/zsfelfoldi/followers",
    "following_url": "https://api.github.com/users/zsfelfoldi/following{/other_user}",
    "gists_url": "https://api.github.com/users/zsfelfoldi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zsfelfoldi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zsfelfoldi/subscriptions",
    "organizations_url": "https://api.github.com/users/zsfelfoldi/orgs",
    "repos_url": "https://api.github.com/users/zsfelfoldi/repos",
    "events_url": "https://api.github.com/users/zsfelfoldi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zsfelfoldi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-10-01T13:59:17Z",
  "updated_at": "2020-10-02T12:12:14Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "I have a WIP branch where I implemented a fairly simple DDoS protector for lespay UDP talk requests (400 LOC total + utils.WeightedRandomSelect, does not use the NodeStateMachine). The reason I spent time with it at this early stage is that I think the token market interface really needs to be designed with this aspect in mind. Polling rates and unhealthy competition (arms race) can be a problem with markets, especially in a decentralized and uncontrolled, somewhat chaotic environment. The reason I opened an issue for discussion about it is because I think something like this could be a recommendation (maybe even an EIP) for our entire DHT and I am interested in your opinons from both a security and DHT centric perspective.\r\nSo basically what it does is\r\n- keeps request queues by both IP address (`string`) and `enode.ID`\r\n- has a single processing loop that even does `time.Sleep`s between serving them so that the DHT logic can never hurt other processes\r\n- has a probabilistic selection based throttling mechanism (which behaves trivially and deterministically when there is no extreme usage but tries to give a sufficient chance to the proven useful connections during extreme traffic).\r\n- 50% of serving probability weights are distributed equally between active individual IP addresses. Multiple `enode.ID`s can request from the same IP in which case the IP's weight is further distributed equally.\r\n- the other 50% is proportional to `value / sumValue` where the \"value\" is anything that is an indicator of usefulness in the (preferably not very distant) past.\r\n- the first half protects from DoS but gives limited protection againgst DDoS, the second one ensures that already proven connections can not be easily broken even with heavy DDoS so there is much less incentive to even try and spend money on. Basically an attacker can only hinder the forming of new connections but that will not do real damage very soon. This is also a Kademlia recommendation to prioritize older contiuous connections. Maybe for a Kademlia the weight could simply be the connection age. For lespay it is money received from the `enode.ID`. Multiple dimensions of value can also be easily added if necessary, each dimension getting a guaranteed total percentage of service.\r\n\r\nhttps://github.com/zsfelfoldi/go-ethereum/blob/les4udp/les/utils/limiter.go\r\n\r\nThe service throttling can also take actual serving resource costs (CPU and/or bandwidth usually) into account. An attack deliberately making the most expensive requests will be proportionally more heavily throttled while economical usage of the resources of the serving node is rewarded by quicker responses. Practice with LES servers has shown though that direct time-based cost metering sometimes gives extreme outliers that are unrelated to the given request. `utils.CostFilter` ensures that these outliers will not block service for some nodes by accident.\r\n\r\nhttps://github.com/zsfelfoldi/go-ethereum/blob/les4udp/les/utils/costfilter.go",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/162/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/devp2p/issues/162/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/702290144",
    "html_url": "https://github.com/ethereum/devp2p/issues/162#issuecomment-702290144",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/162",
    "id": 702290144,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjI5MDE0NA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-01T17:37:09Z",
    "updated_at": "2020-10-01T17:37:09Z",
    "author_association": "MEMBER",
    "body": "Related: https://github.com/ethereum/devp2p/issues/161",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/702290144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
