{
  "url": "https://api.github.com/repos/ethereum/devp2p/issues/207",
  "repository_url": "https://api.github.com/repos/ethereum/devp2p",
  "labels_url": "https://api.github.com/repos/ethereum/devp2p/issues/207/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/devp2p/issues/207/comments",
  "events_url": "https://api.github.com/repos/ethereum/devp2p/issues/207/events",
  "html_url": "https://github.com/ethereum/devp2p/issues/207",
  "id": 1227054769,
  "node_id": "I_kwDOAcJRYs5JI16x",
  "number": 207,
  "title": "discv5: NAT traversal via Rendezvous protocol [WIP]",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-05-05T18:50:02Z",
  "updated_at": "2022-10-03T13:13:56Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This issue proposes a mechanism for NAT traversal via UDP hole punching.\r\n\r\nThis issue borrows from https://github.com/ethereum/portal-network-specs/issues/144 which in-turn borrows from https://blog.ipfs.io/2022-01-20-libp2p-hole-punching/\r\n\r\n### Participants\r\n\r\nThis mechanism involves communication between three nodes:\r\n\r\n- Initiator: a node that is behind a NAT, trying to establish a session with the \"receiver\" node\r\n- Receiver: a node that is behind a NAT\r\n- Rendezvous: a node that is able to communicate with both \"initiator\" and \"receiver\"\r\n\r\n### Detecting whether you are behind a NAT\r\n\r\nBorrowed from: https://twurst.com/articles/stun-without-trust.html#org92b7214\r\n\r\nA node in the network should maintain a set `E` which contains all of the `(ip_address, port)` values for outbound packets that have been sent by this node.\r\n\r\nWhen receiving a packet, a node should check whether the packet's `(ip_address, port)` are contained in the set `E`.\r\n\r\n- If a node receives a packet such that the `(ip_address, port)` are not in `E` then the node is **not** behind a NAT\r\n- If a node does not receive any packets with `(ip_address, port)` values that are not in `E` within a reasonable amount of time, then the node should assume that they are behind a NAT.\r\n\r\n> We suggest 2 minutes as a reasonable amount of time before determining that the node is behind a NAT.\r\n\r\n> For practical purposes, an LRU cache should be used to constrain the overall size of the set `E`\r\n\r\n### Signalling whether you are behind a NAT\r\n\r\nWe define a new field in the ENR with the key `\"nat\"`.\r\n\r\n- If the node does not know whether it is behind a NAT, this key should be omitted from the ENR\r\n- If the node is **not** behind a NAT, the value of this key should be set to `0`\r\n- If the node wishes to signal that it **is** behind a NAT, the value of this key should be set to `1`\r\n\r\n### Traversing the NAT\r\n\r\nWe define two new message types:\r\n\r\n- RELAYREQUEST\r\n- RELAYRESPONSE\r\n\r\n```\r\n# RELAYREQUEST\r\nrelay_request := SSZContainer(from_node_id: uint256, to_node_id: uint256)\r\n\r\n# RELAYRESPONSE\r\nrelay_response := SSZContainer(response: uint8)\r\n```\r\n\r\nThe rendezvous protocol works as follows:\r\n\r\n1. The \"initiator\" node learns about the \"receiver\" node through a FINDNODES/FOUNDNODES interaction with the \"rendezvous\" node.\r\n2. The \"initiator sends a RELAYREQUEST to the \"rendevous\" node with payload: `{from_node_enr: initiator_enr, to_node_id: receiver_node_id}`\r\n3. The \"rendezvous\" node, upon receiving the RELAYREQUEST from the \"initiator\" node,  sends the same RELAYREQUEST message to the \"receiver\" node.\r\n4. The \"receiver\" node, upon receiving the RELAYREQUEST from the \"rendezvous\" node, responds with a RELAYRESPONSE with the payload `{response: 1}` to signal that they have accepted this request.  They may alternately respond with `{response: 0}` if they wish to reject the request.  The \"receiver\" node will also send a PING message to the \"initiator\" node (this triggers the receiver's NAT to allow and route incoming packets from the initiator's ip/port).\r\n5. The \"rendezvous\" node, upon receiving the RELAYRESPONSE from the \"receiver\" node, accepting the request, will then send the same RELAYRESPONSE message to the \"initiator\".\r\n6. The \"initiator\" node, upon receiving the RELAYRESPONSE accepting the connection, should then send a PING message to the \"receiver\" node. (this triggers the initiator's NAT to allow and route incoming pckets from the receiver's ip/port)\r\n\r\nTODO: diagram message flow... define edge cases like timeouts and how nodes should behave.\r\n\r\nTODO- finish definition of the protocol and convert this to a PR towards the spec so that people can comment on individual lines.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/207/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 2,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/devp2p/issues/207/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1179080563",
    "html_url": "https://github.com/ethereum/devp2p/issues/207#issuecomment-1179080563",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/207",
    "id": 1179080563,
    "node_id": "IC_kwDOAcJRYs5GR1dz",
    "user": {
      "login": "emhane",
      "id": 58548332,
      "node_id": "MDQ6VXNlcjU4NTQ4MzMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/58548332?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emhane",
      "html_url": "https://github.com/emhane",
      "followers_url": "https://api.github.com/users/emhane/followers",
      "following_url": "https://api.github.com/users/emhane/following{/other_user}",
      "gists_url": "https://api.github.com/users/emhane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emhane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emhane/subscriptions",
      "organizations_url": "https://api.github.com/users/emhane/orgs",
      "repos_url": "https://api.github.com/users/emhane/repos",
      "events_url": "https://api.github.com/users/emhane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emhane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-08T14:54:55Z",
    "updated_at": "2022-07-08T15:01:47Z",
    "author_association": "MEMBER",
    "body": "So this means the PING from the \"receiver\" to the \"initiator\" is dropped but places the entry in the \"receiver's\" state table for the \"initiator's\" PING to the \"receiver\" to be successful as long as it comes in less than 30 seconds, the timeout of a UDP state table entry in many routers, i.e. the time it takes for the RELAYRESPONSE to reach the \"initiator\" should be less than 30 seconds? The WHOAREYOU challenge of the \"receiver\" sent in response then uses the state table entry that the \"initiator's\" PING places in its state table to finalise the hole punching? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1179080563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1181502679",
    "html_url": "https://github.com/ethereum/devp2p/issues/207#issuecomment-1181502679",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/207",
    "id": 1181502679,
    "node_id": "IC_kwDOAcJRYs5GbEzX",
    "user": {
      "login": "AgeManning",
      "id": 7454587,
      "node_id": "MDQ6VXNlcjc0NTQ1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7454587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AgeManning",
      "html_url": "https://github.com/AgeManning",
      "followers_url": "https://api.github.com/users/AgeManning/followers",
      "following_url": "https://api.github.com/users/AgeManning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AgeManning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AgeManning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AgeManning/subscriptions",
      "organizations_url": "https://api.github.com/users/AgeManning/orgs",
      "repos_url": "https://api.github.com/users/AgeManning/repos",
      "events_url": "https://api.github.com/users/AgeManning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AgeManning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-12T08:56:07Z",
    "updated_at": "2022-07-12T08:56:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice!\r\n\r\nA few thoughts:\r\n1. I'm a big fan of SSZ, we use it everywhere (in eth2 and lighthouse land) except discv5. Discv5 uses RLP still. I would suggest we stick to one or the other to avoid extra dependencies. Either use RLP here, or shift other other encodings in discv5 to SSZ.\r\n2. In the `relay_response` is there are reason its a uint8 vs a bool? Do we have more than two responses?\r\n\r\n@emhane - I agree. Typically the round-trip type for requests in discv5 is small, not longer than a few seconds usually, so hoping via an intermediary should be < 30s. I think the initial PING sent by the `receiver` sets up its IP/port mapping allowing future packets from the `initiator`.  This will probably get dropped if the initiator is itself behind a NAT, but will be received if it is not. In either case the initiator can then establish a handshake with the `receiver`. In our case, we will have to handle the case where one of our messages gets dropped (but this is implementation specific). ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1181502679/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1194565849",
    "html_url": "https://github.com/ethereum/devp2p/issues/207#issuecomment-1194565849",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/207",
    "id": 1194565849,
    "node_id": "IC_kwDOAcJRYs5HM6DZ",
    "user": {
      "login": "emhane",
      "id": 58548332,
      "node_id": "MDQ6VXNlcjU4NTQ4MzMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/58548332?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emhane",
      "html_url": "https://github.com/emhane",
      "followers_url": "https://api.github.com/users/emhane/followers",
      "following_url": "https://api.github.com/users/emhane/following{/other_user}",
      "gists_url": "https://api.github.com/users/emhane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emhane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emhane/subscriptions",
      "organizations_url": "https://api.github.com/users/emhane/orgs",
      "repos_url": "https://api.github.com/users/emhane/repos",
      "events_url": "https://api.github.com/users/emhane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emhane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-25T20:08:00Z",
    "updated_at": "2022-07-25T20:08:00Z",
    "author_association": "MEMBER",
    "body": "What if the body of the RELAYREQUEST is changed to ```from_node_enr: Enr, to_node_id: NodeId```? Sending the enr of the initiator in the body will supply the receiver with the information it needs to send the PING request to the initiator in step 4.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1194565849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1247943761",
    "html_url": "https://github.com/ethereum/devp2p/issues/207#issuecomment-1247943761",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/207",
    "id": 1247943761,
    "node_id": "IC_kwDOAcJRYs5KYhxR",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-15T11:03:06Z",
    "updated_at": "2022-09-15T11:03:06Z",
    "author_association": "NONE",
    "body": "Why not consider wireguard for this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1247943761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1248301890",
    "html_url": "https://github.com/ethereum/devp2p/issues/207#issuecomment-1248301890",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/207",
    "id": 1248301890,
    "node_id": "IC_kwDOAcJRYs5KZ5NC",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-15T16:01:29Z",
    "updated_at": "2022-09-15T16:01:29Z",
    "author_association": "MEMBER",
    "body": "> What if the body of the RELAYREQUEST is changed to `from_node_enr: Enr, to_node_id: NodeId`? Sending the enr of the initiator in the body will supply the receiver with the information it needs to send the PING request to the initiator in step 4.\r\n\r\nYes, this seems appropriate.  I now see that without this, the \"receiver\" node will not necessarily have enough information to send the PING to the initiator, which would mean they would end up needing to do a lookup for them in the network to find their ENR.  :+1: \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1248301890/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1264623557",
    "html_url": "https://github.com/ethereum/devp2p/issues/207#issuecomment-1264623557",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/207",
    "id": 1264623557,
    "node_id": "IC_kwDOAcJRYs5LYJ_F",
    "user": {
      "login": "emhane",
      "id": 58548332,
      "node_id": "MDQ6VXNlcjU4NTQ4MzMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/58548332?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emhane",
      "html_url": "https://github.com/emhane",
      "followers_url": "https://api.github.com/users/emhane/followers",
      "following_url": "https://api.github.com/users/emhane/following{/other_user}",
      "gists_url": "https://api.github.com/users/emhane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emhane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emhane/subscriptions",
      "organizations_url": "https://api.github.com/users/emhane/orgs",
      "repos_url": "https://api.github.com/users/emhane/repos",
      "events_url": "https://api.github.com/users/emhane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emhane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-02T11:45:11Z",
    "updated_at": "2022-10-02T11:45:11Z",
    "author_association": "MEMBER",
    "body": "I have implemented your protocol outline @pipermerriam with the changes in @AgeManning 's comment above. Furthermore I changed\r\n- [`{response: 2}`](https://github.com/emhane/discv5/blob/5c7662934f79191c7916a1a18f695efeee9a12d3/src/rpc.rs#L19-L21) is in the body of the `RELAYRESPONSE` assembled by the `rendezvous` node in case the request to the `receiver` fails. This means a `RELAYREQUEST` is always responded, or the `initiator` knows the `rendezvous` it chose is faulty.\r\n- The [`nat` field contains the IP address](https://github.com/emhane/discv5/blob/5c7662934f79191c7916a1a18f695efeee9a12d3/src/discv5.rs#L649-L652) and the `nat` field exists 'exclusive or' the `ip` field (this is @AgeManning 's good idea). [The `ip` field has precedence](https://github.com/emhane/discv5/blob/5c7662934f79191c7916a1a18f695efeee9a12d3/src/service.rs#L2206) over the `nat` field if a node messes up its ENR and sets both. If a node is behind an asymmetric NAT, the `udp`/`udp6` field is used to indicate the port at which it can be hole-punched. If the node is behind a symmetric NAT the `udp`/`udp6` field is removed.\r\n- A node, once it has learnt it is behind a NAT, is [responsible for PINGing its peers often enough](https://github.com/emhane/discv5/blob/5c7662934f79191c7916a1a18f695efeee9a12d3/src/service.rs#L2228) to keep the hole punched.\r\n- The NAT traversal protocol is a [feature](https://github.com/emhane/discv5/blob/5c7662934f79191c7916a1a18f695efeee9a12d3/src/discv5.rs#L639) a node can choose to disable (the discv5 topics protocol is also a feature in my implementation for sigpi).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1264623557/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1265420934",
    "html_url": "https://github.com/ethereum/devp2p/issues/207#issuecomment-1265420934",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/207",
    "id": 1265420934,
    "node_id": "IC_kwDOAcJRYs5LbMqG",
    "user": {
      "login": "emhane",
      "id": 58548332,
      "node_id": "MDQ6VXNlcjU4NTQ4MzMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/58548332?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emhane",
      "html_url": "https://github.com/emhane",
      "followers_url": "https://api.github.com/users/emhane/followers",
      "following_url": "https://api.github.com/users/emhane/following{/other_user}",
      "gists_url": "https://api.github.com/users/emhane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emhane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emhane/subscriptions",
      "organizations_url": "https://api.github.com/users/emhane/orgs",
      "repos_url": "https://api.github.com/users/emhane/repos",
      "events_url": "https://api.github.com/users/emhane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emhane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-03T13:13:56Z",
    "updated_at": "2022-10-03T13:13:56Z",
    "author_association": "MEMBER",
    "body": "I'm changing the `to_node_id` into `to_node_enr` in my implementation because otherwise a node has to store the enr of a peer that is potentially behind a NAT so that it knows where to send the hole-punch-ping upon a RELAYRESPONSE with body `{response: 1}`. This struct to store these ENRs of peers potentially behind a NAT has no obvious capacity limit. It is better if the hole-punch-ping is stateless. The RELAYREQUEST is still small in size in comparison to a NODES response.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/1265420934/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
