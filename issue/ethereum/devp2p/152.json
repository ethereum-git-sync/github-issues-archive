{
  "url": "https://api.github.com/repos/ethereum/devp2p/issues/152",
  "repository_url": "https://api.github.com/repos/ethereum/devp2p",
  "labels_url": "https://api.github.com/repos/ethereum/devp2p/issues/152/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/devp2p/issues/152/comments",
  "events_url": "https://api.github.com/repos/ethereum/devp2p/issues/152/events",
  "html_url": "https://github.com/ethereum/devp2p/issues/152",
  "id": 621890333,
  "node_id": "MDU6SXNzdWU2MjE4OTAzMzM=",
  "number": 152,
  "title": "discv5: new packet format proposal",
  "user": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2020-05-20T16:14:51Z",
  "updated_at": "2020-10-07T14:30:18Z",
  "closed_at": "2020-10-07T14:30:18Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This issue is a proposal for changing the discv5 packet format. I have included a lot of background information so everyone will be able to participate in the discussion.\r\n\r\nThere are a couple of requirements that drive the packet format design:\r\n\r\n- Mutual authentication of the communication partners. This is why we have the handshake. The handshake also doubles as a traffic amplification countermeasure.\r\n- We want active protocol participants to be able to distinguish discovery traffic from other traffic on the same UDP port for multiplexing and upgrade purposes.\r\n- Deep packet inspection resistance, i.e. it should be difficult for a passive observer to determine whether a network packet belongs to the discovery protocol purely by looking at the packet content.\r\n\r\n### Why enable protocol identification for active protocol participants?\r\n\r\nProtocol identification means that the application receiving the packet can distinguish discv5 packets from other UDP packets arriving at the same UDP port. This is different from DPI because the application understands the protocol and may have additional information which the firewall doesn't have.\r\n\r\nNot all protocols include explicit identification. In fact, most Internet protocols don't because the port number already identifies the application sufficiently.\r\n\r\nFor peer-to-peer communication, protocol identification is useful because getting the traffic through NAT is hard enough to do for one port. Best if you can get the most use out of that port. Being able to confirm the protocol also enables deployment of new protocol versions alongside the existing version. For example, since discv4 packets can be matched by checking for a valid [packet hash][discv4-hash], we can run discv4 and discv5 on the same UDP port. Any traffic that isn't explicitly identified as discv4 can be passed on to the discv5 packet handler.\r\n\r\n### Why attempt DPI resistance?\r\n\r\nI think it's important to keep DPI in mind when creating peer-to-peer protocols. Commercial-grade networking equipment provides built-in features for blocking peer-to-peer traffic (see [Cisco][ciscop2p], [Meraki][merakip2p], [Juniper][junip2p] docs), specifically file sharing protocols, because organizations don't want to expose themselves to legal risk. Most peer-to-peer networking activity is not illegal, but if it's easy to block peer-to-peer traffic for networking admins, they'll probably just do it to feel safer.\r\n\r\nThere are several ways in which a DPI-based firewall can identify traffic:\r\n\r\n- Simple packet content signatures, i.e. the firewall runs a stateless script to check if data at certain offsets in the packet matches the signature. This is very common because it's easy and cheap to do.\r\n- Stateful processing: for certain protocols, the firewall can follow along with the data flow to determine the session ID contained in the traffic. It can then block other traffic using the session ID.\r\n- Inter-packet timing/size/direction analysis. This can be surprisingly effective even for encrypted protocols and is usually employed by dedicated commercial firewall solutions.\r\n\r\nThe main worry with DPI isn't that someone would block discv5 explicitly, it's rather that the protocol might eventually end up in a DPI vendor signature list. The discovery network can be a shared resource for multiple protocols. If a single application is deemed malicious and is blocked using DPI for that reason, all other non-malicious protocols will also be affected.\r\n\r\nDesigning the protocol wire format to avoid static signature matching is the simplest and most effective thing to evade most DPI. Working against timing/size analysis directly in the wire protocol is more complicated, but implementations can make themselves harder to identify by adding randomized delays or packet padding.\r\n\r\nNote that DPI evasion measures do not make the protocol impossible to block in general, it just means DPI alone isn't enough to block it. It's still possible to block (or whitelist) the traffic based on port numbers, for example. Truly determined firewall operators could also just participate in the protocol and learn about node endpoints this way.\r\n\r\n### Protocol identification in the current discv5 wire protocol\r\n\r\nThe current discv5 wire protocol does not permit protocol identification explicitly. Worse yet, there is also no way to identify if an otherwise valid discovery packet is truly intended for the node which is receiving it. This causes the type confusion issue described [in issue #131][type-confusion-issue]:\r\n\r\nIf node A sends a packet to an endpoint, assuming it belongs to node B, it uses a `tag` of `A xor sha256(B)`. But if the node behind the endpoint is actually node C, the protocol fails. Node C receives the message and derives `src-id = (A xor sha256(B)) xor sha256(C)` which is bogus. It then sends WHOAREYOU back to the derived `src-id`, which node A doesn't recognize because the tag on WHOAREYOU depends on the destination ID.\r\n\r\n### DPI resistance of the current discv5 wire protocol\r\n\r\nWhile DPI resistance was a design goal initially, we sort-of abandoned it later when the handshake was added. I just re-checked it and turns out static matching is possible because the protocol contains plain text RLP.\r\n\r\nWHOAREYOU packets with empty sequence number can be matched like this:\r\n\r\n```python\r\ndef isWhoareyou(p):\r\n    return len(p) == 80 and p[32:34] == b'\\xEF\\x8C' and p[46] == 0xA0 and p[79] == 0x80\r\n```\r\n\r\nAnother possible static signature is the authentication response header:\r\n\r\n```python\r\ndef isAuthResp(p):\r\n    return len(p) > 87 and p[35] == 0x8C and p[48] == 0xA0 and p[81:87] == b\"\\x83gcm\\xB8\\x40\"\r\n```\r\n\r\nIf either of these functions were used for blocking, discovery is effectively disabled. The selectors are not perfect and could be improved to reduce the false positive rate, but as an example, they show that static identification is possible.\r\n\r\n### Proposal Overview\r\n\r\nFor reference, the current outermost packet encoding is:\r\n\r\n    packet = tag || auth-header || message\r\n    \r\nwhere `tag` is a multi-purpose 32-byte value, `auth-header` is plain text RLP of varying size depending on the handshake state, and `message` is an encrypted container for the actual protocol message. This encoding is very compact, in some cases even optimally compact, but has a number of real-world shortcomings:\r\n\r\n- Nobody really likes the `tag` construction and it doesn't guard against misidentification of nodes or the WHOAREYOU packet.\r\n- The `auth-header` is multi-purpose and tries to hide the node record from passive observers in a clumsy way. During the handshake, some parts of `auth-header` are strongly encrypted with a one-time use key. This leads to a lot of complexity in the spec.\r\n- The protocol can still be statically identified.\r\n\r\nThe current encoding honestly just feels a little cobbled together. Given all those issues, I have decided to redo the outer packet encoding one last time, in a more principled way, before releasing the first stable protocol spec.\r\n\r\nThere are two proposals here. The first proposal defines a packet encoding using mostly fixed-size fields. The new format permits protocol identification explicitly (through the `checksum`) and encodes handshake state explicitly (in `flag`). The second proposal builds on the first and adds 'DPI blinding', effectively removing all plaintext for passive observers.\r\n\r\n### Proposal 1\r\n\r\nThe discv5 protocol deals with three distinct kinds of packets:\r\n\r\n- Ordinary message packets, which carry an encrypted/authenticated message.\r\n- WHOAREYOU packets, which are sent when the recipient of an ordinary message packet cannot decrypt/authenticate the packet's message.\r\n- Handshake message packets, which are sent following WHOAREYOU. These packets establish a new session and carry handshake-related data in addition to the encrypted/authenticated message.\r\n\r\nIn the following definitions, we assume that the sender of a packet has knowledge of its own 256bit node ID (`src-id`) and the node ID of the packet destination (`dest-id`). When sending any packet except WHOAREYOU, the sender also generates a unique 96-bit `nonce` value.\r\n\r\nAll packets start with a fixed-size `header`, followed by a variable-length `authdata` section, followed by the encrypted/authenticated `message`.\r\n\r\n    packet        = header || authdata || message\r\n    header        = checksum || src-id || flag || authdata-size\r\n    message       = aesgcm_encrypt(initiator-key, nonce, message-plaintext, header || authdata)\r\n    checksum      = crc64(\"discv5\" || dest-id)\r\n    authdata-size = uint16    -- byte length of authdata\r\n    flag          = uint8     -- packet type identifier\r\n\r\nThe `checksum` field should be recomputed by the recipient based on its own node ID. The recipient may then verify whether the packet is truly a discv5 packet sent to the correct node. If the `checksum` doesn't match, the recipient should simply ignore the packet.\r\n\r\nThe `flag` field identifies the kind of packet and determines `authdata` content.\r\n\r\n#### Ordinary Message Packet (`flag = 0`)\r\n\r\nFor message packets, the `authdata` section is just the 96-bit AES/GCM nonce:\r\n\r\n    authdata      = nonce\r\n    authdata-size = 12\r\n\r\n![message-packet](https://user-images.githubusercontent.com/6915/82469972-087f0b80-9ac5-11ea-81bc-84a09ebb822d.png)\r\n<!-- ![message packet diagram](./1-message-packet.png) -->\r\n\r\n#### WHOAREYOU Packet (`flag = 1`)\r\n\r\nIn WHOAREYOU packets, the `authdata` section contains information for the verification procedure.\r\n\r\n    authdata      = request-nonce || id-nonce || enr-seq\r\n    authdata-size = 52\r\n    request-nonce = uint96    -- nonce of request packet that couldn't be decrypted\r\n    id-nonce      = uint256   -- random bytes\r\n    enr-seq       = uint64    -- ENR sequence number of the requesting node\r\n\r\n![whoareyou-packet](https://user-images.githubusercontent.com/6915/82470014-159bfa80-9ac5-11ea-9e25-3bdbe0536569.png)\r\n<!-- ![whoareyou packet diagram](./2-whoareyou-packet.png) -->\r\n\r\n#### Handshake Message Packet (`flag = 2`)\r\n\r\nFor handshake message packets, the `authdata` section has variable size since public key and signature sizes depend on the ENR identity scheme. For the \"v4\" identity scheme, we assume 64-byte signature size and 33 bytes of (compressed) public key size.\r\n\r\n`authdata` starts with a fixed-size `authdata-head` component, followed by the ID signature, ephemeral public key and optional node record. The `record` field may be omitted if the `enr-seq` of WHOAREYOU is recent enough, i.e. when it matches the current sequence number of the sending node.\r\n\r\n    authdata      = authdata-head || id-signature || eph-pubkey || record\r\n    authdata-size = 15 + sig-size + eph-key-size + len(record)\r\n    authdata-head = version || nonce || sig-size || eph-key-size\r\n    version       = uint8     -- value: 1\r\n    sig-size      = uint8     -- value: 64 for ID scheme \"v4\"\r\n    eph-key-size  = uint8     -- value: 33 for ID scheme \"v4\"\r\n\r\n![handshake-packet](https://user-images.githubusercontent.com/6915/82470052-20568f80-9ac5-11ea-846d-c6c325db2b3f.png)\r\n<!-- ![handshake packet diagram](./3-handshake-packet.png) -->\r\n\r\n### Proposal 2 - DPI blinding\r\n\r\nThe encoding defined in the first proposal transmits all header information as plain text. This is fine, and does not affect the authentication property of the protocol in any way.\r\n\r\nHowever, it may permit passive observers of discovery traffic to identify the protocol and uncover the node IDs which are communicating. Since the sender of a packet knows the destination node ID, and every node is aware of its own node ID, we can use the destination node ID as a symmetric encryption key for protocol metadata.\r\n\r\nThere are downsides to this obfuscation step: protocol debugging with standard tools (i.e. tcpdump) becomes impossible, and the additional `iv` element adds 16 bytes of packet size. We should carefully consider whether DPI resistance is worth enough to warrant the additional complexity and packet size.\r\n\r\n    packet        = iv || masked-header || message\r\n    masked-header = aesctr_encrypt(masking-key, iv, plain-header)\r\n    plain-header  = header || authdata\r\n    masking-key   = dest-id[:16]\r\n    iv            = uint128   -- random data unique to packet\r\n\r\nThe image below shows the `masked-header` with a thick black border. Note that `message` is not part of `masked-header` since it is already encrypted using AES/GCM.\r\n\r\n![masked-packet](https://user-images.githubusercontent.com/6915/82470056-22205300-9ac5-11ea-91d1-e79d4a173201.png)\r\n<!-- ![masked packet diagram](./4-masked-packet.png) -->\r\n\r\nDecrypting the masked header data works as follows: The recipient first reads the `iv` and constructs an AES/CTR stream cipher using its own node ID as the key and `iv` as the initialization vector. It can then decrypt the `header` part, verify the checksum, read `authdata-size`, and finally read the remaining `authdata`.\r\n\r\n[ciscop2p]: https://www.cisco.com/c/en/us/support/docs/routers/3800-series-integrated-services-routers/110388-ios-block-p2p.html\r\n[merakip2p]: https://documentation.meraki.com/zGeneral_Administration/Cross-Platform_Content/Blocking_P2P_And_File_Sharing\r\n[junip2p]: https://forums.juniper.net/t5/SRX-Services-Gateway/SRX-has-feature-like-NBAR/td-p/35066\r\n[discv4-hash]: https://github.com/ethereum/devp2p/tree/master/discv4.md#wire-protocol\r\n[type-confusion-issue]: https://github.com/ethereum/devp2p/issues/131\r\n",
  "closed_by": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/152/reactions",
    "total_count": 9,
    "+1": 9,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/devp2p/issues/152/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/633927988",
    "html_url": "https://github.com/ethereum/devp2p/issues/152#issuecomment-633927988",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/152",
    "id": 633927988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzkyNzk4OA==",
    "user": {
      "login": "decanus",
      "id": 7621705,
      "node_id": "MDQ6VXNlcjc2MjE3MDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7621705?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decanus",
      "html_url": "https://github.com/decanus",
      "followers_url": "https://api.github.com/users/decanus/followers",
      "following_url": "https://api.github.com/users/decanus/following{/other_user}",
      "gists_url": "https://api.github.com/users/decanus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decanus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decanus/subscriptions",
      "organizations_url": "https://api.github.com/users/decanus/orgs",
      "repos_url": "https://api.github.com/users/decanus/repos",
      "events_url": "https://api.github.com/users/decanus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decanus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-26T09:54:44Z",
    "updated_at": "2020-05-26T10:00:07Z",
    "author_association": "NONE",
    "body": "@fjl, finally managed to read. **Proposal 1** seems relatively sound imo, however I am not yet certain if **Proposal 2** is necessary. I need to think about this a little further, don't quote me on this but potentially the same guarantees could be achieved if the transport of packets was done over quic. Quic it already ensures that middleboxes can't inspect packets, additionally this may be more sound as it would be using a transport google is already using for most of its webservices making it potentially even harder for middleboxes to block. I may be wrong though, I am no expert on the matter.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/633927988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/633964456",
    "html_url": "https://github.com/ethereum/devp2p/issues/152#issuecomment-633964456",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/152",
    "id": 633964456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzk2NDQ1Ng==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-26T11:20:53Z",
    "updated_at": "2020-05-26T11:46:03Z",
    "author_association": "MEMBER",
    "body": "> Quic it already ensures that middleboxes can't inspect packets\r\n\r\nWhat QUIC is trying to prevent there is something else though. With TCP, all control information is transmitted in the clear. There are certain networking appliances which can optimize TCP traffic or apply advanced QoS rules by changing the parameters of a TCP connection passing through. QUIC makes this type of optimization impossible by design. It's not concerned with blocking.\r\n\r\n> additionally this may be more sound as it would be using a transport google is already using for most of its webservices making it potentially even harder for middleboxes to block\r\n\r\nI can see the potential benefit of masquerading as a web protocol, but also think it's going to be quite hard to make the protocol truly look like it's a legit QUIC connection.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/633964456/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/634322526",
    "html_url": "https://github.com/ethereum/devp2p/issues/152#issuecomment-634322526",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/152",
    "id": 634322526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDMyMjUyNg==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-26T22:54:03Z",
    "updated_at": "2020-05-26T22:56:17Z",
    "author_association": "MEMBER",
    "body": "Here are some benchmark results for proposal 1 vs. proposal 2.\r\nThese are from [this go code](https://github.com/fjl/go-ethereum/blob/p2p-discover-v5-new-format/p2p/discover/v5_encoding.go) on a 2,5 GHz Intel Core i7.\r\n\r\n`DecodeHandshakePingSecp256k1` is the handshake worst-case including ENR signature verification. `DecodePing` is decryption & decoding of a ping packet with session keys.\r\n\r\n```\r\nname                               old time/op  new time/op  delta\r\nV5_DecodeHandshakePingSecp256k1-8   526µs ± 0%   528µs ± 0%   ~     (p=1.000 n=1+1)\r\nV5_DecodePing-8                    2.04µs ± 0%  3.51µs ± 0%   ~     (p=1.000 n=1+1)\r\n```\r\n\r\nI think it's fair to say the additional masking crypto makes no difference at all.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/634322526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/634500973",
    "html_url": "https://github.com/ethereum/devp2p/issues/152#issuecomment-634500973",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/152",
    "id": 634500973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDUwMDk3Mw==",
    "user": {
      "login": "zilm13",
      "id": 6196452,
      "node_id": "MDQ6VXNlcjYxOTY0NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6196452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zilm13",
      "html_url": "https://github.com/zilm13",
      "followers_url": "https://api.github.com/users/zilm13/followers",
      "following_url": "https://api.github.com/users/zilm13/following{/other_user}",
      "gists_url": "https://api.github.com/users/zilm13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zilm13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zilm13/subscriptions",
      "organizations_url": "https://api.github.com/users/zilm13/orgs",
      "repos_url": "https://api.github.com/users/zilm13/repos",
      "events_url": "https://api.github.com/users/zilm13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zilm13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-27T08:08:39Z",
    "updated_at": "2020-05-27T08:08:39Z",
    "author_association": "NONE",
    "body": "@fjl Did header mask add any extra size to the packet or we have only IV packet size increase (16 bytes)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/634500973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/634614693",
    "html_url": "https://github.com/ethereum/devp2p/issues/152#issuecomment-634614693",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/152",
    "id": 634614693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDYxNDY5Mw==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-27T12:04:43Z",
    "updated_at": "2020-05-27T12:04:43Z",
    "author_association": "MEMBER",
    "body": "The size increase is the added 16 bytes IV.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/634614693/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/634624791",
    "html_url": "https://github.com/ethereum/devp2p/issues/152#issuecomment-634624791",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/152",
    "id": 634624791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDYyNDc5MQ==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-27T12:25:07Z",
    "updated_at": "2020-05-27T12:25:15Z",
    "author_association": "MEMBER",
    "body": "Just did another round of benchmarks on my phone, which has a Snapdragon 660 processor and [sits roughly in the middle](https://browser.geekbench.com/android-benchmarks) when it comes to smartphone processor performance.\r\n\r\n```\r\nV5_DecodeHandshakePingSecp256k1-6  1.29ms ± 1%  1.29ms ± 1%   ~     (p=1.000 n=3+3)\r\nV5_DecodePing-6                    12.2µs ± 0%  19.6µs ± 4%   ~     (p=0.100 n=3+3)\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/634624791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/684820781",
    "html_url": "https://github.com/ethereum/devp2p/issues/152#issuecomment-684820781",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/152",
    "id": 684820781,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDgyMDc4MQ==",
    "user": {
      "login": "mkalinin",
      "id": 1892772,
      "node_id": "MDQ6VXNlcjE4OTI3NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkalinin",
      "html_url": "https://github.com/mkalinin",
      "followers_url": "https://api.github.com/users/mkalinin/followers",
      "following_url": "https://api.github.com/users/mkalinin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkalinin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkalinin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkalinin/subscriptions",
      "organizations_url": "https://api.github.com/users/mkalinin/orgs",
      "repos_url": "https://api.github.com/users/mkalinin/repos",
      "events_url": "https://api.github.com/users/mkalinin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkalinin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T12:36:34Z",
    "updated_at": "2020-09-01T13:06:43Z",
    "author_association": "MEMBER",
    "body": "There is a possibility to get rid of `crc64` computation that becomes redundant if both proposals are applied. Since `dest-node-id` is used to derive a secret key, zero string can be used instead of `crc64` as a [key checksum value](https://en.wikipedia.org/wiki/Key_checksum_value). This type of checksum should be pretty secure to use in this particular case as there is no risk to compromise the key.\r\n\r\nProbably, we can also reduce the size of checksum from `64` to `32` bits. Assuming `IV` is randomly generated (so does the secret key derived from randomly generated `dest-node-id`) we can think of `2**32` randomly distributed checksums which is pretty enough to cover all nodes in all networks ever. Even though there is a collision, its cost should be negligible.\r\n\r\n**UPD:**  \r\n- however, with either 64 or 32 bit checksum, masked part of the message fits into 4 AES blocks (440 vs 408 bits); therefore there is probably no reason in reducing checksum value\r\n- in CTR mode receiver can initialise a cipher stream with `IV`, read checksum (first 32 or 64 bits) check if they are equal to zero and either discard the packet or continue processing it",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/684820781/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/684996463",
    "html_url": "https://github.com/ethereum/devp2p/issues/152#issuecomment-684996463",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/152",
    "id": 684996463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDk5NjQ2Mw==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T16:53:18Z",
    "updated_at": "2020-09-01T16:53:27Z",
    "author_association": "MEMBER",
    "body": "Thanks for the feedback. In the spec update (#157) the checksum is already removed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/684996463/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
