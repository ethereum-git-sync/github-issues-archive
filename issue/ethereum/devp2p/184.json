{
  "url": "https://api.github.com/repos/ethereum/devp2p/issues/184",
  "repository_url": "https://api.github.com/repos/ethereum/devp2p",
  "labels_url": "https://api.github.com/repos/ethereum/devp2p/issues/184/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/devp2p/issues/184/comments",
  "events_url": "https://api.github.com/repos/ethereum/devp2p/issues/184/events",
  "html_url": "https://github.com/ethereum/devp2p/issues/184",
  "id": 969724447,
  "node_id": "MDU6SXNzdWU5Njk3MjQ0NDc=",
  "number": 184,
  "title": "design rationale behind eth",
  "user": {
    "login": "victor-wei126",
    "id": 56770457,
    "node_id": "MDQ6VXNlcjU2NzcwNDU3",
    "avatar_url": "https://avatars.githubusercontent.com/u/56770457?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/victor-wei126",
    "html_url": "https://github.com/victor-wei126",
    "followers_url": "https://api.github.com/users/victor-wei126/followers",
    "following_url": "https://api.github.com/users/victor-wei126/following{/other_user}",
    "gists_url": "https://api.github.com/users/victor-wei126/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/victor-wei126/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/victor-wei126/subscriptions",
    "organizations_url": "https://api.github.com/users/victor-wei126/orgs",
    "repos_url": "https://api.github.com/users/victor-wei126/repos",
    "events_url": "https://api.github.com/users/victor-wei126/events{/privacy}",
    "received_events_url": "https://api.github.com/users/victor-wei126/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-08-12T23:05:47Z",
  "updated_at": "2021-08-16T12:22:31Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "I have a few general questions and questions about the design rationale behind the protocol, and why certain things are done the way they are:\r\n\r\n1. In state/fast sync, it says that only data validity of blocks are verified, and `GetNodeData` is used to incrementally request Merkle tree nodes until the whole tree is synced. What exactly does \"data validity\" mean, and why does requesting the Merkle tree nodes have to do with it? Is this essentially having the nodes recreate the state trees?\r\n\r\n2. In block propagation, nodes first propagate the full block via `NewBlock` to a small fraction of connected peers. This is only after the PoW validity is verified, not the bodies yet. The node then does body verification by executing txns, and finally then sends the `NewBlockHashes` message to all peers it didn't notify earlier. A few questions here: if only the PoW is verified, doesn't this mean the body may be invalid, and thus nodes are propagating invalid blocks and thus may be dropped as peers? If this is not an issue, why do we do this, instead of just verifying the entire block first before sending it? Is it because just verifying PoW is faster to propagate block while still offering some security, ie, we are making a security vs. speed tradeoff here?\r\n\r\n3. Finally, in transaction exchange, it says when a new connection is made, transaction pools are synced. But it also says when new transactions appear in a client's pool, it propagates them to the rest of the network using `Transactions` and `NewPooledTxnHashes` messages. I don't have a full understanding of RLPx yet, but in general I'm confused as to what a connection is exactly. I understand RLPx is built on top of TCP, and don't TCP connections generate extra overhead and time? So if we want to propagate transactions across the network as fast as possible, and as I understand nodes have to make connections first, won't this introduce a lot of delay? And if these connections instead are long-lived, how long is that?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/184/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/devp2p/issues/184/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/899467434",
    "html_url": "https://github.com/ethereum/devp2p/issues/184#issuecomment-899467434",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/184",
    "id": 899467434,
    "node_id": "IC_kwDOAcJRYs41nMiq",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-16T12:22:31Z",
    "updated_at": "2021-08-16T12:22:31Z",
    "author_association": "MEMBER",
    "body": "> What exactly does \"data validity\" mean, and why does requesting the Merkle tree nodes have to do with it?\r\n\r\nThe \"data validity\" is defined in the sections about blocks and transactions. Data validity is not related to the merkle trie download.\r\n\r\n> Is it because just verifying PoW is faster to propagate block while still offering some security, ie, we are making a security vs. speed tradeoff here?\r\n\r\nYes. Validating the PoW is very quick, and coming up with a valid PoW seal is very expensive on mainnet, so it's a good tradeoff. If the block turns out invalid, the node will not accept it.\r\n\r\n> and don't TCP connections generate extra overhead and time? So if we want to propagate transactions across the network as fast as possible, and as I understand nodes have to make connections first, won't this introduce a lot of delay?\r\n\r\nThe \"eth\" network is an unstructured graph of TCP connections between nodes. Basically, it is assumed that nodes will continuously establish connections and maintain them. The connections are \"long-lived\", i.e. it's not like HTTP with one connection per request. Instead, once a connection is created, it can be maintained until either side decides to end the connection. There is no need to create a connection specifically for relaying a single transaction.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/899467434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
