{
  "url": "https://api.github.com/repos/ethereum/devp2p/issues/122",
  "repository_url": "https://api.github.com/repos/ethereum/devp2p",
  "labels_url": "https://api.github.com/repos/ethereum/devp2p/issues/122/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/devp2p/issues/122/comments",
  "events_url": "https://api.github.com/repos/ethereum/devp2p/issues/122/events",
  "html_url": "https://github.com/ethereum/devp2p/issues/122",
  "id": 510856828,
  "node_id": "MDU6SXNzdWU1MTA4NTY4Mjg=",
  "number": 122,
  "title": "discv5: decide on proof-of-work for node identities",
  "user": {
    "login": "fjl",
    "id": 6915,
    "node_id": "MDQ6VXNlcjY5MTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fjl",
    "html_url": "https://github.com/fjl",
    "followers_url": "https://api.github.com/users/fjl/followers",
    "following_url": "https://api.github.com/users/fjl/following{/other_user}",
    "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
    "organizations_url": "https://api.github.com/users/fjl/orgs",
    "repos_url": "https://api.github.com/users/fjl/repos",
    "events_url": "https://api.github.com/users/fjl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fjl/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/devp2p/milestones/3",
    "html_url": "https://github.com/ethereum/devp2p/milestone/3",
    "labels_url": "https://api.github.com/repos/ethereum/devp2p/milestones/3/labels",
    "id": 5938443,
    "node_id": "MDk6TWlsZXN0b25lNTkzODQ0Mw==",
    "number": 3,
    "title": "Discovery v5.2",
    "description": null,
    "creator": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 6,
    "closed_issues": 0,
    "state": "open",
    "created_at": "2020-10-01T12:45:21Z",
    "updated_at": "2020-10-07T19:12:22Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 8,
  "created_at": "2019-10-22T19:21:18Z",
  "updated_at": "2020-10-01T12:46:07Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This issue attempts to collect our options regarding proof-of-work on node identities.\r\nThis isn't a complete solution just yet, more a place where we can dump thoughts and\r\ncollect research.\r\n\r\nFirst, let's describe what the problem is:\r\n\r\ndiscv5 is a Kademlia-inspired system. As such, it relies on the XOR distance measure to\r\nestablish routing tables, forming an overlay network. All known structured overlay\r\nnetworks are known to be susceptible to attacks (such as the eclipse attack) based on\r\nattacker-chosen node IDs. Proof-of-work is one solution to this problem. If generating a\r\nnew node identity required a certain amount of computational work, attackers would have a\r\nharder time creating chosen node IDs to influence routing tables.\r\n\r\nAnother solution is to design an overlay network that doesn't use node IDs for routing, or\r\nusing an unstructured network topology. If such a design exists, and fulfills the\r\nrequirements we have for node discovery, I'd strongly prefer to use it instead of adding\r\nproof-of-work. Unfortunately I don't know of any overlay design with those properties.\r\n\r\n### How much work?\r\n\r\nCreating a new node identity is a one time process for most users, but a repeated task for\r\nthe attacker. The kind of attacker we want to rule out is one using many cheap cloud\r\nservers. These are typically memory-constrained. If creating a new node required 4GB of\r\nmemory, it'd be harder to parallelize this operation at the cost of raising the barrier of\r\nentry into the network. We are less concerned with CPU time consumption of the\r\nproof-of-work function. Computation times up to ten seconds are no issue for most people,\r\nespecially for a one-time task.\r\n\r\n### Suitable proof-of-work functions\r\n\r\nSince all network participants should verify the proof-of-work value if provided, the\r\nfunction chosen must be asymmetric, i.e. verification should take very little effort. We\r\nalso need to consider that the chosen function must be simple to implement in multiple\r\nprogramming languages. It'd be best to choose something that's already available.\r\n\r\nThere aren't a lot of functions to choose from here, so we might as well look at all the\r\ncurrent options:\r\n\r\n- Ethash. This is widely implemented across languages already. A huge downside with ethash\r\n  is the verification time. We're already struggling with ethash verification performance\r\n  for Ethereum block validation on smaller devices.\r\n- Equihash. This function is used for zcash and several other currencies. One issue here\r\n  was that I couldn't find many implementations.\r\n- Cuckoo Cycle. This one is used by grin, and also in bitcoin's peer-to-peer networking\r\n  layer. It's really simple to implement the algorithm and verification is essentially\r\n  free. One downside with this function is the proof size. Cuckoo cycle proofs are L * 4\r\n  bytes, where L is typically > 20. This makes it unsuitable for inclusion in ENR (see\r\n  below).\r\n\r\n### Implementation Ideas\r\n\r\nIn discv5, node IDs are derived from node records using an 'identity scheme'. This is good\r\nbecause any piece of metadata can be attached to the node and relayed in discovery, or\r\neven across multiple discovery systems. This additional metadata can also be used to\r\nderive the overlay node ID.\r\n\r\nThere are multiple ways to integrate proof-of-work into ENR, depending on how much\r\nflexibility we want. If the proof-of-work value would influence the node ID directly, we'd\r\nneed to define a new identity scheme for it. We could also leave the identity scheme as-is\r\nand add an attribute containing a value related to the ID created by any scheme. I am\r\nstrongly leaning toward the latter approach, since it allows us to keep improving the PoW\r\nwhile keeping the ID stable.\r\n\r\nIf we were to choose Cuckoo Cycle, an additional complication would be transmitting the\r\nproof value in the discovery protocol. I [did research this a bit](https://gist.github.com/fjl/8bbba84de9f1b8a995ef440f8a48d619): to make this work,\r\nwe'd add an ENR attribute containing an 8-byte PoW nonce. This attribute would simply\r\nsignal support for proof-of-work. To actually create the proof, we'd basically try random\r\nnonces until a cuckoo cycle is found for the `sha256(node-id || nonce)` input value. The\r\nproof would have to be transmitted in a new protocol message or during the handshake.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/122/reactions",
    "total_count": 2,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum/devp2p/issues/122/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/545210434",
    "html_url": "https://github.com/ethereum/devp2p/issues/122#issuecomment-545210434",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/122",
    "id": 545210434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTIxMDQzNA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T00:23:58Z",
    "updated_at": "2019-10-23T00:23:58Z",
    "author_association": "MEMBER",
    "body": "I'm worried that although you can now model the cost of eclipsing a node as non-zero, this cost will still likely be relatively insubstantial to an attacker if we keep the cost low enough for normal nodes (and even resource constrained devices).\r\n\r\nIt also seems that we would need to keep the PoW fixed rather than dynamically adjusting (like in a PoW consensus) to ensure that an attacker can't make it costly for honest nodes to participate. [It is also unclear at first glance how you would actually do a dynamic PoW in this context..]\r\n\r\nHow do you plan on choosing a suitable value for the difficulty of the PoW?\r\n\r\nThis problem is fundamental to DHTs, right? Are there any other novel solutions that don't use PoW that you have come upon?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/545210434/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/545350868",
    "html_url": "https://github.com/ethereum/devp2p/issues/122#issuecomment-545350868",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/122",
    "id": 545350868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTM1MDg2OA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T09:16:57Z",
    "updated_at": "2019-10-23T09:20:45Z",
    "author_association": "MEMBER",
    "body": "> It also seems that we would need to keep the PoW fixed rather than dynamically adjusting (like in a PoW consensus) to ensure that an attacker can't make it costly for honest nodes to participate. [It is also unclear at first glance how you would actually do a dynamic PoW in this context..]\r\n> \r\n> How do you plan on choosing a suitable value for the difficulty of the PoW?\r\n\r\nYes, the idea here is to keep a static PoW target. There is no way to attack that in the same way the blockchain 'difficulty' could be attacked. We'd basically decide on the amount of resources creating a node ID should take and put these parameters into the software. Changing it would be a software update.\r\n\r\n> This problem is fundamental to DHTs, right? Are there any other novel solutions that don't use PoW that you have come upon?\r\n  \r\nNot really. There was a cool idea in [Low-Resource Eclipse Attacks on Ethereum’s Peer-to-Peer Network](https://eprint.iacr.org/2018/236.pdf) to make the distance measure private to each node (this is Countermeasure 3 in the paper). It breaks routing in a fundamental way, but might be worth going off on that tangent a little longer to see if it leads anywhere. The advantage we have over traditional DHTs is that we're not concerned with content-adressed data storage. It might actually be OK to break routing or make it less efficient because we really only care about random walks of the DHT.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/545350868/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/545359587",
    "html_url": "https://github.com/ethereum/devp2p/issues/122#issuecomment-545359587",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/122",
    "id": 545359587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTM1OTU4Nw==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T09:38:47Z",
    "updated_at": "2019-10-23T09:39:24Z",
    "author_association": "MEMBER",
    "body": "Actually, let's go on that tangent right now. Most ideas in discv5 (basic wire protocol, ENR, liveness check logic, topic queues) are universal and not specifically tied to the Kademlia structure. Topic ad distribution is, but only in that it builds on the idea of XOR distance, and we're actually still unsure about how to do the distribution right.\r\n\r\nIf we'd break routing, essentially removing Kademlia from the protocol, we'd need something to replace it. That something needs to have:\r\n\r\n- size-bounded local storage of a subset of the network\r\n- an algorithm to enumerate the entire network, and defined subsets of the network\r\n- critically: a structure that doesn't depend on node IDs or IP addresses",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/545359587/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/561661536",
    "html_url": "https://github.com/ethereum/devp2p/issues/122#issuecomment-561661536",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/122",
    "id": 561661536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTY2MTUzNg==",
    "user": {
      "login": "dryajov",
      "id": 1094341,
      "node_id": "MDQ6VXNlcjEwOTQzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1094341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dryajov",
      "html_url": "https://github.com/dryajov",
      "followers_url": "https://api.github.com/users/dryajov/followers",
      "following_url": "https://api.github.com/users/dryajov/following{/other_user}",
      "gists_url": "https://api.github.com/users/dryajov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dryajov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dryajov/subscriptions",
      "organizations_url": "https://api.github.com/users/dryajov/orgs",
      "repos_url": "https://api.github.com/users/dryajov/repos",
      "events_url": "https://api.github.com/users/dryajov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dryajov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-04T14:09:48Z",
    "updated_at": "2019-12-04T14:09:48Z",
    "author_association": "NONE",
    "body": "cc @dryajov",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/561661536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/581889850",
    "html_url": "https://github.com/ethereum/devp2p/issues/122#issuecomment-581889850",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/122",
    "id": 581889850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTg4OTg1MA==",
    "user": {
      "login": "tfalencar",
      "id": 4054009,
      "node_id": "MDQ6VXNlcjQwNTQwMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4054009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfalencar",
      "html_url": "https://github.com/tfalencar",
      "followers_url": "https://api.github.com/users/tfalencar/followers",
      "following_url": "https://api.github.com/users/tfalencar/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfalencar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfalencar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfalencar/subscriptions",
      "organizations_url": "https://api.github.com/users/tfalencar/orgs",
      "repos_url": "https://api.github.com/users/tfalencar/repos",
      "events_url": "https://api.github.com/users/tfalencar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfalencar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-04T12:33:33Z",
    "updated_at": "2020-02-04T12:34:35Z",
    "author_association": "NONE",
    "body": "Has there been a decision on this topic?\r\nI think the PoW solution is not very future proof, since as soon as at least one ASIC exists for the algorithm chosen, keys for the network can be sold in bulks cheaply enough that undermines the purpose of this mechanism. So in the end all that is left is a false sense of security, yet with all the downsides of the approach: I.e. low end devices unable to join etc. Or do I miss anything? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/581889850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/581979200",
    "html_url": "https://github.com/ethereum/devp2p/issues/122#issuecomment-581979200",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/122",
    "id": 581979200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTk3OTIwMA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-04T15:59:13Z",
    "updated_at": "2020-02-04T15:59:13Z",
    "author_association": "MEMBER",
    "body": "No decision has been made so far. I don't like PoW either.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/581979200/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/583358340",
    "html_url": "https://github.com/ethereum/devp2p/issues/122#issuecomment-583358340",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/122",
    "id": 583358340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzM1ODM0MA==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-07T11:50:56Z",
    "updated_at": "2020-02-07T11:50:56Z",
    "author_association": "MEMBER",
    "body": "Simple idea to try from @zsfelfoldi:\r\n\r\nIf we change the node distance calculation to be based on the hash of the node's IP address, it would be much harder to generate chosen IDs. We can actually pull this off with discv5 because\r\nthe protocol verifies IP addresses (i.e. they can't be spoofed) and we can detect our own global IP address using the PING/PONG source address field.\r\n\r\nThere are some downsides to this idea: if routing is completely dependent on IP address distribution, we have to deal with odd cases like many nodes being behind the same NAT address. There would also be logic specific to IPv6 to avoid mining on an address suffix.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/583358340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/583893890",
    "html_url": "https://github.com/ethereum/devp2p/issues/122#issuecomment-583893890",
    "issue_url": "https://api.github.com/repos/ethereum/devp2p/issues/122",
    "id": 583893890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Mzg5Mzg5MA==",
    "user": {
      "login": "tfalencar",
      "id": 4054009,
      "node_id": "MDQ6VXNlcjQwNTQwMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4054009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfalencar",
      "html_url": "https://github.com/tfalencar",
      "followers_url": "https://api.github.com/users/tfalencar/followers",
      "following_url": "https://api.github.com/users/tfalencar/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfalencar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfalencar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfalencar/subscriptions",
      "organizations_url": "https://api.github.com/users/tfalencar/orgs",
      "repos_url": "https://api.github.com/users/tfalencar/repos",
      "events_url": "https://api.github.com/users/tfalencar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfalencar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-09T21:12:26Z",
    "updated_at": "2020-02-09T21:15:39Z",
    "author_association": "NONE",
    "body": "That's an interesting idea. One concern I have is that it would mean if a client is changing IP's frequently (which is common since most home ISP's do not provide static IP's by default), would that mean severe down-time for home users every time their IP changes (since the client needs to restart the whole peer discovery and reputation building from scratch) ? \r\n\r\nOne solution would be, after a first connection with a (new) peer, make it so that all his peers would accept subsequent incoming connections from new IP's, as long as the hash of that IP is signed with the same formerly provided public-key (say, during handshake). Makes sense?\r\n\r\nSo: \r\nFirst connection -  > new peer registered if hash(IP) matches -> store peer's PK locally and do normal accounting of peer quality.\r\nSubsequent connections from new IP but same peer PK -> verify that hash(IP) matches *and* PK signature matches -> update IP/node ID locally to new IP (or better, only remove an IP association after X days of dormant time, and include the new one as also valid for that peer PK).\r\nThis would make it so that a lost connection due IP changes can be quickly recovered with its existing peers.\r\n\r\nAnother thing to think about is if there is any privacy implications of such scheme.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/devp2p/issues/comments/583893890/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
