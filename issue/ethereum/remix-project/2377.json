{
  "url": "https://api.github.com/repos/ethereum/remix-project/issues/2377",
  "repository_url": "https://api.github.com/repos/ethereum/remix-project",
  "labels_url": "https://api.github.com/repos/ethereum/remix-project/issues/2377/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/remix-project/issues/2377/comments",
  "events_url": "https://api.github.com/repos/ethereum/remix-project/issues/2377/events",
  "html_url": "https://github.com/ethereum/remix-project/issues/2377",
  "id": 1230263704,
  "node_id": "I_kwDODtLRw85JVFWY",
  "number": 2377,
  "title": "More Descriptive and Dynamic Transaction Recording (enhancement)",
  "user": {
    "login": "RuiXi-Verilog",
    "id": 101602845,
    "node_id": "U_kgDOBg5WHQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/101602845?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RuiXi-Verilog",
    "html_url": "https://github.com/RuiXi-Verilog",
    "followers_url": "https://api.github.com/users/RuiXi-Verilog/followers",
    "following_url": "https://api.github.com/users/RuiXi-Verilog/following{/other_user}",
    "gists_url": "https://api.github.com/users/RuiXi-Verilog/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RuiXi-Verilog/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RuiXi-Verilog/subscriptions",
    "organizations_url": "https://api.github.com/users/RuiXi-Verilog/orgs",
    "repos_url": "https://api.github.com/users/RuiXi-Verilog/repos",
    "events_url": "https://api.github.com/users/RuiXi-Verilog/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RuiXi-Verilog/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1922155232,
      "node_id": "MDU6TGFiZWwxOTIyMTU1MjMy",
      "url": "https://api.github.com/repos/ethereum/remix-project/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "yann300",
    "id": 6940742,
    "node_id": "MDQ6VXNlcjY5NDA3NDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yann300",
    "html_url": "https://github.com/yann300",
    "followers_url": "https://api.github.com/users/yann300/followers",
    "following_url": "https://api.github.com/users/yann300/following{/other_user}",
    "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
    "organizations_url": "https://api.github.com/users/yann300/orgs",
    "repos_url": "https://api.github.com/users/yann300/repos",
    "events_url": "https://api.github.com/users/yann300/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yann300/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "yann300",
      "id": 6940742,
      "node_id": "MDQ6VXNlcjY5NDA3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yann300",
      "html_url": "https://github.com/yann300",
      "followers_url": "https://api.github.com/users/yann300/followers",
      "following_url": "https://api.github.com/users/yann300/following{/other_user}",
      "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
      "organizations_url": "https://api.github.com/users/yann300/orgs",
      "repos_url": "https://api.github.com/users/yann300/repos",
      "events_url": "https://api.github.com/users/yann300/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yann300/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-05-09T21:19:52Z",
  "updated_at": "2022-07-04T12:09:36Z",
  "closed_at": "2022-07-04T12:09:36Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## About Dynamic Transaction Recording\r\nI find it really useful to quickly deploy contracts and run quick unit tests using the Transaction Recording feature. However, the Recording only replays exactly the same contract bytecode as I recorded, so every time I update my code, the old Recording deploys the old ones. I was wondering if it is possible to **make Transaction Recording dynamically link to the source files or the compiled artifacts**, and thus the Recording replay does an up-to-date deployment.\r\n\r\n### Pros and Cons\r\n- (+) Deploy everything up-to-date!\r\n- (+) No need to store bytecode in `recording.json`\r\n- (+) Pave the way to a fast-paced DevTestOps pipeline.\r\n- (-) Rely on existing source code and/or artifacts. It means you cannot just upload a `recording.json` and run everything.\r\n\r\n### One Possible Format\r\n```json\r\n{\r\n  \"timestamp\": 1650162593412,\r\n  \"record\": {\r\n    \"value\": \"0\",\r\n    \"parameters\": [\r\n        \"created{1650162569424}\"\r\n    ],\r\n    \"abi\": \"0x28e2ec147ccaac8c352ab53bd66b8187d2ab8c0dc4b881cec5748aa81d5051b5\",\r\n    \"contractName\": \"Attacker1\",\r\n    \"contractPath\": \"contracts/Attacker1.sol\", \r\n    \"artifactPath\": \"contracts/artifacts/Attacker1.json\",\r\n    \"linkReferences\": {},\r\n    \"name\": \"\",\r\n    \"inputs\": \"(address)\",\r\n    \"type\": \"constructor\",\r\n    \"from\": \"account{1}\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n## About DescriptiveTransaction Recording\r\nAlso looking forward to a more **descriptive parameter list to function execution transactions**. And thus I can read `recording.json` directly to figure out what the payloads mean. Similar to previous cons, it requires source code or artifacts available to extract parameter names. \r\n\r\n### What it is now\r\n```json\r\n{\r\n  \"timestamp\": 1650474814976,\r\n  \"record\": {\r\n    \"value\": \"0\",\r\n    \"parameters\": [\r\n      \"created{1650474395581}\",\r\n      \"5000000000000000000\"\r\n    ],\r\n    \"to\": \"created{1650474338320}\",\r\n    \"abi\": \"0x3e91d4a4cb3d9af06253d1e2a6db8ea31b4981cfbf80b7c1a367ad75e462ea98\",\r\n    \"name\": \"approve\",\r\n    \"inputs\": \"(address,uint256)\",\r\n    \"type\": \"function\",\r\n    \"from\": \"account{0}\"\r\n  }\r\n},\r\n```\r\n\r\n### One Possible Format\r\n```json\r\n{\r\n  \"timestamp\": 1650474814976,\r\n  \"record\": {\r\n    \"value\": \"0\",\r\n    \"name\": \"approve\",\r\n    \"parameters\": [\r\n      {\r\n        \"name\": \"spender\", \r\n        \"type\": \"address\",\r\n        \"value\": \"created{1650474395581}\"\r\n      },\r\n      {\r\n        \"name\": \"amount\",\r\n        \"type\": \"uint256\",\r\n        \"value\": \"5000000000000000000\"\r\n      }\r\n    ],\r\n    \"to\": \"created{1650474338320}\",\r\n    \"abi\": \"0x3e91d4a4cb3d9af06253d1e2a6db8ea31b4981cfbf80b7c1a367ad75e462ea98\",\r\n    \"inputs\": \"(address,uint256)\",\r\n    \"type\": \"function\",\r\n    \"from\": \"account{0}\"\r\n  }\r\n}\r\n```\r\nThank you Remix team for taking them into consideration!",
  "closed_by": {
    "login": "yann300",
    "id": 6940742,
    "node_id": "MDQ6VXNlcjY5NDA3NDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yann300",
    "html_url": "https://github.com/yann300",
    "followers_url": "https://api.github.com/users/yann300/followers",
    "following_url": "https://api.github.com/users/yann300/following{/other_user}",
    "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
    "organizations_url": "https://api.github.com/users/yann300/orgs",
    "repos_url": "https://api.github.com/users/yann300/repos",
    "events_url": "https://api.github.com/users/yann300/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yann300/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/2377/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/remix-project/issues/2377/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1173552460",
    "html_url": "https://github.com/ethereum/remix-project/issues/2377#issuecomment-1173552460",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/2377",
    "id": 1173552460,
    "node_id": "IC_kwDODtLRw85F8v1M",
    "user": {
      "login": "yann300",
      "id": 6940742,
      "node_id": "MDQ6VXNlcjY5NDA3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yann300",
      "html_url": "https://github.com/yann300",
      "followers_url": "https://api.github.com/users/yann300/followers",
      "following_url": "https://api.github.com/users/yann300/following{/other_user}",
      "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
      "organizations_url": "https://api.github.com/users/yann300/orgs",
      "repos_url": "https://api.github.com/users/yann300/repos",
      "events_url": "https://api.github.com/users/yann300/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yann300/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-04T09:02:57Z",
    "updated_at": "2022-07-04T09:02:57Z",
    "author_association": "MEMBER",
    "body": "hello @RuiXi-Verilog ,\r\nthe field `\"inputs\": \"(address,uint256)\",` already list all the needed types, would it be enough if we keep `parameters` and `inputs` close together in the JSON structure?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1173552460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
