{
  "url": "https://api.github.com/repos/ethereum/remix-project/issues/143",
  "repository_url": "https://api.github.com/repos/ethereum/remix-project",
  "labels_url": "https://api.github.com/repos/ethereum/remix-project/issues/143/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/remix-project/issues/143/comments",
  "events_url": "https://api.github.com/repos/ethereum/remix-project/issues/143/events",
  "html_url": "https://github.com/ethereum/remix-project/issues/143",
  "id": 666355425,
  "node_id": "MDU6SXNzdWU2NjYzNTU0MjU=",
  "number": 143,
  "title": "Internal logic of the function affect the operability of other functions.",
  "user": {
    "login": "Dexaran",
    "id": 26142412,
    "node_id": "MDQ6VXNlcjI2MTQyNDEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Dexaran",
    "html_url": "https://github.com/Dexaran",
    "followers_url": "https://api.github.com/users/Dexaran/followers",
    "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
    "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
    "organizations_url": "https://api.github.com/users/Dexaran/orgs",
    "repos_url": "https://api.github.com/users/Dexaran/repos",
    "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Dexaran/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1922155226,
      "node_id": "MDU6TGFiZWwxOTIyMTU1MjI2",
      "url": "https://api.github.com/repos/ethereum/remix-project/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-07-11T09:27:30Z",
  "updated_at": "2020-07-29T08:26:30Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "# Contract sources\r\n\r\n### Corrected contract:\r\nhttps://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol\r\n\r\n### Contract that caused a bug:\r\n```js\r\npragma solidity ^0.4.18;\r\n\r\nimport './safeMath.sol';\r\n\r\ncontract ColdStaking {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event StartStaking(address addr, uint256 value, uint256 weight, uint256 init_block);\r\n    event WithdrawStake(address staker, uint256 weight);\r\n    event Claim(address staker, uint256 reward);\r\n    event FirstStakeDonation(address _address, uint256 value);\r\n\r\n\r\n    struct Staker\r\n    {\r\n        uint256 weight;\r\n        uint256 init_block;\r\n    }\r\n\r\n    uint256 public staking_pool;\r\n\r\n    uint256 public staking_threshold = 0 ether;\r\n\r\n    //uint256 public round_interval    = 172800; // approx. 1 month in blocks\r\n    //uint256 public max_delay      = 172800 * 12; // approx. 1 year in blocks\r\n\r\n\r\n    /// TESTING VALUES\r\n    uint256 public round_interval = 200; // approx. 1 month in blocks\r\n    uint256 public max_delay = 7 * 6000; // approx. 1 year in blocks\r\n\r\n    mapping(address => Staker) staker;\r\n    mapping(address => bool) private muted;\r\n\r\n\r\n    function() public payable\r\n    {\r\n        // No donations accepted to fallback!\r\n        // Consider value deposit is an attempt to become staker.\r\n        start_staking();\r\n    }\r\n\r\n    function start_staking() public payable\r\n    {\r\n        assert(msg.value >= staking_threshold);\r\n        staking_pool = staking_pool.add(msg.value);\r\n        staker[msg.sender].weight = staker[msg.sender].weight.add(msg.value);\r\n        staker[msg.sender].init_block = block.number;\r\n\r\n        emit StartStaking(\r\n            msg.sender,\r\n            msg.value,\r\n            staker[msg.sender].weight,\r\n            staker[msg.sender].init_block\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n    function First_Stake_donation() public payable {\r\n\r\n        emit FirstStakeDonation(msg.sender, msg.value);\r\n\r\n    }\r\n\r\n    function claim_and_withdraw() public\r\n    {\r\n        claim();\r\n        withdraw_stake();\r\n    }\r\n\r\n    function withdraw_stake() public only_staker mutex(msg.sender)\r\n    {\r\n        \r\n        msg.sender.transfer(staker[msg.sender].weight);\r\n        staking_pool = staking_pool.sub(staker[msg.sender].weight);\r\n        staker[msg.sender].weight = staker[msg.sender].weight.sub(staker[msg.sender].weight);\r\n        emit WithdrawStake(msg.sender, staker[msg.sender].weight);\r\n\r\n    }\r\n\r\n    function claim() public only_staker mutex(msg.sender)\r\n    {\r\n        require(block.number >= staker[msg.sender].init_block.add(round_interval));\r\n\r\n        uint256 _reward = stake_reward(msg.sender);\r\n        msg.sender.transfer(_reward);\r\n        staker[msg.sender].init_block = block.number;\r\n\r\n        emit Claim(msg.sender, _reward);\r\n    }\r\n\r\n    function stake_reward(address _addr) public view returns (uint256 _reward)\r\n    {\r\n        return (reward() * stakerTimeStake(_addr) * stakerWeightStake(_addr));\r\n    }\r\n    function stakerTimeStake(address _addr) public view returns (uint256 _time)\r\n    {\r\n        return ((block.number - staker[_addr].init_block) / round_interval);\r\n    }\r\n    function stakerWeightStake(address _addr) public view returns (uint256 _stake)\r\n    {\r\n        return (staker[_addr].weight / (staking_pool + staker[_addr].weight * (stakerTimeStake(_addr) - 1)));\r\n    }\r\n\r\n    function report_abuse(address _addr) public only_staker mutex(_addr)\r\n    {\r\n        assert(staker[_addr].weight > 0);\r\n        assert(block.number > staker[_addr].init_block.add(max_delay));\r\n\r\n        _addr.transfer(staker[msg.sender].weight);\r\n        staker[_addr].weight = 0;\r\n    }\r\n\r\n    function reward() public view returns (uint256)\r\n    {\r\n        return address(this).balance.sub(staking_pool);\r\n    }\r\n\r\n    modifier only_staker\r\n    {\r\n        assert(staker[msg.sender].weight > 0);\r\n        _;\r\n    }\r\n\r\n    modifier mutex(address _target)\r\n    {\r\n        if (muted[_target])\r\n        {\r\n            revert();\r\n        }\r\n\r\n        muted[_target] = true;\r\n        _;\r\n        muted[_target] = false;\r\n    }\r\n\r\n    ////////////// DEBUGGING /////////////////////////////////////////////////////////////\r\n\r\n\r\n    function test() public pure returns (string)\r\n    {\r\n        return \"success!\";\r\n    }\r\n\r\n    function staker_info(address _addr) public view returns\r\n    (uint256 weight, uint256 init, uint256 stake_time, uint256 _reward)\r\n    {\r\n        return (\r\n        staker[_addr].weight,\r\n        staker[_addr].init_block,\r\n        block.number - staker[_addr].init_block,\r\n        stake_reward(_addr)\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n# Bug definition\r\n\r\nI'm using the contract that was presented above. The contract is compiled with `0.4.24+commit.e67f0147` Remix without optimization.\r\n\r\nThe contract is deployed at Rinkeby testnet.\r\n\r\n1. Contract is compiled and deployed.\r\n2. I'm executing the [start_staking](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L44) function and depositing some Ether into the contract.\r\n3. I'm executing the [staker_info](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L150) function to check my address. However, the return values does not match deposited amount of Ether and deposit block number. **< < This is a bug**\r\n4. NOTE: if I execute the [staker_info](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L150) function and inputting a random address then 0 values are returned for [each variable](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L151) apart from `stake_time` because it is equal to `block.number`.\r\n5. NOTE: if I comment out the [L101](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L101) and [L105](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L105) then everything works fine with `start_staking` and `staker_info` functions.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/143/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/remix-project/issues/143/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/405176510",
    "html_url": "https://github.com/ethereum/remix-project/issues/143#issuecomment-405176510",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/143",
    "id": 405176510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTE3NjUxMA==",
    "user": {
      "login": "yann300",
      "id": 6940742,
      "node_id": "MDQ6VXNlcjY5NDA3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yann300",
      "html_url": "https://github.com/yann300",
      "followers_url": "https://api.github.com/users/yann300/followers",
      "following_url": "https://api.github.com/users/yann300/following{/other_user}",
      "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
      "organizations_url": "https://api.github.com/users/yann300/orgs",
      "repos_url": "https://api.github.com/users/yann300/repos",
      "events_url": "https://api.github.com/users/yann300/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yann300/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-16T08:17:42Z",
    "updated_at": "2018-07-16T08:17:42Z",
    "author_association": "MEMBER",
    "body": "where are you deploying the contract?\r\n`I'm executing the staker_info function to check my address. However, the return values does not match deposited amount of Ether and deposit block number.` gives me the right value.\r\ncould you post the contract address ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/405176510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/406162360",
    "html_url": "https://github.com/ethereum/remix-project/issues/143#issuecomment-406162360",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/143",
    "id": 406162360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjE2MjM2MA==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-19T05:50:43Z",
    "updated_at": "2018-10-04T19:53:06Z",
    "author_association": "NONE",
    "body": "1. The contract is deployed here: https://rinkeby.etherscan.io/address/0x1e14de7cd02cf54b5b23e0326389daa8a5c77b97\r\n\r\n2. I'm depositing 2 ETH to the contract: https://rinkeby.etherscan.io/tx/0xaa8a294c205e7becfc4c2fa1b62bfcedbb10e9b3c1c9ca9a5a1daea31b0ec119\r\n\r\n3. If you call the [staker_info](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L150) function to check the [0x01000b5fe61411c466b70631d7ff070187179bbf](https://rinkeby.etherscan.io/address/0x01000b5fe61411c466b70631d7ff070187179bbf) address then the returns will be `0`.\r\n\r\nHowever, if you comment [L105](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L105) and [L101](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L101) then the [staker_info](https://github.com/EthereumCommonwealth/Cold-staking/blob/compiler_bug/ColdStaking.sol#L150) function will return correct values (`weight` = 2000000000000000000, `init` = init block, `stake_time` = 0, `_reward` = 0)\r\n\r\n( Here is the example of the contract with commented L101 and L106 [0x7924544213ef71f5b24d8fcaa7e0305b84b62c1f](https://rinkeby.etherscan.io/address/0x7924544213ef71f5b24d8fcaa7e0305b84b62c1f) )",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/406162360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
