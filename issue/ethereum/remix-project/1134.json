{
  "url": "https://api.github.com/repos/ethereum/remix-project/issues/1134",
  "repository_url": "https://api.github.com/repos/ethereum/remix-project",
  "labels_url": "https://api.github.com/repos/ethereum/remix-project/issues/1134/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/remix-project/issues/1134/comments",
  "events_url": "https://api.github.com/repos/ethereum/remix-project/issues/1134/events",
  "html_url": "https://github.com/ethereum/remix-project/issues/1134",
  "id": 864659940,
  "node_id": "MDU6SXNzdWU4NjQ2NTk5NDA=",
  "number": 1134,
  "title": "creation of Contract errored: invalid fragment object ",
  "user": {
    "login": "bo-hub",
    "id": 65023612,
    "node_id": "MDQ6VXNlcjY1MDIzNjEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/65023612?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bo-hub",
    "html_url": "https://github.com/bo-hub",
    "followers_url": "https://api.github.com/users/bo-hub/followers",
    "following_url": "https://api.github.com/users/bo-hub/following{/other_user}",
    "gists_url": "https://api.github.com/users/bo-hub/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bo-hub/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bo-hub/subscriptions",
    "organizations_url": "https://api.github.com/users/bo-hub/orgs",
    "repos_url": "https://api.github.com/users/bo-hub/repos",
    "events_url": "https://api.github.com/users/bo-hub/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bo-hub/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-04-22T07:58:40Z",
  "updated_at": "2021-12-26T18:55:46Z",
  "closed_at": "2021-04-23T11:05:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi,there. I am trying to learn Remix by examples. I copied a contract from [https://docs.soliditylang.org/en/v0.8.4/solidity-by-example.html](url).  \r\nAn Simple Auction contract : \r\n```\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.4;\r\ncontract SimpleAuction {\r\n    // Parameters of the auction. Times are either\r\n    // absolute unix timestamps (seconds since 1970-01-01)\r\n    // or time periods in seconds.\r\n    address payable public beneficiary;\r\n    uint public auctionEndTime;\r\n\r\n    // Current state of the auction.\r\n    address public highestBidder;\r\n    uint public highestBid;\r\n\r\n    // Allowed withdrawals of previous bids\r\n    mapping(address => uint) pendingReturns;\r\n\r\n    // Set to true at the end, disallows any change.\r\n    // By default initialized to `false`.\r\n    bool ended;\r\n\r\n    // Events that will be emitted on changes.\r\n    event HighestBidIncreased(address bidder, uint amount);\r\n    event AuctionEnded(address winner, uint amount);\r\n\r\n    // Errors that describe failures.\r\n\r\n    // The triple-slash comments are so-called natspec\r\n    // comments. They will be shown when the user\r\n    // is asked to confirm a transaction or\r\n    // when an error is displayed.\r\n\r\n    /// The auction has already ended.\r\n    error AuctionAlreadyEnded();\r\n    /// There is already a higher or equal bid.\r\n    error BidNotHighEnough(uint highestBid);\r\n    /// The auction has not ended yet.\r\n    error AuctionNotYetEnded();\r\n    /// The function auctionEnd has already been called.\r\n    error AuctionEndAlreadyCalled();\r\n\r\n    /// Create a simple auction with `_biddingTime`\r\n    /// seconds bidding time on behalf of the\r\n    /// beneficiary address `_beneficiary`.\r\n    constructor(\r\n        uint _biddingTime,\r\n        address payable _beneficiary\r\n    ) {\r\n        beneficiary = _beneficiary;\r\n        auctionEndTime = block.timestamp + _biddingTime;\r\n    }\r\n\r\n    /// Bid on the auction with the value sent\r\n    /// together with this transaction.\r\n    /// The value will only be refunded if the\r\n    /// auction is not won.\r\n    function bid() public payable {\r\n        // No arguments are necessary, all\r\n        // information is already part of\r\n        // the transaction. The keyword payable\r\n        // is required for the function to\r\n        // be able to receive Ether.\r\n\r\n        // Revert the call if the bidding\r\n        // period is over.\r\n        if (block.timestamp > auctionEndTime)\r\n            revert AuctionAlreadyEnded();\r\n\r\n        // If the bid is not higher, send the\r\n        // money back (the revert statement\r\n        // will revert all changes in this\r\n        // function execution including\r\n        // it having received the money).\r\n        if (msg.value <= highestBid)\r\n            revert BidNotHighEnough(highestBid);\r\n\r\n        if (highestBid != 0) {\r\n            // Sending back the money by simply using\r\n            // highestBidder.send(highestBid) is a security risk\r\n            // because it could execute an untrusted contract.\r\n            // It is always safer to let the recipients\r\n            // withdraw their money themselves.\r\n            pendingReturns[highestBidder] += highestBid;\r\n        }\r\n        highestBidder = msg.sender;\r\n        highestBid = msg.value;\r\n        emit HighestBidIncreased(msg.sender, msg.value);\r\n    }\r\n\r\n    /// Withdraw a bid that was overbid.\r\n    function withdraw() public returns (bool) {\r\n        uint amount = pendingReturns[msg.sender];\r\n        if (amount > 0) {\r\n            // It is important to set this to zero because the recipient\r\n            // can call this function again as part of the receiving call\r\n            // before `send` returns.\r\n            pendingReturns[msg.sender] = 0;\r\n\r\n            if (!payable(msg.sender).send(amount)) {\r\n                // No need to call throw here, just reset the amount owing\r\n                pendingReturns[msg.sender] = amount;\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// End the auction and send the highest bid\r\n    /// to the beneficiary.\r\n    function auctionEnd() public {\r\n        // It is a good guideline to structure functions that interact\r\n        // with other contracts (i.e. they call functions or send Ether)\r\n        // into three phases:\r\n        // 1. checking conditions\r\n        // 2. performing actions (potentially changing conditions)\r\n        // 3. interacting with other contracts\r\n        // If these phases are mixed up, the other contract could call\r\n        // back into the current contract and modify the state or cause\r\n        // effects (ether payout) to be performed multiple times.\r\n        // If functions called internally include interaction with external\r\n        // contracts, they also have to be considered interaction with\r\n        // external contracts.\r\n\r\n        // 1. Conditions\r\n        if (block.timestamp < auctionEndTime)\r\n            revert AuctionNotYetEnded();\r\n        if (ended)\r\n            revert AuctionEndAlreadyCalled();\r\n\r\n        // 2. Effects\r\n        ended = true;\r\n        emit AuctionEnded(highestBidder, highestBid);\r\n\r\n        // 3. Interaction\r\n        beneficiary.transfer(highestBid);\r\n    }\r\n}\r\n```\r\nCompile has no error. When I deploy it, it comes to the error \r\n>creation of SimpleAuction pending...\r\ncreation of SimpleAuction errored: invalid fragment object (argument=\"value\", value={\"inputs\":[],\"name\":\"AuctionAlreadyEnded\",\"type\":\"error\"}, code=INVALID_ARGUMENT, version=abi/5.0.7)\r\n\r\nFor deploy ,my input is \"3000\",\"0x5B38Da6a701c568545dCfcB03FcB875f56beddC4\" .  \r\nI don't know why the error happened. Is there anything wrong with the formats of inputs?\r\n",
  "closed_by": {
    "login": "bo-hub",
    "id": 65023612,
    "node_id": "MDQ6VXNlcjY1MDIzNjEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/65023612?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bo-hub",
    "html_url": "https://github.com/bo-hub",
    "followers_url": "https://api.github.com/users/bo-hub/followers",
    "following_url": "https://api.github.com/users/bo-hub/following{/other_user}",
    "gists_url": "https://api.github.com/users/bo-hub/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bo-hub/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bo-hub/subscriptions",
    "organizations_url": "https://api.github.com/users/bo-hub/orgs",
    "repos_url": "https://api.github.com/users/bo-hub/repos",
    "events_url": "https://api.github.com/users/bo-hub/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bo-hub/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/1134/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/remix-project/issues/1134/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/825041657",
    "html_url": "https://github.com/ethereum/remix-project/issues/1134#issuecomment-825041657",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/1134",
    "id": 825041657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTA0MTY1Nw==",
    "user": {
      "login": "dwardu",
      "id": 497145,
      "node_id": "MDQ6VXNlcjQ5NzE0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/497145?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwardu",
      "html_url": "https://github.com/dwardu",
      "followers_url": "https://api.github.com/users/dwardu/followers",
      "following_url": "https://api.github.com/users/dwardu/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwardu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwardu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwardu/subscriptions",
      "organizations_url": "https://api.github.com/users/dwardu/orgs",
      "repos_url": "https://api.github.com/users/dwardu/repos",
      "events_url": "https://api.github.com/users/dwardu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwardu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-22T17:21:31Z",
    "updated_at": "2021-04-22T17:21:31Z",
    "author_association": "NONE",
    "body": "Custom errors are a [brand new feature](https://blog.soliditylang.org/2021/04/21/custom-errors/) and it seems that they are not yet supported in Remix IDE. I have filed this as issue #1138\r\n\r\nAs a workaround, for now avoid custom errors. Instead revert with strings, so you can delete the 4 `error` definitions and then replace `revert AuctionAlreadyEnded()` with `revert(\"AuctionAlreadyEnded\")`, replace `revert BidNotHighEnough(highestBid)` with `revert(\"BidNotHighEnough\")`, etc.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/825041657/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/825582165",
    "html_url": "https://github.com/ethereum/remix-project/issues/1134#issuecomment-825582165",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/1134",
    "id": 825582165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTU4MjE2NQ==",
    "user": {
      "login": "bo-hub",
      "id": 65023612,
      "node_id": "MDQ6VXNlcjY1MDIzNjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/65023612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bo-hub",
      "html_url": "https://github.com/bo-hub",
      "followers_url": "https://api.github.com/users/bo-hub/followers",
      "following_url": "https://api.github.com/users/bo-hub/following{/other_user}",
      "gists_url": "https://api.github.com/users/bo-hub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bo-hub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bo-hub/subscriptions",
      "organizations_url": "https://api.github.com/users/bo-hub/orgs",
      "repos_url": "https://api.github.com/users/bo-hub/repos",
      "events_url": "https://api.github.com/users/bo-hub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bo-hub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-23T11:05:36Z",
    "updated_at": "2021-04-23T11:05:36Z",
    "author_association": "NONE",
    "body": "It works. Thanks @dwardu .",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/825582165/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1001227571",
    "html_url": "https://github.com/ethereum/remix-project/issues/1134#issuecomment-1001227571",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/1134",
    "id": 1001227571,
    "node_id": "IC_kwDODtLRw847rYUz",
    "user": {
      "login": "busekoseoglu",
      "id": 44964158,
      "node_id": "MDQ6VXNlcjQ0OTY0MTU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/44964158?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/busekoseoglu",
      "html_url": "https://github.com/busekoseoglu",
      "followers_url": "https://api.github.com/users/busekoseoglu/followers",
      "following_url": "https://api.github.com/users/busekoseoglu/following{/other_user}",
      "gists_url": "https://api.github.com/users/busekoseoglu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/busekoseoglu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/busekoseoglu/subscriptions",
      "organizations_url": "https://api.github.com/users/busekoseoglu/orgs",
      "repos_url": "https://api.github.com/users/busekoseoglu/repos",
      "events_url": "https://api.github.com/users/busekoseoglu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/busekoseoglu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-26T18:55:46Z",
    "updated_at": "2021-12-26T18:55:46Z",
    "author_association": "NONE",
    "body": "I have same issue and I tried the solution above but it is not work. How can I solve it?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1001227571/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
