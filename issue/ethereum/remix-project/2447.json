{
  "url": "https://api.github.com/repos/ethereum/remix-project/issues/2447",
  "repository_url": "https://api.github.com/repos/ethereum/remix-project",
  "labels_url": "https://api.github.com/repos/ethereum/remix-project/issues/2447/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/remix-project/issues/2447/comments",
  "events_url": "https://api.github.com/repos/ethereum/remix-project/issues/2447/events",
  "html_url": "https://github.com/ethereum/remix-project/issues/2447",
  "id": 1247492518,
  "node_id": "I_kwDODtLRw85KWzmm",
  "number": 2447,
  "title": "Remix crashes/hangs in browser with long iterations which store many variables",
  "user": {
    "login": "dzimbeck",
    "id": 7565265,
    "node_id": "MDQ6VXNlcjc1NjUyNjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7565265?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dzimbeck",
    "html_url": "https://github.com/dzimbeck",
    "followers_url": "https://api.github.com/users/dzimbeck/followers",
    "following_url": "https://api.github.com/users/dzimbeck/following{/other_user}",
    "gists_url": "https://api.github.com/users/dzimbeck/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dzimbeck/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dzimbeck/subscriptions",
    "organizations_url": "https://api.github.com/users/dzimbeck/orgs",
    "repos_url": "https://api.github.com/users/dzimbeck/repos",
    "events_url": "https://api.github.com/users/dzimbeck/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dzimbeck/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "yann300",
    "id": 6940742,
    "node_id": "MDQ6VXNlcjY5NDA3NDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yann300",
    "html_url": "https://github.com/yann300",
    "followers_url": "https://api.github.com/users/yann300/followers",
    "following_url": "https://api.github.com/users/yann300/following{/other_user}",
    "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
    "organizations_url": "https://api.github.com/users/yann300/orgs",
    "repos_url": "https://api.github.com/users/yann300/repos",
    "events_url": "https://api.github.com/users/yann300/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yann300/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "yann300",
      "id": 6940742,
      "node_id": "MDQ6VXNlcjY5NDA3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yann300",
      "html_url": "https://github.com/yann300",
      "followers_url": "https://api.github.com/users/yann300/followers",
      "following_url": "https://api.github.com/users/yann300/following{/other_user}",
      "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
      "organizations_url": "https://api.github.com/users/yann300/orgs",
      "repos_url": "https://api.github.com/users/yann300/repos",
      "events_url": "https://api.github.com/users/yann300/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yann300/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "Aniket-Engg",
      "id": 30843294,
      "node_id": "MDQ6VXNlcjMwODQzMjk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/30843294?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Aniket-Engg",
      "html_url": "https://github.com/Aniket-Engg",
      "followers_url": "https://api.github.com/users/Aniket-Engg/followers",
      "following_url": "https://api.github.com/users/Aniket-Engg/following{/other_user}",
      "gists_url": "https://api.github.com/users/Aniket-Engg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Aniket-Engg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Aniket-Engg/subscriptions",
      "organizations_url": "https://api.github.com/users/Aniket-Engg/orgs",
      "repos_url": "https://api.github.com/users/Aniket-Engg/repos",
      "events_url": "https://api.github.com/users/Aniket-Engg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Aniket-Engg/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-05-25T05:18:55Z",
  "updated_at": "2022-09-06T13:29:49Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "When running tests on a system that uses a lot of iterations and arrays with lets say around 30-120 elements which are sent to storage, Remix JavaScript VM may run for a few tests but will eventually crash.\r\n\r\nIn Firefox for example it may say the browser is being \"unresponsive\" and ask to \"wait\". If you click wait, sometimes you get lucky and it will continue and complete it's tasks. Other times it fails outright and will stay pending for example.\r\n\r\ntransact to BAYR.transfer pending ... (indefinitely)\r\n\r\nAnd it will just sit like that forever until I refresh the browser and have to start all over again from the beginning setting up all the test accounts and variables. This issue MAY be a duplicate as I see a few other people complain of similar issues for years but I didn't find any similar issues on github. Still, I have definitely yet to see it resolved.\r\n\r\nIn Chrome similar failures can happen, it's really all the same. I understand browsers may not be able to handle the tests, however I'm on a pretty fast computer with more than enough memory.\r\n\r\nTo replicate, set up a function that commits so a couple arrays of various sizes and iterate a lot and see how many times you can run it before it crashes the browser.\r\n\r\nWhat perhaps makes this the most frustrating is it's not really that much data. Even though the stack is maxed out and I use a lot of structs to get around stack being too deep, the issue would persist I think even with a test contract that you keep pushing to see what the breaking point is. On Chrome it says \"out of memory\"\r\n\r\nMost people will say \"just use testnet or ganache or truffle or whatever\"... but the point is not to have a broken product and Remix JavaScript VM is almost broken for complex interconnected contracts. It barely gets through a few tests and eventually just can't handle any more data and fails. I think a guideline in the GUI even on how much memory should be needed for tests and how to increase it or a way to detect if it's pushing browsers to the limit or solving the issue with it running out of memory outright. I can and will eventually use testnet but there is a great speed and convenience to using the JavaScript VM. So please keep this issue open until it's resolved. Thank you.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/2447/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/remix-project/issues/2447/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1163833705",
    "html_url": "https://github.com/ethereum/remix-project/issues/2447#issuecomment-1163833705",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/2447",
    "id": 1163833705,
    "node_id": "IC_kwDODtLRw85FXrFp",
    "user": {
      "login": "qwerty472123",
      "id": 5781325,
      "node_id": "MDQ6VXNlcjU3ODEzMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5781325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qwerty472123",
      "html_url": "https://github.com/qwerty472123",
      "followers_url": "https://api.github.com/users/qwerty472123/followers",
      "following_url": "https://api.github.com/users/qwerty472123/following{/other_user}",
      "gists_url": "https://api.github.com/users/qwerty472123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qwerty472123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qwerty472123/subscriptions",
      "organizations_url": "https://api.github.com/users/qwerty472123/orgs",
      "repos_url": "https://api.github.com/users/qwerty472123/repos",
      "events_url": "https://api.github.com/users/qwerty472123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qwerty472123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-23T01:48:10Z",
    "updated_at": "2022-06-23T08:00:17Z",
    "author_association": "NONE",
    "body": "Same question.\r\n\r\nI firstly think this is a weakness of ethereumjs. But I tested that and think that performance is acceptable for me.\r\n\r\nAnd then I think it caused by remix's dependency not up-to-date. It still use library like BN.js, not the native BigInt.\r\n\r\nFinally, I found that remix always record all memory, stacks and do a lot after each opcode.\r\n\r\nhttps://github.com/ethereum/remix-project/blob/e5a113bdb0f4d09add3ffdceb69f21207c2fd41f/libs/remix-simulator/src/VmProxy.ts#L93\r\n\r\nI know that is useful for Debugger plugin. But I think that is not required for most of cases.(debug by events and revert string is ok for me)\r\n\r\nSo, in my opinion, remix should provide us a button to temporary disable the tracing.\r\n\r\nBefore the official solution, I use a Tampermonkey script to do that, and the speed is improved a lot.\r\n\r\n```javascript\r\n// ==UserScript==\r\n// @name         Remix Speed up\r\n// @match        http://localhost:8080/*\r\n// @match        http://remix.ethereum.org/*\r\n// @match        https://remix.ethereum.org/*\r\n// @grant        unsafeWindow\r\n// @run-at       document-start\r\n// ==/UserScript==\r\n// change the match to the url for remix what you are using.\r\n\r\n// If the hook is OK, Run `switcher.on()` on DevTools Console to enable tracing, `switcher.off()` to disable. the default is disabled\r\nlet switcher = {};\r\nunsafeWindow.switcher = switcher;\r\nlet isOK = false;\r\nlet isON = false;\r\n\r\nunsafeWindow.webpackJsonp = [];\r\nlet oldPush = unsafeWindow.webpackJsonp.push;\r\nconst newPush = function (...data) {\r\n\tfor (const v of data) {\r\n\t\tif (isOK) break;\r\n\t\tfor (const name of Object.keys(v[1])) {\r\n\t\t\tif (isOK) break;\r\n\t\t\tconst ori = v[1][name];\r\n\t\t\tv[1][name] = function (module, __webpack_exports__, __webpack_require__, ...args) {\r\n\t\t\t\tconst ret = ori.apply(this, [module, __webpack_exports__, __webpack_require__, ...args]);\r\n\t\t\t\tif (__webpack_exports__.VmProxy) {\r\n\t\t\t\t\tisOK = true;\r\n\t\t\t\t\tconst oldVM = __webpack_exports__.VmProxy.prototype.setVM;\r\n\t\t\t\t\t__webpack_exports__.VmProxy.prototype.setVM = function (vm, ...args) {\r\n\t\t\t\t\t\tconst oldVMOn = vm.on;\r\n\t\t\t\t\t\tvm.on = function (type, listener) {\r\n\t\t\t\t\t\t\tif (type === \"step\") {\r\n\t\t\t\t\t\t\t\tswitcher.on = () => {\r\n\t\t\t\t\t\t\t\t\tisON = true;\r\n\t\t\t\t\t\t\t\t\treturn Object.getPrototypeOf(vm).on.call(vm, type, listener);\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tswitcher.off = () => {\r\n\t\t\t\t\t\t\t\t\tisON = false;\r\n\t\t\t\t\t\t\t\t\treturn Object.getPrototypeOf(vm).off.call(vm, type, listener);\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tif (!isON) return vm;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn Object.getPrototypeOf(vm).on.call(vm, type, listener);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tconst ret = oldVM.apply(this, [vm, ...args]);\r\n\t\t\t\t\t\tdelete vm.on;\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t\tv[1][name].toString = () => ori.toString();\r\n\t\t}\r\n\t}\r\n\treturn oldPush.apply(this, data);\r\n};\r\nlet retPush = oldPush;\r\n\r\nObject.defineProperty(unsafeWindow.webpackJsonp, 'push', {\r\n\tenumerable: true, configurable: true,\r\n\tget: () => isOK ? oldPush : retPush,\r\n\tset: val => {\r\n\t\toldPush = val;\r\n\t\tretPush = newPush;\r\n\t\treturn val;\r\n\t}\r\n});\r\n```\r\n\r\nFuthermore, techniques like key-frame used in MP4 video compress can be used in such scenario.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1163833705/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1163844095",
    "html_url": "https://github.com/ethereum/remix-project/issues/2447#issuecomment-1163844095",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/2447",
    "id": 1163844095,
    "node_id": "IC_kwDODtLRw85FXtn_",
    "user": {
      "login": "dzimbeck",
      "id": 7565265,
      "node_id": "MDQ6VXNlcjc1NjUyNjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7565265?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dzimbeck",
      "html_url": "https://github.com/dzimbeck",
      "followers_url": "https://api.github.com/users/dzimbeck/followers",
      "following_url": "https://api.github.com/users/dzimbeck/following{/other_user}",
      "gists_url": "https://api.github.com/users/dzimbeck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dzimbeck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dzimbeck/subscriptions",
      "organizations_url": "https://api.github.com/users/dzimbeck/orgs",
      "repos_url": "https://api.github.com/users/dzimbeck/repos",
      "events_url": "https://api.github.com/users/dzimbeck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dzimbeck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-23T02:09:57Z",
    "updated_at": "2022-06-23T02:09:57Z",
    "author_association": "NONE",
    "body": "Thanks for the response! Yes since I'm also testing the contract on Georli, I can post it here. Obviously my contract is extremely complicated. But I want to note that this contract works fine in Goerli but will absolutely crash JavaScript VM. There are advantages to using the JavaScript VM, maybe a person wants to test quick, doesn't want to hassle with getting testnet coins set up or something plus they don't want to drag down the testnet. \r\n\r\ngithub.com/dzimbeck/bitbay-solidity\r\n\r\nTo set this contract up, deploy BitBay, deploy liquidity pool, deploy all 3 contracts for BAY, BAYR, BAYF and then hook proxies so set BAY,BAYR,BAYF as \"true\" for a proxy in BitBay(giving them permission to access and make calls), then make liquidity pool also hooked to BitBay main by setting it and then set the proxy for liquidity pool to BitBay so they can call each other.\r\n\r\nThen change supply to whatever you want when it's live, then mint coins by either manually supplying array of 38 values or alternative hook in the admin contract to call mint which gives the coins evenly. The reason this contract is complex is because basic sending doesn't send a single value it sends an array of anywhere from 30-38 values because the supply is dynamic(you need to remember what moves from liquid to reserve and what the supply was when it moved or else a true shift in equity is physically impossible). So \"simple\" transactions are really heavy and do require loops. There is no other way.\r\n\r\nI have seen other people post on this issue and even \"less complex\" contracts will crash as long as they start storing enough data or start to rack up calls to the stack. What's weird is it doesn't crash on the first transaction but it takes a couple transactions to test. Technically for testnet I have 38 values but for remix it was even crashing with 15 values (10 major sections, 5 minor sections) so reduction of the amount of data only barely delayed the problem. And this contract has no bugs as testnet shows it is in fact working.\r\n\r\nAnyways, this process works on Goerli\r\n0xD7567f0841Aae04833C8c004e8685cBF9F1a6b11 BAYL\r\n0xe491CC5b00e24fE53cCA89adaC79f5D7FdA80a82 BAYR\r\n0x3c4Fa78cA311FF83A5EdF60140B0b45e8c39eBf9 BAYF\r\n(these point to the main data contract which has everything linked)\r\n\r\nTo reproduce, simply deploy to VM instead of testnet. What will happen is after a couple transactions because VM has to iterate and deal with tons of uints (typical sending is about a half a million to a million gas!) and then after about 5 or so transactions to various users it will absolutely crash. On chrome it runs out of memory on firefox it just hangs. There could be a memory leak or something. Like you said, it could be an issue with tracing. To be honest I don't know why so I opened this issue.\r\n\r\n@qwerty472123 Thanks for posting that script, if I ever get the free time I will totally see if that improves the problem.\r\n\r\nStill I think this issue should stay open because it is indeed a bug. If they use an indexed database it should be able to in theory support larger amounts of data in javascript.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1163844095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
