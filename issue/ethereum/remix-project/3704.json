{
  "url": "https://api.github.com/repos/ethereum/remix-project/issues/3704",
  "repository_url": "https://api.github.com/repos/ethereum/remix-project",
  "labels_url": "https://api.github.com/repos/ethereum/remix-project/issues/3704/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/remix-project/issues/3704/comments",
  "events_url": "https://api.github.com/repos/ethereum/remix-project/issues/3704/events",
  "html_url": "https://github.com/ethereum/remix-project/issues/3704",
  "id": 1710080972,
  "node_id": "I_kwDODtLRw85l7cPM",
  "number": 3704,
  "title": "[Bug] `Uncaught (in promise) TypeError: gasEstimationForceSend is not a function`",
  "user": {
    "login": "seaona",
    "id": 54408225,
    "node_id": "MDQ6VXNlcjU0NDA4MjI1",
    "avatar_url": "https://avatars.githubusercontent.com/u/54408225?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/seaona",
    "html_url": "https://github.com/seaona",
    "followers_url": "https://api.github.com/users/seaona/followers",
    "following_url": "https://api.github.com/users/seaona/following{/other_user}",
    "gists_url": "https://api.github.com/users/seaona/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/seaona/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/seaona/subscriptions",
    "organizations_url": "https://api.github.com/users/seaona/orgs",
    "repos_url": "https://api.github.com/users/seaona/repos",
    "events_url": "https://api.github.com/users/seaona/events{/privacy}",
    "received_events_url": "https://api.github.com/users/seaona/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-05-15T13:13:51Z",
  "updated_at": "2023-05-24T15:03:00Z",
  "closed_at": "2023-05-24T15:03:00Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "**Problem**: I cannot proceed with a contract interaction, transaction stays `pending` on the Remix logs and I am seeing the following console error `Uncaught (in promise) TypeError: gasEstimationForceSend is not a function`\r\n\r\n**Repro**\r\n1. Deployed an ERC721 token contract on Sepolia network\r\n2. Mint a token\r\n3. Try  SetApprovalForAll function - after submitting it once, I cannot interact with any other function of the contract and seeing that console error\r\n\r\n![image](https://github.com/ethereum/remix-project/assets/54408225/4b69a093-10d5-47d6-bef6-63e1fc8e037e)\r\n\r\n\r\nhttps://github.com/ethereum/remix-project/assets/54408225/b161e836-9c6b-42d2-87d1-ce6966392e3d\r\n\r\nYou can try it with this contract:\r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    function balanceOf(address owner) external view returns (uint balance);\r\n\r\n    function ownerOf(uint tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(address from, address to, uint tokenId) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function transferFrom(address from, address to, uint tokenId) external payable;\r\n\r\n    function approve(address to, uint tokenId) external payable;\r\n\r\n    function getApproved(uint tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external payable;\r\n\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    ) external view returns (bool);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ncontract ERC721 is IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint indexed id);\r\n    event Approval(address indexed owner, address indexed spender, uint indexed id);\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint => address) internal _ownerOf;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint) internal _balanceOf;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint => address) internal _approvals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n    function ownerOf(uint id) external view returns (address owner) {\r\n        owner = _ownerOf[id];\r\n        require(owner != address(0), \"token doesn't exist\");\r\n    }\r\n\r\n    function balanceOf(address owner) external view returns (uint) {\r\n        require(owner != address(0), \"owner = zero address\");\r\n        return _balanceOf[owner];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) external payable {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function approve(address spender, uint id) external payable {\r\n        address owner = _ownerOf[id];\r\n        require(\r\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\r\n            \"not authorized\"\r\n        );\r\n\r\n        _approvals[id] = spender;\r\n\r\n        emit Approval(owner, spender, id);\r\n    }\r\n\r\n    function getApproved(uint id) external view returns (address) {\r\n        require(_ownerOf[id] != address(0), \"token doesn't exist\");\r\n        return _approvals[id];\r\n    }\r\n\r\n    function _isApprovedOrOwner(\r\n        address owner,\r\n        address spender,\r\n        uint id\r\n    ) internal view returns (bool) {\r\n        return (spender == owner ||\r\n            isApprovedForAll[owner][spender] ||\r\n            spender == _approvals[id]);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint id) public payable {\r\n        require(from == _ownerOf[id], \"from != owner\");\r\n        require(to != address(0), \"transfer to zero address\");\r\n\r\n        require(_isApprovedOrOwner(from, msg.sender, id), \"not authorized\");\r\n\r\n        _balanceOf[from]--;\r\n        _balanceOf[to]++;\r\n        _ownerOf[id] = to;\r\n\r\n        delete _approvals[id];\r\n\r\n        emit Transfer(from, to, id);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint id) external {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                IERC721Receiver(to).onERC721Received(msg.sender, from, id, \"\") ==\r\n                IERC721Receiver.onERC721Received.selector,\r\n            \"unsafe recipient\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint id,\r\n        bytes calldata data\r\n    ) external {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                IERC721Receiver(to).onERC721Received(msg.sender, from, id, data) ==\r\n                IERC721Receiver.onERC721Received.selector,\r\n            \"unsafe recipient\"\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint id) internal {\r\n        require(to != address(0), \"mint to zero address\");\r\n        require(_ownerOf[id] == address(0), \"already minted\");\r\n\r\n        _balanceOf[to]++;\r\n        _ownerOf[id] = to;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n\r\n    function _burn(uint id) internal {\r\n        address owner = _ownerOf[id];\r\n        require(owner != address(0), \"not minted\");\r\n\r\n        _balanceOf[owner] -= 1;\r\n\r\n        delete _ownerOf[id];\r\n        delete _approvals[id];\r\n\r\n        emit Transfer(owner, address(0), id);\r\n    }\r\n}\r\n\r\ncontract MyNFT is ERC721 {\r\n    function mint(address to, uint id) external {\r\n        _mint(to, id);\r\n    }\r\n\r\n    function burn(uint id) external {\r\n        require(msg.sender == _ownerOf[id], \"not owner\");\r\n        _burn(id);\r\n    }\r\n}\r\n\r\n```\r\n",
  "closed_by": {
    "login": "yann300",
    "id": 6940742,
    "node_id": "MDQ6VXNlcjY5NDA3NDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yann300",
    "html_url": "https://github.com/yann300",
    "followers_url": "https://api.github.com/users/yann300/followers",
    "following_url": "https://api.github.com/users/yann300/following{/other_user}",
    "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
    "organizations_url": "https://api.github.com/users/yann300/orgs",
    "repos_url": "https://api.github.com/users/yann300/repos",
    "events_url": "https://api.github.com/users/yann300/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yann300/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/3704/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/remix-project/issues/3704/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1551557326",
    "html_url": "https://github.com/ethereum/remix-project/issues/3704#issuecomment-1551557326",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/3704",
    "id": 1551557326,
    "node_id": "IC_kwDODtLRw85ceuLO",
    "user": {
      "login": "yann300",
      "id": 6940742,
      "node_id": "MDQ6VXNlcjY5NDA3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6940742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yann300",
      "html_url": "https://github.com/yann300",
      "followers_url": "https://api.github.com/users/yann300/followers",
      "following_url": "https://api.github.com/users/yann300/following{/other_user}",
      "gists_url": "https://api.github.com/users/yann300/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yann300/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yann300/subscriptions",
      "organizations_url": "https://api.github.com/users/yann300/orgs",
      "repos_url": "https://api.github.com/users/yann300/repos",
      "events_url": "https://api.github.com/users/yann300/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yann300/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-17T14:58:11Z",
    "updated_at": "2023-05-17T14:58:11Z",
    "author_association": "MEMBER",
    "body": "That's interesting, are you able to reproduce the issue consistenly? unfortunately it's working ok from my side..",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1551557326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1552893375",
    "html_url": "https://github.com/ethereum/remix-project/issues/3704#issuecomment-1552893375",
    "issue_url": "https://api.github.com/repos/ethereum/remix-project/issues/3704",
    "id": 1552893375,
    "node_id": "IC_kwDODtLRw85cj0W_",
    "user": {
      "login": "seaona",
      "id": 54408225,
      "node_id": "MDQ6VXNlcjU0NDA4MjI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/54408225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seaona",
      "html_url": "https://github.com/seaona",
      "followers_url": "https://api.github.com/users/seaona/followers",
      "following_url": "https://api.github.com/users/seaona/following{/other_user}",
      "gists_url": "https://api.github.com/users/seaona/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seaona/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seaona/subscriptions",
      "organizations_url": "https://api.github.com/users/seaona/orgs",
      "repos_url": "https://api.github.com/users/seaona/repos",
      "events_url": "https://api.github.com/users/seaona/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seaona/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-18T11:03:51Z",
    "updated_at": "2023-05-18T11:03:51Z",
    "author_association": "NONE",
    "body": "It seems that the issue happens when you perform a contract interaction and **before** that tx is being confirmed, you try to perform another contract interaction.\r\nWhat will happen is that the error is thrown on the console once the 1st tx is confirmed and you are unable to perform any other action in Remix.\r\n\r\n**Repro steps**:\r\n1. deploy a contract\r\n2. perform a contract ineraction\r\n3. accept tx in metamask\r\n4. (before tx is being confirmed) quickly try another contract interaction\r\n5. you will see `pending` on Remix console\r\n6. once 1st tx is confirm, you will see the console error and won't be able to perform any other contract interactions\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/remix-project/issues/comments/1552893375/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
