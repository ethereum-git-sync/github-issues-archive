{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/5375",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/5375/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/5375/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/5375/events",
  "html_url": "https://github.com/ethereum/solidity/issues/5375",
  "id": 378867727,
  "node_id": "MDU6SXNzdWUzNzg4Njc3Mjc=",
  "number": 5375,
  "title": "[Yul] Improve stack slot allocation in code generator (and avoid swaps)",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-11-08T18:48:04Z",
  "updated_at": "2020-10-30T23:01:37Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "See if the algorithm presented in https://pdfs.semanticscholar.org/presentation/1a65/e787b08fe8812797a0557760ae84072ad292.pdf is relevant for the yul to evm code generator to avoid swap operations.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/5375/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/5375/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/446933617",
    "html_url": "https://github.com/ethereum/solidity/issues/5375#issuecomment-446933617",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5375",
    "id": 446933617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjkzMzYxNw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-13T11:20:21Z",
    "updated_at": "2018-12-13T12:39:44Z",
    "author_association": "MEMBER",
    "body": "I only had a brief look into the paper, but at a first glance this would probably mean to have an intermediate compilation step to a register based representation? I'm wondering whether one could use some stuff like this: http://compilers.cs.uni-saarland.de/projects/ssara/ - it seems for an SSA representation of a program optimal register allocation is feasible (http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.204.2844&rep=rep1&type=pdf) - registers are different than our fixed-size (wrt access) stack, but maybe that's transferrable (to allocating stack slots directly)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/446933617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/447013856",
    "html_url": "https://github.com/ethereum/solidity/issues/5375#issuecomment-447013856",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5375",
    "id": 447013856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzAxMzg1Ng==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-13T15:40:54Z",
    "updated_at": "2018-12-13T15:40:54Z",
    "author_association": "MEMBER",
    "body": "Yeah that's the point - most research on this topic is based on register machines. Since we use the stack both as expression stack and as local variable storage, it is almost the same, but not quite.\r\n\r\nFor example, currently, we do not optimize the last usage of a stack item:\r\n`let x := 2 mstore(0, x)` is currently translated to `2 dup1 0 mstore pop` while it could be translated to `2 0 mstore`\r\n\r\nor a similar but more complicated version (this blurs the line between expression stack and variable storage):\r\n\r\n`let x := 2 mstore(x, 0)` is currently translated to `2 0 dup2 mstore pop`, but could be translated to `2 0 swap1 mstore`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/447013856/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/448347775",
    "html_url": "https://github.com/ethereum/solidity/issues/5375#issuecomment-448347775",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5375",
    "id": 448347775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODM0Nzc3NQ==",
    "user": {
      "login": "recmo",
      "id": 4532328,
      "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/recmo",
      "html_url": "https://github.com/recmo",
      "followers_url": "https://api.github.com/users/recmo/followers",
      "following_url": "https://api.github.com/users/recmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
      "organizations_url": "https://api.github.com/users/recmo/orgs",
      "repos_url": "https://api.github.com/users/recmo/repos",
      "events_url": "https://api.github.com/users/recmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/recmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T19:51:31Z",
    "updated_at": "2018-12-18T19:53:27Z",
    "author_association": "NONE",
    "body": "The paper and presentation start with a registry based representation. The actual algorithm starts with expression DAGs. I'm not sure what the current internal representation, but expression DAGs are equivalent to SSA when it comes to basic blocks / linear code. They are also a very natural fit for YUL as far as I can tell.\r\n\r\nIt works by finding an optimal cut-set to turn the expresssion DAG into a set of trees (forest). Each tree is optimally sorted and requires no stack operations. The trees are combined using the minimal set of operations. (Note that in the instructions set of the presentation `DUP` works exclusively on top of the stack and `FETCH` retrieve items down the stack and puts it on top. Some translation to the EVM stack operations is required. The accompanying paper explains this better.)\r\n\r\n@chriseth's last example would compile to `0 2 mstore`, as it should. (In this case peephole optimizations would probably catch it, but this is not generally true as the set of instructions that need to be re-order can grow indefinitely).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/448347775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/450431621",
    "html_url": "https://github.com/ethereum/solidity/issues/5375#issuecomment-450431621",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5375",
    "id": 450431621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDQzMTYyMQ==",
    "user": {
      "login": "lastperson",
      "id": 6198746,
      "node_id": "MDQ6VXNlcjYxOTg3NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6198746?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lastperson",
      "html_url": "https://github.com/lastperson",
      "followers_url": "https://api.github.com/users/lastperson/followers",
      "following_url": "https://api.github.com/users/lastperson/following{/other_user}",
      "gists_url": "https://api.github.com/users/lastperson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lastperson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lastperson/subscriptions",
      "organizations_url": "https://api.github.com/users/lastperson/orgs",
      "repos_url": "https://api.github.com/users/lastperson/repos",
      "events_url": "https://api.github.com/users/lastperson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lastperson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-28T21:39:20Z",
    "updated_at": "2018-12-28T21:39:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess this is relevant:\r\n```\r\npragma solidity 0.5.1;\r\n\r\ncontract StackCleanupTest {\r\n    function _itShouldStop(uint _a) internal pure returns(bool) {\r\n        return _a == 1;\r\n    }\r\n    \r\n    function test() public pure returns(uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        uint a1 = 1;\r\n        bool itShouldStop = (a1 == 1); // will cause 'stack too deep' error.\r\n        if (itShouldStop) {}\r\n        // if (_itShouldStop(a1)) {} // will compile with this.\r\n        uint a2 = 1;\r\n        uint a3 = 1;\r\n        uint a4 = 1;\r\n        uint a5 = 1;\r\n        uint a6 = 1;\r\n        uint a7 = 1;\r\n        uint a8 = 1;\r\n        \r\n        return (a1, a2, a3, a4, a5, a6, a7, a8);\r\n    }\r\n}\r\n```\r\n\r\nThe question is, why the variable (*itShouldStop* in the example) is not removed from the stack on the last read?\r\nThe implication is that temporary variables for improved code readability seem to unnecessary pollute the stack. Current workaround is to introduce a pure function instead of the temporary local variable, though readability will suffer already, especially if this function will be used only once.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/450431621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453975606",
    "html_url": "https://github.com/ethereum/solidity/issues/5375#issuecomment-453975606",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5375",
    "id": 453975606,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mzk3NTYwNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-14T11:33:27Z",
    "updated_at": "2019-01-14T11:33:27Z",
    "author_association": "MEMBER",
    "body": "@lastperson be my guest https://github.com/ethereum/solidity/blob/develop/libyul/backends/evm/EVMCodeTransform.cpp#L354 ;)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453975606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
