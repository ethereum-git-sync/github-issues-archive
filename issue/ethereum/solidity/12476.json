{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12476",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12476/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12476/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12476/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12476",
  "id": 1092094040,
  "node_id": "I_kwDOAm_5kc5BGAhY",
  "number": 12476,
  "title": "Possible bug with memory arrays write access",
  "user": {
    "login": "Nielsbishere",
    "id": 28758736,
    "node_id": "MDQ6VXNlcjI4NzU4NzM2",
    "avatar_url": "https://avatars.githubusercontent.com/u/28758736?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Nielsbishere",
    "html_url": "https://github.com/Nielsbishere",
    "followers_url": "https://api.github.com/users/Nielsbishere/followers",
    "following_url": "https://api.github.com/users/Nielsbishere/following{/other_user}",
    "gists_url": "https://api.github.com/users/Nielsbishere/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Nielsbishere/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Nielsbishere/subscriptions",
    "organizations_url": "https://api.github.com/users/Nielsbishere/orgs",
    "repos_url": "https://api.github.com/users/Nielsbishere/repos",
    "events_url": "https://api.github.com/users/Nielsbishere/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Nielsbishere/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-01-02T20:23:29Z",
  "updated_at": "2022-01-03T15:12:20Z",
  "closed_at": "2022-01-03T05:31:21Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nWhen you pass arrays to a library or function, it doesn't always correctly modify the array. Is there a reason for this or is this a bug?\r\nMy guess is that instead of passing it as a reference, it copies the memory. This seems like it would have an impact on performance and prevent things that I am trying to do.\r\n\r\nThe example is in reproduce, what I do is the following (and if they produce the expected result):\r\n- Send array wrapped in struct to function and resize or fill it. Size changes 👍 Data changes 👍\r\n- Pass array to function and resize or fill it. Size changes 👎 Data changes 👍\r\n- Pass array to library function and resize or fill it. Size changes 👎 Data changes 👎\r\n- Pass array wrapped in struct to library function and resize or fill it. Size changes 👎 Data changes 👎\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.8.11\r\n- Target EVM version (as per compiler settings): ^\r\n- Framework/IDE (e.g. Truffle or Remix): Remix\r\n- EVM execution environment / backend / blockchain client: ^\r\n- Operating system: N/A.\r\n\r\n## Steps to Reproduce\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.11;\r\n\r\nstruct IHaveArray {\r\n    uint128[] arr;\r\n}\r\n\r\nlibrary IModifyArray {\r\n\r\n    function modifyArray(IHaveArray memory arr) external pure {\r\n        arr.arr = new uint128[](8);\r\n        arr.arr[0] = 1;\r\n    }\r\n\r\n    function modifyArray1(IHaveArray memory arr) external pure {\r\n        arr.arr[0] = 1;\r\n    }\r\n\r\n    function modifyArray2(uint128[] memory arr) external pure {\r\n        arr = new uint128[](8);\r\n        arr[0] = 1;\r\n    }\r\n\r\n    function modifyArray3(uint128[] memory arr) external pure {\r\n        arr[0] = 1;\r\n    }\r\n\r\n}\r\n\r\ncontract WeirdBug {\r\n\r\n    function modifyArray0(IHaveArray memory arr) private pure {\r\n        arr.arr = new uint128[](8);\r\n        arr.arr[0] = 1;\r\n    }\r\n\r\n    function modifyArray1(IHaveArray memory arr) private pure {\r\n        arr.arr[0] = 1;\r\n    }\r\n\r\n    function modifyArray2(uint128[] memory arr) private pure {\r\n        arr = new uint128[](8);\r\n        arr[0] = 1;\r\n    }\r\n\r\n    function modifyArray3(uint128[] memory arr) private pure {\r\n        arr[0] = 1;\r\n    }\r\n\r\n    function modifyArrays() external pure returns(\r\n        uint256,\r\n        uint128,\r\n\r\n        uint256,\r\n        uint128,\r\n\r\n        uint256,\r\n        uint128,\r\n        \r\n        uint256,\r\n        uint128\r\n    ) {\r\n\r\n        IHaveArray memory arr0;\r\n        arr0.arr = new uint128[](0);\r\n        modifyArray0(arr0);\r\n\r\n        IHaveArray memory arr1;\r\n        arr1.arr = new uint128[](8);\r\n        modifyArray1(arr1);\r\n\r\n        uint128[] memory arr2 = new uint128[](0);\r\n        modifyArray2(arr2);\r\n\r\n        uint128[] memory arr3 = new uint128[](8);\r\n        modifyArray3(arr3);\r\n\r\n        IHaveArray memory arr4;\r\n        arr4.arr = new uint128[](0);\r\n        IModifyArray.modifyArray(arr4);\r\n\r\n        IHaveArray memory arr5;\r\n        arr5.arr = new uint128[](8);\r\n        IModifyArray.modifyArray1(arr5);\r\n\r\n        uint128[] memory arr6 = new uint128[](0);\r\n        IModifyArray.modifyArray2(arr6);\r\n\r\n        uint128[] memory arr7 = new uint128[](8);\r\n        IModifyArray.modifyArray3(arr3);\r\n\r\n        return(\r\n            arr0.arr.length,\r\n            arr1.arr[0],\r\n            arr2.length,\r\n            arr3[0],\r\n            arr4.arr.length,\r\n            arr5.arr[0],\r\n            arr6.length,\r\n            arr7[0]\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n## Output\r\n```\r\n[ 8, 1, 0, 1, 0, 0, 0, 0 ]\r\n```\r\n## Expected output\r\n```\r\n[ 8, 1, 8, 1, 8, 1, 8, 1 ]\r\n```",
  "closed_by": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12476/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12476/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1003880121",
    "html_url": "https://github.com/ethereum/solidity/issues/12476#issuecomment-1003880121",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12476",
    "id": 1003880121,
    "node_id": "IC_kwDOAm_5kc471f65",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-03T05:31:21Z",
    "updated_at": "2022-01-03T05:31:21Z",
    "author_association": "MEMBER",
    "body": "Didn't check the example carefully, but it should be the following: external library functions work differently to internal library functions. Internal ones are attached to the contract, while external ones would be deployed and delegatecalled. That should explain the differences that you are noticing.\r\n\r\nClosing this for now. Feel free to reply if you have any questions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1003880121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1004116966",
    "html_url": "https://github.com/ethereum/solidity/issues/12476#issuecomment-1004116966",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12476",
    "id": 1004116966,
    "node_id": "IC_kwDOAm_5kc472Zvm",
    "user": {
      "login": "Nielsbishere",
      "id": 28758736,
      "node_id": "MDQ6VXNlcjI4NzU4NzM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/28758736?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nielsbishere",
      "html_url": "https://github.com/Nielsbishere",
      "followers_url": "https://api.github.com/users/Nielsbishere/followers",
      "following_url": "https://api.github.com/users/Nielsbishere/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nielsbishere/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nielsbishere/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nielsbishere/subscriptions",
      "organizations_url": "https://api.github.com/users/Nielsbishere/orgs",
      "repos_url": "https://api.github.com/users/Nielsbishere/repos",
      "events_url": "https://api.github.com/users/Nielsbishere/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nielsbishere/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-03T14:09:19Z",
    "updated_at": "2022-01-03T14:09:19Z",
    "author_association": "NONE",
    "body": "@hrkrshnn I understand that a delegate call is different from a function call, but why does it always have to copy memory, as opposed to allowing to pass a reference? One of the examples isn't related to external library functions; if you pass a memory array to a local function and re-initialize it to resize, it won't be applied in the calling scope. This does however work if this array is contained in a struct.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1004116966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1004137134",
    "html_url": "https://github.com/ethereum/solidity/issues/12476#issuecomment-1004137134",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12476",
    "id": 1004137134,
    "node_id": "IC_kwDOAm_5kc472equ",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-03T14:39:15Z",
    "updated_at": "2022-01-03T14:39:15Z",
    "author_association": "MEMBER",
    "body": "> but why does it always have to copy memory, as opposed to allowing to pass a reference?\r\n\r\nThis is not easily achieved with the EVM currently. Memory is contextual to the current call's scope.\r\n\r\n> One of the examples isn't related to external library functions; \r\n\r\nCould you please specify which one is this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1004137134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1004158342",
    "html_url": "https://github.com/ethereum/solidity/issues/12476#issuecomment-1004158342",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12476",
    "id": 1004158342,
    "node_id": "IC_kwDOAm_5kc472j2G",
    "user": {
      "login": "Nielsbishere",
      "id": 28758736,
      "node_id": "MDQ6VXNlcjI4NzU4NzM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/28758736?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nielsbishere",
      "html_url": "https://github.com/Nielsbishere",
      "followers_url": "https://api.github.com/users/Nielsbishere/followers",
      "following_url": "https://api.github.com/users/Nielsbishere/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nielsbishere/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nielsbishere/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nielsbishere/subscriptions",
      "organizations_url": "https://api.github.com/users/Nielsbishere/orgs",
      "repos_url": "https://api.github.com/users/Nielsbishere/repos",
      "events_url": "https://api.github.com/users/Nielsbishere/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nielsbishere/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-03T15:12:20Z",
    "updated_at": "2022-01-03T15:12:20Z",
    "author_association": "NONE",
    "body": "@hrkrshnn ah so that explains the cost of external libraries then and why I was getting issues. modifyArray2 doesn't seem to modify array size even though it should.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1004158342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
