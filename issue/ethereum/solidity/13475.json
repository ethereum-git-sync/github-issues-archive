{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13475/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13475/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13475/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13475",
  "id": 1360644777,
  "node_id": "I_kwDOAm_5kc5RGcqp",
  "number": 13475,
  "title": "solc wastes memory when using structs",
  "user": {
    "login": "nventuro",
    "id": 2530770,
    "node_id": "MDQ6VXNlcjI1MzA3NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nventuro",
    "html_url": "https://github.com/nventuro",
    "followers_url": "https://api.github.com/users/nventuro/followers",
    "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
    "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
    "organizations_url": "https://api.github.com/users/nventuro/orgs",
    "repos_url": "https://api.github.com/users/nventuro/repos",
    "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nventuro/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2022-09-02T22:04:43Z",
  "updated_at": "2022-09-12T21:20:58Z",
  "closed_at": "2022-09-05T13:19:55Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "There seems to be a lot of memory overallocation when dealing with `memory` structs, depending on the exact construct used to work with them. Apparently the situation improved in v0.7.6, which lists 'avoid memory allocation for default value if it is not used' on its changelog.\r\n\r\nPrior to that, the following snippet:\r\n\r\n```\r\nstruct MyNiceStruct {\r\n    uint256 a;\r\n    uint256 b;\r\n}\r\n\r\nfunction alloc() private pure returns (MyNiceStruct memory) {\r\n    MyNiceStruct memory myStruct = MyNiceStruct({ a: 3, b: 4 });\r\n    return myStruct;\r\n}\r\n```\r\n\r\nresults in 192 bytes being allocated, corresponding to 3 (!!!) instances of `MyNiceStruct`. These allocations are apparently triggered by:\r\n a) the declaration of a variable in the function\r\n b) the assignment using the special struct assignment syntax\r\n c) the fact that there's a struct return value\r\n\r\nIf the result of `alloc()` were to be assigned to a struct at the callsite, that'd result in yet another allocation.\r\n\r\n----\r\n\r\nIn current versions, all the way up to 0.8.16, the situation is still bad, though not _quite_ as bad. The assignment to the result of `alloc()` seems to no longer cause an allocation, but I still run into double allocations if I either use the `MyNiceStruct({ ... })` initialization syntax, or declare a local struct instead of using a named return value.\r\n\r\nThe following seems to be the only way to make the compiler allocate space for just one instance of the struct:\r\n\r\n```\r\nfunction alloc() private pure returns (MyNiceStruct memory myStruct) {\r\n    myStruct.a = 3;\r\n    myStruct.b = 4;\r\n}\r\n```",
  "closed_by": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13475/reactions",
    "total_count": 5,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 5
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13475/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1237016816",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1237016816",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1237016816,
    "node_id": "IC_kwDOAm_5kc5Ju2Dw",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-05T13:19:55Z",
    "updated_at": "2022-09-05T13:19:55Z",
    "author_association": "MEMBER",
    "body": "This is a known issue :( Improving memory management is one of the roadmap issues and is currently being worked on: https://github.com/orgs/ethereum/projects/20 Closing this for now; see #13320 and other related issues.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1237016816/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1239993739",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1239993739",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1239993739,
    "node_id": "IC_kwDOAm_5kc5J6M2L",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-07T23:03:56Z",
    "updated_at": "2022-09-07T23:03:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the reply @hrkrshnn. I didn't see any mention of structs there however, are there any concrete plans for those?\r\n\r\nTo be honest, structs feel like a neglected feature: they're the only `memory` type that exhibits this weird auto-allocation behavior, they have strange copy semantics (close to value types, but they're sort of a reference type?), and are just all around wasteful to use if trying to use the 'standard' language constructs (return statements, initialization with named arguments, etc.). The [documentation doesn't even show memory structs at all](https://docs.soliditylang.org/en/v0.8.13/types.html#structs): it looks as if they're just a hack to get packed storage variables.\r\n\r\nAll of this makes me avoid structs whenever possible, since I find I cannot predict wheter my usage will result in wasted allocation. Is there some plan to address these issues?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1239993739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1240800546",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1240800546",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1240800546,
    "node_id": "IC_kwDOAm_5kc5J9R0i",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-08T14:31:47Z",
    "updated_at": "2022-09-08T14:45:24Z",
    "author_association": "MEMBER",
    "body": "@nventuro Yeah, structs would be part of that. Currently, Solidity barely has the idea of reference semantics: most assignments are indeed deep copies. There is some exploratory work on improving this--you can likely expect a talk about it in Devcon Bogota if you are interested.\r\n\r\nAlso good point about improving documentation around structs. I'll make an issue about it.\r\n\r\n> it looks as if they're just a hack to get packed storage variables.\r\n\r\nStorage gets packed even without structs, but I get your point :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1240800546/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243838231",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1243838231",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1243838231,
    "node_id": "IC_kwDOAm_5kc5KI3cX",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-12T14:35:52Z",
    "updated_at": "2022-09-12T14:35:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "How much of a priority would you say this issue has in the roadmap? Are there any expected timelines by which we could expect to see improved memory management?\r\n\r\nThis is one of the issues that makes me not want to switch to the new codegen pipeline (which automatically moves stack variables to memory), as it doesn't quite feel like solc can be trusted with automatic memory allocations.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243838231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243872331",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1243872331",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1243872331,
    "node_id": "IC_kwDOAm_5kc5KI_xL",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-12T15:00:21Z",
    "updated_at": "2022-09-12T15:00:21Z",
    "author_association": "MEMBER",
    "body": "Not that it contributes much, but better performance in dynamic struct memory allocation has very little to do with allocation of stack variables in memory, although of course they would need to work together when the dynamic parts are optimized.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243872331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243902757",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1243902757",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1243902757,
    "node_id": "IC_kwDOAm_5kc5KJHMl",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-12T15:22:03Z",
    "updated_at": "2022-09-12T15:22:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "What do you mean by 'dynamic' struct allocation?\r\n\r\nMy point was rather that basic usage of structs can easily result in excessive overallocation (4x in a trivial case prior to 0.7.6, 2x in the latest versions), and I worry that similar things might happen when letting the compiler automatically promote variables to memory.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243902757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243912754",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1243912754",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1243912754,
    "node_id": "IC_kwDOAm_5kc5KJJoy",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-12T15:29:18Z",
    "updated_at": "2022-09-12T15:29:18Z",
    "author_association": "MEMBER",
    "body": "Yep, I agree that those cases are pretty bad rn, but moving variables to memory is much simpler and likely moving single words doesn't have a bad worst case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243912754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243978754",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1243978754",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1243978754,
    "node_id": "IC_kwDOAm_5kc5KJZwC",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-12T16:19:54Z",
    "updated_at": "2022-09-12T16:19:54Z",
    "author_association": "MEMBER",
    "body": "The compiler only moves variables to memory that can be assigned a globally fixed memory location at compile time - that's why the mechanism doesn't work in recursive functions so far. The allocation mechanism for this is completely decoupled from the free-memory-pointer based mechanism, i.e. the memory offsets are statically assigned by the compiler up front, and the free-memory-pointer is only ever initialized with the memory offset past the memory reserved for the moved variables.\r\nSo there is little danger of excessive allocation due to variables moved to memory - by design it's one slot per variable - for all cases in which that wouldn't be enough, we simply don't do it.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1243978754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1244333650",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1244333650",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1244333650,
    "node_id": "IC_kwDOAm_5kc5KKwZS",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-12T20:03:47Z",
    "updated_at": "2022-09-12T20:03:47Z",
    "author_association": "CONTRIBUTOR",
    "body": ">and the free-memory-pointer is only ever initialized with the memory offset past the memory reserved for the moved variables.\r\n\r\nDoes this mean that if my code feature 10 mutually exclusive code paths, each of which results in one value being promoted to memory, the contract will allocate all 10 words in all cases?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1244333650/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1244482918",
    "html_url": "https://github.com/ethereum/solidity/issues/13475#issuecomment-1244482918",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13475",
    "id": 1244482918,
    "node_id": "IC_kwDOAm_5kc5KLU1m",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-12T21:12:30Z",
    "updated_at": "2022-09-12T21:20:58Z",
    "author_association": "MEMBER",
    "body": "> > and the free-memory-pointer is only ever initialized with the memory offset past the memory reserved for the moved variables.\r\n> \r\n> Does this mean that if my code feature 10 mutually exclusive code paths, each of which results in one value being promoted to memory, the contract will allocate all 10 words in all cases?\r\n\r\nDepends. The slots are allocated per Yul function post optimizer. Disjoint paths through the call graph of these functions can be assigned shared slots. So if you're lucky and the 10 mutually exclusive code paths end up in separate yul functions that live in disjoint paths in the call graph, only one word will be allocated.\r\n\r\nWhether slots can be shared, *could* be determined on a more fine-grained level than per Yul function, but (as the main topic of this issue correctly touches) the compiler is much worse at wasting memory during free-memory pointer based allocation, so our priority is to first fix that and only then to fine-tune assigning memory slots for variables further (if it turns out that's worthwhile).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1244482918/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
