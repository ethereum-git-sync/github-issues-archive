{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/2630/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/2630/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/2630/events",
  "html_url": "https://github.com/ethereum/solidity/issues/2630",
  "id": 245471279,
  "node_id": "MDU6SXNzdWUyNDU0NzEyNzk=",
  "number": 2630,
  "title": "Unexpected fallback function behavior when returning values.",
  "user": {
    "login": "Dexaran",
    "id": 26142412,
    "node_id": "MDQ6VXNlcjI2MTQyNDEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Dexaran",
    "html_url": "https://github.com/Dexaran",
    "followers_url": "https://api.github.com/users/Dexaran/followers",
    "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
    "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
    "organizations_url": "https://api.github.com/users/Dexaran/orgs",
    "repos_url": "https://api.github.com/users/Dexaran/repos",
    "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Dexaran/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2017-07-25T17:10:42Z",
  "updated_at": "2022-08-17T13:49:39Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I have this contracts:\r\n\r\n```js\r\n\r\npragma solidity ^0.4.11;\r\n\r\ncontract test_receive\r\n{ \r\n// this contract is needed only for the other contract to compile - it's never actually called\r\n    function receive(address, uint256, bytes) returns (bool, uint256)\r\n   { \r\n        return (false, 222);\r\n    }\r\n} \r\n\r\ncontract test_cast\r\n{\r\n    uint public test_uint;\r\n    bool public test_bool;\r\n\r\n    function test(address addr, uint256 n) returns (uint256)\r\n    {\r\n        bytes memory _data;\r\n        var (_success, _back) = test_receive(addr).receive(addr, n, _data);\r\n        require(_success);\r\n        test_uint = _back;\r\n        test_bool = _success;\r\n        return _back;\r\n    }\r\n}\r\n\r\ncontract dummy\r\n  {\r\n    function() payable {  }\r\n}\r\n\r\n```\r\n\r\nI've compiled contracts and deployed `test_cast` at this address on Rinkeby: [0x330D0f8cc94758F26DD299bb803Fe63Fef76F726](https://rinkeby.etherscan.io/address/0x330d0f8cc94758f26dd299bb803fe63fef76f726#code).\r\n\r\nI've deployed `dummy` here on Rinkeby: [0x66855c513B861b617aD806C9d4CC35661087dda3](https://rinkeby.etherscan.io/address/0x66855c513b861b617ad806c9d4cc35661087dda3#code)\r\n\r\nI've called `test` at `test_cast` with this parameters: `0x330d0f8cc94758f26dd299bb803fe63fef76f726` , `124` .\r\n\r\nCall tx: https://rinkeby.etherscan.io/tx/0x88833366a0ca22e1aacdb64c7d2e3aefa54e7f719782e36a5fbde1a078c482cd\r\n\r\nIn the result of the call `test_uint` became `7477059611491291558618241337412310647290875865618134341354521175411004538880` and `test_bool` became `true` .\r\n\r\nI think that if the fallback function doesn't return any values then it should not return values depending on my input.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/2630/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/2630/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318028685",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-318028685",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 318028685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODAyODY4NQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T11:40:50Z",
    "updated_at": "2017-07-26T11:41:04Z",
    "author_association": "MEMBER",
    "body": "Solidity does not track invalid explicit type conversions at runtime. It is actually even impossible to detect them with the current ABI. After metropolis, such errors can be reduced but they can never be fully erased.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318028685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318035563",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-318035563",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 318035563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODAzNTU2Mw==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T12:15:25Z",
    "updated_at": "2017-10-24T05:15:28Z",
    "author_association": "NONE",
    "body": "@chriseth I suppose the problem is not the explicit type conversion, but return value assignment.\r\nI'm executing the `test_receive(addr).receive(addr, n, _data);` function assuming it will return values. There is no `receive` function at the executable contract and as the result fallback function is executed.\r\n\r\nFallback function **must return nothing**.\r\n\r\nI think that if I've called a function that should not return values then my variables should stay unassigned (`_success` = false and `_back` = 0 in this case) or the transaction should end with execution error. Not to get returned random values from the stack.\r\n\r\n But the return values were taken from the stack where my inputs variables were located I think.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318035563/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318087660",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-318087660",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 318087660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODA4NzY2MA==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T15:23:17Z",
    "updated_at": "2017-07-26T15:23:17Z",
    "author_association": "MEMBER",
    "body": "Before Metropolis, there is no way for the calling contract to see if the called account returned any data.  The called contract can refuse to execute the fallback function when the input data is at least 4 bytes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318087660/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318088084",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-318088084",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 318088084,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODA4ODA4NA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T15:24:36Z",
    "updated_at": "2017-07-26T15:24:36Z",
    "author_association": "MEMBER",
    "body": "> The called contract can refuse to execute the fallback function when the input data is at least 4 bytes.\r\n\r\nI think that may work better as a modifier (we could include it in std) or a keyword.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318088084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318090689",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-318090689",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 318090689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODA5MDY4OQ==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T15:33:01Z",
    "updated_at": "2017-07-26T15:33:01Z",
    "author_association": "NONE",
    "body": "So we can't rely on variables returned by any third party contracts before Metropolis because they could be a random value from the stack, if I understand everything correctly.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318090689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318091534",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-318091534",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 318091534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODA5MTUzNA==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-26T15:35:43Z",
    "updated_at": "2017-07-26T15:37:20Z",
    "author_association": "MEMBER",
    "body": "Yes, that's right.  There are two cases before Metropolis:\r\n* the memory content (in the memory region specified as output range) changes after `CALL`: the calling contract can be sure that something has been returned\r\n* the memory content stays the same after `CALL`: the calling contract cannot be sure if it's the random leftover in the memory or something returned.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/318091534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/326765956",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-326765956",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 326765956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjc2NTk1Ng==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-02T19:51:46Z",
    "updated_at": "2017-09-02T19:51:46Z",
    "author_association": "MEMBER",
    "body": "What is the problem with @pirapira's suggestion? If the caller is attempting to call a function that doesn't exist I think this **SHOULD** be an error/exception.  The contract should not receive the function and _instead_ execute unintended code and then return garbage as that is an incredibly unsafe default.\r\n\r\nEven after Metropolis, I do not think that calling a non-existent function should ever do anything other than throw (including returning `0` values).  I believe this can all be done in Solidity as the compiler just needs to make it so the default function checks the calldata to see if it is non-empty.  If it is non-empty, then it should be assumed that a contract call was attempted and if the method lookup fails it should throw.\r\n\r\nIMO, the default function should _only_ be executed if the call is otherwise valid (no calldata or calldata is a valid function call).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/326765956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/327000663",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-327000663",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 327000663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzAwMDY2Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-04T16:45:59Z",
    "updated_at": "2017-09-04T16:47:00Z",
    "author_association": "MEMBER",
    "body": "@MicahZoltu the called contract can detect whether the called function exists or not (at least unless there is a function selector collision), but earlier comments were about the caller detecting it. The latter is impossible because the EVM does not even have the concept of functions.\r\n\r\nI support reverting if the function signature was not found, and only execute the fallback function in case of empty data.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/327000663/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/327029342",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-327029342",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 327029342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzAyOTM0Mg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-04T21:19:24Z",
    "updated_at": "2017-09-04T21:19:24Z",
    "author_association": "MEMBER",
    "body": "Since this can only be handled properly from the callee's side it only makes it to work in a non-malicious scenario. In those scenarios also using interface introspection is a possible way.\r\n\r\n---\r\n\r\nI think there are actually three kinds of fallback functions:\r\na) those which expect data (i.e. they are a proxy or use a non-ABI encoded input)\r\nb) those which expect no data\r\nc) those which expect that no other function selector was matched\r\n\r\nCurrently we support all options:\r\n- c) is the catch all\r\n- b) has a shortcut in the dispatcher and can be enforced via a modifier: `modifier emptyCalldata() { require(msg.data.length == 0); _; }`\r\n- a) works because `msg.data` is accesible.\r\n\r\nWith this change we would break c) and a), which some contracts use.\r\n\r\nI'd go with a way which can support all options and since it seems to be a bad idea to introduce fallbacks with different names (one of them would be `function ()` and the other with a name?) the next best way is to have a modifier or a pragma.\r\n\r\nThese two older issues try to talk about a similar issue: #510 and #2109.\r\n\r\nIf we would like to make it a language feature then I'd suggest designing it together with these other issues because they tackle ABI decoding from different aspects:\r\n- require zero length\r\n- require exact length\r\n- require minimum length\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/327029342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/327032814",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-327032814",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 327032814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzAzMjgxNA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-04T21:59:16Z",
    "updated_at": "2017-09-04T21:59:16Z",
    "author_association": "MEMBER",
    "body": "Hmm, good point about the existing use cases people have come up with for fallback functions.  Delegation is an example one that is becoming pretty common in the ecosystem where the default function looks at the data and uses it even though there are no methods that match the called signature.\r\n\r\nMy concern is that I'm unconvinced these features are worth the risks they introduce.  It is really unexpected behavior for anyone not previously familiar with it and at the moment the fact that the fallback returns garbage in the case of a non-match scares me a lot.\r\n\r\nI would _personally_ be OK with losing the auto-delegation feature (which I currently use pretty heavily) if it meant not having to worry about the default function being accidentally called and then possibly returning garbage data to me.  I can't think of any other major languages that behave this way (where an invalid function call doesn't result in a hard failure), yet I haven't run into any problems where I thought to myself, \"If only the call fell back to executing some other code I wrote...\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/327032814/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/338903681",
    "html_url": "https://github.com/ethereum/solidity/issues/2630#issuecomment-338903681",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2630",
    "id": 338903681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODkwMzY4MQ==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T07:45:28Z",
    "updated_at": "2017-10-24T07:45:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Would be possible to clear return data in case of a fallback function that does not return anything?  Like calling  `assembly { return(0) }´... Maybe when fallback function starts executing it clear the returndata memory pointer and then do the logic. Maybe we could make a modifier ?  Or make a modifier for when we need fallback function returning a unknown (that came from delegatecall)?\r\n\r\nThe only case I see that fallback returning any value is when we use it with delegatecall.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/338903681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
