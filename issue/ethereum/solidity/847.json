{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/847",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/847/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/847/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/847/events",
  "html_url": "https://github.com/ethereum/solidity/issues/847",
  "id": 170013260,
  "node_id": "MDU6SXNzdWUxNzAwMTMyNjA=",
  "number": 847,
  "title": "Explicit keyword for interface contracts",
  "user": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/solidity/milestones/36",
    "html_url": "https://github.com/ethereum/solidity/milestone/36",
    "labels_url": "https://api.github.com/repos/ethereum/solidity/milestones/36/labels",
    "id": 1936632,
    "node_id": "MDk6TWlsZXN0b25lMTkzNjYzMg==",
    "number": 36,
    "title": "3-abstract-",
    "description": null,
    "creator": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 2,
    "state": "closed",
    "created_at": "2016-08-11T11:16:36Z",
    "updated_at": "2019-11-04T12:27:20Z",
    "due_on": null,
    "closed_at": "2018-07-30T10:42:58Z"
  },
  "comments": 24,
  "created_at": "2016-08-08T20:08:27Z",
  "updated_at": "2017-03-23T13:26:02Z",
  "closed_at": "2017-03-23T13:25:51Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Splitting out this discussion from https://github.com/ethereum/solidity/issues/649.\n\nI think it would make sense having interfaces explicitly defined in Solidity source code:\n\n```\ninterface Token {\n  function balance(address owner) returns (uint);\n  function transfer(address recipient, uint amount);\n}\n```\n\nCompared to _abstract contracts_, none of the interface methods can have a body.\n",
  "closed_by": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/847/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/847/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/238837756",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-238837756",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 238837756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODgzNzc1Ng==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T11:18:04Z",
    "updated_at": "2016-08-10T11:18:04Z",
    "author_association": "MEMBER",
    "body": "Please list pros and cons\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/238837756/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/239133018",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-239133018",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 239133018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTEzMzAxOA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-11T11:14:00Z",
    "updated_at": "2016-08-11T11:14:00Z",
    "author_association": "MEMBER",
    "body": "What about:\n\nWarn if contract is abstract but not \"marked\" as abstract.\nYou can mark a contract as abstract by using  `contract a is abstract {}`.\nIt is a bit weird, because `abstract` would be a keyword that is not inherited, i.e. contracts that derive from `a` will not necessarily be abstract.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/239133018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/243242010",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-243242010",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 243242010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzI0MjAxMA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-29T20:16:21Z",
    "updated_at": "2016-08-29T20:19:32Z",
    "author_association": "MEMBER",
    "body": "I think I've explained the pros since in #649.\n\nBoth `contract interface Token {}` and `contract Token interface { }` could work, but mixing it with inheritance (the `is` keyword) is dangerous.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/243242010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/262856665",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-262856665",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 262856665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mjg1NjY2NQ==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-24T23:47:19Z",
    "updated_at": "2016-11-24T23:47:19Z",
    "author_association": "MEMBER",
    "body": "I think interface could be its own type and we can run it like in golang. Essentially what would happen is that you can only apply function types to interface types but structs can inherit an interface. This interface can then easily be passed around with different structs that inherit or have the same functions as the interface. You should then be able to assert from the interface what type of object it is. The null interface could be a var and passed in as a generic. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/262856665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/262857420",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-262857420",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 262857420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mjg1NzQyMA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-24T23:58:46Z",
    "updated_at": "2016-11-24T23:58:46Z",
    "author_association": "MEMBER",
    "body": "Only problem is then whether or not structs implement their own version of the function. Which they probably shouldn't. However it could be mandated to check for all types defined in functions that take in an interface type. Perhaps contracts themselves could be passed in as types from this point as well so long as the functions are implemented in the contract body. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/262857420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/263266155",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-263266155",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 263266155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzI2NjE1NQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-28T13:04:19Z",
    "updated_at": "2016-11-28T13:04:19Z",
    "author_association": "MEMBER",
    "body": "One more idea to interfaces: they could be made pure interfaces by not allowing inheritance. That ensures an interface remains self-contained and hopefully limited in size.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/263266155/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/263323702",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-263323702",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 263323702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzMyMzcwMg==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-28T16:46:18Z",
    "updated_at": "2016-11-28T16:46:18Z",
    "author_association": "MEMBER",
    "body": "I'm not sure how we do that...how do we limit inheritance?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/263323702/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274423423",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274423423",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274423423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQyMzQyMw==",
    "user": {
      "login": "rolandkofler",
      "id": 979444,
      "node_id": "MDQ6VXNlcjk3OTQ0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolandkofler",
      "html_url": "https://github.com/rolandkofler",
      "followers_url": "https://api.github.com/users/rolandkofler/followers",
      "following_url": "https://api.github.com/users/rolandkofler/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolandkofler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolandkofler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolandkofler/subscriptions",
      "organizations_url": "https://api.github.com/users/rolandkofler/orgs",
      "repos_url": "https://api.github.com/users/rolandkofler/repos",
      "events_url": "https://api.github.com/users/rolandkofler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolandkofler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T08:10:20Z",
    "updated_at": "2017-01-23T08:10:20Z",
    "author_association": "NONE",
    "body": "While doing OOA on a contract, I noticed that I miss the notion of interface in the language.\r\nIn object orientation, interfaces are used to designate roles to a class (ERC20 token, Iterable, Stoppable etc.) . An interface **does not ** equal to an abstract class. It just defines the signature of a bundle that must be implemented by the class {public members, public functions, public events}. \r\n\r\nI think interfaces are both simple to implement and maintain and very useful. \r\nBecause sane multiple inheritance is impossible, they help to define multiple aspects of an object.\r\nI would really plea for implementing them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274423423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274425812",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274425812",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274425812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQyNTgxMg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T08:25:31Z",
    "updated_at": "2017-01-23T08:25:31Z",
    "author_association": "MEMBER",
    "body": "We have a tradeoff here: We can make the language more complicated by adding more notions and keywords (I think C# is a negative example here). On the other hand, this complication prevents people from making mistakes by accidentally implementing a function in a contract that is meant as a mere interface. Since these complications come in small steps, I'm not sure many people would argue against a single step until it is \"too late\". What are your opinions here, @rolandkofler @axic @VoR0220 ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274425812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274432825",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274432825",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274432825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQzMjgyNQ==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T09:03:16Z",
    "updated_at": "2017-01-23T09:03:16Z",
    "author_association": "MEMBER",
    "body": "An interface should be its own type. Plain and simple. The notion of abstract contracts should be disintegrated in future releases and replaced with an interface type. If a contract or a struct for that matter (have to get extra specific for struct methods) implements all of that interfaces methods it can be passed into a function signature containing said interface. The way that it currently is set up is too wide open and invites errors. We simply need stronger types. This is my opinion but what benefit do we get from the current abstract function set in terms of implementing this kind of a feature? It hinders us more than helps us imo. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274432825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274456198",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274456198",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274456198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQ1NjE5OA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T10:51:47Z",
    "updated_at": "2017-01-23T11:02:27Z",
    "author_association": "MEMBER",
    "body": "I still think pure interfaces (which cannot inherit other interfaces) are very useful to define a limited set of mandatory public signatures that must be present. These in our current state can only be defined as functions in the interface, but the implementor might choose a public accessor to fulfil the requirements.\r\n\r\nI am not sure whether we should include events in that or not, given the special nature of events.\r\n\r\nI think most cases of abstract contracts can be eliminated by templates.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274456198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274496918",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274496918",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274496918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQ5NjkxOA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T14:09:54Z",
    "updated_at": "2017-01-23T14:09:54Z",
    "author_association": "MEMBER",
    "body": "WRT events...I'm against it for now...treat it like libraries and inheritance. Keep a restriction now...lift it up with time if the community demands it. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274496918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274543892",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274543892",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274543892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDU0Mzg5Mg==",
    "user": {
      "login": "rolandkofler",
      "id": 979444,
      "node_id": "MDQ6VXNlcjk3OTQ0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolandkofler",
      "html_url": "https://github.com/rolandkofler",
      "followers_url": "https://api.github.com/users/rolandkofler/followers",
      "following_url": "https://api.github.com/users/rolandkofler/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolandkofler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolandkofler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolandkofler/subscriptions",
      "organizations_url": "https://api.github.com/users/rolandkofler/orgs",
      "repos_url": "https://api.github.com/users/rolandkofler/repos",
      "events_url": "https://api.github.com/users/rolandkofler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolandkofler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T16:48:18Z",
    "updated_at": "2017-01-23T16:48:18Z",
    "author_association": "NONE",
    "body": "> if the community demands it.\r\n\r\nInterfaces would really help, they are just an enforcement of strong typification as @axic  said, help greatly promoting a modular ecosystem, and have virtually no security risk or performance impact or consequences on the functionality. They just help keep up a good domain model.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274543892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274546439",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274546439",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274546439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDU0NjQzOQ==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T16:56:15Z",
    "updated_at": "2017-01-23T16:57:18Z",
    "author_association": "MEMBER",
    "body": "@rolandkofler I'm agreeing with you. I'm saying specifically wrt @axic 's talk about including events in the interface type as functions that must be present within the contract. IMO it makes the type more complicated and will make the development of such a type longer and harder to produce. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274546439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274550791",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274550791",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274550791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDU1MDc5MQ==",
    "user": {
      "login": "rolandkofler",
      "id": 979444,
      "node_id": "MDQ6VXNlcjk3OTQ0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolandkofler",
      "html_url": "https://github.com/rolandkofler",
      "followers_url": "https://api.github.com/users/rolandkofler/followers",
      "following_url": "https://api.github.com/users/rolandkofler/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolandkofler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolandkofler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolandkofler/subscriptions",
      "organizations_url": "https://api.github.com/users/rolandkofler/orgs",
      "repos_url": "https://api.github.com/users/rolandkofler/repos",
      "events_url": "https://api.github.com/users/rolandkofler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolandkofler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T17:10:01Z",
    "updated_at": "2017-01-23T17:10:01Z",
    "author_association": "NONE",
    "body": "@VoR0220 yes, fully agree. Start with a *minimal viable* interface. Plain, no inheritance, no member variables, just functions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274550791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274568707",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274568707",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274568707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDU2ODcwNw==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T18:08:36Z",
    "updated_at": "2017-01-23T18:08:36Z",
    "author_association": "MEMBER",
    "body": "@axic Why not just add the `pure` as a type modifier to type `interface`...this means that it can't inherit other interfaces. An example of what I imagine as an interface type would be like such:\r\n\r\nlibrary of interfaces\r\n```\r\nlibrary myInterfaces {\r\n    pure interface Animal { //this means the interface cannot be inherited once passed in as this interface\r\n         Speak() returns (string);\r\n    }\r\n\r\n   interface Earthling {\r\n         IsEarthling() returns (bool);\r\n   } \r\n   interface Human { //this interface can be inherited from once passed in as is. \r\n        Name() returns (string);\r\n   }\r\n\r\n}\r\n```\r\n\r\ncontract Kitty:\r\n\r\n```\r\ncontract Kitty {\r\n     function Speak() returns (string) { return \"meow\"; }\r\n\r\n     function IsEarthling() returns (string) { return true; } \r\n\r\n     function Name() returns (string) { return \"mittens\";}\r\n     \r\n}\r\n```\r\n\r\ncontract Bob:\r\n\r\n```\r\ncontract BobTheHuman {\r\n    function Speak() returns (string) { return \"Hi!\"; }\r\n\r\n    function Name() returns (string) { return \"Bob\"; }\r\n\r\n    function IsEarthling() returns (bool) { return true; }\r\n\r\n}\r\n```\r\n\r\ncontract Main: \r\n```\r\ncontract Main {\r\nBobTheHuman bob;\r\nKitty cat;\r\n\r\n// this will work because Bob can be turned into a human and also turned into an earthling \r\n// because his interfaces are normal and flexible\r\nfunction assertBobIsAnEarthling() returns (bool) {\r\n     return IsHumanEarthling(bob);\r\n}\r\n\r\nfunction IsHumanEarthling(Human _human) returns (bool) {\r\n    return LifeFormIsEarthling(_human);\r\n}\r\n\r\nfunction LifeFormIsEarthling(Earthling _lifeform) returns (bool) {\r\n    return _lifeform.IsEarthling();\r\n}\r\n// the following will not work because kitty cat cannot be turned into anything but an animal, and will\r\n// fail the second that we try to  turn kitty cat into an earthling\r\nfunction assertKittyCatIsAnEarthling() returns (bool) {\r\n      return IsAnimalEarthling(cat);\r\n}\r\n\r\nfunction isAnimalEarthling(Animal _animal) returns (bool) {\r\n     return LifeFormIsEarthling(_animal); //fail right here.\r\n}\r\n\r\n\r\n}\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274568707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274571640",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274571640",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274571640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDU3MTY0MA==",
    "user": {
      "login": "rolandkofler",
      "id": 979444,
      "node_id": "MDQ6VXNlcjk3OTQ0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolandkofler",
      "html_url": "https://github.com/rolandkofler",
      "followers_url": "https://api.github.com/users/rolandkofler/followers",
      "following_url": "https://api.github.com/users/rolandkofler/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolandkofler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolandkofler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolandkofler/subscriptions",
      "organizations_url": "https://api.github.com/users/rolandkofler/orgs",
      "repos_url": "https://api.github.com/users/rolandkofler/repos",
      "events_url": "https://api.github.com/users/rolandkofler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolandkofler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T18:18:50Z",
    "updated_at": "2017-01-23T18:18:50Z",
    "author_association": "NONE",
    "body": "@VoR0220  `pure` is the wrong keyword IMHO, `simple` or even better `naive` would do it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274571640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274575617",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-274575617",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 274575617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDU3NTYxNw==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T18:32:45Z",
    "updated_at": "2017-01-23T18:32:45Z",
    "author_association": "MEMBER",
    "body": "I would assume `simple` would be the default interface and would enable flexibility...perhaps `strict` would be a better term for the above? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/274575617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/278156500",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-278156500",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 278156500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE1NjUwMA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T22:04:33Z",
    "updated_at": "2017-02-07T22:13:36Z",
    "author_association": "MEMBER",
    "body": "@VoR0220 in the examples above `Kitty` and `BobTheHuman` didn't inherit from the interface.\r\n\r\nMy current criteria:\r\n- interface is defined by the `interface` keyword\r\n- cannot inherit\r\n- cannot have variables defined\r\n- cannot have function bodies\r\n- cannot have structs defined (though this might make sense to lift later on - it is easier to start with a limited subset and enable more features as confidence grows, than the doing reverse)\r\n\r\nMade the changes and it is only ~50 lines of code to solc. (Available here: https://github.com/ethereum/solidity/tree/interface-keyword)\r\n\r\nThis compiles:\r\n```\r\ninterface Token {\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n        function totalSupply() constant returns (uint256 supply);\r\n        function balanceOf(address _owner) constant returns (uint256 balance);\r\n        function transfer(address _to, uint256 _value) returns (bool success);\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n        function approve(address _spender, uint256 _value) returns (bool success);\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n```\r\n\r\nThis essentially maps to the fact that what can be expressed clearly in the  JSON ABI can be transformed into an interface \"contract\" and vice versa.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/278156500/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/278164792",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-278164792",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 278164792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE2NDc5Mg==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T22:33:06Z",
    "updated_at": "2017-02-07T22:33:06Z",
    "author_association": "MEMBER",
    "body": "@axic this is definitely the easier way to supply it I will agree there, but there are some problems I have in terms of checking of contracts being passed in with certain types...I would like to get an interface in a form similar to how they interact in Golang (and I know that that is a stretch but I think it could definitely help out safety in many ways if done properly) see here: \r\n\r\nhttp://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go\r\n\r\nParticularly as it relates to the empty interface I suppose that wouldn't fit here. However, in terms of reflecting and changing into different types based on whether they implement an interface, I think this is very useful in the mindset of contracts and enables contract safety in a way because we can check via a hash of the code and whether or not this code's hash fits this type being passed in, and can be done via a switch case. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/278164792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/278170242",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-278170242",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 278170242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE3MDI0Mg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T22:51:45Z",
    "updated_at": "2017-02-07T22:51:56Z",
    "author_association": "MEMBER",
    "body": "Without having read the entire article, it starts with:\r\n\r\n> This is a core concept in Go’s type system; instead of designing our abstractions in terms of what kind of data our types can hold, we design our abstractions in terms of what actions our types can execute.\r\n\r\nWhich the above proposal matches 100% 😉 \r\n\r\nI don't think automatic interface lookup works well in our scenario. One of the main points of the `interface` type is to have a compile type verification that your output contract satisfies a required ABI, because in our case, updating a contract is tad more problematic (at least today) than installing a new version of a desktop software.\r\n\r\n> because we can check via a hash of the code and whether or not this code's hash fits this type being passed in\r\n\r\nI don't fully follow here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/278170242/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/278179188",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-278179188",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 278179188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODE3OTE4OA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T23:30:43Z",
    "updated_at": "2017-02-07T23:30:43Z",
    "author_association": "MEMBER",
    "body": "@axic What I mean is that I should be able to pass an interface into a function signature as a type and then check to see if its the particular interface I want. A pseudocode example of how this would work is the following:\r\n\r\n```\r\nassume that A = Hash(fileA.sol:Contract A), B = Hash(fileB.sol:Contract B), C = Hash(fileC.sol:Contract C)\r\n\r\nfunction (interface _myInterface) {\r\nswitch _myInterface.type {\r\ncase A: //check if the incoming contract subscribes to hash of A, if so continue\r\n// do stuff with A\r\ncase B: // ibid hash of B\r\n// do stuff with B\r\ncase C: // ibid hash of C\r\n// do stuff with C\r\ndefault:\r\nthrow;\r\n}\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/278179188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/288717509",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-288717509",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 288717509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODcxNzUwOQ==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-23T13:23:38Z",
    "updated_at": "2017-03-23T13:23:38Z",
    "author_association": "MEMBER",
    "body": "Can this be closed now that #1688 has been merged?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/288717509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/288718129",
    "html_url": "https://github.com/ethereum/solidity/issues/847#issuecomment-288718129",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/847",
    "id": 288718129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODcxODEyOQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-23T13:25:51Z",
    "updated_at": "2017-03-23T13:26:02Z",
    "author_association": "MEMBER",
    "body": "Yes!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/288718129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
