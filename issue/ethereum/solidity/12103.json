{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12103",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12103/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12103/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12103/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12103",
  "id": 1019816799,
  "node_id": "I_kwDOAm_5kc48yStf",
  "number": 12103,
  "title": "Expensive access calldata member",
  "user": {
    "login": "drortirosh",
    "id": 40341007,
    "node_id": "MDQ6VXNlcjQwMzQxMDA3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/drortirosh",
    "html_url": "https://github.com/drortirosh",
    "followers_url": "https://api.github.com/users/drortirosh/followers",
    "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
    "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
    "organizations_url": "https://api.github.com/users/drortirosh/orgs",
    "repos_url": "https://api.github.com/users/drortirosh/repos",
    "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/drortirosh/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2021-10-07T09:23:40Z",
  "updated_at": "2022-08-17T13:49:08Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\nIf an external method receives a struct member, it seems only natural to use \"calldata\" in internal methods to access its members: after all, it requires no stack pushes and no extra copy of unneeded data from calldata to memory.\r\n\r\nApparently, it isn't that simple:\r\n\r\naccessing \"calldata\" structure member is very complex, and **very expensive**.\r\ninstead of simple \"calldataload(offset)\" call, the compiler generates a complex method.\r\n\r\nbelow is a sample code, which shows that replacing direct `struct.member` member access with a method call (implemented as a one-liner assembly) reduces the gas cost by **400** !\r\n\r\nApparently, if my custom assembly method is that simple, the compiler knows how to inline it completely (which is great. its just too bad it can't do the same with the auto-generated member-access method)\r\n\r\nAn extra problem is that there is no easy way to write these accessor functions in assembly: there is no way to know the offsets of the fields inside the struct, and need to do manual offset calculation. And if we want to access dynamic parameters, its even more complex and error-prone.\r\n\r\n```solidity\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8;\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract AArun {\r\n    constructor() {\r\n        Test t = new Test();\r\n        uint g = gasleft();\r\n        Struct memory s;\r\n        s.sender = address(this);\r\n        s.extra=\"asd\";\r\n        t.test1(s);\r\n        uint g1 = gasleft();\r\n        t.test2(s);\r\n        uint g2 = gasleft();\r\n        uint t1=g-g1;\r\n        uint t2=g1-g2;\r\n        console.log(\"test1 %s test2 %s diff= %s\", t1, t2, t1-t2 );\r\n    }\r\n}\r\n\r\nstruct Struct {\r\n        address sender;\r\n        bytes extra;\r\n    }\r\n\r\nlibrary StructLib {\r\n    function getSender(Struct calldata s) internal pure returns (address ret) {\r\n        assembly { ret:=calldataload(s) }        \r\n    }\r\n\r\n}    \r\n\r\ncontract Test {\r\n   using StructLib for Struct;\r\n\r\n    function test1(Struct calldata s) external {\r\n        require(s.sender == msg.sender, \"sender check\");\r\n    }    \r\n    function test2(Struct calldata s) external {\r\n        require(s.getSender() == msg.sender, \"sender check2\");\r\n    }    \r\n\r\n}\r\n```\r\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12103/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12103/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/937645433",
    "html_url": "https://github.com/ethereum/solidity/issues/12103#issuecomment-937645433",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12103",
    "id": 937645433,
    "node_id": "IC_kwDOAm_5kc4341V5",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T10:05:46Z",
    "updated_at": "2021-10-07T10:05:46Z",
    "author_association": "MEMBER",
    "body": "I would advise you to take a look at the generated assembly in the two cases and compare it. You will see that instead of a simple `calldataload`, the compiler calls an internal routine from the generated file \"#utility.yul\". You can obtain that file using `--combined-json generated-sources-runtime`. The internal routine is the following:\r\n```\r\nfunction abi_decode_tuple_t_struct$_Struct_$6_calldata_ptr(headStart, dataEnd) -> value0\r\n{\r\n  if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\r\n  let offset := calldataload(headStart)\r\n  if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\r\n  let _1 := add(headStart, offset)\r\n  if slt(sub(dataEnd, _1), 64) { revert(0, 0) }\r\n  value0 := _1\r\n}\r\n```\r\n\r\nAnd here you can see the trade-off between `memory` and `calldata` structs: Both of them are always checked for access beyond calldata, but while for memory structs, this only has to be done once when the data is copied to memory, it has to be done for each access when you use calldata.\r\n\r\nThere is a slight inconvenience here: Since we did not want to implement calldata access twice, we are re-using the new IR-based code generator in the current code generator. This way, one of the checks will be done twice, I believe.\r\n\r\nThe good news is that the two ways to access the sender member optimize to exactly the same code when using the new IR-based code generator for the full contract. You can try it out using `solc --experimental-via-ir`.\r\n\r\nBecause of that, I'm closing this issue. We will likely make the new code generator non-experimental before fixing this in the old code generator.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/937645433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/937671516",
    "html_url": "https://github.com/ethereum/solidity/issues/12103#issuecomment-937671516",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12103",
    "id": 937671516,
    "node_id": "IC_kwDOAm_5kc4347tc",
    "user": {
      "login": "drortirosh",
      "id": 40341007,
      "node_id": "MDQ6VXNlcjQwMzQxMDA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drortirosh",
      "html_url": "https://github.com/drortirosh",
      "followers_url": "https://api.github.com/users/drortirosh/followers",
      "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
      "organizations_url": "https://api.github.com/users/drortirosh/orgs",
      "repos_url": "https://api.github.com/users/drortirosh/repos",
      "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drortirosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T10:41:49Z",
    "updated_at": "2021-10-07T10:41:49Z",
    "author_association": "NONE",
    "body": "I don't think your example is relevant to that specific case: I'm referencing the a member of a struct that its offset is known at compile time. Also, its size is fixed and known.\r\nI agree that if I access a dynamic member, like `extra`, above, you'd have to verify the returned offset, and then the total length (and still, allow \"unchecked\" code run without those checks)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/937671516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/937702585",
    "html_url": "https://github.com/ethereum/solidity/issues/12103#issuecomment-937702585",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12103",
    "id": 937702585,
    "node_id": "IC_kwDOAm_5kc435DS5",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-07T11:26:45Z",
    "updated_at": "2021-10-07T12:31:50Z",
    "author_association": "MEMBER",
    "body": "@drortirosh About the benchmark: there is a small issue in this comparison. Since `test1` and `test2` are in the same contract, the order in which the function appears in the function dispatch makes will affect your benchmark. In this case, `test2` is the first function in the dispatch. Could you try to redo the benchmark, but with two different contracts, each having only a single function? Also, are the numbers after you enable the optimizer?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/937702585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
