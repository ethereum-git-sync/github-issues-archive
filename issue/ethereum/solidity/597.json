{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/597",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/597/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/597/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/597/events",
  "html_url": "https://github.com/ethereum/solidity/issues/597",
  "id": 156663804,
  "node_id": "MDU6SXNzdWUxNTY2NjM4MDQ=",
  "number": 597,
  "title": "Allow specifying storage locations",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438481746,
      "node_id": "LA_kwDOAm_5kc8AAAABCI3bUg",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have%20eventually",
      "name": "must have eventually",
      "color": "ffb04d",
      "default": false,
      "description": "Something we consider essential but not enough to prevent us from releasing Solidity 1.0 without it."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 39,
  "created_at": "2016-05-25T05:02:07Z",
  "updated_at": "2023-12-15T23:35:04Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Inline assembly has now made fully up upgradable contracts possible.  One of the main hangups with this is that the storage locations have to stay the same across upgrades.  Would it be possible to introduce support for specifying the storage locations for storage variables?\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/597/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/597/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221488744",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221488744",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221488744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTQ4ODc0NA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T06:55:10Z",
    "updated_at": "2016-05-25T06:55:10Z",
    "author_association": "MEMBER",
    "body": "not so! \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221488744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221488973",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221488973",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221488973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTQ4ODk3Mw==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T06:56:26Z",
    "updated_at": "2016-05-25T06:56:36Z",
    "author_association": "MEMBER",
    "body": "See Nick Johnson's Library on upgradeability :)\n\nhttps://gist.github.com/Arachnid/4ca9da48d51e23e5cfe0f0e14dd6318f#file-upgradeable-sol\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221488973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221499635",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221499635",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221499635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTQ5OTYzNQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T07:54:23Z",
    "updated_at": "2016-05-25T07:54:23Z",
    "author_association": "MEMBER",
    "body": "Especially with contract upgrades in mind, wouldn't it be better to copy the storage layout and \"disable\" unused state variables by e.g. prefixing them? Otherwise I don't see how you would practically verify that the storage layout is consistent between upgrades.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221499635/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221563568",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221563568",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221563568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTU2MzU2OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T12:42:57Z",
    "updated_at": "2016-05-25T12:42:57Z",
    "author_association": "MEMBER",
    "body": "Is there documentation on how storage layout is determined?\n\nOn Wed, May 25, 2016, 1:54 AM chriseth notifications@github.com wrote:\n\n> Especially with contract upgrades in mind, wouldn't it be better to copy\n> the storage layout and \"disable\" unused state variables by e.g. prefixing\n> them? Otherwise I don't see how you would practically verify that the\n> storage layout is consistent between upgrades.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/ethereum/solidity/issues/597#issuecomment-221499635\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221563568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221587759",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221587759",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221587759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTU4Nzc1OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T14:09:34Z",
    "updated_at": "2016-05-25T14:09:34Z",
    "author_association": "MEMBER",
    "body": "http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221587759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221609070",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221609070",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221609070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTYwOTA3MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T15:16:13Z",
    "updated_at": "2016-05-25T15:16:13Z",
    "author_association": "MEMBER",
    "body": "Ok, so after reading up on storage layouts...\n\n```\ncontract MyContractV1 {\n    uint a;\n    bytse32 b;\n}\n```\n\nIn this example, `a` should be stored in slot 0 and `b` in slot 1.  \n\nNow, consider I _upgrade_ it to the following.\n\n```\ncontract MyContractV2 {\n    int c;\n    uint a;\n    bytes32 b;\n}\n```\n\nThis would end up with `c` stored in slot 0, `a` in 1, and `b` in 2 which would break things.\n\nSo, instead, I propose being able to do the following.\n\n```\ncontract MyContractV2 {\n    int c;\n    uint a @ 0x0;\n    bytes32 b @ 0x1;\n}\n```\n\nThe solidity compiler would see that `a` and `b` are designated for storage slots 0 and 1 respectively, and would then place `c` at the next available location, slot 2.\n\nDoes that make sense?  Is this possible?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221609070/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221611370",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221611370",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221611370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTYxMTM3MA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T15:23:52Z",
    "updated_at": "2016-05-25T15:23:52Z",
    "author_association": "MEMBER",
    "body": "I was looking for a complementary/similar feature: the ability to disable packing. (i.e. currently if two storage parameters are each < 256 bits and together they fit into one slot, they are packed together.)\n\nUltimately the compiler could optimise the packing based on the frequency of changes to one ore more variables within.\n\nWith your suggestion this is a given, each marked variable gets its own slot.  I would use a different markup though:\n\n```\nstorage(0) int a;\nstorage(1) bytes32 b;\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221611370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221613047",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221613047",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221613047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTYxMzA0Nw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T15:29:19Z",
    "updated_at": "2016-05-25T15:29:19Z",
    "author_association": "MEMBER",
    "body": ">  I would use a different markup though\n\nthe `@` was just the first thing that came to mind.  I like `storage(...)` better.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221613047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221624605",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221624605",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221624605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTYyNDYwNQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T16:06:33Z",
    "updated_at": "2016-05-25T16:06:33Z",
    "author_association": "MEMBER",
    "body": "I think the tradeoff between introducing errors and decreasing readability is much better when just adding `int c` at the end. If you want, you can also use inheritance (let the upgraded contract inherit from the old contract).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221624605/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221695748",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-221695748",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 221695748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTY5NTc0OA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-25T20:23:36Z",
    "updated_at": "2016-05-25T20:23:36Z",
    "author_association": "MEMBER",
    "body": "^ 👍  for the inheritance structure...it overall is cheaper and more cost effective to do it that way. I envision a lot of modularity around dapps in the future in regards to storage to better handle updates and save gas. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/221695748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/392107980",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-392107980",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 392107980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjEwNzk4MA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-25T16:15:33Z",
    "updated_at": "2018-05-25T16:15:33Z",
    "author_association": "MEMBER",
    "body": "This came up again as a discussion with @federicobond and I think a good middle ground could be to have an annotation (as proposed in https://github.com/ethereum/solidity/issues/597#issuecomment-221611370), but instead of marking a storage slot, it would rather have a string literal as a key, which is hashed to produce a 256-bit key for storage.\r\n\r\nThis would be more expensive (due to the fact of using 32-byte long constants and one couldn't combine multiple variables into a single slot), but might be justified for some.\r\n\r\nWhen this annotation is missing, it would default to the current behaviour.\r\n\r\nFor syntax I propose:\r\n```\r\nint256 a storage_key(\"this_is_my_variable\");\r\nbytes32 b storage_key(\"and_this_too\");\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/392107980/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/392109146",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-392109146",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 392109146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjEwOTE0Ng==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-25T16:19:52Z",
    "updated_at": "2018-05-25T16:19:52Z",
    "author_association": "MEMBER",
    "body": "@axic \r\n\r\n1. I like the hashed key approach\r\n2. reasoning for not allowing specific slot to be specified?  foot gun?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/392109146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/392598341",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-392598341",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 392598341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjU5ODM0MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-28T20:25:43Z",
    "updated_at": "2018-05-28T20:25:43Z",
    "author_association": "MEMBER",
    "body": "I really don't think solidity should have such low-level impact on the storage location. If you want to dislocate storage variables, why not use structs or a mapping to structs?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/392598341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/406582568",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-406582568",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 406582568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjU4MjU2OA==",
    "user": {
      "login": "gnidan",
      "id": 151065,
      "node_id": "MDQ6VXNlcjE1MTA2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnidan",
      "html_url": "https://github.com/gnidan",
      "followers_url": "https://api.github.com/users/gnidan/followers",
      "following_url": "https://api.github.com/users/gnidan/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnidan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnidan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnidan/subscriptions",
      "organizations_url": "https://api.github.com/users/gnidan/orgs",
      "repos_url": "https://api.github.com/users/gnidan/repos",
      "events_url": "https://api.github.com/users/gnidan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnidan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T12:11:59Z",
    "updated_at": "2018-07-20T12:11:59Z",
    "author_association": "MEMBER",
    "body": "One more possible other solution:\r\n\r\n```solidity\r\ncontract MyContract {\r\n  storage(\"some-collection\") {\r\n    uint foo;\r\n    uint bar;\r\n  }\r\n\r\n  storage(\"other-collection\") {\r\n    mapping (uint => bool) qux;\r\n    MyStruct baz;\r\n  }\r\n}\r\n```\r\n\r\nThe advantage of this is that contracts could define blocks of variables that are colocated in storage, but providing gaps, to extend structs later, etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/406582568/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/418798622",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-418798622",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 418798622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODc5ODYyMg==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T16:40:51Z",
    "updated_at": "2018-09-05T16:42:23Z",
    "author_association": "NONE",
    "body": "Just throwing this as an idea: given that this need arises from avoiding clashes when working with upgradeability, wouldn't it make sense to just avoid clashing by storing all variables in a hashed location, similar to how a mapping works? We could either store all variables from the same contract/struct together (the hash being a contract identifier, and variables are stored at offsets of that hash), or all individual variables in sparse hashed locations.\r\n\r\nThe issue remains on how to generate an identifier for a contact, to ensure there are no clashes between different contracts, but that identifier is more robust than a simple name. Maybe requiring a special constant with a random value for every contract that will use this approach, similar to old [Java's `serialVersionUID`](https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/418798622/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/547534830",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-547534830",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 547534830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzUzNDgzMA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-29T17:18:12Z",
    "updated_at": "2019-10-29T17:18:12Z",
    "author_association": "MEMBER",
    "body": "There was also a lengthy related discussion in #4017.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/547534830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574104165",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-574104165",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 574104165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDEwNDE2NQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T10:19:37Z",
    "updated_at": "2020-01-14T10:53:48Z",
    "author_association": "MEMBER",
    "body": "This came up again with #7891 .\r\n\r\nIf we want to expose really general control we need three components:\r\n - storage slot\r\n - offset in the storage slot\r\n - number of bytes reserved\r\n\r\nNatural restrictions would apply (violating would result in compile time errors):\r\n- ``offset + sizeOfType <= 32``\r\n- ``numberOfBytesReserved >= sizeOfType``\r\n- we could in a first version have ``(offset + numberOfBytesReserved) % 32 == 0`` and only later decide whether to lift that\r\n - no overlap with a previously declared variable is possible\r\n\r\nI would suggest to make all such specifiers optional. Variables without specifiers *before* any variables with specifiers will be assigned slots as before.\r\nFor variables without specifiers *after* any variables with specifiers there are two options:\r\n - continue to put them after the last variable without specifier unless this is in conflict with another variable - if that's the case, move past it (I dislike this)\r\n - continue assigning storage locations after the last occupied storage location so far (including variables with specifiers) (I prefer this)\r\n\r\n\r\nFor the purpose of inheritance: locations are assigned just as if it was one flat contract containing all variables in the order of C3 linearization.\r\n\r\nExample (we can always decide on a different syntax):\r\n```\r\ncontract A {\r\n  uint256 a; // will occuply full slot 0\r\n  // slots 1 and 2 will remain unused\r\n  storage{slot: 3, offset: 0, reserved: 32} bool b; // will occupy full slot 3\r\n\r\n  storage{slot: 4, offset: 1} bool c; // will occupy the second byte in slot 4\r\n  storage{slot: 4, offset: 0} bool d; // will occupy the first byte in slot 4\r\n  storage{slot: 4, offset: 16} uint128 d; // will occupy the second half of slot 4\r\n\r\n  uint128 e; // will occupy the first half of slot 5\r\n\r\n  storage{slot: 5, offset: 16} uint128 f; // will occupy the second half of slot 5\r\n\r\n  storage{slot: 6, offset: 0} bool g; // will occupy first byte in slot 6\r\n  bool h; // will occupy second byte in slot 6\r\n  storage{slot: 6, offset: 2, reserved: 2} bool i; // will occupy third byte in slot 6\r\n  bool j; // will occupy fifth byte in slot 6\r\n  storage{slot: 6, offset: 16, reserved: 48} uint128 k; // will occupy second half of slot 6\r\n  // slot 7 will remain unused\r\n  uint128 l; // will use the first half of slot 8\r\n}\r\n```\r\n\r\n\r\nAn alternative notation-wise would be to merge slot and offset into a single byte offset that is then split into ``slot = byteOffset/32`` and ``offset = byteOffset%32`` (to which the same restrictions would apply). A copy of the example above using this notation:\r\n\r\n```\r\ncontract A {\r\n  uint256 a; // will occuply full slot 0\r\n  // slots 1 and 2 will remain unused\r\n  storage{offset: 96, reserved: 32} bool b; // will occupy full slot 3\r\n\r\n  storage{offset: 129} bool c; // will occupy the second byte in slot 4\r\n  storage{offset: 128} bool d; // will occupy the first byte in slot 4\r\n  storage{offset: 144} uint128 d; // will occupy the second half of slot 4\r\n\r\n  uint128 e; // will occupy the first half of slot 5\r\n\r\n  storage{offset: 160} uint128 f; // will occupy the second half of slot 5\r\n\r\n  storage{offset: 192} bool g; // will occupy first byte in slot 6\r\n  bool h; // will occupy second byte in slot 6\r\n  storage{offset: 194, reserved: 2} bool i; // will occupy third byte in slot 6\r\n  bool j; // will occupy fifth byte in slot 6\r\n  storage{offset: 208, reserved: 48} uint128 k; // will occupy second half of slot 6\r\n  // slot 7 will remain unused\r\n  uint128 l; // will use the first half of slot 8\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574104165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574108837",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-574108837",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 574108837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDEwODgzNw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T10:30:00Z",
    "updated_at": "2020-01-14T10:30:51Z",
    "author_association": "MEMBER",
    "body": "Another alternative would be to require specifying the location for *all* variables, if the location is specified for *any* variable.\r\n\r\nAlso we could at a later point allow compile time evaluated expressions in the specifier, i.e.:\r\n```\r\nstorage{slot: keccak256(\"some_key\")} uint256 some_key;\r\n```\r\nAlthough we'd need to consider that one could construct those to specifically collide with some mapping key, so this would be dangerous.\r\n\r\nAlthough that's also true for choosing some specific value for ``slot: `` that happens to be the location of some mapping element.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574108837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574194676",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-574194676",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 574194676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDE5NDY3Ng==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T14:17:50Z",
    "updated_at": "2020-01-14T14:17:50Z",
    "author_association": "MEMBER",
    "body": "Maybe we should gather some data about how this feature would be used. One use is avoiding clashes during upgrades, another is having more efficient use of storage by combining small variables in a certain way. I think just providing full flexibility all the time might not be the way to go as it is too easy to get wrong. So it could already be enough to only allow hashed locations and another way to specify which variables to combine (without specifying the offset exactly) or when to insert \"start a new slot here\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574194676/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574211168",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-574211168",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 574211168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDIxMTE2OA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T14:53:47Z",
    "updated_at": "2020-01-14T14:54:21Z",
    "author_association": "MEMBER",
    "body": "What can \"go wrong\"? Or in particular, what can go wrong that we can't easily detect at compile time?\r\nI'd argue that it makes more sense to provide a general solution and, if deemed necessary, restrict it to simple cases (as in restrict to some particular kinds of values for ``slot``, etc. - e.g. restricting to only supporting \"start a new slot here\" would be to require ``slot`` to be the \"current slot\" plus one and require ``offset`` to be zero).\r\n\r\nThat way we can always extend the very same solution to support more cases, instead of needing breaking changes and new language features...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574211168/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/578134850",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-578134850",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 578134850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODEzNDg1MA==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-24T13:43:32Z",
    "updated_at": "2020-01-24T13:43:32Z",
    "author_association": "NONE",
    "body": "> One use is avoiding clashes during upgrades\r\n\r\nFor the sake of upgrades, it'd seem that the only requirement is to be able to assign an immutable `id` to a variable, which should be deterministically mapped to a slot (like the `storage{slot: keccak256(\"some_key\")}` proposed above). It's not really important _where_ in the storage the variable is kept.\r\n\r\nAs for [EIP2330](https://github.com/ethereum/EIPs/pull/2330) linked above, the requirements are pretty much the same. As long as there is a deterministic process for calculating the storage slot, the actual slot can then be just exposed in the ABI for any consumers.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/578134850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621342019",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-621342019",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 621342019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTM0MjAxOQ==",
    "user": {
      "login": "KaiRo-at",
      "id": 824140,
      "node_id": "MDQ6VXNlcjgyNDE0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KaiRo-at",
      "html_url": "https://github.com/KaiRo-at",
      "followers_url": "https://api.github.com/users/KaiRo-at/followers",
      "following_url": "https://api.github.com/users/KaiRo-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/KaiRo-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KaiRo-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KaiRo-at/subscriptions",
      "organizations_url": "https://api.github.com/users/KaiRo-at/orgs",
      "repos_url": "https://api.github.com/users/KaiRo-at/repos",
      "events_url": "https://api.github.com/users/KaiRo-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KaiRo-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-29T17:05:59Z",
    "updated_at": "2020-04-29T17:07:17Z",
    "author_association": "NONE",
    "body": "To implement contract following [EIP 1822](https://eips.ethereum.org/EIPS/eip-1822) and/or [EIP 1967](https://eips.ethereum.org/EIPS/eip-1967), the capability to define a specific slot would be required. Right now, this needs to be done via inline assembly...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621342019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/663269134",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-663269134",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 663269134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzI2OTEzNA==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-23T22:48:59Z",
    "updated_at": "2020-07-24T00:42:59Z",
    "author_association": "NONE",
    "body": "After reading this issue, and thinking about the issue, this is my proposed solution.\r\n\r\n1. add the keyword `deterministic`\r\n2. it can only be used with declared storage variables\r\n3. at compile time the slot used for `uint256 deterministic myNumber;` is `keccak256('myNumber')`\r\n4. basically, similar to `immutable` which doesn't use storage, `deterministic` variables will be removed when calculating the sequential slots of each variable, the keccak256 is calculated at compile time and used for all instances.\r\n5. upgradable contracts can now rely on \"this variable name will always be a specific storage slot\"\r\n6. If it sees the same `variable name` in multiple inherited contracts with mixed `deterministic` states it should throw an error at compile time saying \"can't use deterministically declared variable non-deterministically\"\r\n\r\nIt seems simple enough to remove complexity but accomplish some of the major goals of this thread.\r\n\r\nHowever, it seems like this thread has grown with a list of reasons and use cases which can only be satisfied by increasingly complex low level access which is difficult to implement without adding a foot cannon.\r\n\r\nEdit: Thinking about it more, it might be sufficient to commit only to the variable name, as someone using this feature would probably make their variable names more descriptive `address deterministic openZepplinProxyImplementation;` which should probably throw an error if an inherited contract tries to use `uint256 deterministic openZepplinProxyImplementation;` which could be another foot cannon.\r\n\r\nEdit2: I have a low-deploy-gas-cost proxy contract that I optimized the bytecode for, and it would be great to use single byte storage slots (ie. 0xff) without needing to create 255 dummies... I just tried upping my storage slot for the proxy to PUSH32 with a random hash instead of the 0 I'm using right now, it bumped my deploy cost from 80k to 100k (since I have 1 PUSH in the deploy code and 2 PUSHes of it in the contract code.)... so I would definitely also enjoy the ability to specify an arbitrary value for the slot as well... that said, my use case is extremely niche so I understand not accommodating it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/663269134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/665927241",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-665927241",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 665927241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTkyNzI0MQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-29T21:05:11Z",
    "updated_at": "2020-07-29T21:05:11Z",
    "author_association": "MEMBER",
    "body": "Copying the suggestion from @dominicletz from #7593:\r\n\r\n> A new keyword `fixed(@N)` is proposed that can be used to define fixed slot position in interfaces.\r\n> \r\n> ```\r\n> interface ContractAddressMap {\r\n>    public fixed(@5) mapping(bytes32=>address) addr;\r\n> }\r\n> ```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/665927241/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/877712913",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-877712913",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 877712913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzcxMjkxMw==",
    "user": {
      "login": "SchoofsKelvin",
      "id": 14597409,
      "node_id": "MDQ6VXNlcjE0NTk3NDA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/14597409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SchoofsKelvin",
      "html_url": "https://github.com/SchoofsKelvin",
      "followers_url": "https://api.github.com/users/SchoofsKelvin/followers",
      "following_url": "https://api.github.com/users/SchoofsKelvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/SchoofsKelvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SchoofsKelvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SchoofsKelvin/subscriptions",
      "organizations_url": "https://api.github.com/users/SchoofsKelvin/orgs",
      "repos_url": "https://api.github.com/users/SchoofsKelvin/repos",
      "events_url": "https://api.github.com/users/SchoofsKelvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SchoofsKelvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-10T22:38:29Z",
    "updated_at": "2021-07-10T22:39:49Z",
    "author_association": "NONE",
    "body": "Here's my spin on specifying storage slots, based on existing EIPs that could benefit from this:\r\n\r\n- Allow specifying the location as a (compile-time calculable) constant `uint256`/`bytes32` (see examples)\r\n- Syntax-wise, appending `at (<slot>)` (or `at(<slot>, <offset>)`) seems more intuitive and readable than using e.g. `@`\r\n  - Offset would be optional and default to 0. Optionally, this might also allow the syntactic sugar `at <slot>`\r\n  - The exact syntax doesn't matter too much and the previously suggested `storage_key(\"key\")` works too\r\n  - The `fixed(@N)` syntax from #7593 could work too, if `N` can be more than just an integer\r\n    - The `EXTSLOAD` opcode from their EIP on the EVM level doesn't care how Solidity compiles their `fixed(@N)` syntax\r\n    - Their Solidity suggestion would actually benefit from allowing keys and `byte32`s over just integers\r\n  - The only change I'd add is that instead of accepting (only) strings that'll be hashed, it also accepts `uint256`/`bytes32`s. This is to support e.g. [EIP-1967](https://eips.ethereum.org/EIPS/eip-1967) where we substract 1 after hashing the key\r\n  - In my examples, I'll only be using `uint256`/`bytes32`s, but again, accepting to-be-hashed strings on top of that seems fine\r\n- Exclude \"location-specified\" storage fields from the sequential storage slot assignment logic (see `someVarN` in 1st example)\r\n  - Basically, the storage slots for non-specified storage fields should be unaffected by the presence of specified storage fields\r\n  - This also means that existing contracts should compile to the exact same bytecode as before this feature gets enabled\r\n- We can make use of the fact that locations are known at compile time to e.g. warn for using the same slots, overlap, ...\r\n- Perhaps we could even allow aliasing storage fields, e.g. `referencing(<state variable>)` (see `NewFacet.sol` in 2nd example)\r\n\r\nThis is partly with my (although limited) experience working with Solidity and proxy contracts, the feedback in this issue and the mentioned EIPs. It's both an attempt at covering as much of the use cases and requirements, while also seeing if there's any (planned) progress on this issue. _I've noticed now that I'm rereading it that this is quite a big comment, hopefully that isn't too much of an issue._\r\n\r\n# Example 1 (simple proxy)\r\n\r\nExample showing how it behaves on its own and how it interacts with non-specified slots:\r\n```solidity\r\ncontract SomeProxy {\r\n    uint256 private someVar1; // storage slot 0x0 (in this case starting at 0x0 because there are no inherited fields)\r\n    uint256 private someVar2 = 5; // storage slot 0x1\r\n\r\n    uint256 public something1 at(0xAA112233) = 99; // storage slot 0xAA112233\r\n\r\n    // This would produce an error/warning because it uses the same storage slot as `something1`\r\n    uint256 public something2 at(0xAA112233) = 123; // storage slot 0xAA112233\r\n\r\n    uint256 public someVar3; // storage slot 0x3 (right behind `someVar2`, thus ignoring `something1` and `something2`)\r\n\r\n    bytes32 constant IMPLEMENTATION_SLOT = bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1);\r\n    // ^ 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc \r\n\r\n    // Not specifying the offset, so can use the syntactic sugar version without the brackets\r\n    address private _implementation at IMPLEMENTATION_SLOT; // storage slot 0x360894...\r\n\r\n    // ....\r\n}\r\n```\r\n_the `_implementation` part is based on the storage slots specified in [EIP-1967](https://eips.ethereum.org/EIPS/eip-1967)_\r\n\r\n# Example 2 (diamond storage)\r\n\r\nThis could also work in interfaces, which helps a lot with diamond storage ([EIP-2535](https://eips.ethereum.org/EIPS/eip-2535)), related to #9551. In this example:\r\n- `OldFacet.sol` specifies a standalone diamond facet with a storage struct at `keccak256('diamond.storage.OldFacet')`\r\n  - It doesn't use `DiamondStorages` from `Storage.sol` for whatever reason. Might be an extern facet, or developed earlier\r\n- `Storage.sol` specifies an interface `DiamondStorages` with all known diamond storages, at their proper storage slots\r\n- `NewFacet.sol` specifies a new diamond facet that also makes use of OldFacet's storage by extending `DiamondStorages`\r\n  - The contract inherits the field with the specified storage slots, without having to redeclare them\r\n  - While the `DiamondStorages` needs to define the storages your new facet uses, it could instead define all storages part of the diamond. In that case, should \"overlapping storage slots\" warnings be enabled, your diamond gets checked for this issue\r\n\r\n```solidity\r\n// OldFacet.sol\r\nbytes32 constant OLD_FACET_STORAGE_SLOT = keccak256(\"diamond.storage.OldFacet\");\r\n\r\nstruct OldFacetStorage {\r\n    // ...\r\n}\r\n\r\ncontract OldFacet {\r\n    // Directly registers the storage field/slot here, e.g. an externally developed or pre-Storage.sol contract\r\n    OldFacetStorage storage at OLD_FACET_STORAGE_SLOT;\r\n    // ....\r\n}\r\n\r\n\r\n// Storage.sol\r\nimport \"./OldFacet.sol\";\r\nimport \"./NewFacet.sol\";\r\n\r\ninterface DiamondStorages {\r\n    OldFacetStorage oldFacetStorage at OLD_FACET_STORAGE_SLOT;\r\n    NewFacetStorage newFacetStorage at NEW_FACET_STORAGE_SLOT;\r\n    // ....\r\n}\r\n\r\n\r\n// NewFacet.sol\r\nimport \"./DiamondStorages\";\r\n\r\nbytes32 constant NEW_FACET_STORAGE_SLOT = keccak256(\"diamond.storage.NewFacet\");\r\n\r\nstruct NewFacetStorage {\r\n    // ...\r\n}\r\n\r\n// Makes use of Storage.sol instead of specifying the storage field/slot for every (known/used) faucet's storage\r\ncontract NewFacet is DiamondStorages {\r\n    // Optional \"aliasing storage fields\" which can be handy for shortening long names to shorter ones\r\n    NewFacetStorage private s referencing(newFacetStorage);\r\n\r\n    function banana() public returns (uint256) {\r\n        // Using OldFacet's storage as declared in `DiamondStorages` in `Storage.sol`\r\n        // Using NewFacet's storage as declared by `s`, using the same slot as `newFacetStorage` in `DiamondStorages`\r\n        return oldFacetStorage.apple + s.durian;\r\n    }\r\n}\r\n```\r\n\r\nSince all the used/known diamond storages are all defined and known at compile-time, the compiler could (as part of later feature requests) check whether any storage slots overlap each other.\r\n\r\n# Example for #7593\r\n\r\nExample of how this would benefit #7593 should non-integer values for `N` be allowed:\r\n\r\n```solidity\r\ninterface ContractAddressMap {\r\n    public mapping(bytes32=>address) addr at keccak256('ENS.addr');\r\n    // or different versions of their syntax that allows non-integer `N` values:\r\n    public fixed(@keccak256('ENS.addr')) mapping(bytes32=>address) addr; // keep `@` to differentiate from e.g. `map_v1`\r\n    public fixed(keccak256('ENS.addr')) mapping(bytes32=>address) addr; // get rid of `@`, force 1st argument to be location\r\n    public fixed('ENS.addr') mapping(bytes32=>address) addr; // assuming using a direct string implies `keccak256`\r\n}\r\n\r\ncontract Resolver is ContractAddressMap {\r\n    // ...\r\n}\r\n```\r\n\r\nMind that this also more or less solves their issue regarding conflicts, as compared to using `fixed(@5)`, it's a lot harder to have clashes when using e.g. `keccak256('ENS.addr')`. Suggesting these kind of modifications to the EIP-2330 draft seems doable and beneficial for everyone.\r\n\r\n# Expected improvement from #3157\r\n\r\nShould #3157 be implemented, this can help a lot with readability with complex keys later on, e.g. for our first example:\r\n```solidity\r\n\r\nfunction proxy_slot(string key) public pure returns(bytes32) {\r\n    return bytes32(uint256(keccak256(abi.encodePacked('eip1967.proxy.'), key)) - 1);\r\n}\r\n\r\ncontract SomeProxy {\r\n    // Points to the slot at `bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)`\r\n    // aka `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\r\n    address private _implementation at proxy_slot(\"implementation\");\r\n}\r\n```\r\n\r\n# Deterministic storage slots\r\n\r\nThis feature request is purely to use statically assigned storage slots, as specified by those EIPs or used in the diamond (storage) pattern. The whole \"deterministic storage slot\" idea is also interesting, but more of a separate feature from (or on top of) specifying specific storage locations. It's worth mentioning that the latter could still be relatively easily done should (the static part of) this feature be implemented:\r\n\r\n```solidity\r\ncontract DeterministicFields {\r\n    address private _owner at keccak256('_owner');\r\n\r\n    // or again, if we have #3157 and support pure functions in the contract itself during compile-time:\r\n    function storage_slot(string key) internal pure returns(bytes32) {\r\n        return bytes32(uint256(keccak256(abi.encodePacked('DeterministicFields.'), key)) - 1);\r\n    }\r\n    address private _admin at storage_slot('_admin');\r\n    // ^ Would use storage slot `keccak256('DeterministicFields._admin')`, making it less likely to clash\r\n    // with storage slots from other contracts using an `_admin` field (e.g. in base contracts or other facets in a diamond)\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/877712913/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/932480697",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-932480697",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 932480697,
    "node_id": "IC_kwDOAm_5kc43lIa5",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-01T19:02:43Z",
    "updated_at": "2021-10-01T19:05:25Z",
    "author_association": "MEMBER",
    "body": "In https://github.com/ethereum/solidity/issues/8353#issuecomment-932474378 I have described another solution, similar to what @gnidan and @spalladino suggested above (see https://github.com/ethereum/solidity/issues/597#issuecomment-406582568, https://github.com/ethereum/solidity/issues/597#issuecomment-418798622).\r\n\r\nIn short, you can already use a mapping of structs to give your contract a set of variables at a storage location deterministically computed from some key:\r\n```solidity\r\ncontract MyContract {\r\n    struct State {\r\n        uint variable1;\r\n        address variable2;\r\n    }\r\n\r\n    mapping (string => State) states;\r\n\r\n    function f() public returns (uint) {\r\n        return states[\"MyContract\"].variable1;\r\n    }\r\n}\r\n```\r\n\r\nWe could just add a bit of syntax sugar on top of that and have a simple solution that might be good enough in most cases. I.e. this would generate bytecode identical to the above:\r\n```solidity\r\ncontract mapping MyContract {\r\n    uint variable1;\r\n    address variable2;\r\n\r\n    function f() public returns (uint) {\r\n        return variable1;\r\n    }\r\n}\r\n```\r\nSince it would be a new contract variety, it would be fully backwards-compatible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/932480697/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1427015783",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-1427015783",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 1427015783,
    "node_id": "IC_kwDOAm_5kc5VDohn",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-02-12T12:04:12Z",
    "updated_at": "2023-02-12T12:04:12Z",
    "author_association": "NONE",
    "body": "This issue has been marked as stale due to inactivity for the last 90 days.\nIt will be automatically closed in 7 days.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1427015783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1428644895",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-1428644895",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 1428644895,
    "node_id": "IC_kwDOAm_5kc5VJ2Qf",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-13T20:35:29Z",
    "updated_at": "2023-02-13T20:35:29Z",
    "author_association": "MEMBER",
    "body": "We have multiple issues along this (see e.g. the list in https://github.com/ethereum/solidity/issues/13466#issuecomment-1419319182) - I'm marking this one here unstale and as ``must have eventually``, since it's the most generic and most likely version to be implemented eventually.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1428644895/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1537533170",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-1537533170",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 1537533170,
    "node_id": "IC_kwDOAm_5kc5bpOTy",
    "user": {
      "login": "yoavw",
      "id": 708945,
      "node_id": "MDQ6VXNlcjcwODk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/708945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yoavw",
      "html_url": "https://github.com/yoavw",
      "followers_url": "https://api.github.com/users/yoavw/followers",
      "following_url": "https://api.github.com/users/yoavw/following{/other_user}",
      "gists_url": "https://api.github.com/users/yoavw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yoavw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yoavw/subscriptions",
      "organizations_url": "https://api.github.com/users/yoavw/orgs",
      "repos_url": "https://api.github.com/users/yoavw/repos",
      "events_url": "https://api.github.com/users/yoavw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yoavw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-07T20:24:40Z",
    "updated_at": "2023-05-07T22:30:53Z",
    "author_association": "MEMBER",
    "body": "This issue has become more critical with the growing popularity of account abstraction, so I would like to resume this discussion.\r\n\r\nAccount abstraction adds a new challenge that, to the best of my knowledge, no other contract has faced before.\r\n\r\nThe user owns the account, typically a proxy, and may occasionally wish to switch to a different implementation as the needs change.  E.g. switch between Safe and Argent.  Unlike other proxy situations where new implementations use a compatible storage layout, or at least the new implementation is aware of the old one and can perform a conversion, now we're dealing with implementations that are not aware of each other.\r\n\r\nCurrently, most account implementations start at storage slot zero.  When switching implementations, the user may inadvertently end up with things like shadow signers, e.g. [this Safe](https://app.safe.global/settings/setup?safe=gor:0xD23e1E5F40Cae07E56E30Cdc710d9b107abD60DB) which seems to have one valid signer, but in fact has 20 invisible signers who can actually [transact](https://goerli.etherscan.io/tx/0xb09dcce42c3a6c419eda1a2f9715b87c6f5dd4b73c5a643fe13809509cf91dd5#eventlog) in the Safe.\r\n\r\nThere is no safe way for users to migrate between account implementations, unless each account uses a different storage base.  I would like to propose a pragma for doing so:\r\n\r\n`pragma storage_base <value>;`\r\n\r\nWhen present, the compiler calculates keccak(value) and uses it as a hardcoded offset for storage access.  A typical value would be <proj_name>.<layout_version>.\r\n\r\nThe pragma only sets the offset of next items, and following items are incremented by one, as usual.  Therefore if the pragma appears multiple times, each pragma forms a \"logical group\" of member fields.\r\n\r\nA buggy/malicious account would still be able to bypass it and access other storage offsets, but it'll require asm code and therefore attract auditors' attention.  Pure solidity code will only access storage determined by the `storage_base` value.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1537533170/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1542583267",
    "html_url": "https://github.com/ethereum/solidity/issues/597#issuecomment-1542583267",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/597",
    "id": 1542583267,
    "node_id": "IC_kwDOAm_5kc5b8fPj",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-10T17:45:43Z",
    "updated_at": "2023-05-10T17:45:43Z",
    "author_association": "MEMBER",
    "body": "@yoavw Typically what people do to get this is to add a state variable `uint[1000] junk`.\r\n\r\n```solidity\r\n// Inherit this for leaving out the first 100 slots\r\nabstract contract storageBase {\r\n    uint[100] junk;\r\n}\r\n```\r\n\r\nWould that be a reasonable way to achieve the same?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1542583267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
