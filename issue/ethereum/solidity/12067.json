{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12067/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12067/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12067/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12067",
  "id": 1012520028,
  "node_id": "I_kwDOAm_5kc48WdRc",
  "number": 12067,
  "title": "Allow `verbatim` in Solidity `assembly` blocks",
  "user": {
    "login": "dessaya",
    "id": 7060033,
    "node_id": "MDQ6VXNlcjcwNjAwMzM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7060033?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dessaya",
    "html_url": "https://github.com/dessaya",
    "followers_url": "https://api.github.com/users/dessaya/followers",
    "following_url": "https://api.github.com/users/dessaya/following{/other_user}",
    "gists_url": "https://api.github.com/users/dessaya/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dessaya/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dessaya/subscriptions",
    "organizations_url": "https://api.github.com/users/dessaya/orgs",
    "repos_url": "https://api.github.com/users/dessaya/repos",
    "events_url": "https://api.github.com/users/dessaya/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dessaya/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "314aff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4438490842,
      "node_id": "LA_kwDOAm_5kc8AAAABCI3-2g",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/should%20have",
      "name": "should have",
      "color": "ffbe6c",
      "default": false,
      "description": "We like the idea but itâ€™s not important enough to be a part of the roadmap."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2021-09-30T19:02:38Z",
  "updated_at": "2022-10-06T16:40:02Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "There is currently support for `verbatim`, allowing to instert arbitrary bytecode, but only when compiling in strict assembly mode. But the `verbatim` group of functions ios not available inside `assembly` blocks in Solidity code. Example:\r\n\r\n```\r\nfunction f() {\r\n\tassembly {\r\n\t\tverbatim_0i_0o(hex\"c0\")\r\n\t}\r\n}\r\n```\r\n\r\nWhen compiling with `solc`:\r\n\r\n```\r\nError: Function \"verbatim_0i_0o\" not found.\r\n```\r\n\r\nWhat is the motivation for disabling verbatim in Solidity? I understand that it must be used with care and only for very specific reasons. My use case is that I am targetting a forked version of the EVM interpreter with new opcodes. I'm currently unable to use `solc` to compile contracts targetting this fork.\r\n\r\nThanks!",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12067/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12067/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/933311063",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-933311063",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 933311063,
    "node_id": "IC_kwDOAm_5kc43oTJX",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-04T09:32:35Z",
    "updated_at": "2021-10-04T09:32:35Z",
    "author_association": "MEMBER",
    "body": "The reason is that we have to think about which optimizer steps to disable, and probably we have to disable almost all of them. Can you tell us more about the new opcodes in the fork?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/933311063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941038134",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-941038134",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 941038134,
    "node_id": "IC_kwDOAm_5kc44Fxo2",
    "user": {
      "login": "dessaya",
      "id": 7060033,
      "node_id": "MDQ6VXNlcjcwNjAwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7060033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dessaya",
      "html_url": "https://github.com/dessaya",
      "followers_url": "https://api.github.com/users/dessaya/followers",
      "following_url": "https://api.github.com/users/dessaya/following{/other_user}",
      "gists_url": "https://api.github.com/users/dessaya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dessaya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dessaya/subscriptions",
      "organizations_url": "https://api.github.com/users/dessaya/orgs",
      "repos_url": "https://api.github.com/users/dessaya/repos",
      "events_url": "https://api.github.com/users/dessaya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dessaya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T13:57:03Z",
    "updated_at": "2021-10-12T13:57:03Z",
    "author_association": "NONE",
    "body": "For now it's a proof of concept, and it's not even clear that this approach is the correct one.\r\n\r\nWe want to add support for Solidity as a language for an experimental language-agnostic smart contracts platform. We don't need or want to emulate a whole Ethereum blockchain, since our smart contracts run in level 2; we only need to run the Solidity code and store the current state. What we need is some way to bridge the Solidity code with the underlying sandbox; and for that one idea is to add some custom opcodes, like some form of \"syscalls\", like \"obtain the chain ID\" or \"publish an event\". Again, maybe there is a better approach but for now we are experimenting with this.\r\n\r\nThanks again!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941038134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941058814",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-941058814",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 941058814,
    "node_id": "IC_kwDOAm_5kc44F2r-",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T14:20:24Z",
    "updated_at": "2021-10-12T14:20:24Z",
    "author_association": "MEMBER",
    "body": "Wouldn't it be better to do this on the yul level instead? Plese feel free to schedule a call to discuss in more detail!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941058814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941104203",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-941104203",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 941104203,
    "node_id": "IC_kwDOAm_5kc44GBxL",
    "user": {
      "login": "dessaya",
      "id": 7060033,
      "node_id": "MDQ6VXNlcjcwNjAwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7060033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dessaya",
      "html_url": "https://github.com/dessaya",
      "followers_url": "https://api.github.com/users/dessaya/followers",
      "following_url": "https://api.github.com/users/dessaya/following{/other_user}",
      "gists_url": "https://api.github.com/users/dessaya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dessaya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dessaya/subscriptions",
      "organizations_url": "https://api.github.com/users/dessaya/orgs",
      "repos_url": "https://api.github.com/users/dessaya/repos",
      "events_url": "https://api.github.com/users/dessaya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dessaya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T15:10:25Z",
    "updated_at": "2021-10-12T15:10:25Z",
    "author_association": "NONE",
    "body": "What do you mean exactly? I know that I can write a contract in yul, and I can inject arbitrary bytecode with `verbatim`. This is what we are doing right now; but it would be nice to be able to write Solidity, and have a few small Yul blocks with `assembly {...}` where needed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941104203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941147693",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-941147693",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 941147693,
    "node_id": "IC_kwDOAm_5kc44GMYt",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T15:58:42Z",
    "updated_at": "2021-10-12T15:59:17Z",
    "author_association": "MEMBER",
    "body": "@dessaya To summarize why we haven't done this so far, the Yul optimizer wasn't designed keeping `verbatim` in mind. This means that if the Yul optimizer is enabled, then `verbatim` has to be used with extreme caution. We assume that users of pure Yul already are in a position to make this judgement (we have added some example situations that would lead to undefined behaviour: https://docs.soliditylang.org/en/latest/yul.html#verbatim).\r\n\r\nWe can of course allow it in Solidity's inline assembly. The question is if the Yul optimizer should be completely disabled or partly; if partly, which ones? It would be useful if you can give a list of additional opcodes that you would like to add this way, to get an idea of how this would work for your case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941147693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941150458",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-941150458",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 941150458,
    "node_id": "IC_kwDOAm_5kc44GND6",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T16:01:40Z",
    "updated_at": "2021-10-12T16:01:40Z",
    "author_association": "MEMBER",
    "body": "What I meant is to compile solidity to yul using `solc --ir ` and then modify the resulting yul code where you can freely inject `verbatim`. It would be nice for us to know what exactly these syscalls are and how you want to link them to the solidity code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941150458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941185735",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-941185735",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 941185735,
    "node_id": "IC_kwDOAm_5kc44GVrH",
    "user": {
      "login": "dessaya",
      "id": 7060033,
      "node_id": "MDQ6VXNlcjcwNjAwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7060033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dessaya",
      "html_url": "https://github.com/dessaya",
      "followers_url": "https://api.github.com/users/dessaya/followers",
      "following_url": "https://api.github.com/users/dessaya/following{/other_user}",
      "gists_url": "https://api.github.com/users/dessaya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dessaya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dessaya/subscriptions",
      "organizations_url": "https://api.github.com/users/dessaya/orgs",
      "repos_url": "https://api.github.com/users/dessaya/repos",
      "events_url": "https://api.github.com/users/dessaya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dessaya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T16:43:58Z",
    "updated_at": "2021-10-12T16:43:58Z",
    "author_association": "NONE",
    "body": "We are still evaluating options, so we haven't settled on what the opcodes will look like exactly. But an example would be something very simple to retrieve a value from the context:\r\n\r\n```\r\nlet x := verbatim_0i_1o(hex\"c1\")\r\n```\r\n\r\nwhere the return value is provided by our sandbox; for example the (non-ethereum) address of the contract creator.\r\n\r\n@chriseth I was not aware that `solc --ir` actually produced Yul code. It looks like this could be useful for our use case. I'll explore this approach. I think we can close this issue for now. Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941185735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941196737",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-941196737",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 941196737,
    "node_id": "IC_kwDOAm_5kc44GYXB",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T16:58:10Z",
    "updated_at": "2021-10-12T16:58:10Z",
    "author_association": "MEMBER",
    "body": "Instead of special opcodes it is also possible to use special addresses to exchange data (i.e. precompiles or system contract on some chains). If you have complete control over your system, that may be a nicer way because all EVM compatible languages (Vyper, Fe, etc.) could be made to work with it without changes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941196737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1242303196",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-1242303196",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 1242303196,
    "node_id": "IC_kwDOAm_5kc5KDArc",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-09T18:01:12Z",
    "updated_at": "2022-09-09T18:01:12Z",
    "author_association": "MEMBER",
    "body": "As mentioned we wanted to have this enabled originally, but the main problem here is somehow signalling what commitments the `verbatim` code makes against various EVM properties (e.g. \"reads state\", \"modifies state\", \"terminates\", etc.)\r\n\r\nSince we have the `memory-safe` annotation, we could think about introducing more of such annotations (eventually somewhat resembling [`SemanticInformation`](https://github.com/ethereum/solidity/blob/develop/libevmasm/SemanticInformation.h)). In that case would could enabled it \"rather safely\".\r\n\r\nAdditionally we could think about introducing a \"clobbered variables\" list. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1242303196/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1249966504",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-1249966504",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 1249966504,
    "node_id": "IC_kwDOAm_5kc5KgPmo",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-17T01:08:21Z",
    "updated_at": "2022-09-17T01:08:21Z",
    "author_association": "NONE",
    "body": "looking forward to this! so why not just do analysis on the ops to ensure no stack manipulation deeper than the \"inputs\" in the verbatim name & ensures that only 1 element is added to the stack at the end? if you have that guarantee + memory safety, while you dont get \"full\" mutability of the execution context, you do get a decent ways safely\r\n\r\nif you want to enable this sort of check maybe something like: `assembly (\"memory-safe stack-safe\") { verbatim_1i_1o(<pop, push(1) ops>, a}`\r\n\r\nAnd if you don't have stack-safe all bets are off on optimizations? Here it would be trivial to look op by op and ensure its stack safe, and if you break the safety contract there is a compiler error. And you can also easily run an analysis to check that storage purity in solidity matches verbatim opcodes. I think at this low level its fine to force users to enumerate the safety they are guaranteeing the compiler, i.e. one could imagine:\r\n\r\n`assembly (\"memory-safe stack-safe jumpless storage-pure\")` etc. \r\n\r\nTo be clear I am not as knowledgeable on the compiler as y'all obviously, just my 2 cents\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1249966504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1252229846",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-1252229846",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 1252229846,
    "node_id": "IC_kwDOAm_5kc5Ko4LW",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-20T11:39:24Z",
    "updated_at": "2022-09-20T11:39:24Z",
    "author_association": "MEMBER",
    "body": ">  so why not just do analysis on the ops to ensure no stack manipulation deeper than the \"inputs\" in the verbatim name & ensures that only 1 element is added to the stack at the end?\r\n\r\nOne early goal for verbatim was to support opcodes that are not yet in the EVM. Other machines like OVM1, new proposed EIPs, other EVM like chains are example use cases. So we cannot really analyze the raw bytecode in general. \r\n\r\nUser annotation is a good idea. However, we have to check what optimizations we can enable with that. The Optimizer wasn't designed with Verbatim in mind, so we'll have to really look at what steps can be broken by `verbatim` even with the correct user-annotations.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1252229846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1270241865",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-1270241865",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 1270241865,
    "node_id": "IC_kwDOAm_5kc5LtlpJ",
    "user": {
      "login": "wschwab",
      "id": 31592931,
      "node_id": "MDQ6VXNlcjMxNTkyOTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/31592931?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wschwab",
      "html_url": "https://github.com/wschwab",
      "followers_url": "https://api.github.com/users/wschwab/followers",
      "following_url": "https://api.github.com/users/wschwab/following{/other_user}",
      "gists_url": "https://api.github.com/users/wschwab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wschwab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wschwab/subscriptions",
      "organizations_url": "https://api.github.com/users/wschwab/orgs",
      "repos_url": "https://api.github.com/users/wschwab/repos",
      "events_url": "https://api.github.com/users/wschwab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wschwab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T15:13:20Z",
    "updated_at": "2022-10-06T15:13:20Z",
    "author_association": "NONE",
    "body": "> It would be useful if you can give a list of additional opcodes that you would like to add this way\r\n\r\nI'm coming in late to this conversation, but am exploring the possibility of using `verbatim` for testing [EIP-3074](https://eips.ethereum.org/EIPS/eip-3074). I originally posted in the Solidity forum [here](https://forum.soliditylang.org/t/experimental-pragma-for-eip-3074/) about experimental 3074 support, and was directed here by @cameel , who thought this to be a better route than experimental provision due to the optimizer. I've responded there since I still think experimental provision is the better path, but wanted to pursue this here too.\r\n\r\nOptimization in our case isn't really a concern - this would be meant for prototyping and validation, and wouldn't be needed in the meanwhile for production-optimized code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1270241865/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1270388088",
    "html_url": "https://github.com/ethereum/solidity/issues/12067#issuecomment-1270388088",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12067",
    "id": 1270388088,
    "node_id": "IC_kwDOAm_5kc5LuJV4",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-06T16:40:02Z",
    "updated_at": "2022-10-06T16:40:02Z",
    "author_association": "NONE",
    "body": "> User annotation is a good idea. However, we have to check what optimizations we can enable with that. The Optimizer wasn't designed with Verbatim in mind, so we'll have to really look at what steps can be broken by `verbatim` even with the correct user-annotations.\r\n\r\n\r\nOne option is to just disallow the optimizer to be on if verbatim is used. Then slowly as the team analyzes what optimizations are possible for given annotations, they can be added. i.e.:\r\n```\r\nassembly (\"experimental-ops\") { verbatim_i0_o0(<AUTHCALL, EXPERIMENTALOP, etc>) }\r\n```\r\n\r\nwhen there are experimental opcodes, the user defines it as such. If that flag isn't present, stack analysis can be done. If it isnt present and the user uses an unknown opcode, the compiler would report something to the effect of: `Unknown opcode in verbatim \"0xB4\". If intentional, add the \"experimental-ops\" flag and turn off the optimizer to use this op`.\r\n\r\nFor clarity, when talking about optimizations here, I assume we mean at the contract level, *not* the verbatim bytecode level? In general, I don't want the optimizer touching my verbatim (see #12951) anyway. I view the user annotation as a contract between the user and the compiler - somethings are for the compiler, somethings are for me. What I mean is things like `memory-safe` - for the compiler, `stack-safe` - for me and the compiler (the compiler can check that it is truly stack safe), `storage-pure` - for me, the compiler can easily check if storage ops occur.\r\n\r\nWhen thinking about the evm, and what optimizations would be safe (on the contract level), it feels like if the following guarantees are made it should be fine:\r\n1. `memory-safe`: \"I promise to only store values at or after the value of the free memory pointer, and if I want the value to live longer, I will update the free memory pointer\"\r\n2. `stack-safe`: \"I promise to only affect stack elements that are passed in, and/or newly generated stack elements. I will *not* touch any stack elements I do not 'own'.\"\r\n3. `jumpless`: \"I promise to not jump and break control flow analysis that may be done\" (this is less evm specific, more solidity specific, so I imagine you could have a subset of `self-contained-jumps` that allows jumping to locations *inside* the verbatim block)\r\n4. `storage-view`: \"I promise to not write to storage\" (keeps previously sload-ed values correct)\r\n5. `experimental-ops`: \"I am doing crazy stuff, I am sorry Mrs. Optimizor, go have a seat and relax\"\r\n\r\nIt feels like if you have 1, 2, 3, and 4, and the verbatim code isn't modified by the compiler, the compiler can view it as an inlined function of sorts. If you don't, the optimizer takes a hike.\r\n\r\nI may be missing some things, and if anyone things of some safety contracts that need to hold it may be worthwhile to post them here?\r\n\r\nIn my mind an MVP of this would be:\r\n```rust\r\nenum SafetyContractItem {\r\n    MemSafe,\r\n    StackSafe,\r\n    Jumpless,\r\n    StorageSafe,\r\n    Experimental\r\n}\r\n\r\nif verbatim_block\r\n    .iter()\r\n    .all(|safety_item| {\r\n        matches!(safety_item, \r\n            SafetyContractItem::MemSafe,\r\n            SafetyContractItem::StackSafe,\r\n            SafetyContractItem::Jumpless,\r\n            SafetyContractItem::StorageSafe\r\n        )\r\n        && !matches(safety_item, SafetyContractItem::Experimental)\r\n    }) {\r\n    optimizations_possible = verbatim_block.analyze_stack_promise();\r\n    optimizations_possible = verbatim_block.analyze_storage_promise();\r\n    optimizations_possible = verbatim_block.analyze_jumpless_promise();\r\n}\r\n```\r\nAnd otherwise throw an error if the optimizer is on. If only a subset of needed promises are made, then throw the error. This gets us most of the way there in my mind:\r\n1. Supports weird op codes\r\n2. Allows the vast majority of verbatim uses\r\n\r\nAnd I want to drive home that *no one* expects (nor likely wants) verbatim block interiors to be optimized by the compiler so if that is a major hang up, if possible just avoid that altogether.\r\n\r\nAgain, I could definitely be off-base here, i'm just a layman trynna to get a cool feature pushed thru :).\r\n        \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1270388088/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  }
]
