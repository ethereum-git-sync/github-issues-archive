{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13967",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13967/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13967/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13967/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13967",
  "id": 1582736487,
  "node_id": "I_kwDOAm_5kc5eVqRn",
  "number": 13967,
  "title": "Support named parameters in `abi.encodeCall`",
  "user": {
    "login": "scnale",
    "id": 12967987,
    "node_id": "MDQ6VXNlcjEyOTY3OTg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/12967987?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/scnale",
    "html_url": "https://github.com/scnale",
    "followers_url": "https://api.github.com/users/scnale/followers",
    "following_url": "https://api.github.com/users/scnale/following{/other_user}",
    "gists_url": "https://api.github.com/users/scnale/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/scnale/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/scnale/subscriptions",
    "organizations_url": "https://api.github.com/users/scnale/orgs",
    "repos_url": "https://api.github.com/users/scnale/repos",
    "events_url": "https://api.github.com/users/scnale/events{/privacy}",
    "received_events_url": "https://api.github.com/users/scnale/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2023-02-13T17:07:26Z",
  "updated_at": "2023-02-28T22:10:36Z",
  "closed_at": "2023-02-21T10:53:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface ITest {\r\n    function someFunction(uint256 number, bytes memory buffer) external;\r\n}\r\n\r\ncontract Test {\r\n    function testCallWithNamedParams(ITest someContract) external {\r\n        // Compiles correctly ✅\r\n        someContract.someFunction({\r\n            number: 42,\r\n            buffer: new bytes(0)\r\n        });\r\n    }\r\n\r\n    function testEncodeCallWithNamedParams(ITest someContract) external {\r\n        // Doesn't compile ❌\r\n        bytes memory encodedCall = abi.encodeCall(ITest.someFunction,\r\n            ({\r\n                number: 42,\r\n                buffer: new bytes(0)\r\n            })\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nIdeally, the code above would compile as is.\r\n\r\n## Motivation\r\n\r\nBeing able to bind arguments to named parameters reduces the chance of making a mistake when writing a call, especially so for functions with many parameters.\r\n\r\n## Specification\r\n\r\nI'm guessing this would require modifying the current language syntax but I'm not sure. Maybe there's an alternative way of providing this feature?\r\n\r\n## Backwards Compatibility\r\n\r\nI've no idea how this would impact existing code. If this does introduce new syntax like I think, there shouldn't be any backwards compatibility issues.\r\n",
  "closed_by": {
    "login": "NunoFilipeSantos",
    "id": 2582498,
    "node_id": "MDQ6VXNlcjI1ODI0OTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2582498?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/NunoFilipeSantos",
    "html_url": "https://github.com/NunoFilipeSantos",
    "followers_url": "https://api.github.com/users/NunoFilipeSantos/followers",
    "following_url": "https://api.github.com/users/NunoFilipeSantos/following{/other_user}",
    "gists_url": "https://api.github.com/users/NunoFilipeSantos/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/NunoFilipeSantos/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/NunoFilipeSantos/subscriptions",
    "organizations_url": "https://api.github.com/users/NunoFilipeSantos/orgs",
    "repos_url": "https://api.github.com/users/NunoFilipeSantos/repos",
    "events_url": "https://api.github.com/users/NunoFilipeSantos/events{/privacy}",
    "received_events_url": "https://api.github.com/users/NunoFilipeSantos/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13967/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13967/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1428868327",
    "html_url": "https://github.com/ethereum/solidity/issues/13967#issuecomment-1428868327",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13967",
    "id": 1428868327,
    "node_id": "IC_kwDOAm_5kc5VKszn",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-13T23:43:49Z",
    "updated_at": "2023-02-13T23:43:49Z",
    "author_association": "MEMBER",
    "body": "Well, we'd rather avoid introducing special syntax just for this, so it would have to be a more general language mechanism. Currently the second arg to `encodeCall()` is just a tuple and we plan to eventually introduce them as proper types you can use to declare variables. Not sure what that `({})` notation would be. A struct literal?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1428868327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1438677034",
    "html_url": "https://github.com/ethereum/solidity/issues/13967#issuecomment-1438677034",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13967",
    "id": 1438677034,
    "node_id": "IC_kwDOAm_5kc5VwHgq",
    "user": {
      "login": "scnale",
      "id": 12967987,
      "node_id": "MDQ6VXNlcjEyOTY3OTg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/12967987?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scnale",
      "html_url": "https://github.com/scnale",
      "followers_url": "https://api.github.com/users/scnale/followers",
      "following_url": "https://api.github.com/users/scnale/following{/other_user}",
      "gists_url": "https://api.github.com/users/scnale/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scnale/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scnale/subscriptions",
      "organizations_url": "https://api.github.com/users/scnale/orgs",
      "repos_url": "https://api.github.com/users/scnale/repos",
      "events_url": "https://api.github.com/users/scnale/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scnale/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-21T15:28:39Z",
    "updated_at": "2023-02-28T22:10:36Z",
    "author_association": "NONE",
    "body": "I forgot to follow up on this. Yeah, I was thinking that a struct would be the only thing that makes sense. In fact, I was thinking that having a struct type derived from a function type would help to forward parameters. Invented syntax/language features follow obviously:\r\n\r\n```solidity\r\ninterface ITest {\r\n    function someFunction(uint256 number, bytes memory buffer) external;\r\n}\r\n\r\ncontract Test {\r\n    ITest immutable someContract;\r\n\r\n    constructor(ITest initContract) {\r\n        someContract = initContract;\r\n    }\r\n\r\n    function testCallWithForwardedParams(ITest someContract, ITest.someFunction.params someArgs) external {\r\n        someContract.someFunction(someArgs);\r\n        // Specific syntax could instead be like this to avoid confusing with a normal call\r\n        // someContract.someFunction(...someArgs);\r\n    }\r\n}\r\n```\r\n\r\nThere's a bit of subtlety with the fact that these struct types would be encoded respecting the standard ABI at the time of performing a call instead of passed as is. That's the only thing that strikes at me as a bit strange and maybe arbitrary. I don't think there's any way to ABI encode a struct currently in the language. This would allow that even if indirectly.\r\n\r\nAnyway, I don't really have more to offer on this topic, at least for now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1438677034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
