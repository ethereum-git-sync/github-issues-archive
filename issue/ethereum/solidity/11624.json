{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11624/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11624/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11624/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11624",
  "id": 938042449,
  "node_id": "MDU6SXNzdWU5MzgwNDI0NDk=",
  "number": 11624,
  "title": "Allow covariant return type implementation",
  "user": {
    "login": "jO-Osko",
    "id": 6787313,
    "node_id": "MDQ6VXNlcjY3ODczMTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6787313?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jO-Osko",
    "html_url": "https://github.com/jO-Osko",
    "followers_url": "https://api.github.com/users/jO-Osko/followers",
    "following_url": "https://api.github.com/users/jO-Osko/following{/other_user}",
    "gists_url": "https://api.github.com/users/jO-Osko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jO-Osko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jO-Osko/subscriptions",
    "organizations_url": "https://api.github.com/users/jO-Osko/orgs",
    "repos_url": "https://api.github.com/users/jO-Osko/repos",
    "events_url": "https://api.github.com/users/jO-Osko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jO-Osko/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4437999539,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZ_sw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20effort",
      "name": "high effort",
      "color": "ff54f4",
      "default": false,
      "description": "A lot to implement but still doable by a single person. The task is large or difficult."
    },
    {
      "id": 4438157609,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjpKQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20impact",
      "name": "low impact",
      "color": "5d71ff",
      "default": false,
      "description": "Changes are not very noticeable or potential benefits are limited."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2021-07-06T15:56:37Z",
  "updated_at": "2022-09-14T16:40:50Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nLanguages usually allow covariant return type implementation of interfaces (C++, Java), but solidity seems to enforce type equality in return values. \r\n\r\n## Motivation\r\n\r\nLanguages usually allow covariant return type implementation of interfaces (C++, Java), but solidity seems to enforce type equality in return values. Take an example code (fails both in `8.+` and `7.6`):\r\n\r\n```solidity\r\ninterface A {}\r\n\r\ninterface B is A {}\r\n\r\ninterface X {\r\n    function temp() external pure returns (A);\r\n}\r\n\r\ncontract Y is X {\r\n// This is allowed since B is implicitly cast to A on return\r\n/* \r\n    function some_fun() pure external override returns(A){\r\n        return B(address(0));\r\n    }\r\n*/\r\n    // This gets rejected by the compiler since `B` is not equal to `A`\r\n    function some_fun() pure external override returns(B){\r\n        return B(address(0));\r\n    }\r\n}\r\n```\r\nThis gets especially problematic with automatic getters for public contract data.\r\n```solidity\r\ninterface A {}\r\n\r\ninterface B is A {}\r\n\r\ninterface X {\r\n    function data() external view returns (A);\r\n}\r\n\r\ncontract Y is X {\r\n    B public override data; // Fails since type is not correct\r\n    B public data; // Missing override specifier\r\n}\r\n```\r\nTo get the second contract to type check (and use the `B` interface instead of `A`), one has to add an internal field for `data` and manually write the getter function.\r\n\r\n## Specification\r\n\r\nImplementation type checking should be implemented using `is subtype` instead of using strict type equality. \r\n\r\n## Backwards Compatibility\r\n\r\nI am unsure of backward incompatibilities, but it might pose some unexpected problems with differently sized uint types and unexpected implicit overloads.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11624/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11624/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/875401036",
    "html_url": "https://github.com/ethereum/solidity/issues/11624#issuecomment-875401036",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
    "id": 875401036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTQwMTAzNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-07T08:26:05Z",
    "updated_at": "2021-07-07T08:26:05Z",
    "author_association": "MEMBER",
    "body": "Thanks for creating this issue, @jO-Osko . Do you have some real-world usage examples of that feature? It would allow us to better judge the need for it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/875401036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/875719857",
    "html_url": "https://github.com/ethereum/solidity/issues/11624#issuecomment-875719857",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
    "id": 875719857,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTcxOTg1Nw==",
    "user": {
      "login": "jO-Osko",
      "id": 6787313,
      "node_id": "MDQ6VXNlcjY3ODczMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6787313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jO-Osko",
      "html_url": "https://github.com/jO-Osko",
      "followers_url": "https://api.github.com/users/jO-Osko/followers",
      "following_url": "https://api.github.com/users/jO-Osko/following{/other_user}",
      "gists_url": "https://api.github.com/users/jO-Osko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jO-Osko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jO-Osko/subscriptions",
      "organizations_url": "https://api.github.com/users/jO-Osko/orgs",
      "repos_url": "https://api.github.com/users/jO-Osko/repos",
      "events_url": "https://api.github.com/users/jO-Osko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jO-Osko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-07T15:51:03Z",
    "updated_at": "2021-07-07T15:56:32Z",
    "author_association": "NONE",
    "body": "One is to make it more in sync with type systems of other languages. This is quite important both for newcomers and for general development where people perceive subtyping to follow the same principles as C++, java... Any inconsistencies can be a great source of frustration.\r\n\r\nSecond is when dealing with two levels of interfaces for easier separation of concerns. Think user-facing simple and developer-facing more detailed version, which extends the user-facing interface.\r\n\r\n```solidity\r\ninterface UserFacingInterface {\r\n    function readSomeData() external view returns (uint256);\r\n}\r\n\r\ninterface DeveloperInterface is UserFacingInterface {\r\n    // setData implementation has some internal checks to only allow specific accounts to interact with it, \r\n    // but we also want to exclude it general public interface, \r\n    // as they won't be able to call it anyway\r\n   function setData(uint256 data) external view;\r\n}\r\n```\r\n\r\nAssume that you have a supervisor contract, that interacts with and uses the `UserFacingInterface`(the one with simple methods), and would also like to expose the user-facing interface (for normal users to consume). \r\n\r\nIf you were to write an interface for such a contract you would do something like this, with a quite simple implementation (due to automatically generated getters):\r\n\r\n```solidity\r\ninterface UserFacingSupervisor {\r\n   function mySpecialInterface() external view returns(UserFacingInterface);\r\n}\r\n// An implementation\r\ncontract Supervisor is UserFacingSupervisor {\r\n\r\n    UserFacingInterface public mySpecialInterface; \r\n    constructor(UserFacingInterface _intParam){\r\n        mySpecialInterface = _intParam;\r\n    }\r\n\r\n   function a() private view {\r\n       // code is irrelevant, just use mySpecialInterface as UserFacingInterface\r\n       require(mySpecialInterface.readSomeData() == 0);\r\n   }\r\n\r\n}\r\n```\r\nI want to add new methods to Supervisor, but they require `DeveloperInterface` (eg. I want to also use `setData`).\r\n\r\nNaively (and that also works in C++), I just change the declaration in `Supervisor` from `UserFacingInterface public mySpecialInterface; ` to `DeveloperInterface public mySpecialInterface;`. \r\nSince `DeveloperInterface` is (a subtype of) `UserFacingInterface`, method `a` works as intended, and it would be nice (and arguably more correct) to also extend this also automatically generated method `mySpecialInterface() returns (UserFacingInterface)` as before. But the type of this generated method is now `DeveloperInterface` which is (a subtype of) `UserFacingInterface` but it is not the same type so solidity rejects it.\r\n\r\nFor now, you have to change the contract to have a field that holds `mySpecialInterface` as before and manually create a method that returns the correct type to conform to the interface.\r\n\r\n```solidity\r\n// Just part of the code\r\nDeveloperInterface internal _mySpecialInterface;\r\n\r\nfunction mySpecialInterface() external view returns(UserFacingInterface){\r\n   return mySpecialInterface // This has a type DeveloperInterface but gets implicitly converted to UserFacingInterface\r\n}\r\n```\r\n\r\nIt would also nicely correspond to [documentation](https://docs.soliditylang.org/en/latest/types.html#contract-types): \r\n\r\n> Every contract defines its own type. You can implicitly convert contracts to contracts they inherit from. Contracts can be explicitly converted to and from the address type.\r\n\r\n\r\n\r\nI think that the main gist is, that overriding should allow overriding with a more *specific* type not just with the same type as specified. If `B is A`, then every function `function f() returns (B)` is also `function f() returns (A)`, since every contract of type `B` is implicitly convertible to `A`. \r\n\r\nTake an example from the called side:\r\n\r\n```solidity\r\n// B is A\r\n// f() returns(A);\r\n// g() returns(B);\r\n\r\nA contractA = f(); // f returns something of type A\r\nA contractA = g(); // g returns something of type B, that is implicitly convertible to A\r\n```\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/875719857/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/875731036",
    "html_url": "https://github.com/ethereum/solidity/issues/11624#issuecomment-875731036",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
    "id": 875731036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTczMTAzNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-07T16:05:39Z",
    "updated_at": "2021-07-07T16:05:39Z",
    "author_association": "MEMBER",
    "body": "I understand the general concept and think that it can be useful. Still, we have so many planned features that are useful. In order to prioritize this feature, it would be really nice to get some real world usages of that pattern, as in smart contracts that are actually being developed or already deployed that would profit from it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/875731036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/877720079",
    "html_url": "https://github.com/ethereum/solidity/issues/11624#issuecomment-877720079",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
    "id": 877720079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzcyMDA3OQ==",
    "user": {
      "login": "fluidsonic",
      "id": 85242,
      "node_id": "MDQ6VXNlcjg1MjQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/85242?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fluidsonic",
      "html_url": "https://github.com/fluidsonic",
      "followers_url": "https://api.github.com/users/fluidsonic/followers",
      "following_url": "https://api.github.com/users/fluidsonic/following{/other_user}",
      "gists_url": "https://api.github.com/users/fluidsonic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fluidsonic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fluidsonic/subscriptions",
      "organizations_url": "https://api.github.com/users/fluidsonic/orgs",
      "repos_url": "https://api.github.com/users/fluidsonic/repos",
      "events_url": "https://api.github.com/users/fluidsonic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fluidsonic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-11T00:10:13Z",
    "updated_at": "2021-07-11T00:10:13Z",
    "author_association": "NONE",
    "body": "I ran into this too.\r\n\r\n```solidity\r\ninterface IExchange { … } \r\ninterface IExchangeInternal is IExchange { … }\r\ninterface IStrategy { function exchange() external view returns (IExchange); }\r\n\r\ncontract Strategy is IStrategy {\r\n\r\n   // TypeError: Overriding public state variable return types differ.\r\n   IExchangeInternal public immutable override exchange;\r\n\r\n   // `Strategy` uses `IExchangeInternal` internally with additional functions\r\n   // but exposes it as `IExchange` externally through `IStrategy`\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/877720079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/886678288",
    "html_url": "https://github.com/ethereum/solidity/issues/11624#issuecomment-886678288",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
    "id": 886678288,
    "node_id": "IC_kwDOAm_5kc402aMQ",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T12:56:16Z",
    "updated_at": "2021-07-26T12:56:16Z",
    "author_association": "MEMBER",
    "body": "@fluidsonic do you have a link to a full code example?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/886678288/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/991009136",
    "html_url": "https://github.com/ethereum/solidity/issues/11624#issuecomment-991009136",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
    "id": 991009136,
    "node_id": "IC_kwDOAm_5kc47EZlw",
    "user": {
      "login": "novaknole",
      "id": 23176187,
      "node_id": "MDQ6VXNlcjIzMTc2MTg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/23176187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/novaknole",
      "html_url": "https://github.com/novaknole",
      "followers_url": "https://api.github.com/users/novaknole/followers",
      "following_url": "https://api.github.com/users/novaknole/following{/other_user}",
      "gists_url": "https://api.github.com/users/novaknole/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/novaknole/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/novaknole/subscriptions",
      "organizations_url": "https://api.github.com/users/novaknole/orgs",
      "repos_url": "https://api.github.com/users/novaknole/repos",
      "events_url": "https://api.github.com/users/novaknole/events{/privacy}",
      "received_events_url": "https://api.github.com/users/novaknole/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-10T14:15:57Z",
    "updated_at": "2021-12-10T14:15:57Z",
    "author_association": "NONE",
    "body": "Hi Team,\r\n\r\nHuge thanks to @cameel for helping me out about this.\r\n\r\nI come with my own use case here.\r\n\r\nThere's a `DAO` contract and 3 other ones(`C1, C2, C3`). \r\n\r\nRequirements: \r\n    1. `C1, C2, C3` need to be upgradable and `DAO` as well should be upgradable.\r\n    2.  ACL management should only be on the DAO and `C1,C2,C3`'s ACL managements will also go through `DAO` contract as well. This way, ACL code is only deployed once when `DAO` is deployed. Using `ACL` for each `C1,C2,C3` would be costly.\r\n    \r\nBecause of the 2nd requirement, each `C1, C2, C3` need to have `DAO` instances. So I design something like this..\r\n\r\n```\r\nabstract contract Component  {\r\n    IDAO internal dao;\r\n    \r\n    function initialize(IDAO _dao) public virtual  {\r\n        dao = _dao;\r\n    }\r\n\r\n    modifier authP(bytes32 role)  {\r\n        require(dao.hasPermission(address(this), msg.sender, role, msg.data), \"auth: check\");\r\n        _;\r\n    }\r\n   \r\n}\r\n\r\n\r\ninterface IDAO {\r\n    // ACL handling permission\r\n    function hasPermission(address _where, address _who, bytes32 _role, bytes memory data) external returns(bool);\r\n}\r\n```\r\n\r\n\r\n```\r\n\r\ncontract DAO is IDAO {\r\n\r\n}\r\n\r\ncontract C1 is Component {\r\n    \r\n    function initialize(DAO dao) public override {\r\n         Component.initialize(dao);\r\n    }\r\n\r\n}\r\n```\r\n\r\nNow, the above code fails because o `override`, as it thinks `DAO` that I have in `initialize` of `C1` is not the same as `IDAO` instance that `Component's initialize` waits for. You might ask me to change `DAO` with `IDAO` in C1, but I can explain why sometimes it's not a good idea.\r\n\r\nin `Component`, I don't want my IDAO instance or DAO instance(whatever it will be to have all the insights(what DAO currently allows to be seen from outside. I want component to just know one function `hasPermission` on the DAO and that's it.) \r\n\r\nIf override didn't scream above, I'd achieve the following:\r\n\r\nin `C1`, since it receives `DAO` instance, I'd be able to use DAO's other functions(for example: dao.checkSomething), but in `Component`, I'd only be able to check `dao.hasPermission` as in IDAO, I'd only put `hasPermission` virtual function. This way, each part knows exactly what it needs.\r\n\r\nThe way I solved it now(override problem) is that whatever `C1` also needs from `dao`, I put it in `IDAO` as well and changed `C1`'s `Initialize` function to accept `IDAO`.  now,  `Component` also knows everything about `dao` as well.\r\n\r\nThe gain of having 2 parts only know the things they need, mightn't be too beneficial, it's just the language should be still allowing what this issue is about.\r\n\r\nHope that makes sense.\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/991009136/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/991027538",
    "html_url": "https://github.com/ethereum/solidity/issues/11624#issuecomment-991027538",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
    "id": 991027538,
    "node_id": "IC_kwDOAm_5kc47EeFS",
    "user": {
      "login": "jO-Osko",
      "id": 6787313,
      "node_id": "MDQ6VXNlcjY3ODczMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6787313?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jO-Osko",
      "html_url": "https://github.com/jO-Osko",
      "followers_url": "https://api.github.com/users/jO-Osko/followers",
      "following_url": "https://api.github.com/users/jO-Osko/following{/other_user}",
      "gists_url": "https://api.github.com/users/jO-Osko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jO-Osko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jO-Osko/subscriptions",
      "organizations_url": "https://api.github.com/users/jO-Osko/orgs",
      "repos_url": "https://api.github.com/users/jO-Osko/repos",
      "events_url": "https://api.github.com/users/jO-Osko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jO-Osko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-10T14:39:45Z",
    "updated_at": "2021-12-10T14:39:45Z",
    "author_association": "NONE",
    "body": "The PR with my proposed solution was closed, but if there is a consensus/idea on what should be done to allow this, I'm happy to help and participate :) ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/991027538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/991061628",
    "html_url": "https://github.com/ethereum/solidity/issues/11624#issuecomment-991061628",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
    "id": 991061628,
    "node_id": "IC_kwDOAm_5kc47EmZ8",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-10T15:23:23Z",
    "updated_at": "2021-12-10T15:23:23Z",
    "author_association": "MEMBER",
    "body": "The issue itself is still open and from what I see the objections in the PR were mainly to the way it was implemented so maybe we can find an alternative way to provide it. I personally think that the feature does make sense and the new use case makes it somewhat more compelling.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/991061628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/994685152",
    "html_url": "https://github.com/ethereum/solidity/issues/11624#issuecomment-994685152",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11624",
    "id": 994685152,
    "node_id": "IC_kwDOAm_5kc47SbDg",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-15T11:09:33Z",
    "updated_at": "2021-12-15T11:09:33Z",
    "author_association": "MEMBER",
    "body": "I'm sorry, but I still think this is much more complex than it looks from the outside, and I would prefer not to do it for now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/994685152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
