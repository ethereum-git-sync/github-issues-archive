{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12725/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12725/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12725/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12725",
  "id": 1155664043,
  "node_id": "I_kwDOAm_5kc5E4gir",
  "number": 12725,
  "title": "try/catch doesn't catch some call errors.",
  "user": {
    "login": "drortirosh",
    "id": 40341007,
    "node_id": "MDQ6VXNlcjQwMzQxMDA3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/drortirosh",
    "html_url": "https://github.com/drortirosh",
    "followers_url": "https://api.github.com/users/drortirosh/followers",
    "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
    "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
    "organizations_url": "https://api.github.com/users/drortirosh/orgs",
    "repos_url": "https://api.github.com/users/drortirosh/repos",
    "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/drortirosh/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 467898404,
      "node_id": "MDU6TGFiZWw0Njc4OTg0MDQ=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/breaking%20change%20:warning:",
      "name": "breaking change :warning:",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "314aff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4438488423,
      "node_id": "LA_kwDOAm_5kc8AAAABCI31Zw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have",
      "name": "must have",
      "color": "ffa12a",
      "default": false,
      "description": "Something we consider an essential part of Solidity 1.0."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2022-03-01T18:21:26Z",
  "updated_at": "2023-01-26T17:43:02Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The following code is expected (by a developer using any other language) to catch failures related to the call.\r\nBut instead, it reverts.\r\nThis is due to the very confusing semantics of the \"try/catch\" construct in solidity: the catch block will only be called if the actual external code was reverted, but it might still revert in some **compiler-generated** code\r\n\r\n```solidity\r\npragma solidity ^0.8.12;\r\n\r\ninterface Xface {\r\n    function func() external;\r\n}\r\n\r\ncontract Test {\r\n    function run() external {\r\n        try Xface(address(0)).func()  {\r\n            console.log('successfully called');\r\n        } catch {\r\n            console.log('catch everything');\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Suggestion**: solidity should not generate a \"revert\" code between the try and catch. Instead, it should jump into the catch block.\r\n\r\nCurrently, the following checks are done by solidity, and it reverts if any of these validation fails:\r\n- if the called method is \"void\", it first performs `extcodesize`, to validate the target indeed has some code\r\n- if the called method is expected to return something, it validates that `returndatasize` is not zero\r\n- if there are returned values, it decodes  them and of course validates they were encoded correctly.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12725/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12725/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1056668214",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1056668214",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1056668214,
    "node_id": "IC_kwDOAm_5kc4--3o2",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-02T09:27:34Z",
    "updated_at": "2022-03-02T09:27:34Z",
    "author_association": "MEMBER",
    "body": "Do I understand you correctly that you find it confusing that the catch block is only executed when the call reverted? Would you want the catch block to be executed for a successful call to the function but a failure to decode the return data?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1056668214/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1057002132",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1057002132",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1057002132,
    "node_id": "IC_kwDOAm_5kc4_AJKU",
    "user": {
      "login": "drortirosh",
      "id": 40341007,
      "node_id": "MDQ6VXNlcjQwMzQxMDA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drortirosh",
      "html_url": "https://github.com/drortirosh",
      "followers_url": "https://api.github.com/users/drortirosh/followers",
      "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
      "organizations_url": "https://api.github.com/users/drortirosh/orgs",
      "repos_url": "https://api.github.com/users/drortirosh/repos",
      "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drortirosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-02T14:38:34Z",
    "updated_at": "2022-03-02T14:38:34Z",
    "author_association": "NONE",
    "body": "Yes. I think its confusing that the code that is covered syntactically by try/catch causes a revert. \r\nThe assumption of a developer is that this is a \"safe-zone\".\r\nThe purpose of try/catch is catch errors caused by things outside of the control of the developer and continue the normal path of the code.\r\nWith the current implementation, it is nearly impossible to achieve that, without resorting to low level calls and assembly - since the compiler explicitly generates \"revert\" calls before calling the external function (to handle \"no-contract-at-target\") and after the external function returns (when it fails to parse the response)\r\nNote that both of these cases fall under \"not under the contact developer's control\" category - just like reverts in the called external function\r\n\r\nI understand that you can't add a real try/catch, since the EVM only support reverting an external call. \r\nBut I **DO** expect the code-generator to \"honor\" the developer's intention that reverts inside the try/catch range will be captured.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1057002132/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1057011737",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1057011737",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1057011737,
    "node_id": "IC_kwDOAm_5kc4_ALgZ",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-02T14:47:55Z",
    "updated_at": "2022-03-02T14:47:55Z",
    "author_association": "MEMBER",
    "body": "If you send ether to the called function in the try/catch, how do you distinguish the ether being gone or not in the catch clause?\r\n\r\nThe try/catch statement was not meant as something like a protection against malicious called contracts, it's rather a way to handle errors that come with reverts. Can you share a bit more about your use-case?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1057011737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060800037",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1060800037",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1060800037,
    "node_id": "IC_kwDOAm_5kc4_OoYl",
    "user": {
      "login": "drortirosh",
      "id": 40341007,
      "node_id": "MDQ6VXNlcjQwMzQxMDA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drortirosh",
      "html_url": "https://github.com/drortirosh",
      "followers_url": "https://api.github.com/users/drortirosh/followers",
      "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
      "organizations_url": "https://api.github.com/users/drortirosh/orgs",
      "repos_url": "https://api.github.com/users/drortirosh/repos",
      "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drortirosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-07T15:17:52Z",
    "updated_at": "2022-03-07T15:17:52Z",
    "author_association": "NONE",
    "body": "1. the major issue is a revert done by the compiler even before the call (target address is invalid), which obviously doesn't send any funds\r\n2. even in the lesser case (called a function that returns a value, and failed to decode its return value) I think its better to treat it as \"exception\" and get into the \"catch\" block.\r\n   If I really expect to transfer value in this call, i'd have to save my balance before the call, and compare the saved balance to current value inside the catch block:\r\n  Yes, its not a nice solution - but that's the edge case.\r\n   Currently, the major case (=target address is mis-configured) goes the wrong path, and require me (the developer) to use a low-level, error-prone \"call\" API instead of using try/catch block",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060800037/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060812502",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1060812502",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1060812502,
    "node_id": "IC_kwDOAm_5kc4_OrbW",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-07T15:29:11Z",
    "updated_at": "2022-03-07T15:29:11Z",
    "author_association": "MEMBER",
    "body": "Can you please share a bit more about your use-case? It is difficult to discuss breaking invariants at such an abstraction level without any examples.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060812502/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1061723575",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1061723575",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1061723575,
    "node_id": "IC_kwDOAm_5kc4_SJ23",
    "user": {
      "login": "drortirosh",
      "id": 40341007,
      "node_id": "MDQ6VXNlcjQwMzQxMDA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drortirosh",
      "html_url": "https://github.com/drortirosh",
      "followers_url": "https://api.github.com/users/drortirosh/followers",
      "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
      "organizations_url": "https://api.github.com/users/drortirosh/orgs",
      "repos_url": "https://api.github.com/users/drortirosh/repos",
      "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drortirosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-08T12:24:50Z",
    "updated_at": "2022-03-08T12:24:50Z",
    "author_association": "NONE",
    "body": "Here is a reference to our code, which is the implementation of \"account abstraction\" EIP-4337: https://bit.ly/3sMBirB\r\nSome context: account-abstraction is a mechanism that \"abstracts\" EOA account as a wallet contract. specifically, the signature and nonce validations are done by the wallet itself.\r\nThe singleton \"EntryPoint\" calls the `validateUserOp()` method on the wallet contract.\r\nSince we attempt to create a \"batch\" of multiple requests, we need to find out which (if any) causes the entire batch to fail.\r\nFor this purpose we wrap the request with `try`...`catch`, with the expectation to catch any failure case, and properly handle it (in our case, it is reverting with a custom \"FailedOp\" structure)\r\n\r\nHowever, the current code is not enough, in case the target address is not a contract, it reverts.\r\nWe're very conscious to the gas cost, as this is an overhead of each request that goes through the system. \r\n\r\nusing `address.call` is not an option, since its neither safe, nor efficient (cost ~2000 gas more)\r\n\r\nThe only option we currently have is add an assembly code to do `extcodesize(sender)` just before calling the method - mimicking the code the compiler inserts when calling the method.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1061723575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1064279229",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1064279229",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1064279229,
    "node_id": "IC_kwDOAm_5kc4_b5y9",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-10T16:50:42Z",
    "updated_at": "2022-03-10T16:50:42Z",
    "author_association": "MEMBER",
    "body": "Ok, from your example, I see that the problem is rather the excodesize check and not the decoding failure (as you already said above).\r\nI think changing the behaviour of try/catch with respect to the extcodesize check could be a good change.\r\n\r\nI'm less convinced to execute the catch block in case of a successful call and return data decoding. I think we should not change the invariant that if the catch code is executed, the call did not have any effect. Note that ether transfer is not the only state change that can happen and there are state changes that are impossible to detect.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1064279229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1064682060",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1064682060",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1064682060,
    "node_id": "IC_kwDOAm_5kc4_dcJM",
    "user": {
      "login": "drortirosh",
      "id": 40341007,
      "node_id": "MDQ6VXNlcjQwMzQxMDA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drortirosh",
      "html_url": "https://github.com/drortirosh",
      "followers_url": "https://api.github.com/users/drortirosh/followers",
      "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
      "organizations_url": "https://api.github.com/users/drortirosh/orgs",
      "repos_url": "https://api.github.com/users/drortirosh/repos",
      "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drortirosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-11T01:30:25Z",
    "updated_at": "2022-03-11T01:30:25Z",
    "author_association": "NONE",
    "body": "I still think that it should be possible to \"catch\" (that is, not throw) inside the try...catch block\r\nA possible way is have a maybe a different catch mode, e.g. using s different catch signature. At first I thought of `Panic()`, but it is not thrown on such cases, so maybe something like:\r\n\r\n```\r\ntry func() \r\ncatch DecodeError() {\r\n\r\n}\r\n```\r\n\r\nI think that handling of decoding errors is highly required in complex contracts interactions. \r\nCurrently, developers are required to use the error-prone (and gas-inefficient) \"address.call\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1064682060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1069168940",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1069168940",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1069168940,
    "node_id": "IC_kwDOAm_5kc4_ujks",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-16T14:06:52Z",
    "updated_at": "2022-03-16T14:06:52Z",
    "author_association": "MEMBER",
    "body": "@hrkrshnn noted that if we go to the catch block on excodesizecheck failure, we have to re-add the extcodesizecheck that was recently removed due to a decoding error resulting in a revert anyway #12204 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1069168940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1079957798",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1079957798",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1079957798,
    "node_id": "IC_kwDOAm_5kc5AXtkm",
    "user": {
      "login": "drortirosh",
      "id": 40341007,
      "node_id": "MDQ6VXNlcjQwMzQxMDA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drortirosh",
      "html_url": "https://github.com/drortirosh",
      "followers_url": "https://api.github.com/users/drortirosh/followers",
      "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
      "organizations_url": "https://api.github.com/users/drortirosh/orgs",
      "repos_url": "https://api.github.com/users/drortirosh/repos",
      "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drortirosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-27T15:47:32Z",
    "updated_at": "2022-03-27T15:47:32Z",
    "author_association": "NONE",
    "body": "I still think that its worthwhile handling the general case of \"void\" function: in that case, you already call `extcodesize` to validate it exists, and it should redirect to the global `catch` block (if there is one) instead of directly reverting.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1079957798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1119742540",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1119742540",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1119742540,
    "node_id": "IC_kwDOAm_5kc5CvepM",
    "user": {
      "login": "aathan",
      "id": 24279435,
      "node_id": "MDQ6VXNlcjI0Mjc5NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24279435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aathan",
      "html_url": "https://github.com/aathan",
      "followers_url": "https://api.github.com/users/aathan/followers",
      "following_url": "https://api.github.com/users/aathan/following{/other_user}",
      "gists_url": "https://api.github.com/users/aathan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aathan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aathan/subscriptions",
      "organizations_url": "https://api.github.com/users/aathan/orgs",
      "repos_url": "https://api.github.com/users/aathan/repos",
      "events_url": "https://api.github.com/users/aathan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aathan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T15:29:48Z",
    "updated_at": "2023-01-22T20:47:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just to chime in here. I have a use case related to ERC165-like \"light\" interface checking. Basically, try/catch guards could be used to experimentally call an external contract function and act on the basis of which catch block executes. This would have many useful applications. One in particular would be to check if one of the transfer addresses in a token transfer appears to be something that smells like a particular kind of token wallet etc.\r\n\r\nOf course, something as simple as:\r\n```\r\n    function respondsTo(address c, bytes4 sel) internal view returns(bool result) {\r\n        assembly {\r\n            let freeMemory := mload(0x40)\r\n            mstore(freeMemory,sel)\r\n            result := staticcall(gas(),c,freeMemory,4,0,0)\r\n        }\r\n    }\r\n```\r\n\r\nserves such a purpose for view functions that take no parameters. Perhaps Solidity does not want to encourage this kind of usage, but a gas-efficient mechanism that could query external contracts in this way seems like a good thing. I know more efficient dispatchers are being discussed, and this consideration might be one to include in that implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1119742540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1138320822",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1138320822",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1138320822,
    "node_id": "IC_kwDOAm_5kc5D2WW2",
    "user": {
      "login": "bogdoslavik",
      "id": 28448359,
      "node_id": "MDQ6VXNlcjI4NDQ4MzU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/28448359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bogdoslavik",
      "html_url": "https://github.com/bogdoslavik",
      "followers_url": "https://api.github.com/users/bogdoslavik/followers",
      "following_url": "https://api.github.com/users/bogdoslavik/following{/other_user}",
      "gists_url": "https://api.github.com/users/bogdoslavik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bogdoslavik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bogdoslavik/subscriptions",
      "organizations_url": "https://api.github.com/users/bogdoslavik/orgs",
      "repos_url": "https://api.github.com/users/bogdoslavik/repos",
      "events_url": "https://api.github.com/users/bogdoslavik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bogdoslavik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-26T09:01:47Z",
    "updated_at": "2022-05-26T09:25:17Z",
    "author_association": "NONE",
    "body": "Hello! I often have troubles detecting and catch calls to non contract accounts.\r\n\r\nThere is one simple example:\r\n```\r\n  function _getPairName(IUniswapV2Pair pair) \r\n  internal view returns (string memory) {\r\n    try pair.name{gas : 3000}() returns (string memory name) {\r\n      return name;\r\n    } catch {}\r\n    return _NONAME;\r\n  }\r\n```\r\nIf I face with some non-standart pair without name() method or it is not contract address - all my code reverts while I expect what it should catched in tr..catch block.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1138320822/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1138338163",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1138338163",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1138338163,
    "node_id": "IC_kwDOAm_5kc5D2alz",
    "user": {
      "login": "bogdoslavik",
      "id": 28448359,
      "node_id": "MDQ6VXNlcjI4NDQ4MzU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/28448359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bogdoslavik",
      "html_url": "https://github.com/bogdoslavik",
      "followers_url": "https://api.github.com/users/bogdoslavik/followers",
      "following_url": "https://api.github.com/users/bogdoslavik/following{/other_user}",
      "gists_url": "https://api.github.com/users/bogdoslavik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bogdoslavik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bogdoslavik/subscriptions",
      "organizations_url": "https://api.github.com/users/bogdoslavik/orgs",
      "repos_url": "https://api.github.com/users/bogdoslavik/repos",
      "events_url": "https://api.github.com/users/bogdoslavik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bogdoslavik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-26T09:23:51Z",
    "updated_at": "2022-05-26T09:23:51Z",
    "author_association": "NONE",
    "body": "@aathan , I have tried use code you provided, but do not understand what `ptr` is in line\r\n` mstore(ptr,sel)`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1138338163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1399574565",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1399574565",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1399574565,
    "node_id": "IC_kwDOAm_5kc5Ta9Al",
    "user": {
      "login": "mkMoSs",
      "id": 4203483,
      "node_id": "MDQ6VXNlcjQyMDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4203483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkMoSs",
      "html_url": "https://github.com/mkMoSs",
      "followers_url": "https://api.github.com/users/mkMoSs/followers",
      "following_url": "https://api.github.com/users/mkMoSs/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkMoSs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkMoSs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkMoSs/subscriptions",
      "organizations_url": "https://api.github.com/users/mkMoSs/orgs",
      "repos_url": "https://api.github.com/users/mkMoSs/repos",
      "events_url": "https://api.github.com/users/mkMoSs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkMoSs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-22T19:00:22Z",
    "updated_at": "2023-01-22T19:03:15Z",
    "author_association": "NONE",
    "body": "> Hello! I often have troubles detecting and catch calls to non contract accounts.\r\n> \r\n> There is one simple example:\r\n> \r\n> ```\r\n>   function _getPairName(IUniswapV2Pair pair) \r\n>   internal view returns (string memory) {\r\n>     try pair.name{gas : 3000}() returns (string memory name) {\r\n>       return name;\r\n>     } catch {}\r\n>     return _NONAME;\r\n>   }\r\n> ```\r\n> \r\n> If I face with some non-standart pair without name() method or it is not contract address - all my code reverts while I expect what it should catched in tr..catch block.\r\n\r\nI stumbled almost to identical usage problem, where as I need to detect somehow if an address is a deployed / valid UniswapV2Pair or not. \r\nMy requirement is to fail \"gracefully\" and not revert if that address is not a UniswapV2Pair or anything at all.\r\n\r\ntry catch does not work as expected and reverts where as I need it to catch it and continue on with my non blocking function.\r\n\r\n@bogdoslavik Have you figured a way to solve this issue? \r\n\r\nHere's my example\r\n\r\n```\r\naddress _pair = UniswapV2Library.pairFor(factory, _token0, _token1);\r\n\r\ntry IUniswapV2Pair(_pair).getReserves() {\r\n  // do stuff if pair exists\r\n} catch {\r\n // do stuff if pair does not exist\r\n}\r\n\r\n```\r\nThis reverts and does not honor the try catch.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1399574565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1399604444",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1399604444",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1399604444,
    "node_id": "IC_kwDOAm_5kc5TbETc",
    "user": {
      "login": "aathan",
      "id": 24279435,
      "node_id": "MDQ6VXNlcjI0Mjc5NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24279435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aathan",
      "html_url": "https://github.com/aathan",
      "followers_url": "https://api.github.com/users/aathan/followers",
      "following_url": "https://api.github.com/users/aathan/following{/other_user}",
      "gists_url": "https://api.github.com/users/aathan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aathan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aathan/subscriptions",
      "organizations_url": "https://api.github.com/users/aathan/orgs",
      "repos_url": "https://api.github.com/users/aathan/repos",
      "events_url": "https://api.github.com/users/aathan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aathan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-22T20:52:15Z",
    "updated_at": "2023-01-22T20:53:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's been a long time since I looked at this but I've corrected ptr in my original comment to read freeMemory, which is what (logically) it was probably meant to say in the first place. This is just building the necessary params for staticcall() to call a function that takes no params (the selector of which you pass to my example code as sel), so that you can inspect the result; I think my assumptino was that your target contract would implement some selector that would allow the boolean true return of staticcall to indicate the selector exists at the target contract.\r\n\r\nRead more about staticcall in the EVM docs and/or places like this one: https://nicolabernini.substack.com/p/an-example-staticcall-usage\r\n\r\nPerhaps take further discussion to the chat/help groups. Again, this is very old now and I'm just spending a few minutes to answer your question rather than fully confirm everything I've said here and in the prior comment is accurate. Your mileage may vary.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1399604444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1399689245",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1399689245",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1399689245,
    "node_id": "IC_kwDOAm_5kc5TbZAd",
    "user": {
      "login": "bogdoslavik",
      "id": 28448359,
      "node_id": "MDQ6VXNlcjI4NDQ4MzU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/28448359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bogdoslavik",
      "html_url": "https://github.com/bogdoslavik",
      "followers_url": "https://api.github.com/users/bogdoslavik/followers",
      "following_url": "https://api.github.com/users/bogdoslavik/following{/other_user}",
      "gists_url": "https://api.github.com/users/bogdoslavik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bogdoslavik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bogdoslavik/subscriptions",
      "organizations_url": "https://api.github.com/users/bogdoslavik/orgs",
      "repos_url": "https://api.github.com/users/bogdoslavik/repos",
      "events_url": "https://api.github.com/users/bogdoslavik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bogdoslavik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T02:00:44Z",
    "updated_at": "2023-01-23T02:06:42Z",
    "author_association": "NONE",
    "body": "@mkMoSs  Before call, you have to check, what calling address have code:\r\n\r\n```\r\nfunction _isContract(address addr) internal returns (bool) {\r\n  uint size;\r\n  assembly { size := extcodesize(addr) }\r\n  return size > 0;\r\n}\r\n```\r\n\r\nfor Solidity v0.8 (fn can be view)\r\n```\r\npragma solidity >=0.8.0;\r\n\r\nfunction isContract(address _addr) view returns (bool) {\r\n    return _addr.code.length > 0;\r\n}\r\n```\r\n\r\nBut be aware of vulnerability described: [stackoverflow](https://ethereum.stackexchange.com/questions/15641/how-does-a-contract-find-out-if-another-address-is-a-contract/64340#64340)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1399689245/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1400488454",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1400488454",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1400488454,
    "node_id": "IC_kwDOAm_5kc5TecIG",
    "user": {
      "login": "drortirosh",
      "id": 40341007,
      "node_id": "MDQ6VXNlcjQwMzQxMDA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drortirosh",
      "html_url": "https://github.com/drortirosh",
      "followers_url": "https://api.github.com/users/drortirosh/followers",
      "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
      "organizations_url": "https://api.github.com/users/drortirosh/orgs",
      "repos_url": "https://api.github.com/users/drortirosh/repos",
      "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drortirosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-23T14:57:18Z",
    "updated_at": "2023-01-23T14:57:18Z",
    "author_association": "NONE",
    "body": "@chriseth : sorry for late response:\r\nthere is a side-case that I think its easy to support:\r\nin the \r\n`try a.viewCall() returns (xyz) {} catch{}`\r\ncase:\r\nif the call to `viewCall` is static, then it surely doesn't modify the state. In this case, it is no brainer that the current contract should not revert trying to parse the return value: it should fail into the \"catch\" block instead.\r\nI still would like to see a solution for the case where the method is non-static (which requires a new syntax, e.g. `catch ParseError {}`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1400488454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1401921634",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1401921634",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1401921634,
    "node_id": "IC_kwDOAm_5kc5Tj6Bi",
    "user": {
      "login": "mkMoSs",
      "id": 4203483,
      "node_id": "MDQ6VXNlcjQyMDM0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4203483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkMoSs",
      "html_url": "https://github.com/mkMoSs",
      "followers_url": "https://api.github.com/users/mkMoSs/followers",
      "following_url": "https://api.github.com/users/mkMoSs/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkMoSs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkMoSs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkMoSs/subscriptions",
      "organizations_url": "https://api.github.com/users/mkMoSs/orgs",
      "repos_url": "https://api.github.com/users/mkMoSs/repos",
      "events_url": "https://api.github.com/users/mkMoSs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkMoSs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-24T13:08:11Z",
    "updated_at": "2023-01-24T13:08:11Z",
    "author_association": "NONE",
    "body": "> \r\n\r\n@bogdoslavik \r\nThank you, this is what I ended up doing.\r\n```solidity\r\n\r\n/* \r\n* UniswapV2Library.pairFor is a pure function and generates the pair address based on factory address and a hex code\r\n* Nothing else can generate this address.\r\n*/\r\naddress _pairV2 = UniswapV2Library.pairFor(_factoryV2, _token0, _token1);\r\n\r\n// is that pair deployed / existent?\r\n// as of now, there is no other way (that I know of) to check if a pair has been deployed or not\r\n//  try _pairV2.getReserves() catch, reverts which is not what we want\r\nif (_pairV2.code.length > 0) {\r\n    (uint _reserve0, uint _reserve1) = UniswapV2Library.getReserves(_factoryV2, _token0, _token1);\r\n\r\n    uint _amountV2 = UniswapV2Library.getAmountIn(_amount, _reserve0, _reserve1);\r\n // ...  do other stuff\r\n}\r\n// else do other stuff, but do not revert\r\n\r\n```\r\n\r\nI did read about the vulnerability issues with this method, as far as I can tell I should have no issues with my particular use case, unless I'm missing something.\r\n\r\nThank you\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1401921634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1405367532",
    "html_url": "https://github.com/ethereum/solidity/issues/12725#issuecomment-1405367532",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12725",
    "id": 1405367532,
    "node_id": "IC_kwDOAm_5kc5TxDTs",
    "user": {
      "login": "aathan",
      "id": 24279435,
      "node_id": "MDQ6VXNlcjI0Mjc5NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24279435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aathan",
      "html_url": "https://github.com/aathan",
      "followers_url": "https://api.github.com/users/aathan/followers",
      "following_url": "https://api.github.com/users/aathan/following{/other_user}",
      "gists_url": "https://api.github.com/users/aathan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aathan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aathan/subscriptions",
      "organizations_url": "https://api.github.com/users/aathan/orgs",
      "repos_url": "https://api.github.com/users/aathan/repos",
      "events_url": "https://api.github.com/users/aathan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aathan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-26T17:43:01Z",
    "updated_at": "2023-01-26T17:43:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's also worth mentioning ERC165",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1405367532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
