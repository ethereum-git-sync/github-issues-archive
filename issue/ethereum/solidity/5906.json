{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/5906",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/5906/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/5906/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/5906/events",
  "html_url": "https://github.com/ethereum/solidity/issues/5906",
  "id": 404745138,
  "node_id": "MDU6SXNzdWU0MDQ3NDUxMzg=",
  "number": 5906,
  "title": "Cannot verify smart contract with new version",
  "user": {
    "login": "khaihkd",
    "id": 4758892,
    "node_id": "MDQ6VXNlcjQ3NTg4OTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4758892?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/khaihkd",
    "html_url": "https://github.com/khaihkd",
    "followers_url": "https://api.github.com/users/khaihkd/followers",
    "following_url": "https://api.github.com/users/khaihkd/following{/other_user}",
    "gists_url": "https://api.github.com/users/khaihkd/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/khaihkd/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/khaihkd/subscriptions",
    "organizations_url": "https://api.github.com/users/khaihkd/orgs",
    "repos_url": "https://api.github.com/users/khaihkd/repos",
    "events_url": "https://api.github.com/users/khaihkd/events{/privacy}",
    "received_events_url": "https://api.github.com/users/khaihkd/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-01-30T03:58:31Z",
  "updated_at": "2019-01-31T12:21:06Z",
  "closed_at": "2019-01-30T12:21:20Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "My contract is build on old `solidity` version (0.4.21), when I upgrage `solc` to latest version. I cannot verify it.\r\n\r\nContract\r\n```\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract MultiSigWallet {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint required);\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint public required;\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        require(transactions[transactionId].destination != 0);\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        require(!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != 0);\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        require(ownerCount <= MAX_OWNER_COUNT\r\n        && _required <= ownerCount\r\n        && _required != 0\r\n        && ownerCount != 0);\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function()\r\n    payable\r\n    {\r\n        if (msg.value > 0)\r\n            Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    function MultiSigWallet(address[] _owners, uint _required)\r\n    public\r\n    validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint i=0; i<_owners.length; i++) {\r\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n    public\r\n    onlyWallet\r\n    ownerDoesNotExist(owner)\r\n    notNull(owner)\r\n    validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n    public\r\n    onlyWallet\r\n    ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param newOwner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n    public\r\n    onlyWallet\r\n    ownerExists(owner)\r\n    ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        OwnerRemoval(owner);\r\n        OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n    public\r\n    onlyWallet\r\n    validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n    public\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n    public\r\n    ownerExists(msg.sender)\r\n    transactionExists(transactionId)\r\n    notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n    public\r\n    ownerExists(msg.sender)\r\n    confirmed(transactionId, msg.sender)\r\n    notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n    public\r\n    ownerExists(msg.sender)\r\n    confirmed(transactionId, msg.sender)\r\n    notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId];\r\n            txn.executed = true;\r\n            if (txn.destination.call.value(txn.value)(txn.data))\r\n                Execution(transactionId);\r\n            else {\r\n                ExecutionFailure(transactionId);\r\n                txn.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n    public\r\n    constant\r\n    returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n    internal\r\n    notNull(destination)\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n            });\r\n        transactionCount += 1;\r\n        Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n    public\r\n    constant\r\n    returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n    public\r\n    constant\r\n    returns (uint count)\r\n    {\r\n        for (uint i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n            || executed && transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n    public\r\n    constant\r\n    returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n    public\r\n    constant\r\n    returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n    public\r\n    constant\r\n    returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n            || executed && transactions[i].executed)\r\n            {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i=from; i<to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n}\r\n```\r\n\r\nverify code\r\n```\r\nvar solc = require('solc')\r\nvar input = {\r\n     language: 'Solidity',\r\n     sources: {\r\n         'MultiSigWallet': {\r\n              content: sourceCode\r\n          }\r\n     },\r\n     settings: {\r\n         outputSelection: {\r\n             '*': {\r\n                 '*': [ '*' ]\r\n             }\r\n          }\r\n    }\r\n}\r\n\r\nvar output = JSON.parse(solc.compile(JSON.stringify(input)))\r\nconsole.log(output)\r\n```\r\n\r\nAnd error response\r\n```\r\n{ errors:\r\n   [ { component: 'general',\r\n       formattedMessage:\r\n        'MultiSigWallet:6:1: ParserError: Source file requires different compiler version (current compiler is 0.5.3+commit.10d17f24.Emscripten.clang - note that nightly builds are considered to be strictly less than the released version\\ncontract MultiSigWallet {\\n^------^\\n',\r\n       message:\r\n        'Source file requires different compiler version (current compiler is 0.5.3+commit.10d17f24.Emscripten.clang - note that nightly builds are considered to be strictly less than the released version',\r\n       severity: 'error',\r\n       sourceLocation: { end: 195, file: 'MultiSigWallet', start: 187 },\r\n       type: 'ParserError' } ],\r\n  sources: {} }\r\nWARN: Error verify contract TypeError: Cannot read property 'MultiSigWallet' of undefined\r\n```",
  "closed_by": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/5906/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/5906/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/458924548",
    "html_url": "https://github.com/ethereum/solidity/issues/5906#issuecomment-458924548",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5906",
    "id": 458924548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODkyNDU0OA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T12:21:20Z",
    "updated_at": "2019-01-30T12:21:20Z",
    "author_association": "MEMBER",
    "body": "Just follow the message from the compiler:\r\n> Source file requires different compiler version (current compiler is 0.5.3+commit.10d17f24.Emscripten.clang - note that nightly builds are considered to be strictly less than the released version\r\n\r\nReplace the `pragma solidity ^0.4.21` with something matching your compiler. See https://solidity.readthedocs.io/en/v0.5.3/layout-of-source-files.html?highlight=pragma%20solidity#version-pragma",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/458924548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/459045476",
    "html_url": "https://github.com/ethereum/solidity/issues/5906#issuecomment-459045476",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5906",
    "id": 459045476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTA0NTQ3Ng==",
    "user": {
      "login": "khaihkd",
      "id": 4758892,
      "node_id": "MDQ6VXNlcjQ3NTg4OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4758892?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khaihkd",
      "html_url": "https://github.com/khaihkd",
      "followers_url": "https://api.github.com/users/khaihkd/followers",
      "following_url": "https://api.github.com/users/khaihkd/following{/other_user}",
      "gists_url": "https://api.github.com/users/khaihkd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khaihkd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khaihkd/subscriptions",
      "organizations_url": "https://api.github.com/users/khaihkd/orgs",
      "repos_url": "https://api.github.com/users/khaihkd/repos",
      "events_url": "https://api.github.com/users/khaihkd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khaihkd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T18:01:10Z",
    "updated_at": "2019-01-30T18:01:10Z",
    "author_association": "NONE",
    "body": "No, I think it is very bad I am implementing a block explorer. So, I cannot switch `solidity` version. Because, smart contract is not my. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/459045476/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/459048823",
    "html_url": "https://github.com/ethereum/solidity/issues/5906#issuecomment-459048823",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5906",
    "id": 459048823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTA0ODgyMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T18:10:51Z",
    "updated_at": "2019-01-30T18:10:51Z",
    "author_association": "MEMBER",
    "body": "I'm not fully sure what you want to accomplish, but you can always download an older version of the compiler and use that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/459048823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/459289177",
    "html_url": "https://github.com/ethereum/solidity/issues/5906#issuecomment-459289177",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5906",
    "id": 459289177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTI4OTE3Nw==",
    "user": {
      "login": "khaihkd",
      "id": 4758892,
      "node_id": "MDQ6VXNlcjQ3NTg4OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4758892?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/khaihkd",
      "html_url": "https://github.com/khaihkd",
      "followers_url": "https://api.github.com/users/khaihkd/followers",
      "following_url": "https://api.github.com/users/khaihkd/following{/other_user}",
      "gists_url": "https://api.github.com/users/khaihkd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/khaihkd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/khaihkd/subscriptions",
      "organizations_url": "https://api.github.com/users/khaihkd/orgs",
      "repos_url": "https://api.github.com/users/khaihkd/repos",
      "events_url": "https://api.github.com/users/khaihkd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/khaihkd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T10:11:20Z",
    "updated_at": "2019-01-31T10:12:17Z",
    "author_association": "NONE",
    "body": "it is possible. Because the users can use any solidity version to deploy smart contract. I cannot control about that. This is a big problem",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/459289177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/459324397",
    "html_url": "https://github.com/ethereum/solidity/issues/5906#issuecomment-459324397",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5906",
    "id": 459324397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTMyNDM5Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T12:21:06Z",
    "updated_at": "2019-01-31T12:21:06Z",
    "author_association": "MEMBER",
    "body": "@khaihkd we provide all versions of solidity for the emscripten platform. If you want to re-compile a smart contract to source-verify it, you need to use the exact same version of the compiler, there is no way around that. You have to be able to switch the version.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/459324397/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
