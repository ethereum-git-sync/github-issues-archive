{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/6713",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/6713/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/6713/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/6713/events",
  "html_url": "https://github.com/ethereum/solidity/issues/6713",
  "id": 442204188,
  "node_id": "MDU6SXNzdWU0NDIyMDQxODg=",
  "number": 6713,
  "title": "[Yul Optimizer] Function outliner",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    },
    {
      "id": 4437999539,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZ_sw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20effort",
      "name": "high effort",
      "color": "ff54f4",
      "default": false,
      "description": "A lot to implement but still doable by a single person. The task is large or difficult."
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "001dff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4438490842,
      "node_id": "LA_kwDOAm_5kc8AAAABCI3-2g",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/should%20have",
      "name": "should have",
      "color": "ffbe6c",
      "default": false,
      "description": "We like the idea but itâ€™s not important enough to be a part of the roadmap."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2019-05-09T12:11:59Z",
  "updated_at": "2022-09-26T21:34:00Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "In the sol->yul code generation, we end up with quite a bit of code that contains similar or even identical blocks of code. It would be nice to have an optimizer component that e.g. recognizes common suffixes of functions or common internal blocks which can then be moved to a single function - as long as the number of local variables that are modified in that block but defined outside is limited.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/6713/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/6713/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/490905523",
    "html_url": "https://github.com/ethereum/solidity/issues/6713#issuecomment-490905523",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6713",
    "id": 490905523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDkwNTUyMw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-09T13:30:48Z",
    "updated_at": "2019-05-09T13:38:26Z",
    "author_association": "MEMBER",
    "body": "Consider a block like (with external vars ``b`` and ``c``):\r\n```\r\n{\r\n    let d := add(b, b)\r\n    c := d\r\n}\r\n```\r\n\r\nWe can compute a hash based on:\r\n```\r\n{\r\n  let <internal0> := add(<external0>, <external0>)\r\n  <external1> := <internal0>\r\n}\r\n```\r\nappending the number of external references (i.e. ``2``) to the hash or storing it alongside the hash - let's call that ``BLOCK0HASH``.\r\n\r\nThen for\r\n```\r\n{\r\n    let aa := mload(0)\r\n    let bb := mload(1)\r\n    let cc := mload(2)\r\n\r\n    {\r\n        let dd := add(bb, bb)\r\n        cc := dd\r\n    }\r\n    mstore(aa, cc)\r\n}\r\n```\r\n(The inner block will also have hash value ``BLOCK0HASH``)\r\nWe can compute a hash like\r\n```\r\n{\r\n    let <internal0> := mload(0)\r\n    let <internal1> := mload(1)\r\n    let <internal2> := mload(2)\r\n\r\n    IMPORT_BLOCK(BLOCK0HASH, <internal1>, <internal2>)\r\n    mstore(<internal0>, <internal2>)\r\n}\r\n```\r\n\r\nFor every block the hash can be stored in a hash map to allow lookups.\r\nFor blocks with identical hashs we can compute structural equality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/490905523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/490908484",
    "html_url": "https://github.com/ethereum/solidity/issues/6713#issuecomment-490908484",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6713",
    "id": 490908484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDkwODQ4NA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-09T13:37:55Z",
    "updated_at": "2019-05-09T13:37:55Z",
    "author_association": "MEMBER",
    "body": "We can add the \"block hash\" of a function body to the RoughHeuristic in ``EquivalentFunctionDetector`` as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/490908484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/491022581",
    "html_url": "https://github.com/ethereum/solidity/issues/6713#issuecomment-491022581",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6713",
    "id": 491022581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTAyMjU4MQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-09T18:49:31Z",
    "updated_at": "2019-05-09T18:50:28Z",
    "author_association": "MEMBER",
    "body": "Hm... it's still a bit more complicated... the external variables in the block have to be split into function parameters and return values - return values have to be the union of all externally referenced variables that are accessed after any occurrance of the block to be outlined... moreover those variables might not only be written to, but they might have been read from, so they might have to be passed as arguments to the outlined function as well - might be worth considering to require SSA form to alleviate that.\r\nLet alone to find a good heuristics about when to outline equivalent blocks or not, but that'd be a second step. Quite some stuff left to do after detecting equivalent blocks in any case :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/491022581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/491037979",
    "html_url": "https://github.com/ethereum/solidity/issues/6713#issuecomment-491037979",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6713",
    "id": 491037979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTAzNzk3OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-09T19:38:42Z",
    "updated_at": "2019-05-09T19:38:42Z",
    "author_association": "MEMBER",
    "body": "Perhaps as a first step, we can do the full thing, i.e. outlining the block `B[ext1, ext2, ext3]` as \r\n```\r\next1, ext2, ext3 := f(ext1, ext2, ext3)\r\n```\r\nA second step (that is actually needed anyway) can analyze if a function return variable can be removed because it is not used at any of its call sites (we need a similar thing for parameters, but that analysis would be local to the function).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/491037979/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/491200898",
    "html_url": "https://github.com/ethereum/solidity/issues/6713#issuecomment-491200898",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6713",
    "id": 491200898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTIwMDg5OA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-10T08:12:39Z",
    "updated_at": "2019-05-10T08:12:39Z",
    "author_association": "MEMBER",
    "body": "Abstract Syntax Merkle Tree? :p",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/491200898/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/493379408",
    "html_url": "https://github.com/ethereum/solidity/issues/6713#issuecomment-493379408",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6713",
    "id": 493379408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MzM3OTQwOA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-17T09:01:14Z",
    "updated_at": "2019-05-17T09:01:14Z",
    "author_association": "MEMBER",
    "body": "Another approach to this would be to have a step that just outlines everything that has a sufficient size and has few inputs and outputs (although we'd still have to detect which groups of statements qualify for that), then simplify and hope that we end up having equivalent functions - then we could inline everything back that's still only used once. That might even help with the stack height problem (if a part of a large function has few inputs and outputs, but lots of local intermediate variables, outlining it might be good, even if the outlined function is used only once).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/493379408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/625281005",
    "html_url": "https://github.com/ethereum/solidity/issues/6713#issuecomment-625281005",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6713",
    "id": 625281005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTI4MTAwNQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-07T14:13:34Z",
    "updated_at": "2020-05-07T14:13:34Z",
    "author_association": "MEMBER",
    "body": "Note, mainly to myself: my most recent ideas around this would go along the lines of the following:\r\nConsider:\r\n```\r\n{\r\n  let x := mload(a)\r\n  let y := add(calldataload(b), x)\r\n  b := x\r\n  if y { b := mul(b, 2) }\r\n  let z := mul(y, 2)\r\n  sstore(x, z)\r\n}\r\n```\r\nMove all declarations up front:\r\n\r\n```\r\n{\r\n  let x let y let z\r\n  x := mload(a)\r\n  y := add(calldataload(b), x)\r\n  b := x\r\n  if y { b := mul(b, 2) }\r\n  z := mul(y, 2)\r\n  sstore(x, z)\r\n}\r\n```\r\nIntroduce \"basic control flow blocks\":\r\n\r\n```\r\n{\r\n  let x let y let z\r\n  {\r\n    x := mload(a)\r\n    y := add(calldataload(b), x)\r\n    b := x\r\n  }\r\n  {\r\n    if y { b := mul(b, 2) }\r\n  }\r\n  {\r\n    z := mul(y, 2)\r\n    sstore(x, z)\r\n  }\r\n}\r\n```\r\nOutline those blocks \"naively:\r\n```\r\nfunction f1(x_in, a_in, y_in, b_in) -> x,a,y,b {\r\n    x := x_in   a := a_in    y := y_in    b := b_in\r\n    x := mload(a)\r\n    y := add(calldataload(b), x)\r\n    b := x\r\n}\r\nfunction f2(y_in, b_in) -> y, b\r\n{\r\n    y := y_in  b := b_in\r\n    if y { b := mul(b, 2) } // maybe the inner block would be outlined in the same step\r\n}\r\nfunction f3(z_in, y_in, x_in) -> z, y, x {\r\n    z := z_in    y := y_in    x := x_in\r\n    z := mul(y, 2)\r\n    sstore(x, z)\r\n}\r\n{\r\n  let x let y let z\r\n  x, a, y, b := f1(x, a, y, b)\r\n  y, b := f2(y, b)\r\n  z, y, x := f3(z, y, x)\r\n}\r\n```\r\n\r\nNext thing would be to remove redundant arguments and maybe figure out what returns are actually needed. Might be better to start in SSA form or something like that.\r\nMaybe some more simplification at this stage. Then equivalent function detection. Then inlining again.\r\nThis could potentially solve the precondition modifier case already. But the basic control flow blocks will still potentially be large and it'll be hard to find patterns in them. Also not sure that this is the best structure for common patterns in general - there are potential patterns this will miss by design.\r\nStill not sure about all this in general.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/625281005/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/933827566",
    "html_url": "https://github.com/ethereum/solidity/issues/6713#issuecomment-933827566",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6713",
    "id": 933827566,
    "node_id": "IC_kwDOAm_5kc43qRPu",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-04T20:23:50Z",
    "updated_at": "2021-10-04T20:26:57Z",
    "author_association": "MEMBER",
    "body": "One very important use-case for this is modifiers: We currently generate code of the form\r\n```\r\nfunction f() {\r\n  modifier_f_1()\r\n}\r\nfunction modifier_f_1() {\r\n  ...\r\n  f_inner()\r\n}\r\n```\r\nWhere `modifier_f_1` is a function specialized for `f`  - i.e. the modifier code is copied for each of its uses.\r\n\r\nAt least this special use-case could be detected by the optimizer and outlined.\r\n\r\nMaybe we can even do something like this on the opcode level?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/933827566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
