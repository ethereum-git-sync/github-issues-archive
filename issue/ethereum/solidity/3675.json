{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3675",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3675/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3675/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3675/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3675",
  "id": 303139893,
  "node_id": "MDU6SXNzdWUzMDMxMzk4OTM=",
  "number": 3675,
  "title": "Inheritance produces inconsistent override/coexistence/error behavior",
  "user": {
    "login": "wbt",
    "id": 563406,
    "node_id": "MDQ6VXNlcjU2MzQwNg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wbt",
    "html_url": "https://github.com/wbt",
    "followers_url": "https://api.github.com/users/wbt/followers",
    "following_url": "https://api.github.com/users/wbt/following{/other_user}",
    "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
    "organizations_url": "https://api.github.com/users/wbt/orgs",
    "repos_url": "https://api.github.com/users/wbt/repos",
    "events_url": "https://api.github.com/users/wbt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wbt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-03-07T15:20:53Z",
  "updated_at": "2020-01-30T15:30:53Z",
  "closed_at": "2020-01-30T15:30:53Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "(Summary at end.)\r\n\r\nI have the following contracts:\r\n\r\n`Alpha.sol`:  \r\n\r\n    pragma solidity ^0.4.4;\r\n    contract Alpha {\r\n        uint firstField;\r\n        uint public secondField;\r\n\r\n        event FirstFieldSet(uint priorFirstField, uint newFirstField, string whereSet);\r\n\r\n        function getFirstField() public view returns (uint) {\r\n            return firstField;\r\n        }\r\n\r\n        //Getter automatic from 'public' keyword on secondField:\r\n        //function secondField() public view returns (uint) {\r\n        //    return secondField;\r\n        //}\r\n\r\n        function setFirstField(uint newValue) public {\r\n            FirstFieldSet(firstField, newValue, 'Alpha');\r\n            firstField = newValue;\r\n        }\r\n    }\r\n\r\n`Beta.sol`:  \r\n\r\n    pragma solidity ^0.4.4;\r\n    import \"./Alpha.sol\";\r\n\r\n    contract Beta is Alpha {\r\n        bytes32 firstField;\r\n        bytes32 public secondField;\r\n\r\n        event FirstFieldSet(bytes32 priorFirstField, bytes32 newFirstField, string whereSet);\r\n\r\n        //Including this produces \"TypeError: Overriding function return types differ.\"\r\n        //function getFirstField() public view returns (bytes32) {\r\n        //    return firstField;\r\n        //}\r\n\r\n        function getFirstField2() public view returns (bytes32) {\r\n            return firstField;\r\n        }\r\n\r\n        //Getter automatic from 'public' keyword on secondField:\r\n        //function secondField() public view returns (bytes32) {\r\n        //    return secondField;\r\n        //}\r\n\r\n        function setFirstField(bytes32 newValue) public {\r\n            FirstFieldSet(firstField, newValue, 'Beta');\r\n            firstField = newValue;\r\n        }\r\n    }\r\n\r\nBoth contracts have two fields with the same name, but in `Beta` they are of type `bytes32` while in `Alpha` they are of type `uint256`.\r\n\r\nBoth contracts also have two `view` functions which are simple getters returning the values of the two fields, respectively.  \r\n\r\nFor `firstField` the getter `getFirstField()` is manually defined.  \r\nIncluding this function in `Beta` results in a compile-time `TypeError: Overriding function return types differ.`\r\n\r\nBoth contracts' abi includes the following:\r\n\r\n    {\r\n    \"constant\": true,\r\n    \"inputs\": [],\r\n    \"name\": \"getFirstField\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"payable\": false,\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n    }\r\n`Beta`'s abi also includes:\r\n\r\n    {\r\n    \"constant\": true,\r\n    \"inputs\": [],\r\n    \"name\": \"getFirstField2\",\r\n    \"outputs\": [\r\n    {\r\n      \"name\": \"\",\r\n      \"type\": \"bytes32\"\r\n    }\r\n    ],\r\n    \"payable\": false,\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n    }\r\n\r\n----\r\nFor `secondField`, the getter is automatically created by use of the `public` keyword.  There is no compile-time error.  \r\n\r\n`Alpha`'s abi includes this function, as expected:\r\n\r\n    {\r\n    \"constant\": true,\r\n    \"inputs\": [],\r\n    \"name\": \"secondField\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"payable\": false,\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n    }\r\n\r\n`Beta`'s abi has the same function but the first output type for `secondField` is `bytes32`.  \r\n\r\n--------\r\n\r\n`Alpha`'s abi includes these, as expected:\r\n\r\n    {\r\n      \"constant\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"name\": \"newValue\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"setFirstField\",\r\n      \"outputs\": [],\r\n      \"payable\": false,\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    }\r\n    \r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": false,\r\n          \"name\": \"priorFirstField\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"indexed\": false,\r\n          \"name\": \"newFirstField\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"indexed\": false,\r\n          \"name\": \"whereSet\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"name\": \"FirstFieldSet\",\r\n      \"type\": \"event\"\r\n    }\r\n\r\n`Beta`'s abi includes a copy of these as-is, and a **second copy** of the same function & event where the input types are `bytes32`.\r\n\r\n--------------\r\n\r\nAll of the above also happen if `Beta` uses `uint32` instead of `bytes32`.   In either case, when calling `setFirstField` with a low integer (e.g 42), the version from `Beta` is called.  \r\nIf `Beta` uses `string` instead of `bytes32`, the same call to `Beta` will use the code from `Alpha`.  \r\n\r\n--------------------\r\n\r\nSo, to reflect, we have three functions in `Beta` which, on reading the code, appear to override functions in `Alpha`, but the compiler handles them in more than three different ways:\r\n\r\n - For getter `getFirstField`, a compile-time error is thrown.\r\n - For getter `secondField`, no error or warning is shown and the descendant's getter method silently overrides the method from its parent.\r\n - For setter `setFirstField`, and event `FirstFieldSet`, no error or warning is shown and the descendant's setter method and event exist alongside the method from its parent.  In this case, which function gets called depends on the type of data passed in; code from the parent function may or may not be accessible depending on type compatibility.\r\n\r\nThe behavior I would expect is **consistency across these cases.**  \r\n\r\nI think I would prefer the handling used by `secondField`, where a descendant's fields and methods (and even ideally structs) are merged in with the parent's, and the descendant's fully replace the parent's for any cases in which elements have the same name.\r\n\r\nI observe these issues using Solidity version  0.4.18+commit.9cf6e910.Emscripten.clang with Truffle, and version 0.4.20+commit.3155dd80.Emscripten.clang with Remix, and believe it likely to exist in other versions I didn't test.\r\n",
  "closed_by": {
    "login": "Marenz",
    "id": 424752,
    "node_id": "MDQ6VXNlcjQyNDc1Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Marenz",
    "html_url": "https://github.com/Marenz",
    "followers_url": "https://api.github.com/users/Marenz/followers",
    "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
    "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
    "organizations_url": "https://api.github.com/users/Marenz/orgs",
    "repos_url": "https://api.github.com/users/Marenz/repos",
    "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Marenz/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3675/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3675/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/371227828",
    "html_url": "https://github.com/ethereum/solidity/issues/3675#issuecomment-371227828",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3675",
    "id": 371227828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTIyNzgyOA==",
    "user": {
      "login": "wbt",
      "id": 563406,
      "node_id": "MDQ6VXNlcjU2MzQwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbt",
      "html_url": "https://github.com/wbt",
      "followers_url": "https://api.github.com/users/wbt/followers",
      "following_url": "https://api.github.com/users/wbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
      "organizations_url": "https://api.github.com/users/wbt/orgs",
      "repos_url": "https://api.github.com/users/wbt/repos",
      "events_url": "https://api.github.com/users/wbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T18:02:55Z",
    "updated_at": "2018-03-07T18:02:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I disagree with the \"disallow override\" action proposed in the summaries of #1565 and #2563, though I do like the idea of providing warnings unless an explicit keyword (like `override`) is used.  \r\nRequiring explicit references (as in #2116) could help with the inconsistency in the third bullet point, in which the called method depends on parameter type and some code may or may not be accessible. \r\n\r\nAlso, I think this issue could affect security with execution that differs significantly from how the code reads, in an exploitable way, whether the coding bug is introduced accidentally or not. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/371227828/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/371252268",
    "html_url": "https://github.com/ethereum/solidity/issues/3675#issuecomment-371252268",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3675",
    "id": 371252268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTI1MjI2OA==",
    "user": {
      "login": "wbt",
      "id": 563406,
      "node_id": "MDQ6VXNlcjU2MzQwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/563406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wbt",
      "html_url": "https://github.com/wbt",
      "followers_url": "https://api.github.com/users/wbt/followers",
      "following_url": "https://api.github.com/users/wbt/following{/other_user}",
      "gists_url": "https://api.github.com/users/wbt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wbt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wbt/subscriptions",
      "organizations_url": "https://api.github.com/users/wbt/orgs",
      "repos_url": "https://api.github.com/users/wbt/repos",
      "events_url": "https://api.github.com/users/wbt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wbt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T19:17:54Z",
    "updated_at": "2018-03-07T19:23:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "The [official documentation](https://solidity.readthedocs.io/en/develop/contracts.html#overload-resolution-and-argument-matching) incorrectly says: \r\n\r\n>Overloaded functions are selected by matching the function declarations in the current scope to the arguments supplied in the function call. Functions are selected as overload candidates if all arguments can be implicitly converted to the expected types. If there is not exactly one candidate, resolution fails.\r\n\r\nThe behavior observed here (third bullet) show that resolution does not necessarily fail if there is more than one candidate.   The specific example given doesn't seem to work as described when the two functions are in different contracts and one inherits from the other. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/371252268/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/371563795",
    "html_url": "https://github.com/ethereum/solidity/issues/3675#issuecomment-371563795",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3675",
    "id": 371563795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTU2Mzc5NQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-08T17:38:43Z",
    "updated_at": "2018-03-08T17:38:43Z",
    "author_association": "MEMBER",
    "body": "@wbt I haven't read everything, but I think what is missing in the documentation is explaining how overloading and overriding interact.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/371563795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/580308126",
    "html_url": "https://github.com/ethereum/solidity/issues/3675#issuecomment-580308126",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3675",
    "id": 580308126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDMwODEyNg==",
    "user": {
      "login": "Marenz",
      "id": 424752,
      "node_id": "MDQ6VXNlcjQyNDc1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Marenz",
      "html_url": "https://github.com/Marenz",
      "followers_url": "https://api.github.com/users/Marenz/followers",
      "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
      "organizations_url": "https://api.github.com/users/Marenz/orgs",
      "repos_url": "https://api.github.com/users/Marenz/repos",
      "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Marenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-30T15:30:53Z",
    "updated_at": "2020-01-30T15:30:53Z",
    "author_association": "MEMBER",
    "body": "In the current version, (0.6.2 or so), all points except your last one no longer work. \r\nAs far as I know the last point (functions of the same name but different parameters don't cause an error) is the desired behavior.\r\n\r\nI am closing this, for now but feel free to re-open if you find that your points have not been fixed properly :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/580308126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
