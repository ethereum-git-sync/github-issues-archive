{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13798",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13798/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13798/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13798/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13798",
  "id": 1492598462,
  "node_id": "I_kwDOAm_5kc5Y9z6-",
  "number": 13798,
  "title": "Explicit contract variable declarations",
  "user": {
    "login": "zemse",
    "id": 22412996,
    "node_id": "MDQ6VXNlcjIyNDEyOTk2",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zemse",
    "html_url": "https://github.com/zemse",
    "followers_url": "https://api.github.com/users/zemse/followers",
    "following_url": "https://api.github.com/users/zemse/following{/other_user}",
    "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
    "organizations_url": "https://api.github.com/users/zemse/orgs",
    "repos_url": "https://api.github.com/users/zemse/repos",
    "events_url": "https://api.github.com/users/zemse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zemse/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 467898404,
      "node_id": "MDU6TGFiZWw0Njc4OTg0MDQ=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/breaking%20change%20:warning:",
      "name": "breaking change :warning:",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438006499,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaa4w",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20effort",
      "name": "low effort",
      "color": "ffb1fa",
      "default": false,
      "description": "There is not much implementation work to be done. The task is very easy or tiny."
    },
    {
      "id": 4438157609,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjpKQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20impact",
      "name": "low impact",
      "color": "5d71ff",
      "default": false,
      "description": "Changes are not very noticeable or potential benefits are limited."
    },
    {
      "id": 4699440809,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvGqQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/closed%20due%20inactivity",
      "name": "closed due inactivity",
      "color": "91535E",
      "default": false,
      "description": "The issue/PR was automatically closed due to inactivity."
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-12-12T19:30:05Z",
  "updated_at": "2023-04-08T12:04:59Z",
  "closed_at": "2023-04-08T12:04:59Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "<!--## Prerequisites\r\n\r\n- First, many thanks for taking part in the community. We really appreciate that.\r\n- We realize there is a lot of data requested here. We ask only that you do your best to provide as much information as possible so we can better help you.\r\n- Support questions are better asked in one of the following locations:\r\n    - [Solidity chat](https://gitter.im/ethereum/solidity)\r\n    - [Stack Overflow](https://ethereum.stackexchange.com/)\r\n- Ensure the issue isn't already reported (check `feature` and `language design` labels).\r\n- If you feel uncertain about your feature request, perhaps it's better to open a language design or feedback forum thread via the issue selector, or by going to the forum directly.\r\n    - [Solidity forum](https://forum.soliditylang.org/)\r\n\r\n*Delete the above section and the instructions in the sections below before submitting*\r\n-->\r\n\r\n## Abstract\r\n\r\n<!--Please describe by example what problem you see in the current Solidity language and reason about it.-->\r\n\r\nCurrently, when a variable is declared without any modifier being specified, it is considered an internal storage variable implicitly.\r\n\r\n```solidity\r\ncontract Hello {\r\n    uint age = 2;\r\n    // above is same as:\r\n    uint internal age = 2;\r\n}\r\n```\r\n\r\n## Motivation\r\n\r\n<!--In this section you describe how you propose to address the problem you described earlier, including by giving one or more exemplary source code snippets for demonstration.-->\r\n\r\nHave a look at the below two code snippets:\r\n\r\n```solidity\r\ncontract Logic {\r\n    address recipient = 0xSomeChecksumAddress;\r\n\r\n    function rescue(IERC20 token) public {\r\n        uint bal = token.balanceOf(address(this));\r\n        usdc.transfer(recipient, bal);\r\n    }\r\n}\r\n\r\ncontract Logic {\r\n    function rescue(IERC20 token) public {\r\n        address recipient = 0xSomeChecksumAddress;\r\n\r\n        uint bal = token.balanceOf(address(this));\r\n        token.transfer(recipient, bal);\r\n    }\r\n}\r\n```\r\n\r\nThey both look similar however they function differently under a delegatecall. The first Logic would SLOAD slot 0 while the second Logic would have the address in its bytecode. This might not be a big deal when looking at code with carefully, but might slip when in a hurry. It would be sweet if languages/toolings point out potential mistakes by dev that are easy to detect.\r\n\r\nExplicit requirements, notably a lot of them introduced in 0.5.0 ([link](https://docs.soliditylang.org/en/latest/050-breaking-changes.html#explicitness-requirements)), were a great addition to Solidity language because they prevent dev mistakes.\r\n\r\n## Specification\r\n\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow any developer to implement the functionality.-->\r\n\r\nI think just not accepting the declaration of storage variables which is ascetically similar to the declaration of temporary variables can be helpful. Some ideas to deal with this, might not be the best.\r\n\r\n### Option 1: Explicit mutability when assigned\r\n\r\nWhen the variable is assigned, require the developer to specify `mutable` or `immutable`. This could be ideal and should prevent such dev mistakes.\r\n\r\n```solidity\r\ncontract Hello {\r\n    uint age; // works\r\n    uint age = 2; // compiler error\r\n    unit constant age = 2; // works, value stored in bytecode\r\n    unit mutable age = 2; // works, value stored in storage\r\n}\r\n```\r\n\r\n### Option 2: Just require the developer to specify at least one modifier\r\n\r\nThis makes it visually clear that it is a storage variable declaration and not a temporary variable stored in bytecode.\r\n\r\n```solidity\r\ncontract Hello {\r\n    uint age; // works\r\n    uint age = 2; // compiler error\r\n    unit immutable age = 2; // works\r\n    unit public age = 2; // works\r\n    unit internal age = 2; // works\r\n    unit internal immutable age = 2; // works\r\n}\r\n```\r\n\r\n## Backwards Compatibility\r\n\r\n<!--\r\nAll language changes that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity.\r\n\r\nPlease describe how you propose to deal with these incompatibilities.\r\n-->\r\n\r\nThis feature request proposes a backwards incompatible change. Any code that declares a storage variable along with an initialization value without a modifier will trigger a compiler error.\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13798/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13798/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1347262528",
    "html_url": "https://github.com/ethereum/solidity/issues/13798#issuecomment-1347262528",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13798",
    "id": 1347262528,
    "node_id": "IC_kwDOAm_5kc5QTZhA",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-12T20:31:12Z",
    "updated_at": "2022-12-12T20:31:12Z",
    "author_association": "MEMBER",
    "body": "So the issue is that it's easy to be unaware of the cost of an operation when looking at an expression? I'm not really sure if this change would fix that. It addresses only one special case - using a variable directly - and even then only if you have its definition close at hand to look at it.  What if it's hidden in a function instead?\r\n\r\nAlso, probably a more consistent way to go about it would be to require explicit location for all storage variables:\r\n```solidity\r\ncontract C {\r\n    uint storage age;\r\n    address[] storage users;\r\n    bool storage public enabled;\r\n    bool immutable validate;\r\n}\r\n```\r\n\r\nI wouldn't actually mind that but I also don't see big demand for that level of explicitness. The risks are much smaller than in case of functions - making a function `public` by accident can be a serious bug and very hard to notice while using `storage` instead of `immutable` just uses more gas.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1347262528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1347900802",
    "html_url": "https://github.com/ethereum/solidity/issues/13798#issuecomment-1347900802",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13798",
    "id": 1347900802,
    "node_id": "IC_kwDOAm_5kc5QV1WC",
    "user": {
      "login": "zemse",
      "id": 22412996,
      "node_id": "MDQ6VXNlcjIyNDEyOTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zemse",
      "html_url": "https://github.com/zemse",
      "followers_url": "https://api.github.com/users/zemse/followers",
      "following_url": "https://api.github.com/users/zemse/following{/other_user}",
      "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
      "organizations_url": "https://api.github.com/users/zemse/orgs",
      "repos_url": "https://api.github.com/users/zemse/repos",
      "events_url": "https://api.github.com/users/zemse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zemse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-12-13T08:09:22Z",
    "updated_at": "2022-12-13T08:09:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So the issue is that it's easy to be unaware of the cost of an operation when looking at an expression?\r\n\r\nThe gas cost aspect is not a big deal, someone who intends to optimize for costs should be able to see it. \r\n\r\nThe motivation for asking explicitness is for the case when it works under a delegatecall. Imagine funds being transferred to a zero address (or some weird address) because the logic loads `recipient` from storage. Libraries are always supposed to be delegate called, hence there is an explicit requirement to include a constant keyword in a variable declaration.\r\n\r\n```solidity\r\nlibrary Logic {\r\n    uint age = 2; // TypeError: Library cannot have non-constant state variables\r\n    uint constant age = 2; // works\r\n}\r\n```\r\n\r\nHowever, contracts can also be delegate called, but one who intends to declare a constant, forgets to write constant keyword, the contract gets compiled and something else happens. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1347900802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1492951791",
    "html_url": "https://github.com/ethereum/solidity/issues/13798#issuecomment-1492951791",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13798",
    "id": 1492951791,
    "node_id": "IC_kwDOAm_5kc5Y_KLv",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-04-01T12:04:43Z",
    "updated_at": "2023-04-01T12:04:43Z",
    "author_association": "NONE",
    "body": "This issue has been marked as stale due to inactivity for the last 90 days.\nIt will be automatically closed in 7 days.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1492951791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1500877704",
    "html_url": "https://github.com/ethereum/solidity/issues/13798#issuecomment-1500877704",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13798",
    "id": 1500877704,
    "node_id": "IC_kwDOAm_5kc5ZdZOI",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-04-08T12:04:57Z",
    "updated_at": "2023-04-08T12:04:57Z",
    "author_association": "NONE",
    "body": "Hi everyone! This issue has been automatically closed due to inactivity.\nIf you think this issue is still relevant in the latest Solidity version and you have something to [contribute](https://docs.soliditylang.org/en/latest/contributing.html), feel free to reopen.\nHowever, unless the issue is a concrete proposal that can be implemented, we recommend starting a language discussion on the [forum](https://forum.soliditylang.org) instead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1500877704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
