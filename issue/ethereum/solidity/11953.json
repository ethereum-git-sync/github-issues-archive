{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11953",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11953/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11953/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11953/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11953",
  "id": 995993412,
  "node_id": "I_kwDOAm_5kc47XadE",
  "number": 11953,
  "title": "Allowing regular constructor syntax for user defined value types",
  "user": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438006499,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaa4w",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20effort",
      "name": "low effort",
      "color": "ffb1fa",
      "default": false,
      "description": "There is not much implementation work to be done. The task is very easy or tiny."
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "001dff",
      "default": false,
      "description": "Default level of impact"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-09-14T13:03:06Z",
  "updated_at": "2022-09-26T21:31:33Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "User defined value types currently only allow constructions via the `UserDefineType.wrap(...)` function call. This can be rather verbose, especially when we allow operators on the type.\r\n\r\n\r\n```solidity\r\ntype MyInt is int;\r\nMyInt x;\r\nx + MyInt.wrap(5);\r\n// v/s\r\nx + MyInt(1);\r\n// v/s more controversial implicit literal conversion\r\nx + 1;\r\n```\r\n\r\n**Proposal**: for a user defined type `Type T is V;` allow the syntax `T(<type V>)` to construct an element. This is in line with the same syntax for built-in types as well as for structs.\r\n\r\n---\r\n\r\nA second problem with `.wrap` and `.unwrap` is the lack of *type-encapsulation*. As long as the type `MyInt` is visible in the context, so are the functions `MyInt.wrap` and `MyInt.unwrap`. This makes compiler enforced type-encapsulation impossible, currently.\r\n\r\nOne way to solve this is allowing the constructor only in the same source unit as the type declaration.\r\n```solidity\r\n==== Source: A ====\r\ntype MyInt is int;\r\n==== Source: B ====\r\nimport {MyInt} from \"A\";\r\n// this would be a compile error as the constructor is not 'public'\r\nMyInt(1);\r\n```\r\n\r\nThis is also how rust solves it: see section [Problem 1](https://www.worthe-it.co.za/blog/2020-10-31-newtype-pattern-in-rust.html).\r\n\r\n(As @ekpyron pointed out, encapsulation isn't an issue exclusively with `.wrap` and `.unwrap`--we can enforce the same rules to `.wrap` and `.unwrap`.)\r\n\r\nAs a side proposal: perhaps it is worthwhile to allow `type MyInt is public int;` which would expose the `MyInt(...)` constructor in other source units. However, this can be done separately in the future.\r\n\r\n---\r\n\r\n*Issues*\r\n\r\nThe proposed syntax looks quite similar to conversions. This may be confusing. For example, in  `type Fixed18 is int;`, a user may confuse `Fixed18(1)` to mean `Fixed18.wrap(10**18)`. Encapsulation may be a solution for this. Where a fixed point library can implement it as follows:\r\n```solidity\r\n==== Source: FixedMath ====\r\ntype Fixed18 is int;\r\nfunction toFixed18(int x) pure returns (Fixed18) { return Fixed18(x * 10**18); }\r\n==== Source: B ====\r\nimport {Fixed18, toFixed} from \"A\";\r\n// only toFixed18() is accessible here.\r\n// Fixed18(5) would not typecheck here\r\n```\r\n\r\nOther issues (raised by @ekpyron and @chriseth):\r\n- The construction syntax is unnamed, and this only works if there is clearly one way to do it.\r\n- Looking at `MyInt(5)` only as construction, rather than conversion, might require changing all the existing conversions. Relevant: https://github.com/ethereum/solidity/issues/11284.\r\n- Potential issues with generics in the future.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11953/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11953/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919135882",
    "html_url": "https://github.com/ethereum/solidity/issues/11953#issuecomment-919135882",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11953",
    "id": 919135882,
    "node_id": "IC_kwDOAm_5kc42yOaK",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T13:10:49Z",
    "updated_at": "2021-09-14T13:10:49Z",
    "author_association": "MEMBER",
    "body": "Encapsulation works just as well with `wrap` and `unwrap`. We can just remove them from the type outside of whatever scope this should be restricted to - but still have defined explicit conversions.\r\nSo this really doesn't have anything to do with wrap/unwrap vs conversion syntax.\r\n\r\nAnd as you say: as long as ``MyInt(...)`` is our conversion syntax for other types, we should also treat it as conversions and not as construction for user-defined types, otherwise things become inconsistent and confusing.\r\nOnce we have different conversions I'd be very happy to use ``MyInt(...)``as construction - however, what you haven't talked about at all is destruction - how do you imagine that to work? Is pattern matching another requirement for this change or do you have a different solution?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919135882/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919156281",
    "html_url": "https://github.com/ethereum/solidity/issues/11953#issuecomment-919156281",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11953",
    "id": 919156281,
    "node_id": "IC_kwDOAm_5kc42yTY5",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T13:33:49Z",
    "updated_at": "2021-09-14T13:33:49Z",
    "author_association": "MEMBER",
    "body": "I think it is a good thing that construction from the underlying type is verbose by default. For fixed point types, this is exactly what one wants. We can allow user-defined implicit conversion and then use explicit and implicit conversion interchangeably (explicit conversion should be done by a named function).\r\n\r\nI'm not really sure where this issue is getting at, but operators are not a problem in my opinion:\r\n```\r\nMyInt x;\r\nx + 1;\r\n```\r\nworks as long as there is\r\n```\r\nusing {myAdd as +} for MyInt;\r\nfunction myAdd(MyInt x, uint y) pure returns (MyInt) { ... }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919156281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
