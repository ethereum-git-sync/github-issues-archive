{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/5766/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/5766/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/5766/events",
  "html_url": "https://github.com/ethereum/solidity/issues/5766",
  "id": 397287399,
  "node_id": "MDU6SXNzdWUzOTcyODczOTk=",
  "number": 5766,
  "title": "[Yul/EVM] Discussion: memory escalation of local variables.",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2019-01-09T09:43:53Z",
  "updated_at": "2022-06-04T05:29:06Z",
  "closed_at": "2022-06-04T05:29:06Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Problem: only the last 16 stack slots are accessible. Especially since the optimizer may generate new local variables we should be able to deal with situations, in which the accessible stack height  is no longer sufficient for accessing all necessary local variables.\r\nSolution: Escalate local variables to memory, if stack is insufficient.\r\n\r\nConcept:\r\n\r\nFixed memory location ``0x80`` contains a pointer to the current \"memory variable stack\". It is updated on function entry and restored on function exit.\r\nFixed memory location ``0xA0`` points to the first entry in a linked list of free chunks of memory to be used as memory variable stack or zero, if no free chunk is available.\r\n\r\n\r\nConvert the following:\r\n```\r\nfunction h() -> x\r\n{\r\n\tlet a_1 := 1\r\n\tlet a_2 := 2\r\n\tlet a_3 := 3\r\n\tlet a_4 := 4\r\n\tlet a_5 := 5\r\n\tlet a_6 := 6\r\n\tlet a_7 := 7\r\n\tlet a_8 := 8\r\n\tlet a_9 := 9\r\n\tlet a_10 := 10\r\n\tlet a_11 := 11\r\n\tlet a_12 := 12\r\n\tlet a_13 := 13\r\n\tlet a_14 := 14\r\n\tlet a_15 := 15\r\n\tlet a_16 := 16\r\n\tlet a_17 := 17\r\n\tlet a_18 := 18\r\n\tlet a_19 := 19\r\n\r\n\r\n\tlet b := f(a_1, a_2, a_3, a_4, a_5)\r\n\t\r\n\tlet c := g(a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19)\r\n\r\n\tx := ltu256(b, c);\r\n}\r\n```\r\nto this:\r\n```\r\nfunction h2() -> x\r\n{\r\n\t{\r\n\t\t// fetch \"re-usable memory chunk pointer\"\r\n\t\tlet memstack := mload(0xA0)\r\n\t\tswitch memstack {\r\n\t\t\tcase 0 { // no re-usable memory chunk; allocate new chunk\r\n\t\t\t\tmemstack := mload(0x40)\r\n\t\t\t\tmstore(0x40, memstack + MAX_MEMSTACK_SIZE) // MAX_MEMSTACK_SIZE is the size of the memory stack needed by the globally \"worst\" function\r\n\t\t\t}\r\n\t\t\tdefault { // we found a re-usable memory chunk\r\n\t\t\t\tmstore(0xA0, mload(memstack)) // mload(memstack) contains a pointer to the next free memory chunk (or 0)\r\n\t\t\t}\r\n\t\t}\r\n\t\t// now memstack points to the memory area to be used for variable escalation\r\n\r\n\t\t// now we store the current value of the \"memory stack pointer\" (0x80) to our memory chunk\r\n\t\tmstore(memstack, mload(0x80))\r\n\t\tmstore(0x80, add(memstack, 0x20)) // store our memory stack to 0x80 (add 0x20 to avoid having to offset by one later)\r\n\t}\r\n\r\n\t// now memory variable n can be found at memory address (add(mload(0x80), N)) where N is mul(0x20, n)\r\n\r\n\t// ASSIGN:\ta_1 <=> mload(0x80)\r\n\t//\t\ta_2 <=> add(mload(0x80), 0x20)\r\n\t//\t\ta_3 <=> add(mload(0x80), 0x40)\r\n\t//\t\ta_4 <=> add(mload(0x80), 0x60)\r\n\t//\t\ta_5 <=> add(mload(0x80), 0x80)\r\n\t\r\n\tmstore(mload(0x80), 1) // let a_1 := 1\r\n\tmstore(add(mload(0x80), 0x20), 2) // let a_2 := 2\r\n\tmstore(add(mload(0x80), 0x40), 3) // let a_3 := 3\r\n\tmstore(add(mload(0x80), 0x60), 4) // let a_4 := 4\r\n\tmstore(add(mload(0x80), 0x80), 5) // let a_5 := 5\r\n\tlet a_6 := 6\r\n\tlet a_7 := 7\r\n\tlet a_8 := 8\r\n\tlet a_9 := 9\r\n\tlet a_10 := 10\r\n\tlet a_11 := 11\r\n\tlet a_12 := 12\r\n\tlet a_13 := 13\r\n\tlet a_14 := 14\r\n\tlet a_15 := 15\r\n\tlet a_16 := 16\r\n\tlet a_17 := 17\r\n\tlet a_18 := 18\r\n\tlet a_19 := 19\r\n\r\n\t// de-escalate\r\n\t{\r\n\t\tlet a_1 := mload(mload(0x80))\r\n\t\tlet a_2 := mload(add(mload(0x80), 0x20))\r\n\t\tlet a_3 := mload(add(mload(0x80), 0x40))\r\n\t\tlet a_4 := mload(add(mload(0x80), 0x60))\r\n\t\tlet a_5 := mload(add(mload(0x80), 0x80))\r\n\t\tlet b := f(a_1, a_2, a_3, a_4, a_5)\r\n\t}\r\n\t\r\n\tlet c := g(a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19)\r\n\r\n\tx := ltu256(b, c);\r\n\t\r\n\t{\r\n\t\t// restore the \"memory stack pointer\" at 0x80\r\n\t\tlet memchunk := sub(mload(0x80), 0x20)\r\n\t\tmstore(0x80, mload(memchunk))\r\n\t\t\r\n\t\t// \"free\" our memory chunk\r\n\t\tmstore(memchunk, mload(0xA0))\r\n\t\tmstore(0xA0, memchunk)\r\n\t}\r\n}\r\n```",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/5766/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/5766/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/452636221",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-452636221",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 452636221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjYzNjIyMQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T09:50:20Z",
    "updated_at": "2019-01-10T19:24:25Z",
    "author_association": "MEMBER",
    "body": "We can extract the management code into helpers - they in fact don't even need any parameters:\r\n```\r\n\r\nfunction enterMemoryStackFrame()\r\n{\r\n\t// fetch \"re-usable memory chunk pointer\"\r\n\tlet memstack := mload(0xA0)\r\n\tswitch memstack {\r\n\t\tcase 0 { // no re-usable memory chunk; allocate new chunk\r\n\t\t\tmemstack := mload(0x40)\r\n\t\t\tmstore(0x40, memstack + MAX_MEMSTACK_SIZE) // MAX_MEMSTACK_SIZE is the size of the memory stack needed by the \"worst\" function in the contract\r\n\t\t}\r\n\t\tdefault { // we found a re-usable memory chunk\r\n\t\t\tmstore(0xA0, mload(memstack)) // mload(memstack) contains a pointer to the next free memory chunk (or 0)\r\n               }\r\n\t}\r\n\t// now memstack points to the memory area to be used for variable escalation\r\n\r\n\t// now we store the current value of the \"memory stack pointer\" (0x80) to our memory chunk\r\n\tmstore(memstack, mload(0x80))\r\n\tmstore(0x80, add(memstack, 0x20)) // store our memory stack to 0x80 (add 0x20 to avoid having to offset by one later)\r\n}\r\n\r\nfunction exitMemoryStackFrame()\r\n{\r\n\t// restore the \"memory stack pointer\" at 0x80\r\n\tlet memchunk := sub(mload(0x80), 0x20)\r\n\tmstore(0x80, mload(memchunk))\r\n\t\r\n\t// \"free\" our memory chunk\r\n\tmstore(memchunk, mload(0xA0))\r\n\tmstore(0xA0, memchunk)\r\n}\r\n```\r\n\r\nFurther always-to-be-inlined setters and getters:\r\n```\r\nfunction setMemVar(id, value)\r\n{\r\n        // the multiplication by 0x20 can be moved outside of the function\r\n\tmstore(add(mload(0x80), mul(0x20, id)), value)\r\n}\r\n\r\nfunction getMemVar(id) -> value\r\n{\r\n\tvalue := mload(add(mload(0x80), mul(0x20, id)))\r\n}\r\n```\r\n\r\nYielding:\r\n\r\n```\r\n\tfunction h() -> x\r\n\t{\r\n\t\tenterMemoryStackFrame()\r\n\r\n\t\tsetMemVar(0, 1) // let a_1 := 1\r\n\t\tsetMemVar(1, 2) // let a_2 := 2\r\n\t\tsetMemVar(2, 3) // let a_3 := 3\r\n\t\tsetMemVar(3, 4) // let a_4 := 4\r\n\t\tsetMemVar(4, 5) // let a_5 := 5\r\n\t\tlet a_6 := 6\r\n\t\tlet a_7 := 7\r\n\t\tlet a_8 := 8\r\n\t\tlet a_9 := 9\r\n\t\tlet a_10 := 10\r\n\t\tlet a_11 := 11\r\n\t\tlet a_12 := 12\r\n\t\tlet a_13 := 13\r\n\t\tlet a_14 := 14\r\n\t\tlet a_15 := 15\r\n\t\tlet a_16 := 16\r\n\t\tlet a_17 := 17\r\n\t\tlet a_18 := 18\r\n\t\tlet a_19 := 19\r\n\r\n\t\t// de-escalate\r\n\t\tlet b := f(getMemVar(0), getMemVar(1), getMemVar(2), getMemVar(3), getMemVar(4))\r\n\t\t\r\n\t\tlet c := g(a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19)\r\n\r\n\t\tx := ltu256(b, c);\r\n\r\n\t\texitMemoryStackFrame()\r\n\t}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/452636221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/452667521",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-452667521",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 452667521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjY2NzUyMQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-09T11:40:57Z",
    "updated_at": "2019-01-09T11:41:41Z",
    "author_association": "MEMBER",
    "body": "We discussed moving the stack optimization logic out of the evm code generation. I think it makes more sense to do proper control flow and life-time analysis for local variables for Yul itself (that may be helpful in general) and then use that information for stack allocation instead (the results should be better than the current optimization during code generation).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/452667521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453083743",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-453083743",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 453083743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzA4Mzc0Mw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T12:45:15Z",
    "updated_at": "2019-01-10T12:45:15Z",
    "author_association": "MEMBER",
    "body": "The main problem I find with this approach is that memory locations have a special meaning in Yul now. Perhaps we need to introduce pragmas to Yul which can define certain properties so that the compiler generating Yul can have better control over memory.\r\n\r\nAs an example:\r\n```\r\npragma free_memory_pointer 0x40;\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453083743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453084380",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-453084380",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 453084380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzA4NDM4MA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T12:47:47Z",
    "updated_at": "2019-01-10T12:47:47Z",
    "author_association": "MEMBER",
    "body": "We could replace accessing 0x40 with ``allocate`` as already suggested in #5107 and do something similar for 0x80 and 0xA0...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453084380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453084950",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-453084950",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 453084950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzA4NDk1MA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T12:50:02Z",
    "updated_at": "2019-01-10T12:50:56Z",
    "author_association": "MEMBER",
    "body": "That's true, but still in general since memory pointers do not have a special type/meaning (#3525 proposes that) the compiler generating Yul can do whatever it pleases. Important to keep in mind other users past Solidity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453084950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453085628",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-453085628",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 453085628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzA4NTYyOA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T12:52:22Z",
    "updated_at": "2019-01-10T12:52:22Z",
    "author_association": "MEMBER",
    "body": "Yes, I see your point.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453085628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453085929",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-453085929",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 453085929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzA4NTkyOQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T12:53:30Z",
    "updated_at": "2019-01-10T12:53:30Z",
    "author_association": "MEMBER",
    "body": "Yes, this is a problem, we have to add that option to the dialect. It can only be used in Solidity if all inline assembly blocks provide a special option in the string argument to the `assembly` keyword.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453085929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453086204",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-453086204",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 453086204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzA4NjIwNA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T12:54:24Z",
    "updated_at": "2019-01-10T12:54:24Z",
    "author_association": "MEMBER",
    "body": "We've tried to keep memory hidden from Yul, perhaps the real solution is breaking that assumption and making memory a first class citizen of Yul.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453086204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453086232",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-453086232",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 453086232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzA4NjIzMg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T12:54:30Z",
    "updated_at": "2019-01-10T12:54:30Z",
    "author_association": "MEMBER",
    "body": "One might argue that the ABI encoder / decoder code can always use it, because it already allocates memory that way - even though not all ways to invoke the encoder and decoder do that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453086232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453086263",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-453086263",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 453086263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzA4NjI2Mw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T12:54:37Z",
    "updated_at": "2019-01-10T12:54:37Z",
    "author_association": "MEMBER",
    "body": "All inline assembly blocks containing ``mstore`` would be sufficient.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453086263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453086482",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-453086482",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 453086482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzA4NjQ4Mg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T12:55:29Z",
    "updated_at": "2019-01-10T12:55:46Z",
    "author_association": "MEMBER",
    "body": "@axic yep, make (allocatable) memory a first class citizen of Yul -> #5107 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/453086482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/638182834",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-638182834",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 638182834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODE4MjgzNA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-03T13:04:10Z",
    "updated_at": "2020-06-03T13:04:10Z",
    "author_association": "MEMBER",
    "body": "Is it possible to do this inside the memory object framework, so that it would be possible to optimize e.g. external functions that are never called internally to use static locations for the variables?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/638182834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/639611703",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-639611703",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 639611703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTYxMTcwMw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-05T16:27:56Z",
    "updated_at": "2020-06-05T16:27:56Z",
    "author_association": "MEMBER",
    "body": "Just so I don't loose the link https://hackmd.io/@YuZ07BTxTK-q-lurqUdnkQ/By68AjDhL - here are some initial notes about escalating statically in the case of acyclic call graphs - I have an algorithm, but its description still can be greatly simplified.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/639611703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/640493046",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-640493046",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 640493046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDQ5MzA0Ng==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-08T09:40:25Z",
    "updated_at": "2020-06-08T09:40:25Z",
    "author_association": "MEMBER",
    "body": "I'll be working on a first implementation of the statically assigned memory slots for acyclic call graphs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/640493046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/640552524",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-640552524",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 640552524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU1MjUyNA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-08T11:44:17Z",
    "updated_at": "2020-06-08T11:44:17Z",
    "author_association": "MEMBER",
    "body": "Starting to implement the static acyclic version described in hackmd, the following is the first question:\r\n\r\n- Currently the IR codegen directly initializes memory as ``mstore(0x40, <constant>)``, where constant is ``generalPurposeMemoryStart`` plus ``reservedMemory`` (reserved for immutables during contract creation).\r\n- The value ``generalPurposeMemoryStart`` is no longer known in advance.\r\n\r\nSo we probably need some kind of builtin for this. Maybe ``generalPurposeMemoryStart()`` or ``memoryInit()``. For the latter we'd need to do ``memoryInit() mstore(0x40, add(mload(0x40), <reservedMemory>)`` whereas for the former it'd just be ``mstore(0x40, add(generalPurposeMemoryStart(), <reservedMemory>))``.\r\n\r\nI think as proof-of-concept I'll add a ``generalPurposeMemoryStart()`` builtin - but maybe there's a better way to do this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/640552524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/640565253",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-640565253",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 640565253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU2NTI1Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-08T12:13:14Z",
    "updated_at": "2020-06-08T12:13:14Z",
    "author_association": "MEMBER",
    "body": "My intuition would be to make this step start with a heuristic: Search for `mstore(0x40, SOMETHING)` among the first statements of the main routine. If there is some statement that accesses memory before the `mstore`, fail. If the statement cannot be found, then fail. Otherwise, replace it by `mstore(0x40, add(<whatever we need>, SOMETHING))`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/640565253/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/640635191",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-640635191",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 640635191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDYzNTE5MQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-08T14:09:33Z",
    "updated_at": "2020-06-08T14:09:33Z",
    "author_association": "MEMBER",
    "body": "Really :-)? Ok, I can look into that... ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/640635191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1144988448",
    "html_url": "https://github.com/ethereum/solidity/issues/5766#issuecomment-1144988448",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5766",
    "id": 1144988448,
    "node_id": "IC_kwDOAm_5kc5EPyMg",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-02T15:18:49Z",
    "updated_at": "2022-06-02T15:18:49Z",
    "author_association": "MEMBER",
    "body": "Since the feature was released in 0.8.13, I think we can close this now?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1144988448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
