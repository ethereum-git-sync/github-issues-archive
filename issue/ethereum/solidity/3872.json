{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3872",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3872/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3872/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3872/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3872",
  "id": 313638707,
  "node_id": "MDU6SXNzdWUzMTM2Mzg3MDc=",
  "number": 3872,
  "title": "Parser error: Expected token semicolon got LParen",
  "user": {
    "login": "vidhyaramani",
    "id": 37835957,
    "node_id": "MDQ6VXNlcjM3ODM1OTU3",
    "avatar_url": "https://avatars.githubusercontent.com/u/37835957?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vidhyaramani",
    "html_url": "https://github.com/vidhyaramani",
    "followers_url": "https://api.github.com/users/vidhyaramani/followers",
    "following_url": "https://api.github.com/users/vidhyaramani/following{/other_user}",
    "gists_url": "https://api.github.com/users/vidhyaramani/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vidhyaramani/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vidhyaramani/subscriptions",
    "organizations_url": "https://api.github.com/users/vidhyaramani/orgs",
    "repos_url": "https://api.github.com/users/vidhyaramani/repos",
    "events_url": "https://api.github.com/users/vidhyaramani/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vidhyaramani/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-04-12T09:07:22Z",
  "updated_at": "2018-04-12T09:23:34Z",
  "closed_at": "2018-04-12T09:23:34Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\npragma solidity ^0.4.18;\r\n\r\nimport \"./ConvertLib.sol\";\r\n\r\n\r\ncontract MetaCoin {\r\n\r\n\t struct hospital\r\n\t {\r\n\tuint index;\r\n\tuint record;\r\n\taddress patientdata;\r\n\t\r\n\tmapping(address=>uint) _patientrecord; \r\n\tbytes32[] record;\r\n\r\n\t\r\n\r\n\t}\r\n\t   // mapping the address to the previous report  \r\n\t \r\n\r\n\tfunction Metacoin(){\r\n\r\n\t\tpatient=msg.sender;\r\n\t\tdoctor=msg.sender;\r\n\t\t\r\n\t\t           \r\n\r\n\t}\r\n        \r\n\r\n\t\r\n\r\n\tevent verify(patientPublicKey,doctorPublicKey,timestamp,uint8 consentCode); // verification process\r\n\r\n\t\tfunction verify(bytes32 hash, uint8 v, bytes32 r, bytes32 s) constant returns (bool){\r\n\t\treturn ecrecover(hash,v,r,s,address)==address;\r\n\r\n\t\t\r\n\r\n}\r\n\tfunction isSigned(bytes32 hash, uint8 v, bytes32 r,bytes32 s) returns(bool){\r\n\t\treturn ecrecover(hash,v,r,s)==address;\r\n\r\n\t}\r\n\t function Time_call()returns(uint256){\r\n\t\t return block.number;\r\n\t }\r\n\t\r\n\tmodifier onlypatient()\r\n\t{\r\n\t\tif(msg.sender!=patient) throw;\r\n\t\t_;\r\n\t}\r\n\r\n     modifier onlydoctor()\r\n\t {\r\n\t\t if(msg.sender!=doctor) throw;\r\n\t\t _;\r\n\t }\r\n\r\n\tfunction getAddressfromPublicKey(bytes _publickey) returns (address signer){ // getting address from the public key\r\n\tbytes32 keyHash=keccak256(_publickey);\r\n\tuint result=0;\r\n\tfor(uint i=keyHash.length-1;i+1>2;i--)\r\n\t{\r\n\t\tuint c=uint(keyHash[i]);\r\n\t\tuint to_inc=c*(16**((keyHash.length - i-1)*2));\r\n\t\tresult+=to_inc;\r\n\t}\r\n    result record;\r\n}\r\n}\r\n\r\n\t\r\n\t\r\n\r\n\r\ncontract Signagreement{                      // signing the agreement by both patient and doctor\r\n\t\taddress patient;\r\n\t\taddress doctor;\r\n\r\nfunction patient(address _patient){\r\n\tpatient= _patient;\r\n}\r\n\r\nfunction doctor(address _doctor){\r\n\tdoctor=_doctor;\r\n\r\n}\r\n\r\n\r\n\t modifier onlyPatient()\r\n\t {\r\n\t\t require(msg.sender==patient);\r\n\t\t _;\r\n\t\t\r\n\t }\r\n\t modifier onlydoctor()\r\n\t {\r\n\t\trequire(msg.sender==doctor);\r\n\t\t_;\r\n\t\t \r\n\t }\r\n\t  function data(){\r\n\t\t  patient=msg.sender;\r\n\t\t  doctor=msg.sender;\r\n\t  }\r\n\t\r\n\t\r\n\t\tstruct recordstructs{\r\n\t\t\tbool approvedBypatient;\r\n\t\t\tbool approvedBydoctor;\r\n\r\n\t\t}\r\n\t// this agreement is all publicly explorable\r\n\tmapping(bytes32=>recordstruct)public recordstructs;\r\n\tbytes32[] public DataList;//all\r\n\tbytes32[] public approvedData; //approved\r\n\t\r\n\tevent LogproposedData(address _patient, bytes32 docHash);\r\n\tevent ApprovedproposedData(address _doctor,bytes32 docHash);\r\n\t\t // constructor\r\n\t function agreement(string timestamp_patient, address _patientdata, string timestamp_doctor)\r\n\t {\r\n\t\t patient= block.timestamp_patient&& address_patient && Identification_patient;\r\n\t\t doctor= block.timestamp_doctor && address_doctor && Identification_doctor;\r\n\t }\r\n\r\n\r\n\t// for convenient iteration \r\n\tfunction getDataCount()public constant returns(uint docCount){\r\n\t\treturn DataList.length;\r\n\r\n\t}\r\n\tfunction getApprovedCount()public constant returns(uint docCount){\r\n\t\treturn DataList.length;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\r\n\t// approve the agreement\r\n\tfunction agreeDoc(bytes32 Hash)public returns(bool success){\r\n      if(msg.sender!=patient && msg.sender!=doctor)throw; //abort the session//unknown person\r\n\t  if(msg.sender==patient) recordstructs[hash].approvedBypatient=true;\r\n\t  if(msg.sender==doctor) recordstructs[hash].approvedBypatient=true;\r\n\t  if(block.number(patient) == block.number(doctor)) recordstructs[hash].approvedBypatient=true;\r\n\t  {\r\n\t   if(msg.sender(patient) == msg.sender(doctor))recordstructs[hash].approvedBypatient=true;\r\n\t  }\r\n\t   if (recordstructs[hash].approvedBypatient==true){\r\n\t\t   uint docCount=DataList.push(hash);\r\n\t\t   LogApprovedData(msg.sender,hash);\r\n\t\t   \r\n\t\t   \r\n\t   } else{\r\n\t\t   uint apprCount= approvedData.push(hash);\r\n\t\t   LogProposedData(msg.sender,hash);\r\n\t   }\r\n\t   return true;\r\n\t  }\r\n}\r\n\t\r\n\t// permissions to P2P network\r\n\tcontract permissionsP2P is Enabled{\r\n\t\t\r\n\t\tstruct consentedPatientDataTuple{\r\n\t\t\tbytes32 verificationmessage;\r\n\t\t\taddress patientdata;\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\tfunction records(address _patientdata){\r\n\trecords= _patientdata;\r\n\t\r\n}\r\n      struct consentPatientCode{\r\n\t\t  \r\n\t\t  uint8 consentCode;\r\n\t\t  // 0 no permission\r\n\t\t\t// 1 for retrieve the data\r\n\t\t\t// 2 for add the data\r\n\t\t\t// 3 for update the data\r\n\t\t\t// 4 for append the data\r\n\r\n\t  }\r\n\t  \r\n\t\r\n\t\tmapping(address=>uint8)public permissions;\r\n\t  mapping(address_patientdata =>consentPatientcode) public patientconsent;\r\n\t  mapping(address_patientdata => consentedPatientDataTuple)public patientdoctorconsent;\r\n\t \r\n\r\n\tfunction retrieveData(address _patientdata, uint8 index)returns(bytes32)\r\n\t  {\r\n\t\t \r\n\t    mapping(uint=>address) _patientdata;\r\n\t\taddress _patientdata = msg.sender;\r\n\t\t\tuint retrievedData=address _patientdata && consentpatientCode;\r\n\t\t\tvar cons=consentpatientCode(address _patientdata,consentCode);\r\n\r\n          if(consentCode =1 && msg.sender==doctor||msg.sender==patient) {\r\n\t\t\tif(DataList[address _patientdata].init==false)\r\n\t\t\t{\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tDataList[address _patientdata].record[index];\r\n            return record(result);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t  }\r\n\r\n\t  function addData( address _data, bytes32 record) returns(uint result)\r\n\t  {\r\n\t\t  \tvar cons=consentpatientCode(address _patientdata,consentCode);\r\n\r\n         if(consentCode=2&&DataList.[address _patientdata].init==false){\r\n\t\t\t return 0;\r\n\t\t }\r\n\t\t else if (data==0){\r\n\t\t\t return 1;\r\n\t\t }\r\n\t\t else\r\n\t\t {\r\n\t\t\t DataList[address _patientdata].record[index].push(record);\r\n\t\t\t DataList[address _patientdata]. responsible.push(resp);\r\n\t\t\t return 2; // means data added to the patientdatabase\r\n\r\n\t\t }\r\n\t  }\r\n\r\nfunction confirmData(address _data,bytes32 report) returns(bool){\r\n\tif(address _record!=0x0) {\r\n\t\t// ensure the caller is patient or doctor\r\n\taddress _doctor = address _data. Identification _doctor;\r\n\t\taddress _patient= address _data. Identification _patient;\r\n\t\tif(msg.sender==doctor|| msg.sender==patient)\r\n\t\t{\r\n\t\t\tif(DataList[address _data].init==false||record ==0)\r\n\t\t\t{\r\n             return false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\t\t\r\n\t function updateData(address _patientdata,bytes32 record) returns (bool){\r\n\t\t var cons=consentpatientCode(address _patientdata,consentCode);\r\n\r\n         if(consentCode=3&&DataList.[address _patientdata].init==false){\r\n\t\t\t \r\n\t\t\t address_ patientdata.record[index]= record;\r\n\t\t }\r\n\t }\r\n}\r\n        \r\n      function appendData(address _patientdata, bytes32 record) returns (bool){\r\n\t\t  var cons=consentpatientCode(address _patientdata,consentCode);\r\n\r\n         if(consentCode=4&&DataList.[address _patientdata].init==false){\r\n\t\t\t \r\n\t\t\t bytes(record).push(record);\r\n\t\t }\r\n\r\n\t\t function set( DataList[address _patientdata], bytes32 record){\r\n               DataList[address _patientdata].record[index] = record;\r\n\t\t }\r\n\r\n\r\n\t }\r\n\t  }\r\n\t  }\r\n```",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3872/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3872/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/380737375",
    "html_url": "https://github.com/ethereum/solidity/issues/3872#issuecomment-380737375",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3872",
    "id": 380737375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDczNzM3NQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T09:23:34Z",
    "updated_at": "2018-04-12T09:23:34Z",
    "author_association": "MEMBER",
    "body": "This question is better asked at https://ethereum.stackexchange.com - you will get faster and better replies there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/380737375/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
