{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3151",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3151/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3151/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3151/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3151",
  "id": 269391705,
  "node_id": "MDU6SXNzdWUyNjkzOTE3MDU=",
  "number": 3151,
  "title": "grammar.txt: missing rule for low level functions (assembly)",
  "user": {
    "login": "walter-weinmann",
    "id": 1956149,
    "node_id": "MDQ6VXNlcjE5NTYxNDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1956149?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/walter-weinmann",
    "html_url": "https://github.com/walter-weinmann",
    "followers_url": "https://api.github.com/users/walter-weinmann/followers",
    "following_url": "https://api.github.com/users/walter-weinmann/following{/other_user}",
    "gists_url": "https://api.github.com/users/walter-weinmann/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/walter-weinmann/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/walter-weinmann/subscriptions",
    "organizations_url": "https://api.github.com/users/walter-weinmann/orgs",
    "repos_url": "https://api.github.com/users/walter-weinmann/repos",
    "events_url": "https://api.github.com/users/walter-weinmann/events{/privacy}",
    "received_events_url": "https://api.github.com/users/walter-weinmann/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 275027668,
      "node_id": "MDU6TGFiZWwyNzUwMjc2Njg=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/documentation%20:book:",
      "name": "documentation :book:",
      "color": "006b75",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2017-10-29T11:35:52Z",
  "updated_at": "2018-12-03T10:18:57Z",
  "closed_at": "2018-12-03T10:18:57Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "(I am currently trying to verify my Solidity LALR Parser project [syparse](https://github.com/walter-weinmann/syparse) with the examples in the [Solidity  documentation](https://github.com/ethereum/solidity/tree/develop/docs).)\r\n\r\nThe following example is taken from chapter `Inline Assembly (Functions)` in document `assembly.rst`:\r\n```\r\n    {\r\n        function power(base, exponent) -> result {\r\n            switch exponent\r\n            case 0 { result := 1 }\r\n            case 1 { result := base }\r\n            default {\r\n                result := power(mul(base, base), div(exponent, 2))\r\n                switch mod(exponent, 2)\r\n                    case 1 { result := mul(base, result) }\r\n            }\r\n        }\r\n    }\r\n```\r\nThis example is not covered in `grammar.txt`.\r\n\r\nThe following excerpt from the `assembly. rst` document has not been transferred completely to `grammar. txt`:\r\n\r\nParsing / Grammar\r\n-----------------\r\n\r\nThe tasks of the parser are the following:\r\n\r\n- Turn the byte stream into a token stream, discarding C++-style comments\r\n  (a special comment exists for source references, but we will not explain it here).\r\n- Turn the token stream into an AST according to the grammar below\r\n- Register identifiers with the block they are defined in (annotation to the\r\n  AST node) and note from which point on, variables can be accessed.\r\n\r\nThe assembly lexer follows the one defined by Solidity itself.\r\n\r\nWhitespace is used to delimit tokens and it consists of the characters\r\nSpace, Tab and Linefeed. Comments are regular JavaScript/C++ comments and\r\nare interpreted in the same way as Whitespace.\r\n\r\nGrammar::\r\n\r\n    AssemblyBlock = '{' AssemblyItem* '}'\r\n    AssemblyItem =\r\n        Identifier |\r\n        AssemblyBlock |\r\n        FunctionalAssemblyExpression |\r\n        AssemblyLocalDefinition |\r\n        FunctionalAssemblyAssignment |\r\n        AssemblyAssignment |\r\n        LabelDefinition |\r\n        AssemblySwitch |\r\n        AssemblyFunctionDefinition |\r\n        AssemblyFor |\r\n        'break' | 'continue' |\r\n        SubAssembly | 'dataSize' '(' Identifier ')' |\r\n        LinkerSymbol |\r\n        'errorLabel' | 'bytecodeSize' |\r\n        NumberLiteral | StringLiteral | HexLiteral\r\n    Identifier = [a-zA-Z_$] [a-zA-Z_0-9]*\r\n    FunctionalAssemblyExpression = Identifier '(' ( AssemblyItem ( ',' AssemblyItem )* )? ')'\r\n    AssemblyLocalDefinition = 'let' IdentifierOrList ':=' FunctionalAssemblyExpression\r\n    FunctionalAssemblyAssignment = IdentifierOrList ':=' FunctionalAssemblyExpression\r\n    IdentifierOrList = Identifier | '(' IdentifierList ')'\r\n    IdentifierList = Identifier ( ',' Identifier)*\r\n    AssemblyAssignment = '=:' Identifier\r\n    LabelDefinition = Identifier ':'\r\n    AssemblySwitch = 'switch' FunctionalAssemblyExpression AssemblyCase*\r\n        ( 'default' AssemblyBlock )?\r\n    AssemblyCase = 'case' FunctionalAssemblyExpression AssemblyBlock\r\n    AssemblyFunctionDefinition = 'function' Identifier '(' IdentifierList? ')'\r\n        ( '->' '(' IdentifierList ')' )? AssemblyBlock\r\n    AssemblyFor = 'for' ( AssemblyBlock | FunctionalAssemblyExpression)\r\n        FunctionalAssemblyExpression ( AssemblyBlock | FunctionalAssemblyExpression) AssemblyBlock\r\n    SubAssembly = 'assembly' Identifier AssemblyBlock\r\n    LinkerSymbol = 'linkerSymbol' '(' StringLiteral ')'\r\n    NumberLiteral = HexNumber | DecimalNumber\r\n    HexLiteral = 'hex' ('\"' ([0-9a-fA-F]{2})* '\"' | '\\'' ([0-9a-fA-F]{2})* '\\'')\r\n    StringLiteral = '\"' ([^\"\\r\\n\\\\] | '\\\\' .)* '\"'\r\n    HexNumber = '0x' [0-9a-fA-F]+\r\n    DecimalNumber = [0-9]+\r\n\r\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3151/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3151/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/340270780",
    "html_url": "https://github.com/ethereum/solidity/issues/3151#issuecomment-340270780",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3151",
    "id": 340270780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDI3MDc4MA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-29T15:31:46Z",
    "updated_at": "2017-10-29T15:31:46Z",
    "author_association": "MEMBER",
    "body": "The best, if at all possible, would be treating data between `assembly { .. }` as verbatim because it essentially is a different language with its own grammar.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/340270780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/340284705",
    "html_url": "https://github.com/ethereum/solidity/issues/3151#issuecomment-340284705",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3151",
    "id": 340284705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDI4NDcwNQ==",
    "user": {
      "login": "walter-weinmann",
      "id": 1956149,
      "node_id": "MDQ6VXNlcjE5NTYxNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1956149?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/walter-weinmann",
      "html_url": "https://github.com/walter-weinmann",
      "followers_url": "https://api.github.com/users/walter-weinmann/followers",
      "following_url": "https://api.github.com/users/walter-weinmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/walter-weinmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/walter-weinmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/walter-weinmann/subscriptions",
      "organizations_url": "https://api.github.com/users/walter-weinmann/orgs",
      "repos_url": "https://api.github.com/users/walter-weinmann/repos",
      "events_url": "https://api.github.com/users/walter-weinmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/walter-weinmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-29T18:47:52Z",
    "updated_at": "2017-10-29T18:47:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "How about we have two grammar definitions: `grammar_solidity.txt` and `grammar_assembly.txt`? The existing grammar definition `grammar.txt` becomes `grammar_solidity.txt`. The following rules are removed:\r\n```\r\nInlineAssemblyBlock = '{' AssemblyItem* '}'\r\n\r\nAssemblyItem = Identifier | FunctionalAssemblyExpression | InlineAssemblyBlock | AssemblyLocalBinding | AssemblyAssignment | AssemblyLabel | NumberLiteral | StringLiteral | HexLiteral\r\nAssemblyLocalBinding = 'let' Identifier ':=' FunctionalAssemblyExpression\r\nAssemblyAssignment = ( Identifier ':=' FunctionalAssemblyExpression ) | ( '=:' Identifier )\r\nAssemblyLabel = Identifier ':'\r\nFunctionalAssemblyExpression = Identifier '(' AssemblyItem? ( ',' AssemblyItem )* ')'\r\n```\r\nThe grammar rule\r\n\r\n`InlineAssemblyStatement = 'assembly' StringLiteral? InlineAssemblyBlock`\r\n\r\nbecomes the link to `grammatik_assembly.txt`, which contains the rules of the assembly language according to the document `assembly.rst`.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/340284705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
