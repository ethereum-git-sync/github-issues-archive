{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13249",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13249/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13249/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13249/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13249",
  "id": 1294705286,
  "node_id": "I_kwDOAm_5kc5NK6KG",
  "number": 13249,
  "title": "Bad encoding for a dynamic array followed by a static calldata array",
  "user": {
    "login": "vimwitch",
    "id": 631020,
    "node_id": "MDQ6VXNlcjYzMTAyMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/631020?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vimwitch",
    "html_url": "https://github.com/vimwitch",
    "followers_url": "https://api.github.com/users/vimwitch/followers",
    "following_url": "https://api.github.com/users/vimwitch/following{/other_user}",
    "gists_url": "https://api.github.com/users/vimwitch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vimwitch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vimwitch/subscriptions",
    "organizations_url": "https://api.github.com/users/vimwitch/orgs",
    "repos_url": "https://api.github.com/users/vimwitch/repos",
    "events_url": "https://api.github.com/users/vimwitch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vimwitch/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 2376132438,
      "node_id": "MDU6TGFiZWwyMzc2MTMyNDM4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/codegen%20error",
      "name": "codegen error",
      "color": "000000",
      "default": false,
      "description": "Compiler generates invalid code. Critical."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "Marenz",
    "id": 424752,
    "node_id": "MDQ6VXNlcjQyNDc1Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Marenz",
    "html_url": "https://github.com/Marenz",
    "followers_url": "https://api.github.com/users/Marenz/followers",
    "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
    "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
    "organizations_url": "https://api.github.com/users/Marenz/orgs",
    "repos_url": "https://api.github.com/users/Marenz/repos",
    "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Marenz/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "Marenz",
      "id": 424752,
      "node_id": "MDQ6VXNlcjQyNDc1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Marenz",
      "html_url": "https://github.com/Marenz",
      "followers_url": "https://api.github.com/users/Marenz/followers",
      "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
      "organizations_url": "https://api.github.com/users/Marenz/orgs",
      "repos_url": "https://api.github.com/users/Marenz/repos",
      "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Marenz/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-07-05T19:54:01Z",
  "updated_at": "2022-08-08T11:49:14Z",
  "closed_at": "2022-08-08T11:49:14Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nInconsistent abi encode behavior with tuples containing both a dynamic array and fixed length array.\r\n\r\n## Steps to Reproduce\r\n\r\n```js\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract EncodeTest {\r\n   \r\n    struct Test {\r\n        uint[] vals;\r\n        uint[2] valsFixed;\r\n    }\r\n\r\n    function testEncode(Test calldata input) public pure returns (bytes memory) {\r\n        return abi.encode(input);\r\n    }\r\n\r\n    function testDecode(bytes calldata input) public pure returns (Test memory) {\r\n        return abi.decode(input, (Test));\r\n    }\r\n}\r\n```\r\n\r\nWhen calling `testEncode` with the following argument: `{ vals: [1, 2, 3], valsFixed: [1, 1] }` the following is received (split into chunks of 64 hex characters for readability): \r\n```\r\n0000000000000000000000000000000000000000000000000000000000000020\r\n0000000000000000000000000000000000000000000000000000000000000060\r\n0000000000000000000000000000000000000000000000000000000000000001\r\n0000000000000000000000000000000000000000000000000000000000000001\r\n0000000000000000000000000000000000000000000000000000000000000000 // <- should be 0x03?\r\n0000000000000000000000000000000000000000000000000000000000000001\r\n0000000000000000000000000000000000000000000000000000000000000002\r\n0000000000000000000000000000000000000000000000000000000000000003\r\n```\r\n\r\nWhen abi encoding using web3 or ethers the following is received:\r\n\r\n```\r\n0000000000000000000000000000000000000000000000000000000000000020\r\n0000000000000000000000000000000000000000000000000000000000000060\r\n0000000000000000000000000000000000000000000000000000000000000001\r\n0000000000000000000000000000000000000000000000000000000000000001\r\n0000000000000000000000000000000000000000000000000000000000000003\r\n0000000000000000000000000000000000000000000000000000000000000001\r\n0000000000000000000000000000000000000000000000000000000000000002\r\n0000000000000000000000000000000000000000000000000000000000000003\r\n```\r\n\r\n<summary>web3/ethers code</summary>\r\n<details>\r\n\r\n```js\r\nconst { ethers } = require('ethers')\r\nconst Web3 = require('web3')\r\n\r\nconsole.log(\r\n  ethers.utils.defaultAbiCoder.encode(\r\n    [`tuple(uint[] vals, uint[2] valFixed)`],\r\n    [{vals: [1,2,3],valFixed: [1,1]}]\r\n  )\r\n)\r\n\r\nconst web3 = new Web3()\r\nconsole.log(\r\n  web3.eth.abi.encodeParameter(\r\n    'tuple(uint[] vals, uint[2] valFixed)',\r\n    [[1, 2, 3], [1, 1]]\r\n  )\r\n)\r\n```\r\n\r\n</details>\r\n\r\n--\r\n\r\nFurthermore, when using the `testDecode` function the first output does not decode the `vals` array, while the second output does. Is this expected or known behavior of `abi.encode`?",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13249/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13249/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1179264248",
    "html_url": "https://github.com/ethereum/solidity/issues/13249#issuecomment-1179264248",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13249",
    "id": 1179264248,
    "node_id": "IC_kwDOAm_5kc5GSiT4",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-08T18:36:13Z",
    "updated_at": "2022-07-08T18:41:38Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report! This does look like a serious bug. You're absolutely right about the expected encoding - the length should be 3, not 0. I can confirm that it's reproducible both in Remix IDE and in our semantic tests (executed via evmone).\r\n\r\nWith Remix I can reproduce it as far back as 0.7.0. Might be affecting older versions too, but Remix seems to have some issue with its version selector - choosing anything below 0.7.0 automatically switches back to 0.8.15 on compilation.\r\n\r\nI tried some variations and:\r\n- The length of either array does not matter.\r\n- They must be arrays - bug is not reproducible when using `bool` or `uint` instead of the static one.\r\n- The struct is not needed. It happens as well if we make arrays the arguments of the function.\r\n- It does not happen if we swap the order and put the static array before the dynamic one.\r\n- It only happens when the static array is in `calldata` (or a part of a `calldata` struct). For the dynamic array it does not matter.\r\n- It does not happen when you change the base type of the static array to `address` or `uint128`. Changing the base type for the dynamic array does not seem to matter.\r\n- It does not happen when both arrays are dynamic.\r\n- Not only the explicit use of `abi.encode()` is affected. Same happens if you just return these arrays and let the encoding happen implicitly (which is not surprising since it uses the same mechanism).\r\n\r\n### Semantic test\r\n```solidity\r\nsemanticTests/abiEncoderV2/calldata_struct_dynamic_and_static.sol: FAIL\r\n  Contract:\r\n    pragma abicoder v2;\r\n\r\n    contract C {\r\n        function f(uint256[] memory a, uint256[1] calldata b) external returns (bytes memory) {\r\n            return abi.encode(a, b);\r\n        }\r\n\r\n        function g(uint256[] memory a, uint256[1] calldata b) external returns (bytes memory) {\r\n            return this.f(a, b);\r\n        }\r\n    }\r\n    // ====\r\n    // EVMVersion: >homestead\r\n\r\n  Expected result:\r\n  // f(uint256[],uint256[1]): 0x40, 0xff, 1, 0xffff -> 0x20, 0x80, 0x40, 0xff, 1, 0xffff\r\n  // g(uint256[],uint256[1]): 0x40, 0xff, 1, 0xffff -> 0x20, 0x80, 0x40, 0xff, 1, 0xffff\r\n\r\n  Obtained result:\r\n  // f(uint256[],uint256[1]): 0x40, 0xff, 1, 0xffff -> 0x20, 0x80, 0x40, 0xff, 0, 0xffff\r\n  Warning: Could not convert \"bytes\" to internal ABI type representation. Falling back to default encoding.\r\n  Warning: Type or size of parameter(s) does not match.\r\n  Warning: Type or size of parameter(s) does not match.\r\n  Warning: Type or size of parameter(s) does not match.\r\n  Warning: Type or size of parameter(s) does not match.\r\n  Warning: Type or size of parameter(s) does not match.\r\n  Warning: Could not convert \"bytes\" to internal ABI type representation. Falling back to default encoding.\r\n  Warning: The call to \"f(uint256[],uint256[1])\" returned\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20]\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80]\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40]\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,ff]\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,ff,ff]\r\n  // g(uint256[],uint256[1]): 0x40, 0xff, 1, 0xffff -> 0x20, 0x60, 0x40, 0xff, 0\r\n  Warning: Could not convert \"bytes\" to internal ABI type representation. Falling back to default encoding.\r\n  Warning: Type or size of parameter(s) does not match.\r\n  Warning: Type or size of parameter(s) does not match.\r\n  Warning: Type or size of parameter(s) does not match.\r\n  Warning: Type or size of parameter(s) does not match.\r\n  Warning: Could not convert \"bytes\" to internal ABI type representation. Falling back to default encoding.\r\n  Warning: The call to \"g(uint256[],uint256[1])\" returned\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20]\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60]\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40]\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,ff]\r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n\r\n  Attention: Updates on the test will apply the detected format displayed.\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1179264248/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1179285901",
    "html_url": "https://github.com/ethereum/solidity/issues/13249#issuecomment-1179285901",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13249",
    "id": 1179285901,
    "node_id": "IC_kwDOAm_5kc5GSnmN",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-08T19:07:53Z",
    "updated_at": "2022-07-08T19:07:53Z",
    "author_association": "MEMBER",
    "body": "Turns out the Remix issue was actually a surprise feature :) It automatically changes version to match the version pragma (which enforces at least 0.7.0 here). After removing the pragma, it is reproducible down to 0.5.8, which seems to be the compiler version that introduced ABI encoding of calldata structs - below that I'm getting `UnimplementedFeatureError: Encoding struct from calldata is not yet supported.`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1179285901/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1180483724",
    "html_url": "https://github.com/ethereum/solidity/issues/13249#issuecomment-1180483724",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13249",
    "id": 1180483724,
    "node_id": "IC_kwDOAm_5kc5GXMCM",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-11T14:29:56Z",
    "updated_at": "2022-07-11T14:33:15Z",
    "author_association": "MEMBER",
    "body": "@Marenz The way I've been debugging it so far was to compile the two small contracts I'm posting below to Yul, diff their code and see if there is anything obvious that's wrong. I could not find anything so I think this needs some actual debugging, with the ability to inspect memory. Not sure if we have something like that in the test suite currently. I.e. we do have Yul tests and we have tests that print out memory but I'm not sure if you can combine the two :)\r\n\r\n### My test files\r\n```bash\r\nsolc --ir --debug-info none bad.sol > bad.yul\r\nsolc --ir --debug-info none good.sol > good.yul\r\n```\r\n\r\n#### `bad.sol`\r\n```solidity\r\ncontract C {\r\n    function f(uint256[5] calldata b, uint256[] memory a) external returns (bytes memory) {\r\n        return abi.encode(a, b);\r\n    }\r\n}\r\n```\r\n\r\n#### `good.sol`\r\n```solidity\r\ncontract C {\r\n    function f(uint256[5] calldata b, uint256[] memory a) external returns (bytes memory) {\r\n        return abi.encode(b, a);\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1180483724/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
