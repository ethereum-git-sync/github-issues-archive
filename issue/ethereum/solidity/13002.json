{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13002",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13002/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13002/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13002/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13002",
  "id": 1231756365,
  "node_id": "I_kwDOAm_5kc5JaxxN",
  "number": 13002,
  "title": "Problem with ERC721 contract deployed with create2",
  "user": {
    "login": "kingsley-einstein",
    "id": 35224620,
    "node_id": "MDQ6VXNlcjM1MjI0NjIw",
    "avatar_url": "https://avatars.githubusercontent.com/u/35224620?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kingsley-einstein",
    "html_url": "https://github.com/kingsley-einstein",
    "followers_url": "https://api.github.com/users/kingsley-einstein/followers",
    "following_url": "https://api.github.com/users/kingsley-einstein/following{/other_user}",
    "gists_url": "https://api.github.com/users/kingsley-einstein/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kingsley-einstein/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kingsley-einstein/subscriptions",
    "organizations_url": "https://api.github.com/users/kingsley-einstein/orgs",
    "repos_url": "https://api.github.com/users/kingsley-einstein/repos",
    "events_url": "https://api.github.com/users/kingsley-einstein/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kingsley-einstein/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-05-10T22:11:23Z",
  "updated_at": "2022-05-11T10:16:15Z",
  "closed_at": "2022-05-11T10:16:14Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hello there,\r\n\r\nI'm not sure if this counts as a bug or it's just me who doesn't fully understand how the EVM works but I'm having problems with an ERC721 smart contract deployed with `create2`.\r\n\r\nSo I'm working on an NFT marketplace smart contract and one of the features in this marketplace allows users to deploy their own collection (this is basically a smart contract that extends the ERC721 specification). For this, I'm leveraging the create2 opcode. It deploys well while testing on the testnet (except for the insanely huge gas requirement) but the problem is, the contract stops working when I call a particular function. This is the contract that extends ERC721:\r\n\r\n```solidity\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\r\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\r\nimport '@openzeppelin/contracts/utils/Counters.sol';\r\nimport './interfaces/IDeployableCollection.sol';\r\n\r\ncontract DeployableCollection is IDeployableCollection, ERC721URIStorage, ReentrancyGuard {\r\n  using Counters for Counters.Counter;\r\n\r\n  Counters.Counter private _tokenIds;\r\n  address public _collectionOwner;\r\n  bytes32 public _category;\r\n  address payable public _paymentReceiver;\r\n  string public _collectionURI;\r\n  mapping(address => uint256) public lastMintedForIDs;\r\n\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    address collectionOwner_,\r\n    string memory category_,\r\n    address paymentReceiver_,\r\n    string memory collectionURI_\r\n  ) ERC721(name_, symbol_) {\r\n    _collectionOwner = collectionOwner_;\r\n    _category = keccak256(abi.encode(category_));\r\n    _paymentReceiver = payable(paymentReceiver_);\r\n    _collectionURI = collectionURI_;\r\n  }\r\n\r\n  function mintFor(string memory _tokenURI, address to) external nonReentrant returns (uint256 _tokenId) {\r\n    _tokenIds.increment();\r\n    _tokenId = _tokenIds.current();\r\n    _mint(to, _tokenId);\r\n    _setTokenURI(_tokenId, _tokenURI);\r\n    lastMintedForIDs[to] = _tokenId;\r\n  }\r\n}\r\n```\r\n\r\nThis is the line that deploys the contract:\r\n\r\n```solidity\r\nfunction deployCollection(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    string memory category_,\r\n    address paymentReceiver_,\r\n    string memory _collectionURI\r\n  ) external payable nonReentrant {\r\n    uint256 _fee = _utilityToken != address(0) && IERC20(_utilityToken).balanceOf(_msgSender()) >= _requiredHold\r\n      ? _collectionDeployFeeInEther.sub((uint256(_percentageDiscount).mul(_collectionDeployFeeInEther)).div(100))\r\n      : _collectionDeployFeeInEther;\r\n    require(msg.value >= _fee, 'FEE_TOO_LOW');\r\n    bytes memory _byteCode = abi.encodePacked(\r\n      type(DeployableCollection).creationCode,\r\n      abi.encode(name_, symbol_, _msgSender(), category_, paymentReceiver_, _collectionURI)\r\n    );\r\n    bytes32 _salt = keccak256(abi.encode(name_, _msgSender()));\r\n    address _collection;\r\n\r\n    assembly {\r\n      _collection := create2(0, add(_byteCode, 32), mload(_byteCode), _salt)\r\n    }\r\n    emit CollectionDeployed(_collection, _msgSender(), block.timestamp, name_, category_, symbol_);\r\n  }\r\n\r\n```\r\n\r\nNow this works fine, except once I call `mintFor` and an NFT gets minted, the contract stops working. It shows a total supply of zero (0) on the block explorer even though an NFT has been created (I'm only able to create an NFT with an ID of 1). I also am not able to call any function again as it raises an exception (the cause of which is unknown). This is the line in the factory contract that does the actual minting:\r\n\r\n```solidity\r\n  function mintNFT(\r\n    address collection,\r\n    string memory tokenURI_,\r\n    address _for\r\n  ) external payable nonReentrant returns (bool) {\r\n    uint256 _fee = _utilityToken != address(0) && IERC20(_utilityToken).balanceOf(_msgSender()) >= _requiredHold\r\n      ? _mintFeeInEther.sub((uint256(_percentageDiscount).mul(_mintFeeInEther)).div(100))\r\n      : _mintFeeInEther;\r\n\r\n    require(msg.value >= _fee, 'FEE_TOO_LOW');\r\n\r\n    address _paymentReceiver = IDeployableCollection(collection)._paymentReceiver();\r\n    uint256 _feeForOwner = (uint256(_percentageForCollectionOwners).mul(_fee)).div(100);\r\n\r\n    _safeMintFor(collection, tokenURI_, _for);\r\n    _safeTransferETH(_paymentReceiver, _feeForOwner);\r\n\r\n    uint256 _tokenId = IDeployableCollection(collection).lastMintedForIDs(_msgSender());\r\n    emit Mint(collection, _tokenId, block.timestamp, tokenURI_, _msgSender());\r\n    return true;\r\n  }\r\n```\r\n\r\nI'm guessing an optimization with a runs of `1` is applied upon deployment using create2 (forgive me if this is stupid) but I also think it isn't likely as I'm also watching for events on the smart contract with a Nodejs back-end and I'm able to call '_collectionURI()' when the event data is propagated to my back-end app and this is before calling `mintFor`. I'm confused! Please help!\r\n\r\nThis is a link to the contract info on the explorer: https://testnet.bscscan.com/token/0x6dd5bd0072cdc5e8c24f262a9631c175bc2356a0",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13002/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13002/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1123516658",
    "html_url": "https://github.com/ethereum/solidity/issues/13002#issuecomment-1123516658",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13002",
    "id": 1123516658,
    "node_id": "IC_kwDOAm_5kc5C94Dy",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-11T10:16:14Z",
    "updated_at": "2022-05-11T10:16:14Z",
    "author_association": "MEMBER",
    "body": "Closing this because it is neither a bug nor a feature request. If you have further questions, please either ask in https://gitter.im/ethereum/solidity or https://ethereum.stackexchange.com/\r\n\r\nThis question is better asked at https://ethereum.stackexchange.com - you will get faster and better replies there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1123516658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
