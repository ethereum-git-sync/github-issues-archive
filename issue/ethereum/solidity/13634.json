{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13634",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13634/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13634/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13634/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13634",
  "id": 1415305850,
  "node_id": "I_kwDOAm_5kc5UW9p6",
  "number": 13634,
  "title": "I have an error when trying to carry out flash loans aave on the polygon network",
  "user": {
    "login": "nervodatascience",
    "id": 112339198,
    "node_id": "U_kgDOBrIo_g",
    "avatar_url": "https://avatars.githubusercontent.com/u/112339198?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nervodatascience",
    "html_url": "https://github.com/nervodatascience",
    "followers_url": "https://api.github.com/users/nervodatascience/followers",
    "following_url": "https://api.github.com/users/nervodatascience/following{/other_user}",
    "gists_url": "https://api.github.com/users/nervodatascience/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nervodatascience/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nervodatascience/subscriptions",
    "organizations_url": "https://api.github.com/users/nervodatascience/orgs",
    "repos_url": "https://api.github.com/users/nervodatascience/repos",
    "events_url": "https://api.github.com/users/nervodatascience/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nervodatascience/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-10-19T16:56:11Z",
  "updated_at": "2022-10-19T18:57:59Z",
  "closed_at": "2022-10-19T18:56:31Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\npragma abicoder v2;\r\n\r\nimport {IERC20} from \"./interfaces/IERC20.sol\";\r\n// Aave\r\nimport {FlashLoanReceiverBase} from \"./utils/FlashLoanReceiverBase.sol\";\r\nimport {ILendingPoolAddressesProvider} from \"./interfaces/ILendingPoolAddressesProvider.sol\";\r\nimport {ILendingPool} from \"./interfaces/ILendingPool.sol\";\r\n// UniswapV3\r\nimport \"./interfaces/ISwapRouter.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\n// UniswapV2\r\nimport \"./interfaces/IUniswapV2Router02.sol\";\r\n\r\ncontract Arbitrage is FlashLoanReceiverBase {\r\n    address public immutable minter;\r\n\r\n    struct SwapInfo {\r\n        address router;\r\n        address tokenIn;\r\n        uint24 poolFee;\r\n        bool isV3;\r\n    }\r\n    struct ArbitInfo {\r\n        SwapInfo buy;\r\n        SwapInfo sell;\r\n    }\r\n\r\n    constructor(address _flashAddrProvider) FlashLoanReceiverBase(_flashAddrProvider) {\r\n        minter = msg.sender;\r\n    }\r\n\r\n    modifier minterOnly {\r\n        require(msg.sender == minter, \"MO\"); // Minter Only\r\n        _;\r\n    }\r\n\r\n    function execute(ArbitInfo memory _data, uint256 _amount) external {\r\n        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n        lendingPool.flashLoan(address(this), _data.buy.tokenIn, _amount, abi.encode(_data));\r\n    }\r\n\r\n    function cashOut(address _token, address _receiver) external minterOnly {\r\n        uint256 bal = IERC20(_token).balanceOf(address(this));\r\n        require(bal > 0, \"CO: NEF\"); // Not enough funds\r\n\r\n        TransferHelper.safeTransfer(_token, _receiver, bal);\r\n    }\r\n\r\n    // ============ Callback ============\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external {\r\n        require(msg.sender == addressesProvider.getLendingPool(), \"MC\"); // Malicious Callback\r\n        require(_amount <= getBalanceInternal(address(this), _reserve), \"IIB\"); // Invalid Internal Balance\r\n\r\n        // =====================================\r\n        ArbitInfo memory decoded = abi.decode(_params, (ArbitInfo));\r\n\r\n        // ============ Buy ============\r\n        uint256 sellAmount;\r\n        // If the router is uniswap v3\r\n        if (decoded.buy.isV3) {\r\n            // Buy at V3\r\n            sellAmount = swapV3(decoded.buy.router, _reserve, decoded.sell.tokenIn, decoded.buy.poolFee, _amount);\r\n        } else {\r\n            // Else, buy at V2\r\n            sellAmount = swapV2(decoded.buy.router, _reserve, decoded.sell.tokenIn, _amount);\r\n        }\r\n\r\n        // ============ Sell ============\r\n        // If the router is uniswap v3\r\n        if (decoded.sell.isV3) {\r\n            // Sell at V3\r\n            swapV3(decoded.sell.router, decoded.sell.tokenIn, _reserve, decoded.sell.poolFee, sellAmount);\r\n        } else {\r\n            // Else, sell at V2\r\n            swapV2(decoded.sell.router, decoded.sell.tokenIn, _reserve, sellAmount);\r\n        }\r\n        \r\n        // =====================================\r\n        uint256 totalDebt = _amount + _fee;\r\n        transferFundsBackToPoolInternal(_reserve, totalDebt);\r\n    }\r\n\r\n    // ============ Swaps ============\r\n    function swapV3(address _router, address _in, address _out, uint24 _fee, uint256 _amount) private returns (uint256) {\r\n        // Check for funds\r\n        require(_amount > 0, \"V3: NA\"); // Naught amount\r\n        require(IERC20(_in).balanceOf(address(this)) >= _amount, \"V3: NEF\"); // Not enough funds\r\n        // Approve the swap\r\n        TransferHelper.safeApprove(_in, address(_router), _amount);\r\n\r\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\r\n            tokenIn: _in,\r\n            tokenOut: _out,\r\n            fee: _fee,\r\n            recipient: msg.sender,\r\n            deadline: block.timestamp,\r\n            amountIn: _amount,\r\n            amountOutMinimum: 0,\r\n            sqrtPriceLimitX96: 0\r\n        });\r\n\r\n        uint256 output = ISwapRouter(_router).exactInputSingle(params);\r\n        return output;\r\n    }\r\n\r\n    function swapV2(address _router, address _in, address _out, uint256 _amount) private returns (uint256) {\r\n        // Check for funds\r\n        require(_amount > 0, \"V2: NA\"); // Naught amount\r\n        require(IERC20(_in).balanceOf(address(this)) >= _amount, \"V2: NEF\"); // Not enough funds\r\n        // Approve the swap\r\n        TransferHelper.safeApprove(_in, address(_router), _amount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = _in;\r\n        path[1] = _out;\r\n\r\n        require(IERC20(_in).approve(_router, _amount), \"V2: AF\"); // Approval failed\r\n        uint[] memory output = IUniswapV2Router02(_router).swapExactTokensForTokens(_amount, 0, path, msg.sender, block.timestamp);\r\n        return output[0];\r\n    }\r\n}\r\n```",
  "closed_by": {
    "login": "cameel",
    "id": 137030,
    "node_id": "MDQ6VXNlcjEzNzAzMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cameel",
    "html_url": "https://github.com/cameel",
    "followers_url": "https://api.github.com/users/cameel/followers",
    "following_url": "https://api.github.com/users/cameel/following{/other_user}",
    "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
    "organizations_url": "https://api.github.com/users/cameel/orgs",
    "repos_url": "https://api.github.com/users/cameel/repos",
    "events_url": "https://api.github.com/users/cameel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cameel/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13634/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13634/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1284442295",
    "html_url": "https://github.com/ethereum/solidity/issues/13634#issuecomment-1284442295",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13634",
    "id": 1284442295,
    "node_id": "IC_kwDOAm_5kc5Mjwi3",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-19T18:56:31Z",
    "updated_at": "2022-10-19T18:57:27Z",
    "author_association": "MEMBER",
    "body": "This is not the right place for asking support questions. Please try asking on the [#solidity](https://gitter.im/ethereum/solidity)  channel. The bug tracker is meant for reporting bugs in the compiler or requesting new features.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1284442295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
