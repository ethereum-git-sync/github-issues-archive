{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13645",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13645/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13645/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13645/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13645",
  "id": 1419910741,
  "node_id": "I_kwDOAm_5kc5Uoh5V",
  "number": 13645,
  "title": "Define storage variables in the constructor",
  "user": {
    "login": "h0tw4t3r",
    "id": 35642018,
    "node_id": "MDQ6VXNlcjM1NjQyMDE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/35642018?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/h0tw4t3r",
    "html_url": "https://github.com/h0tw4t3r",
    "followers_url": "https://api.github.com/users/h0tw4t3r/followers",
    "following_url": "https://api.github.com/users/h0tw4t3r/following{/other_user}",
    "gists_url": "https://api.github.com/users/h0tw4t3r/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/h0tw4t3r/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/h0tw4t3r/subscriptions",
    "organizations_url": "https://api.github.com/users/h0tw4t3r/orgs",
    "repos_url": "https://api.github.com/users/h0tw4t3r/repos",
    "events_url": "https://api.github.com/users/h0tw4t3r/events{/privacy}",
    "received_events_url": "https://api.github.com/users/h0tw4t3r/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-10-23T19:52:50Z",
  "updated_at": "2022-10-23T19:52:50Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!--## Prerequisites\r\n\r\n- First, many thanks for taking part in the community. We really appreciate that.\r\n- We realize there is a lot of data requested here. We ask only that you do your best to provide as much information as possible so we can better help you.\r\n- Support questions are better asked in one of the following locations:\r\n    - [Solidity chat](https://gitter.im/ethereum/solidity)\r\n    - [Stack Overflow](https://ethereum.stackexchange.com/)\r\n- Ensure the issue isn't already reported (check `feature` and `language design` labels).\r\n- If you feel uncertain about your feature request, perhaps it's better to open a language design or feedback forum thread via the issue selector, or by going to the forum directly.\r\n    - [Solidity forum](https://forum.soliditylang.org/)\r\n\r\n*Delete the above section and the instructions in the sections below before submitting*\r\n-->\r\n\r\n## Abstract\r\nYou can't implicitly define storage variables in the constructor and have to define ones explicitly.\r\n\r\nIt forces developers to **always** define the state variables explicitly:\r\n```solidity\r\ncontract Contract {\r\n  uint256 a;\r\n  uint256 b;\r\n  constructor(uint256 _a, uint256 _b) {\r\n    a = _a;\r\n    b = _b:\r\n  }\r\n}\r\n```\r\n\r\nSuch not only expands the overall source size but also creates possible security flaws when dealing with **underscores**. There are plenty of cases when developers have forgotten to put one, leading to _incorrect logic execution_ with _loss of funds_. \r\n<!--Please describe by example what problem you see in the current Solidity language and reason about it.-->\r\n\r\n## Motivation\r\nSuch has been a feature in many languages.\r\n\r\nConsider the next JavaScript example:\r\n```js\r\nclass ContractLike {\r\n  constructor(public a, private b) {}\r\n}\r\n```\r\nIt's much simpler to define variables this way, instead of\r\n```js\r\nclass ContractLike {\r\n  public a;\r\n  public b;\r\n  constructor(a, b) {\r\n    this.a = a;\r\n    this.b = b;\r\n  }\r\n}\r\n```\r\n\r\nSolidity should follow the latest industry standards and keep with them where possible.\r\n<!--In this section you describe how you propose to address the problem you described earlier, including by giving one or more exemplary source code snippets for demonstration.-->\r\n\r\n## Specification\r\n\r\nIf variables put in `constructor` come with state visibility parameters, they are automatically placed on the storage top in the same order they are put in the `constructor`.\r\n\r\nExample:\r\n```solidity\r\ncontract Contract {\r\n  constructor(address public a, uint256 public immutable b, bool private c, int128 internal d) {\r\n    a = 0x0123456789ABCDEF0123456789ABCDEF01234567;\r\n    b = 11;\r\n    c = false;\r\n    d = -12;\r\n  }\r\n}\r\n```\r\nIf there are explicitly declared storage variables, they are put after the ones defined in the constructor (or before, depending on the implementation details).\r\n\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow any developer to implement the functionality.-->\r\n\r\n## Backwards Compatibility\r\nThe feature is fully backward compatible as it does not break the current syntax but only extends it.\r\n\r\n<!--\r\nAll language changes that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity.\r\n\r\nPlease describe how you propose to deal with these incompatibilities.\r\n-->\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13645/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13645/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
