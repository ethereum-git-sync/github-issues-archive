{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10720",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10720/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10720/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10720/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10720",
  "id": 780566063,
  "node_id": "MDU6SXNzdWU3ODA1NjYwNjM=",
  "number": 10720,
  "title": "[Optimizer] Loop Invariant Code Motion for storage and memory writes that are invariant",
  "user": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1012614086,
      "node_id": "MDU6TGFiZWwxMDEyNjE0MDg2",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20difficulty",
      "name": "medium difficulty",
      "color": "7dcddb",
      "default": false,
      "description": ""
    },
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-01-06T13:49:56Z",
  "updated_at": "2022-08-17T13:48:36Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Writes that are invariant in the for loop can be moved outside the loop as long as it's inside an `if` statement with the same statement as the `for` loop.\r\n\r\nFor example,\r\n\r\n```\r\nlet i := 0\r\nfor {} lt(i, 10) {i := add(i, 1) }\r\n{\r\n   sstore(0, 1)\r\n   // more things that does not modify storage\r\n}\r\n```\r\n\r\nThe above code can be converted into\r\n\r\n```\r\nlet i := 0\r\nif lt(i, 10) { sstore(0, 1) }\r\nfor {} lt(i, 10) {i := add(i, 1) }\r\n{\r\n  // rest of the code\r\n}\r\n```\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10720/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10720/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758785159",
    "html_url": "https://github.com/ethereum/solidity/issues/10720#issuecomment-758785159",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10720",
    "id": 758785159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODc4NTE1OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-12T16:44:41Z",
    "updated_at": "2021-01-12T16:44:41Z",
    "author_association": "MEMBER",
    "body": "The perfect way to deal with this would be to optimize\r\n```\r\nfor { let i := 0 } lt(i, sload(0)) { i := add(i, 1) } {\r\n  sstore(1, i)\r\n  sstore(add(2, i), i)\r\n}\r\n```\r\nto\r\n```\r\nlet x := sload(0)\r\nif x { sstore(1, sub(x, 1)) } // \"compute\" the final value stored in 1\r\nfor { let i := 0 } lt(i, x) { i := add(i, 1) } {\r\n  sstore(add(2, i), i)\r\n}\r\n```\r\nHow can we achieve this?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758785159/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758838592",
    "html_url": "https://github.com/ethereum/solidity/issues/10720#issuecomment-758838592",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10720",
    "id": 758838592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODgzODU5Mg==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-12T18:06:09Z",
    "updated_at": "2021-01-12T18:06:09Z",
    "author_association": "MEMBER",
    "body": "Optimistic loop unrolling and backtracking :-)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758838592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758885306",
    "html_url": "https://github.com/ethereum/solidity/issues/10720#issuecomment-758885306",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10720",
    "id": 758885306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODg4NTMwNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-12T19:31:07Z",
    "updated_at": "2021-01-12T19:31:07Z",
    "author_association": "MEMBER",
    "body": "I would say it's more like detecting linear dependencies. At some point, I would also like to do the optimization from slide 24 to 25 here: https://chriseth.github.io/notes/talks/solidity_optimizer_devcon4/#/24",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758885306/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758989816",
    "html_url": "https://github.com/ethereum/solidity/issues/10720#issuecomment-758989816",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10720",
    "id": 758989816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODk4OTgxNg==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-12T21:04:57Z",
    "updated_at": "2021-01-12T21:04:57Z",
    "author_association": "MEMBER",
    "body": "Well... that's hard in general... but in general it still works by unrolling first and simplifying. And then comparing the result with the original loop body. If you can then detect that symbolically dividing yields a constant you have solved that particular case...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758989816/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
