{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/6270",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/6270/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/6270/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/6270/events",
  "html_url": "https://github.com/ethereum/solidity/issues/6270",
  "id": 420560595,
  "node_id": "MDU6SXNzdWU0MjA1NjA1OTU=",
  "number": 6270,
  "title": "Overflow-safe addition and multiplication by extending the result type",
  "user": {
    "login": "ahoppen",
    "id": 4062178,
    "node_id": "MDQ6VXNlcjQwNjIxNzg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4062178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ahoppen",
    "html_url": "https://github.com/ahoppen",
    "followers_url": "https://api.github.com/users/ahoppen/followers",
    "following_url": "https://api.github.com/users/ahoppen/following{/other_user}",
    "gists_url": "https://api.github.com/users/ahoppen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ahoppen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ahoppen/subscriptions",
    "organizations_url": "https://api.github.com/users/ahoppen/orgs",
    "repos_url": "https://api.github.com/users/ahoppen/repos",
    "events_url": "https://api.github.com/users/ahoppen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ahoppen/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 467898404,
      "node_id": "MDU6TGFiZWw0Njc4OTg0MDQ=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/breaking%20change%20:warning:",
      "name": "breaking change :warning:",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-03-13T15:21:48Z",
  "updated_at": "2019-05-11T08:54:36Z",
  "closed_at": "2019-05-11T08:54:36Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The below proposal is not 100% fletched out yet, but I'd like to get a general feedback of whether the idea is desirable. If that is the case, I am more than happy to write a more detailed proposal and discuss further corner cases (see Open ends).\r\n\r\n## Abstract\r\n\r\nThe result type of multiplication and addition is the same as the first operand, which may cause an overflow in case the result type cannot hold the multiplication/addition result. That issue could be solved if the multiplication/addition always returned a type that is safe to hold the result. (e.g.  `uint16 * uint32 = uint48`)\r\n\r\n## Motivation\r\n\r\nOver- and underflow are sources of bugs that are usually hard to spot and easy to miss. It would be great if Solidity could assist the developer in catching those bugs by requiring to make potential overflow positions explicit.\r\n\r\n## Specification\r\n\r\nFor simplicity, I only consider `uint`. `int` is handled analogously.\r\n\r\nI propose two changes:\r\n1. The resulting type of multiplying two integers `a` and `b` of types `uint<x>` and `uint<y>` respectively should be `uint<x + y>`. The semantics of `a + b` should be equivalent to the current behaviour of `uint<x+y>(a) + b`.\r\n2. The resulting type of adding two integers `a` and `b` of types `uint<x>` and `uint<y>` respectively should be `uint<max(x, y) + 8>`. The semantics of `a + b` should be equivalent to the current behaviour of `uint<max(x, y) + 8>(a) + b`.\r\n\r\n## Open ends\r\nThese are some areas I have thought about so far but not reached a definite conclusion on. Discussion on those could continue if the overall idea is desirable.\r\n\r\n- The semantics of multiplication and addition would need to be discussed if the resulting type is `uint<n>` with `n > 256`\r\n  - I would propose an internal type (name is just a placeholder for now) `uint_too_large` that cannot spelled out in source. Hence the user would need to specify a cast and make the potential overflow explicity\r\n- The above idea can also be extended to left bitshifts and exponentiation by making `uint<x> << uint<y>` return `uint<x * y>`. In most cases this will result in a `uint_too_large` and force the developer to make any potential overflow explicit.\r\n- The `+=` and `*=` operators are still unsafe for overflow. Their behaviour would need to be considered\r\n  - Removal of those operators would radical but the safest option\r\n- If `a`, `b`, and `c` all have type `uint8` then with the proposed behaviour `a + b + c` has type `uint24` while `uint16` would be sufficient. That could be solved by introducing types `uint<n>` where `n % 8 != 0`. Those types are internally represented as the next multiple of 8 and are only there to aid the type checker. With those types `a + b` could return a `uint9` and the addition of `c` would result in a `uint10` that will then be represented as a `uint16` on the bytecode level.\r\n- I do not know of any programming languages that precedent the described typing behaviour. Hence the behaviour might be confusing for developers. However, I think, given the added safety, the confusion might be worth it.\r\n- This idea is not able to guard against overflow. Would it be desirable to protect developers from one but not another?\r\n\r\n## Backwards Compatibility\r\n\r\nAll addition and multiplication operations in existing Solidity source code that assign to a type that's not big enough to hold an overflow-free result would need to be audited for overflow. While this is a burden on the developer, I can imagine careful thinking about all of those operations may catch some bugs.\r\n\r\nAlso it changes behaviour of code like the following:\r\n```\r\nuint8 a = 255;\r\nuint8 b = 255;\r\nuint16 c = a + b;\r\n```\r\n\r\nPreviously, the result was `c = (255 + 255) % 256 = 254`. With the new behaviour, the result is `c = 510`. I believe that the current behaviour is almost never what the developer wants to write and thus the behaviour change would be OK.",
  "closed_by": {
    "login": "ahoppen",
    "id": 4062178,
    "node_id": "MDQ6VXNlcjQwNjIxNzg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4062178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ahoppen",
    "html_url": "https://github.com/ahoppen",
    "followers_url": "https://api.github.com/users/ahoppen/followers",
    "following_url": "https://api.github.com/users/ahoppen/following{/other_user}",
    "gists_url": "https://api.github.com/users/ahoppen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ahoppen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ahoppen/subscriptions",
    "organizations_url": "https://api.github.com/users/ahoppen/orgs",
    "repos_url": "https://api.github.com/users/ahoppen/repos",
    "events_url": "https://api.github.com/users/ahoppen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ahoppen/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/6270/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/6270/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472688083",
    "html_url": "https://github.com/ethereum/solidity/issues/6270#issuecomment-472688083",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6270",
    "id": 472688083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjY4ODA4Mw==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T03:12:17Z",
    "updated_at": "2019-03-14T04:53:24Z",
    "author_association": "NONE",
    "body": "I don't think this is a good proposal, as for most cases, if you find you use `uint8` will be overflow, why don't use `uint16` to replace, I think when I want to use a number, I will consider the type I have defined is suitable or not, if I just want to  use `uint8` rather than `uint16`, I will make more check to ensure it will not be overflow.\r\n```\r\nuint8 a = 255;\r\nuint8 b = 255;\r\nuint16 c = a + b;\r\n```\r\nI think the result of above is `c = 254`, besides, I think, as for Smart Contract, we can use the library [SafeMath](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol) of the OpenZeppelin to avoid Over- and underflow. of course, this is my foolish thought.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472688083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472726009",
    "html_url": "https://github.com/ethereum/solidity/issues/6270#issuecomment-472726009",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6270",
    "id": 472726009,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjcyNjAwOQ==",
    "user": {
      "login": "ahoppen",
      "id": 4062178,
      "node_id": "MDQ6VXNlcjQwNjIxNzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4062178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahoppen",
      "html_url": "https://github.com/ahoppen",
      "followers_url": "https://api.github.com/users/ahoppen/followers",
      "following_url": "https://api.github.com/users/ahoppen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahoppen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahoppen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahoppen/subscriptions",
      "organizations_url": "https://api.github.com/users/ahoppen/orgs",
      "repos_url": "https://api.github.com/users/ahoppen/repos",
      "events_url": "https://api.github.com/users/ahoppen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahoppen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T06:52:29Z",
    "updated_at": "2019-03-14T06:52:29Z",
    "author_association": "NONE",
    "body": "> I don't think this is a good proposal, as for most cases, if you find you use uint8 will be overflow, why don't use uint16 to replace, I think when I want to use a number, I will consider the type I have defined is suitable or not, if I just want to use uint8 rather than uint16, I will make more check to ensure it will not be overflow\r\n\r\nMy motivation was that a `uint8` might be the argument of a function. Hence you can never know which value a user passes in and always need to assume the maximum value. Changing the type to `uint16` just shifts the problem from `2^8-1` to `2^16-1`. Allowing the user to enter a `uint16` and then doing a `require(x < 256)` makes one byte of the input effectively useless, which isn’t desirable either. Furthermore it‘s easy to miss the check. \r\n\r\n> I think the result of above is c = 254\r\n\r\nThanks, I fixed the typo. \r\n\r\n> besides, I think, as for Smart Contract, we can use the library SafeMath of the OpenZeppelin to avoid Over- and underflow. of course, this is my foolish thought.\r\n\r\nI think Solidity should be over/underflow-safe by default and not require the use of an external library. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472726009/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472733842",
    "html_url": "https://github.com/ethereum/solidity/issues/6270#issuecomment-472733842",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6270",
    "id": 472733842,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjczMzg0Mg==",
    "user": {
      "login": "Skyge",
      "id": 27282380,
      "node_id": "MDQ6VXNlcjI3MjgyMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27282380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skyge",
      "html_url": "https://github.com/Skyge",
      "followers_url": "https://api.github.com/users/Skyge/followers",
      "following_url": "https://api.github.com/users/Skyge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skyge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skyge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skyge/subscriptions",
      "organizations_url": "https://api.github.com/users/Skyge/orgs",
      "repos_url": "https://api.github.com/users/Skyge/repos",
      "events_url": "https://api.github.com/users/Skyge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skyge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T07:26:17Z",
    "updated_at": "2019-03-14T07:26:17Z",
    "author_association": "NONE",
    "body": "I am not sure, but there is a similar issue about this, [solidity/issues/796](https://github.com/ethereum/solidity/issues/796)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472733842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472783341",
    "html_url": "https://github.com/ethereum/solidity/issues/6270#issuecomment-472783341",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6270",
    "id": 472783341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mjc4MzM0MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T10:03:25Z",
    "updated_at": "2019-03-14T10:03:25Z",
    "author_association": "MEMBER",
    "body": "I think it is a valid proposal to consider the addition of `uintN` and `uintM` to result in `uint(N+M)` and I think there are already languages that behave like that. This is of course complementary to runtime overflow checks which we plan to add. Such a runtime overflow check would also be performed upon explicit conversion like in `uint8(x + y)`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472783341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/490217541",
    "html_url": "https://github.com/ethereum/solidity/issues/6270#issuecomment-490217541",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6270",
    "id": 490217541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDIxNzU0MQ==",
    "user": {
      "login": "ahoppen",
      "id": 4062178,
      "node_id": "MDQ6VXNlcjQwNjIxNzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4062178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahoppen",
      "html_url": "https://github.com/ahoppen",
      "followers_url": "https://api.github.com/users/ahoppen/followers",
      "following_url": "https://api.github.com/users/ahoppen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahoppen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahoppen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahoppen/subscriptions",
      "organizations_url": "https://api.github.com/users/ahoppen/orgs",
      "repos_url": "https://api.github.com/users/ahoppen/repos",
      "events_url": "https://api.github.com/users/ahoppen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahoppen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-07T19:10:27Z",
    "updated_at": "2019-05-07T19:10:27Z",
    "author_association": "NONE",
    "body": "Is there anything I can do to help push this proposal? Or is there any formal process for such a language change?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/490217541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/490759818",
    "html_url": "https://github.com/ethereum/solidity/issues/6270#issuecomment-490759818",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6270",
    "id": 490759818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDc1OTgxOA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-09T06:21:23Z",
    "updated_at": "2019-05-09T06:21:23Z",
    "author_association": "MEMBER",
    "body": "Unfortunately, we do not have a formal process. Also, radical breaking changes are a little less likely to be adopted nowadays. One problem I see with this proposal is that you basically would have to write `uint x = uint(a + b)` all the time and it would just get a habit without thinking about potential overflows. In contrast to that, the SMTChecker achieves a similar goal but is more flexible - it can consider the actual values, control flow, etc and not just the type of a value.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/490759818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/491493252",
    "html_url": "https://github.com/ethereum/solidity/issues/6270#issuecomment-491493252",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6270",
    "id": 491493252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTQ5MzI1Mg==",
    "user": {
      "login": "ahoppen",
      "id": 4062178,
      "node_id": "MDQ6VXNlcjQwNjIxNzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4062178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahoppen",
      "html_url": "https://github.com/ahoppen",
      "followers_url": "https://api.github.com/users/ahoppen/followers",
      "following_url": "https://api.github.com/users/ahoppen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahoppen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahoppen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahoppen/subscriptions",
      "organizations_url": "https://api.github.com/users/ahoppen/orgs",
      "repos_url": "https://api.github.com/users/ahoppen/repos",
      "events_url": "https://api.github.com/users/ahoppen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahoppen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-11T08:54:36Z",
    "updated_at": "2019-05-11T08:54:36Z",
    "author_association": "NONE",
    "body": "I wasn't aware of `SMTChecker`. That should solve the same problem in a nicer way indeed. Thanks for the pointer.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/491493252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
