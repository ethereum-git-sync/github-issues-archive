{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13945",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13945/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13945/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13945/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13945",
  "id": 1574942826,
  "node_id": "I_kwDOAm_5kc5d37hq",
  "number": 13945,
  "title": "Dynamic exception type: std::bad_cast",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 4438006499,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaa4w",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20effort",
      "name": "low effort",
      "color": "ffb1fa",
      "default": false,
      "description": "There is not much implementation work to be done. The task is very easy or tiny."
    },
    {
      "id": 4810143649,
      "node_id": "LA_kwDOAm_5kc8AAAABHrT3oQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/smt",
      "name": "smt",
      "color": "1d76db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2023-02-07T20:00:44Z",
  "updated_at": "2023-03-20T12:59:45Z",
  "closed_at": "2023-02-08T18:39:21Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nI followed the [SMTChecker docs](https://docs.soliditylang.org/en/v0.8.18/smtchecker.html#natspec-function-abstraction) and added the following annotation to all of my PRBMath functions:\r\n\r\n```solidity\r\n/// @custom:smtchecker abstract-function-nondet\r\n```\r\n\r\nSee commit [588c91][588c91].\r\n\r\nI then proceeded with running the SMTChecker in a private repo that has PRBMath as a dependency, when I got this error:\r\n\r\n```text\r\n❯ FOUNDRY_PROFILE=smt forge build --ignored-error-codes 7737\r\n[⠊] Compiling...\r\n[⠊] Compiling 221 files with 0.8.18\r\n[⠒] Solc 0.8.18 finished in 10.34s\r\nError:\r\nCompiler run failed\r\nUnknown exception during compilation: Dynamic exception type: std::bad_cast\r\nstd::exception::what: std::bad_cast\r\n```\r\n\r\nPrior to adding the `abstract-function-nondet` annotation, the SMTChecker was running successfully.\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.8.18\r\n- Target EVM version (as per compiler settings): default\r\n- Framework/IDE (e.g. Truffle or Remix): Forge\r\n- EVM execution environment / backend / blockchain client: REVM\r\n- Operating system: macOS (Apple Silicon)\r\n\r\n## Steps to Reproduce\r\n\r\n1. Create a Forge project.\r\n2. Install PRBMath from commit [de5ccb9][de5ccb9].\r\n3. Use any PRBMath function.\r\n4. Enable the SMTChecker in the Foundry config e.g. with the config below:\r\n\r\n```toml\r\n[profile.smt.model_checker]\r\n  engine = \"chc\"\r\n  targets = [\r\n    \"assert\",\r\n    \"constantCondition\",\r\n    \"divByZero\",\r\n    \"outOfBounds\",\r\n    \"overflow\",\r\n    \"underflow\",\r\n  ]\r\n```\r\n\r\n[588c91]:https://github.com/PaulRBerg/prb-math/commit/588c91",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13945/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13945/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1421454915",
    "html_url": "https://github.com/ethereum/solidity/issues/13945#issuecomment-1421454915",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13945",
    "id": 1421454915,
    "node_id": "IC_kwDOAm_5kc5Uua5D",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-07T21:09:36Z",
    "updated_at": "2023-02-07T21:09:36Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report! Nice to see that feature being used, even if it's broken lol. After a quick look I think I know what's wrong, will try to fix tomorrow.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1421454915/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1422222773",
    "html_url": "https://github.com/ethereum/solidity/issues/13945#issuecomment-1422222773",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13945",
    "id": 1422222773,
    "node_id": "IC_kwDOAm_5kc5UxWW1",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T08:34:00Z",
    "updated_at": "2023-02-08T08:34:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, Leo.\r\n\r\nWhile we are at it, I have another related question about the proper usage of this annotation. The docs say this:\r\n\r\n> Certain functions ... may be too complex to be analyzed in a fully automated way\r\n\r\nI imagine that this is more \"touch and feel\" than science, but I'm curious if there's any additional thoughts you could share about what \"complex\" means for SMTChecker?\r\n\r\nFor instance, should I add the non-deterministic annotation to my implementation of [`avg`](https://github.com/PaulRBerg/prb-math/blob/c22c7933e0fad0cc6d11e45971f09befddce6618/src/ud60x18/Math.sol#L41)?\r\n\r\n```solidity\r\nfunction avg(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\r\n    uint256 xUint = unwrap(x);\r\n    uint256 yUint = unwrap(y);\r\n    unchecked {\r\n        result = wrap((xUint & yUint) + ((xUint ^ yUint) >> 1));\r\n    }\r\n}\r\n```\r\n\r\nIt uses bitwise operators - does this qualify as \"complex\" for SMTChecker purposes?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1422222773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1422329677",
    "html_url": "https://github.com/ethereum/solidity/issues/13945#issuecomment-1422329677",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13945",
    "id": 1422329677,
    "node_id": "IC_kwDOAm_5kc5UxwdN",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T09:57:33Z",
    "updated_at": "2023-02-08T09:57:33Z",
    "author_association": "MEMBER",
    "body": "You're right that the simplest answer is indeed \"touch and feel\". An informed heuristic though depends on the engine and requires some extra knowledge about how they work.\r\n\r\nIn pure SMT, indeed bitwise operations are more complicated than arithmetic. Nonlinear arithmetic though (multiplication or division between variables) is more complicated than bitwise ops. Solving Bitvectors (required by bitwise ops) in an SMT solver is NP-complete, so it's bad but they manage sort of often. Nonlinear arithmetic is straight up undecidable, so you're lucky if anything is solved.\r\n\r\nRegardless of the above, the main question is how these functions are used in the code that has the property you're trying to prove. If the function is used in a very local way, in a way that doesn't really affect storage or need storage, BMC might be able to handle it (precisely, without the abstraction annotation). However if such function is used in combination with state transitions (as in the contract's lifetime) to imply the property you're trying to prove, BMC won't help since it only analyzes external functions in isolation and inlines function calls. At this point you need CHC to prove your property, since it does handle state properly. The trade off of having this capability is the overhead of requiring inductive invariants (very hard to compute) even for simple cases. If the property requires bitwise/nonlinear reasoning, the CHC solver will need to compute inductive invariants on top of Bitvectors/Nonlinear arithmetic, resp, which is even harder. At this point you might need to abstract the function.\r\n\r\nWhat I usually do in such cases when dealing with a lot of math (did it for code like Uniswap and code that uses your fixed point lib) is just try the precise version and then annotate function by function. The annoying thing is that in the end you might need to abstract too many things to have it go through, which might be too abstract and just give you ridiculous false positives.\r\n\r\nWhat I'd also recommend is trying out [Eldarica](https://github.com/uuverifiers/eldarica/) as a solver for the CHC engine. It's slower than z3 but it can solve problems that z3 can't (which doesn't imply it will be able to solve math stuff). You need to have it available in the system and use the option `settings.modelChecker.solvers = [ \"eld\" ]` in standard JSON for example. I think I didn't add the `modelChecker.solvers` option to the Foundry config yet, but shouldn't be hard and I intend to do it soon.\r\n\r\nFinally, the most advanced thing you can do (which is also what I do) for the most complex single properties, is to dump the smtlib2 file (SMT theorem) for either the BMC or CHC engine (depending whether your property needs state reasoning or not), and try out different configurations of different solvers (by that I mean tens or hundreds or thousands of configurations). The SMTChecker only tries out 2 configurations of z3 and 1 configuration of Eldarica, which is very likely not enough for the hardest properties. It's a hard balance to find since spawning a massive load of solvers/configurations would be too much for the normal user. In the FV industry this is a common approach (spawning tons of solvers/configs) for complex properties, where different configurations might even consist of just changing the random seed in a solver run, since these solvers are very sensitive to changes and such change might be the difference between solving something quite quickly or not at all (long timeout). If you eventually wanna go that route lmk so I can give you some pointers.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1422329677/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1423910034",
    "html_url": "https://github.com/ethereum/solidity/issues/13945#issuecomment-1423910034",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13945",
    "id": 1423910034,
    "node_id": "IC_kwDOAm_5kc5U3ySS",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-09T09:50:21Z",
    "updated_at": "2023-02-09T10:05:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you for the taking the time to write this detailed answer, @leonardoalt. Some of the points you made here may be well worth including in the SMTChecker documentation page.\r\n\r\n> In pure SMT, indeed bitwise operations are more complicated than arithmetic. Nonlinear arithmetic though (multiplication or division between variables) is more complicated than bitwise ops\r\n\r\nGreat, so *non-linear arithmetic > bitwise > linear arithmetic*.\r\n\r\n> What I usually do in such cases when dealing with a lot of math (did it for code like Uniswap and code that uses your fixed point lib) is just try the precise version and then annotate function by function\r\n\r\nThanks for the tip! From the perspective of a library developer, the downside of this approach is that it makes it difficult to decide what should be marked as abstract-nondet, and what not.\r\n\r\nI think I will just annotate all of the functions; based on your explanation above, it seems to me that the solver will have a hard time proving things with most functions in PRBMath, because they use either bitwise operations or inline assembly. Sophisticated users can just copy-paste the function they are interested in and remove the annotation to make it precise.\r\n\r\n> What I'd also recommend is trying out [Eldarica](https://github.com/uuverifiers/eldarica/) as a solver for the CHC engine\r\n\r\nThanks, I'll give it a go.\r\n\r\n> I think I didn't add the `modelChecker.solvers` option to the Foundry config yet, but shouldn't be hard and I intend to do it soon.\r\n\r\nThis would be super helpful, thanks very much. A related issue [I bumped into recently](https://github.com/foundry-rs/foundry/discussions/4297) is the lack of the `showUnproved` config option in Foundry - I wanted to use this after receiving the following warning from the compiler:\r\n\r\n```text\r\nWarning: CHC: 10 verification condition(s) could not be proved. Enable the model checker option \"show unproved\" to see all of them. Consider choosing a specific contract to be verified in order to reduce the solving problems.\r\n```\r\n\r\n> the most advanced thing you can do (which is also what I do)\r\n\r\nChad.\r\n\r\n> to dump the smtlib2 file (SMT theorem) for either the BMC or CHC engine (depending whether your property needs state reasoning or not), and try out different configurations of different solvers (by that I mean tens or hundreds or thousands of configurations)\r\n\r\nInteresting. I do have a few questions about this, but I will follow up separately, in private, if I do end up pursuing this approach.\r\n\r\n>  If you eventually wanna go that route lmk so I can give you some pointers\r\n\r\nThank you, ser.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1423910034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1437031506",
    "html_url": "https://github.com/ethereum/solidity/issues/13945#issuecomment-1437031506",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13945",
    "id": 1437031506,
    "node_id": "IC_kwDOAm_5kc5Vp1xS",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-20T13:31:35Z",
    "updated_at": "2023-02-20T13:31:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "It looks like now there is support for `solvers` and `show_unproved` in Foundry thanks to @wiasliaw's recent PR in `ethers-rs`:\r\n\r\nhttps://github.com/gakonst/ethers-rs/pull/2147",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1437031506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
