{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/8433/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/8433/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/8433/events",
  "html_url": "https://github.com/ethereum/solidity/issues/8433",
  "id": 576691873,
  "node_id": "MDU6SXNzdWU1NzY2OTE4NzM=",
  "number": 8433,
  "title": "Invariants",
  "user": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "314aff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2020-03-06T04:32:37Z",
  "updated_at": "2022-09-26T19:13:04Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Abstract\r\nI want the ability to define invariant assertions on my contract that are automatically checked anytime an externally called non-static function returns.\r\n\r\n## Motivation\r\nWriting secure code is hard.  It is much easier to write secure code if you can make some assertions that are guaranteed to always be true.\r\n\r\n## Specification\r\nA new `invariant` keyword would be added and would be allowed as a top-level expression on a contract akin to `modifier` and `function`.  Any code specified in the `invariant` block would automatically be executed at the end of the constructor and anytime a non-view/pure function is called by an external caller\r\n```solidity\r\ncontract Apple {\r\n    uint256 a = 10;\r\n    uint256 b = 5;\r\n    invariant {\r\n        require(a > b);\r\n    }\r\n    function banana() external {\r\n        ...\r\n        // invariant contents would be executed here automatically, because this function is external\r\n    }\r\n    function cherry() public {\r\n        ...\r\n        // invariant contents would be executed here if this function was called externally, but not if called internally\r\n    }\r\n    function durian() internal {\r\n        ...\r\n        // invariant never called here since this is never called externally\r\n    }\r\n    function eggplant() public view {\r\n        ...\r\n        // invariant never called here because this function is view\r\n    }\r\n}\r\n```\r\n\r\nThis behavior can be partially simulated with a modifier like:\r\n```solidity\r\ncontract Apple {\r\n    modifier invariant() {\r\n        _;\r\n        require(a > b);\r\n    }\r\n}\r\n```\r\nHowever, this requires the user remember to put it on every external/public non-view function, leave it off of every internal/private/view/pure function, and even if you successfully do that without any mistakes, you cannot (as far as I know) detect from Solidity whether a particular function was called internally or externally (e.g., JUMP vs CALL).  By having a language construct, the compiler can ensure that the invariant code is executed in all of the right places, and not executed when it isn't necessary.\r\n\r\n## Backwards Compatibility\r\nI don't think there are any backward compatibility issues here.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/8433/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/8433/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/595884707",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-595884707",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 595884707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTg4NDcwNw==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-06T17:51:11Z",
    "updated_at": "2020-03-06T17:51:11Z",
    "author_association": "NONE",
    "body": "Nice idea.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/595884707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/596469676",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-596469676",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 596469676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjQ2OTY3Ng==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-09T11:23:12Z",
    "updated_at": "2020-03-09T11:23:23Z",
    "author_association": "MEMBER",
    "body": "@MicahZoltu Please take a look at https://github.com/ethereum/solidity/issues/4991, sounds similar.\r\nIn general we agree that this should exist. The main point is deciding on 1) the expressiveness 2) the syntax and 3) code generation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/596469676/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598214018",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-598214018",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 598214018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODIxNDAxOA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-12T14:21:57Z",
    "updated_at": "2020-03-12T14:21:57Z",
    "author_association": "MEMBER",
    "body": "If I understand it correctly, the scope of this issue is invariants that always generate code and can be written in regular solidity (as opposed to #4991). To do things like computing the sum of all balances, you would need explicit \"shadow\" variables (which are not really shadow variables because they actually exist in storage).\r\n\r\nCould you create some examples where such invariants make sense and can be expressed in Solidity, @MicahZoltu ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598214018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598541061",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-598541061",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 598541061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODU0MTA2MQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T04:22:39Z",
    "updated_at": "2020-03-13T04:23:18Z",
    "author_association": "MEMBER",
    "body": "The high level set of examples are anything where Design by Contract makes sense, meaning you have some invariants you want to assert are always true.\r\n\r\n```solidity\r\ncontract Apple {\r\n\tErc20 tokenA;\r\n\tErc20 tokenB;\r\n\r\n\tinvariant {\r\n\t\trequire(tokenA.balanceOf(this) + tokenB.balanceOf(this) == 1000);\r\n\t}\r\n\r\n\tconstructor(Erc20 _tokenA, Erc20 _tokenB) {\r\n\t\ttokenA = _tokenA;\r\n\t\ttokenB = _tokenB;\r\n\t\ttokenA.transferFrom(msg.sender, 1000);\r\n\t}\r\n\r\n\tfunction swapFromA(uint256 amount) public {\r\n\t\ttokenA.transferFrom(msg.sender, amount);\r\n\t\ttokenB.transfer(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction swapFromB(uint256 amount) public {\r\n\t\ttokenB.transferFrom(msg.sender, amount);\r\n\t\ttokenA.transfer(msg.sender, amount);\r\n\t}\r\n\r\n\t// ... a bunch of other functions that transfer token A and B around in various ways, all of which may have bugs\r\n}\r\n```\r\nThis is a pretty simple example, but I think gets the general idea across.  An invariant allows you to specify in code (and validate at runtime!) that some constraint *always* holds true automatically at the end of every external call into the contract.  Often times contracts can become complex and there is room for subtle bugs buried inside the code that cause a constraint that *should* have been upheld to become violated.\r\n\r\nIn a perfect world, we would have static analysis tools that could make strong guarantees that invariant constraints were never violated, but building a design by contract language that is 100% sound is a *really hard problem*.  Runtime invariant constraints are a poor mans solution to the same problem, where you don't make guarantees at compile time, but instead just ensure that at runtime the constraints are upheld by rolling back any transaction that would result in them being violated at the end of the transaction.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598541061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598704911",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-598704911",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 598704911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODcwNDkxMQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T12:52:20Z",
    "updated_at": "2020-03-13T12:52:20Z",
    "author_association": "MEMBER",
    "body": "One of my worries is that, if the invariant somehow stops to be true (for example due to a bug in the external erc20 contract in the example above), the contract is blocked forever. Wouldn't it be better to instead move it into a consistent emergency state of some sort?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598704911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598810141",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-598810141",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 598810141,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODgxMDE0MQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T16:35:04Z",
    "updated_at": "2020-03-13T16:35:04Z",
    "author_association": "MEMBER",
    "body": "@chriseth why can https://github.com/ethereum/solidity/issues/4991 not be written in regular Solidity? The initial proposal there is similar to this, what changes is the use of `assert` instead of `require` at the end of the functions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598810141/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598811914",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-598811914",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 598811914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODgxMTkxNA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T16:38:58Z",
    "updated_at": "2020-03-13T16:38:58Z",
    "author_association": "MEMBER",
    "body": "> One of my worries is that, if the invariant somehow stops to be true (for example due to a bug in the external erc20 contract in the example above), the contract is blocked forever. Wouldn't it be better to instead move it into a consistent emergency state of some sort?\r\n\r\nIn that case people would need to be sure about the code of the tokens they're referring to. IMO @MicahZoltu 's idea forces people to design things properly. Of course we can't expect tools to be able to verify those invariant, but being explicit about such a contract invariant might help proving other targets.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598811914/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/599589514",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-599589514",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 599589514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTU4OTUxNA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-16T15:09:46Z",
    "updated_at": "2020-03-16T15:09:46Z",
    "author_association": "MEMBER",
    "body": "@leonardoalt I thought that #4991 also includes things like `sum(balances)`.\r\n\r\nIf you cannot prove the invariant correct, then I would not want to use it without a way to unlock the contract again. The contract being locked might also be caused by a compiler bug, for example.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/599589514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/599848343",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-599848343",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 599848343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTg0ODM0Mw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-17T02:41:31Z",
    "updated_at": "2020-03-17T02:41:31Z",
    "author_association": "MEMBER",
    "body": "@chriseth There are invariants that can be corrected should they not hold, and there are invariants that can be proven via static analysis, and there are invariants that if asserted on every function call can be guaranteed.\r\n\r\nFor example, an invariant that one storage variable is greater than the other can be asserted on at the end of the constructor, and at the end of every external function call.  We can know that this invariant is guaranteed to hold without looking at any code because no transaction can change it without reverting.\r\n\r\nWhile you are correct, there are *some* invariants that can be dangerous, I think the value add of compiler enforced invariant checking far outweighs the risks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/599848343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/601817795",
    "html_url": "https://github.com/ethereum/solidity/issues/8433#issuecomment-601817795",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8433",
    "id": 601817795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTgxNzc5NQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-20T17:19:54Z",
    "updated_at": "2020-03-20T17:19:54Z",
    "author_association": "MEMBER",
    "body": "@chriseth In https://github.com/ethereum/solidity/issues/4991 I had in mind things that could also generate code.\r\n\r\nI agree with @MicahZoltu ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/601817795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
