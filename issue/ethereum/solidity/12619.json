{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12619",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12619/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12619/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12619/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12619",
  "id": 1122759182,
  "node_id": "I_kwDOAm_5kc5C6_IO",
  "number": 12619,
  "title": "New data type of variable (Built-in struct/class such as encrypted)",
  "user": {
    "login": "NineWoranop",
    "id": 9558241,
    "node_id": "MDQ6VXNlcjk1NTgyNDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9558241?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/NineWoranop",
    "html_url": "https://github.com/NineWoranop",
    "followers_url": "https://api.github.com/users/NineWoranop/followers",
    "following_url": "https://api.github.com/users/NineWoranop/following{/other_user}",
    "gists_url": "https://api.github.com/users/NineWoranop/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/NineWoranop/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/NineWoranop/subscriptions",
    "organizations_url": "https://api.github.com/users/NineWoranop/orgs",
    "repos_url": "https://api.github.com/users/NineWoranop/repos",
    "events_url": "https://api.github.com/users/NineWoranop/events{/privacy}",
    "received_events_url": "https://api.github.com/users/NineWoranop/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-02-03T07:53:16Z",
  "updated_at": "2022-02-07T11:39:20Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nIn C/C++, you could create your class with custom operator and functions that code could be used in OOO.\r\nFrom my understanding, it still be too early to introduce custom functions that could be stored on blockchain and they could be executed from any EVM. so I will reduce the scope to be new data type as built-in classes that will be supported on EVM.\r\n\r\n## Motivation\r\n\r\nDue to current data types that solidity have been supported, they have been designed to keep value(s) only(not even reference type and mapping type).\r\nAs you know, all values in blockchain will be transparent. What if I would like to introduce built-in class such as encrypted. You might ask that. Why do you not create a method and keep the result as variable? Back to data on blockchain world need to be transparent, the built-in class will introduce new one ability that has functions so this variable does not keep only value anymore but it could be execute with specific condition/situation.\r\nLet's me introduce a use case for Health Insurance that could support arcoss our world.\r\nIf we have a Oracle for that would like to keep trace information (policy number, beneficiary name, gender, birthday, country, id, etc) of human that need to pass any orgnizations(include owner of information).\r\nFirst thing, To make it could be aligned. This Oracle need to define standard format of data that need to be keeped.\r\nSecond thing, To make data could not be read by anyone, this Oracle would like to encrypted this personal information on blockchain even it is transparent data. so EVM need to encrypted this data.\r\nThird thing, To make data could read(decrypt) information from some orgnizations (such as owner, hospital, clinic, etc). This Oracle could allow this data to be decrypted with specific condition/situation. How? In this case, the condition should EVM has private key to decrypt this data. Owner (address) need to generate a keypair and use public key to signed data during create a encrypted data. \r\n\r\n\r\n## Specification\r\n\r\nencrypted data type should be the data type of data that have supported methods such as encrypt and decrypt\r\n\r\nencrypted {variableName} = encrypt({data}, {condition when EVM could decrypt})\r\n\r\nExample\r\n\r\nstruct Policy {\r\n    uint256 policyNumber;\r\n    string beneficiaryFirstName;\r\n    string beneficiaryLastName;\r\n\t...\r\n}\r\n\r\npolicyData = Policy({policyNumber: 123, beneficiaryFirstName: \"NineWoranop\", beneficiaryLastName, \"\", ...});\r\naddress myAddress = this;\r\nencrypted enData = encrypt(policyData, (Address.isTheOwner())\r\n\r\n## Backwards Compatibility\r\n\r\nN/A\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12619/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12619/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1028855863",
    "html_url": "https://github.com/ethereum/solidity/issues/12619#issuecomment-1028855863",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12619",
    "id": 1028855863,
    "node_id": "IC_kwDOAm_5kc49Uxg3",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-03T10:46:22Z",
    "updated_at": "2022-02-03T10:46:22Z",
    "author_association": "MEMBER",
    "body": "I'm not sure I understand your proposal. Do you want to have a mechanism to access functions or data in implementations of the EVM that differ from Ethereum mainnet? If yes, then a high-level built-in data type is probably not the right way to do this. My counter-proposal would be to allow access to these features through inline assembly (or by calling special contracts at pre-defined addresses) and then build a custom data type (not provided by the compiler) around this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1028855863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1028909428",
    "html_url": "https://github.com/ethereum/solidity/issues/12619#issuecomment-1028909428",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12619",
    "id": 1028909428,
    "node_id": "IC_kwDOAm_5kc49U-l0",
    "user": {
      "login": "NineWoranop",
      "id": 9558241,
      "node_id": "MDQ6VXNlcjk1NTgyNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9558241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NineWoranop",
      "html_url": "https://github.com/NineWoranop",
      "followers_url": "https://api.github.com/users/NineWoranop/followers",
      "following_url": "https://api.github.com/users/NineWoranop/following{/other_user}",
      "gists_url": "https://api.github.com/users/NineWoranop/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NineWoranop/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NineWoranop/subscriptions",
      "organizations_url": "https://api.github.com/users/NineWoranop/orgs",
      "repos_url": "https://api.github.com/users/NineWoranop/repos",
      "events_url": "https://api.github.com/users/NineWoranop/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NineWoranop/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-03T11:45:52Z",
    "updated_at": "2022-02-03T11:45:52Z",
    "author_association": "NONE",
    "body": "@chriseth Sorry, my proposal might not be clear enough. As I mentioned early, I would like to let solidity think about new kind of ability on the language as built-in function that could attach on data type. In this case, I expected to have specific function (encrypt) similar with \"required\" function that support condition. However, encrypt function does not use the condition immediately at that line of code. However, this condition will attach to variable and it will be execute when it used by specific function (decrypt). I hope that makes more clearer.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1028909428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1029223969",
    "html_url": "https://github.com/ethereum/solidity/issues/12619#issuecomment-1029223969",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12619",
    "id": 1029223969,
    "node_id": "IC_kwDOAm_5kc49WLYh",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-03T17:25:25Z",
    "updated_at": "2022-02-03T17:25:25Z",
    "author_association": "MEMBER",
    "body": "Can you maybe write a small and complete example that does not contain `...`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1029223969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1029447666",
    "html_url": "https://github.com/ethereum/solidity/issues/12619#issuecomment-1029447666",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12619",
    "id": 1029447666,
    "node_id": "IC_kwDOAm_5kc49XB_y",
    "user": {
      "login": "NineWoranop",
      "id": 9558241,
      "node_id": "MDQ6VXNlcjk1NTgyNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9558241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NineWoranop",
      "html_url": "https://github.com/NineWoranop",
      "followers_url": "https://api.github.com/users/NineWoranop/followers",
      "following_url": "https://api.github.com/users/NineWoranop/following{/other_user}",
      "gists_url": "https://api.github.com/users/NineWoranop/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NineWoranop/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NineWoranop/subscriptions",
      "organizations_url": "https://api.github.com/users/NineWoranop/orgs",
      "repos_url": "https://api.github.com/users/NineWoranop/repos",
      "events_url": "https://api.github.com/users/NineWoranop/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NineWoranop/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-03T22:09:12Z",
    "updated_at": "2022-02-03T23:28:22Z",
    "author_association": "NONE",
    "body": "It seems my specification, use case and example don't quite right from start.\r\nFor now, I could not come up with better use case and example. \r\nLet's me re-define the specification and example.\r\n\r\n#### Specification\r\nencrypted {variableName} = encrypt({data}, {condition function})\r\nOR\r\nencrypted {variableName} = encrypt({data}, &{condition function})\r\n\r\n#### Synonym\r\n- &\r\nmeans Point to a function. It could be built-in function or custom function.\r\n- condition function\r\nmeans the whole function that has return type as Boolean only.\r\ndeveloper could put the whole function as parameter by has similar syntax.\r\n    function myConditionFunction() public returns (bool) {\r\n       return true;\r\n    }\r\n\r\n#### Example\r\n    struct Policy {\r\n        string data;\r\n        string totp;\r\n    }\r\n    \r\n    string policyData = \"policynumber=123,name=NineWoranop\";\r\n    address myAddress = this;\r\n    string myTimeBasedOTP = myAddress.generateTOTP();\r\n    Policy originalData = Policy({data: policyData, totp: myTimeBasedOTP});\r\n    encrypted encryptedData = encrypt(originalData, &Policy.isTheOwner());\r\n    \r\n    function (Policy policy) isTheOwner() public returns (bool) {\r\n        address myAddress = this;\r\n        string myTimeBasedOTP = myAddress.generateTOTP();\r\n        require(policy.totp == myTimeBasedOTP, \"Not authorized\");\r\n        return true;\r\n    }\r\n\r\nNotes !!! \r\n- (Policy policy) this syntax borrow from GOLANG.\r\n- myAddress.generateTOTP() should be another built-in function that only owner of address that have private key, it could generate Time-based OTP.\r\nDue to current EVM don't support to get private key. However, EVM might need to consider to support some functions that could use private key without pass through the code of developer.\r\nTOTP might not be best practice in real world for this use case to validate. However, I would like to see Solidity could explore this ability on the language.\r\n@chriseth I'm not sure. Does it make more sense? Could you please re-consider this proposal?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1029447666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1029557626",
    "html_url": "https://github.com/ethereum/solidity/issues/12619#issuecomment-1029557626",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12619",
    "id": 1029557626,
    "node_id": "IC_kwDOAm_5kc49Xc16",
    "user": {
      "login": "NineWoranop",
      "id": 9558241,
      "node_id": "MDQ6VXNlcjk1NTgyNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9558241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NineWoranop",
      "html_url": "https://github.com/NineWoranop",
      "followers_url": "https://api.github.com/users/NineWoranop/followers",
      "following_url": "https://api.github.com/users/NineWoranop/following{/other_user}",
      "gists_url": "https://api.github.com/users/NineWoranop/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NineWoranop/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NineWoranop/subscriptions",
      "organizations_url": "https://api.github.com/users/NineWoranop/orgs",
      "repos_url": "https://api.github.com/users/NineWoranop/repos",
      "events_url": "https://api.github.com/users/NineWoranop/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NineWoranop/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-04T01:30:07Z",
    "updated_at": "2022-02-04T07:56:50Z",
    "author_association": "NONE",
    "body": "@chriseth In case, that encrypted data type seems not be clear description yet.\r\nI could reduce the scope to be another proposal if it still be interested.\r\n\r\n#### Specifition\r\n\r\n    condition {variableName} = conditionInterface{condition:{struct/class}, pass:{condition function of struct}};\r\n\r\n    interface conditionInterface{\r\n        function condition(struct data) public view returns(bool);//always return true because it expects to store data successfully.\r\n        function pass() public view returns (bool);\r\n\r\n        function data() public view returns (struct/class);\r\n        // this function should invoke pass() method with require automacally\r\n        // similar like this\r\n        //      require(myCondition.pass(), \"Not authorized\");\r\n    }\r\n\r\n#### Example\r\n\r\n    contract counterContract {\r\n        // Private variables\r\n        condition private myCondition;\r\n\r\n        struct Counter {\r\n            uint8 index;\r\n        }\r\n\r\n        function (Counter couter) pass() public returns (bool) {\r\n            return (counter <100);\r\n        }\r\n\r\n        constructor(string data) {\r\n            uint8 index = checkLength(data);\r\n            Counter counter = Counter{index:index};\r\n            myCondition = conditionInterface{condition:counter, pass:Counter.pass()};\r\n        }\r\n\r\n        private function checkLength(string data) public returns (uint8) {\r\n            uint8 result = uint8(bytes(data).length);\r\n            return result;\r\n        }\r\n\r\n        function readLength() public returns(uint8){\r\n            return myCondition.data().index;\r\n        }\r\n    }\r\n\r\n\r\nAs you could see condition data type, it still stores value(s). However, it also keeps condition logic inside.\r\nAs I mentioned, I would like to see solidity could add new ability on data type in some way.\r\nI hope that this is just a starting point. The way to put logic will be keep evolving in future.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1029557626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031372294",
    "html_url": "https://github.com/ethereum/solidity/issues/12619#issuecomment-1031372294",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12619",
    "id": 1031372294,
    "node_id": "IC_kwDOAm_5kc49eX4G",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-07T11:39:20Z",
    "updated_at": "2022-02-07T11:39:20Z",
    "author_association": "MEMBER",
    "body": "I'm sorry, but I still have no idea what area your proposal actually lies in.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031372294/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
