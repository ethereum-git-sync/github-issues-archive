{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12931",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12931/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12931/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12931/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12931",
  "id": 1202931837,
  "node_id": "I_kwDOAm_5kc5Hs0h9",
  "number": 12931,
  "title": "Yul Optimizer: Switch elimination for cheap switch cases.",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "314aff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4438481746,
      "node_id": "LA_kwDOAm_5kc8AAAABCI3bUg",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have%20eventually",
      "name": "must have eventually",
      "color": "ffb04d",
      "default": false,
      "description": "Something we consider essential but not enough to prevent us from releasing Solidity 1.0 without it."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-04-13T08:22:18Z",
  "updated_at": "2022-09-27T00:28:49Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Came up with https://github.com/ethereum/solidity/issues/12930.\r\n\r\nCurrently for\r\n```\r\n        function f(bool cond) external pure returns (uint256 x) {\r\n                return cond ? 1 : 0;\r\n        }\r\n```\r\n(roughly) results in the following snippet in optimized yul code\r\n```\r\n                       switch cond\r\n                       case 0 { x := 0x00 }\r\n                       default { x := 0x01 }\r\n```\r\nwhich is of course silly.\r\n\r\nWe could, for example, generically eliminate a switch of the form\r\n```\r\n                       switch cond\r\n                       case 0 { x := a }\r\n                       default { x := b }\r\n```\r\nby ``x := or(mul(iszero(cond), a), mul(iszero(iszero(cond)), b)``.\r\n\r\nThis could generalize to a transformation of\r\n```\r\n                       switch cond\r\n                       case <Literal> { x := a }\r\n                       default { x := b }\r\n```\r\nto\r\n```\r\nlet _1 := eq(cond, <Literal>)\r\nx := or(mul(_1, a), mul(iszero(_1), b)\r\n```\r\n\r\nMaybe also worth a thought how this would look like with multiple switch cases and without default case.\r\n\r\nThis would require guessing, when the combined cost of the switch cases and merging them is cheaper than actual branching.\r\n\r\nEven more generally, this could happen for arbitrary switch case bodies, as long as they are side-effect free, which would require merging all variables assigned in at least one case body. (Although this would complicate the cost calculation and we'd need to check, if this ever makes sense gas-wise if it's more than one variable)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12931/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12931/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1098366279",
    "html_url": "https://github.com/ethereum/solidity/issues/12931#issuecomment-1098366279",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12931",
    "id": 1098366279,
    "node_id": "IC_kwDOAm_5kc5Bd71H",
    "user": {
      "login": "recmo",
      "id": 4532328,
      "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/recmo",
      "html_url": "https://github.com/recmo",
      "followers_url": "https://api.github.com/users/recmo/followers",
      "following_url": "https://api.github.com/users/recmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
      "organizations_url": "https://api.github.com/users/recmo/orgs",
      "repos_url": "https://api.github.com/users/recmo/repos",
      "events_url": "https://api.github.com/users/recmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/recmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T18:39:32Z",
    "updated_at": "2022-04-13T19:52:08Z",
    "author_association": "NONE",
    "body": "[See this comment](https://github.com/ethereum/solidity/issues/12930#issuecomment-1098363050). It is more efficient to transform `cond ? a : b` to\r\n\r\n```\r\nx := add(mul(cond, sub(a, b)), b)\r\n```\r\n\r\nThis allows for much further optimization when `a` and `b` are constant (a common case). Constant propagation can eliminate the `sub`. If `b = 0` a generic optimization rule can eliminate the `add(-, 0)`. If `a - b = 2**n` a generic rule can turn the `mul` into a cheaper `shl`. If `a - b = 1` a generic rule can eliminate the `mul`. I expect all these case to be common.\r\n\r\nAn alternative is \r\n\r\n```\r\nx := xor(mul(cond, xor(a, b)), b)\r\n```\r\n\r\nThe base performance is the same, but this one allows the `shl` optimization when `a ^ b = 2**n`, i.e. when `a` and `b` differ by a single bit.\r\n\r\nEdit: Noticed my `a` and `b` are reversed from the above proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1098366279/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
