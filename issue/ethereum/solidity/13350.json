{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13350",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13350/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13350/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13350/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13350",
  "id": 1329915502,
  "node_id": "I_kwDOAm_5kc5PROZu",
  "number": 13350,
  "title": "[abi coder] Storage to calldata copy fails?",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-08-05T13:04:44Z",
  "updated_at": "2022-08-05T13:16:53Z",
  "closed_at": "2022-08-05T13:16:53Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "```\r\npragma solidity >=0.0;\r\npragma experimental ABIEncoderV2;\r\ncontract C {\r\n\r\n\tint8[] sv_0;\r\n\tstruct S0 {\r\n\t\tuint256[1] m0;\r\n\t}\r\n\r\n\r\n\tfunction test() public returns (uint) {\r\n\t\treturn test_calldata_coding();\r\n\t\t\r\n\t}\r\n\r\n\tfunction test_calldata_coding() internal returns (uint) {\r\n\t\tfor (uint i = 0; i < 4; i++) sv_0.push();\r\n\t\tsv_0[0] = 16;\r\n\t\tsv_0[1] = -76;\r\n\t\tsv_0[2] = -124;\r\n\t\tsv_0[3] = 97;\r\n\r\n\r\n\t\tS0 memory lv_1;\r\n\t\tlv_1.m0[0] = 1546678032441257452667456735582814959992782782816731922691272282333561699760;\r\n\r\n\r\n\t\tuint returnVal = this.coder_calldata_public(sv_0, lv_1);\r\n\t\tif (returnVal != 0)\r\n\t\t\treturn returnVal;\r\n\r\n\t\treturnVal = this.coder_calldata_external(sv_0, lv_1);\r\n\t\tif (returnVal != 0)\r\n\t\t\treturn uint(200000) + returnVal;\r\n\r\n\t\t\r\n\t\tbytes memory argumentEncoding = abi.encode(sv_0, lv_1);\r\n\r\n\t\treturnVal = checkEncodedCall(\r\n\t\t\tthis.coder_calldata_public.selector,\r\n\t\t\targumentEncoding,\r\n\t\t\t0,\r\n\t\t\ttrue\r\n\t\t);\r\n\t\tif (returnVal != 0)\r\n\t\t\treturn returnVal;\r\n\r\n\t\treturnVal = checkEncodedCall(\r\n\t\t\tthis.coder_calldata_external.selector,\r\n\t\t\targumentEncoding,\r\n\t\t\t0,\r\n\t\t\ttrue\r\n\t\t);\r\n\t\tif (returnVal != 0)\r\n\t\t\treturn uint(400000) + returnVal;\r\n\t\t\r\n\t\treturn 0;\r\n\t\t\r\n\t}\r\n\r\n\t/// Accepts function selector, correct argument encoding, and length of\r\n\t/// invalid encoding and returns the correct and incorrect abi encoding\r\n\t/// for calling the function specified by the function selector.\r\n\tfunction createEncoding(\r\n\t\tbytes4 funcSelector,\r\n\t\tbytes memory argumentEncoding,\r\n\t\tuint invalidLengthFuzz,\r\n\t\tbool isRightPadded\r\n\t) internal pure returns (bytes memory, bytes memory)\r\n\t{\r\n\t\tbytes memory validEncoding = new bytes(4 + argumentEncoding.length);\r\n\t\t// Ensure that invalidEncoding crops at least 32 bytes (padding length\r\n\t\t// is at most 31 bytes) if `isRightPadded` is true.\r\n\t\t// This is because shorter bytes/string values (whose encoding is right\r\n\t\t// padded) can lead to successful decoding when fewer than 32 bytes have\r\n\t\t// been cropped in the worst case. In other words, if `isRightPadded` is\r\n\t\t// true, then\r\n\t\t//  0 <= invalidLength <= argumentEncoding.length - 32\r\n\t\t// otherwise\r\n\t\t//  0 <= invalidLength <= argumentEncoding.length - 1\r\n\t\tuint invalidLength;\r\n\t\tif (isRightPadded)\r\n\t\t\tinvalidLength = invalidLengthFuzz % (argumentEncoding.length - 31);\r\n\t\telse\r\n\t\t\tinvalidLength = invalidLengthFuzz % argumentEncoding.length;\r\n\t\tbytes memory invalidEncoding = new bytes(4 + invalidLength);\r\n\t\tfor (uint i = 0; i < 4; i++)\r\n\t\t\tvalidEncoding[i] = invalidEncoding[i] = funcSelector[i];\r\n\t\tfor (uint i = 0; i < argumentEncoding.length; i++)\r\n\t\t\tvalidEncoding[i+4] = argumentEncoding[i];\r\n\t\tfor (uint i = 0; i < invalidLength; i++)\r\n\t\t\tinvalidEncoding[i+4] = argumentEncoding[i];\r\n\t\treturn (validEncoding, invalidEncoding);\r\n\t}\r\n\r\n\t/// Accepts function selector, correct argument encoding, and an invalid\r\n\t/// encoding length as input. Returns a non-zero value if either call with\r\n\t/// correct encoding fails or call with incorrect encoding succeeds.\r\n\t/// Returns zero if both calls meet expectation.\r\n\tfunction checkEncodedCall(\r\n\t\tbytes4 funcSelector,\r\n\t\tbytes memory argumentEncoding,\r\n\t\tuint invalidLengthFuzz,\r\n\t\tbool isRightPadded\r\n\t) public returns (uint)\r\n\t{\r\n\t\t(bytes memory validEncoding, bytes memory invalidEncoding) = createEncoding(\r\n\t\t\tfuncSelector,\r\n\t\t\targumentEncoding,\r\n\t\t\tinvalidLengthFuzz,\r\n\t\t\tisRightPadded\r\n\t\t);\r\n\t\t(bool success, bytes memory returnVal) = address(this).call(validEncoding);\r\n\t\tuint returnCode = abi.decode(returnVal, (uint));\r\n\t\t// Return non-zero value if call fails for correct encoding\r\n\t\tif (success == false || returnCode != 0)\r\n\t\t\treturn 400000;\r\n\t\t(success, ) = address(this).call(invalidEncoding);\r\n\t\t// Return non-zero value if call succeeds for incorrect encoding\r\n\t\tif (success == true)\r\n\t\t\treturn 400001;\r\n\t\treturn 0;\r\n\t}\r\n\tfunction coder_calldata_public(int8[] memory p_0, S0 memory p_1) public pure returns (uint) {\r\n\t\tif (p_0.length != 4) return 1;\r\n\t\tif (p_0[0] != 16) return 2;\r\n\t\tif (p_0[1] != -76) return 3;\r\n\t\tif (p_0[2] != -124) return 4;\r\n\t\tif (p_0[3] != 97) return 5;\r\n\t\tif (p_1.m0.length != 1) return 6;\r\n\t\tif (p_1.m0[0] != 1546678032441257452667456735582814959992782782816731922691272282333561699760) return 7;\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction coder_calldata_external(int8[] calldata p_0, S0 calldata p_1) external view returns (uint) {\r\n\t\treturn this.coder_calldata_external_indirection(p_0, p_1);\r\n\t}\r\n\r\n\tfunction coder_calldata_external_indirection(int8[] calldata p_0, S0 calldata p_1) external pure returns (uint) {\r\n\t\tif (p_0.length != 4) return 1;\r\n\t\tif (p_0[0] != 16) return 2;\r\n\t\tif (p_0[1] != -76) return 3;\r\n\t\tif (p_0[2] != -124) return 4;\r\n\t\tif (p_0[3] != 97) return 5;\r\n\t\tif (p_1.m0.length != 1) return 6;\r\n\t\tif (p_1.m0[0] != 1546678032441257452667456735582814959992782782816731922691272282333561699760) return 7;\r\n\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\r\n\r\n\t/// Compares bytes, returning true if they are equal and false otherwise.\r\n\tfunction bytesCompare(bytes memory a, bytes memory b) internal pure returns (bool) {\r\n\t\tif(a.length != b.length)\r\n\t\t\treturn false;\r\n\t\tfor (uint i = 0; i < a.length; i++)\r\n\t\t\tif (a[i] != b[i])\r\n\t\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n}\r\n```\r\n\r\nfails at `if (p_0.length != 4) return 1;` inside `coder_calldata_external_indirection`",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13350/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13350/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1206449207",
    "html_url": "https://github.com/ethereum/solidity/issues/13350#issuecomment-1206449207",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13350",
    "id": 1206449207,
    "node_id": "IC_kwDOAm_5kc5H6PQ3",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-05T13:16:53Z",
    "updated_at": "2022-08-05T13:16:53Z",
    "author_association": "MEMBER",
    "body": "Yep, this is an instance of https://github.com/ethereum/solidity/issues/13249 and hence should be fixed by https://github.com/ethereum/solidity/pull/13282 :-). So this confirms that the new fuzzing works\r\n\r\nSo yeah, I'm closing this as duplicate of https://github.com/ethereum/solidity/issues/13249. Would be good to rebase fuzzing on top of https://github.com/ethereum/solidity/pull/13282 to see if we get anything beyond that!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1206449207/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
