{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/611",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/611/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/611/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/611/events",
  "html_url": "https://github.com/ethereum/solidity/issues/611",
  "id": 157531202,
  "node_id": "MDU6SXNzdWUxNTc1MzEyMDI=",
  "number": 611,
  "title": "Source code verification",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/solidity/milestones/11",
    "html_url": "https://github.com/ethereum/solidity/milestone/11",
    "labels_url": "https://api.github.com/repos/ethereum/solidity/milestones/11/labels",
    "id": 1925443,
    "node_id": "MDk6TWlsZXN0b25lMTkyNTQ0Mw==",
    "number": 11,
    "title": "4-authenticated-binaries",
    "description": "Smart contract binaries should be authenticated in the sense that their source code and compiler is stamped into their bytecode (creation bytecode). Furhermore, it should be possible to see which compiler version is \"official\" from the blockchain.",
    "creator": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 1,
    "closed_issues": 2,
    "state": "closed",
    "created_at": "2016-08-05T13:34:02Z",
    "updated_at": "2018-07-30T10:42:53Z",
    "due_on": null,
    "closed_at": "2018-07-30T10:42:53Z"
  },
  "comments": 19,
  "created_at": "2016-05-30T16:31:09Z",
  "updated_at": "2016-12-02T10:23:50Z",
  "closed_at": "2016-12-02T10:23:45Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "As the ways to compile contracts get more and more complex, it becomes paramount to provide a simple way to verify the source code of a contract. Also as swarm is now more or less within reach, a way to store the source code of a contract becomes viable.\n\nThe following way to perform source code verification is hopefully forward-compatible and does not rely on timing problems or the need for a registration contract.\n- At compile time, the compiler creates a json object containing metadata about the contract including the source code used to compile it, the (path-qualified) name of the contract in the source, the compiler version and for usability purposes also the ABI and documentation. This json object can be amended in the future. Its byte representation is called \"the metadata\".\n- The hash of the metadata is stored as part of the contract creation bytecode (as `push32 metadata, pop` at the beginning of the contract). It is important to store this with the creation bytecode because the constructor is not covered if it is only stored in the deployed bytecode. Also not storing it with the deployed bytecode saves costs.\n- If a user wants to verify the source code of a contract, they have to ask the ethereum node for the data that was used for creating that contract (including constructor parameters, which is very important). From that data, the hash is extracted and swarm or some other storage solution is asked for the content corresponding to that hash (i.e. the metadata). From the metadata, the complier version is extracted (the \"version\" might also just be a swarm-hash of the binary itself), verified that it is an \"official\" compiler version and the compiler (or corresponding verifier) is downloaded from swarm. Both solc and solc-js provide a verification mode: You supply the creation data and the metadata and the compiler verifies that they match and optionally outputs the constructor arguments in parsed form.\n- in order to make it easier to discover the creation data, the constructor will issue a log as the first operation until there is protocol-level support for that. There is of course the option to switch off both the creation of the log and the inclusion of the metadata hash.\n\nProblems to solve: Unlinked objects cannot provide the metadata hash because the addresess of the libraries have to be part of the metadata hash. This might not be a problem in the end.\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/611/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/611/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222528343",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222528343",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222528343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjUyODM0Mw==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-30T17:01:59Z",
    "updated_at": "2016-05-30T17:01:59Z",
    "author_association": "MEMBER",
    "body": "what does the metadata object look like? \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222528343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222529915",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222529915",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222529915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjUyOTkxNQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-30T17:15:34Z",
    "updated_at": "2016-05-30T17:15:34Z",
    "author_association": "NONE",
    "body": "+1\nTho I don't fully understand. Do you want to store a hash of the json meta data with the contract deployment itself?\n\nAnd how would a verifier know at which tx to ask for the right deployed code?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222529915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222530330",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222530330",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222530330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjUzMDMzMA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-30T17:19:00Z",
    "updated_at": "2016-05-30T17:19:00Z",
    "author_association": "MEMBER",
    "body": "I think the metadata would only represent all the sources and options used to generate that given binary. It doesn't matter where you get that binary from as long as you can acquire the metadata and all of its references to recreate the binary.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222530330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222531105",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222531105",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222531105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjUzMTEwNQ==",
    "user": {
      "login": "zelig",
      "id": 769725,
      "node_id": "MDQ6VXNlcjc2OTcyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/769725?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zelig",
      "html_url": "https://github.com/zelig",
      "followers_url": "https://api.github.com/users/zelig/followers",
      "following_url": "https://api.github.com/users/zelig/following{/other_user}",
      "gists_url": "https://api.github.com/users/zelig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zelig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zelig/subscriptions",
      "organizations_url": "https://api.github.com/users/zelig/orgs",
      "repos_url": "https://api.github.com/users/zelig/repos",
      "events_url": "https://api.github.com/users/zelig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zelig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-30T17:26:00Z",
    "updated_at": "2016-05-30T17:26:00Z",
    "author_association": "MEMBER",
    "body": "nice one Chris. \ngreat question Fabian\nthe hash of the metadata is cheaper to store in the contract creation tx . and because of the source -> byte code depends on constructor parameters which are only in the contract creation tx you need to look there anyway.\nnow I think the best way to get that is to actually register block number and tx index together with the metadata content hash in ENS\nto complicate things a little, sometimes the transaction needs to be replayed if the creation is called from another contract\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222531105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222531123",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222531123",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222531123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjUzMTEyMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-30T17:26:09Z",
    "updated_at": "2016-05-30T17:26:09Z",
    "author_association": "MEMBER",
    "body": "@chriseth wouldn't it make more sense putting a _metadata pointer_ section at an unreachable, but fixed part of the binary (i.e. the very end of it?). This _metadata pointer_ could contain just the hash you suggested, or a flags/version/type field + the hash for future upgradeability.\n\nAlternatively I still like the suggestion (from #529) to have this value accessible via a method. Good because you don't need to parse the binary, but bad because you need to execute it.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222531123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222558669",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222558669",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222558669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjU1ODY2OQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-30T21:52:03Z",
    "updated_at": "2016-05-30T21:52:03Z",
    "author_association": "MEMBER",
    "body": "This solution will mean that only full nodes retain the data required to verify contract source code, which seems like a bad idea. Like @axic, I think it makes a lot more sense to embed the relevant information as a method.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222558669/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222655927",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222655927",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222655927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjY1NTkyNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T10:55:54Z",
    "updated_at": "2016-05-31T10:55:54Z",
    "author_association": "MEMBER",
    "body": "@axic @Arachnid in general, there are two ways to verify compilation:\n\n1) compile the source code, retrieve the runtime bytecode and compare with the code at that address\n\n2) compile the source code, retrieve the creation code and compare with the data that was used to create the contract (either the tx payload or the data of a CREATE operation).\n\nMethod (1) has a major flaw: It completely ignores the code in the constructor and the constructor parameters. If you have a contract that has a constructor that sets an important option in storage, the contract will still verify even after a total semantic change in the constructor.\n\nThe only safe way to perform source code verification is at the point of creation. This has the benefit, that we can even decode the constructor arguments and show them to the user that requests the verification.\n\nIt requires some effort to retrieve the creation data, but I think it is worth it and we should add indexing structures to help that process, perhaps even with the help of a registration contract. There is also a trustless way that can be used by light clients. It requires replaying a full transaction, but light clients have to be able to do that for other things, too.\n\n@axic this proposal puts the metadata at a fixed point in the binary, namely 32 bytes starting in the second byte. The end of the bytecode cannot be used because that is where the constructor arguments go.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222655927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222658360",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222658360",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222658360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjY1ODM2MA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T11:09:06Z",
    "updated_at": "2016-05-31T11:09:06Z",
    "author_association": "MEMBER",
    "body": "Is that a major flaw? The constructor can only affect the ongoing behaviour of the contract by setting data in storage, which can be verified by the user by examining the contract's storage on the blockchain. I don't think the constructor data is directly relevant to how the contract behaves now, which is what a user examining the contract wants to determine.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222658360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222702088",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222702088",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222702088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjcwMjA4OA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T14:16:37Z",
    "updated_at": "2016-05-31T14:16:37Z",
    "author_association": "MEMBER",
    "body": "Yes, I think so. If you require the user to verify storage contents in addition to bytecode, it gets much more complicated, because you would have to retrieve the contents at the point the contract was created, you have to require from the user to be able to interpret which storage values are set by the constructor and so on. If the constructor sets dynamic arrays or mappings, this gets very complicated very fast. The behaviour of the constructor is paramount to the behaviour of the smart contract: You can easily fool someone by just flipping a flag that represents the state of the smart contract.\n\nI'm not saying that there is no value in verifying runtime bytecode alone, I'm just saying that the proper way would be to verify the creation time bytecode and we should focus on that usecase.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222702088/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222712036",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222712036",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222712036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjcxMjAzNg==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T14:48:08Z",
    "updated_at": "2016-05-31T14:48:08Z",
    "author_association": "MEMBER",
    "body": "For the constructor to influence the contract, the runtime code has to contain instructions that alter its results based on the contents of storage; in that event the user absolutely has to check the contents of storage in any case, or else they can't be sure that the value is set to what they expect it to be. Verifying that it was set that way at creation time isn't enough.\n\nNo matter what, users have to verify both the operation, and the parts of the state that are relevant to the operation; there's no avoiding that. Since the constructor code doesn't form part of the operation code, and only acts to set the initial state, I don't think there's a significant loss in excluding it from the verification, as long as users are aware of how to audit a contract as a whole.\n\nI'd be happy to be proven wrong, if anyone can demonstrate a contract that's obviously broken when viewed with the constructor, but doesn't set off alarm bells when viewing the code alone.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222712036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222719407",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222719407",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222719407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjcxOTQwNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T15:10:39Z",
    "updated_at": "2016-05-31T15:10:39Z",
    "author_association": "MEMBER",
    "body": "@Arachnid I disagree. Since the contract starts in a defined state (empty storage) there is nothing to check if you begin at creation time. Of course, you have to get an impression of the current state of the contract if you want to interact with it, but you do not have to check that the contract at least started in a way that was set in its constructor. One of the big problems here are mappings. If the constructor does something like `x[a] = 2;` where `x` is a mapping and `a` is a constructor argument, there is no way to find out what `a` is without looking at the creation transaction (or finding out about constructor arguments in another way which is probably more complicated).\n\nJust to have an example, let us look at the constructor of the DAO: https://github.com/slockit/DAO/blob/master/DAO.sol#L354\n\nAs you propose, we completely ignore the creation transaction and as a possible attack, someone modifies the actual constructor that was used to write to storage at strategical places such that the number of votes for proposal 11 are pre-initialized before the proposal is created. If you want to verify the contract, it is not enough to check that certain values exist in storage, you actually have to identify every single value that is set in storage and find out where it came from.\n\nAnd now please compare that to starting at 0, with empty storage and at least 100% verifying the initial state of the contract and its rules. For many use cases, you do not need to verify the full current state of the contract, but just the part that is relevant for you. In the example of the DAO, verifying the full current state is practically impossible: Because of the `balances` mapping, you have to replay every single transaction to find the addresses used there.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222719407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222727198",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222727198",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222727198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjcyNzE5OA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T15:34:47Z",
    "updated_at": "2016-05-31T15:34:47Z",
    "author_association": "MEMBER",
    "body": "I somewhat see your point; constructors can place the contract in a part of the state space that couldn't be reached purely by following the rules baked into the contract's code. I don't think it's that useful to users, though. \n\nWhen users are auditing a contract, it's generally with a view to using it. When a contract's anything other than very straightforward, generally you need to be able to assess the contract's current state in order to know if interacting with it is a useful proposition; it doesn't matter to you how the votes on proposal 11 got there, ultimately, as long as you can determine they're there. \n\nBlock explorers such as ether.camp are capable of displaying contract storage data, given Solidity source code. Doing so without a full node is problematic, though probably not impossible.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222727198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222731397",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222731397",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222731397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjczMTM5Nw==",
    "user": {
      "login": "bobsummerwill",
      "id": 3788156,
      "node_id": "MDQ6VXNlcjM3ODgxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3788156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bobsummerwill",
      "html_url": "https://github.com/bobsummerwill",
      "followers_url": "https://api.github.com/users/bobsummerwill/followers",
      "following_url": "https://api.github.com/users/bobsummerwill/following{/other_user}",
      "gists_url": "https://api.github.com/users/bobsummerwill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bobsummerwill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bobsummerwill/subscriptions",
      "organizations_url": "https://api.github.com/users/bobsummerwill/orgs",
      "repos_url": "https://api.github.com/users/bobsummerwill/repos",
      "events_url": "https://api.github.com/users/bobsummerwill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bobsummerwill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T15:48:18Z",
    "updated_at": "2016-05-31T15:48:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I agree with you here, @Arachnid.\n\nWhen you start venturing into analysis of stateful behaviour, it is likely a bottomless pit.\n\nI think it might actually be harmful to even try, because it runs the risk of getting people false confidence.\n\nVerifying that the code is as expected is a very discrete and solvable problem.    When it comes to stateful behaviour which will, by definition be different for each smart contract instance ... that is a much trickier issue.\n\nYou're getting into formal verification there.    Which would be cool.    But I think it's a different tool which is required at that point.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222731397/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222731863",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222731863",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222731863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjczMTg2Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T15:49:43Z",
    "updated_at": "2016-05-31T15:49:43Z",
    "author_association": "MEMBER",
    "body": "@Arachnid I'm not sure you understand what I wanted to say with the \"proposal 11\" example: If you verify the code at construction stage and see that the current proposal counter is below 11 (by querying a single point in storage), you can be sure that by adding your new proposal with id 11, all votes will be initialized to 0, because there is no way to inject votes for proposal 11 before it was created. Whereas when you only check the deployed code, you actually have to read all the full storage and scan all transactions in order to invert the sha3 to see that nobody injected any votes into the proposal prior to its creation.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222731863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222733018",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-222733018",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 222733018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjczMzAxOA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-31T15:53:24Z",
    "updated_at": "2016-05-31T15:53:24Z",
    "author_association": "MEMBER",
    "body": "@chriseth Yes, that's what I meant by saying that constructors let you reach parts of the state space the code wouldn't. Without the constructor, you would know that combination of states isn't possible, because no set of function calls could produce that result.\n\nWhile I agree that's useful information, I don't think it's enough: I still think that anyone auditing a contract needs to include evaluating the current state as part of that, so any audit mechanism that presupposes they won't do that is of limited usefulness.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/222733018/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/223030657",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-223030657",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 223030657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzAzMDY1Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-01T15:30:50Z",
    "updated_at": "2016-06-01T15:30:50Z",
    "author_association": "MEMBER",
    "body": "(updated description to add a log to help discovery of the creation point and data)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/223030657/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/223032563",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-223032563",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 223032563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzAzMjU2Mw==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-01T15:36:48Z",
    "updated_at": "2016-06-01T15:36:48Z",
    "author_association": "MEMBER",
    "body": "How will source discovery and verification for contracts created by other contracts be handled?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/223032563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/223036089",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-223036089",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 223036089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzAzNjA4OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-01T15:47:32Z",
    "updated_at": "2016-06-01T15:47:32Z",
    "author_association": "MEMBER",
    "body": "Source discovery is out of scope. In the future, it will be retrieved from swarm, currently it might be retrieved from github gists or any other source. Verification of contracts created by other contracts will be handled in exactly the same way. You search for the first log at that address, if it is a creation tx for that contract, you use the input data there. If it is not a creation operation, some support from the backend node is needed. In the worst case (if there is no support), you have to request the trace of the transaction and retrieve the data that way. Remix already reads those traces, so we might just provide some helper script to extract the data from the trace.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/223036089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/223338743",
    "html_url": "https://github.com/ethereum/solidity/issues/611#issuecomment-223338743",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/611",
    "id": 223338743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzMzODc0Mw==",
    "user": {
      "login": "romanman",
      "id": 5822633,
      "node_id": "MDQ6VXNlcjU4MjI2MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5822633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanman",
      "html_url": "https://github.com/romanman",
      "followers_url": "https://api.github.com/users/romanman/followers",
      "following_url": "https://api.github.com/users/romanman/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanman/subscriptions",
      "organizations_url": "https://api.github.com/users/romanman/orgs",
      "repos_url": "https://api.github.com/users/romanman/repos",
      "events_url": "https://api.github.com/users/romanman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-02T16:03:19Z",
    "updated_at": "2016-06-02T16:03:19Z",
    "author_association": "NONE",
    "body": "@chriseth : any thoughts to \ninclude validation hashes into\nthe code  ?\n\nP.S: it is hackabale by changing compiler code , \nbut it's not an easy hack and the validation \ncan give much better solution that we have now.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/223338743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
