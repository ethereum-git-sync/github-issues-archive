{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12538",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12538/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12538/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12538/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12538",
  "id": 1104918884,
  "node_id": "I_kwDOAm_5kc5B27lk",
  "number": 12538,
  "title": "Syntax to explicitly indicate security properties of function calls",
  "user": {
    "login": "maurelian",
    "id": 23033765,
    "node_id": "MDQ6VXNlcjIzMDMzNzY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/maurelian",
    "html_url": "https://github.com/maurelian",
    "followers_url": "https://api.github.com/users/maurelian/followers",
    "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
    "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
    "organizations_url": "https://api.github.com/users/maurelian/orgs",
    "repos_url": "https://api.github.com/users/maurelian/repos",
    "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/maurelian/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 467898404,
      "node_id": "MDU6TGFiZWw0Njc4OTg0MDQ=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/breaking%20change%20:warning:",
      "name": "breaking change :warning:",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4437999539,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZ_sw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20effort",
      "name": "high effort",
      "color": "ff54f4",
      "default": false,
      "description": "A lot to implement but still doable by a single person. The task is large or difficult."
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-01-16T01:39:55Z",
  "updated_at": "2022-09-14T16:21:57Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nVery little can be inferred about the effects of a function call simply by observing it in place. Adding symbols to function calls to indicate 'impure' behaviors would make it easier to review and audit solidity.\r\n\r\n## Motivation\r\n\r\nSolidity's built-in [visibility specifiers](https://docs.soliditylang.org/en/latest/cheatsheet.html#function-visibility-specifiers) and [modifiers](https://docs.soliditylang.org/en/latest/cheatsheet.html#modifiers), are a simple and powerful security feature of the language. These keywords also have the benefit of conveying a lot of information to the reader about the safety of a function. However they are only visible at the point of the function's definition. In many cases the reader will simply make assumptions about the functions behavior based on its name and context (ie. `setX` needs attention, `getX` is probably benign, but this is not guranteed). \r\n\r\nThis issue proposes to enforce a minimal but explicit syntax at the point of a function call which would convey safety information to the reader, and help guide readers/auditors towards which functions require further information. \r\n\r\nA specific example of where this feature would help is outlined in by @samczsun's article [The Dangers of Surprising Code\"](https://samczsun.com/the-dangers-of-surprising-code/). The bug results from the assumption that `_safeMint()` is the safer option, when in fact it introduces an external `CALL` leading to a reentrancy vuln. Despite being published over 6 months ago, the [same bug](https://twitter.com/maurelian_/status/1482214808116211713) is [being found](https://twitter.com/onewayfunction/status/1482216770735800324) on a regularly basis.\r\n\r\n## Specification\r\n\r\nA simple example of one approach, based on the experimental [SmartLang](https://consensys.net/diligence/blog/2020/05/an-experiment-in-designing-a-new-smart-contract-language/), which was in turn inspired by a [convention in scheme](https://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-4.html#%_sec_1.3.5).\r\n\r\n```solidity\r\nfunction getsSomething() view public returns(uint) {\r\n\treturn x;\r\n}\t\r\nfunction setsSomething(uint _x) public {\r\n\tx = _x;\r\n}\t\r\nfunction callsSomething() public {\r\n\taddress(x).call();\r\n}\r\nfunction example() public {\r\n  uint y = getsSomething();\r\n\r\n  !setsSomething(x+1);\r\n\r\n  $callsSomething();\r\n}\r\n\r\n```\r\n\r\nThere are certainly more situations to consider than the above. I won't try to be exhaustive, but off the top of my head: \r\n* At the site of a call to an external function, one cannot always make guarantees about everything that function does / does not do. IMO this feature should only be applicable to internal function calls.\r\n* Should the author be able to modify the function being called based on which symbol they use (ie. prevent a function from making an external call by leaving out the `$`. I'd say no, there should only be one correct way to write the function call. \r\n\r\nAdditionally the `$callsSomething();` syntax is notable in that there is no function specifier which restricts/allows the ability to make an external call. I think that would also be a nice feature, but I assume it's already been suggested somewhere. \r\n\r\n## Backwards Compatibility\r\n\r\nOlder codebases would require updating to comply.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12538/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12538/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1013843089",
    "html_url": "https://github.com/ethereum/solidity/issues/12538#issuecomment-1013843089",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12538",
    "id": 1013843089,
    "node_id": "IC_kwDOAm_5kc48bgSR",
    "user": {
      "login": "hjorthjort",
      "id": 8545447,
      "node_id": "MDQ6VXNlcjg1NDU0NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8545447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hjorthjort",
      "html_url": "https://github.com/hjorthjort",
      "followers_url": "https://api.github.com/users/hjorthjort/followers",
      "following_url": "https://api.github.com/users/hjorthjort/following{/other_user}",
      "gists_url": "https://api.github.com/users/hjorthjort/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hjorthjort/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hjorthjort/subscriptions",
      "organizations_url": "https://api.github.com/users/hjorthjort/orgs",
      "repos_url": "https://api.github.com/users/hjorthjort/repos",
      "events_url": "https://api.github.com/users/hjorthjort/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hjorthjort/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T09:46:41Z",
    "updated_at": "2022-01-16T13:43:43Z",
    "author_association": "NONE",
    "body": " A specifier (like `view` or `payable`) might also be enough to avoid this problem. Let's say that a function which may call an external contract, directly or through a subroutine, must have the `interaction` specifier on it. \r\n\r\nI think a specifier would be enough, because in the case of `_safeMint` the reason devs make this mistake is that the external call happens in a subroutine several calls down the stack. A dev looking at `_safeMint` may reasonably expect that it doesn't contain an interaction. I see this commonly with reentrancy vulnerabilities, that they stem from an external call deeper in the stack. \r\n\r\nFor a backwards compatible implementation, the default could be that a function is an `interaction`, and we add a keyword for the other case. This would be similar to how `view` and `pure` works. But I can't think of a good descriptive keyword that doesn't cause confusion with `internal` or other software concepts, or isn't bulky. For example:\r\n\r\n* `noninteractive` (bulky)\r\n* `local` (confusion with `internal`, common keyword in other languages, different meaning)\r\n* `inhouse`: (confusing with `internal`, bulky)\r\n\r\nI think a crutch for any implementation of this feature is that there are trusted and untrusted contracts. If you write functions that call trusted contracts within your protocol, then you will need to mark them with a symbol or a word, but that will not alert you to whether you also make *untrusted* external calls in the same function. Separating trusted from untrusted calls in the type checks should be possible but may not be feasible from a UX perspective, and may be too much of a hassle to implement. So we would have to live with this crutch I think.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1013843089/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1013887827",
    "html_url": "https://github.com/ethereum/solidity/issues/12538#issuecomment-1013887827",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12538",
    "id": 1013887827,
    "node_id": "IC_kwDOAm_5kc48brNT",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T14:38:47Z",
    "updated_at": "2022-01-16T14:38:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "> a function which may call an external contract, directly or through a subroutine, must have the `interaction` specifier on it.\r\n\r\nI like that idea (as noted towards the end of my initial post). But IMO that's a sufficiently different feature that it would merit a new issue, though I'd be somewhat surprised if it hasn't been requested before. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1013887827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1013889833",
    "html_url": "https://github.com/ethereum/solidity/issues/12538#issuecomment-1013889833",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12538",
    "id": 1013889833,
    "node_id": "IC_kwDOAm_5kc48brsp",
    "user": {
      "login": "hjorthjort",
      "id": 8545447,
      "node_id": "MDQ6VXNlcjg1NDU0NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8545447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hjorthjort",
      "html_url": "https://github.com/hjorthjort",
      "followers_url": "https://api.github.com/users/hjorthjort/followers",
      "following_url": "https://api.github.com/users/hjorthjort/following{/other_user}",
      "gists_url": "https://api.github.com/users/hjorthjort/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hjorthjort/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hjorthjort/subscriptions",
      "organizations_url": "https://api.github.com/users/hjorthjort/orgs",
      "repos_url": "https://api.github.com/users/hjorthjort/repos",
      "events_url": "https://api.github.com/users/hjorthjort/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hjorthjort/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T14:50:56Z",
    "updated_at": "2022-01-16T14:50:56Z",
    "author_association": "NONE",
    "body": "Here's a relevant existing discussion: #10422",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1013889833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1014055413",
    "html_url": "https://github.com/ethereum/solidity/issues/12538#issuecomment-1014055413",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12538",
    "id": 1014055413,
    "node_id": "IC_kwDOAm_5kc48cUH1",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-17T01:29:16Z",
    "updated_at": "2022-01-17T01:29:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I prefer this one: https://github.com/ethereum/solidity/issues/9248",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1014055413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
