{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11417/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11417/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11417/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11417",
  "id": 896774925,
  "node_id": "MDU6SXNzdWU4OTY3NzQ5MjU=",
  "number": 11417,
  "title": "Make use of inline assembly dialect for memory safety",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2021-05-20T12:43:40Z",
  "updated_at": "2022-03-11T16:10:52Z",
  "closed_at": "2022-03-11T16:10:52Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "**Background**\r\n\r\nWhen the inline assembly statement was created, we reserved a string literal whose purpose it was to specify a dialect for the inline assembly. Currently, only leaving it out or using `\"evmasm\"` is valid, everything else will lead to an error:\r\n\r\n```\r\nassembly \"evmasm\" { revert(0, 0) }\r\n```\r\n\r\n**Problem that This Issue wants to Solve**\r\n\r\nWhen compiling via yul, we often use more local Yul variables and thus the stack pressure is higher. Because of that, we want to have the ability to move stack variables to memory. The current approach assumes that functions are not recursive and computes the amount of memory slots needed for such variables throughout the full call graph. It then initializes the free memory pointer to a certain (compile-time constant) value to make space for these variables.\r\n\r\nIf all code properly uses allocations through the free memory pointer, it should not touch the memory areas used by these variables. If code touches that area, it could overwrite a local variable through a memory operation which could lead to weird behaviour.\r\n\r\nWe can ensure that the Yul code that is generated from Solidity properly uses memory allocations, but we cannot do that for inline assembly. Because of that, moving stack variables to memory is disabled as soon as there is inline assembly.\r\n\r\nA common way to violate the memory access restrictions is to use\r\n```\r\ncalldatacopy(0, 0, calldatasize())\r\ncall(...)\r\n```\r\n\r\nThere are some uses of such code in inline assembly, but most of the \"internal\" snippets out in the wild use memory properly.\r\n\r\n**How to Solve the Problem**\r\n\r\nFor some cases, the compiler can detect that for example memory is not used at all or that all writes go to a \"safe\" location, but this will not work in general.\r\n\r\nBecause of that, the idea is to use the dialect strict as a claim from the developer to the compiler that memory is properly used in the given snippet, even if the compiler cannot verify this property.\r\n\r\n**Backwards Compatibility**\r\n\r\nSince we want this to be a deliberate statement, it cannot be the default. We could use `assembly \"evmasm\" { ... }` to make the claim for \"memory-safety\", which would have the benefit that such code can also compile for older compiler versions. If we introduce a new string, this will not be valid code for older compilers.",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11417/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11417/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/845078149",
    "html_url": "https://github.com/ethereum/solidity/issues/11417#issuecomment-845078149",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
    "id": 845078149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTA3ODE0OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-20T12:44:10Z",
    "updated_at": "2021-05-20T12:44:10Z",
    "author_association": "MEMBER",
    "body": "@axic mentioned that there could be other values for the dialect string for other uses.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/845078149/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922757940",
    "html_url": "https://github.com/ethereum/solidity/issues/11417#issuecomment-922757940",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
    "id": 922757940,
    "node_id": "IC_kwDOAm_5kc43ACs0",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T09:17:34Z",
    "updated_at": "2021-09-20T09:17:34Z",
    "author_association": "MEMBER",
    "body": "I'm more and more convinced that due to the fact that this is not backwards-compatible, we cannot use this.\r\n\r\nAnother option would be to use a natspec annotation:\r\n\r\n```\r\nfunction f() pure {\r\n  /// @memorysafe-assembly\r\n  assembly { mstore(0, 2) }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922757940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922767454",
    "html_url": "https://github.com/ethereum/solidity/issues/11417#issuecomment-922767454",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
    "id": 922767454,
    "node_id": "IC_kwDOAm_5kc43AFBe",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T09:32:19Z",
    "updated_at": "2021-09-20T09:32:19Z",
    "author_association": "MEMBER",
    "body": "Why is backwards compatibility important here?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922767454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922873659",
    "html_url": "https://github.com/ethereum/solidity/issues/11417#issuecomment-922873659",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
    "id": 922873659,
    "node_id": "IC_kwDOAm_5kc43Ae87",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T12:14:27Z",
    "updated_at": "2021-09-20T12:14:27Z",
    "author_association": "MEMBER",
    "body": "Because inline assembly is usually used in libraries, which are likely to be used across multiple versions of solidity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922873659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065138261",
    "html_url": "https://github.com/ethereum/solidity/issues/11417#issuecomment-1065138261",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
    "id": 1065138261,
    "node_id": "IC_kwDOAm_5kc4_fLhV",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-11T13:58:48Z",
    "updated_at": "2022-03-11T14:01:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd like to advocate for something cleaner like `assembly memsafe {}`. Considering that comments have never (AFAIK) impacted on compiler output, it feels like this is optimizing for a tiny corner case at the cost of baking in a pretty ugly bit of syntax.\r\n\r\nI see the following scenarios (assuming that this feature is to be added in `0.8.z`, and then gets utilized in [OZ](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol) or [Solmate](https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)[^1])\r\n\r\n1. For a codebase in `0.7.x` or earlier, it seems quite unlikely that they would be actively incorporating brand new 3rd party libs (but you will have more context on this than me, maybe I'm wrong).\r\n2. For a codebase in `0.8.x` (where x < z), it should be pretty trivial to upgrade to `0.8.z` right? \r\n\r\nAdmittedly this breaks the [semver scheme](https://docs.soliditylang.org/en/latest/installing-solidity.html?highlight=versioning#versioning) you've committed to, so rightfully this feature (with my suggested syntax) would go into `0.9.0`... which then puts the `0.8.x` codebases in the same situation as the `0.7.x` ones above, but at least it keeps things clean.\r\n\r\n---\r\n\r\n[^1]: Doesn't look like [dappsys](https://github.com/dapphub/dappsys) is being updated actively. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065138261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065150552",
    "html_url": "https://github.com/ethereum/solidity/issues/11417#issuecomment-1065150552",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
    "id": 1065150552,
    "node_id": "IC_kwDOAm_5kc4_fOhY",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-11T14:14:10Z",
    "updated_at": "2022-03-11T14:14:10Z",
    "author_association": "MEMBER",
    "body": "@maurelian For the record: we did actually implement this with https://github.com/ethereum/solidity/pull/12620 and https://github.com/ethereum/solidity/pull/12663 (not released yet, though).\r\n\r\nSo what's currently on ``develop`` is the following:\r\n\r\nWe allow both:\r\n```\r\n/// @solidity memory-safe-assembly\r\nassembly { ... }\r\n```\r\nand\r\n```\r\nassembly (\"memory-safe\") { ... }\r\n```\r\n\r\nwith the plan to remove the former either directly in 0.9.0 or the breaking release after.\r\n\r\nWe're aware that using a comment for this is ugly and it's an extreme effect for a comment, but the decision so far was to accept that to allow faster adoption. But until our next release there would still be time to reconsider this...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065150552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065155068",
    "html_url": "https://github.com/ethereum/solidity/issues/11417#issuecomment-1065155068",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
    "id": 1065155068,
    "node_id": "IC_kwDOAm_5kc4_fPn8",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-11T14:18:54Z",
    "updated_at": "2022-03-11T14:33:19Z",
    "author_association": "MEMBER",
    "body": "Note that introducing ``assembly (\"memory-safe\") { ... }`` is non-breaking, so it's fine to add it in 0.8.13.\r\n\r\nSo the reasoning is rather that the comment is supposed to only be used by libraries that want to be compatible with the full ``0.8`` series...i.e. if a library uses the comment, it can still be used with ``0.8.0``, but using it with ``0.8.13+`` can still benefit from the memory-safety information.\r\n\r\nIn theory, a library could just use ``assembly (\"memory-safe\")`` directly and drop support for ``<0.8.13``... but we're afraid there will be hesitance on that - that's why we went for also adding the comment version for now...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065155068/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065230360",
    "html_url": "https://github.com/ethereum/solidity/issues/11417#issuecomment-1065230360",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
    "id": 1065230360,
    "node_id": "IC_kwDOAm_5kc4_fiAY",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-11T15:41:04Z",
    "updated_at": "2022-03-11T15:41:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We allow both... with the plan to remove the former either directly in 0.9.0 or the breaking release after.\r\n\r\nAh, OK. That sounds like a reasonable compromise thanks for explaining.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065230360/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065259721",
    "html_url": "https://github.com/ethereum/solidity/issues/11417#issuecomment-1065259721",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11417",
    "id": 1065259721,
    "node_id": "IC_kwDOAm_5kc4_fpLJ",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-11T16:10:52Z",
    "updated_at": "2022-03-11T16:10:52Z",
    "author_association": "MEMBER",
    "body": "Ok, then I'm closing this, since it was closed by https://github.com/ethereum/solidity/pull/12620 resp. https://github.com/ethereum/solidity/pull/12663",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1065259721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
