{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10698/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10698/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10698/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10698",
  "id": 775344520,
  "node_id": "MDU6SXNzdWU3NzUzNDQ1MjA=",
  "number": 10698,
  "title": "Unchecked block as an expression.",
  "user": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 838064207,
      "node_id": "MDU6TGFiZWw4MzgwNjQyMDc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/annoys%20users%20:cry:",
      "name": "annoys users :cry:",
      "color": "ea2cab",
      "default": false,
      "description": ""
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "314aff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 49,
  "created_at": "2020-12-28T11:08:32Z",
  "updated_at": "2022-12-12T21:28:53Z",
  "closed_at": "2022-12-12T21:28:52Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Abstract\r\nMake it so `unchecked { ... }` blocks are an expression that return the the result of the last expression if the last thing in the block is an expression.\r\n\r\n## Motivation\r\nUnchecked blocks are a bit unwieldy at the moment because you have to fully isolate the code inside the unchecked block from the code around it which makes it awkward to deal with.  It would be nice to be able to use unchecked blocks inline, rather than having to fully isolate the unchecked code from the rest of your code.\r\n\r\nHere are some examples of behavior that would be nice, and their counterpart in the current version of Solidity:\r\n```sol\r\n// proposed\r\nfor (uint8 i; i < 10; unchecked { ++i }) { ... }\r\nuint256 apple = unchecked { banana + cherry };\r\nuint256 durian = apple + unchecked { banana + cherry } - eggplant;\r\n\r\n// current\r\nfor (uint8 i; i < 10;) { unchecked { ++i } ... }\r\nuint256 apple;\r\nunchecked { apple = banana + cherry; }\r\nuint256 temp;\r\nunchecked { temp = banana + cherry; }\r\nuint256 durian = apple + temp - eggplant;\r\n```\r\n\r\n## Specification\r\nWhen the last statement in an unchecked block is an expression, the unchecked block becomes an expression and the return value of the last statement in the block is returned from the unchecked block.\r\n\r\nConsider: Maybe this behavior only occurs when the last statement doesn't have a trailing `;` as a way to make this a bit more explicit?\r\n\r\n## Backwards Compatibility\r\nI believe this is a feature that is purely widening, so no backward compatibility issues should exist.\r\n\r\n## Other\r\nIn general, it would be nice if all blocks were expressions, like for loops if blocks, etc.  If it is just as easy to make all blocks expressions then we can adjust this issue, but I wanted to start narrow and widen if there is desire from those with a better understanding of the internals.",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10698/reactions",
    "total_count": 12,
    "+1": 12,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10698/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/752015195",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-752015195",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 752015195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjAxNTE5NQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-29T09:47:08Z",
    "updated_at": "2020-12-29T09:47:08Z",
    "author_association": "MEMBER",
    "body": "I was writing tests for https://github.com/ethereum/solidity/pull/10661 today and *really* missed this feature.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/752015195/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/752796291",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-752796291",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 752796291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1Mjc5NjI5MQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-31T00:05:34Z",
    "updated_at": "2020-12-31T00:05:34Z",
    "author_association": "MEMBER",
    "body": "I think this would make the language nicer to use. When I was discussing the `match` statement for #909 with @christianparpart some time ago, we both thought that it it would be best off as an expression (like in functional languages or Rust) and, extending that even further, it would be a good thing if every block actually worked that way.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/752796291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758747734",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-758747734",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 758747734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODc0NzczNA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-12T15:47:47Z",
    "updated_at": "2021-01-12T15:48:24Z",
    "author_association": "MEMBER",
    "body": "While I'm not necessarily saying that ``unchecked`` expressions are a bad idea in general, I'd very much emphasize that I think that ``for(uint i = 0; i < 100; unchecked { i++ })`` is not a valid argument for this.\r\nAs far as I'm concerned this should never be written. The idea behind ``unchecked`` was clearly that it's only valid use is in cases like bitwise arithmetic in cryptographic subroutines, nowhere else.\r\n\r\nThat being said, in retrospective, it is unfortunate that we enabled checked arithmetic by default before the optimizer will be able to remove all redundant checks as the one in such a loop (it will at some point) - that's of course frustrating and I can understand being dissatisfied by that. But it still (at least on its own) doesn't warrant a language change like this.\r\n\r\nThere is two zero-cost workarounds for the loop post expressions that are better than general unchecked expression:\r\n```\r\nfunction unsafe_inc(uint x) returns (uint) {\r\n    unchecked { return x + 1; }\r\n}\r\n\r\ncontract C {\r\n    function f() public {\r\n        for(uint x = 0; x < 10; x = unsafe_inc(x))\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\nlibrary L {\r\n    function unsafe_inc(uint x) internal returns (uint) {\r\n        unchecked { return x + 1; }\r\n    }\r\n}\r\n\r\ncontract D {\r\n    using L for uint;\r\n\r\n    function f() public {\r\n        for(uint x = 0; x < 10; x = x.unsafe_inc())\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhich could of course be generalized to a full ``UnsafeMath`` library.\r\n\r\nSo if we don't have good independent reasons for allowing blocks as expressions or cases that would not be solved by such an ``UnsafeMath`` library, I vote against this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758747734/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/759848141",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-759848141",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 759848141,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTg0ODE0MQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-14T00:39:17Z",
    "updated_at": "2021-01-14T00:39:17Z",
    "author_association": "MEMBER",
    "body": "Will the compiler (currently) inline `unsafe_inc` in both cases?  I thought it would include a jump and some stack manipulation?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/759848141/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/760068584",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-760068584",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 760068584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MDA2ODU4NA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-14T09:21:01Z",
    "updated_at": "2021-01-14T09:21:01Z",
    "author_association": "MEMBER",
    "body": "> Will the compiler (currently) inline `unsafe_inc` in both cases? I thought it would include a jump and some stack manipulation?\r\n\r\nHm, yeah, the old optimizer actually probably won't, that's a good point...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/760068584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/760089886",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-760089886",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 760089886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MDA4OTg4Ng==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-14T09:59:26Z",
    "updated_at": "2021-01-14T09:59:26Z",
    "author_association": "MEMBER",
    "body": "> > Will the compiler (currently) inline `unsafe_inc` in both cases? I thought it would include a jump and some stack manipulation?\r\n> \r\n> Hm, yeah, the old optimizer actually probably won't, that's a good point...\r\n\r\nMaybe in 0.8.1 it will, though, we're just considering it ;-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/760089886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/769409163",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-769409163",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 769409163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTQwOTE2Mw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-28T21:26:39Z",
    "updated_at": "2021-01-28T21:26:39Z",
    "author_association": "MEMBER",
    "body": "> > > Will the compiler (currently) inline `unsafe_inc` in both cases? I thought it would include a jump and some stack manipulation?\r\n> > \r\n> > \r\n> > Hm, yeah, the old optimizer actually probably won't, that's a good point...\r\n> \r\n> Maybe in 0.8.1 it will, though, we're just considering it ;-).\r\n\r\nWell, 0.8.1 apparently was overly optimistic, especially since we need to collaborate with tooling in order for it not to break debugging... but it looks like it'll come eventually and maybe we'll get it sorted just in time for 0.8.2 at least.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/769409163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/771441354",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-771441354",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 771441354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTQ0MTM1NA==",
    "user": {
      "login": "jacob-eliosoff",
      "id": 8806519,
      "node_id": "MDQ6VXNlcjg4MDY1MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8806519?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacob-eliosoff",
      "html_url": "https://github.com/jacob-eliosoff",
      "followers_url": "https://api.github.com/users/jacob-eliosoff/followers",
      "following_url": "https://api.github.com/users/jacob-eliosoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacob-eliosoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacob-eliosoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacob-eliosoff/subscriptions",
      "organizations_url": "https://api.github.com/users/jacob-eliosoff/orgs",
      "repos_url": "https://api.github.com/users/jacob-eliosoff/repos",
      "events_url": "https://api.github.com/users/jacob-eliosoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacob-eliosoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-02T07:52:10Z",
    "updated_at": "2021-02-02T07:52:10Z",
    "author_association": "NONE",
    "body": "> I was writing tests for #10661 today and _really_ missed this feature.\r\n\r\nNot a huge deal, but I missed this feature today too (@MicahZoltu's `apple`/`durian` usage above).  Making it possible to modify expressions makes it easier to write functional aka pure (or at least expression-based rather than stateful) code, which I think should generally be encouraged...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/771441354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775156679",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-775156679",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 775156679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTE1NjY3OQ==",
    "user": {
      "login": "jacob-eliosoff",
      "id": 8806519,
      "node_id": "MDQ6VXNlcjg4MDY1MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8806519?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacob-eliosoff",
      "html_url": "https://github.com/jacob-eliosoff",
      "followers_url": "https://api.github.com/users/jacob-eliosoff/followers",
      "following_url": "https://api.github.com/users/jacob-eliosoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacob-eliosoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacob-eliosoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacob-eliosoff/subscriptions",
      "organizations_url": "https://api.github.com/users/jacob-eliosoff/orgs",
      "repos_url": "https://api.github.com/users/jacob-eliosoff/repos",
      "events_url": "https://api.github.com/users/jacob-eliosoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacob-eliosoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T13:37:52Z",
    "updated_at": "2021-02-08T13:37:52Z",
    "author_association": "NONE",
    "body": "Doing some gas golfing today and I really missed this feature again...  Too many cases where doing the gas-optimal thing turns one line of code into three.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775156679/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1042416461",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1042416461",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1042416461,
    "node_id": "IC_kwDOAm_5kc4-IgNN",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-16T23:44:29Z",
    "updated_at": "2022-02-16T23:44:29Z",
    "author_association": "MEMBER",
    "body": "I think we should think about this again. I would bring this up in the next design call.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1042416461/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1043062143",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1043062143",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1043062143,
    "node_id": "IC_kwDOAm_5kc4-K91_",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T15:19:48Z",
    "updated_at": "2022-02-17T15:19:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "As a data point, here is some recent code where lack of unchecked expressions harms readability:\r\n\r\n```solidity\r\nfunction pushFront(Bytes32Deque storage deque, bytes32 value) internal {\r\n    int128 frontIndex;\r\n    unchecked {\r\n        frontIndex = deque._begin - 1;\r\n    }\r\n    deque._data[frontIndex] = value;\r\n    deque._begin = frontIndex;\r\n}\r\n```\r\n([source](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3fe65ef4673f118da396c2d1027ec01116614aff/contracts/utils/structs/DoubleEndedQueue.sol#L79))\r\n\r\nAssuming we don't want to wrap everything in the unchecked block, which is good practice IMO,\r\n\r\n1. Because of scope we need to declare the variable outside the block.\r\n2. The extra indentation arguably makes it harder to read the code.\r\n\r\nHere is what it could look like with an unchecked expression:\r\n\r\n```solidity\r\nfunction pushFront(Bytes32Deque storage deque, bytes32 value) internal {\r\n    int128 frontIndex = unchecked { deque._begin - 1 };\r\n    deque._data[frontIndex] = value;\r\n    deque._begin = frontIndex;\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1043062143/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1043064991",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1043064991",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1043064991,
    "node_id": "IC_kwDOAm_5kc4-K-if",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T15:22:31Z",
    "updated_at": "2022-02-17T15:22:31Z",
    "author_association": "MEMBER",
    "body": "@frangio I saw that code yesterday! Also have been seeing similar uses in other codebases. I think we badly need this feature in the language.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1043064991/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1043221780",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1043221780",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1043221780,
    "node_id": "IC_kwDOAm_5kc4-Lk0U",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T17:32:08Z",
    "updated_at": "2022-02-17T17:36:55Z",
    "author_association": "MEMBER",
    "body": "I see the point, but I think we should not have curly braces at expression level.\r\n\r\nYour example is very interesting: You are using `int128` values that always start out with `0` and can only be incremented and decremented. Because of these access restrictions to the type, it can never overflow with finite gas.\r\n\r\nThere is a comment along these lines in the documentation of the library, but isn't this an insight that should rather be coupled to the type instead of the library?\r\n\r\nIf you have a type that only defines the functions `inc()`, `dec()`, `reset()` and `distance(x, y)` and does not make use of `wrap` and `unwrap`, you don't need any `unchecked` except inside the functions defined on the type. You can even use the type as a key in the mapping.\r\n\r\nThe only function in the library that is not totally trivial after that is the `at()` function, which needs a function on the type that is a bit weird: `distanceFromBegin(uint256 index, CustomType begin, CustomType end) pure returns (CustomType)`\r\n\r\nThis function is essentially `require(begin + index < end); return begin + index;`. It returns a safe value as long as `begin <= end` . Your current implementation has some `SafeCast`s, so maybe you can add `require(begin <= end)` as well.\r\nBecause of these checks, the function already does the bounds checking for you that you need anyway.\r\n\r\nYeah, maybe I'm taking this a bit too far here...\r\n\r\nedit: distanceFromBegin returns CustomType",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1043221780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1043470740",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1043470740",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1043470740,
    "node_id": "IC_kwDOAm_5kc4-MhmU",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T21:33:40Z",
    "updated_at": "2022-02-17T21:33:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I see the point, but I think we should not have curly braces at expression level.\r\n\r\nYeah I thought about this as well. Other syntax would be fine too.\r\n\r\n---\r\n\r\nIt's a good observation that we don't need unchecked if we define a new datatype with those guarantees. It's actually the reason why we have a [Counter](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/3fe65ef4673f118da396c2d1027ec01116614aff/contracts/utils/Counters.sol#L15) type, although that was introduced before user defined value types so it doesn't have the stronger guarantees.\r\n\r\nSome of our tooling doesn't support user defined value types just yet so I don't think we want to implement it that way for now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1043470740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046074312",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1046074312",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1046074312,
    "node_id": "IC_kwDOAm_5kc4-WdPI",
    "user": {
      "login": "jacob-eliosoff",
      "id": 8806519,
      "node_id": "MDQ6VXNlcjg4MDY1MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8806519?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacob-eliosoff",
      "html_url": "https://github.com/jacob-eliosoff",
      "followers_url": "https://api.github.com/users/jacob-eliosoff/followers",
      "following_url": "https://api.github.com/users/jacob-eliosoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacob-eliosoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacob-eliosoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacob-eliosoff/subscriptions",
      "organizations_url": "https://api.github.com/users/jacob-eliosoff/orgs",
      "repos_url": "https://api.github.com/users/jacob-eliosoff/repos",
      "events_url": "https://api.github.com/users/jacob-eliosoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacob-eliosoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-19T18:06:10Z",
    "updated_at": "2022-02-19T18:06:10Z",
    "author_association": "NONE",
    "body": "I'm sure there are tradeoffs I don't fully appreciate here but from a simple Solidity code monkey's pov, a lot of `unchecked` code I've written (egs in our [WadMath](https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol) lib - like @frangio's example) would be a lot nicer with unchecked expressions, even using curly braces.  To the point where I'm sometimes reluctant to save the gas because it gratuitously adds several lines to my code, which I hate.\r\n\r\nEven better would be unchecked versions of the individual operators: something like `x +u y` as the unchecked version of `x + y`.  (I realize `+u` isn't actually a doable syntax.)  It's really the individual operation I want to make a decision about, not a block.\r\n\r\nSo my 2c is, if a nicer solution comes to mind (eg along the lines of `+u`), great, but if you have to choose between allowing curly-braced expressions and the status quo, I'd vote for the curly braces.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046074312/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046128220",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1046128220",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1046128220,
    "node_id": "IC_kwDOAm_5kc4-WqZc",
    "user": {
      "login": "jacob-eliosoff",
      "id": 8806519,
      "node_id": "MDQ6VXNlcjg4MDY1MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8806519?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacob-eliosoff",
      "html_url": "https://github.com/jacob-eliosoff",
      "followers_url": "https://api.github.com/users/jacob-eliosoff/followers",
      "following_url": "https://api.github.com/users/jacob-eliosoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacob-eliosoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacob-eliosoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacob-eliosoff/subscriptions",
      "organizations_url": "https://api.github.com/users/jacob-eliosoff/orgs",
      "repos_url": "https://api.github.com/users/jacob-eliosoff/repos",
      "events_url": "https://api.github.com/users/jacob-eliosoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacob-eliosoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-20T00:06:11Z",
    "updated_at": "2022-02-20T00:06:11Z",
    "author_association": "NONE",
    "body": "Just to make my \"It's the operation I want to make a decision about, not the block\" comment more concrete: I can envision cases where the status quo code is:\r\n\r\n```\r\nuint a;\r\nunchecked { a = b + c; }\r\na *= d;\r\nunchecked { a -= e; }\r\n```\r\n\r\nAnd with `unchecked` expressions it would be:\r\n\r\n```\r\nuint a = unchecked { b + c; }\r\na *= d;\r\nunchecked { a -= e; }\r\n```\r\n\r\nBut with the `+u`-type operators I described it could be:\r\n\r\n```\r\nuint a = (b +u c) * d -u e;\r\n```\r\n\r\nThis might require scratching our heads for a workable syntax but I mean shit, that last version is so much cleaner/more compact than the other two.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046128220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046784623",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1046784623",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1046784623,
    "node_id": "IC_kwDOAm_5kc4-ZKpv",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-21T11:37:09Z",
    "updated_at": "2022-02-21T11:37:09Z",
    "author_association": "MEMBER",
    "body": "Yeah, I would very much prefer the different operator than the curly braces at expression level. I think we actually discussed that at some point.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046784623/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054563474",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1054563474",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1054563474,
    "node_id": "IC_kwDOAm_5kc4-21yS",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-28T18:55:21Z",
    "updated_at": "2022-02-28T19:02:22Z",
    "author_association": "MEMBER",
    "body": "Just for fun, I implemented the idea suggested in https://github.com/ethereum/solidity/issues/10698#issuecomment-1043221780 here: https://github.com/solidity-external-tests/openzeppelin-contracts/commit/497cdc908960f2b0c0b72a56c1eb88cee3daa565",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054563474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055008792",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1055008792",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1055008792,
    "node_id": "IC_kwDOAm_5kc4-4igY",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-01T04:37:15Z",
    "updated_at": "2022-03-01T04:37:15Z",
    "author_association": "MEMBER",
    "body": "For the \"alternative operator\" we could use some extended characters.  That would make it very difficult to *accidentally* screw up.\r\n\r\n`‡⁑¬⁜※–` for some ideas (note that last one is not `-`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055008792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055094212",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1055094212",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1055094212,
    "node_id": "IC_kwDOAm_5kc4-43XE",
    "user": {
      "login": "saurik",
      "id": 36743,
      "node_id": "MDQ6VXNlcjM2NzQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saurik",
      "html_url": "https://github.com/saurik",
      "followers_url": "https://api.github.com/users/saurik/followers",
      "following_url": "https://api.github.com/users/saurik/following{/other_user}",
      "gists_url": "https://api.github.com/users/saurik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saurik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saurik/subscriptions",
      "organizations_url": "https://api.github.com/users/saurik/orgs",
      "repos_url": "https://api.github.com/users/saurik/repos",
      "events_url": "https://api.github.com/users/saurik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saurik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-01T07:05:43Z",
    "updated_at": "2022-03-01T07:05:43Z",
    "author_association": "NONE",
    "body": "> `‡⁑¬⁜※–` for some ideas (note that last one is not `-`.\r\n\r\n@MicahZoltu OK, you've finally goaded me into the conversation: do not under any circumstance implement this feature using a character that looks almost identical to `-` (including `¬`) _but somehow isn't actually `-`_ as I can essentially guarantee to you that this will be used to purposefully hide bugs in contracts :/.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055094212/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055103447",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1055103447",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1055103447,
    "node_id": "IC_kwDOAm_5kc4-45nX",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-01T07:19:12Z",
    "updated_at": "2022-03-01T07:19:12Z",
    "author_association": "MEMBER",
    "body": "That is reasonable.  Another option would be to go full emoji:\r\n```\r\n➗✖️➕➖\r\n```\r\nUnfortunately (something that makes me want to flip tables), Microsoft has a bug that makes ➕ look identical to ✖️ when using their default font (https://emojipedia.org/multiply/).  /tableflip",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055103447/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1079517125",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1079517125",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1079517125,
    "node_id": "IC_kwDOAm_5kc5AWB_F",
    "user": {
      "login": "jacob-eliosoff",
      "id": 8806519,
      "node_id": "MDQ6VXNlcjg4MDY1MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8806519?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacob-eliosoff",
      "html_url": "https://github.com/jacob-eliosoff",
      "followers_url": "https://api.github.com/users/jacob-eliosoff/followers",
      "following_url": "https://api.github.com/users/jacob-eliosoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacob-eliosoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacob-eliosoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacob-eliosoff/subscriptions",
      "organizations_url": "https://api.github.com/users/jacob-eliosoff/orgs",
      "repos_url": "https://api.github.com/users/jacob-eliosoff/repos",
      "events_url": "https://api.github.com/users/jacob-eliosoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacob-eliosoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-25T23:37:39Z",
    "updated_at": "2022-03-25T23:37:39Z",
    "author_association": "NONE",
    "body": "Yeah what @saurik said, doppelganger characters are absolutely not the solution, we need something that's legible and unambiguous in ASCII.  [@alcueca suggested](https://twitter.com/alcueca/status/1507459669102673927) \"!*\" for unchecked *, etc?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1079517125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1079623024",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1079623024",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1079623024,
    "node_id": "IC_kwDOAm_5kc5AWb1w",
    "user": {
      "login": "jacob-eliosoff",
      "id": 8806519,
      "node_id": "MDQ6VXNlcjg4MDY1MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8806519?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacob-eliosoff",
      "html_url": "https://github.com/jacob-eliosoff",
      "followers_url": "https://api.github.com/users/jacob-eliosoff/followers",
      "following_url": "https://api.github.com/users/jacob-eliosoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacob-eliosoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacob-eliosoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacob-eliosoff/subscriptions",
      "organizations_url": "https://api.github.com/users/jacob-eliosoff/orgs",
      "repos_url": "https://api.github.com/users/jacob-eliosoff/repos",
      "events_url": "https://api.github.com/users/jacob-eliosoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacob-eliosoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T06:47:42Z",
    "updated_at": "2022-03-26T06:47:42Z",
    "author_association": "NONE",
    "body": "...Or I guess to me `+!`, `-!`, `*!`, `/!` etc are the most intuitive?  Would those break existing code?  Eyeballing the [operators](https://docs.soliditylang.org/en/v0.8.11/control-structures.html) currently affected by `unchecked` I can't see any that are already valid with a \"!\" appended (or prepended) - I may have missed one...\r\n\r\n> The following operators will cause a failing assertion on overflow or underflow and will wrap without an error if used inside an unchecked block:\r\n>\r\n> `++`, `--`, `+`, binary `-`, unary `-`, `*`, `/`, `%`, `**`\r\n>\r\n> `+=`, `-=`, `*=`, `/=`, `%=`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1079623024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1098962426",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1098962426",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1098962426,
    "node_id": "IC_kwDOAm_5kc5BgNX6",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-14T09:58:01Z",
    "updated_at": "2022-04-14T09:58:01Z",
    "author_association": "MEMBER",
    "body": "@jacob-eliosoff You mean something analogous to the [non-null assertion operator](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html?#non-null-assertion-operator) in TypeScript? E.g. `+!` would be checked and revert (just like `var!` fails in TS when `var` is `null`) while `+` would be an unchecked addition?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1098962426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1099132714",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1099132714",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1099132714,
    "node_id": "IC_kwDOAm_5kc5Bg28q",
    "user": {
      "login": "jacob-eliosoff",
      "id": 8806519,
      "node_id": "MDQ6VXNlcjg4MDY1MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8806519?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacob-eliosoff",
      "html_url": "https://github.com/jacob-eliosoff",
      "followers_url": "https://api.github.com/users/jacob-eliosoff/followers",
      "following_url": "https://api.github.com/users/jacob-eliosoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacob-eliosoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacob-eliosoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacob-eliosoff/subscriptions",
      "organizations_url": "https://api.github.com/users/jacob-eliosoff/orgs",
      "repos_url": "https://api.github.com/users/jacob-eliosoff/repos",
      "events_url": "https://api.github.com/users/jacob-eliosoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacob-eliosoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-14T12:27:20Z",
    "updated_at": "2022-04-14T12:27:33Z",
    "author_association": "NONE",
    "body": "Well, kind of, but I was thinking the reverse: `+` is checked, `+!` is unchecked (the exclamation mark says \"You _must_ do it!\").  But I'm open to whatever syntax really, just want an expression rather than a statement.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1099132714/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1099145076",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1099145076",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1099145076,
    "node_id": "IC_kwDOAm_5kc5Bg590",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-14T12:41:28Z",
    "updated_at": "2022-04-14T12:41:45Z",
    "author_association": "MEMBER",
    "body": "Ah, ok. But then I'm not sure if that's really intuitive. TS people will likely expect the `+!` version to revert while others may expect `+` to revert as it does now so this syntax is actually pretty ambiguous.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1099145076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1099147918",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1099147918",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1099147918,
    "node_id": "IC_kwDOAm_5kc5Bg6qO",
    "user": {
      "login": "jacob-eliosoff",
      "id": 8806519,
      "node_id": "MDQ6VXNlcjg4MDY1MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8806519?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacob-eliosoff",
      "html_url": "https://github.com/jacob-eliosoff",
      "followers_url": "https://api.github.com/users/jacob-eliosoff/followers",
      "following_url": "https://api.github.com/users/jacob-eliosoff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacob-eliosoff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacob-eliosoff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacob-eliosoff/subscriptions",
      "organizations_url": "https://api.github.com/users/jacob-eliosoff/orgs",
      "repos_url": "https://api.github.com/users/jacob-eliosoff/repos",
      "events_url": "https://api.github.com/users/jacob-eliosoff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacob-eliosoff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-14T12:44:52Z",
    "updated_at": "2022-04-14T12:44:52Z",
    "author_association": "NONE",
    "body": "I'll leave that debate to bigger language gurus than me, though whoever on the TypeScript side decided that adding an exclamation mark would make the operation _less_ likely to succeed should feel very, very ashamed",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1099147918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1101559553",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1101559553",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1101559553,
    "node_id": "IC_kwDOAm_5kc5BqHcB",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-18T16:50:05Z",
    "updated_at": "2022-04-18T16:51:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cameel I think you may be confused as to how `!` works in TypeScript. The operator doesn't cause the compiler to emit any extra runtime checks, it rather tells the compiler to statically assume that the variable is not null. It may result in a runtime error down the road if this assumption is wrong, because the JavaScript runtime is typed.\r\n\r\n`+!` could be seen analogously as a way to tell the compiler that it can assume the operation will not overflow, so it can omit the runtime check. But this is slightly different from the TypeScript/JavaScript case because you could say the EVM runtime is \"untyped\" in the sense that if the assumption is wrong and there is overflow, there will not necessarily be a runtime error.\r\n\r\nI still think this is close enough though, `+!` feels like reasonable syntax for unchecked arithmetic to me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1101559553/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1107714678",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1107714678",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1107714678,
    "node_id": "IC_kwDOAm_5kc5CBmJ2",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-24T05:38:11Z",
    "updated_at": "2022-04-24T05:38:11Z",
    "author_association": "MEMBER",
    "body": "I'm a fan of `+!`.  To me, the `!` operator means, \"I know what I'm doing, don't try to protect me from myself.\"  This is true in TypeScript, where the user is asserting to the compiler \"I'm confident that this thing is not null, please don't try and be helpful by stopping me from using it in contexts where non-null is required\" and in Solidity it would mean, \"I'm confident this math operation will be fine at runtime, please don't add additional runtime checks to validate this for me\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1107714678/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1107849603",
    "html_url": "https://github.com/ethereum/solidity/issues/10698#issuecomment-1107849603",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10698",
    "id": 1107849603,
    "node_id": "IC_kwDOAm_5kc5CCHGD",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-24T14:10:21Z",
    "updated_at": "2022-04-24T14:13:16Z",
    "author_association": "MEMBER",
    "body": "Checked math operations in Solidity are assertions too. They result in a `Panic` just like a failed `assert()`, division by zero or out of bounds array access. If you do `x + y`, you're asserting that the result won't overflow. With `x +! y` you would simply not be asserting anything about the operation. And just like with `!` if your assertion is false, all bets are off, you probably have a bug.\r\n\r\nThe problem is that most language users see checked math as proper input validation. Which is a whole different discussion.\r\n\r\nThat being said, I agree that the `+!` syntax is neat and my biggest concern is the potential for confusion. I wish we could just use `+!` for checked stuff and normal operators for unchecked. That would be breaking though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1107849603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
