{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10381/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10381/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10381/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10381",
  "id": 749368847,
  "node_id": "MDU6SXNzdWU3NDkzNjg4NDc=",
  "number": 10381,
  "title": "feature request: try catch for abi.decode",
  "user": {
    "login": "gitpusha",
    "id": 36712489,
    "node_id": "MDQ6VXNlcjM2NzEyNDg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gitpusha",
    "html_url": "https://github.com/gitpusha",
    "followers_url": "https://api.github.com/users/gitpusha/followers",
    "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
    "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
    "organizations_url": "https://api.github.com/users/gitpusha/orgs",
    "repos_url": "https://api.github.com/users/gitpusha/repos",
    "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gitpusha/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4437999539,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZ_sw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20effort",
      "name": "high effort",
      "color": "ff54f4",
      "default": false,
      "description": "A lot to implement but still doable by a single person. The task is large or difficult."
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    },
    {
      "id": 4438488423,
      "node_id": "LA_kwDOAm_5kc8AAAABCI31Zw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have",
      "name": "must have",
      "color": "ffa12a",
      "default": false,
      "description": "Something we consider an essential part of Solidity 1.0."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    },
    {
      "id": 4726043980,
      "node_id": "LA_kwDOAm_5kc8AAAABGbG1TA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/Feature%20Request",
      "name": "Feature Request",
      "color": "5DBB65",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2020-11-24T05:56:57Z",
  "updated_at": "2022-11-14T15:06:39Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Hi, \r\n\r\nI am referencing the conversation #10317 .\r\n\r\nIt would be nice to have a way to catch errors thrown during `abi.decode` operations. \r\n\r\nQuoting @chriseth:\r\n> Instead of try/catch we should maybe rather have abi.tryDecode? The problem here is how to return the data in the two cases\r\n\r\nAlso `try catch` might be useful for functions other than `abi.decode` but I will first need to find concrete examples and will report them here in this issue. ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10381/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10381/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/772297478",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-772297478",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 772297478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjI5NzQ3OA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-03T07:27:03Z",
    "updated_at": "2021-02-03T07:27:03Z",
    "author_association": "MEMBER",
    "body": "I'm starting work on the underlying mechanism for use in `catch`. The problem of exposing this to the user is still how to deal with the actual values in case of an error. We can use a success flag:\r\n```\r\n(bool success, uint value) = abi.tryDecode(ms.data, (uint));\r\n```\r\nbut this would make `value` accessible even in case of failure.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/772297478/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776621776",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-776621776",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 776621776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjYyMTc3Ng==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-10T10:49:15Z",
    "updated_at": "2021-02-10T10:49:15Z",
    "author_association": "MEMBER",
    "body": "> I'm starting work on the underlying mechanism for use in `catch`. The problem of exposing this to the user is still how to deal with the actual values in case of an error. We can use a success flag:\r\n> \r\n> ```\r\n> (bool success, uint value) = abi.tryDecode(ms.data, (uint));\r\n> ```\r\n> \r\n> but this would make `value` accessible even in case of failure.\r\n\r\nAlgebraic datatypes (https://github.com/ethereum/solidity/issues/909) could be a way around that...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776621776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776933957",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-776933957",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 776933957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjkzMzk1Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-10T18:54:36Z",
    "updated_at": "2021-02-10T18:54:36Z",
    "author_association": "MEMBER",
    "body": "Until we have algebraic datatypes, returning an additional bool might be a good solution. All our types should have a sane zero-value, at least those that can be abi-decoded.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776933957/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1053705896",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-1053705896",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 1053705896,
    "node_id": "IC_kwDOAm_5kc4-zkao",
    "user": {
      "login": "daltonclaybrook",
      "id": 1727803,
      "node_id": "MDQ6VXNlcjE3Mjc4MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1727803?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daltonclaybrook",
      "html_url": "https://github.com/daltonclaybrook",
      "followers_url": "https://api.github.com/users/daltonclaybrook/followers",
      "following_url": "https://api.github.com/users/daltonclaybrook/following{/other_user}",
      "gists_url": "https://api.github.com/users/daltonclaybrook/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daltonclaybrook/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daltonclaybrook/subscriptions",
      "organizations_url": "https://api.github.com/users/daltonclaybrook/orgs",
      "repos_url": "https://api.github.com/users/daltonclaybrook/repos",
      "events_url": "https://api.github.com/users/daltonclaybrook/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daltonclaybrook/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-27T22:37:38Z",
    "updated_at": "2022-02-27T22:37:38Z",
    "author_association": "NONE",
    "body": "Any update on this issue? Would love to be able to try `abi.decode` without fear of panic.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1053705896/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1134625049",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-1134625049",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 1134625049,
    "node_id": "IC_kwDOAm_5kc5DoQEZ",
    "user": {
      "login": "fredlacs",
      "id": 32464905,
      "node_id": "MDQ6VXNlcjMyNDY0OTA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/32464905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fredlacs",
      "html_url": "https://github.com/fredlacs",
      "followers_url": "https://api.github.com/users/fredlacs/followers",
      "following_url": "https://api.github.com/users/fredlacs/following{/other_user}",
      "gists_url": "https://api.github.com/users/fredlacs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fredlacs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fredlacs/subscriptions",
      "organizations_url": "https://api.github.com/users/fredlacs/orgs",
      "repos_url": "https://api.github.com/users/fredlacs/repos",
      "events_url": "https://api.github.com/users/fredlacs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fredlacs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-23T12:39:34Z",
    "updated_at": "2022-05-23T12:39:34Z",
    "author_association": "NONE",
    "body": "Would also love support for `abi.tryDecode` that returns a bool",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1134625049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1160263156",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-1160263156",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 1160263156,
    "node_id": "IC_kwDOAm_5kc5FKDX0",
    "user": {
      "login": "giuseppeg",
      "id": 711311,
      "node_id": "MDQ6VXNlcjcxMTMxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/711311?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giuseppeg",
      "html_url": "https://github.com/giuseppeg",
      "followers_url": "https://api.github.com/users/giuseppeg/followers",
      "following_url": "https://api.github.com/users/giuseppeg/following{/other_user}",
      "gists_url": "https://api.github.com/users/giuseppeg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giuseppeg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giuseppeg/subscriptions",
      "organizations_url": "https://api.github.com/users/giuseppeg/orgs",
      "repos_url": "https://api.github.com/users/giuseppeg/repos",
      "events_url": "https://api.github.com/users/giuseppeg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giuseppeg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-20T10:25:08Z",
    "updated_at": "2022-06-20T10:25:08Z",
    "author_association": "NONE",
    "body": "What is the current solution to this? Just let it revert without reason?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1160263156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1172236043",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-1172236043",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 1172236043,
    "node_id": "IC_kwDOAm_5kc5F3ucL",
    "user": {
      "login": "CJ42",
      "id": 31145285,
      "node_id": "MDQ6VXNlcjMxMTQ1Mjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/31145285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CJ42",
      "html_url": "https://github.com/CJ42",
      "followers_url": "https://api.github.com/users/CJ42/followers",
      "following_url": "https://api.github.com/users/CJ42/following{/other_user}",
      "gists_url": "https://api.github.com/users/CJ42/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CJ42/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CJ42/subscriptions",
      "organizations_url": "https://api.github.com/users/CJ42/orgs",
      "repos_url": "https://api.github.com/users/CJ42/repos",
      "events_url": "https://api.github.com/users/CJ42/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CJ42/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-01T11:16:03Z",
    "updated_at": "2022-07-01T11:16:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "It would be useful especially in case when trying to decode abi-encoded arrays, where the `bytes data` passed as an argument to `abi.decode(...)` is not a properly encoded array of `valueTypes[]`, according to the ABI specs.\r\n\r\nI encountered the issue on my side, and the only way was to write some custom functions that analyse the data to check for valid offsets, length, etc...\r\n\r\nFor reference, see https://github.com/lukso-network/lsp-smart-contracts/blob/53e33cc5359244cbc6f9f1db4ffc7c5b1348ad67/contracts/LSP2ERC725YJSONSchema/LSP2Utils.sol#L135-L197 \r\n\r\n```solidity\r\nfunction isEncodedArray(bytes memory data) internal pure returns (bool) {\r\n    uint256 nbOfBytes = data.length;\r\n\r\n    // 1) there must be at least 32 bytes to store the offset\r\n    if (nbOfBytes < 32) return false;\r\n\r\n    // 2) there must be at least the same number of bytes specified by\r\n    // the offset value (otherwise, the offset points to nowhere)\r\n    uint256 offset = uint256(bytes32(data));\r\n    if (nbOfBytes < offset) return false;\r\n\r\n    // 3) there must be at least 32 x length bytes after offset\r\n    uint256 arrayLength = data.toUint256(offset);\r\n\r\n    //   32 bytes word (= offset)\r\n    // + 32 bytes word (= array length)\r\n    // + remaining bytes that make each element of the array\r\n    if (nbOfBytes < (offset + 32 + (arrayLength * 32))) return false;\r\n\r\n    return true;\r\n}\r\n\r\nfunction isEncodedArrayOfAddresses(bytes memory data) internal pure returns (bool) {\r\n    if (!isEncodedArray(data)) return false;\r\n\r\n    uint256 offset = uint256(bytes32(data));\r\n    uint256 arrayLength = data.toUint256(offset);\r\n\r\n    uint256 pointer = offset + 32;\r\n\r\n    for (uint256 ii = 0; ii < arrayLength; ii++) {\r\n        bytes32 key = data.toBytes32(pointer);\r\n\r\n        // check that the leading bytes are zero bytes \"00\"\r\n        // NB: address type is padded on the left (unlike bytes20 type that is padded on the right)\r\n        if (bytes12(key) != bytes12(0)) return false;\r\n\r\n        // increment the pointer\r\n        pointer += 32;\r\n    }\r\n\r\n     return true;\r\n}\r\n\r\nfunction isBytes4EncodedArray(bytes memory data) internal pure returns (bool) {\r\n    if (!isEncodedArray(data)) return false;\r\n\r\n    uint256 offset = uint256(bytes32(data));\r\n    uint256 arrayLength = data.toUint256(offset);\r\n    uint256 pointer = offset + 32;\r\n\r\n    for (uint256 ii = 0; ii < arrayLength; ii++) {\r\n        bytes32 key = data.toBytes32(pointer);\r\n\r\n        // check that the trailing bytes are zero bytes \"00\"\r\n        if (uint224(uint256(key)) != 0) return false;\r\n\r\n        // increment the pointer\r\n        pointer += 32;\r\n    }\r\n\r\n    return true;\r\n}\r\n```\r\n\r\na `tryDecode` would be useful in such case and apply well. For instance:\r\n\r\n```solidity\r\nfunction isAbiEncodedArrayOfAddresses(bytes memory data) public returns (bool) {\r\n    try abi.tryDecode(data, (address[]) returns (address[] memory) {\r\n        // ...\r\n        return true;\r\n    } catch {\r\n        // ...\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\nOr in a more simpler using @chriseth example:\r\n\r\n```solidity\r\nfunction isAbiEncodedArrayOfAddresses(bytes memory data) public returns (bool) {\r\n    (bool success,) = abi.tryDecode(ms.data, (address[]));\r\n    return success;\r\n}\r\n```\r\n\r\nFor arrays, the `tryDecode` could analyze the structure of the bytes given as input. For instance for abi-encoded array of bytes:\r\n- if the offset is valid (= not more than [`uint64`, being the maximum size of the memory allowed](https://twitter.com/721Orbit/status/1511961757874589696?s=20&t=5TVXs2a1wizAOqmsYYhWZA))\r\n- if the offset actually point to some bytes offset, and does not point to far (an \"empty space where there is nothing\")\r\n- if there is the right number of values according to the encoded `length`.\r\n\r\nFor simple types like `uint256`, `uint128`, `bytesN`, etc..., I guess it could check for things like out of range value, the right number of bytes, etc...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1172236043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1272031365",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-1272031365",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 1272031365,
    "node_id": "IC_kwDOAm_5kc5L0aiF",
    "user": {
      "login": "novaknole",
      "id": 23176187,
      "node_id": "MDQ6VXNlcjIzMTc2MTg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/23176187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/novaknole",
      "html_url": "https://github.com/novaknole",
      "followers_url": "https://api.github.com/users/novaknole/followers",
      "following_url": "https://api.github.com/users/novaknole/following{/other_user}",
      "gists_url": "https://api.github.com/users/novaknole/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/novaknole/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/novaknole/subscriptions",
      "organizations_url": "https://api.github.com/users/novaknole/orgs",
      "repos_url": "https://api.github.com/users/novaknole/repos",
      "events_url": "https://api.github.com/users/novaknole/events{/privacy}",
      "received_events_url": "https://api.github.com/users/novaknole/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-07T19:45:36Z",
    "updated_at": "2022-10-07T19:45:36Z",
    "author_association": "NONE",
    "body": "Hi all.\r\n\r\nAny news on this ? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1272031365/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1285986476",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-1285986476",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 1285986476,
    "node_id": "IC_kwDOAm_5kc5Mppis",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-20T18:42:50Z",
    "updated_at": "2022-10-20T18:42:50Z",
    "author_association": "MEMBER",
    "body": "Not yet, other that we do consider this pretty important so it's on our roadmap, along with other high-impact features. It's waiting for its turn.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1285986476/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1313898491",
    "html_url": "https://github.com/ethereum/solidity/issues/10381#issuecomment-1313898491",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10381",
    "id": 1313898491,
    "node_id": "IC_kwDOAm_5kc5OUH_7",
    "user": {
      "login": "jefflau",
      "id": 1221141,
      "node_id": "MDQ6VXNlcjEyMjExNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1221141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jefflau",
      "html_url": "https://github.com/jefflau",
      "followers_url": "https://api.github.com/users/jefflau/followers",
      "following_url": "https://api.github.com/users/jefflau/following{/other_user}",
      "gists_url": "https://api.github.com/users/jefflau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jefflau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jefflau/subscriptions",
      "organizations_url": "https://api.github.com/users/jefflau/orgs",
      "repos_url": "https://api.github.com/users/jefflau/repos",
      "events_url": "https://api.github.com/users/jefflau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jefflau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-14T15:06:38Z",
    "updated_at": "2022-11-14T15:06:38Z",
    "author_association": "NONE",
    "body": "Hi all. I'm also looking for this feature, would be nice to be able to catch and throw a specific error",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1313898491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
