{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11080",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11080/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11080/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11080/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11080",
  "id": 827451774,
  "node_id": "MDU6SXNzdWU4Mjc0NTE3NzQ=",
  "number": 11080,
  "title": "More optimal stack slot usage during EVM code transform.",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-03-10T09:53:09Z",
  "updated_at": "2022-09-14T14:17:43Z",
  "closed_at": "2022-09-14T14:17:43Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Previous work includes https://github.com/ethereum/solidity/pull/10942 and https://github.com/ethereum/solidity/pull/11070\r\nBelow a record of two incomplete suggestion - I'm not sure either will work out, but maybe it makes sense to document it somewhere:\r\n\r\n--------\r\nCurrently áºƒe assign a fixed position on the stack to every Yul variable in the evm code transform and keep a mapping from variable to its location on the stack.\r\n\r\nHowever, instead, we could *not* keep such a map, but instead keep a vector of variables that mirrors the current layout of the stack. This would allow us to freely swap variables at any time, since we can just swap the entries of this vector as well. Looking up the current position of a variable would mean a linear-time lookup in this vector, but since the size of this vector will inherently not exceed a size of around 16, this won't be an issue.\r\n\r\nOn function entry this vector would contain a special symbol for the return label and the function arguments.\r\n\r\n1. Variables that are still live after a use, can be dup'ed as usual.\r\n2. Variables that are used for the last time can be swapped up and consumed. Note: the process of swapping them up is non-trivial and needs to be properly thought through. Maybe it'd need stack rotation opcodes to be efficient. We can't really swap the needed variables up, but would need to swap the ones currently in the way *down* (where to optimally?)... and doing so might give us the needed variables in a wrong permutation, which would mean additional swapping... Also how do we deal with control flow splits and joins? So at the very least there is some details to iron out here.\r\n3. Return variables are just appended to the stack/vector as any other variable, but at the last assignment to them, they are swapped to their final position. Subsequent reads from them will use dup's.\r\n\r\n---------\r\nSo while I think there is something to this idea, especially due to the complications of 2, I'm not sure it will work out.\r\n\r\nAn alternative approach would be to use full data-flow analysis on yul functions, i.e. start from all \"data sinks\" of a function (storage writes, memory writes, return variables) and build up a dependency graph from them to the function arguments and then decide how to lay out the stack (and statements in general) optimally by analyzing this graph. Storage and memory writes and reads could be modelled \"opaquely\" in this graph as to assure correct order (e.g. any storage write invalidates all storage, any read depends on the entire storage).",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11080/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11080/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/859133034",
    "html_url": "https://github.com/ethereum/solidity/issues/11080#issuecomment-859133034",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11080",
    "id": 859133034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTEzMzAzNA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-10T22:46:27Z",
    "updated_at": "2021-06-10T22:46:27Z",
    "author_association": "MEMBER",
    "body": "Ah nice, we actually have an issue for this. #11493 tries to do what the last paragraph hinted at.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/859133034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1246834479",
    "html_url": "https://github.com/ethereum/solidity/issues/11080#issuecomment-1246834479",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11080",
    "id": 1246834479,
    "node_id": "IC_kwDOAm_5kc5KUS8v",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-14T14:17:43Z",
    "updated_at": "2022-09-14T14:17:43Z",
    "author_association": "MEMBER",
    "body": "This is pretty much done - not that the new optimized code transform is optimal yet, but it's there and works.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1246834479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
