{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10480/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10480/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10480/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10480",
  "id": 755548677,
  "node_id": "MDU6SXNzdWU3NTU1NDg2Nzc=",
  "number": 10480,
  "title": "Wrong evaluation order of arguments to parent constructors",
  "user": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 467898404,
      "node_id": "MDU6TGFiZWw0Njc4OTg0MDQ=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/breaking%20change%20:warning:",
      "name": "breaking change :warning:",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438157609,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjpKQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20impact",
      "name": "low impact",
      "color": "5d71ff",
      "default": false,
      "description": "Changes are not very noticeable or potential benefits are limited."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2020-12-02T19:25:04Z",
  "updated_at": "2022-09-26T21:10:22Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThe arguments to parent constructors are evaluated before all parent constructors.\r\n\r\nThis is a problem when those arguments are (non-pure) function calls, because the function is evaluated before its defining contract has been initialized.\r\n\r\n## Steps to Reproduce\r\n\r\n```solidity\r\npragma solidity 0.7.5;\r\n\r\ncontract Foo {\r\n    event FooConstructor();\r\n    event FooGetValue();\r\n    \r\n    uint value;\r\n    \r\n    constructor (uint _value) {\r\n        emit FooConstructor();\r\n        value = _value;\r\n    }\r\n    \r\n    function getValue() public returns (uint) {\r\n        emit FooGetValue();\r\n        return value;\r\n    }\r\n}\r\n\r\ncontract Bar {\r\n    event BarConstructor(uint value);\r\n    \r\n    constructor (uint value) {\r\n        emit BarConstructor(value);\r\n    }\r\n}\r\n\r\ncontract Child is Foo, Bar {\r\n    constructor () Foo(5) Bar(Foo.getValue()) {\r\n    }\r\n}\r\n```\r\n\r\nDeploying `Child` currently emits the following sequence of events:\r\n\r\n1. `FooGetValue()`\r\n2. `FooConstructor()`\r\n3. <code>BarConstructor(<b>value: 0</b>)</code>\r\n\r\nNote: The same thing happens if you add a constraint on linearization such as `Bar is Foo`.\r\n\r\n### Expected Behavior\r\n\r\nDeploying `Child` should emit the following:\r\n\r\n1. `FooConstructor()`\r\n2. `FooGetValue()`\r\n3. <code>BarConstructor(<b>value: 5</b>)</code>\r\n\r\nThat is, `Foo` is first initialized by calling its constructor, only then `Foo.getValue()` is evaluated, and its value can then be used as argument to `Bar`'s constructor.\r\n\r\n### Specification\r\n\r\nIn general, I would expect the following to happen during contract construction:\r\n\r\nGiven the linearization of a contract's inheritance `C_0`, ..., `C_n` (from base to most derived), and the argument expressions for each constructor `e_i1`, ..., `e_im` (`m` different for every `C_i`)\r\n\r\n- For each `C_i` = `C_0`, ..., `C_n` in order\r\n  - Evaluate all of `e_i1`, ..., `e_im` (I believe this order is not specified, as for function calls in general)\r\n  - Evaluate the constructor `C_i(v_i1, ..., v_im)` (where `v_ik` are the results of the previous step)\r\n\r\nEvery non-pure contract function call in the expression `e_ik` must be of a function defined in one of `C_0`, ..., `C_(i-1)`, that is only contracts that have been initialized at the point it is evaluated. (Note: this check can be relaxed somewhat but I decided to keep the simpler version.)\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10480/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10480/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738110420",
    "html_url": "https://github.com/ethereum/solidity/issues/10480#issuecomment-738110420",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
    "id": 738110420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODExMDQyMA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-03T16:13:32Z",
    "updated_at": "2020-12-03T16:13:48Z",
    "author_association": "MEMBER",
    "body": "We had a discussion on Gitter today about that, and I personally think that the current rule makes sense and is actually quite simple. Given the linearized hierarchy:\r\n1) Evaluate all base call arguments in the order (most derived) -> (most base)\r\n2) Construct all contracts (most base) -> (most derived)\r\n\r\nThis still accepts the possibility that you mentioned, of accessing a contract that hasn't been fully constructed yet. However, all state variables are initialized as 0 before the rules 1) and 2) above. Also, this still wouldn't prevent a contract depending on itself to be constructed:\r\n\r\n```\r\ncontract Foo {\r\n    event FooConstructor();\r\n    event FooGetValue();\r\n    \r\n    uint value;\r\n    \r\n    constructor (uint _value) {\r\n        emit FooConstructor();\r\n        value = _value;\r\n    }\r\n    \r\n    function getValue() public returns (uint) {\r\n        emit FooGetValue();\r\n        return value;\r\n    }\r\n}\r\n\r\ncontract Bar is Foo {\r\n    event BarConstructor(uint value);\r\n    uint valueBar;\r\n\r\n    constructor (uint value) Foo(value + getValue()) {\r\n        emit BarConstructor(value);\r\n    }\r\n\r\n    function g() internal view returns (uint) {\r\n        return valueBar;\r\n    }\r\n}\r\n\r\ncontract Child is Bar {\r\n    constructor () Bar(Bar.g()) {\r\n    }\r\n}\r\n```\r\nHere you need to evaluate `Foo(value + getValue())` before finishing constructing `Foo`, which then depends on already having visited `Bar(Bar.g())`.\r\n\r\nSo in my opinion the order is correct.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738110420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738494216",
    "html_url": "https://github.com/ethereum/solidity/issues/10480#issuecomment-738494216",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
    "id": 738494216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODQ5NDIxNg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-04T01:31:09Z",
    "updated_at": "2020-12-04T01:31:09Z",
    "author_association": "CONTRIBUTOR",
    "body": ">However, all state variables are initialized as 0 before the rules 1) and 2) above\r\n\r\nSure, we're not talking about uninitialized memory like on a regular computer program. Of course that would be a more serious issue. What I'm pointing out is an issue of language semantics.\r\n\r\nA contract assigns a state variable in the constructor then exposes that state variable through a getter function: would anyone expect the getter to ever return anything other than the value assigned in the constructor? I don't think so. The intuition is that the constructor runs before anything else does. And it goes beyond reading uninitialized values, constructors can establish invariants that are assumed to hold for the execution of other functions in the contract. This evaluation order is violating that assumption, which is why I see this as a pretty serious issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738494216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738497777",
    "html_url": "https://github.com/ethereum/solidity/issues/10480#issuecomment-738497777",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
    "id": 738497777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODQ5Nzc3Nw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-04T01:39:52Z",
    "updated_at": "2020-12-04T01:39:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "\r\n> Here you need to evaluate `Foo(value + getValue())` before finishing constructing `Foo`, which then depends on already having visited `Bar(Bar.g())`.\r\n\r\nI don't think this code should be allowed. It doesn't make sense to call a function if its defining context hasn't been initialized.\r\n\r\nHere's a similar example in JavaScript, which is disallowed:\r\n\r\n```js\r\nclass A {\r\n  constructor(value) {\r\n    this.value = value;\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n}\r\n\r\nclass B extends A {\r\n  constructor() {\r\n    super(this.getValue()); // ReferenceError: Must call super constructor\r\n                            // in derived class before accessing 'this'\r\n  }\r\n}\r\n\r\nnew B();\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738497777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738653448",
    "html_url": "https://github.com/ethereum/solidity/issues/10480#issuecomment-738653448",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
    "id": 738653448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODY1MzQ0OA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-04T08:50:17Z",
    "updated_at": "2020-12-04T08:50:17Z",
    "author_association": "MEMBER",
    "body": "> I don't think this code should be allowed. It doesn't make sense to call a function if its defining context hasn't been initialized.\r\n\r\nOk, I wasn't sure if that's what you were suggesting. I can agree with that!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738653448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738685949",
    "html_url": "https://github.com/ethereum/solidity/issues/10480#issuecomment-738685949",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
    "id": 738685949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODY4NTk0OQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-04T09:49:39Z",
    "updated_at": "2020-12-04T09:49:39Z",
    "author_association": "MEMBER",
    "body": "Funnily enough, that exact thing just bit me in https://github.com/ethereum/solidity/pull/10389",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/738685949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/739871628",
    "html_url": "https://github.com/ethereum/solidity/issues/10480#issuecomment-739871628",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
    "id": 739871628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTg3MTYyOA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-07T11:55:02Z",
    "updated_at": "2020-12-07T11:55:02Z",
    "author_association": "MEMBER",
    "body": "@frangio can you please edit the description and add a summary of the desired behaviour?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/739871628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/741872433",
    "html_url": "https://github.com/ethereum/solidity/issues/10480#issuecomment-741872433",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
    "id": 741872433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MTg3MjQzMw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-09T16:06:06Z",
    "updated_at": "2020-12-09T16:06:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chriseth I reorganized the issue description and added a specification of the desired behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/741872433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/770867579",
    "html_url": "https://github.com/ethereum/solidity/issues/10480#issuecomment-770867579",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
    "id": 770867579,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDg2NzU3OQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-01T13:45:22Z",
    "updated_at": "2021-02-01T13:45:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "I believe this issue is missing the `bug` label.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/770867579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/770883737",
    "html_url": "https://github.com/ethereum/solidity/issues/10480#issuecomment-770883737",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10480",
    "id": 770883737,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDg4MzczNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-01T14:09:03Z",
    "updated_at": "2021-02-01T14:09:03Z",
    "author_association": "MEMBER",
    "body": "It's not a bug, it was a design choice - maybe a bad one :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/770883737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
