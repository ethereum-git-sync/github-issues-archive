{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/6749",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/6749/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/6749/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/6749/events",
  "html_url": "https://github.com/ethereum/solidity/issues/6749",
  "id": 443770351,
  "node_id": "MDU6SXNzdWU0NDM3NzAzNTE=",
  "number": 6749,
  "title": "[RFC] Scope of Abiencoderv2 fuzzing",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1018738457,
      "node_id": "MDU6TGFiZWwxMDE4NzM4NDU3",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/testing%20:hammer:",
      "name": "testing :hammer:",
      "color": "ffc6db",
      "default": false,
      "description": ""
    },
    {
      "id": 4699440809,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvGqQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/closed%20due%20inactivity",
      "name": "closed due inactivity",
      "color": "91535E",
      "default": false,
      "description": "The issue/PR was automatically closed due to inactivity."
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2019-05-14T08:11:11Z",
  "updated_at": "2023-02-02T12:05:07Z",
  "closed_at": "2023-02-02T12:05:07Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nConsider the following test program\r\n\r\n```\r\ncontract C {\r\n  struct S { uint16 u; int8 v; }\r\n  bool[] x;\r\n  uint16 y;\r\n  S s;\r\n  function f() returns (bool) {\r\n    uint w = 3482374;\r\n    x.length = 3;\r\n    x[0] = true;\r\n    x[1] = false;\r\n    x[2] = true;\r\n    y = 8;\r\n    s.u = 7;\r\n    s.v = -3;\r\n    uint16[2] memory e;\r\n    e[0] = 7;\r\n    e[1] = 20;\r\n    // Some of the arguments are read from the stack / from memory,\r\n    // some from storage.\r\n    (uint a1, uint16 b1, S memory c1, bool[] memory d1, uint16[2] memory e1) = this.g(w, y, s, x, e);\r\n    if (a1 != w) return false;\r\n    if (b1 != y) return false;\r\n    if (c1.u != s.u) return false;\r\n    if (c1.v != s.v) return false;\r\n    if (d1.length != x.length) return false;\r\n    if (d1[0] != x[0]) return false;\r\n    if (d1[1] != x[1]) return false;\r\n    if (d1[2] != x[2]) return false;\r\n    if (e1[0] != e[0]) return false;\r\n    if (e1[1] != e[1]) return false;\r\n    return true;    \r\n  }\r\n  // TODO: We should also mix memory and calldata here.\r\n  function g(uint a, uint16 b, S memory c, bool[] memory d, uint16[2] memory e) returns (uint, uint16, S memory, bool[] memory, uint16[2] memory) {\r\n    return (a, b, c, d, e);\r\n  }\r\n}\r\n```\r\n\r\nFor the initial fuzzing prototype, I would like to seek feedback on the scope of fuzzing:\r\n\r\nQ1. What types (static and dynamic) are permitted?\r\nStatic types\r\n  - [ ] signed and unsigned integers\r\n  - [ ] boolean\r\n~~- [ ] fixed point numbers~~\r\n  - [ ] address and address payable types\r\n  - [ ] fixed size bytes\r\n  - [ ] Statically typed fixed-size arrays\r\n  - [ ] Statically typed but dynamically-sized arrays\r\n\r\nDynamic types\r\n  - [ ] structs\r\n  - [ ] enums\r\n  - [ ] Dynamically typed fixed-size arrays\r\n  - [ ] Dynamically typed and sized arrays\r\n  - [ ] Arrays of structs/enums\r\n\r\n\r\n~~Mappings~~\r\n~~- [ ] key type static value type dynamic~~\r\n~~- [ ] key type static value type static~~\r\n~~- [ ] key type dynamic value type dynamic~~\r\n~~- [ ] key type dynamic value type static~~\r\n\r\nQ2. What storage locations are permitted?\r\n  - [ ] memory\r\n  - [ ] storage\r\n  - [ ] calldata (quick question: is calldata an explicit type?)\r\n\r\nP.S. I am using [this](https://solidity.readthedocs.io/en/v0.5.8/types.html) as a reference for Solidity types.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/6749/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/6749/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492174621",
    "html_url": "https://github.com/ethereum/solidity/issues/6749#issuecomment-492174621",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6749",
    "id": 492174621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjE3NDYyMQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T10:06:53Z",
    "updated_at": "2019-05-14T10:06:53Z",
    "author_association": "MEMBER",
    "body": "Fixed point numbers should be ignored.\r\n\r\nIntegers have different bit widths (all multiples of 8 between 8 and 256).\r\n\r\nI don't think you should differentiate between static and dynamic that much. Arrays come in two flavours:\r\n\r\n`<any type>[]` (dynamically-sized array)\r\n`<any type>[k]` (statically-sized array)\r\n\r\nHere, `<any type>` is really anything including arrays, structs, elementary types, ...\r\n\r\nSame is true for structs, a struct member can be any other type. The only restriction is that you cannot use structs that contain themselves (not even via other structs). Another way to explain this is that if you expand the struct meaning that you name the member types directly and also recursively expand members if they are structs, the expansion has to be finite.\r\n\r\nFor mappings, only elementary types are supported as keys. This includes `string` and `bytes`, which are dynamically-sized arrays, but not other arrays. The value type can be anything including mappings, arrays, structs, ...\r\n\r\nThe storage location always applies to a full variable, i.e. you cannot have memory arrays that hold storage arrays or vice-versa. If a mapping occurs anywhere in the type, the whole variable has to be a storage variable and it can only be used in calls to libraries. So perhaps better to omit mappings for not.\r\n\r\nCalldata is a storage location that is only relevant for the called function. To the calling function, these types appear as memory types.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492174621/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492192914",
    "html_url": "https://github.com/ethereum/solidity/issues/6749#issuecomment-492192914",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6749",
    "id": 492192914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjE5MjkxNA==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T11:09:02Z",
    "updated_at": "2019-05-14T12:29:28Z",
    "author_association": "MEMBER",
    "body": "@chriseth some more questions about scope:\r\n\r\n1. Do we limit the RHS of assignment statements (code above) to literals? Or does it make sense to introduce solidity expressions?\r\n\r\n2. Can we limit all variable declarations to inside the scope of `f()` or should contract-wide declarations exist?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492192914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492225687",
    "html_url": "https://github.com/ethereum/solidity/issues/6749#issuecomment-492225687",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6749",
    "id": 492225687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjIyNTY4Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T12:56:20Z",
    "updated_at": "2019-05-14T12:56:20Z",
    "author_association": "MEMBER",
    "body": "Literals are fine, but of course you have to somehow \"descend\" into complex expressions.\r\n\r\nContract-wide variables are stored in storage, so we at least need some.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492225687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492228355",
    "html_url": "https://github.com/ethereum/solidity/issues/6749#issuecomment-492228355",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6749",
    "id": 492228355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjIyODM1NQ==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T13:03:44Z",
    "updated_at": "2019-05-14T13:05:21Z",
    "author_association": "MEMBER",
    "body": "> Literals are fine, but of course you have to somehow \"descend\" into complex expressions.\r\n\r\nI'm not sure I understood this point. What do you mean by descending into complex expressions? Do you mean one may have to descend into \"A\" to initalize its members from \"B\" in the code snippet below? \r\n\r\nAll leaf nodes are still literals, right? \r\n\r\nAlso, while assigning literal values to typed variables are casts acceptable? (e.g., bool x = bool(-678))\r\n\r\n```\r\nStruct A {\r\n  int8 a;\r\n  bool b;\r\n};\r\n\r\nStruct B {\r\n  A c;\r\n};\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492228355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492230298",
    "html_url": "https://github.com/ethereum/solidity/issues/6749#issuecomment-492230298",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6749",
    "id": 492230298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjIzMDI5OA==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T13:09:13Z",
    "updated_at": "2019-05-14T13:09:13Z",
    "author_association": "MEMBER",
    "body": "Just noticed #6754 . Do we add a contract constructor function to the scope of abi fuzzing as well?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492230298/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492233089",
    "html_url": "https://github.com/ethereum/solidity/issues/6749#issuecomment-492233089",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6749",
    "id": 492233089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjIzMzA4OQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T13:17:06Z",
    "updated_at": "2019-05-14T13:17:06Z",
    "author_association": "MEMBER",
    "body": "Might be good to add constructors - they are pretty much untested so far (they should behave exactly the same, but there were multiple complaints recently, so I'm not so sure anymore).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492233089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492236537",
    "html_url": "https://github.com/ethereum/solidity/issues/6749#issuecomment-492236537",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6749",
    "id": 492236537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MjIzNjUzNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-14T13:26:27Z",
    "updated_at": "2019-05-14T13:26:27Z",
    "author_association": "MEMBER",
    "body": "Yes, all leaf nodes can be initialized through literals, but you might have to construct several levels of arrays and structs to get to the leafs.\r\n\r\nYou cannot cast integers to bools. It probably makes sense to generate \"typed literals\". Remember that we do not want to test the construction of these values, that's also why we do not need expressions on the right hand sides.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/492236537/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1413631431",
    "html_url": "https://github.com/ethereum/solidity/issues/6749#issuecomment-1413631431",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6749",
    "id": 1413631431,
    "node_id": "IC_kwDOAm_5kc5UQk3H",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-02-02T12:05:05Z",
    "updated_at": "2023-02-02T12:05:05Z",
    "author_association": "NONE",
    "body": "Hi everyone! This issue has been closed due to inactivity.\nIf you think this issue is still relevant in the latest Solidity version and you have something to [contribute](https://docs.soliditylang.org/en/latest/contributing.html), feel free to reopen.\nHowever, unless the issue is a concrete proposal that can be implemented, we recommend starting a language discussion on the [forum](https://forum.soliditylang.org) instead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1413631431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
