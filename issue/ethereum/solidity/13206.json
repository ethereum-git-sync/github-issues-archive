{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13206",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13206/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13206/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13206/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13206",
  "id": 1283944657,
  "node_id": "I_kwDOAm_5kc5Mh3DR",
  "number": 13206,
  "title": "Replace runtime checks with compile-time checks for div and mod operations on constant denominator",
  "user": {
    "login": "ZumZoom",
    "id": 735355,
    "node_id": "MDQ6VXNlcjczNTM1NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/735355?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZumZoom",
    "html_url": "https://github.com/ZumZoom",
    "followers_url": "https://api.github.com/users/ZumZoom/followers",
    "following_url": "https://api.github.com/users/ZumZoom/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZumZoom/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZumZoom/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZumZoom/subscriptions",
    "organizations_url": "https://api.github.com/users/ZumZoom/orgs",
    "repos_url": "https://api.github.com/users/ZumZoom/repos",
    "events_url": "https://api.github.com/users/ZumZoom/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZumZoom/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-06-24T16:27:13Z",
  "updated_at": "2022-08-17T13:48:46Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "When doing division and modulo operation with constant or immutable denominator it is possible to only do compile-time denominator check and skip runtime checks.\r\n\r\nConsider following contracts:\r\n\r\n```solidity\r\npragma solidity 0.8.15;\r\n\r\nuint256 constant _MODULE = 17;\r\n\r\ncontract C1 {\r\n    function f(uint256 a) external pure returns(uint256) {\r\n        return a % _MODULE;\r\n    }\r\n}\r\n\r\ncontract C2 {\r\n    function f(uint256 a) external pure returns(uint256) {\r\n        unchecked {\r\n            return a % _MODULE;\r\n        }\r\n    }\r\n}\r\n\r\ncontract C3 {\r\n    function f(uint256 a) external pure returns(uint256) {\r\n        return a / _MODULE;\r\n    }\r\n}\r\n\r\ncontract C4 {\r\n    function f(uint256 a) external pure returns(uint256) {\r\n        unchecked {\r\n            return a / _MODULE;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nEven though at compile-time it is known that there is no case when division by zero will happen, generated code for checked case is more complicated than for unchecked case.\r\n\r\nCorresponding gas costs of each function:\r\n\r\n```\r\nC1.f: 317\r\nC2.f: 246\r\nC3.f: 317\r\nC4.f: 246\r\n```\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13206/reactions",
    "total_count": 6,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13206/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1173861239",
    "html_url": "https://github.com/ethereum/solidity/issues/13206#issuecomment-1173861239",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13206",
    "id": 1173861239,
    "node_id": "IC_kwDOAm_5kc5F97N3",
    "user": {
      "login": "timweri",
      "id": 9196362,
      "node_id": "MDQ6VXNlcjkxOTYzNjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9196362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timweri",
      "html_url": "https://github.com/timweri",
      "followers_url": "https://api.github.com/users/timweri/followers",
      "following_url": "https://api.github.com/users/timweri/following{/other_user}",
      "gists_url": "https://api.github.com/users/timweri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timweri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timweri/subscriptions",
      "organizations_url": "https://api.github.com/users/timweri/orgs",
      "repos_url": "https://api.github.com/users/timweri/repos",
      "events_url": "https://api.github.com/users/timweri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timweri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-04T14:05:14Z",
    "updated_at": "2022-07-04T14:05:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi. I'd like to attempt implementing this. I'm still in the process of tracing how the optimizer is implemented.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1173861239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1174873665",
    "html_url": "https://github.com/ethereum/solidity/issues/13206#issuecomment-1174873665",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13206",
    "id": 1174873665,
    "node_id": "IC_kwDOAm_5kc5GByZB",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-05T10:03:56Z",
    "updated_at": "2022-07-05T10:03:56Z",
    "author_association": "MEMBER",
    "body": "@timweri I wanted to give you some hints but after looking into it I'm not sure if there's actually anything to do here. And if there is, I'd rate this as medium difficulty because jumping into the optimizer is definitely much more effort than the trivial tasks we usually rate as easy.\r\n\r\n@ZumZoom Have you tried the new IR-based pipeline (i.e. the `--via-ir` option)? It seems that the Yul optimizer can deal with this case just fine. See my example below. There's probably not much point trying to do it for the legacy codegen and it's likely much harder there (that's why Yul optimizer was introduced in the first place).\r\n\r\n### Example\r\nLet's take parts of your example and compare the compiler output using both pipelines.\r\n\r\n`checked.sol`:\r\n```solidity\r\nuint256 constant _MODULE = 17;\r\n\r\ncontract C {\r\n    function f(uint256 a) external pure returns(uint256) {\r\n        return a / _MODULE;\r\n    }\r\n}\r\n```\r\n\r\n`unchecked.sol`:\r\n```solidity\r\nuint256 constant _MODULE = 17;\r\n\r\ncontract C {\r\n    function f(uint256 a) external pure returns(uint256) {\r\n        unchecked {\r\n            return a / _MODULE;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### IR pipeline\r\n```bash\r\ndiff --unified \\\r\n    <(solc checked.sol --optimize --ir-optimized --debug-info none) \\\r\n    <(solc unchecked.sol --optimize --ir-optimized --debug-info none)\r\n```\r\nHere you get code that's pretty much identical. Only slight differences in naming that should not affect bytecode (and cost):\r\n```diff\r\n@@ -1,18 +1,18 @@\r\n Optimized IR:\r\n-/// @use-src 0:\"checked.sol\"\r\n-object \"C_16\" {\r\n+/// @use-src 0:\"unchecked.sol\"\r\n+object \"C_17\" {\r\n     code {\r\n         {\r\n             let _1 := memoryguard(0x80)\r\n             mstore(64, _1)\r\n             if callvalue() { revert(0, 0) }\r\n-            let _2 := datasize(\"C_16_deployed\")\r\n-            codecopy(_1, dataoffset(\"C_16_deployed\"), _2)\r\n+            let _2 := datasize(\"C_17_deployed\")\r\n+            codecopy(_1, dataoffset(\"C_17_deployed\"), _2)\r\n             return(_1, _2)\r\n         }\r\n     }\r\n-    /// @use-src 0:\"checked.sol\"\r\n-    object \"C_16_deployed\" {\r\n+    /// @use-src 0:\"unchecked.sol\"\r\n+    object \"C_17_deployed\" {\r\n         code {\r\n             {\r\n                 let _1 := memoryguard(0x80)\r\n@@ -30,7 +30,7 @@\r\n                 revert(0, 0)\r\n             }\r\n         }\r\n```\r\n\r\n### Legacy pipeline\r\n```bash\r\ndiff --unified \\\r\n    <(solc checked.sol --optimize --asm --debug-info none) \\\r\n    <(solc unchecked.sol --optimize --asm --debug-info none)\r\n```\r\n\r\nVia the legacy pipeline the unchecked version is clearly shorter:\r\n```diff\r\n-======= checked.sol:C =======\r\n+======= unchecked.sol:C =======\r\n EVM assembly:\r\n   mstore(0x40, 0x80)\r\n   callvalue\r\n@@ -52,8 +52,11 @@\r\n       tag_6\r\n       jump     // in\r\n     tag_5:\r\n-      tag_7\r\n-      jump     // in\r\n+      0x11\r\n+      swap1\r\n+      div\r\n+      swap1\r\n+      jump\r\n     tag_4:\r\n       mload(0x40)\r\n       swap1\r\n@@ -67,19 +70,6 @@\r\n       sub\r\n       swap1\r\n       return\r\n-    tag_7:\r\n-      0x00\r\n-      tag_11\r\n-      0x11\r\n-      dup4\r\n-      tag_12\r\n-      jump     // in\r\n-    tag_11:\r\n-      swap3\r\n-      swap2\r\n-      pop\r\n-      pop\r\n-      jump     // out\r\n     tag_6:\r\n       0x00\r\n       0x20\r\n@@ -88,40 +78,19 @@\r\n       sub\r\n       slt\r\n       iszero\r\n-      tag_15\r\n+      tag_16\r\n       jumpi\r\n       0x00\r\n       dup1\r\n       revert\r\n-    tag_15:\r\n+    tag_16:\r\n       pop\r\n       calldataload\r\n       swap2\r\n       swap1\r\n       pop\r\n       jump     // out\r\n-    tag_12:\r\n-      0x00\r\n-      dup3\r\n-      tag_18\r\n-      jumpi\r\n-      0x4e487b71\r\n-      0xe0\r\n-      shl\r\n-      0x00\r\n-      mstore\r\n-      0x12\r\n-      0x04\r\n-      mstore\r\n-      0x24\r\n-      0x00\r\n-      revert\r\n-    tag_18:\r\n-      pop\r\n-      div\r\n-      swap1\r\n-      jump     // out\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1174873665/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
