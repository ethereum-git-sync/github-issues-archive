{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/6149",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/6149/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/6149/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/6149/events",
  "html_url": "https://github.com/ethereum/solidity/issues/6149",
  "id": 416386816,
  "node_id": "MDU6SXNzdWU0MTYzODY4MTY=",
  "number": 6149,
  "title": "Global variable msg.sender incorrect during inter-transaction function call",
  "user": {
    "login": "dexterchan",
    "id": 14949993,
    "node_id": "MDQ6VXNlcjE0OTQ5OTkz",
    "avatar_url": "https://avatars.githubusercontent.com/u/14949993?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dexterchan",
    "html_url": "https://github.com/dexterchan",
    "followers_url": "https://api.github.com/users/dexterchan/followers",
    "following_url": "https://api.github.com/users/dexterchan/following{/other_user}",
    "gists_url": "https://api.github.com/users/dexterchan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dexterchan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dexterchan/subscriptions",
    "organizations_url": "https://api.github.com/users/dexterchan/orgs",
    "repos_url": "https://api.github.com/users/dexterchan/repos",
    "events_url": "https://api.github.com/users/dexterchan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dexterchan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-03-02T11:14:21Z",
  "updated_at": "2022-09-05T22:18:07Z",
  "closed_at": "2019-03-02T15:45:16Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!--## Prerequisites\r\n\r\n- First, many thanks for taking part in the community. We really appreciate that.\r\n- We realize there is a lot of information requested here. We ask only that you do your best to provide as much information as possible so we can better help you.\r\n- Support questions are better asked in one of the following locations:\r\n\t- [Solidity chat](https://gitter.im/ethereum/solidity)\r\n\t- [Stack Overflow](https://ethereum.stackexchange.com/)\r\n- Ensure the issue isn't already reported.\r\n- The issue should be reproducible with the latest solidity version; however, this isn't a hard requirement and being reproducible with an older version is sufficient.\r\n-->\r\n\r\n## Description\r\n\r\n<!--Please shortly describe the bug you have found, and what you expect instead.-->\r\nA smart contract having a transaction function A calling transaction function B\r\nSay, A() -> B()\r\nIdeally, global variable msg.sender should be consistent in both A() and B() pointing to same caller address.\r\nIf End user \"Mickey\" call A(), the msg.sender of A() and B() should return address of Mickey.\r\nIn my finding, msg.sender return different result:\r\nA() -> Mickey address\r\nB() -> Smart Contract address of B\r\n\r\nThis issue was happening in both cases:\r\nA(),B() in the same contract\r\nA(),B() in different contract\r\n\r\n## Impact\r\nthis issue impact use case with Solidity 0.5\r\n\r\n- Escrow contract with an Ethereum ERC20 token\r\nwhere transaction function from Escrow contract calling ERC20 transaction function: \r\ntransferfrom, transfer function\r\n\r\n## Environment\r\n\r\n- Compiler version: \r\n0.5.2+commit.1df8f40c.Emscripten.clang\r\n0.5.4+commit.9549d8ff.Emscripten.clang\r\n0.5.4+commit.9549d8ff.Linux.g++ (run from docker)\r\n- Target EVM version (as per compiler settings):\r\n0.5.2+commit.1df8f40c.Emscripten.clang\r\n0.5.4+commit.9549d8ff.Emscripten.clang\r\n0.5.4+commit.9549d8ff.Linux.g++ (run from docker)\r\n- Framework/IDE (e.g. Truffle or Remix):\r\nRemix, web3 1.0.0-beta.35\r\n- EVM execution environment / backend / blockchain client:\r\nRemix, web3 1.0.0-beta.35\r\n- Operating system:\r\nMACOS 10.14.3\r\n\r\n## Steps to Reproduce\r\nWithout loss of generality, I picked single contract case to illustrate the issue.\r\n\r\nSample contract A() , B() in same contract\r\nA function is called freeze()\r\nB function is called frozeCoin()\r\n\r\nfreeze() is calling frozeCoin() in below contract.\r\nIn Remix, it returns:\r\ntransact to TestMyToken.freeze errored: VM error: revert.\r\nrevert\tThe transaction has been reverted to the initial state.\r\nReason provided by the contract: \"owner required\".\tDebug the transaction to get more information. \r\n\r\nIn web3, it returns\r\n\r\nVM Exception while processing transaction: revert owner required\r\n`\r\npragma solidity ^0.5.0;\r\ncontract TestMyToken  {\r\n    \r\n    bool public frozen;\r\n    address public owner;\r\n    constructor() public {\r\n        owner=msg.sender;\r\n        frozen=false;\r\n    }\r\n    function frozeCoin() public {\r\n        require(owner==msg.sender,\"owner required\");\r\n        require(!frozen, \"Coin frozen already\");\r\n        frozen=true;\r\n    }\r\n    function freeze() public {\r\n        require(owner==msg.sender,\"owner required\");\r\n        require(!frozen, \"Coin freeze\");\r\n        //the caller became the contract itself instead of end user account\r\n        this.frozeCoin();\r\n    }\r\n    modifier checkFrozen(){\r\n            require(!frozen,\"Coin is frozen\");\r\n            _;\r\n    }\r\n}\r\n`\r\n\r\n\r\n<!--\r\nPlease provide a *minimal* source code example to trigger the bug you have found.\r\nPlease also mention any command line flags that are necessary for triggering the bug.\r\nProvide as much information as necessary to reproduce the bug.\r\n\r\n```\r\n// Some *minimal* Solidity source code to reproduce the bug.\r\n// ...\r\n```\r\n-->",
  "closed_by": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/6149/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/6149/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/468931715",
    "html_url": "https://github.com/ethereum/solidity/issues/6149#issuecomment-468931715",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6149",
    "id": 468931715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODkzMTcxNQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-02T15:45:16Z",
    "updated_at": "2019-03-02T15:45:16Z",
    "author_association": "MEMBER",
    "body": ">     this.frozeCoin();\r\n\r\nIf you call your other function via `this.` that becomes and external call and the `msg.sender` is the contract.\r\n\r\nJust call `frozeCoin()` without `this.`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/468931715/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/469282317",
    "html_url": "https://github.com/ethereum/solidity/issues/6149#issuecomment-469282317",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6149",
    "id": 469282317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTI4MjMxNw==",
    "user": {
      "login": "dexterchan",
      "id": 14949993,
      "node_id": "MDQ6VXNlcjE0OTQ5OTkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14949993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexterchan",
      "html_url": "https://github.com/dexterchan",
      "followers_url": "https://api.github.com/users/dexterchan/followers",
      "following_url": "https://api.github.com/users/dexterchan/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexterchan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexterchan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexterchan/subscriptions",
      "organizations_url": "https://api.github.com/users/dexterchan/orgs",
      "repos_url": "https://api.github.com/users/dexterchan/repos",
      "events_url": "https://api.github.com/users/dexterchan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexterchan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-04T14:57:33Z",
    "updated_at": "2019-03-04T14:57:33Z",
    "author_association": "NONE",
    "body": "Thanks, axic.... it solved the case of two function in same contract...\r\nwhat if, the two functions are from different contract?\r\n\r\n- MyToken\r\n- TokenInteraction\r\n\r\nIn Remix, using account A, I deployed Mytoken....\r\nCopying the contract address, with same account A, I deploy TokenInteraction...\r\nIf I call \"transfer\" in Mytoken contact to accountB, it is ok...\r\nBut, with TokenInteraction, account A \"transferToken\", we got error:\r\n\r\ntransact to TokenInteraction.transferToken errored: VM error: revert.\r\nrevert\tThe transaction has been reverted to the initial state.\r\nReason provided by the contract: \"owner required\".\r\nClearly, msg.sender in \"transferToken\" gives contract address..... it is not expected......\r\n\r\nThis scenario has issue in escrow ERC20 use case.... using another contract to transfer ERC20 token within ERC20 contract.\r\nWith this issue, in withdraw , ERC20 contract will call \"msg.sender\" and take the contract contract as sender address incorrectly(suppose to be original owner address)\r\nSince, the contract address has zero balance, the transaction threw exception and failed to put remaining token back to original owner. In the step of deposit, the transaction will be incorrect but not throwing exception.\r\nReference:\r\nhttps://programtheblockchain.com/posts/2018/05/30/escrowing-erc20-tokens/\r\n\r\n\r\n``\r\ncontract MyToken is ERC20 {\r\n    bool public frozen;\r\n    address public owner;\r\n    constructor(uint initial) public {\r\n        owner=msg.sender;\r\n        // Initially assign all tokens to the contract's creator.\r\n        _mint(msg.sender, initial);\r\n        frozen=false;\r\n    }\r\n    function transfer(address _to, uint256 _value) public restrictOwner returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    modifier restrictOwner(){\r\n        require(owner==msg.sender,\"owner required\");\r\n            _;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\nimport \"./MyToken.sol\";\r\n\r\ncontract TokenInteraction {\r\n\r\n    address public tokenAddress;\r\n    address public owner;\r\n    constructor(address _tokenAdd) public {\r\n        owner=msg.sender;\r\n        tokenAddress = _tokenAdd;\r\n    }\r\n\r\n    function transferToken(address to) public restrictOwner {\r\n        MyToken myToken = MyToken(tokenAddress);\r\n        myToken.transfer(to, 1);\r\n    }\r\n\r\n    modifier restrictOwner(){\r\n        require(owner==msg.sender,\"owner required\");\r\n            _;\r\n    }\r\n}\r\n``\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/469282317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/469436006",
    "html_url": "https://github.com/ethereum/solidity/issues/6149#issuecomment-469436006",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6149",
    "id": 469436006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTQzNjAwNg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-04T21:51:25Z",
    "updated_at": "2019-03-04T21:51:25Z",
    "author_association": "MEMBER",
    "body": "I think the best way to discuss questions like this is https://ethereum.stackexchange.com or https://gitter.com/ethereum/solidity",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/469436006/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/469543785",
    "html_url": "https://github.com/ethereum/solidity/issues/6149#issuecomment-469543785",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6149",
    "id": 469543785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTU0Mzc4NQ==",
    "user": {
      "login": "dexterchan",
      "id": 14949993,
      "node_id": "MDQ6VXNlcjE0OTQ5OTkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14949993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexterchan",
      "html_url": "https://github.com/dexterchan",
      "followers_url": "https://api.github.com/users/dexterchan/followers",
      "following_url": "https://api.github.com/users/dexterchan/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexterchan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexterchan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexterchan/subscriptions",
      "organizations_url": "https://api.github.com/users/dexterchan/orgs",
      "repos_url": "https://api.github.com/users/dexterchan/repos",
      "events_url": "https://api.github.com/users/dexterchan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexterchan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T05:29:47Z",
    "updated_at": "2019-03-05T05:29:47Z",
    "author_association": "NONE",
    "body": "thank you, let me exchange idea with other experts in this area. May come back to u soon.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/469543785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1237498092",
    "html_url": "https://github.com/ethereum/solidity/issues/6149#issuecomment-1237498092",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6149",
    "id": 1237498092,
    "node_id": "IC_kwDOAm_5kc5Jwrjs",
    "user": {
      "login": "rameshksg",
      "id": 41331798,
      "node_id": "MDQ6VXNlcjQxMzMxNzk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41331798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rameshksg",
      "html_url": "https://github.com/rameshksg",
      "followers_url": "https://api.github.com/users/rameshksg/followers",
      "following_url": "https://api.github.com/users/rameshksg/following{/other_user}",
      "gists_url": "https://api.github.com/users/rameshksg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rameshksg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rameshksg/subscriptions",
      "organizations_url": "https://api.github.com/users/rameshksg/orgs",
      "repos_url": "https://api.github.com/users/rameshksg/repos",
      "events_url": "https://api.github.com/users/rameshksg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rameshksg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-05T22:16:33Z",
    "updated_at": "2022-09-05T22:18:07Z",
    "author_association": "NONE",
    "body": "I am also facing similar issue.\r\n\r\nI have been calling transfer() function of ERC20.sol of Openzeppelin library, from my other solidity contract. The code of the same looks like below:\r\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\nMy call to transfer is failing even though the caller account has sufficient balance. This is because the statement msgSender() ie., msg.sender is returning the other contract's address instead of caller address. Hence my all functionalities are broken.\r\n\r\nPlease someone suggest how to resolve this (as i am not doing much in my code and just calling openzeppelin's ERC20.sol from  my other contract)..???\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1237498092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
