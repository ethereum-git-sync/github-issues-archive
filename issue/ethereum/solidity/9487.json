{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9487",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9487/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9487/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9487/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9487",
  "id": 664324896,
  "node_id": "MDU6SXNzdWU2NjQzMjQ4OTY=",
  "number": 9487,
  "title": "Refactoring SideEffects",
  "user": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "314aff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4438492402,
      "node_id": "LA_kwDOAm_5kc8AAAABCI4E8g",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/nice%20to%20have",
      "name": "nice to have",
      "color": "ffdeb3",
      "default": false,
      "description": "We don’t see a good reason not to have it but won’t go out of our way to implement it."
    },
    {
      "id": 4438780109,
      "node_id": "LA_kwDOAm_5kc8AAAABCJJozQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/refactor",
      "name": "refactor",
      "color": "fcff07",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-07-23T09:24:15Z",
  "updated_at": "2022-09-26T20:26:38Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Refactoring SideEffects\r\n\r\nOne way to refactor SideEffects is the following:\r\n\r\nHave semantic information about whether two YUL-builtins commutes, i.e., `INSTR1` and\r\n`INSTR2` commutes if the two blocks\r\n\r\n    {\r\n       ... := INSTR1(...)\r\n       ... := INSTR2(...)\r\n    }\r\n\r\n    {\r\n       ... := INSTR2(...)\r\n       ... := INSTR1(...)\r\n    }\r\n\r\nare the \"same\", for all inputs.\r\n\r\nWe represent this information as a two dimensional boolean matrix, say, `bool[N][N] C`,\r\nwith `true` representing that it commutes.\r\n\r\n\r\n<a id=\"org1279c8a\"></a>\r\n\r\n## SideEffects\r\n\r\n1.  `movable(instr)`: can be rewritten as `logical_and {C[instr][1], ..., C[instr][N]}`\r\n2.  `invalidatesMemory(instr)`: can be rewritten as `not C[instr][mload]`\r\n3.  `invalidatesStorage(instr)`: can be rewritten as `not C[instr][sload]`\r\n4.  `canBeRemoved` or `sideEffectFree` or `sideEffectFreeIfNoMSize`: TODO: I think the idea\r\n    is that the blockchain state should be the same. A rough way is the following: `INSTR`\r\n    can be removed if it does not affect state, and if it commutes with everything else in\r\n    the code.\r\n\r\n\r\n<a id=\"org8f4e53f\"></a>\r\n\r\n### MovableRelativeTo\r\n\r\nTo check movability of an expression relative to a block, we collect builtins from the\r\nblock and compare if the builtins from the block commutes with the builtins in the\r\nexpression.\r\n\r\nThis is better than the [current implementation](https://github.com/ethereum/solidity/pull/9283) since it can be more fine grained. For\r\nexample, `balance` can be moved over `staticall` (the current implementation treats\r\nbalance and `returndatasize` in the same group, and therefore prevents moving.)\r\n\r\n\r\n<a id=\"orgcd0aefe\"></a>\r\n\r\n## WASM dialect\r\n\r\nAll the ideas should carry forward to WASM. In the current implementation, `otherState`\r\ndoes not make sense for WASM (does it?)\r\n\r\n\r\n<a id=\"org7eb9133\"></a>\r\n\r\n## LoopInvariantCodeMotion\r\n\r\nWe need a second abstraction on if the following blocks are equivalent:\r\n\r\n    {\r\n    ... = INSTR(...)\r\n    }\r\n\r\n    {\r\n    ... = INSTR(...)\r\n    ... = INSTR(...) // same arguments and returns as the first one\r\n    }\r\n\r\nWe could call this as `bool[N] reduction`.\r\n\r\n\r\n<a id=\"orgfa6984f\"></a>\r\n\r\n### Algorithm\r\n\r\nAn expression can be moved out of the loop-body (provided it's arguments are invariant\r\nduring loop execution) if\r\n\r\n1.  the expression can be \"reduced\".\r\n2.  if the expression \"commutes\" with the rest of the body. (or `movableRelativeTo`)\r\n\r\n\r\n<a id=\"org3c1870d\"></a>\r\n\r\n### Proof that LoopInvariantCodeMotion works\r\n\r\nProof: Unroll the loop, put all the expressions that satisfies \"commutativity\" to the top.\r\n\r\nNow do the repetition reduction. Move those out of the loop block (put them inside an if\r\nstatement with same condition as for-loop-block if necessary, e.g. if it writes to memory)\r\n\r\nNow roll back the loop.\r\n\r\n\r\n<a id=\"orge5951dd\"></a>\r\n\r\n### Improvements in staticall v/s balance etc.\r\n\r\n    for {let i := 10} isZero(i) {i := sub(i, 1)}\r\n    {\r\n    \tstaticall(1, 1, 0, 10, 0, 10)\r\n    \tlet bal := selfbalance() // this can be moved with the rules, but not the old rules.\r\n    }\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9487/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9487/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/662922731",
    "html_url": "https://github.com/ethereum/solidity/issues/9487#issuecomment-662922731",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9487",
    "id": 662922731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjkyMjczMQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-23T10:03:57Z",
    "updated_at": "2020-07-23T10:05:31Z",
    "author_association": "MEMBER",
    "body": "I think it does make sense to slightly group the instructions instead of creating a full NxN matrix. I started a spreadsheet here; \r\nhttps://docs.google.com/spreadsheets/d/1usbPvzuWCCqLXWolZ5rAq4UTU5QF7aN4Bnc3N3SI4uU/edit?usp=sharing\r\n\r\nWhat we also have to consider: We will never be able to move something out of a loop that performs any kind of non-idempotent \"write\" operation. It might be useful to know about any two instructions whether they commute or not, but I currently cannot think of a use-case for that. Furthermore, idempotent write operations sometimes commute depending on their arguments (sstores to different slots), so it could get even more complicated.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/662922731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/663128598",
    "html_url": "https://github.com/ethereum/solidity/issues/9487#issuecomment-663128598",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9487",
    "id": 663128598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzEyODU5OA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-23T17:16:31Z",
    "updated_at": "2020-07-23T17:16:31Z",
    "author_association": "MEMBER",
    "body": "> invalidatesMemory(instr): can be rewritten as C[instr][mload]\r\n> invalidatesStorage(instr): can be rewritten as C[instr][sload]\r\n\r\n@hrkrshnn shouldn't this rather be `\\neg C[instr][mload]`?\r\nAs in, it invalidates memory if it does *not* commute with `mload`.\r\nOr did I get anything wrong?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/663128598/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/663129583",
    "html_url": "https://github.com/ethereum/solidity/issues/9487#issuecomment-663129583",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9487",
    "id": 663129583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzEyOTU4Mw==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-23T17:18:31Z",
    "updated_at": "2020-07-23T17:18:31Z",
    "author_association": "MEMBER",
    "body": "@leonardoalt Yes, I'll fix the typo.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/663129583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
