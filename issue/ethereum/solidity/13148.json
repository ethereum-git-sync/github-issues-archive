{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13148/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13148/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13148/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13148",
  "id": 1271968398,
  "node_id": "I_kwDOAm_5kc5L0LKO",
  "number": 13148,
  "title": "Permit disallowing of fallback function call during `address.call`",
  "user": {
    "login": "lukehutch",
    "id": 811305,
    "node_id": "MDQ6VXNlcjgxMTMwNQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lukehutch",
    "html_url": "https://github.com/lukehutch",
    "followers_url": "https://api.github.com/users/lukehutch/followers",
    "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
    "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
    "organizations_url": "https://api.github.com/users/lukehutch/orgs",
    "repos_url": "https://api.github.com/users/lukehutch/repos",
    "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lukehutch/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2022-06-15T09:47:32Z",
  "updated_at": "2022-06-15T11:25:50Z",
  "closed_at": "2022-06-15T11:25:50Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nSolidity's fallback function can give rise to [serious security vulnerabilities](https://media.dedaub.com/phantom-functions-and-the-billion-dollar-no-op-c56f062ae49f), potentially resulting in the loss of enormous amounts of money.\r\n\r\nFurthermore, the rollover to the fallback function may also give rise to unexpected behavior, e.g. if an ERC777 token recipient registers its `ERC777TokensRecipient` interface properly via ERC1820, but the programmer misspells the notification function `tokensReceived` as `toknsReceived`, and the token recipient contract implements a non-reverting fallback function, the ERC777 token contract will think it has successfully sent to the token recipient contract, even though the `tokensReceived` function is not defined in the token recipient contract. This breaks the ERC777 specification.\r\n\r\nThere needs to be a way to specify that `.call` should not roll over to the fallback function, e.g.:\r\n\r\n`addr.call{value: X, enableFallback: false}( ... );`\r\n\r\nArguably `enableFallback` should even be `false` by default, given the magnitude of the possible vulnerabilities exposed by this.\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.8.14\r\n",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13148/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13148/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156257021",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156257021",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156257021,
    "node_id": "IC_kwDOAm_5kc5E6xT9",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T09:54:07Z",
    "updated_at": "2022-06-15T09:54:07Z",
    "author_association": "MEMBER",
    "body": "And how should this flag work in practice?\r\nIn general, you don't know if ``addr`` has a fallback function, resp. with which calldata it will fall back to a fallback function, so I don't see it being possible to do much about this on the call site.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156257021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156259435",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156259435",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156259435,
    "node_id": "IC_kwDOAm_5kc5E6x5r",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T09:56:33Z",
    "updated_at": "2022-06-15T09:58:44Z",
    "author_association": "MEMBER",
    "body": "On the callee side, the fallback function is already discouraged in favour of a ``receive`` function (which will revert on non-empty calldata) since Solidity 0.6.0, unless you actually *want* to handle non-empty calldata.\r\n\r\n(i.e. if https://library.dedaub.com/contracts/Ethereum/C02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2/source was written against solidity 0.6.0+, it would not have a ``fallback`` function, but a ``receive`` function, which would have prevented the issue. Back in <0.6, it *should* have asserted that calldata is empty, but since people did not reliably do that, we introduced the receive function back then)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156259435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156261197",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156261197",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156261197,
    "node_id": "IC_kwDOAm_5kc5E6yVN",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T09:58:18Z",
    "updated_at": "2022-06-15T09:58:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can't the caller verify whether the callee actually implements the required function? I know this can't be done from Solidity per se, but can't it be done somehow in Yul or by the EVM?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156261197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156261715",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156261715",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156261715,
    "node_id": "IC_kwDOAm_5kc5E6ydT",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T09:58:50Z",
    "updated_at": "2022-06-15T09:58:50Z",
    "author_association": "MEMBER",
    "body": "No, it can't :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156261715/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156262307",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156262307",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156262307,
    "node_id": "IC_kwDOAm_5kc5E6ymj",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T09:59:29Z",
    "updated_at": "2022-06-15T09:59:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "This seems like a gaping hole in EVM capability... is there interest in extending the EVM to add ABI introspection?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156262307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156264721",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156264721",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156264721,
    "node_id": "IC_kwDOAm_5kc5E6zMR",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:01:25Z",
    "updated_at": "2022-06-15T10:01:25Z",
    "author_association": "MEMBER",
    "body": "This would require severe changes to the EVM, e.g. actually implementing a function entry point table instead of being entirely agnostic to interfaces and solely relying on signatures stored in calldata. There are EIPs along those lines IIRC.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156264721/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156266094",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156266094",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156266094,
    "node_id": "IC_kwDOAm_5kc5E6zhu",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:02:42Z",
    "updated_at": "2022-06-15T10:02:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Or at least, this could be implemented by the callee, if it is signaled by the caller that the caller does not want the fallback function to ever be called. Then as long as callees are built with a supported version of Solidity, the callee could enforce the caller's fallback preferences. Obviously this still has room for vulnerabilities (anybody could use an older compiler to ignore the caller's wishes), but it would close many loopholes in the majority of cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156266094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156267445",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156267445",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156267445,
    "node_id": "IC_kwDOAm_5kc5E6z21",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:03:58Z",
    "updated_at": "2022-06-15T10:03:58Z",
    "author_association": "MEMBER",
    "body": "But yeah, from the Solidity side, currently, this can only really be addressed at the callee-side, which was done in 0.6.0 with introducing the ``receive`` function as alternative to a full blown ``fallback``.\r\n\r\nThe way the caller signals the callee that it wants the ``receive`` function and not the ``fallback`` function, is to use empty calldata.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156267445/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156268762",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156268762",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156268762,
    "node_id": "IC_kwDOAm_5kc5E60La",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:05:14Z",
    "updated_at": "2022-06-15T10:06:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wouldn't a zero-parameter payable function rollover to `receive` then, because the calldata would be empty?  (I have one of these functions in my code.) That's the same vulnerability, because the wrong function may get called if the function name has a typo or something.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156268762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156270513",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156270513",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156270513,
    "node_id": "IC_kwDOAm_5kc5E60mx",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:06:57Z",
    "updated_at": "2022-06-15T10:06:57Z",
    "author_association": "MEMBER",
    "body": "I.e. these days what *should* happen is:\r\n\r\n- The callee should usually just implement a ``receive`` function, which will only be called with empty calldata. Even if it additionally implements a ``fallback`` function, empty calldata will indicate that the ``receive`` function is desired.\r\n- The caller just uses empty calldata to indicate that it does not want to call a function.\r\n\r\nSo in this sense this is solved by Solidity 0.6.0.\r\n\r\n\r\n\r\n> Wouldn't a zero-parameter payable function rollover to `receive` then, because the calldata would be empty? (I have one of these functions in my code.) That's the same vulnerability, because the wrong function may get called if the function name has a typo or something.\r\n\r\nThe function signature makes up the first four bytes of calldata, so if you attempt to call an actual function, you never have empty calldata.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156270513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156274998",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156274998",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156274998,
    "node_id": "IC_kwDOAm_5kc5E61s2",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:11:02Z",
    "updated_at": "2022-06-15T10:11:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, got it. Thanks for taking the time to explain.\r\n\r\nWell I can already fix this on the callee side, to protect the callee contract from causing problems for other contracts at least, by adding a definition for `fallback` that simply reverts. But it's the caller side I'm worried about. In the URL I provided, the caller has no way to know that their call failed, which creates the security vulnerability. In the ERC777 recipient notification example I gave, Solidity's automatic fallback call actually breaks the ERC777 spec.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156274998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156287417",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156287417",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156287417,
    "node_id": "IC_kwDOAm_5kc5E64u5",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:23:03Z",
    "updated_at": "2022-06-15T10:23:03Z",
    "author_association": "MEMBER",
    "body": "Yes, prior to 0.6.0, the callee's ``fallback`` function was supposed to consider whether it gets calldata or not on its own... so https://library.dedaub.com/contracts/Ethereum/C02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2/source?line=35 should, instead of\r\n```\r\n    function() public payable {\r\n        deposit();\r\n    }\r\n```\r\nhave had\r\n```\r\n    function() public payable {\r\n        require(msg.data.length == 0, \"I only want to receive ether, but I got non-empty calldata!\");\r\n        deposit();\r\n    }\r\n```\r\n\r\nBut since this is missing in cases like this, in 0.6.0 we split this on the language level into ``receive()`` and ``fallback()``, which makes the distinction clearer (if you don't define a ``fallback()``, but only a ``receive()``, any calls to unknown functions will automatically revert).\r\n\r\nBut there's nothing that can be done by Solidity about existing, deployed contracts that are, in this sense, buggy :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156287417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156307564",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156307564",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156307564,
    "node_id": "IC_kwDOAm_5kc5E69ps",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:39:44Z",
    "updated_at": "2022-06-15T10:39:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I read the documentation I could find on `fallback()` and `receive()`, including the 0.6.0 post about this. But I'm still hazy on what happens if these are not defined. So if I don't define `fallback()` or `receive()`, but (for argument's sake) I have a `payable` function of a different name in my contract, then I can only call the contract with functions that are actually defined (because there is no `fallback()`, I can't send ETH directly to the contract address using `.send()` or `.transfer()`, but I can send ETH to the `payable` function that I defined that is not `receive`?\r\n\r\nI'm trying to determine if there is any reason to add this code (or is this exactly what happens if these functions are not defined?).\r\n\r\n```\r\n    fallback() external {\r\n        revert();\r\n    }\r\n\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156307564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156320633",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156320633",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156320633,
    "node_id": "IC_kwDOAm_5kc5E7A15",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T10:54:13Z",
    "updated_at": "2022-06-15T10:54:13Z",
    "author_association": "MEMBER",
    "body": "There's no reason to add this code. If you neither define a ``fallback``, nor a ``receive`` function, then calls to non-existing functions will automatically revert.\r\nEven if you just don't define a ``fallback`` function and only a ``receive`` function, *still* all calls to non-existing will automatically revert (only calls with no calldata, including no function signature, will pass to the ``receive`` function).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156320633/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156343146",
    "html_url": "https://github.com/ethereum/solidity/issues/13148#issuecomment-1156343146",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13148",
    "id": 1156343146,
    "node_id": "IC_kwDOAm_5kc5E7GVq",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T11:17:42Z",
    "updated_at": "2022-06-15T11:18:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, thanks.\r\n\r\nIf there really is no way for the caller to prevent calls with non-empty calldata triggering the fallback function, then you can go ahead and close this issue (although it's a real shame that this is not possible...).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156343146/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
