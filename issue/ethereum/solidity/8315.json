{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/8315/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/8315/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/8315/events",
  "html_url": "https://github.com/ethereum/solidity/issues/8315",
  "id": 564918186,
  "node_id": "MDU6SXNzdWU1NjQ5MTgxODY=",
  "number": 8315,
  "title": "Better ASTVisitors",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438157609,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjpKQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20impact",
      "name": "low impact",
      "color": "5d71ff",
      "default": false,
      "description": "Changes are not very noticeable or potential benefits are limited."
    },
    {
      "id": 4438492402,
      "node_id": "LA_kwDOAm_5kc8AAAABCI4E8g",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/nice%20to%20have",
      "name": "nice to have",
      "color": "ffdeb3",
      "default": false,
      "description": "We don’t see a good reason not to have it but won’t go out of our way to implement it."
    },
    {
      "id": 4438780109,
      "node_id": "LA_kwDOAm_5kc8AAAABCJJozQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/refactor",
      "name": "refactor",
      "color": "fcff07",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2020-02-13T20:00:46Z",
  "updated_at": "2022-09-26T23:08:56Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "- The boolean return value of the visitor functions can apparently be confusing.\r\n- The PostTypeChecker violates the current visitation schema.\r\n- The current visitation schema does not support inline visitations using lambdas.\r\n- It would be nice to avoid the need for having ``libsolidity/ast/AST_accept.h``.\r\n\r\nI think it is possible to build a generic visitation schema for the AST that solves these shortcomings, while still providing reasonable safety mechanisms. The following is a crude basic suggestion for such a schema (we could certainly improve upon it):\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <type_traits>\r\n#include <array>\r\n#include <cstdio>\r\n#include <type_traits>\r\n#include <memory>\r\n#include <optional>\r\n#include <vector>\r\n\r\ntemplate<auto...> struct NodeList {};\r\n\r\ntemplate<typename Type>\r\nstruct Visitable;\r\n\r\nstruct Descend { explicit Descend() {} };\r\nstruct DoNotDescend { explicit DoNotDescend() {} };\r\nstruct ConditionallyDescend\r\n{\r\n\tConditionallyDescend(Descend): descend(true) {}\r\n\tConditionallyDescend(DoNotDescend): descend(false) {}\r\n\tbool descend = false;\r\n};\r\nstruct VisitAfterChildren {};\r\n\r\nnamespace detail {\r\ntemplate<typename T>\r\nstruct isPlainOrSmartPointer: std::is_pointer<T> {};\r\ntemplate<typename T>\r\nstruct isPlainOrSmartPointer<std::unique_ptr<T>>: std::true_type {};\r\ntemplate<typename T>\r\nstruct isPlainOrSmartPointer<std::shared_ptr<T>>: std::true_type {};\r\ntemplate<typename T>\r\nstruct isPlainOrSmartPointer<std::optional<T>>: std::true_type {};\r\ntemplate <typename T, typename = void>\r\nstruct isIterable: std::false_type {};\r\ntemplate <typename T>\r\nstruct isIterable<T, std::void_t<\r\n\tdecltype(std::declval<T>().begin()),\r\n\tdecltype(std::declval<T>().end())\r\n>>: std::true_type {};\r\n \r\ntemplate<typename T, typename = void>\r\nstruct Acceptor\r\n{\r\n\tstatic_assert(\r\n\t\tstd::is_base_of_v<Visitable<std::decay_t<T>>, std::decay_t<T>>,\r\n\t\t\"Visitation not implemented for this type.\"\r\n\t);\r\n\ttemplate<typename Callable>\r\n\tstatic void accept(T& _t, Callable&& _visitor)\r\n\t{\r\n\t\t_t.accept(_visitor);\r\n\t}\r\n};\r\ntemplate<typename T>\r\nstruct Acceptor<T, std::enable_if_t<isPlainOrSmartPointer<T>::value>>\r\n{\r\n\ttemplate<typename PtrType, typename Callable>\r\n\tstatic void accept(PtrType&& _t, Callable&& _visitor)\r\n\t{\r\n\t\tif (_t)\r\n\t\t\tAcceptor<std::remove_reference_t<decltype(*_t)>>::accept(*_t, _visitor);\r\n\t}\r\n};\r\ntemplate<typename T>\r\nstruct Acceptor<T, std::enable_if_t<isIterable<T>::value>>\r\n{\r\n\ttemplate<typename RangeType, typename Callable>\r\n\tstatic void accept(RangeType&& _t, Callable&& _visitor)\r\n\t{\r\n\t\tfor (auto&& elem: _t)\r\n\t\t\tAcceptor<std::remove_reference_t<decltype(elem)>>::accept(elem, _visitor);\r\n\t}\r\n};\r\n\r\n\r\ntemplate<typename T>\r\nstruct SubVisitor;\r\ntemplate<auto... members>\r\nstruct SubVisitor<NodeList<members...>>\r\n{\r\n\ttemplate<typename T, typename Callable>\r\n\tstatic void accept(T& _t, Callable&& _visitor)\r\n\t{\r\n\t\t(Acceptor<std::remove_reference_t<decltype(_t.*members)>>::accept(_t.*members, _visitor), ...);\r\n\t}\r\n};\r\n\r\ntemplate<typename Type, typename = void>\r\nstruct SubNodes { using type = NodeList<>; };\r\ntemplate<typename Type>\r\nstruct SubNodes<Type, std::void_t<typename Type::SubNodes>> { using type = typename Type::SubNodes; };\r\ntemplate<typename Type>\r\nusing subnodes_t = typename SubNodes<Type>::type;\r\n\r\n}\r\n\r\n\r\ntemplate<typename Type>\r\nstruct Visitable\r\n{\r\nprivate:\r\n\ttemplate<typename Callable, typename T>\r\n\tstatic void doAccept(Callable&& _c, T& _t)\r\n\t{\r\n\t\tstatic_assert(std::is_same_v<T, Type> || std::is_same_v<T, Type const>);\r\n\t\tstatic_assert(std::is_invocable_v<Callable, T&> || std::is_invocable_v<Callable, T&, VisitAfterChildren>, \"Missing visitor.\");\r\n\r\n\t\tif (std::is_invocable_v<Callable, T&>) {\r\n\t\t\tusing ResultType = std::invoke_result_t<Callable, T&>;\r\n\t\t\tstatic_assert(\r\n\t\t\t\tstd::is_same_v<ResultType, Descend> ||\r\n\t\t\t\tstd::is_same_v<ResultType, DoNotDescend> ||\r\n\t\t\t\tstd::is_same_v<ResultType, ConditionallyDescend>,\r\n\t\t\t\t\"Invalid visitor return value.\"\r\n\t\t\t);\r\n\t\t\t[[maybe_unused]] auto result = _c(_t);\r\n\t\t\tbool descend = !std::is_same_v<ResultType, DoNotDescend>;\r\n\t\t\tif constexpr(std::is_same_v<ResultType, ConditionallyDescend>)\r\n\t\t\t\tif (!result.descend)\r\n\t\t\t\t\tdescend = false;\r\n\r\n\t\t\tif constexpr(!std::is_same_v<ResultType, DoNotDescend>)\r\n\t\t\t\tif (descend)\r\n\t\t\t\t\tdetail::SubVisitor<detail::subnodes_t<Type>>::accept(_t, _c);\r\n\t\t}\r\n\t\tif constexpr(std::is_invocable_v<Callable, T&, VisitAfterChildren>) {\r\n\t\t\tstatic_assert(\r\n\t\t\t\tstd::is_same_v<std::invoke_result_t<Callable, T&, VisitAfterChildren>, void>,\r\n\t\t\t\t\"Invalid visitor return value.\"\r\n\t\t\t);\r\n\t\t\t_c(_t, VisitAfterChildren{});\r\n\t\t}\r\n\t}\r\npublic:\r\n\ttemplate<typename Callable>\r\n\tvoid accept(Callable&& _c) { doAccept(_c, *static_cast<Type*>(this)); }\r\n\ttemplate<typename Callable>\r\n\tvoid accept(Callable&& _c) const { doAccept(_c, *static_cast<Type const*>(this)); }\r\n};\r\n\r\n\r\n/////// Proof of concept.\r\n\r\nclass SubSubTest: public Visitable<SubSubTest>\r\n{\r\npublic:\r\n\tSubSubTest(int _x): x(_x) {}\r\n\tint x;\r\n};\r\n\r\nclass SubTest: public Visitable<SubTest>\r\n{\r\npublic:\r\n\tSubTest(int _x): x(_x) {\r\n\t\tif (x > 30) m_subTest = std::make_unique<SubSubTest>(_x/2);\r\n\t\telse m_subTestVector.emplace_back(std::make_shared<SubSubTest>(_x*2));\r\n\t}\r\n\tint x;\r\nprivate:\r\n\tstd::unique_ptr<SubSubTest> m_subTest;\r\n\tstd::vector<std::shared_ptr<SubSubTest>> m_subTestVector;\r\npublic:\r\n\tusing SubNodes = NodeList<&SubTest::m_subTest, &SubTest::m_subTestVector>;\r\n};\r\n\r\nclass Test: public Visitable<Test>\r\n{\r\npublic:\r\n\tTest(bool _descend): m_descend(_descend) {}\r\n\tbool m_descend;\r\nprivate:\r\n\tSubTest m_1{42};\r\n\tSubTest m_2{23};\r\npublic:\r\n\tusing SubNodes = NodeList<&Test::m_1, &Test::m_2>;\r\n};\r\n\r\n\r\ntemplate<typename... Visitors>\r\nstruct GenericVisitor: Visitors... { using Visitors::operator()...; };\r\ntemplate <typename... Visitors> GenericVisitor(Visitors...) -> GenericVisitor<Visitors...>;\r\n\r\nint main()\r\n{\r\n\tGenericVisitor visitor{\r\n\t\t[](Test const& x) -> ConditionallyDescend {\r\n\t\t\tstd::cout << \"Test\" << std::endl;\r\n\t\t\tif (x.m_descend)\r\n\t\t\t\treturn Descend{};\r\n\t\t\telse\r\n\t\t\t\treturn DoNotDescend{};\r\n\t\t},\r\n\t\t[](Test const& x, VisitAfterChildren) {\r\n\t\t\tstd::cout << \"Test (endVisit)\" << std::endl;\r\n\t\t},\r\n\t\t[](SubTest const& x) {\r\n\t\t\tstd::cout << \"Sub: \" << x.x << std::endl;\r\n\t\t\treturn Descend{};\r\n\t\t},\r\n\t\t[](SubSubTest const& x) {\r\n\t\t\tstd::cout << \"Subsub: \" << x.x << std::endl;\r\n\t\t\treturn DoNotDescend{};\r\n\t\t}\r\n\t};\r\n\r\n\tTest(false).accept(visitor);\r\n\tTest(true).accept(visitor);\r\n\r\n\treturn EXIT_SUCCESS;\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/8315/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/8315/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/586216388",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-586216388",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 586216388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjIxNjM4OA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-14T11:15:35Z",
    "updated_at": "2020-02-14T11:15:35Z",
    "author_association": "MEMBER",
    "body": "This looks very good! What we should check none of our ast nodes derives from an actual other ast node type (as opposed to an abstract type) - because this would not work in that case, right?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/586216388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/586334917",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-586334917",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 586334917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjMzNDkxNw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-14T15:25:02Z",
    "updated_at": "2020-02-14T15:25:02Z",
    "author_association": "MEMBER",
    "body": "Yep, that would be a problem (although I think a potentially solvable one).\r\nWe also probably need a shared base class to the ``Visitor<NodeType>`` templates with a virtual accept function that the ``Visitor<NodeType>``s override, because otherwise we won't be able to visit a node with a pointer to one of its base classes. And then we unfortunately need to replace the ``Callable`` templates with ``std::function``s, which would introduce overhead... in any case, quite a few details to iron out.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/586334917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/586338936",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-586338936",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 586338936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjMzODkzNg==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-14T15:34:14Z",
    "updated_at": "2020-02-14T15:34:14Z",
    "author_association": "MEMBER",
    "body": "But yeah, the only way around that last part with a virtual base class to the ``Visitor<T>``s and ``std::function``s instead of the templates would probably be to entirely replace inheritance in the AST tree with e.g. ``variant``s similar to the Yul AST - and that would be an extraordinarily huge change that would affect everything everywhere and I'm not even sure it'd be feasible at all, let alone worth the effort.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/586338936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/586393819",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-586393819",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 586393819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjM5MzgxOQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-14T17:42:58Z",
    "updated_at": "2020-02-14T17:42:58Z",
    "author_association": "MEMBER",
    "body": "Actually a ``std::function`` won't even work, so it might actually be that this is a deal-breaker on this proposal and we need to come up with something else, unfortunately.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/586393819/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587054574",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-587054574",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 587054574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzA1NDU3NA==",
    "user": {
      "login": "christianparpart",
      "id": 56763,
      "node_id": "MDQ6VXNlcjU2NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/56763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianparpart",
      "html_url": "https://github.com/christianparpart",
      "followers_url": "https://api.github.com/users/christianparpart/followers",
      "following_url": "https://api.github.com/users/christianparpart/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianparpart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianparpart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianparpart/subscriptions",
      "organizations_url": "https://api.github.com/users/christianparpart/orgs",
      "repos_url": "https://api.github.com/users/christianparpart/repos",
      "events_url": "https://api.github.com/users/christianparpart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianparpart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-17T15:49:14Z",
    "updated_at": "2020-02-17T15:49:14Z",
    "author_association": "MEMBER",
    "body": "> Actually a `std::function` won't even work, so it might actually be that this is a deal-breaker on this proposal and we need to come up with something else, unfortunately.\r\n\r\n@ekpyron actually you can work around that: The Callable type signature just doesn't look as trivial as `std::function<Ret(Args...)>` anymore.\r\n\r\nAt least if I understand your concern correctly, you cannot use std::function<> in constexpr context. With the following, you can work around that (in case that's why you said it's a potential deal breaker):\r\n\r\n```cpp\r\n    template<\r\n        typename Initializer,\r\n        typename std::enable_if_t<\r\n            std::is_invocable_r_v<ReturnType, Initializer, ParamType1, ParamType2 /* ... */>,\r\n            int> = 0\r\n    >\r\n    constexpr auto f(Initializer const& _callable) noexcept\r\n    {\r\n        // do something with _calable.\r\n    }\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587054574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587056485",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-587056485",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 587056485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzA1NjQ4NQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-17T15:53:28Z",
    "updated_at": "2020-02-17T15:53:28Z",
    "author_association": "MEMBER",
    "body": "The problem is rather that we need to be able to visit nodes using pointers to their base classes, so we need to pass through a virtual function one way or another and thereby loose the ability to templatize the callable.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587056485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587058778",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-587058778",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 587058778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzA1ODc3OA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-17T15:58:28Z",
    "updated_at": "2020-02-17T17:15:05Z",
    "author_association": "MEMBER",
    "body": "But (in the meantime) I think one can work around that as well. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587058778/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587059666",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-587059666",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 587059666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzA1OTY2Ng==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-17T16:00:30Z",
    "updated_at": "2020-02-17T16:00:30Z",
    "author_association": "MEMBER",
    "body": "I think there's not that much need for these things to be constexpr actually.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587059666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587487846",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-587487846",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 587487846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzQ4Nzg0Ng==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-18T14:31:08Z",
    "updated_at": "2020-02-18T14:31:08Z",
    "author_association": "MEMBER",
    "body": "How much work would it be to change all the visitors we have to this way?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587487846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/588222578",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-588222578",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 588222578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODIyMjU3OA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-19T13:13:56Z",
    "updated_at": "2020-02-19T13:13:56Z",
    "author_association": "MEMBER",
    "body": "I think we first need to come up with a viable concept that supports visiting by pointers to base classes - that *will* introduce some complications and we might end up with something quite similar to what we have now (we'll probably still need the ``ASTVisitor`` classes and the double-dispatch and could merely somewhat hide it away in the \"public\" visitation interface). Once we have a concept like that, we have to re-evaluate whether we still think it's worth it.\r\n\r\nOnce we'd agree on such a concept, the effort to change the visitors would be reasonable - it would mainly mean to rename the visit functions and change their return values.\r\n\r\nThe \"nicer\" way for the purpose of visiting without the need of introducing virtual functions in some kind of ``VisitiableBase`` class would still probably be to move away from inheritance in the AST and more towards something like the Yul AST - but that would be an extremely huge effort, that probably can't be justified vs. its merit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/588222578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/734471520",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-734471520",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 734471520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDQ3MTUyMA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-26T20:41:28Z",
    "updated_at": "2020-11-26T20:41:28Z",
    "author_association": "MEMBER",
    "body": "Why did this issue died down? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/734471520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/736373002",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-736373002",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 736373002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjM3MzAwMg==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-01T10:07:23Z",
    "updated_at": "2020-12-01T10:07:23Z",
    "author_association": "MEMBER",
    "body": "The main problem is still that we need to be able to visit via pointers to base types - which unfortunately means that we need to pass the visitor using some abstraction again, which prevents most of the benefits of the original concept.\r\nThere *are* ways around this issue, but all that come to my mind are rather complicated and will still involve manually maintaining a full node list in a class like ``ASTVisitor`` (even though derived instances of that class could be auto-generated from generic visitors)...\r\nIf we're still interested in this, I could draft up something like that, but since we probably won't get rid of ``ASTVisitor`` entirely that way, I'm not so sure we want this these days.\r\n\r\nThe ``difficulty: easy`` and ``good first issue`` labels are complete lies, though, so I'll remove them ;-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/736373002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/736508228",
    "html_url": "https://github.com/ethereum/solidity/issues/8315#issuecomment-736508228",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8315",
    "id": 736508228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjUwODIyOA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-01T12:01:15Z",
    "updated_at": "2020-12-01T12:01:15Z",
    "author_association": "MEMBER",
    "body": "ok, sorry. This looked like a pretty straightforward refactor where we just need to agree on some low level details but now I see that there's more to it. Thanks for correcting that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/736508228/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
