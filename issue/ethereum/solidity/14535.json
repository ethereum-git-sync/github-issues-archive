{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14535",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14535/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14535/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14535/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14535",
  "id": 1881874350,
  "node_id": "I_kwDOAm_5kc5wKx-u",
  "number": 14535,
  "title": "Option to harden the Yul optimizer against AST-ID based non-determinism.",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4438488423,
      "node_id": "LA_kwDOAm_5kc8AAAABCI31Zw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have",
      "name": "must have",
      "color": "ffa12a",
      "default": false,
      "description": "Something we consider an essential part of Solidity 1.0."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-09-05T12:25:13Z",
  "updated_at": "2023-09-06T10:13:16Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "**Note: this issue is meant to lay out a solution that will take a good amount of refactoring merely for consideration and may not be what we end up doing.**\r\n\r\nWe keep running into issues like https://github.com/ethereum/solidity/issues/14494 with the Yul optimizer.\r\nThe symptom is differences in bytecode between one compilation of a contract and another compilation with additional, but unrelated source files. In these cases the compiler-generated metadata is identical, which is supposed to guarantee identical compiler output. However, this guarantee is violated.\r\n\r\nThere are potential causes already in IR code generation, this issue means to address causes in the Yul optimizer.\r\n\r\n- All source files supplied to the Compiler are parsed together and in the process assigned unique AST-IDs. Hence, the compiler may assign different AST-IDs in the presence of additional source files.\r\n- Via-IR code generation needs to generate unique Yul identifiers for expressions and statements in Solidity. It currently does so on the basis of the most obvious choice of unique identifiers available, which is the AST ID of the Solidity AST node triggering the generation of the respective Yul identifier. This results in the Yul identifiers to differ if AST IDs differ!\r\n- Due to the last point, the Yul optimizer may never depend on the comparison of Yul identifiers. This is exacerbated due to the fact that ``YulString`` comparison does not coincide with lexicographic string comparison (although even the latter would only result in monotonic comparison if left-padded with zeroes).\r\n\r\nThe following would be an option to evade this issue once and for all, while potentially allowing to increase the optimizer performance in the process (however, the actual expected improvement is hard to estimate and may not be significant):\r\n\r\n- Templatize the Yul AST over the type of Identifiers. Split between a regular Yul AST and an optimizer variant of the Yul AST.\r\n  ```c++\r\n   template<typename NameType>\r\n   struct TIdentifier { std::shared_ptr<DebugData const> debugData; NameType name; };\r\n   using Identifier = TIdentifier<YulString>;\r\n   namespace optimizer { using Identifier = TIdentifer<size_t>; }\r\n   ```\r\n   Note: the template argument will be inherited by all Yul AST nodes.\r\n- Parse Yul as usual into a regular Yul AST.\r\n- At the beginning of optimization translate the regular Yul AST to an optimizer Yul AST by mapping names to a deterministic sequence of indices. Store the association of the indices with original names.\r\n- When generating new identifiers in the optimizer, take care to do so in deterministic order (this is still an unavoidable source of errors in this model), while inheriting the associated original name of the \"source identifier\", if applicable (similarly to the current \"name hint\" mechanism).\r\n- Side-Advantage: during optimization comparison of Yul identifiers is cheap; associative maps can potentially even be replaced by sequential containers/vectors (accounting for the possibility of new identifiers being generated in the process)\r\n- At the end of optimization translate the optimizer Yul AST back to a regular Yul AST while generating unique human-readable names based on the associated original names of the indices (note that due to potentially generating new identifiers, these names need to be disambiguated)\r\n\r\nComplications:\r\n- The Yul dialects identify builtins based on their string-based name and need to be accounted for in the process. They could potentially produce a fixed static const vector of builtin identifiers that is used to map the builtins to specific fixed indices.\r\n- Debugging output between steps would have to involve the translation from optimizer Yul AST to regular Yul AST.\r\n- There is a significant amount of refactoring involved in this and potential sources of errors in the ordering of generating fresh identifiers remains.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14535/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14535/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1706561105",
    "html_url": "https://github.com/ethereum/solidity/issues/14535#issuecomment-1706561105",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14535",
    "id": 1706561105,
    "node_id": "IC_kwDOAm_5kc5luA5R",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-05T12:50:21Z",
    "updated_at": "2023-09-05T12:50:21Z",
    "author_association": "MEMBER",
    "body": "Actually, there is a less-invasive, yet messier, variant of the above:\r\n\r\nWe could leave the Yul AST data structures untouched, but translate all identifiers, excluding builtins, to ``_1, _2, ...`` in the beginning of optimization, while still keeping above mapping to original names for a back-translation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1706561105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
