{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/662",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/662/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/662/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/662/events",
  "html_url": "https://github.com/ethereum/solidity/issues/662",
  "id": 161013900,
  "node_id": "MDU6SXNzdWUxNjEwMTM5MDA=",
  "number": 662,
  "title": "Add default re-entry protection with opt-out keyword.",
  "user": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 21,
  "created_at": "2016-06-18T08:29:53Z",
  "updated_at": "2016-08-11T11:32:00Z",
  "closed_at": "2016-08-11T11:18:58Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "As most are now aware, the EVM is susceptible to reentry attacks if the developer is not very careful to avoid them.  The fundamental problem is that people don't realize that when they call an external contract any amount of code may run before that returns, even when the call is something simple like a `send`.\n\nTo protect against this, Solidity should automatically put re-entry guards around any functions that have an external contract call in them.  The simplest (most naive) re-entry guard would look something like this:\n\n``` solidity\ncontract Foo {\n    bool inBar = false;\n    function bar(someAddress) {\n        if (inBar) throw;\n        inBar = true;\n        someAddress.send();\n        inBar = false;\n    }\n}\n```\n\nThis code could be automatically added to a contract that looked like this:\n\n``` solidity\ncontract Foo {\n    function bar(someAddress) {\n        someAddress.send();\n    }\n}\n```\n\nThe side effect of this of course would be that the function will cost an additional ~10,000 gas (20,000 for the store `true` and -10,000 for the `false`).  For savvy developers who need to allow for reentry or who want to save the 5000 gas and believe they have audited their code a keyword could be added to allow bypassing of this auto-generated code like: `function reenterable bar(someAddress)`.\n\nAlso, this re-entry guard should only be applied to functions that actually make an external call, if they don't then there is no reason for the extra gas cost.\n\nThe primary advantage of something like this is to make code safe from reentry attacks by default, and require users to go read some documentation to figure out how to reduce their gas costs, which would at least ensure they are aware of the issue.  It wall also make auditing code easier since any function that doesn't have `reenterable` on it can be known to be safe against reentry attacks.\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/662/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/662/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226930368",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-226930368",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 226930368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjkzMDM2OA==",
    "user": {
      "login": "pruby",
      "id": 133988,
      "node_id": "MDQ6VXNlcjEzMzk4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/133988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pruby",
      "html_url": "https://github.com/pruby",
      "followers_url": "https://api.github.com/users/pruby/followers",
      "following_url": "https://api.github.com/users/pruby/following{/other_user}",
      "gists_url": "https://api.github.com/users/pruby/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pruby/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pruby/subscriptions",
      "organizations_url": "https://api.github.com/users/pruby/orgs",
      "repos_url": "https://api.github.com/users/pruby/repos",
      "events_url": "https://api.github.com/users/pruby/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pruby/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-18T08:54:53Z",
    "updated_at": "2016-06-18T09:07:41Z",
    "author_association": "NONE",
    "body": "A group of us discussed this in the solidity gitter account - can read about it there. I would strongly support this notion of \"safe by default\", even if it costs a bit by default as well. Those who are confident they have applied operations in a safe order could avoid this cost.\n\nAn example of how to enforce this would be:\n\n```\nPUSH (unique code)\nSLOAD\nPUSH (error address)\nJUMPI\nPUSH (1)\nPUSH (unique code)\nSSTORE\n ... function body ...\nPUSH (0)\nPUSH (unique code)\nSSTORE.\n```\n\nThis would give a total overhead of 20,072 on entry a cost of 6 (EDIT: wrong) when the postamble runs, and a refund of 15,000 when the transaction returns, for a total cost to the sender of 5,078 gas. Switching a storage register between two non-zero values would have lower peak cost, but much higher net cost (10,084 by my count).\n\nEDIT: duplicating entries rather than repeatedly pushing that unique code might reduce bytecode length at the cost of a few extra instructions.\n\nEDIT 2: looks like I misread the docs on this one. Cost of a store looks like it's paid even if you're clearing, an extra 5,000 gas. Better option would be:\n\n```\nPUSH (unique code)\nSLOAD\nPUSH (-1)\nEQ\nPUSH (error address)\nJUMPI\nPUSH (1)\nPUSH (unique code)\nSSTORE\n ... function body ...\nPUSH (-1)\nPUSH (unique code)\nSSTORE.\n```\n\nWith a net cost for most calls as above of 10,084. A slight trap is that this would cost 25,084 on first invocation or require a 20,006 cost fix in the constructor, making gas measurements somewhat unreliable, which may be undesirable.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226930368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226960024",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-226960024",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 226960024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk2MDAyNA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-18T19:15:30Z",
    "updated_at": "2016-06-18T19:15:30Z",
    "author_association": "MEMBER",
    "body": "I think this safeguard is not needed for `someAddress.send(1)`, since it will only use the default gas. It should only be used for when non-default gas is used in external call. So for example `someAddress.bazonk()`. On bytecode-level, the information to make this distinction is lost, but at Solidity-level, external calls are already treated specially[1] and this could be a sensible addition. \n\n[1] `someAddress.bazonk()` will check return value, and cause invalid jump on VM failure (could be caused by OOG, stack-depth, illegal jump etc)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226960024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226960459",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-226960459",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 226960459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk2MDQ1OQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-18T19:24:06Z",
    "updated_at": "2016-06-18T19:24:06Z",
    "author_association": "MEMBER",
    "body": "Talking with @joeykrug about this and he mentioned that there is another class of re-entrant bugs that can occur across functions.  For example, if there are two functions that both check-act-zero some piece of data then you could re-enter into another one.\n\n```\nfunction foo() {\n    if (balance <= 0) return;\n    withdrawBalance(balance);\n    balance = 0;\n}\n\nfunction bar(otherAccount) {\n    if (balance <= 0) return;\n    transferBalance(balance, otherAccount);\n    balance = 0;\n}\n```\n\nUnfortunately, this is harder to protect against without increasing the gas cost of every function in the class because the reentered function may not actually call out, it could be a simple function that only mutates internal state and then returns.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226960459/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226964220",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-226964220",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 226964220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk2NDIyMA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-18T20:52:12Z",
    "updated_at": "2016-06-18T20:52:12Z",
    "author_association": "MEMBER",
    "body": "I think reentrancy protection provides the false impression of safety. This is comparable to mutexes that make you think that it solves concurrency problems until you notice the concept of a deadlock, dependencies between different objects and other things.\n\nHaving said that, I think it should be possible to add this feature using modifiers, modifier areas and inheritance. If those are not enough, I'm fine with making modifications.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226964220/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226987626",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-226987626",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 226987626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk4NzYyNg==",
    "user": {
      "login": "pruby",
      "id": 133988,
      "node_id": "MDQ6VXNlcjEzMzk4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/133988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pruby",
      "html_url": "https://github.com/pruby",
      "followers_url": "https://api.github.com/users/pruby/followers",
      "following_url": "https://api.github.com/users/pruby/following{/other_user}",
      "gists_url": "https://api.github.com/users/pruby/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pruby/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pruby/subscriptions",
      "organizations_url": "https://api.github.com/users/pruby/orgs",
      "repos_url": "https://api.github.com/users/pruby/repos",
      "events_url": "https://api.github.com/users/pruby/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pruby/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T09:22:14Z",
    "updated_at": "2016-06-19T09:22:14Z",
    "author_association": "NONE",
    "body": "True - this wouldn't have stopped the DAO attack, just made it less efficient (they could have transferred the tokens after only one splitDAO call). To be effective, we would need to set a flag that was checked before every non-constant external function call, so that we could never re-enter in to the same contract twice in the call stack. Any function declaring itself re-entrant would be expected to be valid when called in combination with any other function, but non re-entrant ones would not have to be compatible with each other.\n\nchriseth: While you can certainly add a re-entry guard with modifiers, I think what we're recommending here is that it should be a default as it's the naive coders who most need protection.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226987626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227022830",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-227022830",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 227022830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzAyMjgzMA==",
    "user": {
      "login": "joeykrug",
      "id": 5925937,
      "node_id": "MDQ6VXNlcjU5MjU5Mzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5925937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joeykrug",
      "html_url": "https://github.com/joeykrug",
      "followers_url": "https://api.github.com/users/joeykrug/followers",
      "following_url": "https://api.github.com/users/joeykrug/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeykrug/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joeykrug/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeykrug/subscriptions",
      "organizations_url": "https://api.github.com/users/joeykrug/orgs",
      "repos_url": "https://api.github.com/users/joeykrug/repos",
      "events_url": "https://api.github.com/users/joeykrug/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joeykrug/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T21:57:59Z",
    "updated_at": "2016-06-19T21:57:59Z",
    "author_association": "MEMBER",
    "body": "Another problem is it can reenter to a _different_ contract that interacts with the other contract causing an issue.  A good example would be if thedao used externs to deal with sending dao tokens. Then protecting re-entry wouldn't work \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227022830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227640929",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-227640929",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 227640929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzY0MDkyOQ==",
    "user": {
      "login": "taoeffect",
      "id": 138706,
      "node_id": "MDQ6VXNlcjEzODcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taoeffect",
      "html_url": "https://github.com/taoeffect",
      "followers_url": "https://api.github.com/users/taoeffect/followers",
      "following_url": "https://api.github.com/users/taoeffect/following{/other_user}",
      "gists_url": "https://api.github.com/users/taoeffect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taoeffect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taoeffect/subscriptions",
      "organizations_url": "https://api.github.com/users/taoeffect/orgs",
      "repos_url": "https://api.github.com/users/taoeffect/repos",
      "events_url": "https://api.github.com/users/taoeffect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taoeffect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-22T04:36:34Z",
    "updated_at": "2016-06-22T06:54:35Z",
    "author_association": "NONE",
    "body": "Please feel free to tell me that I should be posting this question someplace else (sorry for not knowing where it should go).\n\n~~Regarding the reentrancy related issues, I've been [having a convo](https://www.reddit.com/r/ethereum/comments/4p1qxm/a_serious_security_exploit_with_ethereum_not_just/d4i1nxp) with @pipermerriam on reddit who seems to suggest that they can all be fixed by removing recursion from the language.~~\n\n~~**Q1:** Removing recursion [seems to me](https://www.reddit.com/r/ethereum/comments/4p1qxm/a_serious_security_exploit_with_ethereum_not_just/d4ixi3b) like a simple fix and a small price to pay for addressing [this concern](https://www.reddit.com/r/ethereum/comments/4p1qxm/a_serious_security_exploit_with_ethereum_not_just/d4htbil).~~\n\n**Q2:** I'm no expert on the EVM, but I have this feeling that if we had a language that was based on message-passing (as opposed to function calling), that [all of the concerns here](https://blog.blockstack.org/solar-storm-a-serious-security-exploit-with-ethereum-not-just-the-dao-a03d797d98fa) might disappear. I.e. like in Erlang or (maybe) Smalltalk. Am I delusional or is there something there to that idea?\n\nThanks so much for any help figuring this out!\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227640929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227644619",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-227644619",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 227644619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzY0NDYxOQ==",
    "user": {
      "login": "taoeffect",
      "id": 138706,
      "node_id": "MDQ6VXNlcjEzODcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taoeffect",
      "html_url": "https://github.com/taoeffect",
      "followers_url": "https://api.github.com/users/taoeffect/followers",
      "following_url": "https://api.github.com/users/taoeffect/following{/other_user}",
      "gists_url": "https://api.github.com/users/taoeffect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taoeffect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taoeffect/subscriptions",
      "organizations_url": "https://api.github.com/users/taoeffect/orgs",
      "repos_url": "https://api.github.com/users/taoeffect/repos",
      "events_url": "https://api.github.com/users/taoeffect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taoeffect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-22T05:05:40Z",
    "updated_at": "2016-06-22T05:05:40Z",
    "author_association": "NONE",
    "body": "I.e. in a message-passing model, these types of reentrancy bugs should be impossible, I believe.\n\nThere is just a queue of messages. That's it. No \"function calls\".\n\nThis is what makes Erlang so stable and is also the model that is used by \"latest hotness\" elegant & safe languages like [Elm](http://guide.elm-lang.org/architecture/).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227644619/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227650913",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-227650913",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 227650913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzY1MDkxMw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-22T05:57:52Z",
    "updated_at": "2016-06-22T05:57:52Z",
    "author_association": "MEMBER",
    "body": "I do not recall saying what you are reporting me to have said.  Can you please provide a link?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227650913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227651663",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-227651663",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 227651663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzY1MTY2Mw==",
    "user": {
      "login": "taoeffect",
      "id": 138706,
      "node_id": "MDQ6VXNlcjEzODcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taoeffect",
      "html_url": "https://github.com/taoeffect",
      "followers_url": "https://api.github.com/users/taoeffect/followers",
      "following_url": "https://api.github.com/users/taoeffect/following{/other_user}",
      "gists_url": "https://api.github.com/users/taoeffect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taoeffect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taoeffect/subscriptions",
      "organizations_url": "https://api.github.com/users/taoeffect/orgs",
      "repos_url": "https://api.github.com/users/taoeffect/repos",
      "events_url": "https://api.github.com/users/taoeffect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taoeffect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-22T06:03:19Z",
    "updated_at": "2016-06-22T06:03:25Z",
    "author_association": "NONE",
    "body": "@pipermerriam Yeah I'd [linked to this](https://www.reddit.com/r/ethereum/comments/4p1qxm/a_serious_security_exploit_with_ethereum_not_just/d4i1nxp), but I think I just misunderstood what you were saying about recursion, my bad.\n\nRegarding the message-passing/Actor model, note that there is also [Clojure Agent's approach](https://clojure.org/reference/agents), a more efficient, possibly better variant of the Actor model.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/227651663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/228237996",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-228237996",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 228237996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODIzNzk5Ng==",
    "user": {
      "login": "lightuponlight",
      "id": 19666529,
      "node_id": "MDQ6VXNlcjE5NjY2NTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19666529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lightuponlight",
      "html_url": "https://github.com/lightuponlight",
      "followers_url": "https://api.github.com/users/lightuponlight/followers",
      "following_url": "https://api.github.com/users/lightuponlight/following{/other_user}",
      "gists_url": "https://api.github.com/users/lightuponlight/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lightuponlight/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lightuponlight/subscriptions",
      "organizations_url": "https://api.github.com/users/lightuponlight/orgs",
      "repos_url": "https://api.github.com/users/lightuponlight/repos",
      "events_url": "https://api.github.com/users/lightuponlight/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lightuponlight/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-24T02:04:08Z",
    "updated_at": "2016-06-24T02:04:08Z",
    "author_association": "NONE",
    "body": "I believe that making recursion optional for contracts and/or methods would be a good approach.\n\nMany (most?) contracts should not be called recursively, and an exception thrown. But there are times when a contract is designed to be be called recursively. The EVM and languages should allow developers to distinguish which methods can acceptably be called recursively and which cannot.\n\nThe definition of recursion would be, multiple instances of the same contract method on the call stack.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/228237996/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/228501948",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-228501948",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 228501948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODUwMTk0OA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-25T02:18:20Z",
    "updated_at": "2016-06-25T02:19:10Z",
    "author_association": "MEMBER",
    "body": "I haven't tested this code but in theory this provides re-entrance protection.\n\n``` javascript\ncontract EnterOnce {\n        mapping (bytes4 => bool) is_occupied;\n\n        modifier no_recursion {\n            if (is_occupied[msg.sig]) throw;\n            is_occupied[msg.sig] = true;\n            _\n            is_occupied[msg.sig] = false;\n        }\n}\n```\n\nI'm curious if anyone has thoughts or opinions on this pattern.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/228501948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/228525554",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-228525554",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 228525554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODUyNTU1NA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-25T09:10:49Z",
    "updated_at": "2016-06-25T09:10:49Z",
    "author_association": "MEMBER",
    "body": "Well, that one doesn't work well with returns in function body. Actually, incompatible with any kind of returnvalue\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/228525554/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/228575073",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-228575073",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 228575073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODU3NTA3Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-25T23:09:07Z",
    "updated_at": "2016-06-25T23:09:07Z",
    "author_association": "MEMBER",
    "body": "Yes, I am actually inclined towards changing the behaviour there, i.e. a `return` in the function body or in a modifier further \"invards\" will just be like a \"break\" towards the next modifier: https://github.com/ethereum/solidity/issues/686\n\nI think there should be no contract relying on the previous behaviour because it was useless anyway.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/228575073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/237740752",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-237740752",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 237740752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzc0MDc1Mg==",
    "user": {
      "login": "phiferd",
      "id": 25631,
      "node_id": "MDQ6VXNlcjI1NjMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25631?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phiferd",
      "html_url": "https://github.com/phiferd",
      "followers_url": "https://api.github.com/users/phiferd/followers",
      "following_url": "https://api.github.com/users/phiferd/following{/other_user}",
      "gists_url": "https://api.github.com/users/phiferd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phiferd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phiferd/subscriptions",
      "organizations_url": "https://api.github.com/users/phiferd/orgs",
      "repos_url": "https://api.github.com/users/phiferd/repos",
      "events_url": "https://api.github.com/users/phiferd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phiferd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-05T02:35:57Z",
    "updated_at": "2016-08-05T02:35:57Z",
    "author_association": "NONE",
    "body": "Hey, I was just about to file an issue for this, when I found one was already open.  \n\n@chriseth : I understand your concern about a false sense of security, and I believe that's a real effect, but I think the benefit outweighs the concern.  After all, you could make a similar argument for almost any security feature (and people have done so for helmets, seat belts, airbags, anti-lock breaks, ...).    \n\nAlso, I'm not sure how exactly the gas calculation works, but I wonder if certain operations that are designed to ensure safety should be gas free (might not be possible).  Everyone who is involved in Solidity/Ethereum has an interest in making is as secure as possible.  **Hacks like the DAO are existential threats to Ethereum and crypto currency in general**.  Charging gas for writing secure code provides an incentive (albeit small) to avoid safe code when you convince yourself it's not needed.  \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/237740752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/237746649",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-237746649",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 237746649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzc0NjY0OQ==",
    "user": {
      "login": "redsquirrel",
      "id": 2512,
      "node_id": "MDQ6VXNlcjI1MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/redsquirrel",
      "html_url": "https://github.com/redsquirrel",
      "followers_url": "https://api.github.com/users/redsquirrel/followers",
      "following_url": "https://api.github.com/users/redsquirrel/following{/other_user}",
      "gists_url": "https://api.github.com/users/redsquirrel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/redsquirrel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/redsquirrel/subscriptions",
      "organizations_url": "https://api.github.com/users/redsquirrel/orgs",
      "repos_url": "https://api.github.com/users/redsquirrel/repos",
      "events_url": "https://api.github.com/users/redsquirrel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/redsquirrel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-05T03:28:38Z",
    "updated_at": "2016-08-05T03:28:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I wonder if certain operations that are designed to ensure safety should be gas free\n\nThat's a great idea.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/237746649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/238009101",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-238009101",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 238009101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODAwOTEwMQ==",
    "user": {
      "login": "phiferd",
      "id": 25631,
      "node_id": "MDQ6VXNlcjI1NjMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25631?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phiferd",
      "html_url": "https://github.com/phiferd",
      "followers_url": "https://api.github.com/users/phiferd/followers",
      "following_url": "https://api.github.com/users/phiferd/following{/other_user}",
      "gists_url": "https://api.github.com/users/phiferd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phiferd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phiferd/subscriptions",
      "organizations_url": "https://api.github.com/users/phiferd/orgs",
      "repos_url": "https://api.github.com/users/phiferd/repos",
      "events_url": "https://api.github.com/users/phiferd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phiferd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-06T06:39:57Z",
    "updated_at": "2016-08-06T06:39:57Z",
    "author_association": "NONE",
    "body": "@chriseth: is the right place to bring up gas-free operations here: https://github.com/ethereum/evm2.0-design/issues ?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/238009101/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/238292342",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-238292342",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 238292342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODI5MjM0Mg==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-08T16:30:52Z",
    "updated_at": "2016-08-08T16:30:52Z",
    "author_association": "MEMBER",
    "body": "After having multiple discussions about this, I think this would be better handled at the EVM level, and that introducing this has the ability to break numerous contracts whenever multiple people interact with it. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/238292342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/238742840",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-238742840",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 238742840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODc0Mjg0MA==",
    "user": {
      "login": "phiferd",
      "id": 25631,
      "node_id": "MDQ6VXNlcjI1NjMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25631?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phiferd",
      "html_url": "https://github.com/phiferd",
      "followers_url": "https://api.github.com/users/phiferd/followers",
      "following_url": "https://api.github.com/users/phiferd/following{/other_user}",
      "gists_url": "https://api.github.com/users/phiferd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phiferd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phiferd/subscriptions",
      "organizations_url": "https://api.github.com/users/phiferd/orgs",
      "repos_url": "https://api.github.com/users/phiferd/repos",
      "events_url": "https://api.github.com/users/phiferd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phiferd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T01:37:31Z",
    "updated_at": "2016-08-10T01:37:31Z",
    "author_association": "NONE",
    "body": "Since backward compatibility seems likely to be a problem, can we re-purpose this issue to an \"opt-in\" feature?  Even if the EVM handles this, there will still need to be some new opt-in keyword, right?  \n\n@VoR0220: Can you explain what you mean by \"whenever multiple people interact with it\"?  I thought the issue was not related to concurrent transactions, but instead when a call to an external contract calls back into the calling contract.  Therefore, this could be an issue with a single user executing a single transaction, I think.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/238742840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/239133869",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-239133869",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 239133869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTEzMzg2OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-11T11:18:58Z",
    "updated_at": "2016-08-11T11:18:58Z",
    "author_association": "MEMBER",
    "body": "I think default reentrancy protection is a weird programming model. Everything else can be achieved by the modifiers in version 0.4.0.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/239133869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/239135833",
    "html_url": "https://github.com/ethereum/solidity/issues/662#issuecomment-239135833",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/662",
    "id": 239135833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTEzNTgzMw==",
    "user": {
      "login": "AFDudley",
      "id": 660650,
      "node_id": "MDQ6VXNlcjY2MDY1MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/660650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AFDudley",
      "html_url": "https://github.com/AFDudley",
      "followers_url": "https://api.github.com/users/AFDudley/followers",
      "following_url": "https://api.github.com/users/AFDudley/following{/other_user}",
      "gists_url": "https://api.github.com/users/AFDudley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AFDudley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AFDudley/subscriptions",
      "organizations_url": "https://api.github.com/users/AFDudley/orgs",
      "repos_url": "https://api.github.com/users/AFDudley/repos",
      "events_url": "https://api.github.com/users/AFDudley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AFDudley/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-11T11:30:03Z",
    "updated_at": "2016-08-11T11:32:00Z",
    "author_association": "NONE",
    "body": "@chriseth Sorry, I think I'm misunderstanding you. What's weird about the default NOT favoring adversaries? Or put another way, we should expect programing in the EVM to be weird because functions can't trust callers or callees?\n\nAgain, apologies, I am simply trying to understand the design philosophy that underlies this decision, if you've written about this elsewhere, i'll happily accept a link.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/239135833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
