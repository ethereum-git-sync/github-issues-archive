{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11969/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11969/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11969/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11969",
  "id": 997083496,
  "node_id": "I_kwDOAm_5kc47bklo",
  "number": 11969,
  "title": "Operators for user defined value types.",
  "user": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4372329032,
      "node_id": "LA_kwDOAm_5kc8AAAABBJxySA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/selected%20for%20development",
      "name": "selected for development",
      "color": "ff8e00",
      "default": false,
      "description": "It's on our short-term development"
    },
    {
      "id": 4437999539,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZ_sw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20effort",
      "name": "high effort",
      "color": "ff54f4",
      "default": false,
      "description": "A lot to implement but still doable by a single person. The task is large or difficult."
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "cameel",
    "id": 137030,
    "node_id": "MDQ6VXNlcjEzNzAzMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cameel",
    "html_url": "https://github.com/cameel",
    "followers_url": "https://api.github.com/users/cameel/followers",
    "following_url": "https://api.github.com/users/cameel/following{/other_user}",
    "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
    "organizations_url": "https://api.github.com/users/cameel/orgs",
    "repos_url": "https://api.github.com/users/cameel/repos",
    "events_url": "https://api.github.com/users/cameel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cameel/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/solidity/milestones/54",
    "html_url": "https://github.com/ethereum/solidity/milestone/54",
    "labels_url": "https://api.github.com/repos/ethereum/solidity/milestones/54/labels",
    "id": 8844983,
    "node_id": "MI_kwDOAm_5kc4Ahva3",
    "number": 54,
    "title": "0.8.19",
    "description": "",
    "creator": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 7,
    "state": "closed",
    "created_at": "2023-01-11T18:19:39Z",
    "updated_at": "2023-03-06T11:45:51Z",
    "due_on": null,
    "closed_at": "2023-03-06T11:45:51Z"
  },
  "comments": 14,
  "created_at": "2021-09-15T13:24:56Z",
  "updated_at": "2023-03-07T10:44:18Z",
  "closed_at": "2023-02-22T10:58:50Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This came up in https://github.com/ethereum/solidity/issues/9211#issuecomment-911705547\r\n\r\n**Proposal**:\r\n\r\n```solidity\r\ntype MyInt is int;\r\nusing {add as +} for UncheckedInt;\r\nfunction add(MyInt a, MyInt b) view returns(MyInt c) { ... }\r\n// MyInt.wrap(5) + MyInt.wrap(10) will now call add(...)\r\n```\r\n\r\n---\r\n\r\n### Allowing mixed types\r\n\r\n```solidity\r\nusing {addInt as +} for UncheckedInt;\r\nfunction addInt(MyInt a, int b) view returns(MyInt c) { ... }\r\n// MyInt.wrap(5) + 10 will now call addInt(...)\r\n```\r\n\r\nUseful for fixed points (`Fixed * uint`), duration type system (`Timestamp + Duration = Timestamp`, `Timestamp + Timestamp` is error), elliptic curve multiplication (`Point * uint`), etc.  Also can make code less verbose: see in example how we can write `MyInt.wrap(5) + 10` instead of `MyInt.wrap(5) + MyInt.wrap(10)`.\r\n\r\nProblems: \r\n1. associativity of operators can be problematic (see https://github.com/ethereum/solidity/issues/9211#issuecomment-918392653 and  https://github.com/ethereum/solidity/issues/9211#issuecomment-915922517). May actually be solved by enforcing parenthesis for expressions that can be vague.\r\n2. @ekpyron argues that this will cause issues with generics in the future.\r\n\r\n### Disallowing mixed types\r\n\r\nAll types will have the type: `'a -> 'a -> 'a`, i.e., only operate on the same type.\r\n\r\nTo allow applications mentioned before, allow defining user defined operators.\r\n```solidity\r\ninfix function <*>(UFixed18 a, uint b) returns (uint) { ... }\r\n```\r\n\r\nProblems: might complicate our parser, we'll need to assign left / right binding to operators, precedence etc. May be easier for the language to introduce new operators like `+', *'` or force fixed delimiters for new operators.\r\n\r\n#### Allowing implicit conversions\r\n\r\nIf we only allow operators of type  `'a -> 'a -> 'a`, one way to do `Fixed * uint` would be to have a mechanism that allows implicit `uint -> Fixed` conversion. Thus, this would bind to the `* :: Fixed -> Fixed -> Fixed`. This is similar to how the compiler already implements arithmetic: for example `uint(5) + uint8(20)`.\r\n\r\nProblem: the duration type system may not work in this case. Assuming we defined `Duration + Duration = Duration`, this allows `Timestamp + Duration = Duration`. **TODO**.\r\n\r\n### Checked and Unchecked operator\r\n\r\nIf we allow custom operators, then should `unchecked` block affect it?\r\n\r\nOne solution is to make it a type error if used inside `unchecked`.\r\n\r\nOr allow calling two different functions depending on whether the scope is checked / unchecked. Syntax proposals:\r\n\r\n```solidity\r\nusing {add as unchecked+} for MyInt;\r\nunchecked { using {add as +} for MyInt;}\r\nusing { unchecked {add as +}} for MyInt;\r\n```\r\n",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11969/reactions",
    "total_count": 5,
    "+1": 5,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11969/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/920045726",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-920045726",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 920045726,
    "node_id": "IC_kwDOAm_5kc421sie",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-15T14:00:36Z",
    "updated_at": "2021-09-15T14:00:36Z",
    "author_association": "MEMBER",
    "body": "As I commented on the other issue: The worries of Daniel can be fixed by requiring a trait system as rust has it, with the downside that there are some places where you have to specify a trait while it could be automatically inferred in Daniel's system (I think this is a plus). Also note that rust allows mixed types, but it resolves custom operators only based on the left operand. I'm not sure if this is a strict requirement or if this is just to make it uniform with regards to how functions on custom types are resolved.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/920045726/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/920072039",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-920072039",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 920072039,
    "node_id": "IC_kwDOAm_5kc421y9n",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-15T14:29:28Z",
    "updated_at": "2021-09-15T14:51:53Z",
    "author_association": "MEMBER",
    "body": "It really isn't a plus not *to be able to* infer types. Even if you are able to infer types, you can still either choose to mention types or even force people to mention types (at all times or in some situations). The point is that type inference being possible is generally a stronger type-safety property. If you *can't* infer types you have to be careful that the explicit mentions of types this implies won't get excessive and you will end up with a system in which generics become unreadable due to excessive typing that doesn't provide any gain. I'm not saying this *has* to happen, but it takes dedicated effort to avoid (if only by rules like \"return types are fully determined by argument types\" and \"operators have to be defined on the exact type of the left operand\", etc.).\r\n\r\nAlso type inference can protect against specifying types that are incorrect in some contexts and for example imply undesired implicit conversions. Explicit types in generics are not *always* the better choice.\r\n\r\nAlso monoidal operators are also traits and using them generically will also work and only work via a trait - you can't really define operators using parametric polymorphism, you need adhoc polymorphism, i.e. type classes/traits for that anyways. But it's significantly simpler traits in that they only require a single free type variable. Does defining traits containing functions that return types with specified other traits work in Rust? Stuff like that quickly becomes complex, so I'd be very careful in just assuming that traits just solve this stuff in all cases smoothly.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/920072039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/920122883",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-920122883",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 920122883,
    "node_id": "IC_kwDOAm_5kc421_YD",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-15T15:27:18Z",
    "updated_at": "2021-09-15T15:27:18Z",
    "author_association": "MEMBER",
    "body": "@ekpyron and me also briefly discussed how to do `++` and `+=`, but I think we concluded that the problem is that we do not have explicit references, and you would need them to do this properly. It might make sense to disallow to define them and auto-derive them from `add(CustomType, uint)`, if this is desired.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/920122883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941017065",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-941017065",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 941017065,
    "node_id": "IC_kwDOAm_5kc44Fsfp",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T13:32:11Z",
    "updated_at": "2021-10-12T13:32:11Z",
    "author_association": "MEMBER",
    "body": "Having talked to @axic who is also unsure about mixed types I would say that we implement operators only for fixed type signatures for now in order to get some progress and feedback from the community.\r\n\r\nI'm still of the opinion that user-defined operators should be illegal inside `unchecked` blocks. I think we can also agree that this is a good first step and we can wait for feedback.\r\n\r\nAnother question is whether we want `type X is Y; using {...} for X;` or just contract this to `type X is Y using { ... };`. The latter would have the benefit that the valid operators for a user defined type are very easy to find. I would also be fine with just having a convention that the operators should be the next statement, though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/941017065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/950819141",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-950819141",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 950819141,
    "node_id": "IC_kwDOAm_5kc44rFlF",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-25T11:20:53Z",
    "updated_at": "2021-10-25T11:20:53Z",
    "author_association": "MEMBER",
    "body": "The final question about a first and nice to use implementation is about how to make this work with literals. It would be great to be able to do `a = a + 1;`. For this, we would need to define an implicit conversion from literals to custom types. As we discussed earlier, implicit conversions from the underlying type to the user defined type should rather not be allowed.\r\n\r\nEvery literal expression is assigned a type from our type system. This can be `bool`, \"rational number\" or \"string literal\".\r\nThe problem is that neither rational number or string literal are \"nameable types\", so we cannot have functions with parameters of that type.\r\n\r\nSumming this up, my first proposal would be the following:\r\n\r\nAdd something like \"using {f as fromLiteral} for Type;\" where `f` is a user-defined function that is overloaded for several types. Whenever the type system is asked for an implicit conversion from a literal, it checks if the target type has such a \"fromlLiteral\" function. Then it performs overload resolution with another implicit conversion from the literal type to the parameter type of the candidate functions. If exactly one candidate remains, the implicit conversion is allowed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/950819141/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/952899020",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-952899020",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 952899020,
    "node_id": "IC_kwDOAm_5kc44zBXM",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-27T12:56:46Z",
    "updated_at": "2021-10-27T12:56:46Z",
    "author_association": "MEMBER",
    "body": "Another idea would be to allow something like [user-defined literals in C++](https://en.cppreference.com/w/cpp/language/user_literal). Not sure what the best syntax for declaring them would be but for use it would be `a = a + 1_suffix` or maybe `a = a + 1:suffix`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/952899020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/953029867",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-953029867",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 953029867,
    "node_id": "IC_kwDOAm_5kc44zhTr",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-27T15:13:35Z",
    "updated_at": "2021-10-27T15:13:35Z",
    "author_association": "MEMBER",
    "body": "We already have `_` as a separator in numbers, so I think supporting such suffixes is a good idea. Also it reads nicely as `10_km` or `100_ether`, `10_dai` or `7_fixed`.\r\n\r\nHow do we mark functions that can be used as these prefixes?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/953029867/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/956087025",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-956087025",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 956087025,
    "node_id": "IC_kwDOAm_5kc44_Lrx",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-01T09:53:14Z",
    "updated_at": "2021-11-01T09:53:14Z",
    "author_association": "MEMBER",
    "body": "> Another question is whether we want `type X is Y; using {...} for X;` or just contract this to `type X is Y using { ... };`. The latter would have the benefit that the valid operators for a user defined type are very easy to find. I would also be fine with just having a convention that the operators should be the next statement, though.\r\n\r\nIf we ever decide to have some kind of abstract types (resp. type classes/sorts) for generics (and want to reuse similar declarations for them), then those would have to have their (unimplemented) operators defined in place at declaration in order to work smoothly, so I'd tend to also require them to be named at declaration for normal user-defined types now, i.e. I'd go for requiring `type X is Y using { ... };` at least until there are complaints about it.\r\n\r\n> Add something like \"using {f as fromLiteral} for Type;\" where `f` is a user-defined function that is overloaded for several types. Whenever the type system is asked for an implicit conversion from a literal, it checks if the target type has such a \"fromlLiteral\" function. Then it performs overload resolution with another implicit conversion from the literal type to the parameter type of the candidate functions. If exactly one candidate remains, the implicit conversion is allowed.\r\n\r\nWould this really be ``fromLiteral`` then or actually just an implicit conversion function? We should also make sure that this is forward compatible to introducing a proper literal type. It stands to reason that I would always want to implement an implicit conversion function from the least special type possible, i.e. if I want literals *and* integers to work, I use ``uintX`` with the highest feasible size ``X``, if I *only* want literals to work I'd e.g. use ``rational`` (which would only be possible once we introduce that). It would even make sense to disallow defining multiple implicit conversions from types that are implicitly convertible between each other at the same type. If we make it ``fromLiteral`` instead of an implicit conversion, then we're getting into a mess once we also allow implicit conversions from types that are implicitly convertible from literals themselves.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/956087025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/956092693",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-956092693",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 956092693,
    "node_id": "IC_kwDOAm_5kc44_NEV",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-01T10:02:18Z",
    "updated_at": "2021-11-01T10:03:25Z",
    "author_association": "MEMBER",
    "body": "The question of ``type X is Y using { ... };`` also makes me wonder:\r\nWill user-defined types only ever be able to define *from* what types they are implicitly convertible or also *to* which types? Probably both, right? I'm wondering since if we allow defining both, then defining another type ``type Z is X using { ..everything X has plus another operator I want plus trivial implicit conversions from and to X.. }`` and then just using ``Z`` instead of ``X`` should always be an (arguably better) alternative for situations in which I *might* want to use an out-of-declaration ``using``.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/956092693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/956197665",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-956197665",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 956197665,
    "node_id": "IC_kwDOAm_5kc44_msh",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-01T12:36:50Z",
    "updated_at": "2021-11-01T12:36:50Z",
    "author_association": "MEMBER",
    "body": "As far as the \"literal conversion through suffix\" is concerned: The main thing that  sets this apart from actually just bound functions (`using f for *; 1.f()`) is that we do not need to call the function. So maybe we could just resort to `using` with a special type at the right hand side to say it applies to literals and does not need the function call and maybe also uses `_` instead of `.`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/956197665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/966417658",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-966417658",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 966417658,
    "node_id": "IC_kwDOAm_5kc45mlz6",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-11T15:57:19Z",
    "updated_at": "2021-11-11T15:57:19Z",
    "author_association": "MEMBER",
    "body": "Related https://github.com/ethereum/solidity/issues/12273",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/966417658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1448445474",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-1448445474",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 1448445474,
    "node_id": "IC_kwDOAm_5kc5WVYYi",
    "user": {
      "login": "hellwolf",
      "id": 186660,
      "node_id": "MDQ6VXNlcjE4NjY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/186660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hellwolf",
      "html_url": "https://github.com/hellwolf",
      "followers_url": "https://api.github.com/users/hellwolf/followers",
      "following_url": "https://api.github.com/users/hellwolf/following{/other_user}",
      "gists_url": "https://api.github.com/users/hellwolf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hellwolf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hellwolf/subscriptions",
      "organizations_url": "https://api.github.com/users/hellwolf/orgs",
      "repos_url": "https://api.github.com/users/hellwolf/repos",
      "events_url": "https://api.github.com/users/hellwolf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hellwolf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-28T16:05:35Z",
    "updated_at": "2023-02-28T16:05:35Z",
    "author_association": "NONE",
    "body": "> Having talked to [@axic](https://github.com/axic) who is also unsure about mixed types I would say that we implement operators only for fixed type signatures for now in order to get some progress and feedback from the community.\r\n\r\nOkay, fair enough, but I can't use it in a library because of this :( And we are left with:\r\n\r\n```solidity\r\n    function mul(FlowRate r, Time t) internal pure returns (Value) {\r\n        return Value.wrap(FlowRate.unwrap(r) * int(uint(Time.unwrap(t))));\r\n    }\r\n```\r\n\r\n\r\n\r\nFwiw, in contrast, that's what I would do in modern c++:\r\n\r\n```c++\r\n#include <cstdio>\r\n\r\nstruct Value { int v; };\r\nstruct FlowRate { int v; };\r\nstruct Time { int v; };\r\n\r\nValue operator*(const FlowRate& r, const Time& t) {\r\n    return Value{r.v * t.v};\r\n}\r\n\r\nint main() {\r\n    FlowRate r = {10};\r\n    Time t = {5};\r\n    printf(\"r * t = %d\\n\", (r * t).v);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1448445474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1448448248",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-1448448248",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 1448448248,
    "node_id": "IC_kwDOAm_5kc5WVZD4",
    "user": {
      "login": "hellwolf",
      "id": 186660,
      "node_id": "MDQ6VXNlcjE4NjY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/186660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hellwolf",
      "html_url": "https://github.com/hellwolf",
      "followers_url": "https://api.github.com/users/hellwolf/followers",
      "following_url": "https://api.github.com/users/hellwolf/following{/other_user}",
      "gists_url": "https://api.github.com/users/hellwolf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hellwolf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hellwolf/subscriptions",
      "organizations_url": "https://api.github.com/users/hellwolf/orgs",
      "repos_url": "https://api.github.com/users/hellwolf/repos",
      "events_url": "https://api.github.com/users/hellwolf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hellwolf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-28T16:07:15Z",
    "updated_at": "2023-02-28T16:07:15Z",
    "author_association": "NONE",
    "body": "May I reopen the issue?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1448448248/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1457947352",
    "html_url": "https://github.com/ethereum/solidity/issues/11969#issuecomment-1457947352",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11969",
    "id": 1457947352,
    "node_id": "IC_kwDOAm_5kc5W5oLY",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-07T10:44:18Z",
    "updated_at": "2023-03-07T10:44:18Z",
    "author_association": "MEMBER",
    "body": "@hellwolf We are aware of the limitations of only allowing monoidal multiplication, i.e. multiplication with the same arguments. However, just allowing free mixed operators has various implications on the type system, in particular it breaks unambiguous type inference. We are still in the process of designing our future type class/trait system that will need to capture the definitions of these operators conceptually - we will be weighing in the pros and cons of more restrictive and more general approaches including cases in which mixed (resp. vector-space-like) multiplication would be handy.\r\nGiven all that, we won't just add mixed type operators for the time being to keep our options open for multiple variants of generic type systems - as such reopening this issue for the time being won't really be helpful. The general issue is already on our design agenda.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1457947352/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
