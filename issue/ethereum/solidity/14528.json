{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14528",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14528/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14528/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14528/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14528",
  "id": 1877852525,
  "node_id": "I_kwDOAm_5kc5v7cFt",
  "number": 14528,
  "title": "Retreive exact line of opcode execution",
  "user": {
    "login": "AntoineMrtl",
    "id": 74369980,
    "node_id": "MDQ6VXNlcjc0MzY5OTgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/74369980?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AntoineMrtl",
    "html_url": "https://github.com/AntoineMrtl",
    "followers_url": "https://api.github.com/users/AntoineMrtl/followers",
    "following_url": "https://api.github.com/users/AntoineMrtl/following{/other_user}",
    "gists_url": "https://api.github.com/users/AntoineMrtl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AntoineMrtl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AntoineMrtl/subscriptions",
    "organizations_url": "https://api.github.com/users/AntoineMrtl/orgs",
    "repos_url": "https://api.github.com/users/AntoineMrtl/repos",
    "events_url": "https://api.github.com/users/AntoineMrtl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AntoineMrtl/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 275027668,
      "node_id": "MDU6TGFiZWwyNzUwMjc2Njg=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/documentation%20:book:",
      "name": "documentation :book:",
      "color": "006b75",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-09-01T18:18:17Z",
  "updated_at": "2023-09-01T18:18:17Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hello, i'm sincerely sorry to not respect the supposed style of the issue but I couldn't find any way to just ask a question. My question is the following : how can I map each line to the corresponding opcodes of a solidity contract execution (runtimebytecode). I found the solc argument (\"viaIR\": true) to specify to the compiler to not use Yul to generate sources so it only reffer to the solidity code. The problem is that I have like I wanted only solidity source map, but maybe 90% of my opcodes are just reffered to the entire contract.\r\n\r\nMy solidity contract :\r\n\r\n``` solidity\r\npragma solidity ^0.8.0;\r\n\r\ncontract TestContract {\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTradingAmount;\r\n\r\n    uint256 public maxTradingAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    constructor() {\r\n        uint256 totalSupply = 10_000_000 * 1e18;\r\n\r\n        swapTokensAtAmount = (totalSupply * 100) / 10000;\r\n        maxTradingAmount = (totalSupply * 100) / 10000;\r\n        maxWallet = (totalSupply * 100) / 10000;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function test(uint aaaa) external returns (uint) {\r\n        return aaaa * 2;\r\n    }\r\n}\r\n\r\n```\r\n\r\nWhen i compile this contract with the following settings : \r\n\r\n```ts\r\nconst input = {\r\n  language: \"Solidity\",\r\n  sources: {\r\n    \"TestContract.sol\": {\r\n      content: source,\r\n    },\r\n  },\r\n\r\n  settings: {\r\n    viaIR: true,\r\n\r\n    outputSelection: {\r\n      \"*\": {\r\n        \"*\": [\"*\"],\r\n        \"\": [\"*\"],\r\n      },\r\n    },\r\n    optimizer: {\r\n      enabled: false,\r\n      details: {\r\n        yul: false,\r\n      },\r\n    },\r\n  },\r\n};\r\n```\r\n\r\nThe MUL opcode, used to make the multiplication (or ADD if the compiler decide to add for some reason), are not mapped to the line where the variable is multiplied by 2.\r\n\r\n So yeah i don't really understand how online debugging tool, for exemple \"tenderly\", succeed to map opcode execution of function and keep a track of it. Thanks.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14528/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14528/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
