{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/5212",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/5212/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/5212/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/5212/events",
  "html_url": "https://github.com/ethereum/solidity/issues/5212",
  "id": 369797479,
  "node_id": "MDU6SXNzdWUzNjk3OTc0Nzk=",
  "number": 5212,
  "title": "oss-fuzz integration",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-10-13T12:23:55Z",
  "updated_at": "2019-01-30T01:44:06Z",
  "closed_at": "2019-01-30T01:44:06Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Hello,\r\n\r\nI was wondering if there has been a discussion in the past on fuzzing solidity continously with free OSS fuzzing services such as oss-fuzz?\r\n\r\nP.S. I tried to compile solidity on Ubuntu 16.04 against clang-8 (latest) but ran into linking errors that I gather is mostly due to ABI updates in libstdc++ (namespaces for commonly used objects such as std::basic_string seem to have changed) that clang++ (the linker) is not able to understand.\r\n\r\nThank you.",
  "closed_by": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/5212/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/5212/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/429765704",
    "html_url": "https://github.com/ethereum/solidity/issues/5212#issuecomment-429765704",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5212",
    "id": 429765704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTc2NTcwNA==",
    "user": {
      "login": "erak",
      "id": 20012009,
      "node_id": "MDQ6VXNlcjIwMDEyMDA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/20012009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erak",
      "html_url": "https://github.com/erak",
      "followers_url": "https://api.github.com/users/erak/followers",
      "following_url": "https://api.github.com/users/erak/following{/other_user}",
      "gists_url": "https://api.github.com/users/erak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erak/subscriptions",
      "organizations_url": "https://api.github.com/users/erak/orgs",
      "repos_url": "https://api.github.com/users/erak/repos",
      "events_url": "https://api.github.com/users/erak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T09:06:47Z",
    "updated_at": "2018-10-15T09:16:51Z",
    "author_association": "COLLABORATOR",
    "body": "@bshastry We're mainly utilizing AFL (http://lcamtuf.coredump.cx/afl/) for fuzzing. There's also a section in the documentation that explains how to run it: https://solidity.readthedocs.io/en/develop/contributing.html?highlight=solfuzzer#running-the-fuzzer-via-afl.\r\n\r\nCould you provide more details about your setup (compiler and library versions, as well as the output)? As far as I can tell, Ubuntu currently ships with Clang 6.0.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/429765704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/429777270",
    "html_url": "https://github.com/ethereum/solidity/issues/5212#issuecomment-429777270",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5212",
    "id": 429777270,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTc3NzI3MA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T09:43:00Z",
    "updated_at": "2018-10-15T09:43:00Z",
    "author_association": "MEMBER",
    "body": "Would be happy to see such an integration, but please note that compiler fuzzing will not be able to find any critical issues. It is only able to improve the error reporting functionalities. In the best case, it can find memory issues like null pointer dereferences.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/429777270/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/429867433",
    "html_url": "https://github.com/ethereum/solidity/issues/5212#issuecomment-429867433",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5212",
    "id": 429867433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTg2NzQzMw==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T14:10:10Z",
    "updated_at": "2018-10-15T16:03:15Z",
    "author_association": "MEMBER",
    "body": "> @bshastry We're mainly utilizing AFL (http://lcamtuf.coredump.cx/afl/) for fuzzing. There's also a section in the documentation that explains how to run it: https://solidity.readthedocs.io/en/develop/contributing.html?highlight=solfuzzer#running-the-fuzzer-via-afl.\r\n\r\nThanks, support for afl-fuzz is definitely a good start. However, a project like solidity can benefit greatly from oss-fuzz for the following reasons:\r\n  - access to multiple fuzzing engines including afl-fuzz\r\n  - trigger on every build\r\n  - automatic issue triage and notification to devs\r\n \r\n> Could you provide more details about your setup (compiler and library versions, as well as the output)? As far as I can tell, Ubuntu currently ships with Clang 6.0.\r\n\r\nThe main linking issues that I see at the moment (after having built boost lib dependencies from scratch) are:\r\n\r\n```\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const'\r\nundefined reference to 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const'\r\nundefined reference to 'std::__throw_length_error(char const*)'\r\nundefined reference to 'std::__throw_logic_error(char const*)'\r\nundefined reference to 'std::__throw_out_of_range_fmt(char const*, ...)'\r\nundefined reference to 'std::codecvt<wchar_t, char, __mbstate_t> const& std::use_facet<std::codecvt<wchar_t, char, __mbstate_t> >(std::locale const&)'\r\nundefined reference to 'std::locale::locale(char const*)'\r\nundefined reference to 'std::locale::locale(std::locale const&)'\r\nundefined reference to 'std::locale::operator=(std::locale const&)'\r\nundefined reference to 'std::locale::~locale()'\r\nundefined reference to 'std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)'\r\n```\r\n\r\nEdit 1:\r\nCompiler: clang\r\nVersion: 8\r\nlibraries: libboost from upstream master, libc++ and libc++abi from clang/llvm distribution (v8)\r\n\r\nEdit 2:\r\n~~The linking errors disappeared magically when I replaced system cmake v3.5 with the latest release.~~\r\nI believer these linking errors happen at the time of linking `lllc`, the lll compiler. All of them stem from the libboost_filesystem library that has been custom built.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/429867433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/429868720",
    "html_url": "https://github.com/ethereum/solidity/issues/5212#issuecomment-429868720",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5212",
    "id": 429868720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTg2ODcyMA==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T14:13:16Z",
    "updated_at": "2018-10-15T14:13:16Z",
    "author_association": "MEMBER",
    "body": "> Would be happy to see such an integration, but please note that compiler fuzzing will not be able to find any critical issues. It is only able to improve the error reporting functionalities. In the best case, it can find memory issues like null pointer dereferences.\r\n\r\nThank you for your input. The hope is that were the compiler be fuzzed with malformed solidity programs, assertion failures in the compiler process may be uncovered that may shed light on (compiler writer) assumptions. Of course, the fuzzing also helps uncover memory corruption issues which is also important imho e.g., malformed solidity contracts should not crash the compiler during compilation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/429868720/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
