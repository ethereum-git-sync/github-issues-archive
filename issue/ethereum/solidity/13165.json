{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13165",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13165/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13165/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13165/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13165",
  "id": 1274918802,
  "node_id": "I_kwDOAm_5kc5L_beS",
  "number": 13165,
  "title": "Add unchecked versions of existing operators",
  "user": {
    "login": "benesjan",
    "id": 13470840,
    "node_id": "MDQ6VXNlcjEzNDcwODQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/13470840?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/benesjan",
    "html_url": "https://github.com/benesjan",
    "followers_url": "https://api.github.com/users/benesjan/followers",
    "following_url": "https://api.github.com/users/benesjan/following{/other_user}",
    "gists_url": "https://api.github.com/users/benesjan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/benesjan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/benesjan/subscriptions",
    "organizations_url": "https://api.github.com/users/benesjan/orgs",
    "repos_url": "https://api.github.com/users/benesjan/repos",
    "events_url": "https://api.github.com/users/benesjan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/benesjan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-06-17T11:30:31Z",
  "updated_at": "2022-06-17T14:47:52Z",
  "closed_at": "2022-06-17T14:47:52Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nThere are situations in solidity ^0.8.0 where it can be assured that overflows and underflows are not a danger. In this scenarios devs can use the unchecked code block. I think it would improve code clarity if we add unchecked version of existing operators.\r\n\r\n## Motivation\r\nIn order to save gas, devs are now using the following syntax:\r\n```\r\n        arrayLength = someArray;\r\n        for (uint256 i; i < arrayLength; ) {\r\n            // Do something\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n```\r\nI think it would be very helpful to add unchecked operators. We could for example add a question mark to all the existing relevant operators to define the unchecked version (e.g. ?++, ?+, ?==, ?--, ...)\r\n\r\nThen the loop above would look for example ike this:\r\n\r\n```\r\n        arrayLength = someArray;\r\n        for (uint256 i; i < arrayLength; ?++i) {\r\n            // Do something\r\n        }\r\n```\r\n\r\n\r\n## Specification\r\nI am not educated enough in compilers to know whether the syntax I proposed would cause issues in parser so I leave the specification for after the initial feedback is received.\r\n\r\n## Backwards Compatibility\r\nSince we are talking about an addition of new operators, backward compatibility should not be affected in any way.\r\n",
  "closed_by": {
    "login": "benesjan",
    "id": 13470840,
    "node_id": "MDQ6VXNlcjEzNDcwODQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/13470840?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/benesjan",
    "html_url": "https://github.com/benesjan",
    "followers_url": "https://api.github.com/users/benesjan/followers",
    "following_url": "https://api.github.com/users/benesjan/following{/other_user}",
    "gists_url": "https://api.github.com/users/benesjan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/benesjan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/benesjan/subscriptions",
    "organizations_url": "https://api.github.com/users/benesjan/orgs",
    "repos_url": "https://api.github.com/users/benesjan/repos",
    "events_url": "https://api.github.com/users/benesjan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/benesjan/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13165/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13165/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1158824818",
    "html_url": "https://github.com/ethereum/solidity/issues/13165#issuecomment-1158824818",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13165",
    "id": 1158824818,
    "node_id": "IC_kwDOAm_5kc5FEkNy",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-17T12:30:57Z",
    "updated_at": "2022-06-17T12:30:57Z",
    "author_association": "MEMBER",
    "body": "We're currently working on allowing to define (the regular) operators on user-defined value types (https://github.com/ethereum/solidity/issues/11969).\r\n\r\nThat way it will become possible to define a *type* with operations that are unchecked, so you would not declare ``uint256 i`` as loop index, but ``Index i`` with a user-defined value type ``Index`` that has an unchecked increment operator defined and is convertible to ``uint256``, but has no other operations, thus justifying its increment operation not being checked, since starting from zero, you cannot reach an 256-bit overflow by increments.\r\n\r\nThe advantage of this approach is that (1) user-defined types can be defined in such a way that overflows cannot happen by design, so the approach is safer than relying on case-by-case decisions when checked arithmetic is desirable and when it isn't and (2) it does not require extending the language with additional operators/keywords.\r\n\r\nThere is also some discussion on this in https://github.com/ethereum/solidity/issues/10698",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1158824818/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1158838352",
    "html_url": "https://github.com/ethereum/solidity/issues/13165#issuecomment-1158838352",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13165",
    "id": 1158838352,
    "node_id": "IC_kwDOAm_5kc5FEnhQ",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-17T12:48:34Z",
    "updated_at": "2022-06-17T12:50:21Z",
    "author_association": "MEMBER",
    "body": "Note that in the most recent compiler version function ``f`` in this contract:\r\n```\r\ncontract C {\r\n        uint[] array;\r\n        constructor() {\r\n                for (uint i = 0; i < 20; ++i)\r\n                        array.push(i);\r\n        }\r\n        function f() external returns (uint sum) {\r\n                unchecked {\r\n                    uint arrayLength = array.length;\r\n                    for (uint i; i < arrayLength; ++i) {\r\n                            sum += array[i];\r\n                    }\r\n                }\r\n\r\n        }\r\n}\r\n```\r\n\r\nhas identical cost (using optimized via-IR compilation) to this:\r\n\r\n```\r\ncontract C {\r\n        uint[] array;\r\n        constructor() {\r\n                for (uint i = 0; i < 20; ++i)\r\n                        array.push(i);\r\n        }\r\n        function f() external returns (uint sum) {\r\n                uint arrayLength = array.length;\r\n                for (Index i; less(i, arrayLength); i = increment(i)) {\r\n                                // perform the summation in an unchecked block to get a fair comparison\r\n                                unchecked {\r\n                                        sum += array[toUint(i)];\r\n                                }\r\n                }\r\n        }\r\n}\r\n```\r\n\r\nGiven that you define a user-defined value type ``Index`` like this:\r\n\r\n```\r\ntype Index is uint256;\r\n\r\nfunction increment(Index x) returns (Index) {\r\n        unchecked {\r\n                return Index.wrap(Index.unwrap(x) + 1);\r\n        }\r\n}\r\n\r\nfunction less(Index i, uint256 x) returns (bool) {\r\n        return Index.unwrap(i) < x;\r\n}\r\n\r\nfunction toUint(Index i) returns (uint256) {\r\n        return Index.unwrap(i);\r\n}\r\n```\r\n\r\nSo the only thing missing to make this work nicely is to define nice and readable operators on the type ``Index`` instead of having to use less readable free functions. (i.e. https://github.com/ethereum/solidity/issues/11969)\r\nOnce we have those, we expect types like ``Index`` to be defined in common libraries (or we may add them to a compiler-shipped Solidity standard library).\r\n\r\nThe result of all that should cover the use cases of builtin unchecked versions of operators, while providing additional type-safety (e.g. in only performing unchecked increments on a type that is guaranteed to be bounded by design).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1158838352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1158946043",
    "html_url": "https://github.com/ethereum/solidity/issues/13165#issuecomment-1158946043",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13165",
    "id": 1158946043,
    "node_id": "IC_kwDOAm_5kc5FFBz7",
    "user": {
      "login": "benesjan",
      "id": 13470840,
      "node_id": "MDQ6VXNlcjEzNDcwODQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/13470840?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benesjan",
      "html_url": "https://github.com/benesjan",
      "followers_url": "https://api.github.com/users/benesjan/followers",
      "following_url": "https://api.github.com/users/benesjan/following{/other_user}",
      "gists_url": "https://api.github.com/users/benesjan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benesjan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benesjan/subscriptions",
      "organizations_url": "https://api.github.com/users/benesjan/orgs",
      "repos_url": "https://api.github.com/users/benesjan/repos",
      "events_url": "https://api.github.com/users/benesjan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benesjan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-17T14:47:52Z",
    "updated_at": "2022-06-17T14:47:52Z",
    "author_association": "NONE",
    "body": "Thank you for the thorough response! Happy it's already being addressed 👍",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1158946043/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
