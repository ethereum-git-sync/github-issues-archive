{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13983",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13983/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13983/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13983/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13983",
  "id": 1590085186,
  "node_id": "I_kwDOAm_5kc5exsZC",
  "number": 13983,
  "title": "Called contract that reverts does not revert whole transaction",
  "user": {
    "login": "migoldfinger",
    "id": 106750422,
    "node_id": "U_kgDOBlzh1g",
    "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/migoldfinger",
    "html_url": "https://github.com/migoldfinger",
    "followers_url": "https://api.github.com/users/migoldfinger/followers",
    "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
    "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
    "repos_url": "https://api.github.com/users/migoldfinger/repos",
    "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-02-17T23:41:27Z",
  "updated_at": "2023-02-18T23:40:00Z",
  "closed_at": "2023-02-18T23:39:59Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nFirst, I am not sure if this is a bug or just an misunderstanding on my side.\r\nI created a proxy contract that calls multiple other contracts multiple times.\r\nThe intention was that if one call does not end successfully the hole transaction should be reverted. \r\nThe method looks like this:\r\n```\r\nfunction proofOfConcept(MetaPath[] calldata metaPath, uint256 amount) override external returns (uint256)\r\n{\r\n\tuint256 startBalance = amount;\r\n\tuint256 intermediateTokenBalance = amount;\r\n\tuint256 len = metaPath.length;\r\n\r\n\tunchecked\r\n\t{\r\n\t\tfor(uint256 i = 0; i < len; ++i)\r\n\t\t{\r\n\t\t\tMetaPath memory p = metaPath[i];\r\n\t\t\tIERC20(p.path[0]).approve(p.subcontract, intermediateTokenBalance);\r\n\t\t\tuint256[] memory amountOuts = ISubContract(p.subcontract).trade(\r\n\t\t\t\tintermediateTokenBalance,\r\n\t\t\t\tp.path,\r\n\t\t\t\taddress(this),\r\n\t\t\t\tblock.timestamp + 300 // solhint-disable-line not-rely-on-time\r\n\t\t\t);\r\n\t\t\tintermediateTokenBalance = amountOuts[amountOuts.length - 1];\r\n\t\t}\r\n\t}\r\n\trequire(intermediateTokenBalance > startBalance, \"Trade Reverted\");\r\n\treturn intermediateTokenBalance;\r\n}\r\n```\r\nI did read the documentation and got the information that calls to other contract especially if they are made with the interface should be handled correctly and if they fail the transaction should be reverted.\r\nHowever I am seeing in my tests that if `ISubContract(p.subcontract).trade(IntermediateTokenBalance);` is called successfully and a following call reverts I end up with whatever token the successfully call returns stored in my proxy contract. The call of the proxy contract even returns with an error but not the whole transaction is reverted.\r\n\r\n## Environment\r\n\r\n- Compiler version: Solc 0.8.17\r\n- Target EVM version (as per compiler settings): pragma solidity ^0.8.0;\r\n- Framework/IDE (e.g. Truffle or Remix): hardhat\r\n- EVM execution environment / backend / blockchain client: alchemy g√∂rli testnet \r\n- Operating system: windows\r\n\r\n## Steps to Reproduce\r\n\r\nSteps to reproduce is to call the proxy contract multiple times till the error appears. I did not notice it for a few hours in my long running test. At first I did notice a drain of my test tokens I could not explain and then found other tokens hold by my proxy contract that should not be there at all. I did than track the culprit down to the method posted above.\r\n\r\nAn easier way reproduce would be using 2 Subcontracts one that succeeds and one that fails ever time and call that, no need for an loop and bad luck for the error to appear.\r\n\r\nI see 2 options\r\nOption 1, this should not happen and the transaction as a whole should be reverted.\r\nOption 2, I did miss something, in that case I would love to learn of a method to revert the whole transaction when a call to a subcontract fails even if a previous call succeeds.",
  "closed_by": {
    "login": "migoldfinger",
    "id": 106750422,
    "node_id": "U_kgDOBlzh1g",
    "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/migoldfinger",
    "html_url": "https://github.com/migoldfinger",
    "followers_url": "https://api.github.com/users/migoldfinger/followers",
    "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
    "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
    "repos_url": "https://api.github.com/users/migoldfinger/repos",
    "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13983/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13983/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1435792969",
    "html_url": "https://github.com/ethereum/solidity/issues/13983#issuecomment-1435792969",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13983",
    "id": 1435792969,
    "node_id": "IC_kwDOAm_5kc5VlHZJ",
    "user": {
      "login": "migoldfinger",
      "id": 106750422,
      "node_id": "U_kgDOBlzh1g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/migoldfinger",
      "html_url": "https://github.com/migoldfinger",
      "followers_url": "https://api.github.com/users/migoldfinger/followers",
      "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
      "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
      "repos_url": "https://api.github.com/users/migoldfinger/repos",
      "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-18T23:39:59Z",
    "updated_at": "2023-02-18T23:39:59Z",
    "author_association": "NONE",
    "body": "I tried to reproduce the case with an test that forces that behavior. I was not able to reproduce it.\r\nWhat I found is that one of the called contracts did in fact not revert the transaction on failure and instead returns an special value to signal that there was a failure. Unfortunately the called contract is not in my domain so I ended up with a special handling for this single contract.\r\n\r\nSo I can now tell that failing subcontracts do in fact react as expected (if they are properly coded)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1435792969/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
