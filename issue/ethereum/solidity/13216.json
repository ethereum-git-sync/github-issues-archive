{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13216/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13216/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13216/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13216",
  "id": 1284940071,
  "node_id": "I_kwDOAm_5kc5MlqEn",
  "number": 13216,
  "title": "[Codegen] Recursive fallback function call runs out of gas via legacy but does not via IR",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 2376132438,
      "node_id": "MDU6TGFiZWwyMzc2MTMyNDM4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/codegen%20error",
      "name": "codegen error",
      "color": "000000",
      "default": false,
      "description": "Compiler generates invalid code. Critical."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2022-06-26T14:30:13Z",
  "updated_at": "2022-10-27T13:22:42Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "```\r\ncontract C0 {\r\n  fallback() external virtual\r\n  {\r\n    assembly\r\n    {\r\n      calldatacopy(0, not(0), 96)\r\n    }\r\n    (bool l0, bytes memory l1) = address(this).call(bytes(\"ffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000\"));\r\n  }\r\n}\r\n// ====\r\n// compileViaYul: also\r\n// ----\r\n// () -> FAILURE\r\n// gas irOptimized: 211360\r\n```\r\n\r\nLegacy: FAILURE\r\nIR: Pass\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13216/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13216/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1213126288",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1213126288",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1213126288,
    "node_id": "IC_kwDOAm_5kc5ITtaQ",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-12T13:43:27Z",
    "updated_at": "2022-08-12T13:43:27Z",
    "author_association": "MEMBER",
    "body": "I'm labeling this ``codegen error``, to heighten the priority of properly investigating this, even though I still *hope*, it's mostly a testing issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1213126288/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214863694",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214863694",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214863694,
    "node_id": "IC_kwDOAm_5kc5IaVlO",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T10:26:07Z",
    "updated_at": "2022-08-15T10:26:07Z",
    "author_association": "MEMBER",
    "body": "I think this may be spurious after all - and just a crazy thing happening here :-).\r\nI've not confirmed entirely yet, but I think\r\n``calldatacopy(0, not(0), 96)`` can be replaced with anything that ends up having the same gas cost.\r\n\r\nWhat I guess will happen is that the last recursive call to ``this`` may just report failure, but the contract may still have enough gas to finish returning, depending on legacy vs via-IR. But we have to confirm that everything is sane there wrt. gas forwarding, etc.\r\nIt's surprising in any case :-).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214863694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214886024",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214886024",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214886024,
    "node_id": "IC_kwDOAm_5kc5IabCI",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T10:59:03Z",
    "updated_at": "2022-08-15T10:59:03Z",
    "author_association": "MEMBER",
    "body": "Or to be even clearer: the maximum forwarded gas is 63/64 of the available gas.\r\nSo if the recursive call runs out of gas, we still have 1/64 of the total gas left. This may just be enough for finishing the transaction in via-IR codegen, while it may not be with legacy codegen.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214886024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214888137",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214888137",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214888137,
    "node_id": "IC_kwDOAm_5kc5IabjJ",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T11:02:04Z",
    "updated_at": "2022-08-15T11:02:04Z",
    "author_association": "MEMBER",
    "body": "Several of the recursive calls may manage to return with the available gas - when I added some event to the code example (which of course skews gas costs, so it won't be exactly the same), I saw somewhere between 100 and 200 calls succeeding.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214888137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214893656",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214893656",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214893656,
    "node_id": "IC_kwDOAm_5kc5Iac5Y",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T11:08:29Z",
    "updated_at": "2022-08-15T11:08:29Z",
    "author_association": "MEMBER",
    "body": "@ekpyron Isn't `calldatacopy(0, not(0), 96)` in this issue's test case also overwriting the free memory pointer. If so, could this also be undefined behavior between legacy and IR?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214893656/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214897476",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214897476",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214897476,
    "node_id": "IC_kwDOAm_5kc5Iad1E",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T11:13:00Z",
    "updated_at": "2022-08-15T11:13:00Z",
    "author_association": "MEMBER",
    "body": "That's true... although my guess would be that one could construct similar cases without that... on the other hand, trying that, it's not that easy :-). Overwriting the free memory pointer there, may mainly result in weird data to be passed during the recursive call, though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214897476/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214899071",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214899071",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214899071,
    "node_id": "IC_kwDOAm_5kc5IaeN_",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T11:14:55Z",
    "updated_at": "2022-08-15T11:14:55Z",
    "author_association": "MEMBER",
    "body": "Hm... or maybe I was wrong before and there's something else happening here... maybe worth another look in any case :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214899071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214901910",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214901910",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214901910,
    "node_id": "IC_kwDOAm_5kc5Iae6W",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T11:18:51Z",
    "updated_at": "2022-08-15T11:18:51Z",
    "author_association": "MEMBER",
    "body": "Okay, in the meantime I will work on avoiding writes to free memory ptr while generating test cases. For the time being, I could template all memory writes to start at `0x60` i.e., `mstore(add(loc, 0x60), value)`, `calldatacopy(add(loc, 0x60), from, size)` and so on; where `loc` is a randomly generated value.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214901910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214905324",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214905324",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214905324,
    "node_id": "IC_kwDOAm_5kc5Iafvs",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T11:24:12Z",
    "updated_at": "2022-08-15T11:24:12Z",
    "author_association": "MEMBER",
    "body": "Make it ``0x80`` - offset ``0x60`` is the \"zero-memory offset\", which is used to initialize zero-length dynamic arrays and always has to remain zero - i.e. writing anything non-zero there will also be undefined :-).\r\n\r\nWhat's strictly speaking *always* well-defined is would be\r\n```\r\nmstore(add(mload(0x40), loc), ...)\r\n```\r\n(given that ``loc`` is bounded and the addition does not overflow - or more conservatively ``add(mload(0x40), and(loc, 0xffffffff))``)\r\n\r\nAnd\r\n```\r\nmstore(and(loc, 0x3f), ...)\r\n```\r\n\r\nBut we also need to make sure not to restrict this *too* much in order not to miss anything...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214905324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214912184",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214912184",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214912184,
    "node_id": "IC_kwDOAm_5kc5Iaha4",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T11:33:31Z",
    "updated_at": "2022-08-15T11:33:31Z",
    "author_association": "MEMBER",
    "body": "> mstore(add(mload(0x40), loc), ...)\r\n\r\nThis would be `load from free memory pointer and add an arbitrary bounded value to it`, correct? Assuming `loc` is bounded this should be fine.\r\n\r\n> mstore(and(loc, 0x3f), ...)\r\n\r\nWhat does this mean? `0x3f` would make only 6 addressable bits, right? That would be a lot more conservative than first proposal?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214912184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214926735",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1214926735",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1214926735,
    "node_id": "IC_kwDOAm_5kc5Iak-P",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-15T11:51:32Z",
    "updated_at": "2022-08-15T11:51:32Z",
    "author_association": "MEMBER",
    "body": "I meant choosing between either of them. And actually ``and(loc, 0x3f)`` was wrong... ``0x1f`` would work, though...\r\nYou're allowed to use any memory past the free memory pointer and any memory between offsets 0 and 0x3f.\r\n``mstore(add(mload(0x40), loc), ...)`` is the former, ``mstore(and(loc, 0x1f), ...)`` at least roughly the latter.\r\n\r\nBut in any case, I don't think we *should* fully restrict to those cases, i.e. your suggestion of using a fixed offset may be better.\r\n\r\nWe *want* the fuzzer to occasionally dirty previously allocated memory after all.\r\nSo maybe alternating between ``mstore(add(0x80, loc), ...)`` (with bounded ``loc``) and ``mstore(loc, ...)`` (with ``loc`` being restricted to at most ``0x20``) is best.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1214926735/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1293520487",
    "html_url": "https://github.com/ethereum/solidity/issues/13216#issuecomment-1293520487",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13216",
    "id": 1293520487,
    "node_id": "IC_kwDOAm_5kc5NGY5n",
    "user": {
      "login": "NunoFilipeSantos",
      "id": 2582498,
      "node_id": "MDQ6VXNlcjI1ODI0OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2582498?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NunoFilipeSantos",
      "html_url": "https://github.com/NunoFilipeSantos",
      "followers_url": "https://api.github.com/users/NunoFilipeSantos/followers",
      "following_url": "https://api.github.com/users/NunoFilipeSantos/following{/other_user}",
      "gists_url": "https://api.github.com/users/NunoFilipeSantos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NunoFilipeSantos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NunoFilipeSantos/subscriptions",
      "organizations_url": "https://api.github.com/users/NunoFilipeSantos/orgs",
      "repos_url": "https://api.github.com/users/NunoFilipeSantos/repos",
      "events_url": "https://api.github.com/users/NunoFilipeSantos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NunoFilipeSantos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-27T13:22:41Z",
    "updated_at": "2022-10-27T13:22:41Z",
    "author_association": "MEMBER",
    "body": "@bshastry what is the impact of this bug (High, Medium, Low)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1293520487/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
