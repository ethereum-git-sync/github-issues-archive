{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13377",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13377/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13377/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13377/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13377",
  "id": 1334704266,
  "node_id": "I_kwDOAm_5kc5PjfiK",
  "number": 13377,
  "title": "Contract size raised by a riddicilous amount with one simple line of code",
  "user": {
    "login": "migoldfinger",
    "id": 106750422,
    "node_id": "U_kgDOBlzh1g",
    "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/migoldfinger",
    "html_url": "https://github.com/migoldfinger",
    "followers_url": "https://api.github.com/users/migoldfinger/followers",
    "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
    "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
    "repos_url": "https://api.github.com/users/migoldfinger/repos",
    "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-08-10T14:19:23Z",
  "updated_at": "2022-08-10T19:26:28Z",
  "closed_at": "2022-08-10T14:56:41Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I have a library that helps with calculation of contract addresses created with CREATE2.\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../TokenPair.sol\";\r\n\r\nlibrary Lib\r\n{\r\n\tbytes private constant _PAIR_CREATION_CODE  = type(TokenPair).creationCode;\r\n\r\n\tfunction calculateAddress(address sender, address token0, address token1) internal pure returns (TokenPair) {\r\n\t\treturn TokenPair(address(uint160(uint256(keccak256(abi.encodePacked(\r\n\t\t\t\thex'ff',\r\n\t\t\t\tfactory,\r\n\t\t\t\tkeccak256(abi.encodePacked(token0, token1)),\r\n\t\t\t\tkeccak256(abi.encodePacked(_PAIR_CREATION_CODE, abi.encode(token0, token1))) // init code hash\r\n\t\t\t))))));\r\n\t}\r\n}\r\n```\r\nWhat really puzzled me for a while was that `keccak256(abi.encodePacked(_PAIR_CREATION_CODE, abi.encode(tokenL, tokenR)))` adds 13.034KiB to the contract size. -> Checked with hardhat-contract-sizer and comment in and out line by line.\r\nThe size jump also happens if I only call 'bytes32 creationCode = keccak256(abi.encodePacked(_PAIR_CREATION_CODE, abi.encode(token0, token1)));'\r\nSame goes for `bytes memory packed = abi.encodePacked(_PAIR_CREATION_CODE, abi.encode(token1, token0));`\r\n\r\nI now understand that the culprit is the _PAIR_CREATION_CODE that holds the creation code of the pair contract, which gets injected when used and adds it whole size to the contract. Is there a way to prehash that code and add the parameters later?\r\nI would hate to switch back to a parameter less constructor since there is some logic depending on the parameters that can only be done at construction time and the use of immutable values for the tokens which safes gas all over the contract.",
  "closed_by": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13377/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13377/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1210794431",
    "html_url": "https://github.com/ethereum/solidity/issues/13377#issuecomment-1210794431",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13377",
    "id": 1210794431,
    "node_id": "IC_kwDOAm_5kc5IK0G_",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-10T14:56:41Z",
    "updated_at": "2022-08-10T14:56:56Z",
    "author_association": "MEMBER",
    "body": "> Is there a way to prehash that code and add the parameters later?\r\n\r\nThis wouldn't be feasible. Effectively, you want to compute the `keccak256` hash of `x + y + z` but want to avoid or replace `x`. I don't think that is possible.\r\n\r\n> would hate to switch back to a parameter less constructor\r\n\r\nUnfortunately, that is likely the best option here. You can see the trick that Uniswap-v3 uses for this: https://github.com/Uniswap/v3-core/blob/412d9b236a1e75a98568d49b1aeb21e3a1430544/contracts/UniswapV3PoolDeployer.sol#L34\r\n\r\nClosing this, as it's not something that can be addressed at the language level. Feel free to reply if you have questions.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1210794431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1211151323",
    "html_url": "https://github.com/ethereum/solidity/issues/13377#issuecomment-1211151323",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13377",
    "id": 1211151323,
    "node_id": "IC_kwDOAm_5kc5IMLPb",
    "user": {
      "login": "migoldfinger",
      "id": 106750422,
      "node_id": "U_kgDOBlzh1g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/migoldfinger",
      "html_url": "https://github.com/migoldfinger",
      "followers_url": "https://api.github.com/users/migoldfinger/followers",
      "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
      "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
      "repos_url": "https://api.github.com/users/migoldfinger/repos",
      "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-10T19:15:03Z",
    "updated_at": "2022-08-10T19:26:28Z",
    "author_association": "NONE",
    "body": "hm maybe an CREATE3 would be nice where the `keccak256(abi.encodePacked(_PAIR_CREATION_CODE, abi.encode(token0, token1)))` is calculated like `keccak256(abi.encodePacked(keccak256(_PAIR_CREATION_CODE), abi.encode(token0, token1)))` well maybe I dig into that kind of stuff and creating an EIP\r\n\r\nToo late I see there is already an EIP with CREATE3 that would exactly cover my problem... https://github.com/ethereum/EIPs/pull/3171 unfortunately it's stale",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1211151323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
