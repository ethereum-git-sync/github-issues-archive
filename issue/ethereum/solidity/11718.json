{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11718",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11718/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11718/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11718/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11718",
  "id": 955141814,
  "node_id": "MDU6SXNzdWU5NTUxNDE4MTQ=",
  "number": 11718,
  "title": "Allow functions inside structs",
  "user": {
    "login": "fulldecent",
    "id": 382183,
    "node_id": "MDQ6VXNlcjM4MjE4Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fulldecent",
    "html_url": "https://github.com/fulldecent",
    "followers_url": "https://api.github.com/users/fulldecent/followers",
    "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
    "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
    "organizations_url": "https://api.github.com/users/fulldecent/orgs",
    "repos_url": "https://api.github.com/users/fulldecent/repos",
    "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fulldecent/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-07-28T18:47:34Z",
  "updated_at": "2022-08-17T13:49:22Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nPutting functions and private members inside a struct creates first-class data structures.\r\n\r\n## Motivation\r\n\r\nPeople want data structures. There are many inconsistent ways to do this. And they are not semantic. A struct with functions is semantic, everybody understands what it is, and clearly articulates what you are doing.\r\n\r\nCurrently people use [something like](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f7da53cebd41b6d3371d009b57beccc8f999ccfd/contracts/mocks/BitmapMock.sol):\r\n\r\n```solidity\r\n    using BitMaps for BitMaps.BitMap;\r\n\r\n    BitMaps.BitMap private _bitmap;\r\n```\r\n\r\nThis does not allow necessary encapsulation or access control on `_bitmap`.  You are directly able to touch the members inside which should be private.\r\n\r\n## Specification\r\n\r\n1. Allow definition of functions inside a struct, e.g. `struct Set {...}`.\r\n2. Allow private members inside structs.\r\n   3. These are not included in the initializer `new Set(...)`.\r\n3. Allow a custom `initialize` function. This would cancel out the autogenerated `new Set(...)` function.\r\n2. The functions can reference struct members as unqualified names and `this.` qualified names.\r\n3. Struct functions cannot be called statically (`Set.someFunction()`).\r\n4. The only way to call the functions is on the variable like `someSet.add(newElement)`.\r\n\r\nExample:\r\n\r\n```solidity\r\n// Data structure for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\r\nstruct BitMap {\r\n    mapping(uint256 => uint256) private _data;\r\n\r\n    /// @dev Returns whether the bit at `index` is set.\r\n    function get(uint256 index) internal view returns (bool) {\r\n        uint256 bucket = index / 256;\r\n        uint256 mask = 1 << (index % 256);\r\n        return _data[bucket] & mask != 0;\r\n    }\r\n\r\n    /// @dev Sets the bit at `index` to the boolean `value`.\r\n    function setTo(uint256 index, bool value) internal {\r\n        if (value) {\r\n            set(index);\r\n        } else {\r\n            unset(index);\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the bit at `index`.\r\n    function set(uint256 index) internal {\r\n        uint256 bucket = index / 256;\r\n        uint256 mask = 1 << (index % 256);\r\n        _data[bucket] |= mask;\r\n    }\r\n\r\n    /// @dev Unsets the bit at `index`.\r\n    function unset(uint256 index) internal {\r\n        uint256 bucket = index / 256;\r\n        uint256 mask = 1 << (index % 256);\r\n        _data[bucket] &= ~mask;\r\n    }\r\n}\r\n```\r\n\r\nUsage\r\n\r\n```solidity\r\ncontract BitMapMock {\r\n    Bitmap private _bitmap;\r\n\r\n    function get(uint256 index) public view returns (bool) {\r\n        return _bitmap.get(index);\r\n    }\r\n\r\n    function setTo(uint256 index, bool value) public {\r\n        _bitmap.setTo(index, value);\r\n    }\r\n\r\n    function set(uint256 index) public {\r\n        _bitmap.set(index);\r\n    }\r\n\r\n    function unset(uint256 index) public {\r\n        _bitmap.unset(index);\r\n    }\r\n}\r\n```\r\n\r\n## Backwards Compatibility\r\n\r\nNone\r\n\r\n## Notes\r\n\r\nIn the future we might consider static functions such as `Set.createRangeFromOneTo(5)` where those functions have \"protected\" access to same-class members.\r\n\r\nThis greatly reduces the use case for Library.  ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11718/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11718/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890921392",
    "html_url": "https://github.com/ethereum/solidity/issues/11718#issuecomment-890921392",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11718",
    "id": 890921392,
    "node_id": "IC_kwDOAm_5kc41GmGw",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-02T10:39:41Z",
    "updated_at": "2021-08-02T10:39:41Z",
    "author_association": "MEMBER",
    "body": "For functions inside structs, it's not clear what would be the storage location of the struct. Not sure if that's a good idea.\r\n\r\nFor example:\r\n\r\n```\r\nstruct S {\r\n   bool b;\r\n   function set() internal {\r\n     x = 1\r\n   }\r\n}\r\n```\r\n\r\nThe above function on the struct is only valid for `memory` and `storage` and not `calldata`.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890921392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890929155",
    "html_url": "https://github.com/ethereum/solidity/issues/11718#issuecomment-890929155",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11718",
    "id": 890929155,
    "node_id": "IC_kwDOAm_5kc41GoAD",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-02T10:54:43Z",
    "updated_at": "2021-08-02T10:54:43Z",
    "author_association": "MEMBER",
    "body": "We are currently going the route of declaring functions at file level and then attaching them to structs. The encapsulation aspect, though, could still be considered.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890929155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
