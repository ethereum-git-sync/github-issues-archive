{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9278/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9278/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9278/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9278",
  "id": 648663179,
  "node_id": "MDU6SXNzdWU2NDg2NjMxNzk=",
  "number": 9278,
  "title": "Invalid and inconsistent types in ABIs for library functions",
  "user": {
    "login": "haltman-at",
    "id": 35589221,
    "node_id": "MDQ6VXNlcjM1NTg5MjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/haltman-at",
    "html_url": "https://github.com/haltman-at",
    "followers_url": "https://api.github.com/users/haltman-at/followers",
    "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
    "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
    "organizations_url": "https://api.github.com/users/haltman-at/orgs",
    "repos_url": "https://api.github.com/users/haltman-at/repos",
    "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
    "received_events_url": "https://api.github.com/users/haltman-at/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 275027668,
      "node_id": "MDU6TGFiZWwyNzUwMjc2Njg=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/documentation%20:book:",
      "name": "documentation :book:",
      "color": "006b75",
      "default": false,
      "description": ""
    },
    {
      "id": 1017612679,
      "node_id": "MDU6TGFiZWwxMDE3NjEyNjc5",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/protocol%20design%20:crystal_ball:",
      "name": "protocol design :crystal_ball:",
      "color": "8af77e",
      "default": false,
      "description": "Potential changes to ABI, meta data, standard JSON"
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438157609,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjpKQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20impact",
      "name": "low impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are not very noticeable or potential benefits are limited."
    },
    {
      "id": 4438490842,
      "node_id": "LA_kwDOAm_5kc8AAAABCI3-2g",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/should%20have",
      "name": "should have",
      "color": "ffbe6c",
      "default": false,
      "description": "We like the idea but itâ€™s not important enough to be a part of the roadmap."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2020-07-01T04:30:26Z",
  "updated_at": "2022-09-14T17:56:58Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nWhile most library functions don't go in the ABI, `pure` and `view` functions do.  Of course, actually using these is [infamously](https://github.com/ethereum/solidity/issues/6420) [difficult](https://github.com/ethereum/solidity/issues/7530), due to the fact that library selectors are computed differently from other selectors, but they're there.  The specific types that differ are structs, enums, and contracts, which in the signature use the internal name of the type, rather than the usual conversion to an ABI type.\r\n\r\nThe problem is this: In nearly every version of Solidity, including 0.6.10, the ABI parameter entries for enums and contracts put this internal name of the type in the `type` field, rather than the name of the corresponding ABI type.\r\n\r\nNow, this does have the advantage that it allows the selector to be computed correctly by the naive method, without specifically knowing that you're dealing with a library!  (As the ABI still lacks anything to indicate the contract/library distinction.)  But it has the disadvantage that it screws up any more sophisticated attempt to process the ABI, that is expecting something that conforms to the spec.  (Like: You can't actually *encode* with these types!  Without other information, there's nothing to tell us whether a `Blank` is the name of a contract type or the name of a globally-declared enum type.  Web3 and Ethers sure can't handle it, and I'm not about to make Truffle try.)\r\n\r\nI suspect this is simply a bug.  Further evidence for this is that this only seems to happen to enums and contracts -- structs are unaffected.  Even if it's deliberate... well, it should be changed, and the library problem should be handled a different way.  (Having `internalType` goes a long way here, even if we still need something in the ABI to distinguish contracts from libraries.)\r\n\r\nNow, on noticing this, I had to check which versions are affected... it turns out that this behavior goes all the way back to **0.1.5**, a mere two versions after libraries were introduced in 0.1.3.  Given how long this has been around, one might be tempted to say, this isn't a bug, this is just how it works, at least for now.  But I'm still calling it a bug: it breaks the spec; it breaks any processing more sophisticated than computing the selector, such as encoding or decoding; and structs don't work this way and have never worked this way, not since 0.4.17 when it first became possible to pass a struct externally.\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.1.5 -- 0.6.10\r\n- Target EVM version (as per compiler settings): default\r\n- Framework/IDE (e.g. Truffle or Remix): Truffle (for 0.4.12 and later); Remix (for 0.4.11 and earlier)\r\n\r\n## Steps to Reproduce\r\n\r\nTry compiling the following:\r\n\r\n```solidity\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary ABITest {\r\n\r\n  struct Pair {\r\n    uint x;\r\n    uint y;\r\n  }\r\n\r\n  function structy(Pair calldata) external view { //works fine\r\n  }\r\n\r\n  enum Ternary {\r\n    Yes, No, MaybeSo\r\n  }\r\n\r\n  function enumy(Ternary) external view { //problem!\r\n  }\r\n\r\n  function contracty(Blank) external view { //problem!\r\n  }\r\n}\r\n\r\ncontract Blank {\r\n}\r\n```\r\n\r\n(comment things out as appropriate to get it to compile with earlier versions; changing `calldata` to `memory` and `external` to `public` may also be necessary; also changing `view` to `constant` (or just omitting that, since everything went in the ABI prior to 0.5.6))",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9278/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9278/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/652292885",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-652292885",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 652292885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjI5Mjg4NQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-01T09:03:33Z",
    "updated_at": "2020-07-01T09:03:33Z",
    "author_association": "MEMBER",
    "body": "Yeah, I'm sorry this is really a mess. Someone should create a consistent overview of the current state of affairs.\r\n\r\nThe ABI for library functions somehow should include which string is used to compute the function selector and potentially how to encode it. One speciality for library functions are of course storage pointers, which are not part of the ABI. So for `structy`, it makes a big difference if you use `Pair calldata` or `Pair storage` and it should result in a different function selector.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/652292885/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/652663466",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-652663466",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 652663466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjY2MzQ2Ng==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-01T21:48:57Z",
    "updated_at": "2020-07-01T21:49:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, sorry, to be clear, I was implicitly omitting functions that take or return storage pointers, since those aren't put in the ABI.  I said \"pure or view functions\", but what I really meant was \"pure or view functions that neither take nor return storage pointers\".\r\n\r\nOnce you omit those, then, well... you're left with the fact that these ABIs are not valid.  Except for structs.  Those ones are valid for some reason.  Just not enums and contracts.  While I don't know the history here, I can't help but speculate that the decision was made to change it to this broken way in 0.1.5 to make selectors work better, and then this never got revisited, even when structs got added and were done the valid way.\r\n\r\nThis does of course leave the problem of how to alter the ABI to make computing the selector possible, and there are several possible solutions to that, but I'll skip discussing those because that's a separate issue that's already been much discussed already[0].  Because I think that first of all before that, these invalid ABIs need to be changed to conform to the spec.  Sure, tools may get the selector wrong, but that's better than having them, like, just choke on the things.  And I mean, who cares if the selector is right if you can't actually *encode*?\r\n\r\n[0]OK I'll state what I see as the two possible solutions briefly.  They are:\r\n1. Add a `contractKind` field to the ABI -- this makes it technically doable by use of `internalType` (you need some special cases, it's not entirely straightforward, but it's doable; indeed it was while testing some code of mine to do this that this issue came up)\r\n2. Make it so that any function appearing in the ABI gets both the old-style *and* the standard-style selector\r\n\r\n...but again these both have been discussed already elsewhere, so...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/652663466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/655162157",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-655162157",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 655162157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NTE2MjE1Nw==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-07T22:09:29Z",
    "updated_at": "2020-07-07T22:09:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also just to be clear -- I think it makes sense to fix this particular issue *before* sorting out how to handle this problem more generally.  Like right now it's malformed and not even consistent (the one benefit of this way is rendered moot by the fact that structs *don't* work this way -- not that they should (OK, it's also rendered moot by other factors as mentioned above)).  May as well handle that first, since that should be pretty easy, and figure out the bigger problem later.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/655162157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718019804",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-718019804",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 718019804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODAxOTgwNA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-28T15:40:45Z",
    "updated_at": "2020-10-28T15:48:20Z",
    "author_association": "MEMBER",
    "body": "Today I have encountered a bug stemming from the fact that people are generally not aware of this inconsistency (here specifically in case of enums in library ABI): https://github.com/ethereum-ts/TypeChain/issues/216\r\n\r\n@chriseth So, the current behavior clearly needs to be documented so I'm labeling this as `documentation`. But do we also consider any part of it a bug? If so, I think the best way to get it done efficiently would be to create smaller and more specific issues for these things.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718019804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718154540",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-718154540",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 718154540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODE1NDU0MA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-28T19:20:18Z",
    "updated_at": "2020-10-28T19:20:18Z",
    "author_association": "MEMBER",
    "body": "This actually appears to be a pretty widespread problem. I checked `ethers.js` and `eth-abi` (used by Brownie) and none of them handles this properly. \r\n\r\nI reported this as bugs (https://github.com/ethers-io/ethers.js/issues/1126, https://github.com/ethereum/eth-abi/issues/146) but if so many tools have problems with it then maybe we should not worry about backwards compatibility here - they don't work with the current ABI anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718154540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718155464",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-718155464",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 718155464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODE1NTQ2NA==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-28T19:22:11Z",
    "updated_at": "2020-10-28T19:22:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This actually appears to be a pretty widespread problem. I checked `ethers.js` and `eth-abi` (used by Brownie) and none of them handles this properly.\r\n> \r\n> I reported this as bugs ([ethers-io/ethers.js#1126](https://github.com/ethers-io/ethers.js/issues/1126), [ethereum/eth-abi#146](https://github.com/ethereum/eth-abi/issues/146)) but if so many tools have problems with it then maybe we should not worry about backwards compatibility here - they don't work with the current ABI anyway.\r\n\r\nI just want to point out that this is basically the same point I made above. :) :P",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718155464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718160495",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-718160495",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 718160495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODE2MDQ5NQ==",
    "user": {
      "login": "ricmoo",
      "id": 975687,
      "node_id": "MDQ6VXNlcjk3NTY4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/975687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ricmoo",
      "html_url": "https://github.com/ricmoo",
      "followers_url": "https://api.github.com/users/ricmoo/followers",
      "following_url": "https://api.github.com/users/ricmoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/ricmoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ricmoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ricmoo/subscriptions",
      "organizations_url": "https://api.github.com/users/ricmoo/orgs",
      "repos_url": "https://api.github.com/users/ricmoo/repos",
      "events_url": "https://api.github.com/users/ricmoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ricmoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-28T19:31:14Z",
    "updated_at": "2020-10-28T19:31:14Z",
    "author_association": "MEMBER",
    "body": "Is there is actually anyway that ethers can handle this? Is the information required encoded some other way in the ABI?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718160495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718168636",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-718168636",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 718168636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODE2ODYzNg==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-28T19:47:10Z",
    "updated_at": "2020-10-28T19:47:10Z",
    "author_association": "MEMBER",
    "body": "@haltman-at Right. I read that comment a while ago and now missed that point. In any case, I agree with you. I was just investigating a different issue related to enums and while doing it I also checked what the situation is regarding this one. And it confirms what you said - it's bad :(.\r\n\r\n@ricmoo I don't think it is, but @chriseth knows more about the ABI so maybe he'd be able to suggest something. In case of enums people from TypeChain hard-coded it to `uint8` for now (https://github.com/ethereum-ts/TypeChain/issues/216) but that's not great because enums with more than 256 entries are not `uint8`. But to avoid it you'd probably have to somehow figure out how many entries the enum has.\r\n\r\nWe're going to limit enums to `uint8` soon (#10035) but it won't change the situation for older compiler versions. Hard-coding it might be a lesser evil given how rare big enums probably are.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718168636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718195339",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-718195339",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 718195339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODE5NTMzOQ==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-28T20:39:30Z",
    "updated_at": "2020-10-28T20:39:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Note that the `type` field, unlike the `internalType` field, just contains the name of the contract or enum; it doesn't include `enum` or `contract` or `interface` in front of it.  So you'd have to look at the `internalType` field to determine wheter you're looking at an enum or a contract.\r\n\r\nHm, I suppose this actually might be more handleable than I thought, given that:\r\n\r\n1. On 0.5.11 or later, you can use `internalType` as described;\r\n2. On 0.5.10 or earlier, there were no top-level enums, so you can distinguish a contract from an enum by whether there's a period in the name;\r\n3. And then enums can *generally* be assumed to be `uint8` even if that doesn't work all the time.\r\n\r\nThat's pretty hacky.  I mean, it's the sort of thing *I* might just do, but probably not the sort of thing I'd expect anyone else to do. :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/718195339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/721941390",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-721941390",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 721941390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMTk0MTM5MA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-04T19:53:18Z",
    "updated_at": "2020-11-04T19:53:18Z",
    "author_association": "MEMBER",
    "body": "We discussed it on the call today. We really don't want to break library selectors so it would be best to just add extra fields with necessary information. I created a separate issue for the docs to at least push that part forward since it's pretty clear-cut that we need them: #10201.\r\n\r\n@ricmoo Actually, you don't need to know if an enum is `uint8`, `uint16` or larger to ABI-encode it. You can just encode all enums as `uint256` since they always take a full slot.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/721941390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/722042202",
    "html_url": "https://github.com/ethereum/solidity/issues/9278#issuecomment-722042202",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9278",
    "id": 722042202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMjA0MjIwMg==",
    "user": {
      "login": "ricmoo",
      "id": 975687,
      "node_id": "MDQ6VXNlcjk3NTY4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/975687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ricmoo",
      "html_url": "https://github.com/ricmoo",
      "followers_url": "https://api.github.com/users/ricmoo/followers",
      "following_url": "https://api.github.com/users/ricmoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/ricmoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ricmoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ricmoo/subscriptions",
      "organizations_url": "https://api.github.com/users/ricmoo/orgs",
      "repos_url": "https://api.github.com/users/ricmoo/repos",
      "events_url": "https://api.github.com/users/ricmoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ricmoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-05T00:09:02Z",
    "updated_at": "2020-11-05T00:09:02Z",
    "author_association": "MEMBER",
    "body": "@cameel but I do need to know the type for encoding the selector, no? Or is uint256 always used for that too?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/722042202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
