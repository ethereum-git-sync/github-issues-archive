{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12600",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12600/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12600/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12600/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12600",
  "id": 1119520545,
  "node_id": "I_kwDOAm_5kc5Cuoch",
  "number": 12600,
  "title": "[Sol->Yul] Clean up of dirty storage bits in tuple assignment does not happen on inline assembly read",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 2376132438,
      "node_id": "MDU6TGFiZWwyMzc2MTMyNDM4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/codegen%20error",
      "name": "codegen error",
      "color": "000000",
      "default": false,
      "description": "Compiler generates invalid code. Critical."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2022-01-31T14:42:56Z",
  "updated_at": "2022-06-17T13:13:55Z",
  "closed_at": "2022-06-17T13:13:55Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "```\r\ncontract C {\r\n  uint32[] s0;\r\n  constructor(uint32[] memory i0) {\r\n    s0 = i0;\r\n    unchecked {\r\n      (s0, s0[1], s0) = ([3], 4, [5]);\r\n    }\r\n  }\r\n  function f() external returns (uint) {\r\n    uint r;\r\n    assembly {\r\n      mstore(0, s0.slot)\r\n      r := sload(keccak256(0, 32))\r\n    }\r\n    return r;\r\n  }\r\n  function g() external returns (uint32[] memory o0) { o0 = s0; }\r\n}\r\n// ====\r\n// compileViaYul: also\r\n// ----\r\n// constructor(): 0x20, 2, 1, 2 ->\r\n// gas irOptimized: 334331\r\n// gas legacyOptimized: 222560\r\n// f() -> 3\r\n// g() -> 0x20, 1, 3\r\n```\r\n\r\nThe isoltest call to `f()` via IR does not return `3` (instead returns `uint256` 0x00...0403 i.e., `4` placed at index 1 as if the tuple assignment in the constructor was not cleaned up).\r\n\r\nLegacy call to `f()` returns `3`.",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12600/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12600/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1025821914",
    "html_url": "https://github.com/ethereum/solidity/issues/12600#issuecomment-1025821914",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12600",
    "id": 1025821914,
    "node_id": "IC_kwDOAm_5kc49JMza",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-31T14:46:34Z",
    "updated_at": "2022-01-31T14:46:34Z",
    "author_association": "MEMBER",
    "body": "This may be a false positive in the following sense\r\n\r\n```\r\nNote that access via inline assembly is not considered such an operation: If you use inline assembly to access Solidity variables shorter than 256 bits, the compiler does not guarantee that the value is properly cleaned up.\r\n```\r\n\r\nas documented here: https://docs.soliditylang.org/en/latest/internals/variable_cleanup.html\r\n\r\nNonetheless, it would be good if this could be confirmed by another pair of eyes :-)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1025821914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031353120",
    "html_url": "https://github.com/ethereum/solidity/issues/12600#issuecomment-1031353120",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12600",
    "id": 1031353120,
    "node_id": "IC_kwDOAm_5kc49eTMg",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-07T11:17:22Z",
    "updated_at": "2022-02-07T11:17:22Z",
    "author_association": "MEMBER",
    "body": "I don't think this is about cleanup - it is about the order of evaluation of the assignment to the storage variable.\r\nFor Yul, we kind of promise strict left-to-right evaluation, so \r\n```\r\n(s0, s0[1], s0) = ([3], 4, [5]);\r\n```\r\nshould be equivalent to\r\n```\r\ns0 = [3];\r\ns0[1] = 4;\r\ns0 = [5];\r\n```\r\nbut it seems this is not the case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031353120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031355573",
    "html_url": "https://github.com/ethereum/solidity/issues/12600#issuecomment-1031355573",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12600",
    "id": 1031355573,
    "node_id": "IC_kwDOAm_5kc49eTy1",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-07T11:20:20Z",
    "updated_at": "2022-02-07T11:20:20Z",
    "author_association": "MEMBER",
    "body": "I'm also wondering if `s0 = [5]` sets the size to 1.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031355573/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031356671",
    "html_url": "https://github.com/ethereum/solidity/issues/12600#issuecomment-1031356671",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12600",
    "id": 1031356671,
    "node_id": "IC_kwDOAm_5kc49eUD_",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-07T11:21:42Z",
    "updated_at": "2022-02-07T11:21:42Z",
    "author_association": "MEMBER",
    "body": "> I don't think this is about cleanup - it is about the order of evaluation of the assignment to the storage variable. For Yul, we kind of promise strict left-to-right evaluation, so\r\n> \r\n> ```\r\n> (s0, s0[1], s0) = ([3], 4, [5]);\r\n> ```\r\n> \r\n> should be equivalent to\r\n> \r\n> ```\r\n> s0 = [3];\r\n> s0[1] = 4;\r\n> s0 = [5];\r\n> ```\r\n> \r\n> but it seems this is not the case.\r\n\r\nIf it is an order-of-evaluation issue, I don't understand why a call to `f()` via legacy would return `3` (it should also have evaluated the second tuple expression in any case).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031356671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031396097",
    "html_url": "https://github.com/ethereum/solidity/issues/12600#issuecomment-1031396097",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12600",
    "id": 1031396097,
    "node_id": "IC_kwDOAm_5kc49edsB",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-07T12:08:14Z",
    "updated_at": "2022-02-07T12:08:14Z",
    "author_association": "MEMBER",
    "body": "Can you modify it to also return the length? I think in legacy, it just evaluates from right to left and thus the last assignment is `s0 = [3]`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031396097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031477694",
    "html_url": "https://github.com/ethereum/solidity/issues/12600#issuecomment-1031477694",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12600",
    "id": 1031477694,
    "node_id": "IC_kwDOAm_5kc49exm-",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-07T13:36:27Z",
    "updated_at": "2022-02-07T13:36:27Z",
    "author_association": "MEMBER",
    "body": "> Can you modify it to also return the length? I think in legacy, it just evaluates from right to left and thus the last assignment is `s0 = [3]`.\r\n\r\nThe function `g()` in the original post returns the contents of the array by copying it to memory. There both legacy and IR return the same length (`1`) and content (`3`).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1031477694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1150914411",
    "html_url": "https://github.com/ethereum/solidity/issues/12600#issuecomment-1150914411",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12600",
    "id": 1150914411,
    "node_id": "IC_kwDOAm_5kc5EmY9r",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-09T09:51:04Z",
    "updated_at": "2022-06-09T10:02:55Z",
    "author_association": "MEMBER",
    "body": "Simpler reproduction without inline assembly:\r\n```\r\ncontract C {\r\n  uint32[] s;\r\n  constructor()\r\n  {\r\n    s.push();\r\n    s.push();\r\n  }\r\n  function f() external returns (uint)\r\n  {\r\n    (s, s[1], s) = ([0], 4, [0]);\r\n    s.push();\r\n    return s[1];\r\n  }\r\n}\r\n```\r\nHere ``f`` returns ``0`` in legacy code generation, but ``4`` via IR.\r\nIt's basically a case of \"dangling storage references\", since the left-hand-side of the assignment is evaluated to storage references left-to-right before the assignments happening, i.e. ``s[1]`` still refers to the second element of the array and writes to it, bypassing the length check, s.t. a subsequent increase in length using ``.push()`` reveals the dirty storage value...\r\n\r\nI'm not quite sure, why legacy codegen does *not* have this issue, I'd expect both via-IR *and* legacy to suffer from this...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1150914411/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1150951006",
    "html_url": "https://github.com/ethereum/solidity/issues/12600#issuecomment-1150951006",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12600",
    "id": 1150951006,
    "node_id": "IC_kwDOAm_5kc5Emh5e",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-09T10:29:14Z",
    "updated_at": "2022-06-09T11:48:50Z",
    "author_association": "MEMBER",
    "body": "Ok... the following has both legacy and via-IR produce a 4 on ``f()``:\r\n```\r\ncontract C {\r\n  uint32[] s;\r\n  constructor()\r\n  {\r\n    s.push();\r\n    s.push();\r\n  }\r\n  function f() external returns (uint)\r\n  {\r\n    (s[1], s) = (4, [0]);\r\n    s.push();\r\n    return s[1];\r\n  }\r\n}\r\n```\r\n\r\nIf I add another memory-to-storage copy of a size-one-array after the tuple assignment, though, legacy seems to implicitly clear the dirty byte at the end, while via-IR keeps it, i.e. in the following:\r\n```\r\ncontract C {\r\n  uint32[] s;\r\n  constructor()\r\n  {\r\n    s.push();\r\n    s.push();\r\n  }\r\n  function f() external returns (uint)\r\n  {\r\n    (s[1], s) = (4, [0]);\r\n    s = [0];\r\n    s.push();\r\n    return s[1];\r\n  }\r\n}\r\n```\r\nlegacy produces 0, while via-IR produces 4.\r\n\r\nI think what via-IR is missing is an equivalent of libsolidity/codegen/ArrayUtils.cpp:L284-L297 (at least in some cases).\r\nhttps://github.com/ethereum/solidity/blob/9b220a20077b5a5e1c141560170ef7af1ae43978/libsolidity/codegen/ArrayUtils.cpp#L284-L297\r\n\r\nThat explains the difference. But actually, I don't see that much call for adding this to via-IR, so maybe we can just keep the difference here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1150951006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
