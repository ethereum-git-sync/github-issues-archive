{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14494/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14494/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14494/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14494",
  "id": 1851632940,
  "node_id": "I_kwDOAm_5kc5uXa0s",
  "number": 14494,
  "title": "(v0.8.21) Contract code changes with additional files in compilation",
  "user": {
    "login": "kuzdogan",
    "id": 13069972,
    "node_id": "MDQ6VXNlcjEzMDY5OTcy",
    "avatar_url": "https://avatars.githubusercontent.com/u/13069972?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kuzdogan",
    "html_url": "https://github.com/kuzdogan",
    "followers_url": "https://api.github.com/users/kuzdogan/followers",
    "following_url": "https://api.github.com/users/kuzdogan/following{/other_user}",
    "gists_url": "https://api.github.com/users/kuzdogan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kuzdogan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kuzdogan/subscriptions",
    "organizations_url": "https://api.github.com/users/kuzdogan/orgs",
    "repos_url": "https://api.github.com/users/kuzdogan/repos",
    "events_url": "https://api.github.com/users/kuzdogan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kuzdogan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 4372329032,
      "node_id": "LA_kwDOAm_5kc8AAAABBJxySA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/selected%20for%20development",
      "name": "selected for development",
      "color": "ff8e00",
      "default": false,
      "description": "It's on our short-term development"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/solidity/milestones/57",
    "html_url": "https://github.com/ethereum/solidity/milestone/57",
    "labels_url": "https://api.github.com/repos/ethereum/solidity/milestones/57/labels",
    "id": 9494042,
    "node_id": "MI_kwDOAm_5kc4AkN4a",
    "number": 57,
    "title": "0.8.22",
    "description": null,
    "creator": {
      "login": "NunoFilipeSantos",
      "id": 2582498,
      "node_id": "MDQ6VXNlcjI1ODI0OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2582498?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NunoFilipeSantos",
      "html_url": "https://github.com/NunoFilipeSantos",
      "followers_url": "https://api.github.com/users/NunoFilipeSantos/followers",
      "following_url": "https://api.github.com/users/NunoFilipeSantos/following{/other_user}",
      "gists_url": "https://api.github.com/users/NunoFilipeSantos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NunoFilipeSantos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NunoFilipeSantos/subscriptions",
      "organizations_url": "https://api.github.com/users/NunoFilipeSantos/orgs",
      "repos_url": "https://api.github.com/users/NunoFilipeSantos/repos",
      "events_url": "https://api.github.com/users/NunoFilipeSantos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NunoFilipeSantos/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 17,
    "closed_issues": 7,
    "state": "open",
    "created_at": "2023-06-05T13:39:54Z",
    "updated_at": "2023-09-04T17:27:34Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 12,
  "created_at": "2023-08-15T15:18:49Z",
  "updated_at": "2023-09-05T13:20:41Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Here I am again with another issue with extra files in compilation causing trouble ðŸ«¡ \r\n\r\nBy extra files I mean files that the target contract does not depend on.\r\n\r\n## Recap \r\nFirst a recap on previous issues similarly on extra files in compilation:\r\n1. https://github.com/ethereum/solidity/issues/12281 \r\nThis was an older issue that seems to affect the AST IDs in `0.6.12` and `0.7.0`. We also encountered this and handled in Sourcify's case https://github.com/ethereum/sourcify/issues/618\r\n2. https://github.com/ethereum/solidity/issues/14250 \r\nI've encountered this in a `0.8.19` contract and got fixed in `0.8.21` with https://github.com/ethereum/solidity/pull/14311.\r\n\r\n\r\n## Current Issue\r\nI've encountered the current issue in https://github.com/ethereum/sourcify/issues/1065. \r\n\r\nMy initial suspicion was that it's an instance of the 2. case because the contract was a `0.8.19` contract. Unfortunately, I was able to reproduce the case in `0.8.21`.\r\n\r\nAlthough the 1. case should have been resolved, I suspect it still can be related because **the metadata hashes are identical** but the bytecodes differ. \r\n\r\n### To reproduce\r\nI named inputs as \"hardhat\" and \"sourcify\". \"Sourcify\" uses the minimum number of source files, because it is based on the ones listed in the contract metadata. \"Hardhat\" uses extra because by default Hardhat inputs everything to the compiler. Sourcify has two different inputs `0.8.19` and `0.8.21` because it includes the `evmVersion` inside the input i.e. `paris` vs `shanghai`.\r\n\r\n[N2MERC721-hardhat-input.json.txt](https://github.com/ethereum/solidity/files/12345384/N2MERC721-hardhat-input.json.txt)\r\n[N2MERC721-sourcify-input-0.8.21.json.txt](https://github.com/ethereum/solidity/files/12345386/N2MERC721-sourcify-input.json.txt)\r\n[N2MERC721-sourcify-input-0.8.19.json.txt](https://github.com/ethereum/solidity/files/12345498/N2MERC721-sourcify-input-0.8.19.json.txt)\r\n\r\nYou can see the two inputs differ only in some extra files + some of the compiler settings \r\n<details>\r\n<summary> These are the extra files in Hardhat input </summary>\r\n\r\n```js\r\n[\r\n  '@nfts2me/contracts/interfaces/IN2MBeaconFactory.sol',\r\n  '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol',\r\n  '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol',\r\n  '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol',\r\n  '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol',\r\n  '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol',\r\n  '@openzeppelin/contracts/governance/utils/IVotes.sol',\r\n  '@openzeppelin/contracts/proxy/Proxy.sol',\r\n  '@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol',\r\n  '@openzeppelin/contracts/token/ERC1155/IERC1155.sol',\r\n  '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol',\r\n  '@openzeppelin/contracts/token/ERC721/IERC721.sol',\r\n  '@openzeppelin/contracts/utils/introspection/IERC165.sol',\r\n  'contracts/beacon/N2MERC1155Upgradeable.sol',\r\n  'contracts/beacon/N2MERC721Upgradeable.sol',\r\n  'contracts/beacon/N2MUpgradeable.sol',\r\n  'contracts/interfaces/IN2M_ERCBase.sol',\r\n  'contracts/interfaces/IN2M_ERCCommon.sol',\r\n  'contracts/interfaces/IN2M_ERCLibrary.sol',\r\n  'contracts/interfaces/IN2M_ERCStorage.sol',\r\n  'contracts/interfaces/IN2MBeaconFactory.sol',\r\n  'contracts/interfaces/IN2MCrossFactory.sol',\r\n  'contracts/interfaces/IN2MERC1155.sol',\r\n  'contracts/interfaces/IN2MERC721.sol',\r\n  'contracts/interfaces/IOperatorFilterRegistry.sol',\r\n  'contracts/interfaces/IReverseRegistrar.sol',\r\n  'contracts/N2MERC1155.sol',\r\n  'contracts/ownable/NFTOwnableUpgradeable.sol',\r\n  'contracts/TextUtils.sol'\r\n]\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary> Also leaving the JS script I used to check the differences of the keys of `.sources` in the JSON inputs </summary>\r\n\r\nUsage:\r\n`node checkFileKeysDifferences.js solcInput-1.json solcInput-2.json`\r\n\r\n```js\r\nconst fs = require(\"fs\");\r\n\r\nfunction findKeyDifferences(file1, file2) {\r\n  const json1 = JSON.parse(fs.readFileSync(file1, \"utf8\"));\r\n  const json2 = JSON.parse(fs.readFileSync(file2, \"utf8\"));\r\n\r\n  const sources1 = new Set(Object.keys(json1.sources) || []);\r\n  const sources2 = new Set(Object.keys(json2.sources) || []);\r\n\r\n  const keysOnlyInFile1 = Array.from(sources1).filter(\r\n    (key) => !sources2.has(key)\r\n  );\r\n  const keysOnlyInFile2 = Array.from(sources2).filter(\r\n    (key) => !sources1.has(key)\r\n  );\r\n\r\n  return {\r\n    keysOnlyInFile1,\r\n    keysOnlyInFile2,\r\n  };\r\n}\r\n\r\n// Retrieve file paths from command-line arguments\r\nconst [file1Path, file2Path] = process.argv.slice(2);\r\n\r\nif (!file1Path || !file2Path) {\r\n  console.log(\"Please provide two file paths as command-line arguments.\");\r\n  process.exit(1);\r\n}\r\n\r\nconst { keysOnlyInFile1, keysOnlyInFile2 } = findKeyDifferences(\r\n  file1Path,\r\n  file2Path\r\n);\r\n\r\nconsole.log(\"Keys only in file 1:\", keysOnlyInFile1);\r\nconsole.log(\"Keys only in file 2:\", keysOnlyInFile2);\r\n```\r\n\r\n</details>\r\n\r\nTo extract the runtime bytecode:\r\n```\r\ncat N2MERC721-sourcify-input-0.8.19.json | solc --standard-json | jq '.contracts.\"contracts/N2MERC721.sol\".N2MERC721.evm.deployedBytecode.object' > N2MERC721-0.8.19-sourcify-runtime-bytecode-from-solc.txt\r\n```\r\n\r\n### My Bytecode outputs\r\n[N2MERC721-0.8.21-sourcify-runtime-bytecode.txt](https://github.com/ethereum/solidity/files/12345499/N2MERC721-0.8.21-sourcify-runtime-bytecode.txt)\r\n[N2MERC721-0.8.21-hardhat-runtime-bytecode.txt](https://github.com/ethereum/solidity/files/12345501/N2MERC721-0.8.21-hardhat-runtime-bytecode.txt)\r\n[N2MERC721-0.8.19-sourcify-runtime-bytecode.txt](https://github.com/ethereum/solidity/files/12345502/N2MERC721-0.8.19-sourcify-runtime-bytecode.txt)\r\n[N2MERC721-0.8.19-hardhat-runtime-bytecode.txt](https://github.com/ethereum/solidity/files/12345503/N2MERC721-0.8.19-hardhat-runtime-bytecode.txt)\r\n\r\nTo check the diff:\r\n```\r\ngit diff --word-diff --word-diff-regex=. N2MERC721-0.8.19-hardhat-runtime-bytecode.txt N2MERC721-0.8.19-sourcify-runtime-bytecode.txt\r\n```\r\n\r\nWill give you a diff like this:\r\n<img width=\"1045\" alt=\"image\" src=\"https://github.com/ethereum/solidity/assets/13069972/930e94dd-33e4-4146-94fe-19f730539948\">\r\n\r\n## Environment\r\n\r\n- Compiler version: `0.8.19` and `0.8.21` (both Emscripten and Darwin.appleclang)  \r\n- Target EVM version (as per compiler settings): `paris` and `shanghai`\r\n- Framework/IDE (e.g. Truffle or Remix): none\r\n- EVM execution environment / backend / blockchain client:\r\n- Operating system: MacOS\r\n\r\n\r\nAgain, one particular thing that got my attention was that the metadata hashes were identical in all cases. This leaves me thinking if this is similar to the 1. case I mentioned.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14494/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14494/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679168791",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1679168791",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1679168791,
    "node_id": "IC_kwDOAm_5kc5kFhUX",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-15T15:45:29Z",
    "updated_at": "2023-08-15T15:45:29Z",
    "author_association": "MEMBER",
    "body": "Ok, I can so far confirm that this will result in different libevmasm assembly.\r\nThe optimized IR differs in two ways, both due to differing AST IDs:\r\n- identifier names - that should not affect assembling these days, though\r\n- string identifiers for immutables - that may be worth a look, maybe we missed an effect of that",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679168791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679170311",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1679170311",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1679170311,
    "node_id": "IC_kwDOAm_5kc5kFhsH",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-15T15:46:40Z",
    "updated_at": "2023-08-15T15:46:40Z",
    "author_association": "MEMBER",
    "body": "The assembly differs in some details in the stack ordering (I e.g. see different swaps). Haven't been able to trace down a reason yet.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679170311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679173032",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1679173032",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1679173032,
    "node_id": "IC_kwDOAm_5kc5kFiWo",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-15T15:48:42Z",
    "updated_at": "2023-08-15T15:48:42Z",
    "author_association": "MEMBER",
    "body": "Interestingly, the difference in swapping is not equivalent, e.g. I'm seeing stuff like\r\n```\r\n-      dup2\r\n+      dup3\r\n```\r\n\r\nSo this may also be non-determinism in the stack layouts (yielding different stack layouts across basic blocks resulting in differing stack shuffling). But I'd rather expect it to be a secondary effect of something else.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679173032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679504604",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1679504604",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1679504604,
    "node_id": "IC_kwDOAm_5kc5kGzTc",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-15T19:45:02Z",
    "updated_at": "2023-08-15T19:45:02Z",
    "author_association": "MEMBER",
    "body": "But ok - optimized Yul being identical modulo AST IDs, but libevmasm assembly differing points towards the code transform",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679504604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679506375",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1679506375",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1679506375,
    "node_id": "IC_kwDOAm_5kc5kGzvH",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-15T19:46:21Z",
    "updated_at": "2023-08-15T19:46:21Z",
    "author_association": "MEMBER",
    "body": "Independently of solving this particular issue, though, since we seem to keep running into, we should look into test coverage for this. So far, the ultimate reason has been offsets in the AST IDs, so we should consider a bytecode comparison run with an artificial offset in the AST IDs - that may catch more of these cases, resp. avoid them in the future.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1679506375/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1680477730",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1680477730",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1680477730,
    "node_id": "IC_kwDOAm_5kc5kKg4i",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-16T12:03:20Z",
    "updated_at": "2023-08-16T12:04:13Z",
    "author_association": "MEMBER",
    "body": "Looking more closely at this again, there's actually a small differences in the optimized Yul that may explain the divergence, so it's may be the yul optimizer after all.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1680477730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1680528655",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1680528655",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1680528655,
    "node_id": "IC_kwDOAm_5kc5kKtUP",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-16T12:38:48Z",
    "updated_at": "2023-08-16T12:39:12Z",
    "author_association": "MEMBER",
    "body": "The difference is an additional variable in one yul function:\r\n\r\n```yul\r\n            function fun_upperBinaryLookup(var_self_3885_slot, var_key, var_low, var_high) -> var\r\n            {\r\n\r\n                for { }\r\n                                                       lt(var_low, var_high)\r\n\r\n                { }\r\n                {\r\n\r\n                    let expr := and(var_low, var_high)\r\n\r\n                    let _1 := 1\r\n                    let sum := add(expr, shr(_1, xor(var_low, var_high)))\r\n\r\n                    if gt(expr, sum) { panic_error_0x11() }\r\n\r\n                    let var_mid := sum\r\n\r\n                    mstore( 0, var_self_3885_slot)\r\n\r\n                    let _2 := 0xffffffff\r\n                    let cleaned := and(sload( add(keccak256( 0, 0x20), sum)), _2)\r\n\r\n                    switch gt( cleaned, and( var_key, _2))\r\n                    case 0 {\r\n\r\n                        let sum_1 := add(sum, _1)\r\n                        if gt(sum, sum_1) { panic_error_0x11() }\r\n\r\n                        var_low := sum_1\r\n                    }\r\n                    default\r\n                    {\r\n\r\n                        var_high := var_mid\r\n                    }\r\n                }\r\n\r\n                var := var_high\r\n            }\r\n```\r\n\r\nvs\r\n\r\n```yul\r\n            function fun_upperBinaryLookup(var_self_slot, var_key, var_low, var_high) -> var\r\n            {\r\n\r\n                for { }\r\n                                                       lt(var_low, var_high)\r\n\r\n                { }\r\n                {\r\n\r\n                    let expr := and(var_low, var_high)\r\n\r\n                    let _1 := 1\r\n                    let sum := add(expr, shr(_1, xor(var_low, var_high)))\r\n\r\n                    if gt(expr, sum) { panic_error_0x11() }\r\n\r\n                    mstore( 0, var_self_slot)\r\n\r\n                    let _2 := 0xffffffff\r\n                    let cleaned := and(sload( add(keccak256( 0, 0x20), sum)), _2)\r\n\r\n                    switch gt( cleaned, and( var_key, _2))\r\n                    case 0 {\r\n\r\n                        let sum_1 := add(sum, _1)\r\n                        if gt(sum, sum_1) { panic_error_0x11() }\r\n\r\n                        var_low := sum_1\r\n                    }\r\n                    default\r\n                    {\r\n\r\n                        var_high := sum\r\n                    }\r\n                }\r\n\r\n                var := var_high\r\n            }\r\n```\r\n\r\n\r\n``var_mid`` is eliminated in one version.\r\n\r\nEliminating the variable manually yields the same bytecode again (so it's not the naming in yul identifiers or immutables).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1680528655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1692358415",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1692358415",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1692358415,
    "node_id": "IC_kwDOAm_5kc5k31cP",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-24T20:24:43Z",
    "updated_at": "2023-08-24T20:28:06Z",
    "author_association": "MEMBER",
    "body": "I played with this today with the intention of preparing a bytecode comparison run for #14495. Unfortunately a simple addition of a single file with pragmas or even a simple contract to compilation does not seem to break things - bytecode check passes just fine. Something more complicated is needed to trigger this.\r\n\r\nSo I tried to reduce this issue to a minimal example to figure out the necessary conditions and here's what I was left with:\r\n\r\n```bash\r\nmkdir @\r\n\r\ncat <<=== > a.sol\r\n    import \"@/za.sol\";\r\n    import \"b.sol\";\r\n\r\n    contract A is B {\r\n        function a() public pure {\r\n            zb();\r\n        }\r\n    }\r\n===\r\n\r\ncat <<=== > b.sol\r\n    import \"@/zb.sol\";\r\n    import \"c.sol\";\r\n\r\n    abstract contract B is C {}\r\n===\r\n\r\ncat <<=== > c.sol\r\n    abstract contract C\r\n    {\r\n        function f() public pure {}\r\n\r\n        function c() public view returns (uint) {\r\n            try this.f() { return 0; }\r\n            catch {}\r\n        }\r\n    }\r\n===\r\n\r\ncat <<=== > @/za.sol\r\n    import \"@/zc.sol\";\r\n===\r\n\r\ncat <<=== > @/zb.sol\r\n    import \"@/zc.sol\";\r\n\r\n    function zb() pure {\r\n        zc();\r\n    }\r\n===\r\n\r\ncat <<=== > @/zc.sol\r\n    function zc() pure returns (bytes memory returndata) {\r\n        if (returndata.length == 0) {\r\n            return \"\";\r\n        }\r\n    }\r\n===\r\n\r\ndiff --color --unified \\\r\n    <(solc a.sol b.sol --bin --via-ir --optimize | grep '======= a.sol:A =======' --after-context=2 | fold --width 100) \\\r\n    <(solc a.sol       --bin --via-ir --optimize | grep '======= a.sol:A =======' --after-context=2 | fold --width 100)\r\n```\r\n\r\nI could not go below 6 files or get rid of a subdirectory, though I suspect this is needed only due to the way it affects the import/compilation order and examples without it should be possible as well.\r\n\r\nThe import pattern goes like this:\r\n\r\n```\r\naâ”€â”€â–ºzaâ”€â”€â–ºzc\r\nâ”‚         â–²\r\nâ–¼         â”‚\r\nbâ”€â”€â–ºzbâ”€â”€â”€â”€â”˜\r\nâ”‚\r\nâ–¼\r\nc\r\n```\r\n\r\nBut the pattern itself is not enough. The `try`/`catch` and all the other calls are necessary and must also be placed in specific files.\r\n\r\nNot sure if I should continue with the bytecode check in that case. Seems like it will be hard to come up with something that does not cause issues by itself, but does when combined with some random code examples and is not simply this specific case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1692358415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1697683430",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1697683430",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1697683430,
    "node_id": "IC_kwDOAm_5kc5lMJfm",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-29T15:32:40Z",
    "updated_at": "2023-08-29T15:32:40Z",
    "author_association": "MEMBER",
    "body": "Sadly, I think what you found there is a completely unrelated issue. In your case I see a different order of Yul functions in optimized IR code, whereas in the orginally posted example, I see a single variable not being eliminated from one Yul function. The underlying cause may still be the same, but the symptoms are different enough that I'd actually expect two causes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1697683430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1697732594",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1697732594",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1697732594,
    "node_id": "IC_kwDOAm_5kc5lMVfy",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-08-29T15:58:15Z",
    "updated_at": "2023-08-30T11:35:36Z",
    "author_association": "MEMBER",
    "body": "But yeah, since it then looks like it's non-trivial to guard against these cases by traditional testing, I wonder if fuzzing can help (pinging @bshastry). To summarize the overreaching problem here for @bshastry: We want to guarantee that the bytecode the compiler produces for a contract ``A`` is the same, if all the sources and compiler settings involved in generating code for ``A`` are the same. However, in via-IR code generation we keep hitting cases, in which adding completely unrelated source files (e.g. for a contract ``B``) to the same compiler run, will affect the bytecode of contract `A`. The idea would be to generate two random source files, each containing a random contract, and compile those individually (using the optimized via-IR pipeline) first, and then check that the compiler produces identical bytecode for each of them, if both are compiled at the same time.\r\nI'd imagine setting up a fuzzing pipeline for this should be rather simple - and we do have the cases above still open on develop currently, so we could see if we get them reported by the fuzzer as a sanity check.\r\n\r\nThe target here would not be to find security vulnerabilities, but compiler misbehaviour that's causing issues for tooling.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1697732594/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1705258076",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1705258076",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1705258076,
    "node_id": "IC_kwDOAm_5kc5lpCxc",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-04T13:16:00Z",
    "updated_at": "2023-09-04T13:16:00Z",
    "author_association": "MEMBER",
    "body": "Idea from the call: create a `NameRandomizer` step and use it with fuzzing or bytecode comparison to check if the bytecode changes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1705258076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1706611041",
    "html_url": "https://github.com/ethereum/solidity/issues/14494#issuecomment-1706611041",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14494",
    "id": 1706611041,
    "node_id": "IC_kwDOAm_5kc5luNFh",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-05T13:20:40Z",
    "updated_at": "2023-09-05T13:20:40Z",
    "author_association": "MEMBER",
    "body": "I just had another quick look at https://github.com/ethereum/solidity/issues/14494#issuecomment-1692358415 - that indeed has a differing order of functions in unoptimized IR already, so it's indeed a different issue that already occurs in via-IR code generation and not only during optimization (the original case of this issue is confirmed in the optimizer, since it vanishes if we ignore the name hints in the name dispenser of the yul optimizer)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1706611041/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
