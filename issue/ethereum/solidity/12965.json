{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12965/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12965/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12965/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12965",
  "id": 1217927352,
  "node_id": "I_kwDOAm_5kc5ImBi4",
  "number": 12965,
  "title": "Response Status Codes via require(expression, errorString, optStatusCode)",
  "user": {
    "login": "QuintonC",
    "id": 4250423,
    "node_id": "MDQ6VXNlcjQyNTA0MjM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4250423?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/QuintonC",
    "html_url": "https://github.com/QuintonC",
    "followers_url": "https://api.github.com/users/QuintonC/followers",
    "following_url": "https://api.github.com/users/QuintonC/following{/other_user}",
    "gists_url": "https://api.github.com/users/QuintonC/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/QuintonC/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/QuintonC/subscriptions",
    "organizations_url": "https://api.github.com/users/QuintonC/orgs",
    "repos_url": "https://api.github.com/users/QuintonC/repos",
    "events_url": "https://api.github.com/users/QuintonC/events{/privacy}",
    "received_events_url": "https://api.github.com/users/QuintonC/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4699440809,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvGqQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/closed%20due%20inactivity",
      "name": "closed due inactivity",
      "color": "91535E",
      "default": false,
      "description": "The issue/PR was automatically closed due to inactivity."
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2022-04-27T22:01:53Z",
  "updated_at": "2023-04-04T12:04:27Z",
  "closed_at": "2023-04-04T12:04:27Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\nHi!\r\n\r\nFirst and foremost, thanks for taking the time to consider anything that I might outline below.\r\n\r\nI'd like to consider, present, and question the addition of a standardized list of [response codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) that can be returned as an exception within an assertion or requirement (`assert` or `require`). I'm **not** proposing that the status codes be the same status codes as the ones that we see with HTTP responses, but that we implement a _similar_ behavior.\r\n\r\nDuring the creation of my first minting front-end experience, I found myself first looking into [ethers](https://github.com/ethers-io/ethers.js/) to see if this was something that would be documented on their end (handling status responses from the contracts, despite what the contract type might be).\r\n\r\nWhat I then quickly realized was that this wouldn't be a core functionality of an interface to a smart contract, but perhaps something that would rather be a fundamental, core piece of the language involved in writing contracts (therefore being contract-type independent).\r\n\r\nWhile I understand that this could be a breaking change, I think we can consider the possibility of making the parameter optional until a future stable release, allowing individuals who are writing the contract to experiment with the addition.\r\n\r\n## Motivation\r\n\r\nDuring the creation of a minting site, I was interfacing with our smart contract and looking for specific error response codes. While this doesn't necessarily solve the problem for the front-end, as it would require additional work from the team over at ethers, it certainly is a step in the right direction. \r\n\r\nConsider the following snippet of code:\r\n```javascript\r\ninterface MintResponseType {\r\n  mintSuccessful: boolean;\r\n  message: string;\r\n  payload: any;\r\n}\r\n\r\nconst mintResponseErrorHandling = (err: any): MintResponseType => {\r\n  ...\r\n  } else if (err.message.includes('Sale is not active')) {\r\n    return {\r\n      mintSuccessful: false,\r\n      message:\r\n        'Mint is not active. Please come back once we begin our minting process.',\r\n      payload: err,\r\n    };\r\n  } else if (err.message.includes('Invalid signature')) {\r\n    return {\r\n      mintSuccessful: false,\r\n      message: 'Mint failed due to an invalid signature. Please try again.',\r\n      payload: err,\r\n    };\r\n  }\r\n  ...\r\n};\r\n```\r\n\r\nNow let's consider it with the inclusion of standardized response status codes:\r\nConsider the following snippet of code:\r\n```javascript\r\ninterface MintResponseType {\r\n  mintSuccessful: boolean;\r\n  message: string; // could additionally return the message returned from the require Error(string)\r\n  payload: EthersSolidityError;\r\n}\r\n\r\nconst mintResponseErrorHandling = ({errorString, status}: EthersSolidityError): MintResponseType => {\r\n  ...\r\n  } else if (status.code === 500) {\r\n    return {\r\n      mintSuccessful: false,\r\n      message:\r\n        'Mint is not active. Please come back once we begin our minting process.',\r\n      payload: err,\r\n    };\r\n  } else if (status.code === 501) {\r\n    return {\r\n      mintSuccessful: false,\r\n      message: 'Mint failed due to an invalid signature. Please try again.',\r\n      payload: err,\r\n    };\r\n  }\r\n  ...\r\n};\r\n```\r\n\r\n## Specification\r\n\r\nThe current markup is `require(expression, Error(string))`, I believe that we could add an optional parameter to the end, called it statusCode.\r\n\r\nThe resulting markup would be `require(expression, Error(string) , statusCode?)`\r\n\r\n## Backwards Compatibility\r\n\r\nThis should result in a completely backwards compatible integration given that the `statusCode` could be an optional, standardized number (e.g. 200 (success), 410 (insufficient funds, etc)).\r\n\r\n## Additional Information / Concerns\r\n\r\nWhile this would result in the potential need for a community-driven vote on which status codes represent what, and could lead to a long implementation time, I think it is a great future for the future of the language and for the future of best-practice contract negotiations between contract and front-end.\r\n\r\nThis would certainly lead to some additional work from other packages (ethers and moralis to name a couple),  it certainly seems like a great forward direction.\r\n\r\n## Edits\r\n\r\nAny time that I edit this issue, I will post a TL;DR or bulleted list of edits here.\r\n* Edited title from: **Response Status Codes via require(comparison, statusCode, message)** to **Response Status Codes via require(expression, errorString, optStatusCode)**\r\n\r\nThanks again for reading ✌️",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12965/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12965/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112108933",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1112108933",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1112108933,
    "node_id": "IC_kwDOAm_5kc5CSW-F",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T11:49:28Z",
    "updated_at": "2022-04-28T11:49:28Z",
    "author_association": "MEMBER",
    "body": "This looks incompatible to the user-defined error feature. Why do you think the user-defined error feature cannot solve the same problem?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112108933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112179076",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1112179076",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1112179076,
    "node_id": "IC_kwDOAm_5kc5CSoGE",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T13:05:19Z",
    "updated_at": "2022-04-28T13:08:01Z",
    "author_association": "MEMBER",
    "body": "Yeah, your examples seem to be assuming that the client is differentiating errors by their message but this is not necessary at all with the new custom error feature. Currently the compiler allows you to do this:\r\n\r\n```solidity\r\nerror SaleIsNotActive();\r\nerror InvalidSignature();\r\n\r\n...\r\n\r\ncontract C {\r\n    function doStuff() public {\r\n        ...\r\n        if (signatureNotValid)\r\n            revert InvalidSignature();\r\n        ...\r\n    }\r\n}\r\n```\r\nAnd on the client side you can just compare the error signature instead of relying on the string.\r\n\r\nYou could even implement some custom scheme of error codes that way if that's what you prefer:\r\n```solidity\r\nerror MintError(string message, uint code);\r\n\r\n...\r\n\r\n        if (signatureNotValid)\r\n            revert MintError(\"Mint failed due to an invalid signature. Please try again.\", 501);\r\n\r\n...\r\n```\r\n\r\nI'm not sure if a standard error code scheme would actually be viable. In different domains you'll have very different reasons for reverts. Maybe you could gather some common reasons publish a community-maintained list of recommended error signatures but it will be far from complete. Any project will still need some specific error codes for their own needs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112179076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112181001",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1112181001",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1112181001,
    "node_id": "IC_kwDOAm_5kc5CSokJ",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T13:07:11Z",
    "updated_at": "2022-04-28T13:07:11Z",
    "author_association": "MEMBER",
    "body": "By the way, here's an earlier feature request for a feature that would allow defining error codes: #9813. Not the same thing but somewhat related.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112181001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112341744",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1112341744",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1112341744,
    "node_id": "IC_kwDOAm_5kc5CTPzw",
    "user": {
      "login": "QuintonC",
      "id": 4250423,
      "node_id": "MDQ6VXNlcjQyNTA0MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4250423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QuintonC",
      "html_url": "https://github.com/QuintonC",
      "followers_url": "https://api.github.com/users/QuintonC/followers",
      "following_url": "https://api.github.com/users/QuintonC/following{/other_user}",
      "gists_url": "https://api.github.com/users/QuintonC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QuintonC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QuintonC/subscriptions",
      "organizations_url": "https://api.github.com/users/QuintonC/orgs",
      "repos_url": "https://api.github.com/users/QuintonC/repos",
      "events_url": "https://api.github.com/users/QuintonC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QuintonC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T15:22:24Z",
    "updated_at": "2022-04-28T15:22:24Z",
    "author_association": "NONE",
    "body": "> This looks incompatible to the user-defined error feature. Why do you think the user-defined error feature cannot solve the same problem?\r\n\r\nCould you provide some more context about what makes this incompatible? I'm looking to add a feature to the core language. Sure, it's not compatible in its current state, this is an addition the core language in the hopes of standardizing errors that are thrown from contracts when conditions are not met, while allowing users to still return a user-defined string that can be shown on the front end.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112341744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112371070",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1112371070",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1112371070,
    "node_id": "IC_kwDOAm_5kc5CTW9-",
    "user": {
      "login": "QuintonC",
      "id": 4250423,
      "node_id": "MDQ6VXNlcjQyNTA0MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4250423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QuintonC",
      "html_url": "https://github.com/QuintonC",
      "followers_url": "https://api.github.com/users/QuintonC/followers",
      "following_url": "https://api.github.com/users/QuintonC/following{/other_user}",
      "gists_url": "https://api.github.com/users/QuintonC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QuintonC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QuintonC/subscriptions",
      "organizations_url": "https://api.github.com/users/QuintonC/orgs",
      "repos_url": "https://api.github.com/users/QuintonC/repos",
      "events_url": "https://api.github.com/users/QuintonC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QuintonC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T15:48:54Z",
    "updated_at": "2022-04-28T15:48:54Z",
    "author_association": "NONE",
    "body": "> Yeah, your examples seem to be assuming that the client is differentiating errors by their message but this is not necessary at all with the new custom error feature. Currently the compiler allows you to do this:\r\n\r\nI think perhaps my code samples under Motivation have thrown people off as those are front-end samples.\r\n\r\nI'm reading a bit more through what is available in the docs to try and understand your response as well (I'm a front-end developer and new to working with Solidity contracts)\r\n\r\nHowever, let's consider the following two samples with my suggestion: \r\n\r\n### Original Code Sample\r\n```solidity\r\n    /**\r\n     * @notice Mint the specified number of token using a signature\r\n     * @param amount Of tokens to mint\r\n     * @param signature Ethereum signed message of transaction sender's address, created by signer\r\n     */\r\n    function mint(uint256 amount, bytes memory signature) public virtual payable nonReentrant {\r\n        require(saleActive, \"Sale is not active\");\r\n        require(_totalMinted() + amount <= MAX_SUPPLY, \"Insufficient supply\");\r\n        require(msg.value == mintPrice * amount, \"Invalid Ether amount sent\");\r\n        require(addressMinted[_msgSender()] + amount <= maxPerAddress, \"Insufficient mints available\");\r\n\r\n        require(signer == ECDSA.recover(\r\n            ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_msgSender()))),\r\n            signature\r\n        ), \"Invalid signature\");\r\n\r\n        _safeMint(_msgSender(), amount);\r\n        addressMinted[_msgSender()] += amount;\r\n    }\r\n```\r\n\r\n### Suggested Code Sample\r\n```solidity\r\n    /**\r\n     * @notice Mint the specified number of token using a signature\r\n     * @param amount Of tokens to mint\r\n     * @param signature Ethereum signed message of transaction sender's address, created by signer\r\n     */\r\n    function mint(uint256 amount, bytes memory signature) public virtual payable nonReentrant {\r\n        require(saleActive, \"Sale is not active\", 1000);\r\n        require(_totalMinted() + amount <= MAX_SUPPLY, \"Insufficient supply\", 1200);\r\n        require(msg.value == mintPrice * amount, \"Invalid Ether amount sent\", 1404);\r\n        require(addressMinted[_msgSender()] + amount <= maxPerAddress, \"Insufficient mints available\", 1501);\r\n\r\n        require(signer == ECDSA.recover(\r\n            ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_msgSender()))),\r\n            signature\r\n        ), \"Invalid signature\", 1505);\r\n\r\n        _safeMint(_msgSender(), amount);\r\n        addressMinted[_msgSender()] += amount;\r\n    }\r\n```\r\n\r\nTo add to the two samples above, the numbers, (**1000, 1200, 1404, 1501, 1505**) are simply just random numbers for the sake of throwing together a quick sample.\r\n\r\nUsing the custom error feature you might have something such as this instead (pulled from [docs](https://docs.soliditylang.org/en/v0.8.13/abi-spec.html?highlight=error#errors)).\r\n```solidity\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.4;\r\n\r\ncontract TestToken {\r\n    error InsufficientBalance(uint256 available, uint256 required, StatusCode errorCode);\r\n    function transfer(address /*to*/, uint amount) public pure {\r\n        revert InsufficientBalance(0, amount, 1300);\r\n    }\r\n}\r\n```\r\n\r\n## Notes\r\n\r\n- This allows front-end developers to do simpler comparisons to detect the response from contract transactions.\r\n- Contracts currently only return a string (see the errors under the Motivation section [above](https://github.com/ethereum/solidity/issues/12965#issue-1217927352)). Consider the future when contracts are used across more than one Web3 site, not just a minting site. There could be a language barrier, or... what happens when in a DOA setting, the world language (EN, FR, etc.) of that error changes as voted on by the DAO? How do these multiple sites then handle the change or language differences? Status codes are numerical and independent of world language.\r\n- On the front end, instead of comparing what is returned from a string (see original code samples under [Motivation](https://github.com/ethereum/solidity/issues/12965#issue-1217927352)) where we are seeing whether or not a string includes a specific sub-set of strings.\r\n- The goal is to unify the collaboration between contract negotiation/contract developers and front-end developers as they await the response from the contract transaction.\r\n- The goal is to aim toward standardizing the practice of error handling and return types. This is not a 100% effective solution, as @cameel outlined, \"In different domains, you'll have very different reasons for reverts. [...] Any project will still need some specific error codes for their own needs.\"'\r\n- To your point, developers at the moment could currently define a list of stringified numbers and the front end could simply check if the error sent back from the contract was equivalent, with the contract itself specifying the valid status codes.\r\n- As @cameel also outlined above, we would need to gather common reasons or rather, common error codes that are used across the community and utilize those errors that the community as a whole agrees on.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112371070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112403479",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1112403479",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1112403479,
    "node_id": "IC_kwDOAm_5kc5CTe4X",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T16:18:35Z",
    "updated_at": "2022-04-28T16:19:00Z",
    "author_association": "MEMBER",
    "body": "> Contracts currently only return a string\r\n\r\nThat's not really true. See the section on [`revert`](https://docs.soliditylang.org/en/latest/control-structures.html#revert).\r\n\r\nYour example would look like this with custom errors:\r\n```solidity\r\n    error SaleNotActive();\r\n    error InsufficientSupply();\r\n    error InvalidEtherAmount();\r\n    error InsufficientMints();\r\n    error InvalidSignature();\r\n\r\n    /**\r\n     * @notice Mint the specified number of token using a signature\r\n     * @param amount Of tokens to mint\r\n     * @param signature Ethereum signed message of transaction sender's address, created by signer\r\n     */\r\n    function mint(uint256 amount, bytes memory signature) public virtual payable nonReentrant {\r\n        if (!saleActive) revert SaleNotActive();\r\n        if (_totalMinted() + amount > MAX_SUPPLY) revert InsufficientSupply();\r\n        if (msg.value != mintPrice * amount) revert InvalidEtherAmount();\r\n        if (addressMinted[_msgSender()] + amount > maxPerAddress) revert InsufficientMints();\r\n\r\n        if (signer != ECDSA.recover(\r\n            ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_msgSender()))),\r\n            signature\r\n        )\r\n            revert InvalidSignature();\r\n\r\n        _safeMint(_msgSender(), amount);\r\n        addressMinted[_msgSender()] += amount;\r\n    }\r\n```\r\n\r\nAnd this is already supported. No new feature needed.\r\n\r\nOn the client side the error does not have to be processed as a random string.\r\nThe docs on `revert` show how you can decode the return data to get the selector, which you could basically treat as an error code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112403479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112459130",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1112459130",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1112459130,
    "node_id": "IC_kwDOAm_5kc5CTsd6",
    "user": {
      "login": "QuintonC",
      "id": 4250423,
      "node_id": "MDQ6VXNlcjQyNTA0MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4250423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QuintonC",
      "html_url": "https://github.com/QuintonC",
      "followers_url": "https://api.github.com/users/QuintonC/followers",
      "following_url": "https://api.github.com/users/QuintonC/following{/other_user}",
      "gists_url": "https://api.github.com/users/QuintonC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QuintonC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QuintonC/subscriptions",
      "organizations_url": "https://api.github.com/users/QuintonC/orgs",
      "repos_url": "https://api.github.com/users/QuintonC/repos",
      "events_url": "https://api.github.com/users/QuintonC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QuintonC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T17:14:57Z",
    "updated_at": "2022-04-28T17:26:00Z",
    "author_association": "NONE",
    "body": "> On the client side the error does not have to be processed as a random string.\r\n> The docs on revert show how you can decode the return data to get the selector, which you could basically treat as an error code.\r\n\r\nPerhaps there is a disconnect between solidity and ethers then? The approach I'm suggesting would rule out any inconsistencies between all contracts in the future in terms of error handling, while also increasing/stabilizing the ability to control, manage, and detect errors on the front end while giving users more insight as to why their transaction might have failed.\r\n\r\nGiven your sample above, what would the return look like through the ethers.js? What is the payload? How would the front-end depict this / case through different errors and return relevant error information depending on what the response is/was?\r\n\r\n> The docs on revert show how you can decode the return data to get the selector, which you could basically treat as an error code.\r\n\r\nI read through the docs but am failing to find any clear-cut information that would rule out any inconsistencies across different contracts in the future.\r\n\r\nMaybe I can ask you the theoretical question of why HTTP status codes were ever created and what your opinion on them is? Are they pointless because a back-end developer could instead throw an error with a string? I think the answer is no, but I'm happy to hear you out on what you might have to say.\r\n\r\nI think this is a fundamental core capability that should be added to prevent inconsistencies going into the future, but perhaps my previous web2 experience is taking control of my thought process here?\r\n\r\n### Edit\r\n\r\nIf I'm understanding you properly, then perhaps this isn't an issue of adding functionality to the language itself, but perhaps a best practice rule that should be abided by? \r\n\r\nIs there a style guide that points users to the best method for handling errors? If not, maybe that is something that should be added. Given the documentation, it looks like there are multiple ways of handling errors, why is that? Why not one, clear, concise method to handle errors (the method you've suggested), to enable front-end developers the ability to better understand errors that are thrown by contract transactions?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112459130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112509810",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1112509810",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1112509810,
    "node_id": "IC_kwDOAm_5kc5CT41y",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T18:05:38Z",
    "updated_at": "2022-04-28T18:05:38Z",
    "author_association": "MEMBER",
    "body": "> Given your sample above, what would the return look like through the ethers.js? What is the payload?\r\n\r\nSorry, I'm not intimately familiar with how specific libraries handle custom errors. What I can tell you is that this is how returndata looks like for `Error(string)`:\r\n\r\n```\r\n0x08c379a0                                                         // Function selector for Error(string)\r\n0x0000000000000000000000000000000000000000000000000000000000000020 // Data offset\r\n0x000000000000000000000000000000000000000000000000000000000000001a // String length\r\n0x4e6f7420656e6f7567682045746865722070726f76696465642e000000000000 // String data\r\n```\r\n\r\nFor other errors it will be similar, according the ABI encoding rules. The selector part is what the library can present to you as an \"error code\". It's a hash of the error signature so it can also be matched against specific error type to see if it was that error. Not sure how ethers.js makes this information available. If it doesn't then perhaps a feature request in that project would be a good idea.\r\n\r\n> I read through the docs but am failing to find any clear-cut information that would rule out any inconsistencies across different contracts in the future.\r\n\r\nI don't really think this is a language-level concern. Having a convention would perhaps be nice but I'm a bit skeptical about the possibility to come up with a universal convention that will fit all contracts ever.\r\n\r\nThe HTTP error codes are not directly comparable in my opinion. They really deal with transport issues and the REST model, not with actual business logic of each web application. For example the equivalent of HTTP 200 with contracts is just a lack of revert. For HTTP 4xx we have `Error()` and custom errors. `Panic()` codes are more akin to HTTP 5xx.\r\n\r\nThere is probably some benefit in adding some generic error types for things that could be considered problems in the input and are handled by the compiler automatically. For example ABI decoding error or the failure of extcodesize check (when you try to call an address that's not a contract). We already have an issue to improve that: #11664. Just like with HTTP 4xx though, that's a much more coarse-grained classification than the business-logic-related errors you're showing in your examples. HTTP 400 is out of necessity used as a catch-all for a wide variety of error conditions and you need to look inside the application-specific output to figure out what really happened and what specific kind of error this is.\r\n\r\n> Is there a style guide that points users to the best method for handling errors?\r\n\r\nWe have a [style guide](https://docs.soliditylang.org/en/latest/style-guide.html) but that just deals with simple syntax concerns. There are some third-party \"best practices\" guides so maybe it would fit one of them. Maybe @fulldecent would be interested in collaborating on that. In any case, I think this is a layer above the compiler. Would be great to see some community effort but I can't see how compiler can impose something like that without limiting potential use cases too much so that's out of scope here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112509810/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1485026536",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1485026536",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1485026536,
    "node_id": "IC_kwDOAm_5kc5Yg7To",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-03-27T12:05:53Z",
    "updated_at": "2023-03-27T12:05:53Z",
    "author_association": "NONE",
    "body": "This issue has been marked as stale due to inactivity for the last 90 days.\nIt will be automatically closed in 7 days.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1485026536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1495855711",
    "html_url": "https://github.com/ethereum/solidity/issues/12965#issuecomment-1495855711",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12965",
    "id": 1495855711,
    "node_id": "IC_kwDOAm_5kc5ZKPJf",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-04-04T12:04:26Z",
    "updated_at": "2023-04-04T12:04:26Z",
    "author_association": "NONE",
    "body": "Hi everyone! This issue has been automatically closed due to inactivity.\nIf you think this issue is still relevant in the latest Solidity version and you have something to [contribute](https://docs.soliditylang.org/en/latest/contributing.html), feel free to reopen.\nHowever, unless the issue is a concrete proposal that can be implemented, we recommend starting a language discussion on the [forum](https://forum.soliditylang.org) instead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1495855711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
