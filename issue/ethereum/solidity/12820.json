{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12820",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12820/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12820/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12820/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12820",
  "id": 1174570912,
  "node_id": "I_kwDOAm_5kc5GAoeg",
  "number": 12820,
  "title": "Add `(\"pure\")` & `(\"view\")` assembly tags",
  "user": {
    "login": "brockelmore",
    "id": 31553173,
    "node_id": "MDQ6VXNlcjMxNTUzMTcz",
    "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brockelmore",
    "html_url": "https://github.com/brockelmore",
    "followers_url": "https://api.github.com/users/brockelmore/followers",
    "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
    "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
    "organizations_url": "https://api.github.com/users/brockelmore/orgs",
    "repos_url": "https://api.github.com/users/brockelmore/repos",
    "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brockelmore/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-03-20T14:39:56Z",
  "updated_at": "2022-03-20T15:24:39Z",
  "closed_at": "2022-03-20T15:24:39Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nAdd `(\"pure\")` and `(\"view\")` as valid assembly tags, and force state mutability cohesion between solidity and assembly/yul blocks. \r\n\r\nIt is currently possible to trick solidity into thinking a function can maintain it's `pure` and `view` tags by dropping into assembly. With 0.8.13, a new syntax style for tagging assembly/yul blocks was introduced (via a hack around `ewasm` tag) for `assembly (\"memory-safe\") {}`. Solidity should expand this new capability by disallowing users from sidestepping solidity function `pure` and `view` calls without explicitly telling the compiler that they pinky-promise to maintain that in their assembly block. This likely means expanding the syntax to allow for multiple values inside the quotes, i.e. `assembly (\"memory-safe pure\") {}` (denotes a memory-safe & pure block).\r\n\r\nEdit: I had a misunderstanding of the issue in the below example, but still think this is somewhat valuable for optimization purposes\r\n\r\n## Motivation\r\nThere are a few reasons this would be beneficial:\r\n1. `pure` likely gives the compiler more information about how it can optimize  \r\n\r\n## Specification\r\nIf a user doesn't tag the block, it is assumed to be state mutating. If they mistag it relative to the solidity function's state mutability, the compiler throws an error.\r\n\r\nThe below is an example where the user has created a \"pure\" function that isn't. \r\n```solidity\r\nstruct bag {\r\n    uint256[10] data;\r\n}\r\n\r\nbag what;\r\nfunction load() internal pure returns (bag memory) {\r\n    return _load();\r\n}\r\n\r\nfunction _load() internal pure returns (bag storage data) {\r\n    assembly {\r\n        data.slot := what.slot\r\n    }\r\n}\r\n```\r\nCalling `load()` does many `SLOAD`s, breaking the `pure` denotation.\r\n\r\nThe above would throw an error something to the effect of:\r\n```\r\nError: Function with an assembly block has mismatching state mutability. Solidity function declared as \"pure\", without corresponding assembly tag. If the assembly block is truly `pure`, add (\"pure\") tag to your assembly block, otherwise change the solidity function's state mutability\r\n    function _load() internal pure returns (bag storage data) {\r\n             ^^^^^^^^^^^^^^^^^^^^^ declared as pure\r\n         assembly {\r\n         ^^^^^^^^^^ missing `(\"pure\")` tag\r\n```\r\n\r\nand: \r\n```\r\nError: Function with an assembly block has mismatching state mutability. Solidity function declared as \"pure\", and assembly block defined as \"view\"\r\n    function _load() internal pure returns (bag storage data) {\r\n             ^^^^^^^^^^^^^^^^^^^^^ declared as pure\r\n         assembly (\"view\") {\r\n         ^^^^^^^^^^^^^^^^ declared as view inside a pure function\r\n```\r\n\r\nSame would go for `view` functions.\r\n\r\nThis adds the following cases as well:\r\n\r\n```\r\nError: Multiple state mutabilities defined for a single yul block.\r\n         assembly (\"view pure\") {\r\n                    ^^^^^^^^^^ Multiple state mutabilities defined here\r\n```\r\n\r\nas well as valid cases like:\r\n```solidity\r\nfunction _load() internal pure {\r\n    assembly (\"memory-safe pure\") {\r\n        let a := add(0x100, 0x100)\r\n    }\r\n}\r\n```\r\nwhere the above is a memory-safe pure yul block.\r\n\r\n## Backwards Compatibility\r\nWould definitely break contracts as this forces users to match state mutability of yul blocks in solidity functions.\r\n",
  "closed_by": {
    "login": "brockelmore",
    "id": 31553173,
    "node_id": "MDQ6VXNlcjMxNTUzMTcz",
    "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brockelmore",
    "html_url": "https://github.com/brockelmore",
    "followers_url": "https://api.github.com/users/brockelmore/followers",
    "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
    "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
    "organizations_url": "https://api.github.com/users/brockelmore/orgs",
    "repos_url": "https://api.github.com/users/brockelmore/repos",
    "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brockelmore/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12820/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12820/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1073274413",
    "html_url": "https://github.com/ethereum/solidity/issues/12820#issuecomment-1073274413",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12820",
    "id": 1073274413,
    "node_id": "IC_kwDOAm_5kc4_-N4t",
    "user": {
      "login": "brockelmore",
      "id": 31553173,
      "node_id": "MDQ6VXNlcjMxNTUzMTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/31553173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brockelmore",
      "html_url": "https://github.com/brockelmore",
      "followers_url": "https://api.github.com/users/brockelmore/followers",
      "following_url": "https://api.github.com/users/brockelmore/following{/other_user}",
      "gists_url": "https://api.github.com/users/brockelmore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brockelmore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brockelmore/subscriptions",
      "organizations_url": "https://api.github.com/users/brockelmore/orgs",
      "repos_url": "https://api.github.com/users/brockelmore/repos",
      "events_url": "https://api.github.com/users/brockelmore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brockelmore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-20T15:24:39Z",
    "updated_at": "2022-03-20T15:24:39Z",
    "author_association": "NONE",
    "body": "after talking with hari about this, sounds like this actually doesnt help the optimizer and likely would just be user bloat - ignore",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1073274413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
