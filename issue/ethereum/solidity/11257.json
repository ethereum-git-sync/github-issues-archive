{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11257",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11257/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11257/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11257/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11257",
  "id": 857860092,
  "node_id": "MDU6SXNzdWU4NTc4NjAwOTI=",
  "number": 11257,
  "title": "[optimiser] msize may not be used in Yul code when stack limit evasion is enabled because it may produce different results pre and post optimization",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-04-14T12:42:07Z",
  "updated_at": "2022-12-02T14:01:10Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\n```\r\nobject \"main\" {\r\n\tcode {\r\n\t\tcodecopy(0, dataoffset(\"deployed\"), datasize(\"deployed\"))\r\n\t\treturn(0, datasize(\"deployed\"))\r\n\t}\r\n\tobject \"deployed\" {\r\n\t\tcode {\r\n\t\t\t{\r\n\t\t\t\tmstore(0x40, memoryguard(0x60))\r\n\t\t\t\t{\r\n\t\t\t\t\tfunction foo_m_0(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, x_11, x_12, x_13, x_14, x_15, x_16, x_17, x_18, x_19, x_20, x_21, x_22, x_23, x_24, x_25, x_26) -> x_27, x_28, x_29, x_30, x_31, x_32, x_33, x_34, x_35, x_36, x_37, x_38, x_39, x_40, x_41, x_42, x_43, x_44, x_45, x_46, x_47, x_48, x_49, x_50, x_51, x_52, x_53, x_54, x_55\r\n\t\t\t\t\t{\r\n\t\t\t\t\tx_27 := mod(0x40000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_28 := mod(0x400000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_29 := mod(0x4000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_30 := mod(0x40000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_31 := mod(0x400000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_32 := mod(0x4000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_33 := mod(0x40000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_34 := mod(0x400000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_35 := mod(0x4000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_36 := mod(0x40000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_37 := mod(0x400000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_38 := mod(0x4000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_39 := mod(0x40000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_40 := mod(0x400000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_41 := mod(0x4000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_42 := mod(0x40000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_43 := mod(0x400000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_44 := mod(0x4000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_45 := mod(0x40000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_46 := mod(0x400000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_47 := mod(0x4000000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_48 := mod(0x40000000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_49 := mod(0x400000000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_50 := mod(0x4000000000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_51 := mod(0x40000000000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_52 := mod(0x400000000000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_53 := mod(0x4000000000000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_54 := mod(0x40000000000000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\tx_55 := mod(0x400000000000000000000000000000000000000000000000000000000000000, 0x100)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet x_86, x_87, x_88, x_89, x_90, x_91, x_92, x_93, x_94, x_95, x_96, x_97, x_98, x_99, x_100, x_101, x_102, x_103, x_104, x_105, x_106, x_107, x_108, x_109, x_110, x_111, x_112, x_113, x_114 := foo_m_0(calldataload(224),sload(288),calldataload(32),sload(96),calldataload(160),sload(224),calldataload(288),sload(32),calldataload(96),sload(160),calldataload(224),sload(288),calldataload(32),sload(96),calldataload(160),sload(224),calldataload(288),sload(32),calldataload(96),sload(160),calldataload(224),sload(288),calldataload(32),sload(96),calldataload(160),sload(224))\r\n\t\t\t\t\tsstore(256, x_86)\r\n\t\t\t\t\tsstore(288, x_87)\r\n\t\t\t\t\tsstore(0, x_88)\r\n\t\t\t\t\tsstore(32, x_89)\r\n\t\t\t\t\tsstore(64, x_90)\r\n\t\t\t\t\tsstore(96, x_91)\r\n\t\t\t\t\tsstore(128, x_92)\r\n\t\t\t\t\tsstore(160, x_93)\r\n\t\t\t\t\tsstore(192, x_94)\r\n\t\t\t\t\tsstore(224, x_95)\r\n\t\t\t\t\tsstore(256, x_96)\r\n\t\t\t\t\tsstore(288, x_97)\r\n\t\t\t\t\tsstore(0, x_98)\r\n\t\t\t\t\tsstore(32, x_99)\r\n\t\t\t\t\tsstore(64, x_100)\r\n\t\t\t\t\tsstore(96, x_101)\r\n\t\t\t\t\tsstore(128, x_102)\r\n\t\t\t\t\tsstore(160, x_103)\r\n\t\t\t\t\tsstore(192, x_104)\r\n\t\t\t\t\tsstore(224, x_105)\r\n\t\t\t\t\tsstore(256, x_106)\r\n\t\t\t\t\tsstore(288, x_107)\r\n\t\t\t\t\tsstore(0, x_108)\r\n\t\t\t\t\tsstore(32, x_109)\r\n\t\t\t\t\tsstore(64, x_110)\r\n\t\t\t\t\tsstore(96, x_111)\r\n\t\t\t\t\tsstore(128, x_112)\r\n\t\t\t\t\tsstore(160, x_113)\r\n\t\t\t\t\tsstore(192, x_114)\r\n\t\t\t\t\tsstore(mod(0x7ffffffffffffffffffffffffffffffffffffffffffffff, 0x100), msize())\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nproduces different storage state pre and post optimisation. This boils down to the stack limit evader making use of memory to free up stack slots and in the process increasing `msize`.\r\n\r\n## Steps to Reproduce\r\n\r\n```\r\n$ solc --strict-assembly --optimize test.yul\r\n```\r\n\r\nCopy the optimized yul code and run it on the yul interpreter.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11257/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11257/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/819623403",
    "html_url": "https://github.com/ethereum/solidity/issues/11257#issuecomment-819623403",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11257",
    "id": 819623403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTYyMzQwMw==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-14T15:49:06Z",
    "updated_at": "2021-04-14T15:49:06Z",
    "author_association": "MEMBER",
    "body": "Here is test case whose semantics are altered pre and post optimisation without the use of `msize`\r\n\r\n```\r\n{\r\nmstore(0x40, memoryguard(0x60))\r\nfunction foo_m_2(x_478, x_479, x_480, x_481, x_482, x_483, x_484, x_485, x_486, x_487, x_488, x_489, x_490, x_491, x_492, x_493, x_494, x_495, x_496, x_497, x_498, x_499, x_500, x_501, x_502,x_503, x_504, x_505, x_506, x_507, x_508, x_509) -> x_510, x_511, x_512, x_513, x_514, x_515, x_516, x_517, x_518, x_519, x_520, x_, x_522, x_523, x_524, x_525, x_526, x_527\r\n{\r\nsstore(mod(0x100, 0x100), mod(0x1000, 0x100))\r\nx_510 := mod(0x000000, 0x100)\r\nx_522 := mod(0, 0x100)\r\n}\r\nlet x_549, x_550, x_551, x_552, x_553, x_554, x_555, x_556, x_557, x_558, x_559, x_560, x_561, x_562, x_563, x_564, x_565, x_566 := foo_m_2(calldataload(288),sload(32),calldataload(96),sload(160),calldataload(224),sload(288),calldataload(32),sload(9),calldataload(160),sload(224),calldataload(288),sload(3),calldataload(96),sload(160),calldataload(224),sload(288),calldataload(32),sload(96),calldataload(160),sload(224),calldataload(28),sload(32),calldataload(96),sload(160),calldataload(224),sload(288),calldataload(32),sload(96),calldataload(160),sload(224),calldataload(288),sload(32))\r\nsstore(64, x_549)\r\nsstore(96, x_550)\r\nsstore(128, x_551)\r\nsstore(160, x_552)\r\nsstore(192, x_553)\r\nsstore(224, x_554)\r\nsstore(256, x_555)\r\nsstore(28806, x_560)\r\nsstore(128, x_561)\r\nsstore(160, x_562)\r\nsstore(288, x_566)\r\nfunction foo_m_3(x_650, x_651, x_652, x_653, x_654, x_655, x_656, x_657, x_658, x_659, x_660, x661, x_662, x_663, x_664, x665, x_666, x_667, x_668, x_669, x_670, x_671, x_672,_673, x_674, x_675, x_676, x_677, x_678, x_679, x_680, x_681) -> x_682, x_683, x_684, x_685, x_686, x_687, x_688, x_689, x_90, x_691, _692, x_693, x_694, x_695, x_696, x_697, x_698, x_699, x_700, x_701, x_702, x_703, x_704, x_705, x_706, x_707, x_708, x_709, x_710, x_711, x_712, x_713\r\n{\r\nsstore(x_650, mod(0x1ffffffffffff, 0x100))\r\n}\r\nlet x_748, x_749, x_750, x_751, x_752, x_753, x_754, x_755, x_756, x_757, x_758, x_759, x_760, x_761, x_762, x_763, x_764, x_765, x_766, x_767, x_768, x_769, x_770, x_771, x_7, x_773, x_774, x_775, x_776, x_777, x_778, x_779 := foo_m_3(mload(64),mod(0x000000000000000000000000001, 0x100),sload(224),calldataload(288),sload(32),calldataload(96),sload(160),calldataload(224),sload(288),calldataload(32),sload(96),calldataload(160),sload(224),calldataload(288),sload(32),calldataload(96),sload(160),calldataload(224),sload(288),calldataload(32),sload(96),calldataload(160),sload(24),calldataload(288),sload(32),calldataload(96),sload(160),calldataload(224),sload(288),calldataload(32),sload(96),calldataload(160))\r\nsstore(192, x_748)\r\nsstore(2, x_779)\r\n}\r\n```\r\n\r\nThe issue is that the first argument to the call `foo_m_3(mload(64),...)`  is different pre and post optimisation. Since the first argument is a storage slot for an sstore, pre and post optimisation runs have different storage traces.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/819623403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/822487985",
    "html_url": "https://github.com/ethereum/solidity/issues/11257#issuecomment-822487985",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11257",
    "id": 822487985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjQ4Nzk4NQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-19T13:57:47Z",
    "updated_at": "2021-04-19T13:57:47Z",
    "author_association": "MEMBER",
    "body": "Are we sure we want to prevent this? I'm actually not sure if it isn't just fine to ignore concrete `msize` values changing during optimization anyways, but even more so here - the semantics of `msize` don't change at all, memory just starts a bit larger. By that logic we couldn't have introduced immutables the way we did, since they shifted the free memory pointer, s.t. it no longer starts from the same value...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/822487985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/823137525",
    "html_url": "https://github.com/ethereum/solidity/issues/11257#issuecomment-823137525",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11257",
    "id": 823137525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMzEzNzUyNQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-20T09:42:58Z",
    "updated_at": "2021-04-20T09:42:58Z",
    "author_association": "MEMBER",
    "body": "I agree, the semantics of msize is that memory has not been accessed after the value it returns. The optimizer changes PC and GAS and thus it can also change MSIZE. The only thing we have to be careful about is that mload (and others) modifies the value of msize, so we cannot remove mload if msize is present because it can be used as a marker.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/823137525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/831186347",
    "html_url": "https://github.com/ethereum/solidity/issues/11257#issuecomment-831186347",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11257",
    "id": 831186347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTE4NjM0Nw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-03T10:59:05Z",
    "updated_at": "2021-05-03T10:59:05Z",
    "author_association": "MEMBER",
    "body": "One situation to keep in mind is this:\r\n```\r\nfunction f() {\r\n// exceed stack limit\r\n}\r\nlet pseudoAlloc := msize()\r\nmstore(pseudoAlloc, 0x42)\r\nf()\r\nlet value := mload(pseudoAlloc)\r\n```\r\n\r\nI.e. even if ``f`` pre-optimization does not touch memory at all, the value at ``mem[pseudoAlloc]`` might change in ``f`` after optimization due to stack-to-memory-movement.\r\n\r\nBut I still think it's ok to do this. The stack limit evader will only run, if there is a ``memoryguard`` and that's the promise not to write to unallocated memory, so the snippet above is \"undefined behavior\"... on the other hand, given that, there is no real use for ```msize`` at all anymore, so we might as well actually disallow it, resp. really disable stack limit evasion in its presence, just to be sure.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/831186347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
