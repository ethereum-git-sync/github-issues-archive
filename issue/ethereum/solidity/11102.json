{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11102/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11102/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11102/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11102",
  "id": 831727397,
  "node_id": "MDU6SXNzdWU4MzE3MjczOTc=",
  "number": 11102,
  "title": "A smart contract hub that routes calls to various child smart contracts to bypass the 24KB bytecode limit ",
  "user": {
    "login": "maxsam4",
    "id": 7436022,
    "node_id": "MDQ6VXNlcjc0MzYwMjI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/maxsam4",
    "html_url": "https://github.com/maxsam4",
    "followers_url": "https://api.github.com/users/maxsam4/followers",
    "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
    "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
    "organizations_url": "https://api.github.com/users/maxsam4/orgs",
    "repos_url": "https://api.github.com/users/maxsam4/repos",
    "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
    "received_events_url": "https://api.github.com/users/maxsam4/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4437989273,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZXmQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/epic%20effort",
      "name": "epic effort",
      "color": "ff00ef",
      "default": false,
      "description": "Multi-stage task that may require coordination between team members across multiple PRs."
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2021-03-15T11:44:27Z",
  "updated_at": "2022-09-15T12:29:15Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nAllow the compiler to create a smart contract hub that connects multiple smart contracts together to have a single entry point without being limited to the 24 kb limit of Solidity. \r\n\r\nThe proposal is to introduce syntax for creating a hub contract which acts as a single entry point for complex smart contract systems and proxies calls to different implementation contracts using delegate calls. The hub contract will store all of the storage for its child contracts under separate namespaces. The child contract can be standard contracts or new abstract/library like contracts.\r\n\r\n## Motivation\r\n\r\nComplex dApps require complex smart contracts. I have seen a lot of dApp developers struggle with this. As Ethereum and Solidity have progressed over the years, you can’t really do as much in 24KB as you were used to. Solc bakes in more checks, reason strings take a lot of space, and L2 solutions like Optimism bloat the compiled artifacts with their changes.\r\n\r\nA lot of alternative non-standard solutions are being used right now that introduce another attack surface and added complexity. Having something inbuilt in the compiler will make it safer and easier for developers to build complex smart contract systems.\r\n\r\n## Specification\r\n\r\n- The hub smart contract must specify all child contracts that it will route. The syntax can be something like `contract Hub routing Foo, Bar`. It must work alongside the `is` keyword. I.e. `contract Hub routing Foo, Bar is Proxy` should also work.\r\n- The hub should have a binary searchable router to route all calls to appropriate child contracts using delegate calls.\r\n- The child contracts must import the Hub if they want to access the hub’s storage or route calls to other child contracts. If the child contract is independent of the hub, it does not need to do anything special. I.e. Existing contracts can be used as child contracts. The syntax for importing the hub remains the same as the syntax for importing other contracts. `import ./Hub.sol`.\r\n- Once the hub is imported, the child contracts can access storage and functions of the hub and other routed contracts via `Hub.variable`, `Hub.Foo.variable`, `Hub.Bar.function()` etc.\r\n- If a storage is accessed, the storage should be read/written directly from the pre-defined storage slot rather than making any external calls.\r\n- If a function in an another module is called, a delegate call must be made to self that the hub can route to the proper destination.\r\n- The storage of child contracts must be stored in their own namespace, derived by hashing something like “child_contract” + $child_contract_name. Sort of like how mappings work.\r\n- The hub should be compiled/deployed like contracts that use libraries are compiled/deployed. All child contracts must be deployed individually and then the hub’s code must be updated to include hardcoded addresses of the child contracts.\r\n\r\n## Example Syntax\r\n\r\n```solidity\r\n\r\ncontract Hub routes Foo, Bar {\r\n    string name;\r\n\r\n    function setName(string memory newName) public {\r\n        name = newName;\r\n    }\r\n}\r\n\r\ncontract Foo {\r\n    uint value;\r\n\r\n    function incrementValue() public {\r\n        value += 1;\r\n    }\r\n\r\n    function test() public view returns (string memory) {\r\n        return “hello”;\r\n    }\r\n}\r\n\r\ncontract Bar {\r\n    uint value; // Different than Foo.value;\r\n\r\n    function incrementFooValue() public {\r\n        if (Hub.Foo.value < 42) {\r\n            Hub.Foo.incrementValue();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nps Thanks to @ajsantander, @chriseth, @cameel, and others who have helped form this draft proposal.  ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11102/reactions",
    "total_count": 6,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11102/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/799377198",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-799377198",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 799377198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTM3NzE5OA==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-15T12:23:46Z",
    "updated_at": "2021-03-15T12:23:46Z",
    "author_association": "MEMBER",
    "body": "On `Hub.Foo.value < 42` inside contract `Bar`. What is that supposed to do? If `Bar` is considered as an independent contract, then that statement cannot be resolved. Perhaps, `contract Bar` should be defined inside the scope of `Hub`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/799377198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/799386369",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-799386369",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 799386369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTM4NjM2OQ==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-15T12:39:16Z",
    "updated_at": "2021-03-15T12:39:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> On `Hub.Foo.value < 42` inside contract `Bar`. What is that supposed to do? If `Bar` is considered as an independent contract, then that statement cannot be resolved. Perhaps, `contract Bar` should be defined inside the scope of `Hub`?\r\n\r\n`Bar` is a dependent/abstract contract that can only be compiled under the scope of `Hub` (using the `routes` keyword).\r\n\r\n`Foo` is an independent contract though. This approach allows users to have both independent and dependent/abstract contracts as child contracts.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/799386369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/799445269",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-799445269",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 799445269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTQ0NTI2OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-15T14:02:59Z",
    "updated_at": "2021-03-15T14:02:59Z",
    "author_association": "MEMBER",
    "body": "Thanks for the proposal! I think it should be clarified a bit more on the way to construct the hub. I guess the idea is to split the creation into multiple transactions, so that they can go over the tx size limit, right?\r\n\r\nAnother fundamental question I have is about inheritance / polymorphism and the way the dispatch is implemented: If we know that the delegated contracts / modules do not have additional publicly visible functions and also no fallback functions, we can use some optimization techniques in the dispatch routine. We have to be a bit careful here, though, since whenever we use contract types in Solidity, it is perfectly fine to use a derived contract instance instead, so there can be additional functions. The only situation where we know that this is not the case is when a contract creates another contract.\r\n\r\nFurthermore, it would be very nice if this proposal could eliminate the need for fallback functions altogether. This means it would be great if this could also be used to implement contract upgrades.\r\n\r\nAnd finally, what do you think about specifying instances of the sub-contracts directly as in `Foo immutable foo;`? Then we could access storage variables via `foo.varName`, call functions as `foo.f()`, make the construction explicit either via `Foo immutable foo = new Foo()` or via assignment from the constructor. Furthermore, if it is not immutable, we can use it for upgrades. One missing piece is now the routing, but maybe we can have that as a statement inside the contract: `using functions from foo, bar;`?\r\n\r\nIn general, I somehow feel that the main new feature this adds to the language is the dispatch, isn't it? Most of the other features can be implemented using structs and library functions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/799445269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/799992446",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-799992446",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 799992446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTk5MjQ0Ng==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T06:31:11Z",
    "updated_at": "2021-03-16T11:30:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I guess the idea is to split the creation into multiple transactions, so that they can go over the tx size limit, right?\r\n\r\nEvery module will be deployed in a separate transaction, thus you can have as many modules as you want. The hub will be deployed in a single transaction through so there's a practical limit on the size of routing table you can fit in but that should be quite large.\r\n\r\n> If we know that the delegated contracts / modules do not have additional publicly visible functions and also no fallback functions, we can use some optimization techniques in the dispatch routine.\r\n\r\nI don't think we can assume that. How substantial are the optimizations mentioned here? We can consider adding these constraints but we'll then have to educate the users as well.\r\n\r\n> Furthermore, it would be very nice if this proposal could eliminate the need for fallback functions altogether. This means it would be great if this could also be used to implement contract upgrades.\r\n\r\nI thought about this a bit but couldn't find an elegant way to do it. Do you have any suggestions?\r\n\r\n> And finally, what do you think about specifying instances of the sub-contracts directly as in Foo immutable foo;?\r\n\r\n`immutable` are fine but `mutable` might be misunderstood by the users (devs using solidity). Since the routing table will be hardcoded in the bytecode, even if we allowed changing module addresses, people won't be able to add/remove modules or even functions in those modules. This severely limits the types of upgrades you can do and end users may not realize this quirk. Although supporting `mutable` instances won't be super complex, I'd err on the side of caution and not allow them at all to protect users from themselves.\r\n\r\n> In general, I somehow feel that the main new feature this adds to the language is the dispatch, isn't it?\r\n\r\nDispatcher is the main bit but another important piece of the puzzle is namespaced storage on per module basis. Namespacing storage allows different modules to statically calculate storage slots for each other while still allowing individual modules to add items to their storage. It also prevents clashes between same name storages between different modules.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/799992446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/800171728",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-800171728",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 800171728,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDE3MTcyOA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T11:16:26Z",
    "updated_at": "2021-03-16T11:16:26Z",
    "author_association": "MEMBER",
    "body": "Ok, I didn't consider that you cannot change the interface of a module on an upgrade, that would be a rather important feature. Still, maybe we can somehow allow this if there is only a single module?\r\n\r\nThe optimizations I was talking about are using bloom filters. If this proposal is implemented naively, we need at least one comparison with each function signature in each module. Bloom filters would need some mathematical operation (maybe a keccak hash, but maybe also just a multiplication with a specially crafted value suffices), but only a single comparison. Such filters can have false positives, but no false negatives. If we know that the interface to the modules does not change and that every module simply reverts on mismatch, we can do this optimization.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/800171728/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/800188655",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-800188655",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 800188655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDE4ODY1NQ==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T11:44:22Z",
    "updated_at": "2021-03-16T11:44:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Still, maybe we can somehow allow this if there is only a single module?\r\n\r\nIf there's only a single module, it defeats the purpose of having a hub/router. Having this feature won't harm anyone but I also can't see anyone using it.\r\n\r\n> If we know that the interface to the modules does not change \r\n\r\nThe interface can technically change if the module was also a proxy or created with create2 for example but I think we can just assume that if the interface changes, the user must deploy a new hub/router or have undefined behaviour. This should be a relatively simple/natural concept to grasp for the developers if we do not allow changing addresses of modules. We can further expand on it in the documentation around this new feature.\r\n\r\n> every module simply reverts on mismatch\r\n\r\nWhy is this needed? Since there's no false negative, the hub doesn't really need to care what the module does IMO. Am I missing something?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/800188655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/806864500",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-806864500",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 806864500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjg2NDUwMA==",
    "user": {
      "login": "ajsantander",
      "id": 550409,
      "node_id": "MDQ6VXNlcjU1MDQwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/550409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajsantander",
      "html_url": "https://github.com/ajsantander",
      "followers_url": "https://api.github.com/users/ajsantander/followers",
      "following_url": "https://api.github.com/users/ajsantander/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajsantander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajsantander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajsantander/subscriptions",
      "organizations_url": "https://api.github.com/users/ajsantander/orgs",
      "repos_url": "https://api.github.com/users/ajsantander/repos",
      "events_url": "https://api.github.com/users/ajsantander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajsantander/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-25T14:36:10Z",
    "updated_at": "2021-03-25T14:36:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chriseth @maxsam4 I think upgradeability should not be considered in this proposal.\r\n\r\nUsers should implement it at a higher level, for example, by using a universal proxy whose implementation is a router/hub. When one or more of its modules needs to be updated, these are deployed, a new router is constructed and deployed, and the proxy implementation is updated.\r\n\r\nAt least this is how I see upgradeability for this architecture. Or am I missing something?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/806864500/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/812190735",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-812190735",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 812190735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjE5MDczNQ==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-01T21:50:05Z",
    "updated_at": "2021-04-02T00:01:49Z",
    "author_association": "NONE",
    "body": "People are already building on [EIP-2535 Diamonds](https://eips.ethereum.org/EIPS/eip-2535). I think EIP-2535 already solves the problems that this proposal aims to solve.  I think it would be great it Solidity could automate the creation of diamonds. It is possible for EIP-2535 to be modified to better fit or include an automated Solidity solution.\r\n\r\nOne thing this proposal doesn't seem to support that EIP-2535 does support is upgrades.\r\n\r\nEIP-2535 standardization helps with tooling for deployment, testing, upgrading, integration with other smart contracts and user interfaces.\r\n\r\nHere's a user interface that can be used with all diamonds: https://louper.dev/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/812190735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/812215569",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-812215569",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 812215569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjIxNTU2OQ==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-01T22:42:05Z",
    "updated_at": "2021-04-02T00:20:27Z",
    "author_association": "NONE",
    "body": "I wrote a blog post about some of the reasons for the Loupe functions which provide introspection into a diamond: https://dev.to/mudgen/why-loupe-functions-for-diamonds-1kc3\r\n\r\nLoupe functions (introspection) on diamonds is important for upgrades:  Loupe functions enable software to discover/verify/validate/test/audit upgrades on diamonds, and retrieve external information about upgrades like new verified source code and ABI info.\r\n\r\nI am just mentioning this to give more data about why EIP-2535 Diamonds was designed the way it is.  It is way past an idea stage.  Its design has evolved a lot from experience implementing applications with it. \r\n\r\nThough EIP-2535 was published in February 2020, actual work on it began in 2018 with [EIP-1538](https://eips.ethereum.org/EIPS/eip-1538) which EIP-2535 replaced.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/812215569/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/814764609",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-814764609",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 814764609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDc2NDYwOQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T09:30:00Z",
    "updated_at": "2021-04-07T09:30:00Z",
    "author_association": "MEMBER",
    "body": "Since this proposal uses `delegatecall` for regular contracts, I was thinking about looking at this from another direction and introducing a concept of \"stateful libraries\" - libraries that can contain state variables and where each function receives an implicit parameter that is the storage slot of the first variable.\r\n\r\nThe main problem is that all these solutions are rather complex and try to solve multiple problems at the same time.\r\n\r\nDuring a meeting with the team, the idea was brought up that the routing functionality itself should maybe just be an extension of the fallback function. The syntax could be something like\r\n```\r\nfallback() forwards C(0x123), stateVarD, E(f());\r\n```\r\nHere, what comes after `forwards` is just a list of contract instances. The interface is used for the dispatch process and then a `delegatecall` is used for the actual forwarding.\r\n\r\nThis of course does not solve the problem of separating storage slots.\r\nIt would be nice if we could find a solution where the contract (module) can be compiled in isolation but during this compilation process, it is already known that the contract will be used via `delegatecall` and that it has to apply a fixed (or maybe dynamic?) storage offset.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/814764609/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/814772860",
    "html_url": "https://github.com/ethereum/solidity/issues/11102#issuecomment-814772860",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11102",
    "id": 814772860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDc3Mjg2MA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T09:43:40Z",
    "updated_at": "2021-04-07T09:43:40Z",
    "author_association": "MEMBER",
    "body": "`relocatable contract C { ... }`\r\n - cannot be inherited from\r\n - constructor cannot write to storage (but it can use \"immutable\")\r\n - all external calls to such a contract have to be done using `delegatecall`\r\n - all such calls receive an implicit storage offset as first parameter (i.e. sstore(x, y) is turned into sstore(add(x, calldataload(4)), y))`\r\n - instances of such a contract need to be stored in storage. Their storage size is one pluso the storage size of the contract (the \"one\" is the address of the contract). Calls to functions of such an instance use the storage slot as first argument.\r\n\r\nThis would be compatible with the routing. It is essentially the same as what I meant by \"stateful libraries\" above, but maybe calling them \"contracts\" would be more logical. It allows upgrades to a certain degree. A proxy would just be\r\n\r\n```\r\ncontract Proxy {\r\n  MyContract instance;\r\n  function update(address _new) {\r\n    require(instance.allowUpgrade());\r\n    instance = MyContract(_new); // This kind of violates \"needs to be stored in storage\", need to think about it.\r\n  }\r\n  fallback() forwards instance;\r\n}\r\n```\r\n\r\nWhat it does not allow is accessing state variables of other \"modules\" of the same \"collective contract\" without a specific reference.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/814772860/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 3
    },
    "performed_via_github_app": null
  }
]
