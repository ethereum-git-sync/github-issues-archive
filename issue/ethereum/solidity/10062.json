{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10062/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10062/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10062/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10062",
  "id": 723844743,
  "node_id": "MDU6SXNzdWU3MjM4NDQ3NDM=",
  "number": 10062,
  "title": "[SMTChecker] Verify the Circles UBI contract",
  "user": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4810143649,
      "node_id": "LA_kwDOAm_5kc8AAAABHrT3oQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/smt",
      "name": "smt",
      "color": "1d76db",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "pgebal",
    "id": 23142088,
    "node_id": "MDQ6VXNlcjIzMTQyMDg4",
    "avatar_url": "https://avatars.githubusercontent.com/u/23142088?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pgebal",
    "html_url": "https://github.com/pgebal",
    "followers_url": "https://api.github.com/users/pgebal/followers",
    "following_url": "https://api.github.com/users/pgebal/following{/other_user}",
    "gists_url": "https://api.github.com/users/pgebal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pgebal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pgebal/subscriptions",
    "organizations_url": "https://api.github.com/users/pgebal/orgs",
    "repos_url": "https://api.github.com/users/pgebal/repos",
    "events_url": "https://api.github.com/users/pgebal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pgebal/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "pgebal",
      "id": 23142088,
      "node_id": "MDQ6VXNlcjIzMTQyMDg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23142088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgebal",
      "html_url": "https://github.com/pgebal",
      "followers_url": "https://api.github.com/users/pgebal/followers",
      "following_url": "https://api.github.com/users/pgebal/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgebal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgebal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgebal/subscriptions",
      "organizations_url": "https://api.github.com/users/pgebal/orgs",
      "repos_url": "https://api.github.com/users/pgebal/repos",
      "events_url": "https://api.github.com/users/pgebal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgebal/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2020-10-17T20:47:01Z",
  "updated_at": "2023-07-20T15:58:37Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Let's try to verify it. Made a fork which has the Zeppelin code without imports and SMT enabled here: https://github.com/axic/circles-contracts/tree/smt\r\n\r\n- [x] Bug with private fields in multiple files (fixed by #10139)\r\n- [x] Contract types #10141\r\n- [x] Track simple branches better #10142\r\n- [x] Bug with BMC #10144\r\n- [x] Bug with variables touched by `assembly` https://github.com/ethereum/solidity/issues/10619\r\n\r\n---\r\n\r\nStatus as of 15th December:\r\n```solidity\r\nWarning: This is a pre-release compiler version, please do not use it in production.\r\n\r\nWarning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\r\n   --> Token.sol:171:31:\r\n    |\r\n171 |     ) public onlyHub returns (bool) {\r\n    |                               ^^^^\r\n\r\nWarning: Assertion checker does not support inline assembly.\r\n  --> Address.sol:33:9:\r\n   |\r\n33 |         assembly { codehash := extcodehash(account) }\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> Address.sol:57:28:\r\n   |\r\n57 |         (bool success, ) = recipient.call{ value: amount }(\"\");\r\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> Address.sol:123:51:\r\n    |\r\n123 |         (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not support inline assembly.\r\n   --> Address.sol:132:17:\r\n    |\r\n132 |                 assembly {\r\n    |                 ^ (Relevant source part starts here and spans across multiple lines).\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10062/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10062/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/744532546",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-744532546",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 744532546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NDUzMjU0Ng==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-14T15:54:05Z",
    "updated_at": "2020-12-14T15:54:05Z",
    "author_association": "MEMBER",
    "body": "Latest CHC output:\r\n```\r\nWarning: This is a pre-release compiler version, please do not use it in production.\r\n\r\nWarning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\r\n   --> Token.sol:171:31:\r\n    |\r\n171 |     ) public onlyHub returns (bool) {\r\n    |                               ^^^^\r\n\r\nWarning: Assertion checker does not support inline assembly.\r\n  --> Address.sol:33:9:\r\n   |\r\n33 |         assembly { codehash := extcodehash(account) }\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> Address.sol:57:28:\r\n   |\r\n57 |         (bool success, ) = recipient.call{ value: amount }(\"\");\r\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> Address.sol:123:51:\r\n    |\r\n123 |         (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not support inline assembly.\r\n   --> Address.sol:132:17:\r\n    |\r\n132 |                 assembly {\r\n    |                 ^ (Relevant source part starts here and spans across multiple lines).\r\n```\r\n\r\nCreated https://github.com/ethereum/solidity/issues/10596 to support some inline assembly.\r\nWe can't really support `call` besides the invariants in the presence of reentrancy, which we already have. I recently noticed that `call` isn't supported in that case, but it should. Created https://github.com/ethereum/solidity/issues/10576 to track that.\r\nIn any case, I think implementing those is not necessary for this issue.\r\n@axic can we close this then?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/744532546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745422603",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-745422603",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 745422603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTQyMjYwMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T16:54:18Z",
    "updated_at": "2020-12-15T16:54:18Z",
    "author_association": "MEMBER",
    "body": "There's also the `Hub.sol` file, which had more issues. It uses `Token.sol` so it was a good first step.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745422603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745455822",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-745455822",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 745455822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTQ1NTgyMg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T17:47:46Z",
    "updated_at": "2020-12-15T17:47:46Z",
    "author_association": "MEMBER",
    "body": "Took me a good 20 minutes to run:\r\n```\r\nWarning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\r\n   --> circles-contracts/contracts/Token.sol:171:31:\r\n    |\r\n171 |     ) public onlyHub returns (bool) {\r\n    |                               ^^^^\r\n\r\nbash-3.2$ solc/solc circles-contracts/contracts/Hub.sol \r\nWarning: This is a pre-release compiler version, please do not use it in production.\r\n\r\nWarning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\r\n   --> circles-contracts/contracts/Token.sol:171:31:\r\n    |\r\n171 |     ) public onlyHub returns (bool) {\r\n    |                               ^^^^\r\n\r\nWarning: Assertion checker does not support inline assembly.\r\n  --> circles-contracts/contracts/Address.sol:33:9:\r\n   |\r\n33 |         assembly { codehash := extcodehash(account) }\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not support inline assembly.\r\n   --> circles-contracts/contracts/Address.sol:132:17:\r\n    |\r\n132 |                 assembly {\r\n    |                 ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nWarning: CHC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n   --> circles-contracts/contracts/Hub.sol:277:43:\r\n    |\r\n277 |         for (uint i = 0; i < seen.length; i++) {\r\n    |                                           ^^^\r\n\r\nWarning: CHC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n   --> circles-contracts/contracts/Hub.sol:305:32:\r\n    |\r\n305 |         require(seen.length <= steps + 1, \"Seen too many addresses\");\r\n    |                                ^^^^^^^^^\r\n\r\nWarning: CHC: Underflow (resulting value less than 0) might happen here.\r\n   --> circles-contracts/contracts/Hub.sol:309:36:\r\n    |\r\n309 |             delete validation[seen[i-1]];\r\n    |                                    ^^^\r\n\r\nWarning: CHC: Underflow (resulting value less than 0) might happen here.\r\n   --> circles-contracts/contracts/Hub.sol:308:44:\r\n    |\r\n308 |         for (uint i = seen.length; i >= 1; i--) {\r\n    |                                            ^^^\r\n\r\nWarning: CHC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n   --> circles-contracts/contracts/Hub.sol:333:43:\r\n    |\r\n333 |         for (uint i = 0; i < srcs.length; i++) {\r\n    |                                           ^^^\r\n\r\nWarning: CHC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n  --> circles-contracts/contracts/Hub.sol:67:13:\r\n   |\r\n67 |             iter += 1;\r\n   |             ^^^^^^^^^\r\n\r\nWarning: BMC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n  --> circles-contracts/contracts/SafeMath.sol:98:21:\r\n   |\r\n98 |         uint256 c = a * b;\r\n   |                     ^^^^^\r\nNote: \r\nNote that some information is erased after the execution of loops.\r\nYou can re-introduce information using require().\r\n\r\nWarning: BMC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n  --> circles-contracts/contracts/Hub.sol:67:13:\r\n   |\r\n67 |             iter += 1;\r\n   |             ^^^^^^^^^\r\nNote: \r\nNote that some information is erased after the execution of loops.\r\nYou can re-introduce information using require().\r\n\r\nWarning: BMC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n  --> circles-contracts/contracts/SafeMath.sol:98:21:\r\n   |\r\n98 |         uint256 c = a * b;\r\n   |                     ^^^^^\r\nNote: \r\nNote that some information is erased after the execution of loops.\r\nYou can re-introduce information using require().\r\n\r\nWarning: BMC: Condition is always true.\r\n   --> circles-contracts/contracts/Hub.sol:294:17:\r\n    |\r\n294 |         require(steps < type(uint64).max);\r\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nWarning: BMC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n  --> circles-contracts/contracts/SafeMath.sol:98:21:\r\n   |\r\n98 |         uint256 c = a * b;\r\n   |                     ^^^^^\r\nNote: \r\nNote that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.\r\nYou can re-introduce information using require().\r\nNote that some information is erased after the execution of loops.\r\nYou can re-introduce information using require().\r\nNote that external function calls are not inlined, even if the source code of the function is available. This is due to the possibility that the actual called contract has the same ABI but implements the function differently.\r\n\r\nWarning: BMC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n  --> circles-contracts/contracts/SafeMath.sol:98:21:\r\n   |\r\n98 |         uint256 c = a * b;\r\n   |                     ^^^^^\r\nNote: \r\nNote that some information is erased after the execution of loops.\r\nYou can re-introduce information using require().\r\n\r\nWarning: BMC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n  --> circles-contracts/contracts/Hub.sol:67:13:\r\n   |\r\n67 |             iter += 1;\r\n   |             ^^^^^^^^^\r\nNote: \r\nNote that some information is erased after the execution of loops.\r\nYou can re-introduce information using require().\r\n\r\nWarning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\r\n --> circles-contracts/contracts/Hub.sol:8:1:\r\n  |\r\n8 | contract Hub {\r\n  | ^ (Relevant source part starts here and spans across multiple lines).\r\n  ```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745455822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745473997",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-745473997",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 745473997,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTQ3Mzk5Nw==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T18:19:52Z",
    "updated_at": "2020-12-15T18:19:52Z",
    "author_association": "MEMBER",
    "body": "Lots of `might happen` there =/\r\nFound a bug when running on `Address.sol`:\r\nhttps://github.com/ethereum/solidity/issues/10619",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745473997/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745475085",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-745475085",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 745475085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTQ3NTA4NQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T18:21:46Z",
    "updated_at": "2020-12-15T18:21:46Z",
    "author_association": "MEMBER",
    "body": "I think the results from `Hub.sol` are ok though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745475085/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745515578",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-745515578",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 745515578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTUxNTU3OA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T19:30:00Z",
    "updated_at": "2020-12-15T19:30:00Z",
    "author_association": "MEMBER",
    "body": "```\r\nWarning: CHC: Overflow (resulting value larger than 2**256 - 1) might happen here.\r\n   --> circles-contracts/contracts/Hub.sol:277:43:\r\n    |\r\n277 |         for (uint i = 0; i < seen.length; i++) {\r\n    |                                           ^^^\r\n```\r\n\r\n`seen` here refers to `address[] public seen;` so while technically it could have `2**256-1` elements, it is not practically possible. We really need assertion annotations :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745515578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745551790",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-745551790",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 745551790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTU1MTc5MA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-15T20:36:00Z",
    "updated_at": "2020-12-15T20:36:00Z",
    "author_association": "MEMBER",
    "body": "For `a.push()`, we already add that the resulting length is `< uint.max - 1`, so that you can always push again without overflowing, since that would also not be practically possible (push overflow would also require 2**256 -1 operations). I'd say that similarly, we can add `length < uint.max - 1` for any `.length` access, so that it wouldn't overflow here as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/745551790/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758639195",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-758639195",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 758639195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODYzOTE5NQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-12T12:59:01Z",
    "updated_at": "2021-01-12T12:59:01Z",
    "author_association": "MEMBER",
    "body": "Running current develop on `Hub.sol` gives a huge amount of `underflow/overflow/div by 0 might happen here`. It would be good to try to understand why that is.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758639195/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758761164",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-758761164",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 758761164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODc2MTE2NA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-12T16:08:09Z",
    "updated_at": "2021-01-12T16:08:09Z",
    "author_association": "MEMBER",
    "body": "My guess is again `pow` and the other nonlinear stuff making termination analysis fail and therefore non of the other inductive stuff works.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758761164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1420407447",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-1420407447",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 1420407447,
    "node_id": "IC_kwDOAm_5kc5UqbKX",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-07T08:51:40Z",
    "updated_at": "2023-02-07T08:51:40Z",
    "author_association": "MEMBER",
    "body": "We should revisit this with the current SMTChecker and z3/eldarica.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1420407447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1644121252",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-1644121252",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 1644121252,
    "node_id": "IC_kwDOAm_5kc5h_0yk",
    "user": {
      "login": "pgebal",
      "id": 23142088,
      "node_id": "MDQ6VXNlcjIzMTQyMDg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23142088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgebal",
      "html_url": "https://github.com/pgebal",
      "followers_url": "https://api.github.com/users/pgebal/followers",
      "following_url": "https://api.github.com/users/pgebal/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgebal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgebal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgebal/subscriptions",
      "organizations_url": "https://api.github.com/users/pgebal/orgs",
      "repos_url": "https://api.github.com/users/pgebal/repos",
      "events_url": "https://api.github.com/users/pgebal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgebal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-20T15:18:56Z",
    "updated_at": "2023-07-20T15:18:56Z",
    "author_association": "COLLABORATOR",
    "body": "I've run solc commit b84af3f420b542a3cfbd05ab7e71c81dfc2a2064 \r\non circles-contracts https://github.com/pgebal/circles-contracts/tree/smt_checker_test.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1644121252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1644131659",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-1644131659",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 1644131659,
    "node_id": "IC_kwDOAm_5kc5h_3VL",
    "user": {
      "login": "pgebal",
      "id": 23142088,
      "node_id": "MDQ6VXNlcjIzMTQyMDg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23142088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgebal",
      "html_url": "https://github.com/pgebal",
      "followers_url": "https://api.github.com/users/pgebal/followers",
      "following_url": "https://api.github.com/users/pgebal/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgebal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgebal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgebal/subscriptions",
      "organizations_url": "https://api.github.com/users/pgebal/orgs",
      "repos_url": "https://api.github.com/users/pgebal/repos",
      "events_url": "https://api.github.com/users/pgebal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgebal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-20T15:25:13Z",
    "updated_at": "2023-07-20T15:30:07Z",
    "author_association": "COLLABORATOR",
    "body": "results of running CHC `solc --bin --model-checker-engine chc --model-checker-solvers z3 --model-checker-show-unproved --model-checker-show-unsupported Hub.sol`:\r\n\r\n```\r\nWarning: This is a pre-release compiler version, please do not use it in production.\r\n\r\nWarning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\r\n   --> Token.sol:173:31:\r\n    |\r\n173 |     ) public onlyHub returns (bool) {\r\n    |                               ^^^^\r\n\r\nWarning: Inline assembly may cause SMTChecker to produce spurious warnings (false positives).\r\n  --> Address.sol:33:9:\r\n   |\r\n33 |         assembly { codehash := extcodehash(account) }\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Inline assembly may cause SMTChecker to produce spurious warnings (false positives).\r\n   --> Address.sol:132:17:\r\n    |\r\n132 |                 assembly {\r\n    |                 ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nInfo: CHC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nInfo: CHC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nWarning: CHC: Division by zero might happen here.\r\n  --> SafeMath.sol:86:17:\r\n   |\r\n86 |         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n   |                 ^^^^^\r\n\r\nWarning: CHC: Division by zero might happen here.\r\n   --> SafeMath.sol:121:21:\r\n    |\r\n121 |         uint256 c = a / b;\r\n    |                     ^^^^^\r\n\r\nInfo: CHC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nWarning: Contract deployment is only supported in the trusted mode for external calls with the CHC engine.\r\n   --> Hub.sol:113:23:\r\n    |\r\n113 |         Token token = new Token(msg.sender);\r\n    |                       ^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: CHC: Out of bounds access might happen here.\r\n   --> Hub.sol:280:56:\r\n    |\r\n280 |             transferValidator memory curr = validation[seen[i]];\r\n    |                                                        ^^^^^^^\r\n\r\nWarning: CHC: Out of bounds access might happen here.\r\n   --> Hub.sol:286:25:\r\n    |\r\n286 |                 require(seen[i] == msg.sender, \"Path doesn't send from transaction sender\");\r\n    |                         ^^^^^^^\r\n\r\nWarning: CHC: Out of bounds access might happen here.\r\n   --> Hub.sol:287:23:\r\n    |\r\n287 |                 src = seen[i];\r\n    |                       ^^^^^^^\r\n\r\nWarning: CHC: Out of bounds access might happen here.\r\n   --> Hub.sol:293:24:\r\n    |\r\n293 |                 dest = seen[i];\r\n    |                        ^^^^^^^\r\n\r\nWarning: CHC: Out of bounds access might happen here.\r\n   --> Hub.sol:310:31:\r\n    |\r\n310 |             delete validation[seen[i-1]];\r\n    |                               ^^^^^^^^^\r\n\r\nWarning: CHC: Out of bounds access might happen here.\r\n   --> Hub.sol:334:27:\r\n    |\r\n334 |             address src = srcs[i];\r\n    |                           ^^^^^^^\r\n\r\nWarning: CHC: Out of bounds access might happen here.\r\n   --> Hub.sol:335:28:\r\n    |\r\n335 |             address dest = dests[i];\r\n    |                            ^^^^^^^^\r\n\r\nWarning: CHC: Out of bounds access might happen here.\r\n   --> Hub.sol:336:29:\r\n    |\r\n336 |             address token = tokenOwners[i];\r\n    |                             ^^^^^^^^^^^^^^\r\n\r\nWarning: CHC: Out of bounds access might happen here.\r\n   --> Hub.sol:337:27:\r\n    |\r\n337 |             uint256 wad = wads[i];\r\n    |                           ^^^^^^^\r\n\r\nWarning: CHC: Division by zero might happen here.\r\n   --> SafeMath.sol:157:16:\r\n    |\r\n157 |         return a % b;\r\n    |                ^^^^^\r\n\r\nInfo: CHC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nWarning: Contract code size is 29909 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\r\n --> Hub.sol:7:1:\r\n```\r\n\r\nWhat draws my attention are warnings on out of bounds access when the loop is:\r\n`for (uint i = 0; i < seen.length; i++)` and  `i` is used as access index. I think Leo is right on this problem: https://github.com/ethereum/solidity/issues/10062#issuecomment-745551790",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1644131659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1644136245",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-1644136245",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 1644136245,
    "node_id": "IC_kwDOAm_5kc5h_4c1",
    "user": {
      "login": "pgebal",
      "id": 23142088,
      "node_id": "MDQ6VXNlcjIzMTQyMDg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23142088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgebal",
      "html_url": "https://github.com/pgebal",
      "followers_url": "https://api.github.com/users/pgebal/followers",
      "following_url": "https://api.github.com/users/pgebal/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgebal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgebal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgebal/subscriptions",
      "organizations_url": "https://api.github.com/users/pgebal/orgs",
      "repos_url": "https://api.github.com/users/pgebal/repos",
      "events_url": "https://api.github.com/users/pgebal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgebal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-20T15:27:31Z",
    "updated_at": "2023-07-20T15:58:37Z",
    "author_association": "COLLABORATOR",
    "body": "results of running BMC with default `--model-checker-bmc-loop-iterations` setting: `solc --bin --model-checker-engine bmc --model-checker-solvers z3 --model-checker-show-unproved --model-checker-show-unsupported Hub.sol`\r\n\r\n```\r\nWarning: This is a pre-release compiler version, please do not use it in production.\r\n\r\nWarning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\r\n   --> Token.sol:173:31:\r\n    |\r\n173 |     ) public onlyHub returns (bool) {\r\n    |                               ^^^^\r\n\r\nWarning: Inline assembly may cause SMTChecker to produce spurious warnings (false positives).\r\n  --> Address.sol:33:9:\r\n   |\r\n33 |         assembly { codehash := extcodehash(account) }\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Inline assembly may cause SMTChecker to produce spurious warnings (false positives).\r\n   --> Address.sol:132:17:\r\n    |\r\n132 |                 assembly {\r\n    |                 ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nWarning: BMC: Condition is always true.\r\n  --> SafeMath.sol:31:17:\r\n   |\r\n31 |         require(c >= a, \"SafeMath: addition overflow\");\r\n   |                 ^^^^^^\r\nNote: Callstack:\r\n\r\nWarning: BMC: Condition is always true.\r\n  --> SafeMath.sol:86:17:\r\n   |\r\n86 |         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n   |                 ^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nWarning: Contract deployment is only supported in the trusted mode for external calls with the CHC engine.\r\n   --> Hub.sol:113:23:\r\n    |\r\n113 |         Token token = new Token(msg.sender);\r\n    |                       ^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: BMC: Condition is always false.\r\n   --> Hub.sol:297:17:\r\n    |\r\n297 |         require(src != address(0), \"Transaction must have a src\");\r\n    |                 ^^^^^^^^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nWarning: BMC: Condition unreachable.\r\n   --> Hub.sol:298:17:\r\n    |\r\n298 |         require(dest != address(0), \"Transaction must have a dest\");\r\n    |                 ^^^^^^^^^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nWarning: BMC: Condition unreachable.\r\n   --> Hub.sol:301:17:\r\n    |\r\n301 |         require(validation[src].received == 0, \"Sender is receiving\");\r\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nWarning: BMC: Condition unreachable.\r\n   --> Hub.sol:302:17:\r\n    |\r\n302 |         require(validation[dest].sent == 0, \"Recipient is sending\");\r\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nWarning: BMC: Condition unreachable.\r\n   --> Hub.sol:304:17:\r\n    |\r\n304 |         require(validation[src].sent == validation[dest].received, \"Unequal sent and received amounts\");\r\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nWarning: BMC: Condition unreachable.\r\n   --> Hub.sol:306:17:\r\n    |\r\n306 |         require(seen.length <= steps + 1, \"Seen too many addresses\");\r\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nWarning: BMC: Condition unreachable.\r\n   --> Hub.sol:314:17:\r\n    |\r\n314 |         require(seen.length == 0, \"Seen should be empty\");\r\n    |                 ^^^^^^^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nWarning: Contract code size is 29909 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\r\n```\r\n\r\nI am not sure why `Condition is always false` warning is printed. Context where it's printed is:\r\n```\r\n        address src;\r\n        address dest;\r\n        // iterate through the array of all the addresses that were part of the transaction data\r\n        for (uint i = 0; i < seen.length; i++) {\r\n            transferValidator memory curr = validation[seen[i]];\r\n            // if the address sent more than they received, they are the sender\r\n            if (curr.sent > curr.received) {\r\n                // if we've already found a sender, transaction is invalid\r\n                require(src == address(0), \"Path sends from more than one src\");\r\n                // the real token sender must also be the transaction sender\r\n                require(seen[i] == msg.sender, \"Path doesn't send from transaction sender\");\r\n                src = seen[i];\r\n            }\r\n            // if the address received more than they sent, they are the recipient\r\n            if (curr.received > curr.sent) {\r\n                // if we've already found a recipient, transaction is invalid\r\n                require(dest == address(0), \"Path sends to more than one dest\");\r\n                dest = seen[i];\r\n            }\r\n        }\r\n        // a valid path has both a sender and a recipient\r\n        require(src != address(0), \"Transaction must have a src\");\r\n```\r\nWe have a loop followed by a require statement on variable initialized inside the loop.\r\nWith the default loop iterations settings the loop is visited once and I think we shouldn't see this warning.\r\nI'll add a test to our checker to figure out why that happens. @leonardoalt ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1644136245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1644163351",
    "html_url": "https://github.com/ethereum/solidity/issues/10062#issuecomment-1644163351",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10062",
    "id": 1644163351,
    "node_id": "IC_kwDOAm_5kc5h__EX",
    "user": {
      "login": "pgebal",
      "id": 23142088,
      "node_id": "MDQ6VXNlcjIzMTQyMDg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23142088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pgebal",
      "html_url": "https://github.com/pgebal",
      "followers_url": "https://api.github.com/users/pgebal/followers",
      "following_url": "https://api.github.com/users/pgebal/following{/other_user}",
      "gists_url": "https://api.github.com/users/pgebal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pgebal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pgebal/subscriptions",
      "organizations_url": "https://api.github.com/users/pgebal/orgs",
      "repos_url": "https://api.github.com/users/pgebal/repos",
      "events_url": "https://api.github.com/users/pgebal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pgebal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-07-20T15:44:50Z",
    "updated_at": "2023-07-20T15:44:50Z",
    "author_association": "COLLABORATOR",
    "body": "Finally BMC run with loop iterations set to 3 `solc --bin --model-checker-engine bmc --model-checker-solvers z3 --model-checker-show-unproved --model-checker-show-unsupported --model-checker-bmc-loop-iterations 3 Hub.sol`\r\n\r\n```\r\nWarning: This is a pre-release compiler version, please do not use it in production.\r\n\r\nWarning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\r\n   --> Token.sol:173:31:\r\n    |\r\n173 |     ) public onlyHub returns (bool) {\r\n    |                               ^^^^\r\n\r\nWarning: Inline assembly may cause SMTChecker to produce spurious warnings (false positives).\r\n  --> Address.sol:33:9:\r\n   |\r\n33 |         assembly { codehash := extcodehash(account) }\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Inline assembly may cause SMTChecker to produce spurious warnings (false positives).\r\n   --> Address.sol:132:17:\r\n    |\r\n132 |                 assembly {\r\n    |                 ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nWarning: BMC: Condition is always true.\r\n  --> SafeMath.sol:31:17:\r\n   |\r\n31 |         require(c >= a, \"SafeMath: addition overflow\");\r\n   |                 ^^^^^^\r\nNote: Callstack:\r\n\r\nWarning: BMC: Condition is always true.\r\n  --> SafeMath.sol:86:17:\r\n   |\r\n86 |         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n   |                 ^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nWarning: Contract deployment is only supported in the trusted mode for external calls with the CHC engine.\r\n   --> Hub.sol:113:23:\r\n    |\r\n113 |         Token token = new Token(msg.sender);\r\n    |                       ^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: BMC: Condition is always true.\r\n   --> Hub.sol:314:17:\r\n    |\r\n314 |         require(seen.length == 0, \"Seen should be empty\");\r\n    |                 ^^^^^^^^^^^^^^^^\r\nNote: Callstack:\r\n\r\nInfo: BMC: 3 verification condition(s) proved safe! Enable the model checker option \"show proved safe\" to see all of them.\r\n\r\nWarning: Contract code size is 29909 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1644163351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
