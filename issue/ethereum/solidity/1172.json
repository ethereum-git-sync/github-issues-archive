{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/1172/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/1172/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/1172/events",
  "html_url": "https://github.com/ethereum/solidity/issues/1172",
  "id": 181504718,
  "node_id": "MDU6SXNzdWUxODE1MDQ3MTg=",
  "number": 1172,
  "title": "Mutation testing support for Solidity",
  "user": {
    "login": "ameten",
    "id": 4614623,
    "node_id": "MDQ6VXNlcjQ2MTQ2MjM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4614623?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ameten",
    "html_url": "https://github.com/ameten",
    "followers_url": "https://api.github.com/users/ameten/followers",
    "following_url": "https://api.github.com/users/ameten/following{/other_user}",
    "gists_url": "https://api.github.com/users/ameten/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ameten/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ameten/subscriptions",
    "organizations_url": "https://api.github.com/users/ameten/orgs",
    "repos_url": "https://api.github.com/users/ameten/repos",
    "events_url": "https://api.github.com/users/ameten/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ameten/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1018738457,
      "node_id": "MDU6TGFiZWwxMDE4NzM4NDU3",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/testing%20:hammer:",
      "name": "testing :hammer:",
      "color": "ffc6db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 21,
  "created_at": "2016-10-06T19:30:00Z",
  "updated_at": "2020-01-23T23:45:15Z",
  "closed_at": "2020-01-23T23:45:15Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "With the failure of TheDAO, it became evident that writing even a relatively simple smart contract correctly is a challenging task even for the most experienced developers. We should write unit tests and a formal specification to verify the smart contract code, but unit tests do not cover all the code sometimes and the formal specification can be as complicated as the implementation itself. How can we be sure that the unit tests check everything in the code and that the formal specification fully defines the code? The answer is mutation testing.\n\nWe create a mutated smart contract, namely a smart contract where one operation is changed comparing to the original one. We run all the unit tests against the mutant. If all unit tests pass then they certainly do not check the place we have changed in the mutant. We formally verify the mutant using the formal specification. If the mutant passes the formal verification, it means that the specification is not good enough.\n\nWe cannot directly mutate a smart contract already compiled into EVM instructions since it is not evident how we can separate instructions implementing business logic from instructions implementing language constructions like methods, blocks. We don't want mutationally test Solidity compiler, we want to test business logic of a smart contract.\n\nTherefore, we need that Solidity compiler produces mutants changing primitive operations at the moment when EVM code is generated.\n\nTasks:\n- Add new option to Solidity compiler so that it produces a list of mutants instead of code for the original contract.\n- Add debug information about mutants, namely what operation was mutated and where.\n- Add mutations like changing arithmetic or logic operation.\n\nDiscussions:\nTo keep the first iteration of development feasible, we can concentrate on mutants of the first order, i.e. only one place in a smart contract is mutated, and on very primitive mutations.\n\nThis issue implements the following idea: https://hack.ether.camp/idea/mutation-testing-for-solidity\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/1172/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/1172/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/252092988",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-252092988",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 252092988,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjA5Mjk4OA==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T21:23:49Z",
    "updated_at": "2016-10-06T21:23:49Z",
    "author_association": "MEMBER",
    "body": "I think it's a good idea to mutate the code so that we can evaluate and strengthen the unit tests.  Tasks are also clear.\n\nIs this issue still open for anyone to implement?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/252092988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/252094734",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-252094734",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 252094734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjA5NDczNA==",
    "user": {
      "login": "ameten",
      "id": 4614623,
      "node_id": "MDQ6VXNlcjQ2MTQ2MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4614623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ameten",
      "html_url": "https://github.com/ameten",
      "followers_url": "https://api.github.com/users/ameten/followers",
      "following_url": "https://api.github.com/users/ameten/following{/other_user}",
      "gists_url": "https://api.github.com/users/ameten/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ameten/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ameten/subscriptions",
      "organizations_url": "https://api.github.com/users/ameten/orgs",
      "repos_url": "https://api.github.com/users/ameten/repos",
      "events_url": "https://api.github.com/users/ameten/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ameten/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T21:31:14Z",
    "updated_at": "2016-10-06T21:31:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am looking to build a team to implement it as part of the online hackathon on hack.ether.camp. but if anybody just implement it outside of the hackathon, I would not mind.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/252094734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/252095760",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-252095760",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 252095760,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjA5NTc2MA==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T21:35:34Z",
    "updated_at": "2016-10-06T21:35:34Z",
    "author_association": "MEMBER",
    "body": "I see.  This is indeed a good target for a hackathon.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/252095760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/252096076",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-252096076",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 252096076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjA5NjA3Ng==",
    "user": {
      "login": "ameten",
      "id": 4614623,
      "node_id": "MDQ6VXNlcjQ2MTQ2MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4614623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ameten",
      "html_url": "https://github.com/ameten",
      "followers_url": "https://api.github.com/users/ameten/followers",
      "following_url": "https://api.github.com/users/ameten/following{/other_user}",
      "gists_url": "https://api.github.com/users/ameten/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ameten/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ameten/subscriptions",
      "organizations_url": "https://api.github.com/users/ameten/orgs",
      "repos_url": "https://api.github.com/users/ameten/repos",
      "events_url": "https://api.github.com/users/ameten/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ameten/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T21:37:02Z",
    "updated_at": "2016-10-06T21:37:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Join the team :)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/252096076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253512023",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-253512023",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 253512023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzUxMjAyMw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T13:25:11Z",
    "updated_at": "2016-10-13T13:25:11Z",
    "author_association": "MEMBER",
    "body": "@ameten nice idea! Did you already think about at which lever you want the mutations to take place?\nI'm actually using [libfuzzer](http://llvm.org/docs/LibFuzzer.html) to do something similar with the compiler itself. Libfuzzer operates cleverly on the actual source code byte representation. For this task, mutations still have to compile correctly, which is a certain challange.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253512023/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253602279",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-253602279",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 253602279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzYwMjI3OQ==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T18:45:14Z",
    "updated_at": "2016-10-13T18:45:14Z",
    "author_association": "MEMBER",
    "body": "@chriseth the mutations would be done in the AST level, not on the source text.  There are low-hanging fruits like negating `if` conditions, swapping `<` and `<=`, etc.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253602279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253731578",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-253731578",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 253731578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzczMTU3OA==",
    "user": {
      "login": "ameten",
      "id": 4614623,
      "node_id": "MDQ6VXNlcjQ2MTQ2MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4614623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ameten",
      "html_url": "https://github.com/ameten",
      "followers_url": "https://api.github.com/users/ameten/followers",
      "following_url": "https://api.github.com/users/ameten/following{/other_user}",
      "gists_url": "https://api.github.com/users/ameten/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ameten/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ameten/subscriptions",
      "organizations_url": "https://api.github.com/users/ameten/orgs",
      "repos_url": "https://api.github.com/users/ameten/repos",
      "events_url": "https://api.github.com/users/ameten/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ameten/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-14T07:43:28Z",
    "updated_at": "2016-10-14T07:43:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @chriseth, if it was not an item for Solidity compiler, souce code manipulation would be an option. Just replace one operator with another and use the manipulated source as input for the Solidity compiler. It is similar to the approach for test coverage: https://blog.colony.io/code-coverage-for-solidity-eecfa88668c2#.vx9uuc5ra . But we still need to do some scanning and parsing to be able to manipulate the source code. Why would we need to implement it separately, if we should have it already in the compiler? Also, support from tools like Truffle is not evident with such approach.\n\nSo, I agree with @pirapira that mutation should be done closer to generation of EVM code. I am not sure what information is stored into AST in the Solidity compiler, but we shall need not only syntax information, but semantic, too, to know what type of operator we are observing and select relevant list of possible mutations.\n\nOn the other hand, we cannot loose all information about source code itself, since we need to provide a clue about a mutant back to developer. At least line number and column where mutation was applied and what kind of mutation.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253731578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253793085",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-253793085",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 253793085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mzc5MzA4NQ==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-14T13:01:57Z",
    "updated_at": "2016-10-14T13:01:57Z",
    "author_association": "MEMBER",
    "body": "@ameten The AST nodes are equipped with the line and column information.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253793085/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253836312",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-253836312",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 253836312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzgzNjMxMg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-14T15:35:16Z",
    "updated_at": "2016-10-14T15:35:16Z",
    "author_association": "MEMBER",
    "body": "I agree that you should re-use the existing tools inside the solidity compiler and since the AST inside the compiler is not meant to be modified, probably the best way is to create the full AST, analyze it, find a place and way to modify, but perform the modification to the source code itself. If you find it too hard to do the changes to the compiler itself, you can also use its json ast output. There are some tools in the [remix repository](https://github.com/ethereum/remix) to do AST analysis.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253836312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253888047",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-253888047",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 253888047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mzg4ODA0Nw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-14T18:46:15Z",
    "updated_at": "2016-10-14T18:46:15Z",
    "author_association": "MEMBER",
    "body": "If possible, we should encourage using the JSON AST output. If that means it should be fixed, extended or be more stable, so be it. It will be beneficial in the long term I think.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/253888047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/258925715",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-258925715",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 258925715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODkyNTcxNQ==",
    "user": {
      "login": "ameten",
      "id": 4614623,
      "node_id": "MDQ6VXNlcjQ2MTQ2MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4614623?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ameten",
      "html_url": "https://github.com/ameten",
      "followers_url": "https://api.github.com/users/ameten/followers",
      "following_url": "https://api.github.com/users/ameten/following{/other_user}",
      "gists_url": "https://api.github.com/users/ameten/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ameten/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ameten/subscriptions",
      "organizations_url": "https://api.github.com/users/ameten/orgs",
      "repos_url": "https://api.github.com/users/ameten/repos",
      "events_url": "https://api.github.com/users/ameten/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ameten/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-07T18:49:56Z",
    "updated_at": "2016-11-07T18:49:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pirapira, @chriseth, @axic! I have implemented the most simple mutations!\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/258925715/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/449480725",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-449480725",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 449480725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTQ4MDcyNQ==",
    "user": {
      "login": "agroce",
      "id": 967816,
      "node_id": "MDQ6VXNlcjk2NzgxNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agroce",
      "html_url": "https://github.com/agroce",
      "followers_url": "https://api.github.com/users/agroce/followers",
      "following_url": "https://api.github.com/users/agroce/following{/other_user}",
      "gists_url": "https://api.github.com/users/agroce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agroce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
      "organizations_url": "https://api.github.com/users/agroce/orgs",
      "repos_url": "https://api.github.com/users/agroce/repos",
      "events_url": "https://api.github.com/users/agroce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agroce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-21T19:41:35Z",
    "updated_at": "2018-12-21T19:41:35Z",
    "author_association": "NONE",
    "body": "As an alternative, https://github.com/agroce/universalmutator will mutate .sol files, creating source variants, and use solc to check \"trivial compiler equivalence\" -- that is, any mutants that create equivalent bytecode to the original file, or to each other, are removed so you get a set of valid, different, mutants.  The solidity-specific mutators are limited (but easily extended), but the generic \"any language\" and \"C-like\" mutators handle a lot of what you would want.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/449480725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/475429435",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-475429435",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 475429435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTQyOTQzNQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-21T22:37:45Z",
    "updated_at": "2019-03-21T22:37:45Z",
    "author_association": "MEMBER",
    "body": "@chriseth @bshastry can we consider the protobuf based buffer is somewhat accomplishing this? Do we need to keep this issue? @bshastry can you get some inspiration from these comments?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/475429435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/475531343",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-475531343",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 475531343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTUzMTM0Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T08:20:40Z",
    "updated_at": "2019-03-22T08:20:40Z",
    "author_association": "MEMBER",
    "body": "I don't think this is related to what we do now with protobuf.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/475531343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/476094880",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-476094880",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 476094880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjA5NDg4MA==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-25T08:14:55Z",
    "updated_at": "2019-03-25T08:14:55Z",
    "author_association": "MEMBER",
    "body": "Some notes\r\n  - The AST mutation seems to be targeted at Solidity contracts, not the compiler itself. I am not sure how this infrastructure could be reused to test the compiler.\r\n  - As noted in #1406 the protobuf spec currently targets yul/strict assembly and not solidity\r\n  - We may want to try this https://github.com/agroce/universalmutator \r\n     - it generates mutants A and B (solidity programs) that are semantically equivalent\r\n     - the compiler generated bytecode for A and B must leave the same trace, otherwise there's a bug in the compiler, assuming the mutation logic itself is not buggy",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/476094880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/498070776",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-498070776",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 498070776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODA3MDc3Ng==",
    "user": {
      "login": "agroce",
      "id": 967816,
      "node_id": "MDQ6VXNlcjk2NzgxNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agroce",
      "html_url": "https://github.com/agroce",
      "followers_url": "https://api.github.com/users/agroce/followers",
      "following_url": "https://api.github.com/users/agroce/following{/other_user}",
      "gists_url": "https://api.github.com/users/agroce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agroce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
      "organizations_url": "https://api.github.com/users/agroce/orgs",
      "repos_url": "https://api.github.com/users/agroce/repos",
      "events_url": "https://api.github.com/users/agroce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agroce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-02T22:30:53Z",
    "updated_at": "2019-06-02T22:30:53Z",
    "author_association": "NONE",
    "body": "> Some notes\r\n> \r\n> * The AST mutation seems to be targeted at Solidity contracts, not the compiler itself. I am not sure how this infrastructure could be reused to test the compiler.\r\n> * As noted in #1406 the protobuf spec currently targets yul/strict assembly and not solidity\r\n> * We may want to try this https://github.com/agroce/universalmutator\r\n>   \r\n>   * it generates mutants A and B (solidity programs) that are semantically equivalent\r\n>   * the compiler generated bytecode for A and B must leave the same trace, otherwise there's a bug in the compiler, assuming the mutation logic itself is not buggy\r\n\r\nNot sure what you mean... the universalmutator won't usually produce semantically equivalent mutants, and when it does this is tough to know.  I guess given compiler version X that compiles A and B to same bytecode, you could check if Y also does.  But the answer might be hard to interpret...  I suppose if (1) Y does so, and (2) the bytecodes can behave different, then either X or Y is buggy...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/498070776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/500412811",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-500412811",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 500412811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDQxMjgxMQ==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-10T13:16:43Z",
    "updated_at": "2019-06-10T13:16:43Z",
    "author_association": "MEMBER",
    "body": "> Not sure what you mean... the universalmutator won't usually produce semantically equivalent mutants, and when it does this is tough to know.\r\n\r\nOkay, I don't know why I assumed mutants would be semantically equivalent, my bad.\r\n\r\n> I guess given compiler version X that compiles A and B to same bytecode, you could check if Y also does. But the answer might be hard to interpret... I suppose if (1) Y does so, and (2) the bytecodes can behave different, then either X or Y is buggy...\r\n\r\nHmm... this is not in our threat model at the moment but it could be at a later point. I think we are presently only interested in generating semantically equivalent test cases for a fixed compiler version. CC @chriseth ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/500412811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/500475413",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-500475413",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 500475413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDQ3NTQxMw==",
    "user": {
      "login": "agroce",
      "id": 967816,
      "node_id": "MDQ6VXNlcjk2NzgxNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agroce",
      "html_url": "https://github.com/agroce",
      "followers_url": "https://api.github.com/users/agroce/followers",
      "following_url": "https://api.github.com/users/agroce/following{/other_user}",
      "gists_url": "https://api.github.com/users/agroce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agroce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
      "organizations_url": "https://api.github.com/users/agroce/orgs",
      "repos_url": "https://api.github.com/users/agroce/repos",
      "events_url": "https://api.github.com/users/agroce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agroce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-10T16:06:55Z",
    "updated_at": "2019-06-10T16:06:55Z",
    "author_association": "NONE",
    "body": "Yeah, we actually try to filter out all the equivalent mutants!  It might be an interesting task though, and you could write rules in the regexp-defined style universalmutator uses, and just apply that rule file...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/500475413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/500487211",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-500487211",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 500487211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDQ4NzIxMQ==",
    "user": {
      "login": "agroce",
      "id": 967816,
      "node_id": "MDQ6VXNlcjk2NzgxNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agroce",
      "html_url": "https://github.com/agroce",
      "followers_url": "https://api.github.com/users/agroce/followers",
      "following_url": "https://api.github.com/users/agroce/following{/other_user}",
      "gists_url": "https://api.github.com/users/agroce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agroce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
      "organizations_url": "https://api.github.com/users/agroce/orgs",
      "repos_url": "https://api.github.com/users/agroce/repos",
      "events_url": "https://api.github.com/users/agroce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agroce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-10T16:39:18Z",
    "updated_at": "2019-06-10T16:39:18Z",
    "author_association": "NONE",
    "body": "Do you have in mind transformations that preserve semantics of interest?  Peppering all numeric literals with +0 is not very interesting.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/500487211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501276871",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-501276871",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 501276871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTI3Njg3MQ==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-12T13:37:32Z",
    "updated_at": "2019-06-12T13:37:32Z",
    "author_association": "MEMBER",
    "body": "> Yeah, we actually try to filter out all the equivalent mutants! It might be an interesting task though, and you could write rules in the regexp-defined style universalmutator uses, and just apply that rule file...\r\n\r\nNice, although I'm not sure if regexp is well-suited to create interesting semantically equivalent filters. As you said, `+0` is not very interesting.\r\n\r\nType casts [1] are an interesting pattern worth investigating. Perhaps it is better suited for writing a regexp rule even.\r\n\r\n[1] https://github.com/ethereum/solidity/issues/4893",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501276871/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577930383",
    "html_url": "https://github.com/ethereum/solidity/issues/1172#issuecomment-577930383",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/1172",
    "id": 577930383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzkzMDM4Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-23T23:45:15Z",
    "updated_at": "2020-01-23T23:45:15Z",
    "author_association": "MEMBER",
    "body": "This can now be accomplished by external tools through the ast export / import.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577930383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
