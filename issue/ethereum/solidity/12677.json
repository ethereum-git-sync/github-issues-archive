{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12677/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12677/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12677/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12677",
  "id": 1139470148,
  "node_id": "I_kwDOAm_5kc5D6u9E",
  "number": 12677,
  "title": "Warn about not explicitly requested conversions from rational number types to their mobile type.",
  "user": {
    "login": "donutcrypto",
    "id": 81838883,
    "node_id": "MDQ6VXNlcjgxODM4ODgz",
    "avatar_url": "https://avatars.githubusercontent.com/u/81838883?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/donutcrypto",
    "html_url": "https://github.com/donutcrypto",
    "followers_url": "https://api.github.com/users/donutcrypto/followers",
    "following_url": "https://api.github.com/users/donutcrypto/following{/other_user}",
    "gists_url": "https://api.github.com/users/donutcrypto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/donutcrypto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/donutcrypto/subscriptions",
    "organizations_url": "https://api.github.com/users/donutcrypto/orgs",
    "repos_url": "https://api.github.com/users/donutcrypto/repos",
    "events_url": "https://api.github.com/users/donutcrypto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/donutcrypto/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438157609,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjpKQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20impact",
      "name": "low impact",
      "color": "5d71ff",
      "default": false,
      "description": "Changes are not very noticeable or potential benefits are limited."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2022-02-16T03:10:12Z",
  "updated_at": "2022-09-14T14:33:49Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThe ternary operator doesn't appear to be producing the correct return type.\r\n\r\n## Environment\r\n\r\n- Compiler version: 8.11\r\n- Framework/IDE (e.g. Truffle or Remix): hardhat\r\n- EVM execution environment / backend / blockchain client: binance smart chain, hardhat testnet\r\n\r\n## Steps to Reproduce\r\n\r\nDeploying the following contract will overflow on uint8 addition. The expected value of `result` is 385.\r\n\r\n``` solidity\r\ncontract TestTernary\r\n{\r\n    mapping(uint8 => bool) flags;\r\n\r\n    uint256 public result;\r\n\r\n    constructor()\r\n    {\r\n        flags[uint8(1)] = true;\r\n        flags[uint8(2)] = true;\r\n        flags[uint8(3)] = true;\r\n\r\n        result = \r\n            (flags[0] ? 100 : 0) +\r\n            (flags[1] ? 110 : 0) +\r\n            (flags[2] ? 125 : 0) +\r\n            (flags[3] ? 150 : 0);\r\n    }\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12677/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12677/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1042889601",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1042889601",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1042889601,
    "node_id": "IC_kwDOAm_5kc4-KTuB",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T12:16:17Z",
    "updated_at": "2022-02-17T12:16:38Z",
    "author_association": "MEMBER",
    "body": "Thanks for reporting the issue @donutcrypto \r\n\r\nNotes:\r\n\r\nFuzzer wouldn't have helped because both legacy and IR fail on construction. Semantic test below:\r\n\r\n```\r\ncontract TestTernary\r\n{\r\n    mapping(uint8 => bool) flags;\r\n\r\n    uint256 public result;\r\n\r\n    constructor()\r\n    {\r\n        flags[uint8(1)] = true;\r\n        flags[uint8(2)] = true;\r\n        flags[uint8(3)] = true;\r\n\r\n        result = \r\n            (flags[0] ? 100 : 0) +\r\n            (flags[1] ? 110 : 0) +\r\n            (flags[2] ? 125 : 0) +\r\n            (flags[3] ? 150 : 0);\r\n    }\r\n}\r\n// ====\r\n// compileViaYul: also\r\n// ----\r\n// constructor() -> FAILURE\r\n// gas irOptimized: 139402\r\n// gas legacy: 140313\r\n// gas legacyOptimized: 135217\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1042889601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1042914573",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1042914573",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1042914573,
    "node_id": "IC_kwDOAm_5kc4-KZ0N",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-17T12:47:22Z",
    "updated_at": "2022-02-17T12:47:22Z",
    "author_association": "MEMBER",
    "body": "The reason is that unlimited precision only works as long as you are dealing with arithmetic expressions on literal constants. There are other similar situations where this can happen. I think we could warn when conversions from rational constants to their mobile type happen instead of a conversion to an explicit type.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1042914573/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046370369",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1046370369",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1046370369,
    "node_id": "IC_kwDOAm_5kc4-XlhB",
    "user": {
      "login": "donutcrypto",
      "id": 81838883,
      "node_id": "MDQ6VXNlcjgxODM4ODgz",
      "avatar_url": "https://avatars.githubusercontent.com/u/81838883?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donutcrypto",
      "html_url": "https://github.com/donutcrypto",
      "followers_url": "https://api.github.com/users/donutcrypto/followers",
      "following_url": "https://api.github.com/users/donutcrypto/following{/other_user}",
      "gists_url": "https://api.github.com/users/donutcrypto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donutcrypto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donutcrypto/subscriptions",
      "organizations_url": "https://api.github.com/users/donutcrypto/orgs",
      "repos_url": "https://api.github.com/users/donutcrypto/repos",
      "events_url": "https://api.github.com/users/donutcrypto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donutcrypto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-21T00:57:28Z",
    "updated_at": "2022-02-21T00:57:39Z",
    "author_association": "NONE",
    "body": "Thanks for the reponse. I just wanted to make sure I understand, but the values of `0`, `100`, `110`, etc. will be compiled to a uint8?\r\n\r\nFor example:\r\n\r\n```\r\nfunction f(uint8 _x);\r\nfunction f(uint256 _x);\r\n\r\nfunction g()\r\n{\r\n    f(1); // calls the uint8 version?\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046370369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046398806",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1046398806",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1046398806,
    "node_id": "IC_kwDOAm_5kc4-XsdW",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-21T02:03:01Z",
    "updated_at": "2022-02-21T02:03:01Z",
    "author_association": "MEMBER",
    "body": "@donutcrypto That would fail with \"No unique declaration found after argument-dependent lookup.\", because such a lookup is ambiguous. There is probably an open issue about choosing the closest one.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1046398806/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1048847978",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1048847978",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1048847978,
    "node_id": "IC_kwDOAm_5kc4-hCZq",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-23T14:37:48Z",
    "updated_at": "2022-02-23T14:37:48Z",
    "author_association": "MEMBER",
    "body": "> I think we could warn when conversions from rational constants to their mobile type happen instead of a conversion to an explicit type.\r\n\r\nDo you mean in general or just in the ternary operator? In a general case this could be pretty annoying. For example in something like `uint64 x = a + 1` the `1` gets converted to its mobile type. You'd have to write `uint64 x = a + uint64(1)` to avoid the warning. This a really common thing to do so warning about this might not be a good idea.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1048847978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1048921372",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1048921372",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1048921372,
    "node_id": "IC_kwDOAm_5kc4-hUUc",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-23T15:45:24Z",
    "updated_at": "2022-02-28T13:13:40Z",
    "author_association": "MEMBER",
    "body": "Answer from gitter:\r\n@cameel \r\n> I think that even very simple stuff like `a + 1` involves a conversion to the mobile type. We don't want to warn about that, right?\r\n\r\n@chriseth\r\n> indeed. it is a conversion to a type that does not \"magically appear\"\r\n> so if you have a binary operator and convert to one of the operands types, it's fine\r\n> only if the target type is different from both source types is it problematic\r\n\r\nStill, I'm not really convinced that it's the rule we need here.\r\nIn `(flags[0] ? 100 : 0) + (flags[1] ? 110 : 0)` we have operands converted from literals to `uint8` and the result is `uint8`.\r\nThe same thing occurs in `(100 + x) + (110 + x)` (assuming `uint8 x`) but we want to warn about the former and not about the latter.\r\n\r\nOn the other hand with some operators like `==`, the result type is always different and we don't want to warn about them either.\r\n\r\nI think it's really not just a different mobile type but also the fact that the expression directly returns the value one of its arguments so the user would expect the literal to remain a literal.\r\n\r\nMaybe let's try to figure out which specific situations are problematic. So far I came up with these:\r\n- Ternary operator: `1 + (c ? 2 : 3)`\r\n- ~Assignment operator: `1 + (a = 2) * 3`~ **EDIT**: not problematic after all.\r\n- Array indexing: `[1, 2, 3][1]`\r\n\r\nOn the other hand, I think a warning is not necessary for these:\r\n- Arithmetic operator: `1 + (a + 2) * 3`\r\n- Arithmetic assignment operator: `1 + (a += 2) * 3`\r\n- Tuple: `(a, b, c) = (1, 2, 3)` (unless we implement #12635)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1048921372/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054185071",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1054185071",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1054185071,
    "node_id": "IC_kwDOAm_5kc4-1ZZv",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-28T12:01:05Z",
    "updated_at": "2022-02-28T12:01:05Z",
    "author_association": "MEMBER",
    "body": "I think the probelmatic case is when a type is derived only from rational numbers, i.e. only from mobile types. As soon as an actual \"nameable\" type that does not come from a mobile type dictates the result type, it's fine.\r\n\r\nCan you explain why the assignment operator is problematic?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054185071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054243647",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1054243647",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1054243647,
    "node_id": "IC_kwDOAm_5kc4-1ns_",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-28T13:13:17Z",
    "updated_at": "2022-02-28T13:13:17Z",
    "author_association": "MEMBER",
    "body": "ok, maybe it's not. Depends on how we define its return type. I guess the most obvious way is to make it the type of the variable on the left side - and then you're right,  if user is aware of that, there's no surprise. I treated it as if it was returning the type of the expression on the right side.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054243647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054319421",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1054319421",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1054319421,
    "node_id": "IC_kwDOAm_5kc4-16M9",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-28T14:34:35Z",
    "updated_at": "2022-02-28T14:34:35Z",
    "author_association": "MEMBER",
    "body": "We discussed this briefly on the call today:\r\n1) The ternary operator is the only important case - we're going to deal with array literal case along with #11879 if necessary.\r\n2) We do think the behavior is not intuitive to users and we should do something about it.\r\n    - It's interesting that it only came up now. Probably due to checked arithmetic but even that has been present in the compiler for 12 past releases. So maybe this usage is rare in practice?\r\n3) This has potential to generate many false positives and unnecessarily force people to add even more casts. It would be a good idea to check how much it affects existing projects.\r\n\r\n@nishant-sachdeva regarding 3), could you replace the warning for ternary operator with an error as suggested by @chriseth and then see how many `t_ext_test` jobs actually fail?\r\n\r\nAlso, I think this behavior is not even documented. Could you mention it on the documentation page about [Operators](https://docs.soliditylang.org/en/latest/types.html#operators)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054319421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054328576",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1054328576",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1054328576,
    "node_id": "IC_kwDOAm_5kc4-18cA",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-28T14:44:46Z",
    "updated_at": "2022-02-28T14:44:46Z",
    "author_association": "MEMBER",
    "body": "Why do you think it is not documented? Rational literals use unlimited precision until they are used together with a non rational literal, and the condition in the ternary operator is never a rational literal, but we can of course make it more explicit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054328576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054337092",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1054337092",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1054337092,
    "node_id": "IC_kwDOAm_5kc4-1-hE",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-28T14:54:10Z",
    "updated_at": "2022-02-28T14:54:10Z",
    "author_association": "MEMBER",
    "body": "ok, you're right. [It is documented](https://docs.soliditylang.org/en/latest/types.html#rational-and-integer-literals):\r\n> Number literal expressions retain arbitrary precision until they are converted to a non-literal type (i.e. by using them together with a non-literal expression or by explicit conversion). This means that computations do not overflow and divisions do not truncate in number literal expressions.\r\n\r\nBut yeah, it's easy to miss all the consequences of this paragraph unless you really carefully go through the possible operators. I think we should add a note there mentioning ternary operator. I think I'd mention it under Operators too.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054337092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054341016",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1054341016",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1054341016,
    "node_id": "IC_kwDOAm_5kc4-1_eY",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-28T14:58:04Z",
    "updated_at": "2022-02-28T14:58:04Z",
    "author_association": "MEMBER",
    "body": "Also, this paragraph is not entirely true. I just checked and this reverts:\r\n``` solidity\r\ncontract C {\r\n    function f() public {\r\n        (true ? 255 : 254) + (true ? 255 : 254);\r\n    }\r\n}\r\n```\r\nAccording to that paragraph it should not overflow - it should be computed in unlimited precision. There's no explicit conversion and no non-literal expressions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1054341016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055314312",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1055314312",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1055314312,
    "node_id": "IC_kwDOAm_5kc4-5tGI",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-01T11:10:00Z",
    "updated_at": "2022-03-01T11:10:00Z",
    "author_association": "MEMBER",
    "body": "The issue is that `true` is not a number literal expression, but yeah, please just clarify the paragraph!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055314312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055831239",
    "html_url": "https://github.com/ethereum/solidity/issues/12677#issuecomment-1055831239",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12677",
    "id": 1055831239,
    "node_id": "IC_kwDOAm_5kc4-7rTH",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-01T20:29:07Z",
    "updated_at": "2022-03-01T20:29:07Z",
    "author_association": "MEMBER",
    "body": "Here's what @nishant-sachdeva's check found.\r\n\r\n- 5 projects have at least one use of ternary operator that would be affected. In all cases a warning would be a false-positive because the result does not get used in operations where the smaller range would matter:\r\n    1. OpenZeppelin: `return a / b + (a % b == 0 ? 0 : 1);`\r\n    2. Uniswap: `uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;`\r\n    3. Trident: `uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;`\r\n    4. Gnosis Safe: `uint flag = response ? 1 : 0;`\r\n    5. ElementFi: `baseIndex = underlyingFirst ? 0 : 1;`\r\n- 4 projects do not have any:\r\n    1. ENS\r\n    2. Pool Together\r\n    3. Yield Liquidator\r\n    4. PRBMath\r\n- In 4 remaining cases it's unclear because the check actually caught stuff with only a single literal. We'll need to should recheck them:\r\n    1. Perpetual Pools: `if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);`\r\n    2. Euler: `return eTokenAddress == address(0) ? 0 : IERC20(token).balanceOf(eulerAddress);`\r\n    3. Bleeps: `return eta == 1 ? 0 : eta;`\r\n    4. Colony: `return unsatisfactory ? 0 : task.payouts[_role][_token];`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1055831239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
