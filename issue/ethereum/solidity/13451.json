{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13451",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13451/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13451/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13451/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13451",
  "id": 1354942085,
  "node_id": "I_kwDOAm_5kc5QwsaF",
  "number": 13451,
  "title": "Let's allow string literals to consist of named constants, not only literals",
  "user": {
    "login": "k06a",
    "id": 702124,
    "node_id": "MDQ6VXNlcjcwMjEyNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/k06a",
    "html_url": "https://github.com/k06a",
    "followers_url": "https://api.github.com/users/k06a/followers",
    "following_url": "https://api.github.com/users/k06a/following{/other_user}",
    "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
    "organizations_url": "https://api.github.com/users/k06a/orgs",
    "repos_url": "https://api.github.com/users/k06a/repos",
    "events_url": "https://api.github.com/users/k06a/events{/privacy}",
    "received_events_url": "https://api.github.com/users/k06a/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-08-29T22:28:46Z",
  "updated_at": "2022-09-14T14:50:58Z",
  "closed_at": "2022-09-14T14:50:58Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nCurrently we can have multiline strings like this:\r\n```solidity\r\nbytes32 constant internal _LIMIT_ORDER_RFQ_TYPEHASH = keccak256(\r\n    \"OrderRFQ(\"\r\n        \"uint256 info,\"\r\n        \"address makerAsset,\"\r\n        \"address takerAsset,\"\r\n        \"address maker,\"\r\n        \"address allowedSender,\"\r\n        \"uint256 makingAmount,\"\r\n        \"uint256 takingAmount\"\r\n    \")\"\r\n);\r\n```\r\n\r\nAnd we came up to bytes data like this:\r\n```solidity\r\nbytes public constant PROXY_BYTECODE =\r\n    // Minimal Universal Constructor (11 bytes) = 383d3d39600b3803600bf3\r\n    // CODECOPY(0, 0, CODESIZE())\r\n    hex\"38\"   // CODESIZE\r\n    hex\"3d\"   // PUSH1(0) = RETURNDATASIZE\r\n    hex\"3d\"   // PUSH1(0) = RETURNDATASIZE\r\n    hex\"39\"   // CODECOPY\r\n    // RETURN(11, sub(CODESIZE, 11))\r\n    hex\"600b\" // PUSH1(11)\r\n    hex\"38\"   // CODESIZE\r\n    hex\"03\"   // SUB\r\n    hex\"600b\" // PUSH1(11)\r\n    hex\"f3\";   // RETURN\r\n```\r\n\r\n## Motivation\r\n\r\nImagine how cool it would be to write byte code like this right in Solidity syntax:\r\n```solidity\r\nbytes public constant SUB = hex\"03\";\r\nbytes public constant RETURN = hex\"f3\";\r\nbytes public constant CODESIZE = hex\"38\";\r\nbytes public constant PUSH1 = hex\"60\";\r\nbytes public constant RETURNDATASIZE = hex\"3d\";\r\n\r\nbytes public constant PROXY_BYTECODE =\r\n    // Minimal Universal Constructor (11 bytes) = 383d3d39600b3803600bf3\r\n    // CODECOPY(0, 0, CODESIZE())\r\n    CODESIZE\r\n    RETURNDATASIZE   // PUSH1(0)\r\n    RETURNDATASIZE   // PUSH1(0)\r\n    CODECOPY\r\n    // RETURN(11, sub(CODESIZE, 11))\r\n    PUSH1 hex\"0b\" // PUSH1(11)\r\n    CODESIZE\r\n    SUB\r\n    PUSH1 hex\"0b\" // PUSH1(11)\r\n    RETURN;\r\n```\r\n\r\nOr even like this:\r\n```solidity\r\nbytes public constant SUB = hex\"03\";\r\nbytes public constant RETURN = hex\"f3\";\r\nbytes public constant CODESIZE = hex\"38\";\r\nbytes public constant RETURNDATASIZE = hex\"3d\";\r\n\r\nbytes constant  PUSH1(bytes1 value) pure returns(bytes constant) {\r\n    return hex\"60\" bytes(value);\r\n}\r\n\r\nbytes public constant PROXY_BYTECODE =\r\n    // Minimal Universal Constructor (11 bytes) = 383d3d39600b3803600bf3\r\n    // CODECOPY(0, 0, CODESIZE())\r\n    CODESIZE RETURNDATASIZE RETURNDATASIZE  CODECOPY\r\n    // RETURN(11, sub(CODESIZE, 11))\r\n    PUSH1(11) CODESIZE SUB PUSH1(11) RETURN;\r\n```\r\n\r\n## Specification\r\n\r\nLet's discuss.\r\n\r\n## Backwards Compatibility\r\n\r\nNot needed.\r\n",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13451/reactions",
    "total_count": 3,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13451/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1231010928",
    "html_url": "https://github.com/ethereum/solidity/issues/13451#issuecomment-1231010928",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13451",
    "id": 1231010928,
    "node_id": "IC_kwDOAm_5kc5JX7xw",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-30T00:37:25Z",
    "updated_at": "2022-08-30T00:37:25Z",
    "author_association": "MEMBER",
    "body": "Feels like a pre-processor macro :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1231010928/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1246886549",
    "html_url": "https://github.com/ethereum/solidity/issues/13451#issuecomment-1246886549",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13451",
    "id": 1246886549,
    "node_id": "IC_kwDOAm_5kc5KUfqV",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-14T14:50:58Z",
    "updated_at": "2022-09-14T14:50:58Z",
    "author_association": "MEMBER",
    "body": "I'd actually consider this a special case of https://github.com/ethereum/solidity/issues/13318, which is on our roadmap.\r\n``bytes.concat`` is pure, resp. compile-time-evaluatable, so taking the example above, we could do\r\n```\r\nbytes public constant PROXY_BYTECODE = bytes.concat(\r\n    // Minimal Universal Constructor (11 bytes) = 383d3d39600b3803600bf3\r\n    // CODECOPY(0, 0, CODESIZE())\r\n    hex\"38\",   // CODESIZE\r\n    hex\"3d\",   // PUSH1(0) = RETURNDATASIZE\r\n    hex\"3d\",   // PUSH1(0) = RETURNDATASIZE\r\n    hex\"39\",   // CODECOPY\r\n    // RETURN(11, sub(CODESIZE, 11))\r\n    hex\"600b\", // PUSH1(11)\r\n    hex\"38\",  // CODESIZE\r\n    hex\"03\",   // SUB\r\n    hex\"600b\", // PUSH1(11)\r\n    hex\"f3\"   // RETURN\r\n);\r\n```\r\n\r\nThat would also implicitly allow the use of\r\n```\r\nbytes constant  PUSH1(bytes1 value) pure returns(bytes constant) {\r\n    return hex\"60\" bytes(value);\r\n}\r\n```\r\nas suggested.\r\n\r\nSo I'm closing this as a use case of compile-time constant expression evaluation.\r\nIf you think there should be special cases for literals beyond what compile-time evaluation of ``bytes.concat`` can offer, please reopen!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1246886549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
