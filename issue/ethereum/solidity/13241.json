{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13241",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13241/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13241/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13241/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13241",
  "id": 1292441848,
  "node_id": "I_kwDOAm_5kc5NCRj4",
  "number": 13241,
  "title": "Provide Support for Inline Functions",
  "user": {
    "login": "toongeorges",
    "id": 6784449,
    "node_id": "MDQ6VXNlcjY3ODQ0NDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6784449?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/toongeorges",
    "html_url": "https://github.com/toongeorges",
    "followers_url": "https://api.github.com/users/toongeorges/followers",
    "following_url": "https://api.github.com/users/toongeorges/following{/other_user}",
    "gists_url": "https://api.github.com/users/toongeorges/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/toongeorges/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/toongeorges/subscriptions",
    "organizations_url": "https://api.github.com/users/toongeorges/orgs",
    "repos_url": "https://api.github.com/users/toongeorges/repos",
    "events_url": "https://api.github.com/users/toongeorges/events{/privacy}",
    "received_events_url": "https://api.github.com/users/toongeorges/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-07-03T23:01:03Z",
  "updated_at": "2022-07-04T12:05:20Z",
  "closed_at": "2022-07-04T11:26:15Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nFunctions calls in Solidity provide execution overhead versus running code inline.\r\n\r\nThere may be a trade off between writing efficient, complex inline code versus less efficient more readable code in functions.  If inline functions existed, this trade off would not need to exist and people could write efficient readable code.  Currently, internal functions are not always automatically converted to inline functions by the optimizer even if converting them to inline functions is always the best solution (e.g. in case the function is only used once and using the function inline does not cause a Stack too deep Error).\r\n\r\nAn example explanation of inline functions in C/C++ can be found [here](https://www.simplilearn.com/tutorials/cpp-tutorial/inline-function-in-cpp)\r\n\r\n## Motivation\r\nThe code snippet is taken from [here](https://github.com/toongeorges/cryptoshares/blob/0cda8448beaed4d1e49cc73f2ec42208f160abff/solidity/contracts/base/CorporateAction.sol)\r\n\r\n### Inline Code Example\r\nThe inline code looks like:\r\n```solidity\r\nif (decisionType < ActionType.RAISE_FUNDS) {\r\n    if (decisionType < ActionType.WITHDRAW_FUNDS) {\r\n        if (decisionType == ActionType.ISSUE_SHARES) {\r\n            _mint(address(this), numberOfShares);\r\n        } else { //decisionType == ActionType.DESTROY_SHARES\r\n            _burn(address(this), numberOfShares);\r\n        }\r\n    } else {\r\n        if (decisionType == ActionType.WITHDRAW_FUNDS) {\r\n            safeTransfer(IERC20(currency), exchangeAddress, amount);\r\n        } else { //decisionType == ActionType.CANCEL_ORDER\r\n            IExchange(exchangeAddress).cancel(amount);\r\n        }\r\n    }\r\n} else if (decisionType < ActionType.REVERSE_SPLIT) {\r\n    if (decisionType < ActionType.ASK) {\r\n        if (decisionType == ActionType.RAISE_FUNDS) {\r\n            IExchange exchange = IExchange(exchangeAddress);\r\n            increaseAllowance(exchangeAddress, numberOfShares);\r\n            PackableAddresses.register(exchanges[address(this)], exchangeAddress);\r\n            exchange.ask(address(this), numberOfShares, currency, numberOfShares*amount, optionalAmount);\r\n        } else  { //decisionType == ActionType.BUY_BACK\r\n            IExchange exchange = IExchange(exchangeAddress);\r\n            IERC20(currency).safeIncreaseAllowance(exchangeAddress, numberOfShares*amount);\r\n            PackableAddresses.register(exchanges[currency], exchangeAddress);\r\n            exchange.bid(currency, numberOfShares*amount, address(this), numberOfShares, optionalAmount);\r\n        }\r\n    } else {\r\n        if (decisionType == ActionType.ASK) {\r\n            IExchange exchange = IExchange(exchangeAddress);\r\n            IERC20(currency).safeIncreaseAllowance(exchangeAddress, amount);\r\n            PackableAddresses.register(exchanges[currency], exchangeAddress);\r\n            exchange.ask(currency, amount, optionalCurrency, optionalAmount, numberOfShares);\r\n        } else  { //decisionType == ActionType.BID\r\n            IExchange exchange = IExchange(exchangeAddress);\r\n            IERC20(optionalCurrency).safeIncreaseAllowance(exchangeAddress, optionalAmount);\r\n            PackableAddresses.register(exchanges[optionalCurrency], exchangeAddress);\r\n            exchange.bid(currency, amount, optionalCurrency, optionalAmount, numberOfShares);\r\n        }\r\n    }\r\n} else {\r\n    //...\r\n}\r\n```\r\n\r\n### Function Code Example\r\nThis code could be made more readable, but less efficient in the following way:\r\n\r\n```solidity\r\nif (decisionType < ActionType.RAISE_FUNDS) {\r\n    if (decisionType < ActionType.WITHDRAW_FUNDS) {\r\n        if (decisionType == ActionType.ISSUE_SHARES) {\r\n            issueShares(numberOfShares);\r\n        } else { //decisionType == ActionType.DESTROY_SHARES\r\n            destroyShares(numberOfShares);\r\n        }\r\n    } else {\r\n        if (decisionType == ActionType.WITHDRAW_FUNDS) {\r\n            withdrawFunds(currency, amount, exchangeAddress);\r\n        } else { //decisionType == ActionType.CANCEL_ORDER\r\n            cancelOrder(exchangeAddress, amount);\r\n        }\r\n    }\r\n} else if (decisionType < ActionType.REVERSE_SPLIT) {\r\n    if (decisionType < ActionType.ASK) {\r\n        if (decisionType == ActionType.RAISE_FUNDS) {\r\n            raiseFunds(exchangeAddress, numberOfShares, currency, amount, optionalAmount);\r\n        } else  { //decisionType == ActionType.BUY_BACK\r\n            buyBack(exchangeAddress, numberOfShares, currency, amount, optionalAmount);\r\n        }\r\n    } else {\r\n        if (decisionType == ActionType.ASK) {\r\n            ask(exchangeAddress, currency, amount, optionalCurrency, optionalAmount, numberOfShares);\r\n        } else  { //decisionType == ActionType.BID\r\n            bid(exchangeAddress, currency, amount, optionalCurrency, optionalAmount, numberOfShares);\r\n        }\r\n    }\r\n} else {\r\n    //...\r\n}\r\n\r\nfunction issueShares(uint256 numberOfShares) internal {\r\n    _mint(address(this), numberOfShares);\r\n}\r\n\r\nfunction destroyShares(uint256 numberOfShares) internal {\r\n    _burn(address(this), numberOfShares);\r\n}\r\n\r\nfunction withdrawFunds(address currency, uint256 amount, address destination) internal {\r\n    safeTransfer(IERC20(currency), destination, amount);\r\n}\r\n\r\nfunction cancelOrder(address exchangeAddress, uint256 orderId) internal {\r\n    IExchange(exchangeAddress).cancel(orderId);\r\n}\r\n\r\nfunction raiseFunds(address exchangeAddress, uint256 numberOfShares, address currency, uint256 amount, uint256 maxOrders) internal {\r\n    IExchange exchange = IExchange(exchangeAddress);\r\n    increaseAllowance(exchangeAddress, numberOfShares);\r\n    PackableAddresses.register(exchanges[address(this)], exchangeAddress);\r\n    exchange.ask(address(this), numberOfShares, currency, numberOfShares*amount, maxOrders);\r\n}\r\n\r\nfunction buyBack(address exchangeAddress, uint256 numberOfShares, address currency, uint256 amount, uint256 maxOrders) internal {\r\n    IExchange exchange = IExchange(exchangeAddress);\r\n    IERC20(currency).safeIncreaseAllowance(exchangeAddress, numberOfShares*amount);\r\n    PackableAddresses.register(exchanges[currency], exchangeAddress);\r\n    exchange.bid(currency, numberOfShares*amount, address(this), numberOfShares, maxOrders);\r\n}\r\n\r\nfunction ask(address exchangeAddress, address currency, uint256 amount, address optionalCurrency, uint256 optionalAmount, uint256 maxOrders) internal {\r\n    IExchange exchange = IExchange(exchangeAddress);\r\n    IERC20(currency).safeIncreaseAllowance(exchangeAddress, amount);\r\n    PackableAddresses.register(exchanges[currency], exchangeAddress);\r\n    exchange.ask(currency, amount, optionalCurrency, optionalAmount, maxOrders);\r\n}\r\n\r\nfunction bid(address exchangeAddress, address currency, uint256 amount, address optionalCurrency, uint256 optionalAmount, uint256 maxOrders) internal {\r\n    IExchange exchange = IExchange(exchangeAddress);\r\n    IERC20(optionalCurrency).safeIncreaseAllowance(exchangeAddress, optionalAmount);\r\n    PackableAddresses.register(exchanges[optionalCurrency], exchangeAddress);\r\n    exchange.bid(currency, amount, optionalCurrency, optionalAmount, maxOrders);\r\n}\r\n```\r\n\r\n### Requested Feature\r\n\r\nThe **inline** keyword could be reserved and used in place of the **internal** keyword for functions.  In this case, the code would be both readable and efficient and would look like:\r\n\r\n```solidity\r\nif (decisionType < ActionType.RAISE_FUNDS) {\r\n    if (decisionType < ActionType.WITHDRAW_FUNDS) {\r\n        if (decisionType == ActionType.ISSUE_SHARES) {\r\n            issueShares(numberOfShares);\r\n        } else { //decisionType == ActionType.DESTROY_SHARES\r\n            destroyShares(numberOfShares);\r\n        }\r\n    } else {\r\n        if (decisionType == ActionType.WITHDRAW_FUNDS) {\r\n            withdrawFunds(currency, amount, exchangeAddress);\r\n        } else { //decisionType == ActionType.CANCEL_ORDER\r\n            cancelOrder(exchangeAddress, amount);\r\n        }\r\n    }\r\n} else if (decisionType < ActionType.REVERSE_SPLIT) {\r\n    if (decisionType < ActionType.ASK) {\r\n        if (decisionType == ActionType.RAISE_FUNDS) {\r\n            raiseFunds(exchangeAddress, numberOfShares, currency, amount, optionalAmount);\r\n        } else  { //decisionType == ActionType.BUY_BACK\r\n            buyBack(exchangeAddress, numberOfShares, currency, amount, optionalAmount);\r\n        }\r\n    } else {\r\n        if (decisionType == ActionType.ASK) {\r\n            ask(exchangeAddress, currency, amount, optionalCurrency, optionalAmount, numberOfShares);\r\n        } else  { //decisionType == ActionType.BID\r\n            bid(exchangeAddress, currency, amount, optionalCurrency, optionalAmount, numberOfShares);\r\n        }\r\n    }\r\n} else {\r\n    //...\r\n}\r\n\r\nfunction issueShares(uint256 numberOfShares) inline {\r\n    _mint(address(this), numberOfShares);\r\n}\r\n\r\nfunction destroyShares(uint256 numberOfShares) inline {\r\n    _burn(address(this), numberOfShares);\r\n}\r\n\r\nfunction withdrawFunds(address currency, uint256 amount, address destination) inline {\r\n    safeTransfer(IERC20(currency), destination, amount);\r\n}\r\n\r\nfunction cancelOrder(address exchangeAddress, uint256 orderId) inline {\r\n    IExchange(exchangeAddress).cancel(orderId);\r\n}\r\n\r\nfunction raiseFunds(address exchangeAddress, uint256 numberOfShares, address currency, uint256 amount, uint256 maxOrders) inline {\r\n    IExchange exchange = IExchange(exchangeAddress);\r\n    increaseAllowance(exchangeAddress, numberOfShares);\r\n    PackableAddresses.register(exchanges[address(this)], exchangeAddress);\r\n    exchange.ask(address(this), numberOfShares, currency, numberOfShares*amount, maxOrders);\r\n}\r\n\r\nfunction buyBack(address exchangeAddress, uint256 numberOfShares, address currency, uint256 amount, uint256 maxOrders) inline {\r\n    IExchange exchange = IExchange(exchangeAddress);\r\n    IERC20(currency).safeIncreaseAllowance(exchangeAddress, numberOfShares*amount);\r\n    PackableAddresses.register(exchanges[currency], exchangeAddress);\r\n    exchange.bid(currency, numberOfShares*amount, address(this), numberOfShares, maxOrders);\r\n}\r\n\r\nfunction ask(address exchangeAddress, address currency, uint256 amount, address optionalCurrency, uint256 optionalAmount, uint256 maxOrders) inline {\r\n    IExchange exchange = IExchange(exchangeAddress);\r\n    IERC20(currency).safeIncreaseAllowance(exchangeAddress, amount);\r\n    PackableAddresses.register(exchanges[currency], exchangeAddress);\r\n    exchange.ask(currency, amount, optionalCurrency, optionalAmount, maxOrders);\r\n}\r\n\r\nfunction bid(address exchangeAddress, address currency, uint256 amount, address optionalCurrency, uint256 optionalAmount, uint256 maxOrders) inline {\r\n    IExchange exchange = IExchange(exchangeAddress);\r\n    IERC20(optionalCurrency).safeIncreaseAllowance(exchangeAddress, optionalAmount);\r\n    PackableAddresses.register(exchanges[optionalCurrency], exchangeAddress);\r\n    exchange.bid(currency, amount, optionalCurrency, optionalAmount, maxOrders);\r\n}\r\n```\r\n\r\n## Specification\r\n\r\nAdd a keyword **inline** that could be used instead of **internal** for functions.  Using the **inline** keyword would force the compiler to always make a function inline, wherever it is used.\r\n\r\n## Backwards Compatibility\r\n\r\nA new keyword is used, so in case there was an identifier that was exactly called **inline**, the code would break.  This can be solved by renaming the identifier.  There are no other breaking changes.\r\n\r\nTechnically, from the `function-definition` at  https://docs.soliditylang.org/en/v0.8.15/grammar.html , only a modifier with the name **inline** may cause code to be non backward compatible. ",
  "closed_by": {
    "login": "Marenz",
    "id": 424752,
    "node_id": "MDQ6VXNlcjQyNDc1Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Marenz",
    "html_url": "https://github.com/Marenz",
    "followers_url": "https://api.github.com/users/Marenz/followers",
    "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
    "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
    "organizations_url": "https://api.github.com/users/Marenz/orgs",
    "repos_url": "https://api.github.com/users/Marenz/repos",
    "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Marenz/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13241/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13241/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1173704457",
    "html_url": "https://github.com/ethereum/solidity/issues/13241#issuecomment-1173704457",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13241",
    "id": 1173704457,
    "node_id": "IC_kwDOAm_5kc5F9U8J",
    "user": {
      "login": "Marenz",
      "id": 424752,
      "node_id": "MDQ6VXNlcjQyNDc1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Marenz",
      "html_url": "https://github.com/Marenz",
      "followers_url": "https://api.github.com/users/Marenz/followers",
      "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
      "organizations_url": "https://api.github.com/users/Marenz/orgs",
      "repos_url": "https://api.github.com/users/Marenz/repos",
      "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Marenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-04T11:26:15Z",
    "updated_at": "2022-07-04T11:26:15Z",
    "author_association": "MEMBER",
    "body": "I would consider this issue a duplicate of https://github.com/ethereum/solidity/issues/12782 and any further arguing should happen in that issue..",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1173704457/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
