{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11201",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11201/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11201/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11201/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11201",
  "id": 846832908,
  "node_id": "MDU6SXNzdWU4NDY4MzI5MDg=",
  "number": 11201,
  "title": "Consider not computing the revert message if revert condition is not met",
  "user": {
    "login": "Amxx",
    "id": 2432299,
    "node_id": "MDQ6VXNlcjI0MzIyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2432299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Amxx",
    "html_url": "https://github.com/Amxx",
    "followers_url": "https://api.github.com/users/Amxx/followers",
    "following_url": "https://api.github.com/users/Amxx/following{/other_user}",
    "gists_url": "https://api.github.com/users/Amxx/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Amxx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Amxx/subscriptions",
    "organizations_url": "https://api.github.com/users/Amxx/orgs",
    "repos_url": "https://api.github.com/users/Amxx/repos",
    "events_url": "https://api.github.com/users/Amxx/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Amxx/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-03-31T15:07:20Z",
  "updated_at": "2021-03-31T19:50:23Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nI noticed that when adding a `require` statement with a complex revert reason (computed by an internal function), I have to pay the cost of computing this revert string regardless of the value of the precondition. Also, if that internal function is not view, and include some state changes, these changes are enacted event when the condition does require a revert.\r\n\r\nHere is an example of code\r\n```\r\ncontract test {\r\n    uint256 public i = 0;\r\n    \r\n    function trigger() external {\r\n        require(true, getErrorMessage());\r\n    }\r\n    \r\n    function getErrorMessage() internal returns (string memory) {\r\n        i++;\r\n        return \"\";\r\n    }\r\n}\r\n```\r\n\r\nWhen calling trigger, I was not expecting the `getErrorMessage()` to be called, and I am not expecting `i` to be incremented. In a way, I'm expecting:\r\n`requier(condition_or_call, string_or_call);` to be translated into `if (!condition_or_call) revert(string_or_call);`\r\n\r\n[In this particular case, using `if-revert` saves about 30k gas on valid paths that do not revert](https://github.com/Amxx/openzeppelin-contracts/blob/feature/AccessControlRevertMessage/contracts/access/AccessControl.sol#L122-L131)\r\n\r\n## Motivation\r\n\r\nHaving the compiler rewrite `require()` using this `if() revert()` logic would reduce the gas cost of non reverting paths since the complex error message would not have to be computer unless absolutely necessary. Also, it means the revert string can be computed with additional assumptions.\r\n\r\n## Specification\r\n\r\nInternally (yul?) rewrite all `require(x,y)` statements as `if (!x) revert(y);`\r\n\r\n## Backwards Compatibility\r\n\r\nWill this does change the behavior of the produced bytecode, I believe it does in a way that is compliant with the common understanding of `require(bool,string)` by devs. Still, this might be breaking in some extreme cases that have to be studied.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11201/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11201/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/811361722",
    "html_url": "https://github.com/ethereum/solidity/issues/11201#issuecomment-811361722",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11201",
    "id": 811361722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMTM2MTcyMg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-31T19:14:02Z",
    "updated_at": "2021-03-31T19:23:36Z",
    "author_association": "MEMBER",
    "body": "This is a known \"issue\". The `revert` function is treated as a regular function and as such its arguments are evaluated prior to invoking it.\r\n\r\nIn #7877 we are discussing potential future improvements to this. The consensus so far was that changing the behaviour of `revert` alone would be weird, but we plan to introduce new functionality which makes this more clear and obsoletes the old one.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/811361722/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/811391766",
    "html_url": "https://github.com/ethereum/solidity/issues/11201#issuecomment-811391766",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11201",
    "id": 811391766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMTM5MTc2Ng==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-31T19:44:08Z",
    "updated_at": "2021-03-31T19:45:03Z",
    "author_association": "MEMBER",
    "body": "I think that the expectation comes from the fact that until very recently (#10089) our docs stated that they are equivalent. Now we have a caveat about this in [the docs for `revert()`](https://docs.soliditylang.org/en/latest/control-structures.html#revert):\r\n\r\n> The `require` function is evaluated just as any other function. This means that all arguments are evaluated before the function itself is executed. In particular, in `require(condition, f())` the function `f` is executed even if `condition` is true.\r\n\r\nI don't think that just changing the semantics of `require()` without changing the syntax is a good idea. It looks like a function call and to me  for example it would be completely unintuitive if side-effects did not to happen when the condition is false. And on top of that it's been working like that for a long time so it has a big potential to silently break code that already assumes the correct behavior.\r\n\r\nBut I agree that conflicting expectations here are a problem and it's actually one of the reasons (though not the only one) why we haven't extended `require()` to support the new custom error system that will be released in 0.8.4 (see the issue @axic linked to; [this comment](https://github.com/ethereum/solidity/issues/7877#issuecomment-780598691) is a good summary of the current situation). For now only the newly introduced `revert` statement will support custom errors. For `require()` we'd prefer to change the syntax to make it clearer but all the proposals so far have some downsides and it's possible that we will end up just deprecating `require()` and recommending the `if (!c) revert Error();` pattern instead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/811391766/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/811394537",
    "html_url": "https://github.com/ethereum/solidity/issues/11201#issuecomment-811394537",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11201",
    "id": 811394537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMTM5NDUzNw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-31T19:46:56Z",
    "updated_at": "2021-03-31T19:47:26Z",
    "author_association": "MEMBER",
    "body": "> recommending the if (!c) revert Error(); pattern instead.\r\n\r\nOr `unless (c) revert Error();` :wink:\r\n\r\nBut I think it would be early to make such statements. `require` is also useful for other subsystems, like the SMTChecker, that does not mean it won't be able to understand a if/revert unless/revert statement, but it is something we need to take into consideration.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/811394537/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/811396888",
    "html_url": "https://github.com/ethereum/solidity/issues/11201#issuecomment-811396888",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11201",
    "id": 811396888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMTM5Njg4OA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-31T19:49:21Z",
    "updated_at": "2021-03-31T19:50:23Z",
    "author_association": "MEMBER",
    "body": "I'd count that as new syntax :)\r\n\r\nJust to be clear, I'm not saying we will definitely deprecate it. Just that we could not agree on a replacement yet and even the new docs use the `if (!c) revert Error();` pattern for it so it's a possibility. Sorry if I worded it in a way that implies that it's more likely than it actually is.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/811396888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
