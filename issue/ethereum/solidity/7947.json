{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/7947",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/7947/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/7947/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/7947/events",
  "html_url": "https://github.com/ethereum/solidity/issues/7947",
  "id": 535633755,
  "node_id": "MDU6SXNzdWU1MzU2MzM3NTU=",
  "number": 7947,
  "title": "[Testing] Custom yul protobuf mutations",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1018738457,
      "node_id": "MDU6TGFiZWwxMDE4NzM4NDU3",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/testing%20:hammer:",
      "name": "testing :hammer:",
      "color": "ffc6db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-12-10T10:25:30Z",
  "updated_at": "2020-07-09T13:40:17Z",
  "closed_at": "2020-07-09T13:40:17Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nCurrently, mutations applied to protobuf input that describes a yul program are managed by the libprotobuf-mutator library.\r\n\r\nI took a look at these. The mutations include:\r\n  - Adding a message\r\n  - Removing a message\r\n  - Copying messages from one input to another\r\n  - Mutating a field's contents\r\n\r\nI have a strong feeling that these mutations are too basic (i.e., no yul awareness makes them inefficient). This issue tracks support for adding a custom yul proto mutator class that a new fuzzer can then make use of.\r\n\r\nThe plan is to\r\n  - have a new yul proto differential fuzzer that makes use of custom mutations\r\n  - compare this fuzzer's performance over time\r\n  - take further action based on point 2\r\n\r\n## Motivation\r\n\r\nLet's suppose we have input X describing the test case\r\n\r\n```\r\n{\r\n  let x := calldataload(0)\r\n  if x {\r\n    mstore(0, 1)    \r\n  }\r\n}\r\n```\r\n\r\nX looks like this\r\n\r\n```\r\nblock {\r\n   // let x := calldataload(0)\r\n  statements {\r\n    decl {\r\n      expr {\r\n        unop {\r\n          op: CALLDATALOAD\r\n          operand {\r\n            cons {\r\n               intval: 0\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n   // if x { mstore(0, 1) }\r\n  statements {\r\n    ifstmt {\r\n      cond {\r\n         varref {\r\n           varnum: 0\r\n         }\r\n      }\r\n      if_body {\r\n        statements {\r\n           storage_func {\r\n              op: MSTORE\r\n              loc {\r\n                cons {\r\n                   intval: 0\r\n                }\r\n              }\r\n              val {\r\n                cons {\r\n                  intval: 1\r\n                }\r\n             }\r\n           }\r\n        }\r\n     }\r\n  }\r\n}\r\n```\r\n\r\nNow imagine we want to apply a mutation that inverts the if condition like so\r\n\r\n```\r\n  let x := calldataload(0)\r\n  if iszero(x) {\r\n    mstore(0, 1)    \r\n  }\r\n```\r\n\r\nTo do that we would need to change `cond` field (itself a message) belonging to the `ifstmt` message from\r\n\r\n```\r\ncond {\r\n  varref {\r\n    varnum: 0\r\n  }\r\n}\r\n```\r\n\r\nto\r\n\r\n```\r\ncond {\r\n  unop {\r\n    op: ISZERO\r\n    operand {\r\n      varref {\r\n        varnum: 0\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis is a very specific operation that is going to take time to occur randomly. If we have custom proto mutators, we can make it (and other mutations that we deem interesting) happen sooner than later :-)\r\n\r\n\r\n## Specification\r\n\r\n<!--\r\nThe technical specification should describe the syntax and semantics of any new feature. The\r\nspecification should be detailed enough to allow any developer to implement the functionality.\r\n-->\r\n\r\n## Backwards Compatibility\r\n\r\n<!--\r\nAll language changes that introduce backwards incompatibilities must include a section describing\r\nthese incompatibilities and their severity.\r\n\r\nPlease describe how you propose to deal with these incompatibilities.\r\n-->",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/7947/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/7947/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/567477902",
    "html_url": "https://github.com/ethereum/solidity/issues/7947#issuecomment-567477902",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7947",
    "id": 567477902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzQ3NzkwMg==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-19T12:54:29Z",
    "updated_at": "2019-12-19T12:54:29Z",
    "author_association": "MEMBER",
    "body": "Brain storming potentially interesting mutations here per optimization stage (CC @chriseth ). May be this is too biased towards bugs that have already been found.\r\n\r\nLoad resolver:\r\n  - Add an sload(0)/sstore(0, X)\r\n  - Add an mload(0)/mstore(0, X)\r\n  - Add an mstore before for loop and an mload after to the same locations\r\n\r\nLoop invariant code motion\r\n  - Add an infinite for loop\r\n\r\nTo be extended...\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/567477902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
