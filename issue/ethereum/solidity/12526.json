{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12526",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12526/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12526/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12526/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12526",
  "id": 1101592309,
  "node_id": "I_kwDOAm_5kc5BqPb1",
  "number": 12526,
  "title": "Allowing the usage of `type` on non-primitive types",
  "user": {
    "login": "barakman",
    "id": 7003246,
    "node_id": "MDQ6VXNlcjcwMDMyNDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barakman",
    "html_url": "https://github.com/barakman",
    "followers_url": "https://api.github.com/users/barakman/followers",
    "following_url": "https://api.github.com/users/barakman/following{/other_user}",
    "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
    "organizations_url": "https://api.github.com/users/barakman/orgs",
    "repos_url": "https://api.github.com/users/barakman/repos",
    "events_url": "https://api.github.com/users/barakman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barakman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-01-13T11:40:46Z",
  "updated_at": "2022-09-11T07:40:57Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "My motivation is slightly more than just allowing something like `type UintArray is uint256[]`, so I will explain by code.\r\n\r\nI have something like this:\r\n```\r\nlibrary Lib1 {\r\n    function funcA(uint256[] memory x, uint256[] memory y) internal pure returns (uint256[] memory z) { ... }\r\n    function funcB(uint256[] memory x, uint256[] memory y) internal pure returns (uint256[] memory z) { ... }\r\n    function funcC(uint256[] memory x, uint256[] memory y) internal pure returns (uint256[] memory z) { ... }\r\n    ...\r\n}\r\n```\r\nAnd for obvious reasons, I want to change it to something like this:\r\n```\r\nstruct Obj {\r\n    uint256[] data;\r\n}\r\n\r\nlibrary Lib2 {\r\n    function funcA(Obj memory x, Obj memory y) internal pure returns (Obj memory z) { ... }\r\n    function funcB(Obj memory x, Obj memory y) internal pure returns (Obj memory z) { ... }\r\n    function funcC(Obj memory x, Obj memory y) internal pure returns (Obj memory z) { ... }\r\n    ...\r\n}\r\n```\r\nMy current solution is to wrap `Lib1` inside `Lib2`:\r\n```\r\nimport \"./Lib1.sol\";\r\n\r\nstruct Obj {\r\n    uint256[]\r\n}\r\n\r\nlibrary Lib2 {\r\n    function funcA(Obj memory x, Obj memory y) internal pure returns (Obj memory z) { z = Obj(Lib1.funcA(x.data, y.data)); }\r\n    function funcB(Obj memory x, Obj memory y) internal pure returns (Obj memory z) { z = Obj(Lib1.funcB(x.data, y.data)); }\r\n    function funcC(Obj memory x, Obj memory y) internal pure returns (Obj memory z) { z = Obj(Lib1.funcC(x.data, y.data)); }\r\n    ...\r\n}\r\n```\r\nBut this has two downsides:\r\n1. Minor: code duplication\r\n2. Major: higher gas cost\r\n\r\nI believe that `uint256[]` and `struct Obj { uint256[] data; }` have the exact same memory-layout.\r\nMoreover, I believe that they also have the exact same ABI-encoding.\r\nIf so, then there should be a way to achieve my goal without the two downsides mentioned above.\r\n\r\nIdeally, the Solidity language could simply support something similar to `typedef uint256[] struct Obj` in the C language.\r\nHowever, the `type` keyword does not seem to support this for non-primitive types.\r\nIs there any other way (assembly, etc)?\r\n\r\nThank you.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12526/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12526/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012067548",
    "html_url": "https://github.com/ethereum/solidity/issues/12526#issuecomment-1012067548",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12526",
    "id": 1012067548,
    "node_id": "IC_kwDOAm_5kc48Uuzc",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T11:54:26Z",
    "updated_at": "2022-01-13T11:54:26Z",
    "author_association": "MEMBER",
    "body": "The ABI type of ``strict Obj { uint256[] data; }`` is ``(uint256[])``, i.e. an unary tuple of ``uint256[]``. That's distinct from ``uint256[]`` and will have a different encoding: there will be an additional indirection in the encoding, i.e.\r\n``0x20, 0x20, 1, 42`` is an ABI encoding of ``Obj`` with ``data`` of length 1 with one entry of value ``42``, while\r\na simple array of length 1 with one entry of value ``0x42`` is merely encoded as ``0x20, 1, 42``.\r\n\r\nWe only recently introduced \"user-defined value types\" using the ``type MyUint is uint256;`` syntax - it is well possible that we will extend this to support non-value types (e.g. structs and arrays) in the future, but since the support for user-defined value types is not even complete yet, it may take a while until we get there.\r\n\r\nI'm not quite sure I understand the concrete reason for your encapsulation into a struct in your snippets - but that's the current state of the \"typedef\"'s I think you are requesting: it will probably happen eventually, but not in the immediate future.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012067548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012100898",
    "html_url": "https://github.com/ethereum/solidity/issues/12526#issuecomment-1012100898",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12526",
    "id": 1012100898,
    "node_id": "IC_kwDOAm_5kc48U28i",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T12:40:37Z",
    "updated_at": "2022-01-13T12:40:37Z",
    "author_association": "NONE",
    "body": "@ekpyron: Thank you for the very quick response!\r\n\r\nMy concrete reason is for users of that library to be able to use `Obj` arguments instead of `uint256[]` arguments.\r\n\r\nI've figured I could use `struct Obj { uint256[] data; }` without any runtime impact (including gas-cost).\r\n\r\nBut since the ABI-encodings are not identical, as you've just explained, I now understand that replacing `uint256[]` with a `Struct Obj { uint256[] data; }` would increase the gas-cost.\r\n\r\nSo going back to my original goal - passing `Obj` arguments instead of `uint256[]` arguments, **regardless of what `Obj` is** - I guess that the only way is by allowing `type Obj is uint256[]`.\r\n\r\nIs that correct, or do I have any other way to achieve this goal?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012100898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012113206",
    "html_url": "https://github.com/ethereum/solidity/issues/12526#issuecomment-1012113206",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12526",
    "id": 1012113206,
    "node_id": "IC_kwDOAm_5kc48U582",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T12:58:09Z",
    "updated_at": "2022-01-13T12:58:09Z",
    "author_association": "MEMBER",
    "body": "To me it very much sounds like you need ``type Obj is uint256[];``, i.e. user-defined types that go beyond value-types, yes. Which is on our agenda, but I wouldn't expect it to be available in the immediate next releases.\r\nBut we're working on improving this and will get to more complete support for arbitrary user-defined types with custom operators, etc, eventually :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012113206/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012120606",
    "html_url": "https://github.com/ethereum/solidity/issues/12526#issuecomment-1012120606",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12526",
    "id": 1012120606,
    "node_id": "IC_kwDOAm_5kc48U7we",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T13:08:05Z",
    "updated_at": "2022-01-13T13:08:05Z",
    "author_association": "NONE",
    "body": "Thank you very much!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012120606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112644026",
    "html_url": "https://github.com/ethereum/solidity/issues/12526#issuecomment-1112644026",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12526",
    "id": 1112644026,
    "node_id": "IC_kwDOAm_5kc5CUZm6",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T20:52:18Z",
    "updated_at": "2022-04-28T20:52:18Z",
    "author_association": "MEMBER",
    "body": "Isn't this a duplicate of #1100?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112644026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1242908637",
    "html_url": "https://github.com/ethereum/solidity/issues/12526#issuecomment-1242908637",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12526",
    "id": 1242908637,
    "node_id": "IC_kwDOAm_5kc5KFUfd",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-11T07:40:57Z",
    "updated_at": "2022-09-11T07:40:57Z",
    "author_association": "NONE",
    "body": "@cameel @chriseth : any word on this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1242908637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
