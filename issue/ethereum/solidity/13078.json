{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13078",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13078/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13078/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13078/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13078",
  "id": 1251823967,
  "node_id": "I_kwDOAm_5kc5KnVFf",
  "number": 13078,
  "title": "Ternary operator does not correctly deduce common type for `-1` and `0` to be `int8`",
  "user": {
    "login": "lukehutch",
    "id": 811305,
    "node_id": "MDQ6VXNlcjgxMTMwNQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lukehutch",
    "html_url": "https://github.com/lukehutch",
    "followers_url": "https://api.github.com/users/lukehutch/followers",
    "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
    "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
    "organizations_url": "https://api.github.com/users/lukehutch/orgs",
    "repos_url": "https://api.github.com/users/lukehutch/repos",
    "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lukehutch/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 2376134343,
      "node_id": "MDU6TGFiZWwyMzc2MTM0MzQz",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/should%20compile%20without%20error",
      "name": "should compile without error",
      "color": "c48f13",
      "default": false,
      "description": "Error is reported even though it shouldn't. Source is fine."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2022-05-29T08:23:56Z",
  "updated_at": "2022-06-10T11:34:33Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nUsing trinary comparison operators causes type inference to fail.\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.8.14\r\n- Target EVM version (as per compiler settings): unknown\r\n- Framework/IDE (e.g. Truffle or Remix): Hardhat\r\n- EVM execution environment / backend / blockchain client:\r\n- Operating system: Linux\r\n\r\n## Steps to Reproduce\r\n\r\n```solidity\r\n    function ab(int a, int b) public returns (int) {\r\n        return a < b ? -1 : 0;\r\n    }\r\n```\r\n\r\nYields\r\n\r\n```\r\nTypeError: True expression's type int8 does not match false expression's type uint8.\r\n    |\r\n16 |         return a < b ? -1\r\n    |                ^ (Relevant source part starts here and spans across multiple lines).\r\n```\r\n\r\nSo there are really two problems:\r\n\r\n1. The trinary operator's true and false operands are not appropriately unified to `int8` (which works for both operands)\r\n2. The trinary operator's true and false operands are not correctly widened from `int8` to the return type `int`.\r\n\r\nThe solution is a bit ugly:\r\n\r\n```solidity\r\n    function ab(int a, int b) public returns (int) {\r\n        return a < b ? int(-1) : int(0);\r\n    }\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13078/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13078/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1145868063",
    "html_url": "https://github.com/ethereum/solidity/issues/13078#issuecomment-1145868063",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13078",
    "id": 1145868063,
    "node_id": "IC_kwDOAm_5kc5ETI8f",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-03T11:26:48Z",
    "updated_at": "2022-06-03T11:26:48Z",
    "author_association": "MEMBER",
    "body": "> 2. The trinary operator's true and false operands are not correctly widened from `int8` to the return type `int`.\r\n\r\nThis part works correctly. Try this:\r\n\r\n```solidity\r\nfunction ab(int a, int b) public returns (int) {\r\n    return a < b ? -1 : int8(0);\r\n}\r\n```\r\n\r\n> 1. The trinary operator's true and false operands are not appropriately unified to `int8` (which works for both operands)\r\n\r\nYes, I think this does not work as it should. The compiler should be deducing that the common type is `int8` but for some reason it decides that they're incompatible. On the other hand for array literals (which have the same deduction mechanism) it works correctly - this compiles without errors:\r\n```solidity\r\nint8[2] memory x = [-1, 0];\r\n```\r\n\r\nSo I agree, I think it's a bug in the sense that these mechanisms should work the same way and they clearly don't.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1145868063/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1145868794",
    "html_url": "https://github.com/ethereum/solidity/issues/13078#issuecomment-1145868794",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13078",
    "id": 1145868794,
    "node_id": "IC_kwDOAm_5kc5ETJH6",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-03T11:27:48Z",
    "updated_at": "2022-06-03T11:27:48Z",
    "author_association": "MEMBER",
    "body": "@wechman You might be interested in this since you're working on array literals right now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1145868794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1145911419",
    "html_url": "https://github.com/ethereum/solidity/issues/13078#issuecomment-1145911419",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13078",
    "id": 1145911419,
    "node_id": "IC_kwDOAm_5kc5ETTh7",
    "user": {
      "login": "wechman",
      "id": 37188783,
      "node_id": "MDQ6VXNlcjM3MTg4Nzgz",
      "avatar_url": "https://avatars.githubusercontent.com/u/37188783?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wechman",
      "html_url": "https://github.com/wechman",
      "followers_url": "https://api.github.com/users/wechman/followers",
      "following_url": "https://api.github.com/users/wechman/following{/other_user}",
      "gists_url": "https://api.github.com/users/wechman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wechman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wechman/subscriptions",
      "organizations_url": "https://api.github.com/users/wechman/orgs",
      "repos_url": "https://api.github.com/users/wechman/repos",
      "events_url": "https://api.github.com/users/wechman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wechman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-03T12:26:10Z",
    "updated_at": "2022-06-03T12:26:10Z",
    "author_association": "MEMBER",
    "body": "@cameel a type deduction mechanism for inline arrays the compiler currently use surly is not perfect and a bit tricky. To see that, please just try to change order of array elements in your example so you have:\r\n`int8 [2] memory x = [0, -1];`\r\nSuch a small change and compilation end up with an error. That's because the compiler relays on a type of the first element of an array literal. Luckily, this is going to be changed soon.\r\nNevertheless, I am not sure if deduction mechanisms of the array literals and ternary operator have that much in common. But, I agree that the only problem we have in this ticket is the compiler inability to deduce `int8` as a ternary operator operation type. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1145911419/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1146345156",
    "html_url": "https://github.com/ethereum/solidity/issues/13078#issuecomment-1146345156",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13078",
    "id": 1146345156,
    "node_id": "IC_kwDOAm_5kc5EU9bE",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-03T20:40:37Z",
    "updated_at": "2022-06-03T20:40:37Z",
    "author_association": "MEMBER",
    "body": "Interesting! In any case, even if the implementation is actually separate I think that both cases should follow the same rules from user's standpoint. Otherwise it's confusing to users. So when you're done with arrays I think we should also look at the ternary operator and bring these two mechanisms in sync.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1146345156/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1147320730",
    "html_url": "https://github.com/ethereum/solidity/issues/13078#issuecomment-1147320730",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13078",
    "id": 1147320730,
    "node_id": "IC_kwDOAm_5kc5EYrma",
    "user": {
      "login": "wechman",
      "id": 37188783,
      "node_id": "MDQ6VXNlcjM3MTg4Nzgz",
      "avatar_url": "https://avatars.githubusercontent.com/u/37188783?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wechman",
      "html_url": "https://github.com/wechman",
      "followers_url": "https://api.github.com/users/wechman/followers",
      "following_url": "https://api.github.com/users/wechman/following{/other_user}",
      "gists_url": "https://api.github.com/users/wechman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wechman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wechman/subscriptions",
      "organizations_url": "https://api.github.com/users/wechman/orgs",
      "repos_url": "https://api.github.com/users/wechman/repos",
      "events_url": "https://api.github.com/users/wechman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wechman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-06T10:56:38Z",
    "updated_at": "2022-06-06T10:56:38Z",
    "author_association": "MEMBER",
    "body": "\r\nI have looked over the documentation and found this:\r\n- The type in which operator is performed is a common type of the operands and can be found only if one operand type can be implicitly converted to the other.\r\n- For literals, the compiler uses their mobile type to find common type.\r\n- Mobile type is the smallest type that can hold the value. Unsigned types of the same bit-width are considered “smaller” than the signed types.\r\n\r\nIn view of the above, `-1` is being converted to `int8`. At the same time `0` is being converted to `uint8` cause unsigned type is considered to be smaller then  signed. Since that moment, the compiler uses mobile types. \r\nBecause the compiler cannot guarantee lossless conversion between int8 and uint8, the code compilation fails. This is exactly why explicit conversion is necessary in this case.\r\n\r\n@cameel For now I can see two options to address this problem.  First one is to deduce common type based on literals instead of their mobile types. This can help to fix this ticket and similar cases, but also can be tricky since does not concern types other than literals (e.g. `condition ? variable_a : variable_b`).  However, do we want to change anything but literals?\r\nThe second option would be to provide a new mechanism to deduce common type of numerical types. It should come with a type promotion algorithm. For instance `int8` and `uint8` could be promoted to `int16`. Does it make sense?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1147320730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1148665621",
    "html_url": "https://github.com/ethereum/solidity/issues/13078#issuecomment-1148665621",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13078",
    "id": 1148665621,
    "node_id": "IC_kwDOAm_5kc5Edz8V",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-07T13:21:07Z",
    "updated_at": "2022-06-07T13:21:07Z",
    "author_association": "MEMBER",
    "body": "> In view of the above, `-1` is being converted to `int8`. At the same time `0` is being converted to `uint8` cause unsigned type is considered to be smaller then  signed. Since that moment, the compiler uses mobile types. \r\n\r\nHmm... But this means that we're not really applying that rule for other operators, right? Otherwise something as simple as `-1 + 0` would be a compilation error. So the docs seem wrong about literals.\r\n\r\n> For now I can see two options to address this problem. First one is to deduce common type based on literals instead of their mobile types. \r\n\r\nYeah, if I understand things correctly, we're already doing that for other operators anyway. The ternary seems to be the only odd one.\r\n\r\n> This can help to fix this ticket and similar cases, but also can be tricky since does not concern types other than literals (e.g. `condition ? variable_a : variable_b`). However, do we want to change anything but literals?\r\n\r\nI think it's not an issue. For example this currently fails as well:\r\n```solidity\r\n    int8 x = -1;\r\n    uint8 y = 0;\r\n    x + y;\r\n```\r\n```\r\nError: Operator + not compatible with types int8 and uint8\r\n --> test.sol:4:5:\r\n  |\r\n4 |     x + y;\r\n  |     ^^^^^\r\n```\r\neven though the same operation on literals is valid.\r\n\r\n> The second option would be to provide a new mechanism to deduce common type of numerical types. It should come with a type promotion algorithm. For instance `int8` and `uint8` could be promoted to `int16`. Does it make sense?\r\n\r\nI would not be against that but I have a suspicion that such a promotion might have been omitted on purpose. Most of the time you want to stay within an unsigned type when possible. I can't give any example off the top of my head where the automatic conversion to signed would be bad, but I have a feeling that it might be possible to find one.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1148665621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1152266025",
    "html_url": "https://github.com/ethereum/solidity/issues/13078#issuecomment-1152266025",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13078",
    "id": 1152266025,
    "node_id": "IC_kwDOAm_5kc5Eri8p",
    "user": {
      "login": "wechman",
      "id": 37188783,
      "node_id": "MDQ6VXNlcjM3MTg4Nzgz",
      "avatar_url": "https://avatars.githubusercontent.com/u/37188783?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wechman",
      "html_url": "https://github.com/wechman",
      "followers_url": "https://api.github.com/users/wechman/followers",
      "following_url": "https://api.github.com/users/wechman/following{/other_user}",
      "gists_url": "https://api.github.com/users/wechman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wechman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wechman/subscriptions",
      "organizations_url": "https://api.github.com/users/wechman/orgs",
      "repos_url": "https://api.github.com/users/wechman/repos",
      "events_url": "https://api.github.com/users/wechman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wechman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-10T11:34:33Z",
    "updated_at": "2022-06-10T11:34:33Z",
    "author_association": "MEMBER",
    "body": "@cameel I created a draft with the simplest solution for the issue. Please let me know if like it. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1152266025/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
