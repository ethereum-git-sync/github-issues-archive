{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12989",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12989/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12989/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12989/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12989",
  "id": 1227334152,
  "node_id": "I_kwDOAm_5kc5JJ6II",
  "number": 12989,
  "title": "add suggestion when dynamic memory arrays are used if size is not given",
  "user": {
    "login": "0xalpharush",
    "id": 87383155,
    "node_id": "MDQ6VXNlcjg3MzgzMTU1",
    "avatar_url": "https://avatars.githubusercontent.com/u/87383155?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/0xalpharush",
    "html_url": "https://github.com/0xalpharush",
    "followers_url": "https://api.github.com/users/0xalpharush/followers",
    "following_url": "https://api.github.com/users/0xalpharush/following{/other_user}",
    "gists_url": "https://api.github.com/users/0xalpharush/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/0xalpharush/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/0xalpharush/subscriptions",
    "organizations_url": "https://api.github.com/users/0xalpharush/orgs",
    "repos_url": "https://api.github.com/users/0xalpharush/repos",
    "events_url": "https://api.github.com/users/0xalpharush/events{/privacy}",
    "received_events_url": "https://api.github.com/users/0xalpharush/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-05-06T01:50:03Z",
  "updated_at": "2022-05-06T13:24:15Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nAdd compile time warning for dynamic memory arrays that are not explicitly allocated when declared.\r\n\r\n## Motivation\r\n\r\nThe below example compiles and results in an \"index out of bounds\" warning when run. It would be easier to debug and likely prevent runtime exceptions if the compiler warned or errored with the following syntax.\r\n\r\n## Specification\r\n```\r\nMyStruct[] memory structs;\r\nfor (uint i = 0; i < array.length; i++) {\r\n    structs[i] = MyStruct(...)\r\n}\r\n```\r\nSuggest: structs does not declare a size and cannot be dynamically resized... try `structs = new MyStruct[](size);`\r\n## Backwards Compatibility\r\nNo issues. There may be forward compatibility issues if `push` is implemented for dynamic arrays.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12989/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12989/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1119387261",
    "html_url": "https://github.com/ethereum/solidity/issues/12989#issuecomment-1119387261",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12989",
    "id": 1119387261,
    "node_id": "IC_kwDOAm_5kc5CuH59",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T08:38:44Z",
    "updated_at": "2022-05-06T08:38:44Z",
    "author_association": "MEMBER",
    "body": "You have a bug in your example. You're using `array.length` instead of `structs.length`. A correctly coded example will not revert because an \"uninitialized\" array does not contain random data. Its length is guaranteed to be zero:\r\n```solidity\r\ncontract C {\r\n    struct MyStruct {\r\n        uint x;\r\n    }\r\n    function foo() public {\r\n        MyStruct[] memory structs;\r\n        for (uint i = 0; i < structs.length; i++) {\r\n            structs[i] = MyStruct(i);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAlso, it's perfectly fine not to allocate the array immediately. You might not know the size of the array immediately:\r\n```solidity\r\nMyStruct[] memory structs;\r\nif (someFlag)\r\n    structs = new MyStruct[](10);\r\nelse\r\n    structs = new MyStruct[](20);\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1119387261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1119604619",
    "html_url": "https://github.com/ethereum/solidity/issues/12989#issuecomment-1119604619",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12989",
    "id": 1119604619,
    "node_id": "IC_kwDOAm_5kc5Cu8-L",
    "user": {
      "login": "0xalpharush",
      "id": 87383155,
      "node_id": "MDQ6VXNlcjg3MzgzMTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/87383155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xalpharush",
      "html_url": "https://github.com/0xalpharush",
      "followers_url": "https://api.github.com/users/0xalpharush/followers",
      "following_url": "https://api.github.com/users/0xalpharush/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xalpharush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xalpharush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xalpharush/subscriptions",
      "organizations_url": "https://api.github.com/users/0xalpharush/orgs",
      "repos_url": "https://api.github.com/users/0xalpharush/repos",
      "events_url": "https://api.github.com/users/0xalpharush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xalpharush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T13:14:08Z",
    "updated_at": "2022-05-06T13:24:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Using a different array was purposeful... whenever one modifies array elements e.g. converts to a different type and copies them into a new array, the length of the input array is not always zero. And, the for loop will run in that case.\r\n```\r\ncontract C {\r\n    struct MyStruct {\r\n        uint x;\r\n    }\r\n     struct Data {\r\n        bytes32 y;\r\n    }\r\n    function foo(Data[] memory data) public {\r\n        MyStruct[] memory structs;\r\n        for (uint i = 0; i < data.length; i++) {\r\n            structs[i] = MyStruct(uint(data[i]));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n> Also, it's perfectly fine not to allocate the array immediately. You might not know the size of the array immediately:\r\n\r\nIn this example, an explicit size is used, so it's not something I'd expect a warning about.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1119604619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
