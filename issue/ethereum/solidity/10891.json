{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10891/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10891/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10891/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10891",
  "id": 800447821,
  "node_id": "MDU6SXNzdWU4MDA0NDc4MjE=",
  "number": 10891,
  "title": "[soltoyul] ICE due to invalid use of selector function",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 2376134343,
      "node_id": "MDU6TGFiZWwyMzc2MTM0MzQz",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/should%20compile%20without%20error",
      "name": "should compile without error",
      "color": "c48f13",
      "default": false,
      "description": "Error is reported even though it shouldn't. Source is fine."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2021-02-03T15:40:04Z",
  "updated_at": "2021-03-02T11:24:54Z",
  "closed_at": "2021-03-02T11:24:54Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "<!--## Prerequisites\r\n\r\n- First, many thanks for taking part in the community. We really appreciate that.\r\n- We realize there is a lot of information requested here. We ask only that you do your best to provide as much information as possible so we can better help you.\r\n- Support questions are better asked in one of the following locations:\r\n\t- [Solidity chat](https://gitter.im/ethereum/solidity)\r\n\t- [Stack Overflow](https://ethereum.stackexchange.com/)\r\n- Ensure the issue isn't already reported.\r\n- The issue should be reproducible with the latest solidity version; however, this isn't a hard requirement and being reproducible with an older version is sufficient.\r\n-->\r\n\r\n## Description\r\n\r\n<!--Please shortly describe the bug you have found, and what you expect instead.-->\r\n```\r\ncontract B {\r\n  function g() public {}\r\n}\r\ncontract C is B {\r\n  function h() public { g.selector; }\r\n}\r\n```\r\n\r\nthrows\r\n\r\nhttps://github.com/ethereum/solidity/blob/8a4e6acdac8d11ee671f084d96d82de63f684812/libsolidity/codegen/ir/IRGeneratorForStatements.cpp#L1699\r\n\r\n## Environment\r\n\r\n- Compiler version:\r\n- Target EVM version (as per compiler settings):\r\n- Framework/IDE (e.g. Truffle or Remix):\r\n- EVM execution environment / backend / blockchain client:\r\n- Operating system:\r\n\r\n## Steps to Reproduce\r\n\r\n<!--\r\nPlease provide a *minimal* source code example to trigger the bug you have found.\r\nPlease also mention any command line flags that are necessary for triggering the bug.\r\nProvide as much information as necessary to reproduce the bug.\r\n\r\n```solidity\r\n// Some *minimal* Solidity source code to reproduce the bug.\r\n// ...\r\n```\r\n-->\r\n```\r\n$ solc --ir test.sol\r\n```\r\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10891/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10891/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/774082032",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-774082032",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 774082032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDA4MjAzMg==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-05T14:55:00Z",
    "updated_at": "2021-02-05T14:55:00Z",
    "author_association": "MEMBER",
    "body": "I don't know why we allow the above code to be compiled in the old codegen. I think we should only allow the usage of `this.g.selector`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/774082032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/774085064",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-774085064",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 774085064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDA4NTA2NA==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-05T15:00:01Z",
    "updated_at": "2021-02-05T15:00:01Z",
    "author_association": "MEMBER",
    "body": "@ekpyron Just saw that this was allowed in https://github.com/ethereum/solidity/pull/8137/files#diff-5cc133bfc337e9ca7fe7ee9842d5ddfa492fa559149cf8acec4a7d9ede50c9aaR2980\r\n\r\nIs there a reason why we allow `g.selector` despite being an internal function call?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/774085064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/774548066",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-774548066",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 774548066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDU0ODA2Ng==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-06T21:41:24Z",
    "updated_at": "2021-02-06T21:41:24Z",
    "author_association": "MEMBER",
    "body": "@hrkrshnn It's even worse. Rules are different for `.address` and `.selector` and there are more factors that affect what is allowed and what is not. The rules seem pretty random to me. I think this is a separate issue so reported as #10905 (see the example I included there). For the ICE here I think it's best to assume that if it passes on the old codegen, it should work with IR too.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/774548066/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775048089",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-775048089",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 775048089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTA0ODA4OQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T10:38:55Z",
    "updated_at": "2021-02-08T10:38:55Z",
    "author_association": "MEMBER",
    "body": "As mentioned in the issue: it does make sense that the rules for ``.address`` and ``.selector`` are different...\r\nWe could of course disallow ``.selector`` for functions unless they are explicitly referred to in external calling context. But why would we?\r\n\r\nSo as to:\r\n\r\n> @ekpyron Just saw that this was allowed in https://github.com/ethereum/solidity/pull/8137/files#diff-5cc133bfc337e9ca7fe7ee9842d5ddfa492fa559149cf8acec4a7d9ede50c9aaR2980\r\n> \r\n> Is there a reason why we allow `g.selector` despite being an internal function call?\r\n\r\nI would ask the contrary: is there any particular reason for *not* allowing it :-)? Those are functions that *can* be used externally, so all of them do have selectors. I'd be fine with disallowing to query them unless explicitly used in external calling context, but I also don't see a really good reason why one necessarily should.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775048089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775051166",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-775051166",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 775051166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTA1MTE2Ng==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T10:44:21Z",
    "updated_at": "2021-02-08T10:44:21Z",
    "author_association": "MEMBER",
    "body": "I mean you say ``g`` being an internal function, whereas ``this.g`` is an external function... if you look at it that way, probably only the latter should get ``.selector``.\r\nBut you can also look at ``g`` being a *public* function (that's how it's declared) - so it generally has a ``.selector`` member. Just ``g(...)`` vs ``this.g(...)`` are ways to *call* this one *public* function internally or externally...\r\n\r\nOn the other hand we also only allow ``function() external x = this.g;`` not ``function() external x = g;``...\r\n\r\nBut yeah: the reason for allowing it was that we do have the information to produce a selector on ``g``, so we *can* allow it :-). But as I said, I'd also be fine with disallowing it - note that that's a breaking change, though, strictly speaking.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775051166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775051614",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-775051614",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 775051614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTA1MTYxNA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T10:45:13Z",
    "updated_at": "2021-02-08T10:45:13Z",
    "author_association": "MEMBER",
    "body": "So maybe best just to implement it for sol->yul for now and we can keep an issue about disallowing it, if we want to do that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775051614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775057994",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-775057994",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 775057994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTA1Nzk5NA==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T10:56:25Z",
    "updated_at": "2021-02-08T10:56:25Z",
    "author_association": "MEMBER",
    "body": "My main issue is that\r\n\r\n``` \r\n  contract C {\r\n\t  function f() public {\r\n\t  }\r\n\t  function g() public {\r\n\t\t  f.selector;\r\n\t  }\r\n  }\r\n```\r\nproduces\r\n```\r\n Error: Member \"selector\" not found or not visible after argument-dependent lookup in function ().\r\n --> <stdin>:5:3:\r\n  |\r\n5 | \t\tf.selector;\r\n  | \t\t^^^^^^^^^^\r\n```\r\n\r\nwhereas\r\n\r\n```\r\n  contract D {\r\n\t  function f() public {\r\n\t  }\r\n  }\r\n  contract C is D {\r\n\t  function g() public {\r\n\t\t  f.selector;\r\n\t  }\r\n  }\r\n```\r\ncompiles fine.\r\n\r\nIf we are allowing `f.selector`, just because we can compute the selector, then I think both cases should be allowed.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775057994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775068851",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-775068851",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 775068851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTA2ODg1MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T11:12:32Z",
    "updated_at": "2021-02-08T11:12:32Z",
    "author_association": "MEMBER",
    "body": "Both cases should be disallowed, internal functions do not have selectors. So to me, this is an issue with inheritance and we should check if there is any deeper problem.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775068851/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775101149",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-775101149",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 775101149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTEwMTE0OQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T12:10:34Z",
    "updated_at": "2021-02-08T12:10:34Z",
    "author_association": "MEMBER",
    "body": "In the end I think the reason this is allowed is since we wanted to be able to globally access the selector via the contract name, i.e.\r\n```\r\ncontract B {\r\n  function f() external {}\r\n  function g() public {}\r\n}\r\ncontract C {\r\n  function h() public {\r\n     B.f.selector;\r\n     B.g.selector;\r\n  }\r\n}\r\n```\r\n\r\nEven or especially if ``C`` does *not* inherit from ``B``.\r\nBut then it would be weird, if changing this to having ``C`` inherit from ``B`` were to change this, so we wanted to allow it for that case, too. But, unfortunately, in that case ``B.g`` internally has the same type as ``g``, so it so happens that allowing ``B.g.selector`` meant to also allow ``g.selector``.\r\n\r\nThe alternative was basically https://github.com/ethereum/solidity/pull/8137/files#r367386872, i.e. to introduce one or even two more function type kinds to distinguish these... or we'd need to typecheck our way out of it, disallowing the ``g.selector`` on pain of it not being a member access via contract name...\r\n\r\nIn any case I'd still say this should be implemented in Sol->Yul (it's not like that would be hard to do) - and then we can decide whether we want to introduce more complexity to disallow the rather weird artifact cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775101149/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775103029",
    "html_url": "https://github.com/ethereum/solidity/issues/10891#issuecomment-775103029",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10891",
    "id": 775103029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTEwMzAyOQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-08T12:14:08Z",
    "updated_at": "2021-02-08T12:14:08Z",
    "author_association": "MEMBER",
    "body": "Note that\r\n```\r\npragma experimental SMTChecker;\r\n\r\ncontract B {\r\n  function f() external {}\r\n  function g() public {}\r\n}\r\n\r\ncontract C is B {\r\n    function h() public {\r\n        B.f.selector; B.g.selector;\r\n    }\r\n}\r\n```\r\nalso throws in Sol->Yul for the same reason, while removing ``is B`` does not. And at least this should work, independently of what we should do about ``g.selector``.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775103029/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
