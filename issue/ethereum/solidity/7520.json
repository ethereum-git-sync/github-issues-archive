{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/7520/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/7520/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/7520/events",
  "html_url": "https://github.com/ethereum/solidity/issues/7520",
  "id": 503361830,
  "node_id": "MDU6SXNzdWU1MDMzNjE4MzA=",
  "number": 7520,
  "title": "Replace rule list with \"DSL\"",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    },
    {
      "id": 4437999539,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZ_sw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20effort",
      "name": "high effort",
      "color": "ff54f4",
      "default": false,
      "description": "A lot to implement but still doable by a single person. The task is large or difficult."
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "001dff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4438481746,
      "node_id": "LA_kwDOAm_5kc8AAAABCI3bUg",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have%20eventually",
      "name": "must have eventually",
      "color": "ffb04d",
      "default": false,
      "description": "Something we consider essential but not enough to prevent us from releasing Solidity 1.0 without it."
    },
    {
      "id": 4438780109,
      "node_id": "LA_kwDOAm_5kc8AAAABCJJozQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/refactor",
      "name": "refactor",
      "color": "fcff07",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2019-10-07T10:24:39Z",
  "updated_at": "2022-09-14T17:55:03Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "TBD\r\n\r\nWe can probably just use a triplet of Yul expressions, resp. expression patterns:\r\n- precondition: evaluates to non-zero, if the rule can be applied\r\n- match: pattern expression for matching the rule\r\n- replacement: pattern expression to replace the matched code snippet\r\n\r\nThe match expression can use symbolic pattern variables for matching variables and constants and (at a later stage when extending this from expressions to statements) arbitrary code blocks. Precondition and replacement expressions can use any pattern variables used in the match expression.\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/7520/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/7520/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/541718042",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-541718042",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 541718042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTcxODA0Mg==",
    "user": {
      "login": "christianparpart",
      "id": 56763,
      "node_id": "MDQ6VXNlcjU2NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/56763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianparpart",
      "html_url": "https://github.com/christianparpart",
      "followers_url": "https://api.github.com/users/christianparpart/followers",
      "following_url": "https://api.github.com/users/christianparpart/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianparpart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianparpart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianparpart/subscriptions",
      "organizations_url": "https://api.github.com/users/christianparpart/orgs",
      "repos_url": "https://api.github.com/users/christianparpart/repos",
      "events_url": "https://api.github.com/users/christianparpart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianparpart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-14T14:38:33Z",
    "updated_at": "2019-10-14T14:38:33Z",
    "author_association": "MEMBER",
    "body": "@ekpyron can you give some example? (or in other words: when can we talk face-to-face about it?) I'm interested in taking this one, but I'd need some more (precise) input of what you have in mind. :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/541718042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/541794327",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-541794327",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 541794327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTc5NDMyNw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-14T16:56:41Z",
    "updated_at": "2019-10-14T16:56:41Z",
    "author_association": "MEMBER",
    "body": "This issue was mainly meant as a reminder to discuss this further - the idea came up with @chriseth at devcon, but I think this might need some more careful and future-proof planning before we actually start with it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/541794327/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/631391836",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-631391836",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 631391836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTM5MTgzNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T10:33:19Z",
    "updated_at": "2020-05-20T10:33:19Z",
    "author_association": "MEMBER",
    "body": "Examples for potential syntax:\r\n\r\n- `//`-comments are allowed everywhere.\r\n- rules are separated by empty (non-comment) lines\r\n- first line is match expression, second line is replacement\r\n- we need a way to specify conditions on the dialect (EVM, wasm, hasSelfbalance, ...)\r\n- complictated yul blocks are probably out of scope for now.\r\n- we need a way to denote computations on constants. For simplicity of parsing, I would propose functional notation (`@+`)\r\n- we should make it more obivous whether a placeholder can match anything or just literals. My proposal would be to prefix placeholders with `#` if they should only match literals\r\n\r\n```\r\n-EVM hasSelfbalance\r\n// need to specify dialect, with restrictions on some rules\r\n\r\nbalance(address())\r\nselfbalance()\r\n\r\n//comment\r\n\r\nadd(#A, #B)\r\n@+(A, B)\r\n\r\nadd(X, 0)\r\nX\r\n\r\n// rules that remove or reorder placeholders\r\n// only match if the placeholders are movable\r\n// This is a feature of the engine\r\nmul(X, 0)\r\n0\r\n\r\nif 1 { T }\r\n{ T }\r\n\r\nif 0 { T }\r\n{}\r\n\r\n// what are the conditions on T here?\r\nT revert(X, Y)\r\nrevert(X, Y)\r\n\r\n// can we have \"same match\" on full statements?\r\nswitch X case 0 { T1... T } default { T2... T}\r\nswitch X case 0 { T1... } default { T2... } T \r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/631391836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725038381",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-725038381",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 725038381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTAzODM4MQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-10T23:54:19Z",
    "updated_at": "2020-11-10T23:54:19Z",
    "author_association": "MEMBER",
    "body": "There's also #5542 as a relevant issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725038381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725039444",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-725039444",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 725039444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTAzOTQ0NA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-10T23:57:09Z",
    "updated_at": "2020-11-10T23:57:18Z",
    "author_association": "MEMBER",
    "body": "> first line is match expression, second line is replacement\r\n\r\nIf we have such a system, I think `<` and `>` prefixes would be nice (diff-style), e.g.:\r\n```\r\n< balance(address())\r\n> selfbalance()\r\n```\r\n\r\nBut @ekpyron's proposal in #5542 of defining equalities may be more intuitive:\r\n```\r\nbalance(address()) == selfbalance()\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725039444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725697979",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-725697979",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 725697979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTY5Nzk3OQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-11T22:31:58Z",
    "updated_at": "2020-11-11T23:47:12Z",
    "author_association": "MEMBER",
    "body": "1. In this the core syntax is equality of expressions (from @ekpyron). Where there is no loss of information (replacing instructions with faster instructions, such as shifts), it could reversible too.\r\n2. A condition can be introduced via `iff <expr>`. Expressions here must be \"constexpr\". We borrow the idea from Rust to mark these constexpr versions (macros) with exclamation mark, e.g. `sub!`, `lt!`, etc.\r\n3. Any number of whitespace is allowed between both the rewrite rule and the condition.\r\n4. Expressions are EVM opcodes (or yul dialect builtins).\r\n5. Conditions are a different set of expressions/builtins. Special conditionals are introduced for `wordsize`, bit testing, etc.\r\n6. The terms `A`, `B`, `C` mean literal on the stack, while `X`, `Y`, `Z` mean non-literals on the stack.\r\n4. Properties/attributes are introduced via `[@<key> <value>]`, eg. `[@evm hasSelfbalance]`. It is only valid for the following rewrite rule.\r\n5. `//` marks comments.\r\n\r\nI played with the syntax a bit and tried to translate a set of random steps from `RuleList.h`.\r\n```solidity\r\n//\r\n// Simple rules\r\n//\r\n\r\n[@evm hasSelfbalance]\r\nbalance(address()) == selfbalance()\r\n\r\nexp(0, X) == iszero(X)\r\n\r\nexp(1, X) == 1\r\n\r\n[@evm hasBitwiseShifting]\r\nexp(2, X) == shl(X, 1)\r\n\r\nexp(-1, X) == sub(iszero(and(X, 1)), and(X, 1))\r\n\r\n// move constants across subtractions\r\n// X - A -> X + (-A)\r\nsub(X, A) == add(X, sub!(0, A))\r\n\r\n//\r\n// Rules with conditions\r\n//\r\n\r\n//        rules.push_back({\r\n//                Builtins::BYTE(A, Builtins::SHR(B, X)),\r\n//                [=]() -> Pattern { return Word(0); },\r\n//                [=] { return A.d() < B.d() / 8; }\r\n//        });\r\nbyte(A, shr(B, X)) == 0 iff lt!(A, div!(B, 8))\r\n\r\n//        // Replace MOD X, <power-of-two> with AND X, <power-of-two> - 1\r\n//        for (size_t i = 0; i < Pattern::WordSize; ++i)\r\n//        {\r\n//                Word value = Word(1) << i;\r\n//                rules.push_back({\r\n//                        Builtins::MOD(X, value),\r\n//                        [=]() -> Pattern { return Builtins::AND(X, value - 1); }\r\n//                });\r\n//        }\r\n//\r\n// In these cases it may make more sense to just expand it manually.\r\nmod(X, 1) == and(X, 0)\r\nmod(X, 2) == and(X, 1)\r\nmod(X, 4) == and(X, 3)\r\n// But could also consider adding a pseudo-variable.\r\nmod(X, shl!(1, K)) == and(X, sub!(shl!(1, K), 1))) iff and!(gte!(K, 0), lte!(K, wordsize!()))\r\n\r\n// Also extra whitespaces can be added for readability.\r\nmod(X, shl!(1, K)) == and(X, sub!(shl!(1, K), 1)))\r\n   iff\r\nand!(\r\n  gte!(K, 0),\r\n  lte!(K, wordsize!())\r\n)\r\n\r\n//                {Builtins::SHL(A, B), [=]{\r\n//                        if (A.d() >= Pattern::WordSize)\r\n//                                return Word(0);\r\n//                        return shlWorkaround(B.d(), unsigned(A.d()));\r\n//                }},\r\nshl(A, B) == 0 iff gte!(A, wordsize!())\r\nshl(A, B) == shl!(A, B)\r\n\r\n// {Builtins::LT(A, B), [=]() -> Word { return A.d() < B.d() ? 1 : 0; }},\r\nlt(A, B) == 0 iff gte!(A, B)\r\nlt(A, B) == 1 iff lt!(A, B)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725697979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725703029",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-725703029",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 725703029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTcwMzAyOQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-11T22:45:28Z",
    "updated_at": "2020-11-11T22:45:28Z",
    "author_association": "MEMBER",
    "body": "If we want to not have magic variable names, then as mentioned we need a way to mark literals. I think the `#` prefix on the match is an okay way do it, but probably makes sense to keep that prefix on both sides.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725703029/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725709775",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-725709775",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 725709775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTcwOTc3NQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-11T23:03:28Z",
    "updated_at": "2020-11-11T23:18:12Z",
    "author_association": "MEMBER",
    "body": "Here are some more, line-by-line translations:\r\n```solidity\r\n add(#A, #B) == add!(A, B)\r\n mul(#A, #B) == mul!(A, B)\r\n byte(#A, #B) == 0 iff gte!(A, div!(wordsize!(), 8))\r\n byte(#A, #B) == shr!(B, and!(mul!(8, sub!(sub!(div!(wordsize!(), 8), 1), A)), 0xff)) iff lt!(A, div!(wordsize!(), 8))\r\n shl(#A, #B) == 0 iff gte!(A, wordsize!())\r\n shl(#A, #B) == shl!(A, B)\r\n shr(#A, #B) == 0 iff gte!(A, wordsize!())\r\n shr(#A, #B) == shr!(A, B)\r\n sub(not!(0), X) == not!(0)\r\n mul(X, not!(0)) == sub(0, X)\r\n mul(not!(0), X) == sub(0, X)\r\n and(X, not!(0)) == X\r\n and(not!(0), X) == X\r\n eq(X, 0) == iszero(X)\r\n eq(0, X) == iszero(X)\r\n gt(X, 0) == iszero(iszero(X))\r\n lt(0, X) == iszero(iszero(X))\r\n gt(X, not!(0)) == 0\r\n lt(not!(0), X) == 0\r\n and(byte(X, Y), 0xff) == byte(X, Y)\r\n byte(sub!(div!(wordsize!(), 8), 1), X) == and(X, 0xff)\r\n not(not(X) == X\r\n xor(X, xor(X, Y)) == Y\r\n or(not(X), X) == not!(0)\r\n and(and(X, Y), Y) == and(X, Y)\r\n mod(X, 1) == and(X, 0)\r\n mod(X, 2) == and(X, 1)\r\n mod(X, 4) == and(X, 3)\r\n mod(X, shl!(1, K)) == and(X, sub!(shl!(1, K), 1))) iff and!(gte!(K, 0), lte!(K, wordsize!()))\r\n byte(#A, shr(#B, X)) == 0 iff lt!(A, div!(B, 8))\r\n and(address(), sub!(shl!(1, 160), 1)) == address()\r\n and(caller(), sub!(shl!(1, 160), 1)) == caller()\r\n and(origin(), sub!(shl!(1, 160), 1)) == origin()\r\n and(coinbase(), sub!(shl!(1, 160), 1)) == coinbase()\r\n iszero(iszero(eq(X, Y))) == eq(X, Y)\r\n iszero(iszero(lt(X, Y))) == lt(X, Y)\r\n iszero(iszero(slt(X, Y))) == slt(X, Y)\r\n iszero(iszero(gt(X, Y))) == gt(X, Y)\r\n iszero(iszero(sgt(X, Y))) == sgt(X, Y)\r\n iszero(iszero(iszero(X))) == iszero(X)\r\n iszero(xor(X, Y)) == eq(X, Y)\r\n byte(#A, shr(#B, X)) == 0 iff lt!(A, div!(B, 8))\r\n sub(X, #A) == add(X, sub!(0, A))\r\n sub(add(X, #A), Y) == add(sub(X, Y), A)\r\n [@evm hasSelfbalance]\r\n balance(address()) == selfbalance()\r\n exp(0, X) == iszero(X)\r\n exp(1, X) == 1\r\n [@evm hasBitwiseShifting]\r\n exp(2, X) == shl(X, 1)\r\n exp(-1, X) == sub(iszero(and(X, 1)), and(X, 1))\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725709775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725942552",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-725942552",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 725942552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTk0MjU1Mg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-12T09:02:40Z",
    "updated_at": "2020-11-12T09:02:40Z",
    "author_association": "MEMBER",
    "body": "This looks very good! Some remarks:\r\n\r\n- I'm not sure about the `==` if the two sides are not really equal (you can use `lt!(#A, #B)` on the RHS but not on the LHS).\r\n- `iff` should be `if`\r\n- maybe we should replace `wordsize` by `bitsPerWord` and `bytesPerWord`\r\n- maybe use `!lt` instead of `lt!`?\r\n\r\nFinally: Why not have\r\n```\r\n exp(2, X) == shl(X, 1) if  evm!(hasBitwiseShifting)\r\n```\r\ninstead of\r\n```\r\n [@evm hasBitwiseShifting]\r\n exp(2, X) == shl(X, 1)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/725942552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/726053258",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-726053258",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 726053258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjA1MzI1OA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-12T12:39:45Z",
    "updated_at": "2020-11-12T12:39:45Z",
    "author_association": "MEMBER",
    "body": "> I'm not sure about the == if the two sides are not really equal (you can use lt!(#A, #B) on the RHS but not on the LHS).\r\n\r\nYou can use the evaluated terms on either side, but perhaps it is better to go with the direction indicator `->` and not allowing implicit reversibility.\r\n\r\n> maybe we should replace `wordsize` by `bitsPerWord` and `bytesPerWord`\r\n\r\nWe could also decide to make the rulelist dialect specific and then this is not needed.\r\n\r\n> Why not have `evm!(hasBitwiseShifting)`\r\n\r\nThat also sounds like an option, but would make it look like the `datasize` builtin and use a literal and not identifier: `evm!(\"hasBitwiseShifting\")`\r\n\r\n> maybe use !lt instead of lt!?\r\n\r\nNot sure, i personally like the `!` suffix better.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/726053258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/727279486",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-727279486",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 727279486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzI3OTQ4Ng==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-14T23:19:28Z",
    "updated_at": "2020-11-14T23:19:28Z",
    "author_association": "MEMBER",
    "body": "I just saw this discussion and would bring up the following:\r\n- I don't really see any value in rules like ``add(#A, #B) == add!(A, B)``. I would rather split evaluation away from simplification. Rather than evaluation being simplification rules, I would just mark functions like ``add`` as pure in the dialects and add a C++ evaluation function to them, s.t. such pure functions can generally be evaluated whenever all arguments have constant values. What is the benefit of introducing new syntax like ``add!`` for which you then just again have to define the semantics in C++ anyways? To me that seems like just introducing a whole lot of rather vacuous rules.\r\n- I don't think there needs to be a distinction between ``#A`` and ``A`` nor between ``gt`` and ``gt!``. If you remove every ``#`` and every ``!`` from the rule list, then every rule will still be valid semantically and I argue below that they are also just as easy to apply without the additional annotations.\r\n- If there are constants like ``not(0)`` on the left hand side I would just do \"pure function evaluation\" when loading the rules. So when the compiler loads the rules, it recognizes that ``not`` is pure and ``0`` is constant and evaluates ``not(0)`` before it internally stores the rule - this can be the very same pure function evaluator that I would run on the code instead of having ``add(#A, #B) == add!(A,B)``-style rules, so it's near zero additional effort.\r\n- In general a rule like ``add(X, 0) == X`` is just shorthand for ``add(X, Y) == X if eq(Y, 0)``, i.e. the general format of any rule just has (potentially nested) function applications with only variables as arguments on the LHS and any expression on the RHS with only the restriction that any free variable of the RHS has to be a free variable of the LHS (this same restriction holding for the condition expressions).\r\n\r\nSo the current simplifications can be replaced by the following steps:\r\n- First of all pure functions that have only arguments with known values are evaluated using the evaluation function given in the dialect.\r\n- Rule are preprocessed before application (only has to be done once per dialect), first evaluating constants (considering ``wordsize()`` or whatever it'll be called as additional pure builtin function it can evaluate), then replacing each constant on the LHS by new variables while either adding a condition ``eq(newvar, <constant>)`` or replacing an existing condition by ``and(eq(newvar, <constant>), <oldcondition>)``.\r\n- Now on actual code whenever the left-hand-side pattern is encountered, it can be directly replaced by the right-hand-side pattern, if athe pure function evaluator evaluates the condition expression to non-zero. The advantage here is that in the future we can add more involved reasoning in this evaluation process. A full \"reasoning based simplifier\" like approach would be way too expensive, but simple inequality reasoning should be good enough, i.e. compare the currently proposed\r\n   ``shl(#A, #B) == 0 iff gte!(A, wordsize!())``\r\nwith\r\n   ``shl(X, Y) == 0 if gte(X, wordsize())``\r\n If ``X`` is non-constant, but I know that ``gte(X, 1000)``, while ``wordsize()`` evaluates to ``256``, I can still apply the rule and correctly so. And for this to work only very simple range tracking and inequality-reasoning in the evaluator would suffice.\r\n\r\n\r\nBut yeah, just in case you want to consider this :-). It's not really an issue to first translate the rules into the verbose format, because we can still change it by simply removing any ``!`` and ``#`` at any later point. I'd suggest to group \"evaluation rules\" and proper simplification rules together, though.\r\nAlso my suggestion is tailored to the new optimizer and **only** the new optimizer. If we want to use the DSL for the old optimizer as well, we'll probably need these annotations, because we probably wouldn't want to rewrite any of that this much (for the new optimizer on the other hand I would argue that it would run *more* smoothly and be significantly simpler with the more general rules and split out \"pure builtin function evaluation\").\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/727279486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/732061180",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-732061180",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 732061180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMjA2MTE4MA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-23T10:11:42Z",
    "updated_at": "2020-11-23T10:11:42Z",
    "author_association": "MEMBER",
    "body": "Your proposal sounds very good to me, @ekpyron!\r\n\r\nI'm wondering how the \"redundant masking\" rule would look like in his framework.\r\n\r\n`and(x, y) == x if eq(and(x, y), x)`\r\n\r\nThis looks trivial, but we have to given the reasoning engine something to work with.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/732061180/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/732105694",
    "html_url": "https://github.com/ethereum/solidity/issues/7520#issuecomment-732105694",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7520",
    "id": 732105694,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMjEwNTY5NA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-23T11:35:54Z",
    "updated_at": "2020-11-23T11:43:32Z",
    "author_association": "MEMBER",
    "body": "That's tricky... ``and(x, y) == x if eq(and(x, y), x)`` would \"just work\" in the framework I described without any special care whenever ``x`` and ``y`` are constants, resp. have known values, but then it is trivial and the rule wouldn't be needed anyways, because ``and(x,y)`` could just directly be evaluated.\r\n\r\nFor non-constants, we could try to optimize the reasoning engine for special cases like ``y`` is a constant power-of-two-minus-one and ``x`` has an upper bound - that'd be possible. Actually one could even formulate a rule specifically for that case that is easy to evaluate without special support in the reasoning engine - ``and(iszero(iszero(y)), iszero(and(y, sub(y, 1))))`` should be \"y is a power of two\", so ``and(x, y) == x if   and(and(iszero(iszero(add(y,1))), iszero(and(add(y, 1),y))), iszero(gt(x,y)))`` is something that should work in this special case and should be evaluatable for constant ``y`` using simple inequality reasoning about ``x`` and ``y`` only... but I wouldn't trust that I got that right without SMT-veryfing that rule :-) - and then the question is, where does it end and the more cases we want to cover the more this task would become \"implement an SMT solver in the rule list or its reasoning engine\", which is way beyond the scope of the original idea of this issue...\r\n\r\nBut this shows how complex reasoning engines *can* help applying rules in this framework - if we were to simultanously SMT-encode the Yul AST while applying the rules, then we could query an SMT solver to show that ``iszero(<condition>)`` is UNSAT (probably with a very small timeout, since otherwise it'd slow things down too much) - and if it is, apply the rule.\r\nActually this could even replace \"pure constant function evaluation\" (at least when applying the rules), if we supplied SMT semantics for all \"pure\" builtins - I'd expect SMT solvers to just instantly evaluate those on their own then and ``eq(constant1, constant2)`` would be instantly SAT or UNSAT as well. But we're back to the trust issues against SMT solvers plus it'd still probably degrade performance...\r\n\r\nBut yeah, my idea was not to do anything like that or any reasoning whatsoever in a first step, but just have plain dumb evaluation of constants for the conditions - and in that case a rule for redundant masking wouldn't be possible as far as I can see.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/732105694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
