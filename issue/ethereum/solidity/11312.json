{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11312",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11312/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11312/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11312/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11312",
  "id": 867024386,
  "node_id": "MDU6SXNzdWU4NjcwMjQzODY=",
  "number": 11312,
  "title": "Codegen runs into invalid swap request (31)",
  "user": {
    "login": "leekt",
    "id": 15259621,
    "node_id": "MDQ6VXNlcjE1MjU5NjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/15259621?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/leekt",
    "html_url": "https://github.com/leekt",
    "followers_url": "https://api.github.com/users/leekt/followers",
    "following_url": "https://api.github.com/users/leekt/following{/other_user}",
    "gists_url": "https://api.github.com/users/leekt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/leekt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leekt/subscriptions",
    "organizations_url": "https://api.github.com/users/leekt/orgs",
    "repos_url": "https://api.github.com/users/leekt/repos",
    "events_url": "https://api.github.com/users/leekt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/leekt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 2376134343,
      "node_id": "MDU6TGFiZWwyMzc2MTM0MzQz",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/should%20compile%20without%20error",
      "name": "should compile without error",
      "color": "c48f13",
      "default": false,
      "description": "Error is reported even though it shouldn't. Source is fine."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-04-25T14:26:00Z",
  "updated_at": "2021-04-27T08:50:12Z",
  "closed_at": "2021-04-27T08:50:12Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!--## Prerequisites\r\n\r\n- First, many thanks for taking part in the community. We really appreciate that.\r\n- We realize there is a lot of information requested here. We ask only that you do your best to provide as much information as possible so we can better help you.\r\n- Support questions are better asked in one of the following locations:\r\n\t- [Solidity chat](https://gitter.im/ethereum/solidity)\r\n\t- [Stack Overflow](https://ethereum.stackexchange.com/)\r\n- Ensure the issue isn't already reported.\r\n- The issue should be reproducible with the latest solidity version; however, this isn't a hard requirement and being reproducible with an older version is sufficient.\r\n\r\n*Delete the above section and the instructions in the sections below before submitting*\r\n\r\n-->\r\n\r\n## Description\r\n\r\n<!--Please shortly describe the bug you have found, and what you expect instead.-->\r\nsolidity compile fails with below error\r\ncode can be found in [here](https://github.com/minnow-dev/solidity-bug-uniswap-oracle)\r\n\r\n```\r\nException during compilation: /Users/distiller/project/libevmasm/Instruction.h(267): Throw in function solidity::evmasm::Instruction solidity::evmasm::swapInstruction(unsigned int)\r\nDynamic exception type: boost::wrapexcept<solidity::evmasm::InvalidOpcode>\r\nstd::exception::what: InvalidOpcode\r\n[solidity::util::tag_comment*] = Invalid SWAP instruction requested (31).\r\nError HH600: Compilation failed\r\n\r\n```\r\n\r\nweird thing is, it succeeds if optimization is on.\r\n\r\nPS. i guess #10931 is relevant but it is marked as resolved\r\nPS2. i figured out it happens because of BlockVerifier.sol, but haven't found out the root cause\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.8.0, 0.8.1, 0.8.2, 0.8.3, 0.8.4\r\n- Target EVM version (as per compiler settings): default for all\r\n- Framework/IDE (e.g. Truffle or Remix): hardhat\r\n- EVM execution environment / backend / blockchain client: not relevant i guess\r\n- Operating system: macOS big sur 11.2.3\r\n\r\n## Steps to Reproduce\r\n\r\n### to check if fails when optimization is not turned on\r\n\r\n1. clone\r\n\r\n`git clone git@github.com:minnow-dev/solidity-bug-uniswap-oracle`\r\n\r\n2. npm install\r\n\r\n`npm install`\r\n\r\n3. compile\r\n\r\n`npm run compile`\r\n\r\n### to check if succeeds when optimization is turned on\r\n\r\n1. clone\r\n\r\n`git clone git@github.com:minnow-dev/solidity-bug-uniswap-oracle`\r\n\r\n2. npm install\r\n\r\n`npm install`\r\n\r\n3. remove comments on `hardhat.config.ts`\r\n\r\nðŸ‘‡ like this and try also with different \"version\", i've tested it works same on 0.8.0, 0.8.1, 0.8.2, 0.8.3, 0.8.4\r\n```\r\nexport default {\r\n  solidity: {\r\n    compilers :[\r\n      {\r\n        version: \"0.8.0\",\r\n        settings: {\r\n          optimizer: {\r\n            enabled: true,\r\n            runs: 200\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  networks: {\r\n    hardhat: {\r\n      gas: 10000000,\r\n      accounts: {\r\n        accountsBalance: \"1000000000000000000000000\",\r\n      },\r\n      allowUnlimitedContractSize: true,\r\n      timeout: 1000000\r\n    },\r\n    coverage: {\r\n      url: \"http://localhost:8555\",\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n4. compile\r\n\r\n`npm run compile`\r\n\r\n<!--\r\nPlease provide a *minimal* source code example to trigger the bug you have found.\r\nPlease also mention any command line flags that are necessary for triggering the bug.\r\nProvide as much information as necessary to reproduce the bug.\r\n\r\n```solidity\r\n// Some *minimal* Solidity source code to reproduce the bug.\r\n// ...\r\n```\r\n-->\r\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11312/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11312/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/826376920",
    "html_url": "https://github.com/ethereum/solidity/issues/11312#issuecomment-826376920",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11312",
    "id": 826376920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjM3NjkyMA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-25T19:28:05Z",
    "updated_at": "2021-04-25T19:32:17Z",
    "author_association": "MEMBER",
    "body": "Looks like this started happening in 0.7.5. Here's a smaller repro:\r\n\r\n```solidity\r\ncontract C {\r\n    function foo() public {\r\n        uint x;\r\n\r\n        assembly {\r\n            let a let b let c let d\r\n            let e let f let g let h\r\n            let i let j let k let l\r\n            let m let n let o let p\r\n\r\n            x := 0\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe error goes away if there are less than 16 Yul variables in the assembly block or if we remove the single Solidity variable.\r\n\r\nAlso fails if all the variables are declared in Solidity rather than Yul:\r\n```solidity\r\ncontract C {\r\n    function foo() public {\r\n        uint x;\r\n\r\n        uint a; uint b; uint c; uint d;\r\n        uint e; uint f; uint g; uint h;\r\n        uint i; uint j; uint k; uint l;\r\n        uint m; uint n; uint o; uint p;\r\n\r\n        assembly {\r\n            x := 0\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd yeah, it's a duplicate of #10931 but we did not have a repro there so big thanks for actually posting code that triggers it!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/826376920/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/826496599",
    "html_url": "https://github.com/ethereum/solidity/issues/11312#issuecomment-826496599",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11312",
    "id": 826496599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjQ5NjU5OQ==",
    "user": {
      "login": "leekt",
      "id": 15259621,
      "node_id": "MDQ6VXNlcjE1MjU5NjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/15259621?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leekt",
      "html_url": "https://github.com/leekt",
      "followers_url": "https://api.github.com/users/leekt/followers",
      "following_url": "https://api.github.com/users/leekt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leekt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leekt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leekt/subscriptions",
      "organizations_url": "https://api.github.com/users/leekt/orgs",
      "repos_url": "https://api.github.com/users/leekt/repos",
      "events_url": "https://api.github.com/users/leekt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leekt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-26T04:45:03Z",
    "updated_at": "2021-04-26T04:45:16Z",
    "author_association": "NONE",
    "body": "Thanks, do you think it will be ok for me to use 0.8.4 for the above code with optimization enabled? Since that will be a quick and easy patch for me if there aren't any other bug related to this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/826496599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/826932614",
    "html_url": "https://github.com/ethereum/solidity/issues/11312#issuecomment-826932614",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11312",
    "id": 826932614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjkzMjYxNA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-26T15:30:28Z",
    "updated_at": "2021-04-26T15:30:28Z",
    "author_association": "MEMBER",
    "body": "I can't guarantee anything because I haven't looked at the implementation but the bug seems to be caused by the compiler running out of stack slots. That's due to too many local variables and parameters so just using less of them (e.g. by moving parts of the code to helper functions) should a good workaround. Enabling the optimizer is good too because I think it solves your problem by just by eliminating some of the intermediate variables.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/826932614/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/827017208",
    "html_url": "https://github.com/ethereum/solidity/issues/11312#issuecomment-827017208",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11312",
    "id": 827017208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzAxNzIwOA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-26T17:27:53Z",
    "updated_at": "2021-04-26T17:27:53Z",
    "author_association": "MEMBER",
    "body": "It fails on `libsolidity/codegen/ContractCompiler.cpp(880)`. If the assertion within the first branch is moved out, then at least a proper source location is shown:\r\n```\r\n$ solc/solc 11312.sol \r\nCompiler error: Stack too deep(17), try removing local variables.\r\n --> 11312.sol:5:9:\r\n  |\r\n5 |         assembly {\r\n  |         ^ (Relevant source part starts here and spans across multiple lines).`\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/827017208/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
