{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/2675/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/2675/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/2675/events",
  "html_url": "https://github.com/ethereum/solidity/issues/2675",
  "id": 246953779,
  "node_id": "MDU6SXNzdWUyNDY5NTM3Nzk=",
  "number": 2675,
  "title": "Be able to disable all warnings for certain files",
  "user": {
    "login": "madvas",
    "id": 3857155,
    "node_id": "MDQ6VXNlcjM4NTcxNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3857155?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/madvas",
    "html_url": "https://github.com/madvas",
    "followers_url": "https://api.github.com/users/madvas/followers",
    "following_url": "https://api.github.com/users/madvas/following{/other_user}",
    "gists_url": "https://api.github.com/users/madvas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/madvas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/madvas/subscriptions",
    "organizations_url": "https://api.github.com/users/madvas/orgs",
    "repos_url": "https://api.github.com/users/madvas/repos",
    "events_url": "https://api.github.com/users/madvas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/madvas/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 838064207,
      "node_id": "MDU6TGFiZWw4MzgwNjQyMDc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/annoys%20users%20:cry:",
      "name": "annoys users :cry:",
      "color": "ea2cab",
      "default": false,
      "description": ""
    },
    {
      "id": 4438006499,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaa4w",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20effort",
      "name": "low effort",
      "color": "ffb1fa",
      "default": false,
      "description": "There is not much implementation work to be done. The task is very easy or tiny."
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "001dff",
      "default": false,
      "description": "Default level of impact"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 30,
  "created_at": "2017-08-01T04:44:53Z",
  "updated_at": "2022-09-27T18:50:37Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "When developing, we often include 3rd party contracts, which have been audited and deployed to mainnet, but don't play well with solc's latest warnings policy. Warnings for those files are annoying and useless. \r\n\r\nFor example if I develop dapp that facilitates ENS contracts and [strings library](https://github.com/Arachnid/solidity-stringutils), this is amount of warnings I get on single project compilation. All comes from AbstractENS.sol and strings.sol, which are verified and safe contracts. Makes other compiler output practically unreadable. \r\n\r\n```\r\nens/AbstractENS.sol:7:37: Warning: This declaration shadows an existing declaration.\r\n    function setOwner(bytes32 node, address owner);\r\n                                    ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:8:59: Warning: This declaration shadows an existing declaration.\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n                                                          ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:9:40: Warning: This declaration shadows an existing declaration.\r\n    function setResolver(bytes32 node, address resolver);\r\n                                       ^--------------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:5:5:\r\n    function resolver(bytes32 node) constant returns(address);\r\n    ^--------------------------------------------------------^\r\n\r\nens/AbstractENS.sol:10:35: Warning: This declaration shadows an existing declaration.\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n                                  ^--------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:6:5:\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    ^--------------------------------------------------^\r\n\r\nens/AbstractENS.sol:13:65: Warning: This declaration shadows an existing declaration.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n                                                                ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:16:42: Warning: This declaration shadows an existing declaration.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n                                         ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:19:45: Warning: This declaration shadows an existing declaration.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n                                            ^--------------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:5:5:\r\n    function resolver(bytes32 node) constant returns(address);\r\n    ^--------------------------------------------------------^\r\n\r\nens/AbstractENS.sol:22:40: Warning: This declaration shadows an existing declaration.\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n                                       ^--------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:6:5:\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    ^--------------------------------------------------^\r\n\r\nens/ENS.sol:57:37: Warning: This declaration shadows an existing declaration.\r\n    function setOwner(bytes32 node, address owner) only_owner(node) {\r\n                                    ^-----------^\r\nThe shadowed declaration is here: ens/ENS.sol:33:5:\r\n    function owner(bytes32 node) constant returns (address) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nens/ENS.sol:69:59: Warning: This declaration shadows an existing declaration.\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) {\r\n                                                          ^-----------^\r\nThe shadowed declaration is here: ens/ENS.sol:33:5:\r\n    function owner(bytes32 node) constant returns (address) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nens/ENS.sol:80:40: Warning: This declaration shadows an existing declaration.\r\n    function setResolver(bytes32 node, address resolver) only_owner(node) {\r\n                                       ^--------------^\r\nThe shadowed declaration is here: ens/ENS.sol:40:5:\r\n    function resolver(bytes32 node) constant returns (address) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nens/ENS.sol:90:35: Warning: This declaration shadows an existing declaration.\r\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) {\r\n                                  ^--------^\r\nThe shadowed declaration is here: ens/ENS.sol:47:5:\r\n    function ttl(bytes32 node) constant returns (uint64) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:156:5: Warning: This declaration shadows an existing declaration.\r\n    function len(slice self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:160:14: Warning: This declaration shadows an existing declaration.\r\n        for (uint len = 0; ptr < end; len++) {\r\n             ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:250:9: Warning: This declaration shadows an existing declaration.\r\n        uint len;\r\n        ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:284:5: Warning: This declaration shadows an existing declaration.\r\n    function nextRune(slice self) internal returns (slice ret) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:242:5:\r\n    function nextRune(slice self, slice rune) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:299:9: Warning: This declaration shadows an existing declaration.\r\n        uint len;\r\n        ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:600:5: Warning: This declaration shadows an existing declaration.\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:577:5:\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:636:5: Warning: This declaration shadows an existing declaration.\r\n    function rsplit(slice self, slice needle) internal returns (slice token) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:614:5:\r\n    function rsplit(slice self, slice needle, slice token) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:646:64: Warning: This declaration shadows an existing declaration.\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n                                                               ^--------^\r\nThe shadowed declaration is here: strings.sol:646:5:\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:692:9: Warning: This declaration shadows an existing declaration.\r\n        uint len = self._len * (parts.length - 1);\r\n        ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:300:9: Warning: Variable is shadowed in inline assembly by an instruction of the same name\r\n        uint div = 2 ** 248;\r\n        ^------^\r\nstrings.sol:474:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ^---^\r\nstrings.sol:476:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ^---^\r\nstrings.sol:511:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(ret, eq(and(mload(ptr), mask), needledata))\r\n                    ^---^\r\nstrings.sol:513:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(loop, gt(add(ptr, 1), selfptr))\r\n                    ^---^\r\nstrings.sol:515:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jump(exit)\r\n                    ^--^\r\nens/AbstractENS.sol:7:37: Warning: This declaration shadows an existing declaration.\r\n    function setOwner(bytes32 node, address owner);\r\n                                    ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:8:59: Warning: This declaration shadows an existing declaration.\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n                                                          ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:9:40: Warning: This declaration shadows an existing declaration.\r\n    function setResolver(bytes32 node, address resolver);\r\n                                       ^--------------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:5:5:\r\n    function resolver(bytes32 node) constant returns(address);\r\n    ^--------------------------------------------------------^\r\n\r\nens/AbstractENS.sol:10:35: Warning: This declaration shadows an existing declaration.\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n                                  ^--------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:6:5:\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    ^--------------------------------------------------^\r\n\r\nens/AbstractENS.sol:13:65: Warning: This declaration shadows an existing declaration.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n                                                                ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:16:42: Warning: This declaration shadows an existing declaration.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n                                         ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:19:45: Warning: This declaration shadows an existing declaration.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n                                            ^--------------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:5:5:\r\n    function resolver(bytes32 node) constant returns(address);\r\n    ^--------------------------------------------------------^\r\n\r\nens/AbstractENS.sol:22:40: Warning: This declaration shadows an existing declaration.\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n                                       ^--------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:6:5:\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    ^--------------------------------------------------^\r\n\r\nens/ENS.sol:57:37: Warning: This declaration shadows an existing declaration.\r\n    function setOwner(bytes32 node, address owner) only_owner(node) {\r\n                                    ^-----------^\r\nThe shadowed declaration is here: ens/ENS.sol:33:5:\r\n    function owner(bytes32 node) constant returns (address) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nens/ENS.sol:69:59: Warning: This declaration shadows an existing declaration.\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) {\r\n                                                          ^-----------^\r\nThe shadowed declaration is here: ens/ENS.sol:33:5:\r\n    function owner(bytes32 node) constant returns (address) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nens/ENS.sol:80:40: Warning: This declaration shadows an existing declaration.\r\n    function setResolver(bytes32 node, address resolver) only_owner(node) {\r\n                                       ^--------------^\r\nThe shadowed declaration is here: ens/ENS.sol:40:5:\r\n    function resolver(bytes32 node) constant returns (address) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nens/ENS.sol:90:35: Warning: This declaration shadows an existing declaration.\r\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) {\r\n                                  ^--------^\r\nThe shadowed declaration is here: ens/ENS.sol:47:5:\r\n    function ttl(bytes32 node) constant returns (uint64) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:156:5: Warning: This declaration shadows an existing declaration.\r\n    function len(slice self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:160:14: Warning: This declaration shadows an existing declaration.\r\n        for (uint len = 0; ptr < end; len++) {\r\n             ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:250:9: Warning: This declaration shadows an existing declaration.\r\n        uint len;\r\n        ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:284:5: Warning: This declaration shadows an existing declaration.\r\n    function nextRune(slice self) internal returns (slice ret) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:242:5:\r\n    function nextRune(slice self, slice rune) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:299:9: Warning: This declaration shadows an existing declaration.\r\n        uint len;\r\n        ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:600:5: Warning: This declaration shadows an existing declaration.\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:577:5:\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:636:5: Warning: This declaration shadows an existing declaration.\r\n    function rsplit(slice self, slice needle) internal returns (slice token) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:614:5:\r\n    function rsplit(slice self, slice needle, slice token) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:646:64: Warning: This declaration shadows an existing declaration.\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n                                                               ^--------^\r\nThe shadowed declaration is here: strings.sol:646:5:\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:692:9: Warning: This declaration shadows an existing declaration.\r\n        uint len = self._len * (parts.length - 1);\r\n        ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:300:9: Warning: Variable is shadowed in inline assembly by an instruction of the same name\r\n        uint div = 2 ** 248;\r\n        ^------^\r\nstrings.sol:474:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ^---^\r\nstrings.sol:476:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ^---^\r\nstrings.sol:511:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(ret, eq(and(mload(ptr), mask), needledata))\r\n                    ^---^\r\nstrings.sol:513:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(loop, gt(add(ptr, 1), selfptr))\r\n                    ^---^\r\nstrings.sol:515:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jump(exit)\r\n                    ^--^\r\nstrings.sol:156:5: Warning: This declaration shadows an existing declaration.\r\n    function len(slice self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:160:14: Warning: This declaration shadows an existing declaration.\r\n        for (uint len = 0; ptr < end; len++) {\r\n             ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:250:9: Warning: This declaration shadows an existing declaration.\r\n        uint len;\r\n        ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:284:5: Warning: This declaration shadows an existing declaration.\r\n    function nextRune(slice self) internal returns (slice ret) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:242:5:\r\n    function nextRune(slice self, slice rune) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:299:9: Warning: This declaration shadows an existing declaration.\r\n        uint len;\r\n        ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:600:5: Warning: This declaration shadows an existing declaration.\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:577:5:\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:636:5: Warning: This declaration shadows an existing declaration.\r\n    function rsplit(slice self, slice needle) internal returns (slice token) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:614:5:\r\n    function rsplit(slice self, slice needle, slice token) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:646:64: Warning: This declaration shadows an existing declaration.\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n                                                               ^--------^\r\nThe shadowed declaration is here: strings.sol:646:5:\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:692:9: Warning: This declaration shadows an existing declaration.\r\n        uint len = self._len * (parts.length - 1);\r\n        ^------^\r\nThe shadowed declaration is here: strings.sol:81:5:\r\n    function len(bytes32 self) internal returns (uint) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nstrings.sol:300:9: Warning: Variable is shadowed in inline assembly by an instruction of the same name\r\n        uint div = 2 ** 248;\r\n        ^------^\r\nstrings.sol:474:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ^---^\r\nstrings.sol:476:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ^---^\r\nstrings.sol:511:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(ret, eq(and(mload(ptr), mask), needledata))\r\n                    ^---^\r\nstrings.sol:513:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(loop, gt(add(ptr, 1), selfptr))\r\n                    ^---^\r\nstrings.sol:515:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jump(exit)\r\n                    ^--^\r\nens/AbstractENS.sol:7:37: Warning: This declaration shadows an existing declaration.\r\n    function setOwner(bytes32 node, address owner);\r\n                                    ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:8:59: Warning: This declaration shadows an existing declaration.\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n                                                          ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:9:40: Warning: This declaration shadows an existing declaration.\r\n    function setResolver(bytes32 node, address resolver);\r\n                                       ^--------------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:5:5:\r\n    function resolver(bytes32 node) constant returns(address);\r\n    ^--------------------------------------------------------^\r\n\r\nens/AbstractENS.sol:10:35: Warning: This declaration shadows an existing declaration.\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n                                  ^--------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:6:5:\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    ^--------------------------------------------------^\r\n\r\nens/AbstractENS.sol:13:65: Warning: This declaration shadows an existing declaration.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n                                                                ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:16:42: Warning: This declaration shadows an existing declaration.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n                                         ^-----------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:4:5:\r\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\r\n\r\nens/AbstractENS.sol:19:45: Warning: This declaration shadows an existing declaration.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n                                            ^--------------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:5:5:\r\n    function resolver(bytes32 node) constant returns(address);\r\n    ^--------------------------------------------------------^\r\n\r\nens/AbstractENS.sol:22:40: Warning: This declaration shadows an existing declaration.\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n                                       ^--------^\r\nThe shadowed declaration is here: ens/AbstractENS.sol:6:5:\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    ^--------------------------------------------------^\r\n\r\nens/ENS.sol:57:37: Warning: This declaration shadows an existing declaration.\r\n    function setOwner(bytes32 node, address owner) only_owner(node) {\r\n                                    ^-----------^\r\nThe shadowed declaration is here: ens/ENS.sol:33:5:\r\n    function owner(bytes32 node) constant returns (address) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nens/ENS.sol:69:59: Warning: This declaration shadows an existing declaration.\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) {\r\n                                                          ^-----------^\r\nThe shadowed declaration is here: ens/ENS.sol:33:5:\r\n    function owner(bytes32 node) constant returns (address) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nens/ENS.sol:80:40: Warning: This declaration shadows an existing declaration.\r\n    function setResolver(bytes32 node, address resolver) only_owner(node) {\r\n                                       ^--------------^\r\nThe shadowed declaration is here: ens/ENS.sol:40:5:\r\n    function resolver(bytes32 node) constant returns (address) {\r\n    ^\r\nSpanning multiple lines.\r\n\r\nens/ENS.sol:90:35: Warning: This declaration shadows an existing declaration.\r\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) {\r\n                                  ^--------^\r\nThe shadowed declaration is here: ens/ENS.sol:47:5:\r\n    function ttl(bytes32 node) constant returns (uint64) {\r\n    ^\r\n```\r\n\r\n`solc 0.4.14+commit.c2215d46.Darwin.appleclang`\r\n\r\nThanks",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/2675/reactions",
    "total_count": 16,
    "+1": 16,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/2675/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319313497",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-319313497",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 319313497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTMxMzQ5Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T09:06:33Z",
    "updated_at": "2017-08-01T09:06:33Z",
    "author_association": "MEMBER",
    "body": "I understand that this is quite annoying. On the other hand, I guess we owe it to our users to constantly improve all code, including library code.\r\n\r\nCan you think of some kind of \"middle ground\" between these two extremes?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319313497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319313544",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-319313544",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 319313544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTMxMzU0NA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T09:06:42Z",
    "updated_at": "2017-08-01T09:06:42Z",
    "author_association": "MEMBER",
    "body": "Without having reviewed everything, the warnings about using jumps may be actually cover bugs:\r\n\r\n```\r\nstrings.sol:474:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ^---^\r\nstrings.sol:476:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ^---^\r\nstrings.sol:511:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(ret, eq(and(mload(ptr), mask), needledata))\r\n                    ^---^\r\nstrings.sol:513:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jumpi(loop, gt(add(ptr, 1), selfptr))\r\n                    ^---^\r\nstrings.sol:515:21: Warning: Jump instructions are low-level EVM features that can lead to incorrect stack access. Because of that they are discouraged. Please consider using \"switch\" or \"for\" statements instead.\r\n                    jump(exit)\r\n                    ^--^\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319313544/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319314170",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-319314170",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 319314170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTMxNDE3MA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T09:09:07Z",
    "updated_at": "2017-08-01T09:09:07Z",
    "author_association": "MEMBER",
    "body": "This shouldn't be a warning though:\r\n```\r\nstrings.sol:636:5: Warning: This declaration shadows an existing declaration.\r\n    function rsplit(slice self, slice needle) internal returns (slice token) {\r\n    ^\r\nSpanning multiple lines.\r\nThe shadowed declaration is here: strings.sol:614:5:\r\n    function rsplit(slice self, slice needle, slice token) internal returns (slice) {\r\n    ^\r\nSpanning multiple lines.\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319314170/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319316434",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-319316434",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 319316434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTMxNjQzNA==",
    "user": {
      "login": "madvas",
      "id": 3857155,
      "node_id": "MDQ6VXNlcjM4NTcxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3857155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madvas",
      "html_url": "https://github.com/madvas",
      "followers_url": "https://api.github.com/users/madvas/followers",
      "following_url": "https://api.github.com/users/madvas/following{/other_user}",
      "gists_url": "https://api.github.com/users/madvas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madvas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madvas/subscriptions",
      "organizations_url": "https://api.github.com/users/madvas/orgs",
      "repos_url": "https://api.github.com/users/madvas/repos",
      "events_url": "https://api.github.com/users/madvas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madvas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T09:18:35Z",
    "updated_at": "2017-08-01T09:19:04Z",
    "author_association": "NONE",
    "body": "I think compiler and linter shouldn't be one thing without option to run each one separately. Turning off linter for 3rd party libraries is not extreme option. We don't run it on `node_modules` files, when we develop JS project, do we? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319316434/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319321858",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-319321858",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 319321858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTMyMTg1OA==",
    "user": {
      "login": "madvas",
      "id": 3857155,
      "node_id": "MDQ6VXNlcjM4NTcxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3857155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madvas",
      "html_url": "https://github.com/madvas",
      "followers_url": "https://api.github.com/users/madvas/followers",
      "following_url": "https://api.github.com/users/madvas/following{/other_user}",
      "gists_url": "https://api.github.com/users/madvas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madvas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madvas/subscriptions",
      "organizations_url": "https://api.github.com/users/madvas/orgs",
      "repos_url": "https://api.github.com/users/madvas/repos",
      "events_url": "https://api.github.com/users/madvas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madvas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-01T09:40:37Z",
    "updated_at": "2017-08-01T09:41:04Z",
    "author_association": "NONE",
    "body": "> On the other hand, I guess we owe it to our users to constantly improve all code, including library code.\r\n\r\nIt's pretty naive to think people will happily start to make changes to 3rd party code when compiler makes them feel annoyed. They'll just use `grep` to filter out useless warnings. I wouldn't touch 3rd party code that's been audited and deployed on mainnet even if compiler warnings want me to. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319321858/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319705736",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-319705736",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 319705736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTcwNTczNg==",
    "user": {
      "login": "richardforrestbarker",
      "id": 22085800,
      "node_id": "MDQ6VXNlcjIyMDg1ODAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22085800?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richardforrestbarker",
      "html_url": "https://github.com/richardforrestbarker",
      "followers_url": "https://api.github.com/users/richardforrestbarker/followers",
      "following_url": "https://api.github.com/users/richardforrestbarker/following{/other_user}",
      "gists_url": "https://api.github.com/users/richardforrestbarker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richardforrestbarker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richardforrestbarker/subscriptions",
      "organizations_url": "https://api.github.com/users/richardforrestbarker/orgs",
      "repos_url": "https://api.github.com/users/richardforrestbarker/repos",
      "events_url": "https://api.github.com/users/richardforrestbarker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richardforrestbarker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T15:21:49Z",
    "updated_at": "2017-08-02T15:21:49Z",
    "author_association": "NONE",
    "body": "@Madvas doesn't that defeat the purpose of a Dapp and ethereum in general? Or am I confused about the point of a decentralized application framework? I know RNGs can be hard to make securely in the ethereum environment and someone has done it -- but do you really want to deploy a roll-your-own version or a even copy of that RNG contract to the mainnet along side whatever contracts you've built that need it and maintain it? Aside from inundating the blockchain with repeated or similarly purposed contracts and code, you'll end up making your applications' code base fatter than it needs to be. I thought programmers were supposed to be reducing and reusing repeated code. Or am I thoroughly misinformed? My apologies if I'm out of bounds or off topic. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/319705736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/320067151",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-320067151",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 320067151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDA2NzE1MQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-03T19:29:24Z",
    "updated_at": "2017-08-03T19:29:24Z",
    "author_association": "MEMBER",
    "body": "Function overloads wrongly considered as shadowing is tracked in #2676.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/320067151/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/320073260",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-320073260",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 320073260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDA3MzI2MA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-03T19:55:41Z",
    "updated_at": "2017-08-03T19:55:41Z",
    "author_association": "MEMBER",
    "body": "I am a strong advocate of providing a mechanism for ignoring warnings.  I personally prefer per line warnings like in #2691 but warnings do need a way of being ignored.  The reasoning for this is because if you don't give people a way to ignore specific warnings, they will end up ignoring _all_ warnings just to silence a few.  We want to encourage people to treat warnings as errors for the purpose of CI and release, but we can only do that if we give them a way to ignore specific warnings when it is appropriate.  In a large project with thousands of lines of code, there is likely one or two places where the warning should be suppressed.  If the only option to the user is to ignore all warnings in CI in order to get a build pushed through, then we have just created a vector for introducing bugs in a project that otherwise would have followed a good procedure for minimizing risk.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/320073260/reactions",
      "total_count": 48,
      "+1": 43,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/360986488",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-360986488",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 360986488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDk4NjQ4OA==",
    "user": {
      "login": "chapati23",
      "id": 117495,
      "node_id": "MDQ6VXNlcjExNzQ5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/117495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chapati23",
      "html_url": "https://github.com/chapati23",
      "followers_url": "https://api.github.com/users/chapati23/followers",
      "following_url": "https://api.github.com/users/chapati23/following{/other_user}",
      "gists_url": "https://api.github.com/users/chapati23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chapati23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chapati23/subscriptions",
      "organizations_url": "https://api.github.com/users/chapati23/orgs",
      "repos_url": "https://api.github.com/users/chapati23/repos",
      "events_url": "https://api.github.com/users/chapati23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chapati23/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-27T13:57:00Z",
    "updated_at": "2018-01-27T13:57:00Z",
    "author_association": "NONE",
    "body": "One option could be to take `.soliumignore` into account",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/360986488/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777649255",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-777649255",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 777649255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzY0OTI1NQ==",
    "user": {
      "login": "chanhosuh",
      "id": 4645177,
      "node_id": "MDQ6VXNlcjQ2NDUxNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4645177?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chanhosuh",
      "html_url": "https://github.com/chanhosuh",
      "followers_url": "https://api.github.com/users/chanhosuh/followers",
      "following_url": "https://api.github.com/users/chanhosuh/following{/other_user}",
      "gists_url": "https://api.github.com/users/chanhosuh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chanhosuh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chanhosuh/subscriptions",
      "organizations_url": "https://api.github.com/users/chanhosuh/orgs",
      "repos_url": "https://api.github.com/users/chanhosuh/repos",
      "events_url": "https://api.github.com/users/chanhosuh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chanhosuh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-11T17:10:38Z",
    "updated_at": "2021-02-11T17:10:38Z",
    "author_association": "NONE",
    "body": "> The reasoning for this is because if you don't give people a way to ignore specific warnings, they will end up ignoring _all_ warnings just to silence a few. \r\n\r\nOur team has stopped reading the several screens of warnings from OpenZeppelin, Chainlink, etc. that are being outputted and consequently we are missing the warnings from our own code now.  Wish there were an option to turn off the several screens of useless warnings so we can see the few from ours at the end only.  (you may debate if they are useless, but the vast majority are about license identifiers...). I may just implement the recommendation above from someone to grep out the useless ones.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777649255/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779279866",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-779279866",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 779279866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTI3OTg2Ng==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T15:05:59Z",
    "updated_at": "2021-02-15T15:05:59Z",
    "author_association": "MEMBER",
    "body": "In the interest of pushing this forward, I added this to the design backlog and we'll be discussing this on Wednesday's call. The meetings are open so if anyone's interested, feel free to join.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779279866/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779382845",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-779382845",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 779382845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM4Mjg0NQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T18:13:33Z",
    "updated_at": "2021-02-15T18:13:33Z",
    "author_association": "MEMBER",
    "body": "Do you have any proposal? This issue suggest adding some option into standard json and the CLI.\r\n\r\nIf we consider ignoring warnings, I would prefer #2691.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779382845/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779386243",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-779386243",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 779386243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM4NjI0Mw==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T18:21:28Z",
    "updated_at": "2021-02-15T18:21:28Z",
    "author_association": "MEMBER",
    "body": "Good point. I was actually thinking about both and did not realize that there's a separate issue for ignoring warnings via comments. I think we could discuss both at the same time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779386243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779388920",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-779388920",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 779388920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM4ODkyMA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T18:28:31Z",
    "updated_at": "2021-02-15T18:28:31Z",
    "author_association": "MEMBER",
    "body": "Actually to clarify, I think these two issues try to solve very different problems:\r\n1) Disabling warnings for certain files aims to ignore imported projects.\r\n\r\n2) Disabling warnings-per-statement is aimed at making warnings go away on constructs the programmer feels safe, but the compiler disagrees. However, do we still have such cases? We did not had such warnings for a very long time.\r\n\r\nSo 1) is a more pressing issue and perhaps we should just consider that situation. I wonder whether for that case a compilation setting or an in-source annotation better shows the intent? Perhaps if a file is ignored, we should raise a warning stating the file is ignored? 🙊 \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779388920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779389761",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-779389761",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 779389761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM4OTc2MQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T18:30:41Z",
    "updated_at": "2021-02-15T18:30:41Z",
    "author_association": "MEMBER",
    "body": "@chanhosuh what kind of warnings are you seeing?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779389761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779394757",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-779394757",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 779394757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM5NDc1Nw==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T18:44:24Z",
    "updated_at": "2021-02-15T18:45:01Z",
    "author_association": "MEMBER",
    "body": "Right they're not the same but I think they're still closely related. I think it might be good to start with discussing all of these in general and at least decide which ones we're going to address.\r\n\r\nAlso, I'd add two more to the list:\r\n3. Disabling all instances of a particular warning that the programmer feels is unimportant.\r\n4. Hiding all warnings temporarily because they're obscuring actual errors (#3619).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779394757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779399077",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-779399077",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 779399077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM5OTA3Nw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T18:55:15Z",
    "updated_at": "2021-02-15T18:55:15Z",
    "author_association": "MEMBER",
    "body": "I really would like to see what warnings are there which cause annoyance. Read through all the examples brought up here and in #2691, but to me it looks like the large majority of them are not relevant anymore, or a good way to silence them exists.\r\n\r\nThese were the issues brought up:\r\n- Jumps deprecated in inline assembly -- they are gone now\r\n- Returndata warning -- we have the evmVersion setting which ensures these warnings are not displayed, unless they are valid\r\n- Shadowing -- these are errors now\r\n- State mutability can be restricted -- IIRC narrowing mutability during overriding is allowed now\r\n- Return value of low-level call not used -- try/catch can be used as a [workaround](https://github.com/ethereum/solidity/issues/2691#issuecomment-644785162) (`try myaddress.realFunction(_id) { } catch {}`)\r\n- Code size exceeds 24576 bytes -- this is [suggested](https://github.com/ethereum/solidity/issues/2691#issuecomment-758705971) to be a compiler option\r\n- Invalid address checksum -- workaround is prepending it with a zero\r\n\r\nCan we perhaps open a section in the documentation for common warnings, what they mean, how to work them around?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779399077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779399743",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-779399743",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 779399743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM5OTc0Mw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T18:57:13Z",
    "updated_at": "2021-02-15T18:57:13Z",
    "author_association": "MEMBER",
    "body": "Regarding the case when imported libraries must be silenced: I wonder why people want to trust libraries emitting large number of warnings?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779399743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780578368",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-780578368",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 780578368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDU3ODM2OA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T14:04:46Z",
    "updated_at": "2021-02-17T14:04:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@axic You didn't mention the warning \"constructor visibility is ignored\".\r\n\r\n> I wonder why people want to trust libraries emitting large number of warnings?\r\n\r\nTake OpenZeppelin Contracts 3.x. It was free of warnings for Solidity 0.6, but the warning I mentioned above was introduced in Solidity 0.7. We could either release a new major version of the library (due to the breaking change that is bumping the pragma), or extend `pragma solidity` to cover both 0.6 and 0.7. We did the latter because we wanted to spare our users the major update, but this resulted in lots of warnings, so at the same time we had to release a separate version of the package specifically for Solidity 0.7. There is nothing to distrust from the package with warnings.\r\n\r\nI don't think warnings have anything to do with trust. The developer can know when a warning can be safely ignored. There is more to distrust from inline assembly, and there are no warnings about its use.\r\n\r\n---\r\n\r\nIs there a warning about unused function arguments? I've seen it but I can't seem to reproduce it now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780578368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/781667299",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-781667299",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 781667299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTY2NzI5OQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-18T22:09:40Z",
    "updated_at": "2021-02-18T22:13:29Z",
    "author_association": "CONTRIBUTOR",
    "body": ">State mutability can be restricted -- IIRC narrowing mutability during overriding is allowed now\r\n\r\n@axic Isn't the problem the inverse? We sometimes want to define a `virtual view` function as view because we want to allow child contracts to be able to read state, yet the default implementation is pure. Narrowing mutability is allowed but widening it is (rightly) not allowed.\r\n\r\n**Edit:** Apparently this warning is not generated for virtual functions anymore.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/781667299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782365034",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-782365034",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 782365034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjM2NTAzNA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-19T21:26:56Z",
    "updated_at": "2021-02-19T21:27:16Z",
    "author_association": "MEMBER",
    "body": "We discussed this on the last weekly call and the point of contention was whether it's really an issue to be solved in the compiler itself. So far we think that we need to gather more feedback to be able to make a decision here (@franzihei).\r\n\r\nThere were opinions that this issue is relevant only when the user is using the compiler directly on the command line and that this is actually a pretty rare case. Most people are probably using IDEs or at least invoke the compiler indirectly, under the control of a tool like Truffle, Hardhat, Brownie, etc. In these cases the tool usually uses the JSON interface and is free to present the warnings it receives in any way that makes sense for it, including suppressing ones that come from libraries. Such a tool is actually in a better position to decide this because it can actually know if the file being compiled resides in the project or is a part of an external library installed by the user. The compiler currently does not make that distinction at all.\r\n\r\nIf we did want to add more control over the non-JSON output to the compiler interface, the next question is how much control is actually needed. Do we actually need to do it for specific files? Maybe it would be enough to just display warnings and errors separately so that errors are easier to find? And then, should errors be printed first or last? Also, maybe a more complex system, with severity assigned to specific warning types would be better?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782365034/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782551377",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-782551377",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 782551377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjU1MTM3Nw==",
    "user": {
      "login": "chanhosuh",
      "id": 4645177,
      "node_id": "MDQ6VXNlcjQ2NDUxNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4645177?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chanhosuh",
      "html_url": "https://github.com/chanhosuh",
      "followers_url": "https://api.github.com/users/chanhosuh/followers",
      "following_url": "https://api.github.com/users/chanhosuh/following{/other_user}",
      "gists_url": "https://api.github.com/users/chanhosuh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chanhosuh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chanhosuh/subscriptions",
      "organizations_url": "https://api.github.com/users/chanhosuh/orgs",
      "repos_url": "https://api.github.com/users/chanhosuh/repos",
      "events_url": "https://api.github.com/users/chanhosuh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chanhosuh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-20T03:36:41Z",
    "updated_at": "2021-02-20T19:54:19Z",
    "author_association": "NONE",
    "body": "> Regarding the case when imported libraries must be silenced: I wonder why people want to trust libraries emitting large number of warnings?\r\n\r\n@axic you mean I should not trust OpenZeppelin contracts, like the ubiquitous `Ownable` contract because I get this warning:\r\n```\r\n@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\r\n```\r\n\r\nThere are tons of SPDX identifier warnings from external libraries such as OpenZeppelin, Chainlink, etc.\r\n\r\nAlso, deprecation warnings like this:\r\n```\r\nWarning: Documentation tag on non-public state variables will be disallowed in 0.7.0. You will need to use the @dev tag explicitly.\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782551377/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782740930",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-782740930",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 782740930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4Mjc0MDkzMA==",
    "user": {
      "login": "chanhosuh",
      "id": 4645177,
      "node_id": "MDQ6VXNlcjQ2NDUxNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4645177?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chanhosuh",
      "html_url": "https://github.com/chanhosuh",
      "followers_url": "https://api.github.com/users/chanhosuh/followers",
      "following_url": "https://api.github.com/users/chanhosuh/following{/other_user}",
      "gists_url": "https://api.github.com/users/chanhosuh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chanhosuh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chanhosuh/subscriptions",
      "organizations_url": "https://api.github.com/users/chanhosuh/orgs",
      "repos_url": "https://api.github.com/users/chanhosuh/repos",
      "events_url": "https://api.github.com/users/chanhosuh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chanhosuh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-20T19:59:01Z",
    "updated_at": "2021-02-20T19:59:01Z",
    "author_association": "NONE",
    "body": "> We discussed this on the last weekly call and the point of contention was whether it's really an issue to be solved in the compiler itself. So far we think that we need to gather more feedback to be able to make a decision here (@franzihei).\r\n> \r\n\r\n@cameel thanks for re-opening this for discussion.  I do think this is a pain point for the community, so this is really appreciated.\r\n\r\n> There were opinions that this issue is relevant only when the user is using the compiler directly on the command line and that this is actually a pretty rare case. Most people are probably using IDEs or at least invoke the compiler indirectly, under the control of a tool like Truffle, Hardhat, Brownie, etc. [snipped...] Such a tool is actually in a better position to decide this because it can actually know if the file being compiled resides in the project or is a part of an external library installed by the user. The compiler currently does not make that distinction at all.\r\n> \r\n\r\nThis is a very good point.  I'm going to raise this with the Hardhat devs and see what they say.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782740930/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782821535",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-782821535",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 782821535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjgyMTUzNQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-21T08:46:38Z",
    "updated_at": "2021-02-21T08:46:38Z",
    "author_association": "MEMBER",
    "body": "Oh, the SPDX thing I have *long* felt should be disablable.  It is incredibly opinionated about how licencing works and not everyone agrees on it.  I *personally* think it is amazingly dumb to have license information (metadata) inside my source files.  I have a repository wide license file and I don't want my source files cluttered with that stuff.  On top of that it limits licenses to SPDX licenses, which is constraining for any kind of iteration on the licensing front.\r\n\r\nIf you want to have opinionated things, put them in a litter and not a compiler.  It is totally inappropriate for a compiler to be checking for that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782821535/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782821581",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-782821581",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 782821581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjgyMTU4MQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-21T08:47:01Z",
    "updated_at": "2021-02-21T08:47:01Z",
    "author_association": "MEMBER",
    "body": "Oh, the SPDX thing I have *long* felt should be disablable.  It is incredibly opinionated about how licencing works and not everyone agrees on it.  I *personally* think it is amazingly dumb to have license information (metadata) inside my source files.  I have a repository wide license file and I don't want my source files cluttered with that stuff.  On top of that it limits licenses to SPDX licenses, which is constraining for any kind of iteration on the licensing front.\r\n\r\nIf you want to have opinionated things, put them in a linter and not a compiler.  It is totally inappropriate for a compiler to be checking for that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/782821581/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/785294452",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-785294452",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 785294452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NTI5NDQ1Mg==",
    "user": {
      "login": "chuckb",
      "id": 239663,
      "node_id": "MDQ6VXNlcjIzOTY2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/239663?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chuckb",
      "html_url": "https://github.com/chuckb",
      "followers_url": "https://api.github.com/users/chuckb/followers",
      "following_url": "https://api.github.com/users/chuckb/following{/other_user}",
      "gists_url": "https://api.github.com/users/chuckb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chuckb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chuckb/subscriptions",
      "organizations_url": "https://api.github.com/users/chuckb/orgs",
      "repos_url": "https://api.github.com/users/chuckb/repos",
      "events_url": "https://api.github.com/users/chuckb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chuckb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-24T18:49:00Z",
    "updated_at": "2021-02-24T19:22:58Z",
    "author_association": "NONE",
    "body": "Every single compiler warning should be suppressible, by file, and by warning type, without changing source code, if at the discretion of the runner of said compiler, the warnings are acceptable or not necessary to review further.\r\n\r\nCase in point: OpenZeppelin 3.x contract with v0.7 of compiler, like so:\r\n```\r\n    @openzeppelin/contracts/access/Ownable.sol:26:5: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\r\n    constructor () internal {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\r\n```\r\n\r\nCan I grep the output before my CI tool complains? Sometimes. Depends on the toolchain, platform, etc.\r\n\r\nUsing truffle, npm, and a platform with sed installed, I do:\r\n```\r\n  \"scripts\": {\r\n    \"test\": \"truffle test | sed -e '/Warning: Visibility for constructor is ignored./,+2d'\"\r\n  }\r\n```\r\n\r\nGross huh?\r\n\r\nI am not sure what the utility function of warnings looks like over time, but I would guess y=e^(-x), x>=0.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/785294452/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/786047432",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-786047432",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 786047432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NjA0NzQzMg==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-25T16:53:35Z",
    "updated_at": "2021-02-25T16:53:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chuckb You can install a version specific for Solidity 0.7 that does not have this warning with `npm install @openzeppelin/contracts@3.4.0-solc-0.7`. Hopefully this special version will not be necessary for future releases of Solidity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/786047432/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/851410326",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-851410326",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 851410326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTQxMDMyNg==",
    "user": {
      "login": "MrChico",
      "id": 8930559,
      "node_id": "MDQ6VXNlcjg5MzA1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8930559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrChico",
      "html_url": "https://github.com/MrChico",
      "followers_url": "https://api.github.com/users/MrChico/followers",
      "following_url": "https://api.github.com/users/MrChico/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrChico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrChico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrChico/subscriptions",
      "organizations_url": "https://api.github.com/users/MrChico/orgs",
      "repos_url": "https://api.github.com/users/MrChico/repos",
      "events_url": "https://api.github.com/users/MrChico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrChico/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-31T11:02:51Z",
    "updated_at": "2021-05-31T11:02:51Z",
    "author_association": "MEMBER",
    "body": "Just want to chime in and say I am also interested in disabling/hiding certain warnings. Case in point\r\n```\r\nWarning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\r\n```\r\nare irrelevant for testing contracts that will never be deployed. \r\n\r\nBut without derailing the discussion to this specific example, I just want to emphasize the general point – being able to filter warnings for signal from the noise is highly useful, and different developers value warnings differently.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/851410326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/851418344",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-851418344",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 851418344,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTQxODM0NA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-31T11:16:09Z",
    "updated_at": "2021-05-31T11:16:09Z",
    "author_association": "MEMBER",
    "body": "> Case in point\r\n\r\n@MrChico We have a separate issue about the code limit: #10981. Maybe you could add some feedback there?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/851418344/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1241292118",
    "html_url": "https://github.com/ethereum/solidity/issues/2675#issuecomment-1241292118",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2675",
    "id": 1241292118,
    "node_id": "IC_kwDOAm_5kc5J_J1W",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-08T22:17:09Z",
    "updated_at": "2022-09-11T18:57:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've created a Hardhat plugin to ignore compiler warnings.\r\n\r\nhttps://github.com/frangio/hardhat-ignore-warnings",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1241292118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
