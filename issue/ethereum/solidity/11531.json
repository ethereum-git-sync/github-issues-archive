{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11531/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11531/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11531/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11531",
  "id": 920374722,
  "node_id": "MDU6SXNzdWU5MjAzNzQ3MjI=",
  "number": 11531,
  "title": "User-defined value types",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 33,
  "created_at": "2021-06-14T12:43:38Z",
  "updated_at": "2021-09-09T08:28:36Z",
  "closed_at": "2021-09-09T08:28:36Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Originally proposed by @maurelian \r\n\r\nIt should be possible to define a user-defined type that is identical to a provided value type (including operators, members, etc.), but cannot be implicitly converted to any other type, and can only be explicitly converted to and from the underlying value type.\r\n\r\nThis has the effect that arithmetic operations are impossible to perform across these types.\r\n\r\nExample (syntax under discussion):\r\n\r\n```\r\ntypedef DistanceInMeters uint;\r\ntypedef DistanceInInch uint;\r\ntypedef Price fixed128x10;\r\n\r\nDistanceInMeters distanceToDestination;\r\nPrice buyerPrice;\r\nPrice sellerPrice;\r\n```\r\n\r\nIn the above, you can do `buyerPrice - sellerPrice`, but you cannot do `buyerPrice * distanceToDestination`.\r\n\r\n",
  "closed_by": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11531/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11531/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/862242952",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-862242952",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 862242952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjI0Mjk1Mg==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-16T10:28:43Z",
    "updated_at": "2021-06-17T17:53:34Z",
    "author_association": "MEMBER",
    "body": "Currently, there is a hack to define user defined address types using empty interfaces. (Saw this in a discussion from eth security.)\r\n\r\n```solidity\r\ninterface MyAddress {}\r\n\r\nfunction f(address a) returns (address) {\r\n\tMyAddress myAddress = MyAddress(a);\r\n\treturn address(myAddress);\r\n}\r\n```\r\n\r\n----\r\n\r\nI think user defined types is a good idea. But I think the rules \"cannot be implicitly converted\" and \"automatically derives arithmetic operations\" are not consistent.\r\n\r\nTo take an example from Haskell, [type](https://wiki.haskell.org/Type#Type_and_newtype) is an alias and can be interchangeably used with the original type. In particular, implicit conversions and operators just work. Whereas [newtype](https://wiki.haskell.org/Newtype) creates a new type that has stricter type requirements and can't just be converted to the underlying type. To define operations on it, one has to explicitly declare it.\r\n\r\n<details>\r\n<summary>Example code from Haskell's user defined types</summary>\r\n\r\n```haskell\r\n-- Can be interchangeably used with Int\r\ntype MyInt = Int\r\n\r\nf :: Int -> Int\r\nf x = x + 1\r\n\r\n-- Implicit converstion: type checks\r\na :: MyInt\r\na = 5\r\n\r\n-- Addition and implicit conversion: type checks\r\nb :: MyInt\r\nb = f a\r\n\r\n-- Creates a new type, but implicit conversions are not possible\r\nnewtype MyNewInt = MyNewInt Int\r\n\r\n-- Implicit conversion doesn't type check\r\n-- c :: MyNewInt\r\n-- c = 5\r\n\r\nc :: MyNewInt\r\nc = MyNewInt 5\r\n\r\n-- Doesn't type check\r\n-- d :: Int\r\n-- d = f c\r\n\r\n-- Doesn't type check, since + is not defined\r\n-- d :: MyNewInt\r\n-- d = c + 5\r\n\r\nnewtype MyNewIntWithPlus = MyNewIntWithPlus Int\r\n\r\ninstance Num MyNewIntWithPlus where\r\n  MyNewIntWithPlus a + MyNewIntWithPlus b = MyNewIntWithPlus (a + b)\r\n  MyNewIntWithPlus _ * MyNewIntWithPlus _ = undefined\r\n  signum = undefined\r\n  abs = undefined\r\n  fromInteger = undefined\r\n  negate = undefined\r\n\r\nd :: MyNewIntWithPlus\r\nd = MyNewIntWithPlus 10\r\n\r\n-- Now addition type checks.\r\ne :: MyNewIntWithPlus\r\ne = d + d\r\n\r\nmain = undefined\r\n```\r\n</details>\r\n\r\n------\r\n\r\nI think we should have an explicit syntax that shows that the operators are derived, and by default, none of the operators should  be derived.\r\n\r\nThe syntax could look like\r\n\r\n```\r\nnewtype MyInt = uint256 deriving (+, -, *, ==);\r\nusing MyInt = uint256 inheriting (+, ==);\r\n```\r\n\r\n---\r\n\r\nAs a side comment, I think the operator `<` for `MyAddress` in the first example code should be disallowed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/862242952/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/862512577",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-862512577",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 862512577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjUxMjU3Nw==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-16T16:11:33Z",
    "updated_at": "2021-06-16T16:11:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for opening this for me @chriseth, I swear it was still on my todo list. :)\r\n\r\n> Currently, there is a hack to define user defined address types using empty interfaces. (Saw this in a discussion from eth security.)\r\n\r\nI think I might have started that conversation. The original context at Optimism is that we would like to differentiate between addresses on L1 and L2, and prevent them from being used interchangeably.\r\n\r\n```\r\ntypedef ethAddress address;\r\ntypedef ovmAddress address;\r\n\r\nfunction(ovmAddress oAddr, bytes data) {\r\n     oAddr.call(data);   // typeEror\r\n}\r\n```\r\n\r\nI also generally like the sound of what @hrkrshnn proposes for valid operators. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/862512577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/864887429",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-864887429",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 864887429,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDg4NzQyOQ==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-21T09:35:19Z",
    "updated_at": "2021-06-21T09:37:35Z",
    "author_association": "MEMBER",
    "body": "On second thought, I'm not sure if we should allow arithmetic operators for user defined types.\r\n\r\nThe main problem is whether inbuilt safemath should apply for such types, and if yes, should `unchecked` blocks do wrapping arithmetic?\r\n\r\nPerhaps the only operator that a user defined type should have is `==` and `!=`. (Even better would be making this explicit)\r\nI would be okay with just disallowing `==` as well. We currently don't have `==` for tuples either (see https://github.com/ethereum/solidity/issues/8919). Perhaps, we can think about defining operators on all such types, tuples and structs as a separate issue afterwards.\r\n\r\n\r\n<details>\r\n<summary>Example on how equality is handled in Haskell's newtype</summary>\r\n\r\n```haskell\r\nnewtype MyInt = MyInt Int\r\n\r\na :: MyInt\r\na = MyInt 10\r\n\r\na' :: MyInt\r\na' = MyInt 11\r\n\r\n-- Doesn't type check, since == is not defined\r\n-- No instance for (Eq MyInt) arising from a use of ‘==’\r\n-- b :: Bool\r\n-- b = a == a'\r\n\r\nnewtype MyIntWithEq = MyIntWithEq Int\r\n                    deriving(Eq)\r\n\r\nc :: MyIntWithEq\r\nc = MyIntWithEq 10\r\n\r\nc' :: MyIntWithEq\r\nc' = MyIntWithEq 20\r\n\r\nb :: Bool\r\nb = c == c'\r\n\r\nb' :: Bool\r\nb' = c /= c'\r\n\r\nmain = undefined\r\n```\r\n</details>\r\n\r\n-----\r\n \r\nA user can define functions to do arithmetic operations on it anyway, where the overflow behaviour is explicit.\r\n\r\n```solidity\r\nnewtype MyInt = uint256;\r\n\r\nfunction add(MyInt a, MyInt b) returns (Myint c) {\r\n   c = MyInt(uint256(a) + uint256(b));\r\n}\r\n\r\nfunction unchecked_add(MyInt a, Myint b) returns (Myint c) {\r\n  unchecked {\r\n    c = MyInt(uint256(a) + uint256(b));\r\n  }\r\n}",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/864887429/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/866809581",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-866809581",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 866809581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NjgwOTU4MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-23T12:54:03Z",
    "updated_at": "2021-06-23T12:54:03Z",
    "author_association": "MEMBER",
    "body": "If we want to explicitly list operators, I see this feature very much in line with the \"using A for x\" statement:\r\n\r\n```\r\ntype NewType = uint using (+, g, f, L);\r\n```\r\nwhich means that for\r\n```\r\nNewType a;\r\nNewType b;\r\n```\r\nyou can do\r\n```\r\na + b;\r\na.g();\r\na.f();\r\na.t(); // with t being a function of L\r\n```\r\n\r\nAlternatives for the syntax:\r\n```\r\ntype NewType = uint: +, -, f;\r\ntype NewType = uint with +, -, f;\r\ntype NewType: uint using (+, -, f);\r\ntype NewType: uint (+, -, f);\r\ntype NewType(uint) using +, -, f;\r\ntype NewType is uint using +, -, f;\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/866809581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/866810417",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-866810417",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 866810417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NjgxMDQxNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-23T12:55:14Z",
    "updated_at": "2021-06-23T12:55:14Z",
    "author_association": "MEMBER",
    "body": "@leonardoalt mentioned that he would like to see something like Rust's trait system in Solidity. I think we can extend the current notation to traits in the future.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/866810417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/866820052",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-866820052",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 866820052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NjgyMDA1Mg==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-23T13:08:06Z",
    "updated_at": "2021-06-23T13:37:37Z",
    "author_association": "MEMBER",
    "body": "> Alternatives for the syntax:\r\n\r\nHow about reusing the syntax for libraries?\r\n```solidity\r\ntype NewType = uint;\r\nusing {+, g, f, L} for NewType;\r\n```\r\nIt would also allow multiple libs to define stuff for the same type.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/866820052/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/867242139",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-867242139",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 867242139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzI0MjEzOQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-24T00:25:02Z",
    "updated_at": "2021-06-24T00:26:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Separating the `using` and `type` declarations as in the previous comment sounds like it would allow users of a type to define more arithmetic operations for it, breaking the encapsulation benefits. I may want to define a type and disallow addition by not deriving the `+` operator, and I wouldn't want users to be able to add it themselves. Though I guess they'll always be able to cast back to the original type... so it's not full encapsulation, but at least the casting makes it explicit that you're breaking out of the type rules.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/867242139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/867616324",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-867616324",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 867616324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzYxNjMyNA==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-24T12:59:29Z",
    "updated_at": "2021-06-24T18:20:01Z",
    "author_association": "MEMBER",
    "body": "About the using syntax:\r\n\r\n```solidity\r\ntype NewType = uint;\r\nusing {+, g, f, L} for NewType;\r\n```\r\n\r\nThe problem I have with this syntax is where is `+` coming from? We haven't defined a `+` with signature `(NewType, NewType) -> NewType`. (I'm assuming that in the above example, `g` and `f` are functions with signature `(NewType, ...) -> ...` and not `(uint, ...) -> ...`; And the binding to the latter signature should be a type error.)\r\n\r\nThe using syntax looks fine, if we want to bind a function with type `(NewType, ...) -> ...` to `NewType` and call it by `NewType(value).f(...)`, but if we want to copy an operator from the `uint` to `NewType`, it has to be done in the definition.\r\n\r\n----\r\n\r\nThe intuition for a syntax like \r\n\r\n```\r\ntype NewType = uint deriving (==);\r\n```\r\n\r\nwould be that there is a typeclass (as in Haskell) or a trait (as in rust) with the name `==`. And the language already implements an instance of `==` on `uint`. When a new type is constructed, we derive the implementation of the typeclass or trait from the base type.\r\n\r\nIt's slightly weird to have typeclass / traits with the name of the operator. In haskell and rust, `==` would be `Eq`. For `+`, it's `Additive` in haskell (or part of `Num`, which also includes `*`, `negate`, etc.) and `Add` in rust.\r\n\r\nIf we want to really go in this direction, we could consider defining proper typeclasses or traits with standard names, such as `Eq`, `Add` etc. And the following syntax would actually make perfect sense:\r\n\r\n```\r\ntype newType = uint deriving (Eq, Add);\r\n```\r\n\r\nThe keyword `derive` is also present in rust, which does exactly as above. See https://doc.rust-lang.org/rust-by-example/trait/derive.html",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/867616324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/871255848",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-871255848",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 871255848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTI1NTg0OA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-30T09:47:30Z",
    "updated_at": "2021-06-30T09:47:30Z",
    "author_association": "MEMBER",
    "body": "I see your point about `+` only being defined for `uint`, but I don't see why introducing a trait / typeclass would fix the issue. You would still need to have the exception that the compiler defines operators for you.\r\n\r\nAnother point about the syntax: I think we should not use `=` because it looks too much like a type alias. What about `type newType is uint;` or `type newType: uint;`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/871255848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/883492450",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-883492450",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 883492450,
    "node_id": "IC_kwDOAm_5kc40qQZi",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-20T15:37:32Z",
    "updated_at": "2021-07-20T15:37:32Z",
    "author_association": "MEMBER",
    "body": "As a reference: this was discussed earlier in #1100 (and #1013, though this one shifted to non-typedef discussions).\r\n\r\nI think one benefit now of user defined types could be that they show up as `internalType` in the ABI, allowing for more precise off-chain decoding/encoding/validation of calldata.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/883492450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/883598097",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-883598097",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 883598097,
    "node_id": "IC_kwDOAm_5kc40qqMR",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-20T18:17:57Z",
    "updated_at": "2021-07-20T18:17:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "The easiest solution (i.e. let's implement this now) is to disable operators and disable anything implicit.\r\n\r\nIf you really need your custom addition function `divMod(x, y)` to apply to a new integer type (which is exactly just `uint256` anyway) then you can rewrite the function.\r\n\r\nRequiring explicit casting is a huge safety feature. We can all name languages that use typecasting for safety, mine is Ada.\r\n\r\nProposal:\r\n\r\n```\r\ntype L1Address is address;\r\ntype L2Address is address;\r\nL1Address base = L1Address(msg.sender);\r\nbase = msg.sender; // ERROR\r\nL2Address rollup = L2Address(msg.sender);\r\nbase = rollup; // ERROR\r\n\r\ntype NFTBatchID is uint32;\r\nNFTBatchID batchId = 16; // ERROR\r\nbatchId = NFTBatchID(16);\r\nfunction getBatchFromToken(NFTBatchID batchID); // ABI is getBatchFromToken(uint32)\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/883598097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/886842222",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-886842222",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 886842222,
    "node_id": "IC_kwDOAm_5kc403CNu",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T16:17:29Z",
    "updated_at": "2021-07-26T16:17:29Z",
    "author_association": "MEMBER",
    "body": "Yep, I agree, let's do it without operators for now and check for feedback.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/886842222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/887320112",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-887320112",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 887320112,
    "node_id": "IC_kwDOAm_5kc40424w",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-27T08:31:02Z",
    "updated_at": "2021-07-27T08:31:31Z",
    "author_association": "MEMBER",
    "body": "> Yep, I agree, let's do it without operators for now and check for feedback.\r\n\r\nTo be clear, this would mean no operators, in particular no `==`, right?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/887320112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/887345308",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-887345308",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 887345308,
    "node_id": "IC_kwDOAm_5kc4049Cc",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-27T09:09:13Z",
    "updated_at": "2021-07-27T09:09:13Z",
    "author_association": "MEMBER",
    "body": "Yes, nothing at all.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/887345308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/892612081",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-892612081",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 892612081,
    "node_id": "IC_kwDOAm_5kc41NC3x",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-04T12:20:56Z",
    "updated_at": "2021-08-04T12:20:56Z",
    "author_association": "MEMBER",
    "body": "Decision: `type MyType is uint;` is the syntax. No operators, even `==`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/892612081/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/902629441",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-902629441",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 902629441,
    "node_id": "IC_kwDOAm_5kc41zQhB",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-20T11:33:33Z",
    "updated_at": "2021-08-20T11:33:33Z",
    "author_association": "MEMBER",
    "body": "I think it would be better to have ``type MyType is uint;`` introduce explicit conversion functions as members of ``MyType.`` rather than allowing normal explicit conversions from and to the underlying type.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/902629441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/903761539",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-903761539",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 903761539,
    "node_id": "IC_kwDOAm_5kc413k6D",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-23T13:20:03Z",
    "updated_at": "2021-08-23T13:20:03Z",
    "author_association": "MEMBER",
    "body": "> I think it would be better to have `type MyType is uint;` introduce explicit conversion functions as members of `MyType.` rather than allowing normal explicit conversions from and to the underlying type.\r\n\r\nJust to name a few reasons for this:\r\n- Those \"conversions\" are isomorphisms in the type system you will regularly need for composing generics, so it is important that these functions can be *named*, if we don't want to have boilerplate of functions calling a single explicit conversion everywhere.\r\n- Conversion is a special syntactic concept that has semantic meaning that can easily differ from plainly accessing a representation. Converting to ``uint`` for fixed points or floating points, etc., is *not* the same as retrieving the representation type. So explicit conversions are much closer to an operator than to a way to access representation types or construct abstract types.\r\n- While we can easily extend this system to allow *defining* conversion operators, there is no way to define other differing conversion functions or disallow conversions, if this is the sole atomic way to convert between these types.\r\n- Adding members of the newly defined type is not conflicting or breaking in any way, so there is little headache about *how* to do this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/903761539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908314655",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-908314655",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 908314655,
    "node_id": "IC_kwDOAm_5kc42I8gf",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-30T12:49:57Z",
    "updated_at": "2021-08-31T07:17:20Z",
    "author_association": "MEMBER",
    "body": "While I agree with most of what you say, I think it is important that code implementing functions / operators for user-defined value types is still concise. Otherwise, we could also tackle this problem together with a generic overhaul of the conversion system. The point about functions being nameable can be fixed by also providing such a conversion function on the type or just change it once we have generics.\r\n\r\nAre there any suggestions with regards to the syntax?\r\n\r\n```\r\nMyType.fromUnderlying(x);\r\nMyType.toUnderlying(x);\r\n```\r\n\r\n```\r\nMyType.construct(x);\r\nMyType.destruct(x);\r\n```\r\n\r\n```\r\nMyType.create(x);\r\nMyType.access(x);\r\n```\r\n\r\n```\r\nMyType.wrap(x);\r\nMyType.unwrap(x);\r\n```\r\n\r\nOr maybe this is a situation where it is OK to use abbreviations?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908314655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908508815",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-908508815",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 908508815,
    "node_id": "IC_kwDOAm_5kc42Jr6P",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-30T16:54:06Z",
    "updated_at": "2021-08-30T16:54:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "```sh\r\ntype BatchIdentifier is uint32;\r\n```\r\n\r\nI don't see why converting a `uint32` to/from a `BatchIdentifier` needs to be more complicated than converting a `uint32` to/from a `uint256`.\r\n\r\nTherefore, if `uint32 hi = 16; uint256(hi);` is acceptable then so should be `uint32 batch 15; BatchIdentifier(batch);`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908508815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908967008",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-908967008",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 908967008,
    "node_id": "IC_kwDOAm_5kc42Lbxg",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T07:17:00Z",
    "updated_at": "2021-08-31T07:17:00Z",
    "author_association": "MEMBER",
    "body": "> I don't see why converting a `uint32` to/from a `BatchIdentifier` needs to be more complicated than converting a `uint32` to/from a `uint256`.\r\n\r\nFor most cases, `uint256(x)` and `BatchIdentifier(y)` are sufficient, but there are some situations where this is sub-optimal. For example, if you introduce a fixed-point type\r\n\r\n```\r\ntype MyFixed is uint;\r\n```\r\n\r\nThen `MyFixed x = ...; uint y = uint(x);` could create the impression that `y` is the value of `x` rounded to an integer, which it is not.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908967008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908982206",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-908982206",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 908982206,
    "node_id": "IC_kwDOAm_5kc42Lfe-",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T07:41:48Z",
    "updated_at": "2021-08-31T07:41:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "This\r\n\r\n```\r\ntype NotAUint is uint;\r\n```\r\n\r\ncreates the impression the NotAUint is not a uint. We cannot stop that.\r\n\r\n---\r\n\r\nDid you mean this?\r\n\r\n```\r\ntype MyFixed is fixed;\r\n```\r\n\r\nThen in that case you should have:\r\n\r\n```\r\nMyFixed x = ...;\r\nuint y = uint(x); // COMPILER ERROR cannot convert from fixed to uint\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908982206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908993563",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-908993563",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 908993563,
    "node_id": "IC_kwDOAm_5kc42LiQb",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T07:59:20Z",
    "updated_at": "2021-08-31T07:59:20Z",
    "author_association": "MEMBER",
    "body": "> Did you mean this?\r\n> \r\n> ```\r\n> type MyFixed is fixed;\r\n> ```\r\n\r\nNo, I was talking about a user-defined fixed point type that is unrelated to the potentially built-in type `fixed`. The same example works if you imagine a user-defined floating point type `type MyFloat is uint;`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908993563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908994963",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-908994963",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 908994963,
    "node_id": "IC_kwDOAm_5kc42LimT",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T08:01:25Z",
    "updated_at": "2021-08-31T08:01:25Z",
    "author_association": "MEMBER",
    "body": "Essentially, the problem is that the whole concept of \"conversion\" should be handled more thoroughly: In many cases, there is not just one way to convert from one type to another and the conversion function should be named properly depending on what it does and not just that it converts. The functions `round(fixed) returns (uint)`, `truncate(fixed) returns (uint)` and `unwrap(fixed) returns (uint)` make it much clearer what happens than a generically named `convert(fixed) returns (uint)` or `uint(fixed)`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/908994963/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/909016625",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-909016625",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 909016625,
    "node_id": "IC_kwDOAm_5kc42Ln4x",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T08:26:31Z",
    "updated_at": "2021-08-31T08:26:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm still not sold.\r\n\r\nOn the one line you're telling me A `is` B. And then below you're telling me it's not sufficient to convert from A to B without further specifying how.\r\n\r\nI'm not going to quote Aristotle here, but that may be abusing the meaning of \"is\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/909016625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/909023024",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-909023024",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 909023024,
    "node_id": "IC_kwDOAm_5kc42Lpcw",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T08:34:17Z",
    "updated_at": "2021-08-31T08:34:17Z",
    "author_association": "MEMBER",
    "body": "> I'm still not sold.\r\n> \r\n> On the one line you're telling me A `is` B. And then below you're telling me it's not sufficient to convert from A to B without further specifying how.\r\n> \r\n> I'm not going to quote Aristotle here, but that may be abusing the meaning of \"is\".\r\n\r\nSure, we can also discuss using a different keyword than `is`, but I think this is unrelated to the problem that the conversion between `float` / `fixed` and the underlying `uint` type is always ambiguous and maybe issue comments is not the right place for such a very interactive discussion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/909023024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910208035",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-910208035",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 910208035,
    "node_id": "IC_kwDOAm_5kc42QKwj",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-01T11:49:32Z",
    "updated_at": "2021-09-01T11:50:54Z",
    "author_association": "MEMBER",
    "body": "``type MyType is uint;`` means that ``MyType`` is an *abstraction* of `uint`, not identical to it. If it were strictly identical, then it would have to be a mere alias and all operators would need to be inherited and ``MyType`` and `uint` would need to be substitutible everywhere (resp. implicitly convertible). That's clearly not what we want, so the `is` is clearly not a statement of identity (funnily that's exactly the flaw in Aristotle's conception of logic and language in general, but I won't go there :-)).\r\n\r\nI'd be fine with changing from `is` to anything else, but as far as I'm concerned we also don't have to.\r\n\r\nTechnically, what type definitions like this mean is to introduce a new abstract type that has a given representation type. That's why I'm also used to the explicit conversion functions to be called abstraction (or short `abs`) and representation (or short `rep`), but I'd concede that - while it's very precise - it may seem weird without being used to it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910208035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910374187",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-910374187",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 910374187,
    "node_id": "IC_kwDOAm_5kc42QzUr",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-01T15:04:22Z",
    "updated_at": "2021-09-01T15:04:22Z",
    "author_association": "MEMBER",
    "body": "> Decision: type MyType is uint; is the syntax. No operators, even ==.\r\n\r\nI'm still unsure about this. `type MyType(uint);` looked more natural to me, which is also what Rust uses for \"newtype\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910374187/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910401889",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-910401889",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 910401889,
    "node_id": "IC_kwDOAm_5kc42Q6Fh",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-01T15:34:35Z",
    "updated_at": "2021-09-01T15:34:35Z",
    "author_association": "MEMBER",
    "body": "Decision from design call: We do not allow any conversions, not even from or to the underlying type. This can be implemented by users using inline assembly. We might support it in the future.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910401889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910414095",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-910414095",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 910414095,
    "node_id": "IC_kwDOAm_5kc42Q9EP",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-01T15:48:23Z",
    "updated_at": "2021-09-01T15:49:02Z",
    "author_association": "MEMBER",
    "body": "> Decision from design call: We do not allow any conversions, not even from or to the underlying type. This can be implemented by users using inline assembly. We might support it in the future.\r\n\r\nWith the syntax `type MyInt is uint256;` it still suggests `uint256` is a very special underlying type here, but after the above decisions it just means that is the storage type and the type used in the selector calculation for the ABI.\r\n\r\nHow about making this *completely* user defined:\r\n```\r\ntype MyInt { storageType = uint256, signature = \"uint256\" };\r\n```\r\n\r\n(`signature` is optional and defaults to the signature of the `storageType`)\r\n\r\nThis borrows the \"call modifier\" syntax and the idea from #11819.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910414095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910458076",
    "html_url": "https://github.com/ethereum/solidity/issues/11531#issuecomment-910458076",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11531",
    "id": 910458076,
    "node_id": "IC_kwDOAm_5kc42RHzc",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-01T16:37:59Z",
    "updated_at": "2021-09-01T16:37:59Z",
    "author_association": "MEMBER",
    "body": "I think this could be very confusing if you use a different storage type than a signature. I would opt for going with `is` for now, and if there is the need to define a custom signature, we can still extend it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/910458076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
