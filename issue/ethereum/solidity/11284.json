{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11284",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11284/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11284/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11284/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11284",
  "id": 864113162,
  "node_id": "MDU6SXNzdWU4NjQxMTMxNjI=",
  "number": 11284,
  "title": "Conversions revamped",
  "user": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    },
    {
      "id": 4438488423,
      "node_id": "LA_kwDOAm_5kc8AAAABCI31Zw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have",
      "name": "must have",
      "color": "ffa12a",
      "default": false,
      "description": "Something we consider an essential part of Solidity 1.0."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-04-21T17:29:03Z",
  "updated_at": "2022-09-14T14:42:14Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Currently we support (an ever shrinking number of) implicit type conversions and some explicit ones. The explicit conversions mostly truncate/extend, and only a single one (integer to enum) is performing a check and panic.\r\n\r\nDuring #9170 we have endlessly debated whether converting from a larger bytes should truncate or throw a panic, and finally realised we may want to review how conversions work in general. It seems that we want to make in any way ambiguous conversions explicitly understandable.\r\n\r\nIn the past we discussed new casting/conversion syntax [here](https://gitter.im/ethereum/solidity-dev?at=5f63d5a3ce5bbc7ffdd03d46) and [here](https://gitter.im/ethereum/solidity-dev?at=6076e59381866c680c22168c):\r\n\r\n> - We could consider C++ism `cast<byte[]>(cast<byte[32]>(cast<uint256>(1234))`) to make it worse  (or use `convert<>`)\r\n> - And add copyof on top of it: `cast<byte[]>(copyof cast<byte[32]>(cast<uint256>(1234)))`\r\n>- `uint256(1234).as<byte[32]>().as<byte[]>()` may be a bit more readable :)\r\n> - I thought we had an issue proposing a syntax something like `cast<toType>(val)` instead of explicit conversions. I guess it is just more verbose so people would dislike it?\r\n> - But at least would probably be easier to read `cast<address payable>(..)` than `address payable(..)`.\r\n> - If we do have cast<> as an unchecked casting, then we could later consider adding convert<> which does checks.\r\n> - I wonder if we could use the cast syntax for multiple-step casting, i.e. `cast<uint128,int128,int16>(..uint256 input..)` or `cast<uint128 -> int128 -> int16>(..uin256 input..)` (similar to the mapping syntax)\r\n> - But the other option we briefly discussed is explicit casting works like static_cast/reinterpret_cast and we could introduce truncation/conversion helper on the types, i.e. `bytes32.truncateFrom(<dynamic bytes>)`.\r\n> -Instead of the multiple step casting I suppose there could be nicer helpers in the stdlib doing that?\r\n \r\nTo summarise, the following syntactical ideas were proposed:\r\n- `cast<to>(from)`\r\n- `convert<to>(from)`\r\n- `from.as<to>()`\r\n- `cast<intermediate1,intermediate2,final>()` (in case of a series of conversions)\r\n- `bytes32.truncateFrom(<dynamic bytes>)`\r\n- `truncate<..>()`\r\n- `extend<..>()`\r\n\r\nOn todays design call there seemed consensus to rather have explicitly understandable function names (such as `truncate` and `extend`), instead of a generic `cast`.\r\n\r\n(Moved from https://github.com/ethereum/solidity/issues/9170#issuecomment-824035912)",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11284/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11284/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/824241108",
    "html_url": "https://github.com/ethereum/solidity/issues/11284#issuecomment-824241108",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11284",
    "id": 824241108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDI0MTEwOA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-21T17:43:12Z",
    "updated_at": "2021-04-21T19:17:19Z",
    "author_association": "MEMBER",
    "body": "Following up the above summary, here's an actual suggestion to get us started. While I like the member functions `.as<>()`, `truncate<>()`,.. quite a bit, it may not be the best, unless we are happy to make those function names reserved. So my second option is the following:\r\n1. `as` for \"safe\" conversion (e.g. contract -> address, address -> payable address)\r\n- `as<address payable>(my_address)`\r\n- `as<address>(my_token)`\r\n2. `as` for unsafe conversions, where a runtime check is generated\r\n- `as<bytes32>(keccak256(\"\"))` -- this will work an return the empty hash\r\n- `as<bytes32>(bytes.concat(keccak256(\"\"), keccak256(\"\")))` -- this will panic\r\n- `as<bytes>(bytes32(hex\"1234\"))` -- this will work as bytes32 will always fit\r\n- `as<bytes8>(bytes6(hex\"1234\"))` -- this will work as bytes6 < bytes8 and will be zero padded on the right\r\n- `as<bytes8>(bytes10(hex\"1234\"))` -- this will panic\r\n3. `truncate` for (potentially) truncating conversions\r\n- `truncate<bytes32>(bytes.concat(keccak256(\"\"), keccak256(\"\")))` -- this will take the first 32 bytes of the input\r\n- `truncate<bytes8>(bytes10(hex\"1234\"))` -- this will take the first 8 bytes of the input\r\n4. `extend` for (potentially) extending conversions\r\n- `extend<bytes8>(bytes6(hex\"1234\"))` -- this will zero pad the input on the right\r\n\r\nIn this model we allow the old-style explicit conversion to act as \"constructors\", i.e. `bytes32(hex\"1234\")`.\r\n\r\n(The above is WIP and will need to updateed with conversions on numbers, fiexd points, etc. Could also decide to use something other than `as` for the runtime check version, i.e. `try<>` or `convert<>`)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/824241108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/826889616",
    "html_url": "https://github.com/ethereum/solidity/issues/11284#issuecomment-826889616",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11284",
    "id": 826889616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjg4OTYxNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-26T14:40:04Z",
    "updated_at": "2021-04-26T14:40:04Z",
    "author_association": "MEMBER",
    "body": "For me, `as` sounds like it would not trigger runtime errors.\r\nBy the way, for templates, the parser probably requires a syntax like `as.<bytes8>(...)`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/826889616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
