{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3145",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3145/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3145/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3145/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3145",
  "id": 269375327,
  "node_id": "MDU6SXNzdWUyNjkzNzUzMjc=",
  "number": 3145,
  "title": "grammar.txt: missing rule for \"ParameterList = '( VariableDeclaration Identifier ')'\"",
  "user": {
    "login": "walter-weinmann",
    "id": 1956149,
    "node_id": "MDQ6VXNlcjE5NTYxNDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1956149?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/walter-weinmann",
    "html_url": "https://github.com/walter-weinmann",
    "followers_url": "https://api.github.com/users/walter-weinmann/followers",
    "following_url": "https://api.github.com/users/walter-weinmann/following{/other_user}",
    "gists_url": "https://api.github.com/users/walter-weinmann/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/walter-weinmann/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/walter-weinmann/subscriptions",
    "organizations_url": "https://api.github.com/users/walter-weinmann/orgs",
    "repos_url": "https://api.github.com/users/walter-weinmann/repos",
    "events_url": "https://api.github.com/users/walter-weinmann/events{/privacy}",
    "received_events_url": "https://api.github.com/users/walter-weinmann/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 275027668,
      "node_id": "MDU6TGFiZWwyNzUwMjc2Njg=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/documentation%20:book:",
      "name": "documentation :book:",
      "color": "006b75",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2017-10-29T06:32:38Z",
  "updated_at": "2018-01-04T15:46:51Z",
  "closed_at": "2018-01-04T15:46:51Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "(I am currently trying to verify my Solidity LALR Parser project [syparse](https://github.com/walter-weinmann/syparse) with the examples in the [Solidity  documentation](https://github.com/ethereum/solidity/tree/develop/docs).)\r\n\r\nThe following example is taken from chapter `Libraries` in document `contracts.rst`:\r\n```\r\n    pragma solidity ^0.4.11;\r\n\r\n    library Set {\r\n      // We define a new struct datatype that will be used to\r\n      // hold its data in the calling contract.\r\n      struct Data { mapping(uint => bool) flags; }\r\n\r\n      // Note that the first parameter is of type \"storage\r\n      // reference\" and thus only its storage address and not\r\n      // its contents is passed as part of the call.  This is a\r\n      // special feature of library functions.  It is idiomatic\r\n      // to call the first parameter 'self', if the function can\r\n      // be seen as a method of that object.\r\n      function insert(Data storage self, uint value)\r\n          returns (bool)\r\n      {\r\n          if (self.flags[value])\r\n              return false; // already there\r\n          self.flags[value] = true;\r\n          return true;\r\n      }\r\n\r\n      function remove(Data storage self, uint value)\r\n          returns (bool)\r\n      {\r\n          if (!self.flags[value])\r\n              return false; // not there\r\n          self.flags[value] = false;\r\n          return true;\r\n      }\r\n\r\n      function contains(Data storage self, uint value)\r\n          returns (bool)\r\n      {\r\n          return self.flags[value];\r\n      }\r\n    }\r\n\r\n\r\n    contract C {\r\n        Set.Data knownValues;\r\n\r\n        function register(uint value) {\r\n            // The library functions can be called without a\r\n            // specific instance of the library, since the\r\n            // \"instance\" will be the current contract.\r\n            require(Set.insert(knownValues, value));\r\n        }\r\n        // In this contract, we can also directly access knownValues.flags, if we want.\r\n    }\r\n```\r\nThe existing grammar rule\r\n`ParameterList =        '(' ( TypeName            Identifier? (',' TypeName            Identifier?)* )? ')'`\r\ndoes not cover an expression like\r\n`ParameterList =        '(' ... ',' VariableDeclaration            Identifier ',' ... ')'`\r\nwhich would be necessary for\r\n`function insert(Data storage self, uint value)`.\r\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3145/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3145/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/340405750",
    "html_url": "https://github.com/ethereum/solidity/issues/3145#issuecomment-340405750",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3145",
    "id": 340405750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQwNTc1MA==",
    "user": {
      "login": "walter-weinmann",
      "id": 1956149,
      "node_id": "MDQ6VXNlcjE5NTYxNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1956149?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/walter-weinmann",
      "html_url": "https://github.com/walter-weinmann",
      "followers_url": "https://api.github.com/users/walter-weinmann/followers",
      "following_url": "https://api.github.com/users/walter-weinmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/walter-weinmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/walter-weinmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/walter-weinmann/subscriptions",
      "organizations_url": "https://api.github.com/users/walter-weinmann/orgs",
      "repos_url": "https://api.github.com/users/walter-weinmann/repos",
      "events_url": "https://api.github.com/users/walter-weinmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/walter-weinmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T10:36:33Z",
    "updated_at": "2017-10-30T10:36:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "The following example is taken from question `What is the ``memory`` keyword? What does it do?` in document `frequently-asked-questions.rst`:\r\n```\r\n        pragma solidity ^0.4.0;\r\n\r\n        contract C {\r\n            uint[] data1;\r\n            uint[] data2;\r\n\r\n            function appendOne() {\r\n                append(data1);\r\n            }\r\n\r\n            function appendTwo() {\r\n                append(data2);\r\n            }\r\n\r\n            function append(uint[] storage d) internal {\r\n                d.push(1);\r\n            }\r\n        }\r\n```\r\nThe existing grammar rule\r\n`ParameterList =        '(' ( TypeName            Identifier? (',' TypeName            Identifier?)* )? ')'`\r\ndoes not cover an expression like\r\n`function append(uint[] storage d) `.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/340405750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
