{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/6012/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/6012/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/6012/events",
  "html_url": "https://github.com/ethereum/solidity/issues/6012",
  "id": 410345321,
  "node_id": "MDU6SXNzdWU0MTAzNDUzMjE=",
  "number": 6012,
  "title": "abi.decode cannot decode `msg.data`",
  "user": {
    "login": "3esmit",
    "id": 224810,
    "node_id": "MDQ6VXNlcjIyNDgxMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/3esmit",
    "html_url": "https://github.com/3esmit",
    "followers_url": "https://api.github.com/users/3esmit/followers",
    "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
    "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
    "organizations_url": "https://api.github.com/users/3esmit/orgs",
    "repos_url": "https://api.github.com/users/3esmit/repos",
    "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
    "received_events_url": "https://api.github.com/users/3esmit/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2019-02-14T15:09:41Z",
  "updated_at": "2022-05-09T17:04:40Z",
  "closed_at": "2019-09-13T10:52:52Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I'm trying to use `abi.decode` to decode abi encoded calls. \r\n\r\nI noticed that this is not possible because `abi.decode` fails to shift out the \"msg.sig\", the first 4 bytes.\r\n\r\n```solidity\r\npragma solidity >=0.5.0 <0.6.0; \r\ncontract Foo {\r\n    function bar(uint256 _a, address _b) external pure returns (uint256 a, address b) {\r\n        (a,b) = abi.decode(msg.data, (uint256,address));\r\n    }\r\n}\r\n```\r\n\r\nThis is the result:\r\n```\r\ndecoded input | { \t\"uint256 _a\": \"1\", \t\"address _b\": \"0xDe4A88ef731cc55450C76E9307A64e94146006f7\" }\r\n-- | --\r\ndecoded output | { \t\"0\": \"uint256: a 43775121307266258428473763376100980315118985562653986292681922597120504758272\", \t\"1\": \"address: b 0x00000000de4a88EF731cc55450C76E9307A64E94\" }\r\n```\r\n\r\nI noticed that if I remove the 4 bytes from start and it decodes correctly:\r\n```solidity\r\npragma solidity >=0.5.0 <0.6.0; \r\ncontract Foo {\r\n    function bar(bytes calldata data) external pure returns (uint256 a, address b) {\r\n        (a,b) = abi.decode(data, (uint256,address));\r\n    }\r\n}\r\n```\r\n\r\nUsing data (with bytes4 msg.sig):\r\n```\r\ndecoded input | { \t\"bytes data\": \"0xa55176590000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de4a88ef731cc55450c76e9307a64e94146006f7\" }\r\n-- | --\r\ndecoded output | { \t\"0\": \"uint256: a 74775551433990177875228592555497145942085465184237639638388956040984682037248\", \t\"1\": \"address: b 0x00000000de4a88EF731cc55450C76E9307A64E94\" }\r\n```\r\n\r\nCropping out the msg.sig:\r\n```\r\ndecoded input | { \t\"bytes data\": \"0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de4a88ef731cc55450c76e9307a64e94146006f7\" }\r\n-- | --\r\ndecoded output | { \t\"0\": \"uint256: a 1\", \t\"1\": \"address: b 0xDe4A88ef731cc55450C76E9307A64e94146006f7\" }\r\n```\r\n\r\nI tried ` abi.decode(msg.data, (bytes4,uint256,address));` but then this line reverts.\r\nMaybe we need a `abi.decodePacked`?",
  "closed_by": {
    "login": "leonardoalt",
    "id": 504195,
    "node_id": "MDQ6VXNlcjUwNDE5NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/leonardoalt",
    "html_url": "https://github.com/leonardoalt",
    "followers_url": "https://api.github.com/users/leonardoalt/followers",
    "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
    "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
    "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
    "repos_url": "https://api.github.com/users/leonardoalt/repos",
    "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/6012/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/6012/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/463671613",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-463671613",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 463671613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzY3MTYxMw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-14T15:33:51Z",
    "updated_at": "2019-02-14T15:33:51Z",
    "author_association": "MEMBER",
    "body": "Yes, ``abi.decode(msg.data, (bytes4,uint256));`` will not only skip the first 4 bytes, but assume that the ``bytes4`` part is padded to 32 bytes - that's why it reverts due to the payload being too small.\r\nThis is a known limitation (although I don't think it was tracked on github before, so thanks for reporting!) and should definitely be fixed, but I'm not sure about the current plans (@chriseth, @axic ?). I'll queue the issue for discussion for the upcoming releases.\r\n\r\nPossible solutions include indeed ``abi.decodePacked`` or a flag for ``abi.decode`` or ``abi.decodeWithoutSignature``, another field of ``msg`` containing the payload without signature, being able to offset a calldata array to skip the first 4 bytes (like ``msg.data + 4``), etc. (I'm not aware of any decision yet myself).\r\nI think it'd be best not to expose a dedicated ``abi.*`` function just for this. I'm not sure whether \"pointer arithmetic\" on references is an extremely good or a terrible idea right now :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/463671613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/463875513",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-463875513",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 463875513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mzg3NTUxMw==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-15T01:49:30Z",
    "updated_at": "2019-02-15T01:49:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "So I would expect some way more convenient to decode this ABI calldata.\r\n\r\nwhat about `abi.decodeCall(data, expectedSig, types)` where the first 4 bytes must match the expectedSig? \r\nSuch as `abi.decodeCall(data, bytes4(keccak256(\"bar(uint256,address)\")), (uint256,address))`   \r\nMy use case is not with msg.data, but it decodes that type of abi.\r\n\r\nOr perhaps `abi.decodeCall(data, Foo.bar(uint256,address))`, so it would do the same as above, but using the Contract Type and looking for the sig/params in the Type ? \r\n\r\nI am using \"approveAndCall\" of MiniMeToken.\r\n\r\nits called like this in the js:\r\n```js\r\nconst buyABI = StickerMarket.methods.buyToken(packId, packBuyer).encodeABI();\r\nconst buySend = await MiniMeToken.methods.approveAndCall(StickerMarket.address, price, buyABI).send();\r\n```\r\n\r\nThis is the solution I came with:\r\n\r\n```solidity\r\ncontract StickerMarket {\r\n//(...)\r\n   /**\r\n     * @notice MiniMeToken ApproveAndCallFallBack forwarder for registerPack and buyToken\r\n     * @param _from account calling \"approve and buy\" \r\n     * @param _token must be exactly SNT contract\r\n     * @param _data abi encoded call \r\n     */\r\n    function receiveApproval(\r\n        address _from,\r\n        uint256,\r\n        address _token,\r\n        bytes calldata _data\r\n    ) \r\n        external \r\n    {\r\n        require(_token == address(snt), \"Bad token\");\r\n        require(_token == address(msg.sender), \"Bad call\");\r\n        bytes4 sig = abiDecodeSig(_data); //can be replaced by abi.decode(_data, (bytes4)); \r\n        bytes memory cdata = slice(_data,4,_data.length-4);\r\n        if(sig == bytes4(keccak256(\"buyToken(uint256,address)\"))){\r\n            require(cdata.length == 64, \"Bad data length\");\r\n            (uint256 packId, address owner) = abi.decode(cdata, (uint256, address));\r\n            buy(_from, packId, owner);\r\n        } else if(sig == bytes4(keccak256(\"registerPack(uint256,uint256,bytes4[],address,bytes)\"))) {\r\n            require(cdata.length >= 156, \"Bad data length\");\r\n            (uint256 _price, uint256 _donate, bytes4[] memory _category, address _owner, bytes memory _contenthash) = abi.decode(cdata, (uint256,uint256,bytes4[],address,bytes));\r\n            register(_from, _category, _owner, _price, _donate, _contenthash);\r\n        } else {\r\n            revert(\"Bad call\");\r\n        }\r\n    }\r\n//(...)\r\n    function abiDecodeSig(bytes memory _data) private pure returns(bytes4 sig){\r\n        assembly {\r\n            sig := mload(add(_data, add(0x20, 0)))\r\n        }\r\n    }\r\n\r\n    function slice(bytes memory _bytes, uint _start, uint _length) private pure returns (bytes memory) {\r\n        require(_bytes.length >= (_start + _length));\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n                // Get a location of some free memory and store it in tempBytes as\r\n                // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n                // The first word of the slice result is potentially a partial\r\n                // word read from the original array. To read it, we calculate\r\n                // the length of that partial word and start copying that many\r\n                // bytes into the array. The first word we copy will start with\r\n                // data we don't care about, but the last `lengthmod` bytes will\r\n                // land at the beginning of the contents of the new array. When\r\n                // we're done copying, we overwrite the full first word with\r\n                // the actual length of the slice.\r\n                let lengthmod := and(_length, 31)\r\n\r\n                // The multiplication in the next line is necessary\r\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                // the following copy loop was copying the origin's length\r\n                // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                    // The multiplication in the next line has the same exact purpose\r\n                    // as the one above.\r\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n                //update free-memory pointer\r\n                //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n//(...)\r\n}\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/463875513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/463875812",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-463875812",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 463875812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mzg3NTgxMg==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-15T01:51:06Z",
    "updated_at": "2019-02-15T01:51:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "In another contract I've written, I did like this to decode the abi of call:\r\n \r\n```solidity\r\n\r\n    /**\r\n     * @dev Decodes abi encoded data with selector for \"register(bytes32,address,bytes32,bytes32)\".\r\n     * @param _data Abi encoded data.\r\n     * @return Decoded registry call.\r\n     */\r\n    function abiDecodeRegister(\r\n        bytes _data\r\n    ) \r\n        private \r\n        pure \r\n        returns(\r\n            bytes4 sig,\r\n            bytes32 label,\r\n            address account,\r\n            bytes32 pubkeyA,\r\n            bytes32 pubkeyB\r\n        )\r\n    {\r\n        assembly {\r\n            sig := mload(add(_data, add(0x20, 0)))\r\n            label := mload(add(_data, 36))\r\n            account := mload(add(_data, 68))\r\n            pubkeyA := mload(add(_data, 100))\r\n            pubkeyB := mload(add(_data, 132))\r\n        }\r\n}\r\n``` ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/463875812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/464651245",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-464651245",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 464651245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDY1MTI0NQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-18T09:19:36Z",
    "updated_at": "2019-02-18T09:19:36Z",
    "author_association": "MEMBER",
    "body": "The purpose of `abi.decode` is ABI decoding. `msg.data` is not ABI encoded, so it cannot be used there.\r\n\r\nI think a single call to `calldatacopy` is a good way to solve this problem. I think introducing a new member of `msg` that represents only the post-signature part might be another solution.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/464651245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/464699895",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-464699895",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 464699895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDY5OTg5NQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-18T11:39:50Z",
    "updated_at": "2019-02-18T11:39:50Z",
    "author_association": "MEMBER",
    "body": "@chriseth What about subranges for arrays? Like ``msg.data.subrange(4,-1)`` or something like that? That would be the most general solution and would be possible if we keep the array length on the stack anyways...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/464699895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/464740900",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-464740900",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 464740900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDc0MDkwMA==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-18T13:58:45Z",
    "updated_at": "2019-02-18T13:58:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can we have a method for decoding msg.data. \r\nWhat is the coding of msg.data called? I mean the \"4bytes\" + data. \r\nIt is very useful for approveAndCall pattern I have to deal with to make MiniMeToken, which uses this function with calldata embedded. \r\nI see some ways around this, like a self call using that parameters, but this seems less \"human readable\" then processing it inside receivedApproval method.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/464740900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/531192464",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-531192464",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 531192464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTE5MjQ2NA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-13T10:52:48Z",
    "updated_at": "2019-09-13T10:52:48Z",
    "author_association": "MEMBER",
    "body": "Fixed by https://github.com/ethereum/solidity/pull/7340",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/531192464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/612031974",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-612031974",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 612031974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjAzMTk3NA==",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-10T13:37:42Z",
    "updated_at": "2020-04-10T13:37:42Z",
    "author_association": "NONE",
    "body": "Found curious ways to avoid this issue, just prepend `bytes28(0)` to parse selector as `bytes32`:\r\n```\r\nabi.decode(\r\n    abi.encodePacked(bytes28(0), msg.data),\r\n    (bytes32,address,uint256)\r\n);\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/612031974/reactions",
      "total_count": 18,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/783473161",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-783473161",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 783473161,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MzQ3MzE2MQ==",
    "user": {
      "login": "cleanunicorn",
      "id": 547012,
      "node_id": "MDQ6VXNlcjU0NzAxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/547012?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cleanunicorn",
      "html_url": "https://github.com/cleanunicorn",
      "followers_url": "https://api.github.com/users/cleanunicorn/followers",
      "following_url": "https://api.github.com/users/cleanunicorn/following{/other_user}",
      "gists_url": "https://api.github.com/users/cleanunicorn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cleanunicorn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cleanunicorn/subscriptions",
      "organizations_url": "https://api.github.com/users/cleanunicorn/orgs",
      "repos_url": "https://api.github.com/users/cleanunicorn/repos",
      "events_url": "https://api.github.com/users/cleanunicorn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cleanunicorn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-22T15:53:15Z",
    "updated_at": "2021-02-22T15:53:15Z",
    "author_association": "NONE",
    "body": "@k06a I think it's important to note that this doesn't work in all cases.\r\n\r\nIf you are trying to decode a bytes array it will not work because the encoded `bytes` array first contains where the bytes array is located at. Because you added a few bytes at the beginning, you're messing with the real address of the pointer where the `bytes` array starts\r\n\r\nDoing something like this will not work for\r\n\r\n```\r\nabi.decode(\r\n    abi.encodePacked(bytes28(0), msg.data),\r\n    (bytes32,bytes,uint256)\r\n);\r\n```\r\n\r\nThe appended 28 bytes push the real address of the bytes pointer.\r\n\r\nThere might be some other problems in there, not sure yet, still running some tests.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/783473161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1114104916",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-1114104916",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 1114104916,
    "node_id": "IC_kwDOAm_5kc5CZ-RU",
    "user": {
      "login": "iamianM",
      "id": 10800023,
      "node_id": "MDQ6VXNlcjEwODAwMDIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/10800023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iamianM",
      "html_url": "https://github.com/iamianM",
      "followers_url": "https://api.github.com/users/iamianM/followers",
      "following_url": "https://api.github.com/users/iamianM/following{/other_user}",
      "gists_url": "https://api.github.com/users/iamianM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iamianM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iamianM/subscriptions",
      "organizations_url": "https://api.github.com/users/iamianM/orgs",
      "repos_url": "https://api.github.com/users/iamianM/repos",
      "events_url": "https://api.github.com/users/iamianM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iamianM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-01T02:15:11Z",
    "updated_at": "2022-05-01T02:15:11Z",
    "author_association": "NONE",
    "body": "> Found curious ways to avoid this issue, just prepend `bytes28(0)` to parse selector as `bytes32`:\r\n> \r\n> ```\r\n> abi.decode(\r\n>     abi.encodePacked(bytes28(0), msg.data),\r\n>     (bytes32,address,uint256)\r\n> );\r\n> ```\r\n\r\nThis doesn't seem to work anymore. Have you found another solution? I'm getting the transaction reverted.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1114104916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1116340290",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-1116340290",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 1116340290,
    "node_id": "IC_kwDOAm_5kc5CigBC",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-03T17:07:52Z",
    "updated_at": "2022-05-03T17:07:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chriseth Is this fixed? I think it was automatically closed by mistake, can you reopen it and resume the discussion?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1116340290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1116628009",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-1116628009",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 1116628009,
    "node_id": "IC_kwDOAm_5kc5CjmQp",
    "user": {
      "login": "VforVanana",
      "id": 103070472,
      "node_id": "U_kgDOBiS7CA",
      "avatar_url": "https://avatars.githubusercontent.com/u/103070472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VforVanana",
      "html_url": "https://github.com/VforVanana",
      "followers_url": "https://api.github.com/users/VforVanana/followers",
      "following_url": "https://api.github.com/users/VforVanana/following{/other_user}",
      "gists_url": "https://api.github.com/users/VforVanana/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VforVanana/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VforVanana/subscriptions",
      "organizations_url": "https://api.github.com/users/VforVanana/orgs",
      "repos_url": "https://api.github.com/users/VforVanana/repos",
      "events_url": "https://api.github.com/users/VforVanana/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VforVanana/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-03T20:51:10Z",
    "updated_at": "2022-05-03T20:51:47Z",
    "author_association": "NONE",
    "body": "This is not supposed to be fixed, because it is not an issue: msg.data is not abi encoded (only what comes after the function selector is). You can use array slices for this.\r\n\r\n```\r\nabi.decode(msg.data[4:], (...));\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1116628009/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1121353392",
    "html_url": "https://github.com/ethereum/solidity/issues/6012#issuecomment-1121353392",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6012",
    "id": 1121353392,
    "node_id": "IC_kwDOAm_5kc5C1n6w",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-09T17:04:39Z",
    "updated_at": "2022-05-09T17:04:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is not supposed to be fixed, because it is not an issue: msg.data is not abi encoded (only what comes after the function selector is). You can use array slices for this.\r\n> \r\n> ```\r\n> abi.decode(msg.data[4:], (...));\r\n> ```\r\n\r\nThanks, I think that this workaround is good enough. When this issue was created, this was not possible. As this is now possible, I accept the issue as closed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1121353392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
