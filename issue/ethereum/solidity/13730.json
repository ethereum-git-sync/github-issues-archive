{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13730",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13730/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13730/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13730/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13730",
  "id": 1457856019,
  "node_id": "I_kwDOAm_5kc5W5R4T",
  "number": 13730,
  "title": "Data locations should be tied to types, not variable declarations.",
  "user": {
    "login": "k06a",
    "id": 702124,
    "node_id": "MDQ6VXNlcjcwMjEyNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/k06a",
    "html_url": "https://github.com/k06a",
    "followers_url": "https://api.github.com/users/k06a/followers",
    "following_url": "https://api.github.com/users/k06a/following{/other_user}",
    "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
    "organizations_url": "https://api.github.com/users/k06a/orgs",
    "repos_url": "https://api.github.com/users/k06a/repos",
    "events_url": "https://api.github.com/users/k06a/events{/privacy}",
    "received_events_url": "https://api.github.com/users/k06a/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1012614240,
      "node_id": "MDU6TGFiZWwxMDEyNjE0MjQw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/challenging%20difficulty",
      "name": "challenging difficulty",
      "color": "c300d8",
      "default": false,
      "description": ""
    },
    {
      "id": 4437999539,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZ_sw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20effort",
      "name": "high effort",
      "color": "ff54f4",
      "default": false,
      "description": "A lot to implement but still doable by a single person. The task is large or difficult."
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    },
    {
      "id": 4806670945,
      "node_id": "LA_kwDOAm_5kc8AAAABHn_6YQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/roadmap",
      "name": "roadmap",
      "color": "15B732",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-11-21T12:23:18Z",
  "updated_at": "2023-02-06T15:32:36Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nSolidity could allow to have `storage` references in `memory` structures or even `memory` arrays.\r\n\r\n## Motivation\r\n\r\nSometimes it is handy to have memory structure with some storage refs. Now we can use this trick, uncomfortable but works:\r\n```solidity\r\ntype DataPtr is uint256;\r\n\r\nfunction get(DataPtr ptr) internal pure returns(Data storage data) {\r\n    assembly {\r\n        data.slot := ptr\r\n    }\r\n}\r\n```\r\n\r\n## Specification\r\n\r\nIt would be convenient to have `storage` refs in `memory` struct by allowing following syntax:\r\n\r\n```solidity\r\nstruct Data {\r\n    // ...\r\n}\r\n\r\nstruct Object {\r\n    Data storage data; // <- allow storage keyword here\r\n    bytes32 context;\r\n}\r\n```\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13730/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13730/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1330830576",
    "html_url": "https://github.com/ethereum/solidity/issues/13730#issuecomment-1330830576",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13730",
    "id": 1330830576,
    "node_id": "IC_kwDOAm_5kc5PUtzw",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T15:30:48Z",
    "updated_at": "2022-11-29T15:30:48Z",
    "author_association": "MEMBER",
    "body": "Yes, we plan on associating data locations with the type in the future, not with the variable declaration (which is currently the case). The same goes for calldata references in memory. Just the nonsensical combinations like memory references in storage should remain invalid. Not entirely sure we have an issue for that yet, though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1330830576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1331117634",
    "html_url": "https://github.com/ethereum/solidity/issues/13730#issuecomment-1331117634",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13730",
    "id": 1331117634,
    "node_id": "IC_kwDOAm_5kc5PVz5C",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T18:33:54Z",
    "updated_at": "2022-11-29T18:33:54Z",
    "author_association": "NONE",
    "body": "@ekpyron glad to hear that this kind of functionality was already planned",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1331117634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1331173072",
    "html_url": "https://github.com/ethereum/solidity/issues/13730#issuecomment-1331173072",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13730",
    "id": 1331173072,
    "node_id": "IC_kwDOAm_5kc5PWBbQ",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T19:15:10Z",
    "updated_at": "2022-11-29T19:18:06Z",
    "author_association": "MEMBER",
    "body": "As for some more implementation details on this: for nested reference types, the outermost data location should become the implicit default data location for the inner types, so e.g. ``uint[][] memory x;`` would be short for ``uint[] memory [] memory x;`` (while after solving this issue we'll also have ``uint[] calldata [] memory x;``). Similarly, for struct members the default, non-mentioned data location means inheriting the location from the struct itself. On the other hand variable declarations of variables of reference type will still have to specify the outermost data location explicitly. This way we should be able to pull this of in a non-breaking backwards compatible way.\r\n\r\nFurthermore, in the longer term, this will be a prerequisite for a generics-ready type system, i.e. it's related to https://github.com/ethereum/solidity/issues/13725 and https://github.com/ethereum/solidity/issues/869",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1331173072/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
