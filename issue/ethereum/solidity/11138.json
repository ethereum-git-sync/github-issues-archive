{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11138",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11138/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11138/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11138/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11138",
  "id": 838069597,
  "node_id": "MDU6SXNzdWU4MzgwNjk1OTc=",
  "number": 11138,
  "title": "Restricted import system with named roots (path spec v2)",
  "user": {
    "login": "cameel",
    "id": 137030,
    "node_id": "MDQ6VXNlcjEzNzAzMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cameel",
    "html_url": "https://github.com/cameel",
    "followers_url": "https://api.github.com/users/cameel/followers",
    "following_url": "https://api.github.com/users/cameel/following{/other_user}",
    "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
    "organizations_url": "https://api.github.com/users/cameel/orgs",
    "repos_url": "https://api.github.com/users/cameel/repos",
    "events_url": "https://api.github.com/users/cameel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cameel/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 467898404,
      "node_id": "MDU6TGFiZWw0Njc4OTg0MDQ=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/breaking%20change%20:warning:",
      "name": "breaking change :warning:",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "cameel",
    "id": 137030,
    "node_id": "MDQ6VXNlcjEzNzAzMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cameel",
    "html_url": "https://github.com/cameel",
    "followers_url": "https://api.github.com/users/cameel/followers",
    "following_url": "https://api.github.com/users/cameel/following{/other_user}",
    "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
    "organizations_url": "https://api.github.com/users/cameel/orgs",
    "repos_url": "https://api.github.com/users/cameel/repos",
    "events_url": "https://api.github.com/users/cameel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cameel/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2021-03-22T20:09:30Z",
  "updated_at": "2021-05-19T03:00:13Z",
  "closed_at": "2021-05-19T03:00:12Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Related to #11105 and #9353.\r\n\r\n## Abstract / Motivation\r\nThis proposal changes the way paths in import statements, on the CLI and in Standard JSON are handled by the compiler and translated into internal source unit IDs.\r\n\r\nThe goal is to make imports more intuitive by directly exposing user to the way compiler identifies files internally. The current system hides the abstraction that happens between the actual filesystem and compiler's virtual filesystem and makes users expect import paths to behave like filesystem paths even though they work differently.\r\n\r\nThe change is meant to preserve a forward-compatible subset of the old syntax to make it possible to have the same files compile with both old and new compiler by only changing the remappings and compiler options.\r\n\r\nThe syntax for named roots intentionally follows the established convention of using `@` placeholders in imports.\r\n\r\nTo avoid changing the meaning of existing syntax in a confusing way relative imports of the form `import \"project/contract.sol\";` are disallowed rather than made equivalent to `import \"./project/contract.sol\";` even though having both work the same way would be quite intiuitive.\r\n\r\n### Examples\r\n- Many cases of users being confused by the current system (including me :)) can be found in the bug tracker: #9346, #2266, #9790, #6487, #4914, #11038, https://gitter.im/ethereum/solidity?at=60521c4883533831b4e736eb.\r\n- The path in `import \"/project/contract.sol\";` looks like an absolute path and indeed will load `/project/contract.sol` in the simplest case. It is however relative to `--base-path`, just like `import \"project/contract.sol\";`.\r\n- `import \"./contract.sol\";` is relative to the current source file while `import \"contract.sol\";` is relative to the base path (or current working directory if base path is not set). This distinction is not obvious since in the shell both paths are equivalent and lead to the same file.\r\n- Paths are not normalized which means that `project/contract.sol` and `project//contract.sol` are seen as two completely different files (and actually can be different files when the source is provided via Standard JSON) but cause the same file to be loaded from the filesystem. The resulting errors are confusing if the user is not aware of how the compiler decides whether files are distinct or not.\r\n- Relative paths starting with `../` or `./` are normalized, but only partially. If `../project//contract.sol` is imported from `/work//contracts/../token.sol`, the path resolves into ``/work//contracts/contract.sol``. Note `..` being treated as an actual directory and `//` in one part not being replaced with `/`.\r\n- The way a file is referenced on the command line affects whether it matches an import. For example `solc contract.sol` will be seen by the compiler as the same as `import \"contract.sol\";` but if we go to the parent directory and compile it as `solc dir/contract.sol` it will be seen as a different file and compiled twice.\r\n    - What's worse, it affects the metadata - both cases produce different bytecode because different paths end up in the metadata - even though the files are identical and still reside in the same directories.\r\n- When used as a target of a remapping, `../` no longer works as relative to the source file. It's now relative to the current working directory because the remapping happens after the relative paths are resolved.\r\n\r\nThere are more examples listed in #11036. While they were originally reported as bugs, ultimately most of them are actually just unintuitive side-effects of the current design that mostly show up in corner cases.\r\n\r\n## Specification\r\n### Overview\r\nPaths given in import statements, on the command line and in Standard JSON are used for two purposes:\r\n- to find and load the source code into compiler's virtual filesystem,\r\n- to generate a unique source unit ID that determines whether two paths actually refer to the same source unit.\r\n\r\nA source unit ID consists of a named or unnamed root and a source path. E.g. `@openzeppelin/utils/math/Math.sol` or `@/contracts/token.sol`.\r\n\r\nThere are several ways files can get into the virtual filesystem. The most important one is an import statement. Paths in import statements can be specified in three ways:\r\n1. **Direct import**: specifies the root and source path explicitly: `@openzeppelin/utils/math/Math.sol`.\r\n2. **Relative import**: specifies only a part of the source path, relative to the source ID of the importing file: `./math/Math.sol` is equivalent to `@openzeppelin/utils/math/Math.sol` when imported from `@openzeppelin/utils/Arrays.sol`.\r\n3. **Remote import**: uses an URL in place of the root: `https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/math/Math.sol`.\r\n\r\nFor a remote import to be valid, user needs to assign a named root to a matching prefix (on the CLI or in Standard JSON). For example `https://github.com/OpenZeppelin/openzeppelin-contracts/contracts=@openzeppelin`. After the remapping, the path is processed as if it were a direct import. It's also possible to remap one named root to another (e.g. `@openzeppelin=@oz`). Every remapping to a named root becames a part of contract metadata because the mapping happens between the import path and the source unit ID and changing it may affect the result of the compilation even if the source stays they same.\r\n\r\nIn typical usage named roots represent libraries or independent submodules of your project. The main project itself is represented just by `@`. `@` is special in that it can represent different directories, depending on where it is used. When used in a file located under some named root it represents that root. This way, when writing a library you can safely refer to its root just as `@` (i.e. `import \"@/utils/math/Math.sol\";`). A standalone project using your library can refer to library files via a named root (`import \"@openzeppelin/utils/math/Math.sol\";`) and use `@` for its own files without a conflict. The substitution happens when import path is translated into a source unit ID - in the virtual filesystem the source IDs of library files always contain the full named root.\r\n\r\nTo be able to locate the file and load it the compiler passes its source unit ID to the source loader. The loader determines how roots translate to specific locations. In case of the command-line compiler, locations must be existing directories. All named roots must be explicitly mapped for a contract to be compilable. The unnamed root is by default mapped to compiler's working directory but can also be explicitly remapped.\r\n\r\n```bash\r\nsolc ../contracts/contract.sol @openzeppelin=node_modules/openzeppelin/contracts/ @=../contracts/\r\n```\r\n\r\nFiles on the command line can be specified in two ways:\r\n1. As filesystem paths: these are platform-specific and can be relative to the current working directory. E.g. `../contracts/contract.sol` or `C:\\project\\contracts\\contract.sol`.\r\n2. As source unit IDs: instead of specifying the path directly you specify a source unit ID like `@openzeppelin/utils/math/Math.sol` and have the compiler resolve it by passing it to the source loader.\r\n\r\nWhen supplying files using Standard JSON, you always specify source IDs yourself. These IDs must of course contain a named or unnamed root. E.g. `math/Math.sol` is not a valid source unit ID.\r\n\r\nInstead of supplying the source as a part of the JSON file (via the `content` key) you can specify its location (via the `urls` key). It can be a path or an URL and whether it can be successfully resolved depends on the compiler interface you use. The command-line interface can only resolve filesystem paths and source unit IDs. The JavaScript interface can also handle URLs or even arbitrary identifiers - it's all up to the user-defined callback.\r\n\r\nMany details in the above description were intentionally omitted to keep it concise. Additional sections below clarify finer points of the new system.\r\n\r\n### Normalization\r\nSource unit IDs used internally are always in a normalized form:\r\n- Root name can contain only letters, numbers and maybe some safe special characters like `_` and `-`.\r\n    - It starts with `@` and ends with `/`.\r\n    - `@` and `:` are not allowed inside root name.\r\n- Source path:\r\n    - is case-sensitive and in UNIX format regardless of the underlying platform,\r\n    - cannot start with `.` or contain any `./` or `../` segments,\r\n    - does not contain sequences of multiple slashes, trailing slashes, leading/trailing whitespace.\r\n\r\nSource IDs specified in Standard JSON must be already normalized. In other contexts compiler may automatically apply some normalization rules:\r\n- Relative imports start with `./`, which is stripped by the compiler.\r\n- The part of the import that is the prefix is never normalized. Source path (the part left after stripping the prefix) must be normalized like in any other path.\r\n- Filesystem paths given on the command line undergo the usual normalization expected from shell commands:\r\n    - multiple slashes are squashed into one.\r\n    - relative paths are relative to the current working directory and converted into absolute ones.\r\n    - `./` segments are stripped,\r\n    - `../` segments are collapsed.\r\n    - The path is also converted from a platform-specific format into the UNIX format before it is used to construct source unit ID.\r\n- Source unit IDs given on the command line must be already normalized.\r\n- Filesystem paths and source unit IDs given in `urls` in standard JSON behave just like the ones specified on the command line (though they are never used to form source unit IDs so the only thing that matters is which file they resolve to).\r\n\r\n### `@` escaping\r\nAn escaping mechanism is needed to discern named roots from paths starting with `@` character in contexts where both are allowed. For that purpose a leading `@@` is always interpreted as a single `@` and causes the following value not to be seen as a root.\r\n\r\n### Relative imports\r\n- Relative imports work by taking the source unit ID of the importing module as a base. Everything after the last slash is removed from the importing ID and `./` is stripped from the import path. Then they are combined.\r\n- Apart from the leading `./`, the path must be normalized according to the same rules as source path in source unit IDs.\r\n- Relative imports **must** start with `./`. `../` is not allowed.\r\n\r\n### Remote imports\r\n- A remote import must start with `protocol://`, where `protocol` can be anything except for `file`.\r\n- The prefix of any remote import must be mapped to a named root. The length of the prefix is up to the user but it must at least include the `protocol://` part.\r\n- The part left after stripping the prefix becomes the source path in the VFS.\r\n- If multiple remappings match the same prefix, the longer one wins.\r\n\r\n### Import remapping vs root remapping\r\nThere are two kinds of remappings:\r\n- **Import remapping**: always remaps something to a named root.\r\n    - This is allowed from URL prefixes or other named roots.\r\n    - These remappings are included in contract metadata.\r\n    - Remapping to `@` is not allowed.\r\n    - Remappings are not recursive. `@a=@b @b=@c @c=@d` will remap `@a` to `@b`, not `@d`.\r\n    - Remapping a root to itself (`@abc=@abc`) is allowed and can be used as a way to prevent a shorter remapping from matching (e.g. adding `@contract=@token` to `@con=@pro` will prevent `@contract` from being remapped to `@protract`.\r\n- **Root remapping**: always remaps a root to something that is not a root\r\n    - The target must be something that combined with the source path is recognized by source loader as a valid source location.\r\n        - On the CLI it must be a path. If the path is relative, it's interpreted as relative to current working directory, converted into an absolute one and normalized.\r\n        - In the JavaScript interface it could be an URL or something completely arbitrary.\r\n    - These remappings are system-dependent and not stored in the metadata. Checksums stored in metadata are used instead to ensure that compiler input is the same regardless of the system.\r\n\r\n### Remapping context\r\nTo solve conflicts caused by different libraries referring to their dependencies in the same way, it's possible to qualify import remappings with a *context*.\r\n- the context must be a named or unnamed root (filesystem paths are not allowed),\r\n- context can only be used for **import remappings** from named roots,\r\n- using context when remapping URL prefixes is not allowed (URLs by their nature are expected to be absolute).\r\n\r\nIf an import remapping has a context, the substitution is only performed on imports found inside the files located under the named root used as context.\r\n\r\nExamples:\r\n```\r\n@libA:@oz=@openzeppelin\r\n@libB:@oz=@oz\r\n@oz=@australia\r\n```\r\n\r\n### Supplying files on the CLI\r\nAll filesystem paths specified on the CLI that lead to files to be compiled must be located within one of the roots.\r\nSince the unnamed root is by default mapped to current working directory, files from that directory can still be conveniently compiled without specifying any remappings in simple cases.\r\nThe source unit ID for the file is constructed by normalizing the path and finding the root that is mapped to the longest matching prefix.\r\n\r\nThe CLI supports source unit IDs but **not** direct imports. I.e. `@` never refers to a named root and import remappings are not taken into account.\r\n\r\n### Supplying files via Standard JSON\r\nSource unit IDs specified in Standard JSON must be already normalized and contain a root. As a special case it can also be equal to `<stdin>`. Any other form of an ID is disallowed.\r\n\r\nURLs specified in `sources.urls` are treated as raw URLs, not remote imports. I.e. remappings are not applied to them. Source unit IDs specified there are also not direct imports.\r\n\r\n### Standard input\r\nA special source ID `<stdin>` is reserved for the content of compiler's standard input.\r\n- It is present in the VFS only when the `-` command-line flag is specified.\r\n- It cannot be used in remappings.\r\n- The parent source ID used when resolving relative imports is `@`.\r\n- Its content can be provided explicitly in Standard JSON (to ensure feature parity between Standard JSON and CLI).\r\n\r\n### Base path\r\nThe base path has no function in the new system but could be retained for backwards-compatibility. `--base-path <dir>` would have the same effect as remapping `@=<dir>`.\r\n\r\n### Allowed paths\r\n- All directories mapped to named roots are automatically added to the list of allowed directories.\r\n- `--allowed-paths` option is also still available. It is the only way to compile the project when the directory a root is mapped to contains symlinks that lead outside of it.\r\n\r\n### Possible extensions\r\n#### Library path\r\nSpecifying mapping for all named roots may be tedious. To make it more convenient we could introduce the concept of library path. It would be defined by a variable called `SOLIDITYPATH` and work in a way similar to `PATH` in Bash or `PYTHONPATH` in Python. All subdirectories of directories listed in `SOLIDITYPATH` would automatically become valid named roots.\r\n\r\n## Backwards-compatibility\r\nThe proposal only restricts current syntax and does not introduce any new elements.\r\n- Imports starting with `../` and `/` are no longer allowed.\r\n- Non-normalized paths are no longer allowed in many contexts\r\n- Arbitrary mapping targets and prefixes are no longer allowed.\r\n- Mapping context is must now start with `@`.\r\n\r\nAs such it's not backwards-compatible but any file compilable after the change should also be compilable with older compilers given the right remappings.\r\n\r\nFilesystem paths on the CLI will now produce different source unit IDs because paths are absolute and converted to relative to a root (though, arguably, this is how it was originally supposed to work with `--base-path` and could be considered a bug instead: https://github.com/ethereum/solidity/issues/11038#issuecomment-793659406).\r\n\r\nTo use URLs as imports an intermediate mapping to and from a named root is required. This makes it impossible to support arbitrary URLs (though arbitrary URLs within a single protocol are still possible). Reader callback passed to the JavaScript interface now receives files after root remapping. Before it was getting source unit IDs directly. This will affect Remix IDE.",
  "closed_by": {
    "login": "cameel",
    "id": 137030,
    "node_id": "MDQ6VXNlcjEzNzAzMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cameel",
    "html_url": "https://github.com/cameel",
    "followers_url": "https://api.github.com/users/cameel/followers",
    "following_url": "https://api.github.com/users/cameel/following{/other_user}",
    "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
    "organizations_url": "https://api.github.com/users/cameel/orgs",
    "repos_url": "https://api.github.com/users/cameel/repos",
    "events_url": "https://api.github.com/users/cameel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cameel/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11138/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11138/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805097707",
    "html_url": "https://github.com/ethereum/solidity/issues/11138#issuecomment-805097707",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11138",
    "id": 805097707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTA5NzcwNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-23T17:39:35Z",
    "updated_at": "2021-03-23T17:39:35Z",
    "author_association": "MEMBER",
    "body": "Couldn't yet fully digest this. In short, you are taking the remapping concept one level higher and are making the `@` convention explicit, did I understand that correctly? In `https://github.com/OpenZeppelin/openzeppelin-contracts/contracts=@openzeppelin` are you actually saying `@openzeppelin=https://github.com/OpenZeppelin/openzeppelin-contracts/contracts`?\r\n\r\nCan you maybe write some pseudo-code that starts with an import statement and ends with loading a file from the host filesystem and storing it under a vfs path name?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805097707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805718652",
    "html_url": "https://github.com/ethereum/solidity/issues/11138#issuecomment-805718652",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11138",
    "id": 805718652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTcxODY1Mg==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-24T10:53:51Z",
    "updated_at": "2021-03-24T11:11:04Z",
    "author_association": "MEMBER",
    "body": "> In short, you are taking the remapping concept one level higher and are making the @ convention explicit, did I understand that correctly?\r\n\r\nYes. There are no real changes in import syntax or Standard JSON content or how you invoke the compiler on the CLI but there are new limitations and some changes in how paths you specify in all these places are interpreted.\r\n\r\nBasically, this forces the user to use remappings when the situation gets more complex than a single directory with all files under it. And ensures that all projects will use and interpret these remappings the same way.\r\n\r\n> In `https://github.com/OpenZeppelin/openzeppelin-contracts/contracts=@openzeppelin` are you actually saying `@openzeppelin=https://github.com/OpenZeppelin/openzeppelin-contracts/contracts`?\r\n\r\nNo, that's exactly what I meant. But for example in Remix you would want both because that's the situation where you want URLs both in imports and in the \"paths\" that the callback gets. The main difference with the current situation would be that the compiler internally sees `@openzeppelin` and not an URL.\r\n\r\n> Can you maybe write some pseudo-code that starts with an import statement and ends with loading a file from the host filesystem and storing it under a vfs path name?\r\n\r\nSure. Here's a short and very informal version:\r\n\r\n```\r\nparse_remappings(remappings):\r\n    for every remapping\r\n        split into context, prefix and target\r\n        decide if it is a root remapping or import remapping\r\n\r\n    validate import remappings\r\n    validate root remappings\r\n    \r\n    if no root remapping for @, add one pointing at current working dir\r\n\r\n    return root remappings and import remappings as separate dicts\r\n\r\nimport_path_to_source_unit_name(import_path, current_source_unit_name):\r\n    filter out import remappings with context no matching the importing source unit\r\n\r\n    if direct import\r\n        if root is @\r\n            take root from importing module\r\n        remap root using filtered import remappings\r\n    elif relative import\r\n        take both root and parent dir from importing module\r\n        remap root using filtered import remappings\r\n    elif remote import\r\n        find import remapping matching URL prefix\r\n        remap prefix to a root using filtered import remappings        \r\n    else\r\n        FAIL\r\n\r\n    if path not normalized or root has funny characters, FAIL        \r\n    return root + source path\r\n\r\nsource_unit_name_to_filesystem_path(source_unit_name):\r\n    split into root and source path\r\n    if no root remapping for root, FAIL\r\n    return remapped root + source path\r\n    \r\nfilesystem_path_to_source_unit_name(filesystem_path):\r\n    if path starts with @, pass it through source_unit_name_to_filesystem_path() to convert it into actual path\r\n    make path absolute (relative to CWD), convert to UNIX format and normalize it\r\n    find root that contains the path\r\n    return root + path relative to root\r\n```\r\n\r\nFor an import statement you would call `source_unit_name_to_filesystem_path()` to get the name the compiler uses its VFS. Then you could call `import_path_to_source_unit_name()` on that to get actual filesystem path.\r\n\r\nIf you wanted to get a VFS path from something specified on the command line or in `sources.urls`, you would call `filesystem_path_to_source_unit_name()`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805718652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805721582",
    "html_url": "https://github.com/ethereum/solidity/issues/11138#issuecomment-805721582",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11138",
    "id": 805721582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTcyMTU4Mg==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-24T10:57:00Z",
    "updated_at": "2021-03-24T11:09:54Z",
    "author_association": "MEMBER",
    "body": "Also, here's a more concrete version of the pseudocode, using Python syntax). I wrote this one first but then I thought it might a bit too long and detailed and I rewrote it into the simplified one I posted above.\r\n\r\n**If the less formal version above is enough and explains everything, you can just skip this one.**\r\n\r\n```python\r\n(IMPORT_REMAPPINGS, ROOT_REMAPPINGS) = parse_remappings(remappings)\r\n\r\ndef parse_remappings(remappings):\r\n    import_remappings = {}\r\n    root_remappings = {}\r\n\r\n    for remapping in remappings:\r\n        (context, prefix, target) = split_remapping(remapping)\r\n\r\n        if target.startswith(\"@\") and not target.startswith(\"@@\"):\r\n            import_remappings[prefix] = {\"context\": context, \"target\": target}\r\n        else:\r\n            if not prefix.startswith(\"@\") or prefix.startswith(\"@@\"):\r\n                raise InvalidRootRemapping()\r\n\r\n            root_remappings[prefix] = target\r\n\r\n    for url_prefix_or_root, import_remapping in import_remappings:\r\n        validate_root(import_remapping.target)\r\n\r\n        if url_prefix_or_root.startswith(\"@\") and not url_prefix_or_root.startswith(\"@@\"):\r\n            validate_root(url_prefix_or_root)\r\n            validate_root(import_remapping.context)\r\n\r\n            if root_remapping.context not in root_remappings:\r\n                raise InvalidRemapping()\r\n        else:\r\n            if import_remapping.context != \"\" or not is_url(url_prefix_or_root):\r\n                raise InvalidRemapping()    \r\n            \r\n    for root, root_remapping in root_remappings:\r\n        validate_root(root)\r\n\r\n    if \"@/\" not in root_remappings:\r\n        root_remappings[\"@/\"] = get_current_working_directory()\r\n\r\n    return (import_remappings, root_remappings)\r\n\r\ndef import_path_to_source_unit_name(import_path, current_source_unit_name):\r\n    local_import_remappings = filter_remappings(IMPORT_REMAPPINGS, context=get_root(current_source_unit_name))\r\n\r\n    if import_path.startswith(\"@/\"):\r\n        root = get_root(current_source_unit_name)\r\n        source_path = import_path.removeprefix(\"@/\")\r\n    elif import_path.startswith(\"@\") and not import_path.startswith(\"@@\"):\r\n        root = get_root(import_path)\r\n        source_path = import_path.removeprefix(root)\r\n    elif import_path.startswith(\"./\"):\r\n        root = get_root(current_source_unit_name)\r\n        source_path = dirname(current_source_unit_name.removeprefix(root)) + import_path.removeprefix(\"./\")\r\n    elif is_url(import_path):\r\n        (prefix, remainder) = find_longest_matching_prefix(import_path, local_import_remappings.keys())\r\n        root = prefix\r\n        source_path = remainder\r\n    else:\r\n        raise InvalidImportPath()\r\n        \r\n    if normalize_import_path(source_path) != source_path:\r\n        raise InvalidImportPath()\r\n\r\n    if  not validate_root(local_import_remappings[root]):\r\n        raise InvalidImportPath()\r\n        \r\n    return local_import_remappings[root] + normalize_import_path(source_path)\r\n\r\ndef source_unit_name_to_filesystem_path(source_unit_name):\r\n    root = get_root(source_unit_name)\r\n    source_path = get_source_path(source_unit_name)\r\n\r\n    if root not in ROOT_REMAPPINGS:\r\n        raise RootResolutionFailed()\r\n\r\n    return ROOT_REMAPPINGS[root] + source_path\r\n    \r\ndef filesystem_path_to_source_unit_name(filesystem_path):\r\n    if filesystem_path.startswith(\"@\"):\r\n        if not filesystem_path.startswith(\"@@\"):\r\n            filesystem_path = source_unit_name_to_filesystem_path(filesystem_path)\r\n        else:\r\n            filesystem_path = filesystem_path.removeprefix(\"@\")\r\n\r\n    filesystem_path = normalize_path(to_unix_format(make_absolute(filesystem_path, relative_to=get_current_working_directory())))\r\n    root = find_root_containing_path(filesystem_path, ROOT_REMAPPINGS)\r\n    source_path = filesystem_path.removeprefix(ROOT_REMAPPINGS[root])\r\n\r\n    return root + source_path\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805721582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805736871",
    "html_url": "https://github.com/ethereum/solidity/issues/11138#issuecomment-805736871",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11138",
    "id": 805736871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTczNjg3MQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-24T11:13:46Z",
    "updated_at": "2021-03-24T11:14:03Z",
    "author_association": "MEMBER",
    "body": "A small update: I just realized that context is only useful in remappings of the form `@a=@b`. I have updated the spec and the pseudocode.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805736871/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805875703",
    "html_url": "https://github.com/ethereum/solidity/issues/11138#issuecomment-805875703",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11138",
    "id": 805875703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTg3NTcwMw==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-24T14:38:44Z",
    "updated_at": "2021-03-24T14:38:44Z",
    "author_association": "MEMBER",
    "body": "We discussed the spec today on the channel and later on the call. Some changes were proposed. Here's what will change:\r\n\r\nFrom the channel:\r\n- Allow relative imports starting with `../` (but disallow going above the root)\r\n- Make `import \"/project/contract.sol\"` and `import \"project/contract.sol\"` translate to `import \"@/project/contract.sol\"`.\r\n    - `@/` can be further translated to a named root if the importing file is inside one.\r\n- Allow URLs to be another form of keys in the VFS and do not normalize them at all.\r\n    - Make CLI file loader recognize URLs and refuse to load them.\r\n    - The JS callback can do with them whatever it likes.\r\n    - Disallow mapping URL prefixes to roots\r\n\r\nFrom the call:\r\n- Make things more backwards-compatible so that most of the existing code that uses imports in a typical way can still compile:\r\n    - Allow arbitrary remappings.\r\n    - Allow arbitrary import paths.\r\n    - Allow arbitrary identifiers as source unit names with only a few exceptions:\r\n        - Disallow `../` and `./` in them to avoid weird interactions with relative paths.\r\n        - Disallow source unit names starting with `/`.\r\n\r\nAlso, some general feedback from the call:\r\n- We should just suggest the recommended way to use the import system in the docs (including remappings for libraries) instead of forcing users to use them.\r\n    - Prefer warnings for patterns that are not recommended instead of completely disallowing them.\r\n- It would be best to have an example of how the new system would be used in practice for the next time we discuss it.\r\n- The spec should ideally describe how the VFS works first and only then go on to explain the interaction with file loader, Standard JSON, etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/805875703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/843706403",
    "html_url": "https://github.com/ethereum/solidity/issues/11138#issuecomment-843706403",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11138",
    "id": 843706403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MzcwNjQwMw==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T03:00:12Z",
    "updated_at": "2021-05-19T03:00:12Z",
    "author_association": "MEMBER",
    "body": "Closing in favor or smaller issues addressing individual points: #11408, #11409, #11410, #11411, #11412, #11413.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/843706403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
