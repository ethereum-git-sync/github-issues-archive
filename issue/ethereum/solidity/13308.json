{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13308",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13308/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13308/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13308/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13308",
  "id": 1319654744,
  "node_id": "I_kwDOAm_5kc5OqFVY",
  "number": 13308,
  "title": "Stop the war on for loops",
  "user": {
    "login": "fulldecent",
    "id": 382183,
    "node_id": "MDQ6VXNlcjM4MjE4Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fulldecent",
    "html_url": "https://github.com/fulldecent",
    "followers_url": "https://api.github.com/users/fulldecent/followers",
    "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
    "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
    "organizations_url": "https://api.github.com/users/fulldecent/orgs",
    "repos_url": "https://api.github.com/users/fulldecent/repos",
    "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fulldecent/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 838064207,
      "node_id": "MDU6TGFiZWw4MzgwNjQyMDc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/annoys%20users%20:cry:",
      "name": "annoys users :cry:",
      "color": "ea2cab",
      "default": false,
      "description": ""
    },
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-07-27T14:31:27Z",
  "updated_at": "2022-08-10T15:10:57Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nAdd a specific overflow check optimization that will make many for-loop optimizations unnecessary.\r\n\r\n## Motivation\r\n\r\nToo many people are saying this is bad:\r\n\r\n```solidity\r\nfor (uint256 mintCounter = 0; mintCounter < quantity; mintCounter++) {\r\n    _mint(msg.sender, _assembleTokenID(dropID, mintCounter));\r\n}\r\n```\r\n\r\ncompared to this:\r\n\r\n```solidity\r\nfor (uint256 mintCounter = 0; mintCounter < quantity;) {\r\n    _mint(msg.sender, _assembleTokenID(dropID, mintCounter));\r\n    unchecked{\r\n        mintCounter++\r\n    }\r\n}       \r\n```\r\n\r\n## Specification\r\n\r\n### Note\r\n\r\nFor reference, a for-loop like this:\r\n\r\n```\r\nfor (A; B; C) {D}\r\n```\r\n\r\nis implemented like this:\r\n\r\n```basic\r\n10 A\r\n\r\n100 if !B GOTO 999\r\n110 D\r\n120 C\r\n130 GOTO 100\r\n\r\n999 EXIT\r\n```\r\n\r\n### New optimization\r\n\r\nIf inside a single code unit, if:\r\n\r\n1. a variable has bit width X,\r\n2. the variable is compared to be less than some quantity with bit width <=X,\r\n3. the variable is not set until step 4 here, then\r\n4. the variable is incremented;\r\n\r\nthen that incrementation in step 4 need not be safety checked. Or in $\\LaTeX$:\r\n\r\n$$x < a <= w \\implies x+1 <= w$$\r\n\r\n### Documentation\r\n\r\nPeople like being fancy, so even if this is implemented, they will still use the `unchecked` \"optimization\" until it can be clearly explained that it is unnecessary.\r\n\r\nSo the documentation should be updated to specify that the gas cost of this code:\r\n\r\n```solidity\r\ncontract C {\r\n    event E;\r\n    constructor(uint256 count) {\r\n        for (uint256 i = 0; i < count; i++) {\r\n            emit E(i);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nshall not exceed that of this code:\r\n\r\n```solidity\r\ncontract CUnchecked {\r\n    event E;\r\n    constructor(uint256 count) {\r\n        for (uint256 i = 0; i < count;) {\r\n            unchecked {\r\n                emit E(i);\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd this can be checked with a test case.\r\n\r\nThere is precedent in this with JavaScript where the specification requires that implementations implement tail-end recursion optimization.\r\n\r\n## Backwards Compatibility\r\n\r\nn/a\r\n\r\n---\r\n\r\nInspired by the discussion with @FrankNFT-labs at https://github.com/LightArtists/light-smart-contracts/issues/2",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13308/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13308/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1197631669",
    "html_url": "https://github.com/ethereum/solidity/issues/13308#issuecomment-1197631669",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13308",
    "id": 1197631669,
    "node_id": "IC_kwDOAm_5kc5HYmi1",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-28T04:04:40Z",
    "updated_at": "2022-07-28T04:28:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "The second optimization is:\r\n\r\nIf inside a single code unit, if:\r\n\r\n1. an unsigned variable is compared to be greater than some value,\r\n2. the variable is not set until step 3 here, then\r\n3. the variable is decremented,\r\n\r\nthen that decrementation in step 3 need not be safety checked. Or in $\\LaTeX$:\r\n\r\n$$x > a >= 0 \\implies x-1 > = 0$$",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1197631669/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1199206174",
    "html_url": "https://github.com/ethereum/solidity/issues/13308#issuecomment-1199206174",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13308",
    "id": 1199206174,
    "node_id": "IC_kwDOAm_5kc5Hem8e",
    "user": {
      "login": "migoldfinger",
      "id": 106750422,
      "node_id": "U_kgDOBlzh1g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/migoldfinger",
      "html_url": "https://github.com/migoldfinger",
      "followers_url": "https://api.github.com/users/migoldfinger/followers",
      "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
      "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
      "repos_url": "https://api.github.com/users/migoldfinger/repos",
      "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-29T12:13:19Z",
    "updated_at": "2022-07-29T12:13:19Z",
    "author_association": "NONE",
    "body": "I see where this comes from, my first thought however is an fancy endles loop thats been created like that if for loops are optimized with your idea.\r\n\r\n```\r\nuint256 quantity = 100000;\r\nfor (uint8 mintCounter = 0; mintCounter < quantity; mintCounter++)\r\n{\r\n    _mint(msg.sender, _assembleTokenID(dropID, mintCounter));\r\n}\r\n```\r\nThis would result in an infinite loop if I am not mistaken.\r\nOf cource the unchecked code example will too but there it is the devs fault entirely.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1199206174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1203419796",
    "html_url": "https://github.com/ethereum/solidity/issues/13308#issuecomment-1203419796",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13308",
    "id": 1203419796,
    "node_id": "IC_kwDOAm_5kc5HurqU",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-03T02:43:25Z",
    "updated_at": "2022-08-03T02:43:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@migoldfinger That code example would NOT be optimized.\r\n\r\nThe rule is (emphasis added):\r\n\r\n> 1. a variable <ins>has bit width X</ins>,\r\n> 2. the variable is compared to be less than <ins>some quantity with bit width <=X</ins>,\r\n> 3. ...\r\n\r\nThe rule would not be applied because the \"some quantity's\" bit width (i.e. `uint256`) is not less than or equal to the variable's bit width (i.e. `uint8`).\r\n\r\n---\r\n\r\nAny counterexample, regardless of how farfetched, is welcome if it would cause this optimization to be behavior-changing.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1203419796/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1203748264",
    "html_url": "https://github.com/ethereum/solidity/issues/13308#issuecomment-1203748264",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13308",
    "id": 1203748264,
    "node_id": "IC_kwDOAm_5kc5Hv72o",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-03T10:07:53Z",
    "updated_at": "2022-08-03T10:09:10Z",
    "author_association": "MEMBER",
    "body": "Yeah, this is a known issue - we have experimental research towards general reasoning- and SMT-based optimizations that are intended to be powerful enough to remove the overflow checks in these (and more general) cases without special-case handling - but since it's unlikely that this will be production-ready in the immediate future, we could indeed consider a dedicated and well-defined special-case optimization for this.\r\n\r\nThe alternative we usually suggest is to define an iterator type as user-defined value type, which has only an increment operation and thereby cannot overflow by design and implement its increment using unchecked arithmetic - especially since we'll probably have user-defined operators on user-defined value types soon (I'd estimate 0.8.17), this may not affect readability (too) negatively (unfortunately we won't have ``++`` at least in the first version, though, so it'd have to be ``i = i + 1``).\r\n\r\nEven without user-defined value types, you can already now write:\r\n```\r\nfunction unsafe_inc(uint i) pure returns (uint) { unchecked { return i + 1; } }\r\ncontract C {\r\n    event E;\r\n    constructor(uint256 count) {\r\n        for (uint256 i = 0; i < count; i = unsafe_inc(i)) {\r\n            emit E(i);\r\n        }\r\n    }\r\n}\r\n```\r\nwhich should have equal cost to the version with the increment moved into the loop body and which is arguably at least a bit less horrible.\r\n\r\n\r\nAll that as a rough description of the status quo. Given that none of the available solutions are at the same time overly nice and expected to be production ready in the short term, it does make sense to consider a dedicated optimization step with well-defined guarantees as suggested, though.\r\n\r\nIf not that, we should at least prominently document the currently available best-practice alternatives. I thought we had that in the docs, but on a quick search right now, I didn't actually see it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1203748264/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1210815883",
    "html_url": "https://github.com/ethereum/solidity/issues/13308#issuecomment-1210815883",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13308",
    "id": 1210815883,
    "node_id": "IC_kwDOAm_5kc5IK5WL",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-10T15:10:57Z",
    "updated_at": "2022-08-10T15:10:57Z",
    "author_association": "MEMBER",
    "body": "We had an initial discussion about this today and decided that we want to further explore a few options.\r\n- @hrkrshnn will check, if it's feasible to accelerate getting an experimental difference solver for the optimizer ready for reliably dealing with the resulting patterns on the Yul level.\r\n- I just created a draft implementation for special-case syntactic analysis in solidity similar to what's suggested in this issue, only restricted to only loop-conditions and loop-post-expressions specifically in https://github.com/ethereum/solidity/pull/13378\r\n- We should probably also write up versions that avoid the issue using a loop counter type as user-defined value type (pre and post the upcoming user-defined-operator and -literal PRs).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1210815883/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
