{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13853",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13853/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13853/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13853/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13853",
  "id": 1524527547,
  "node_id": "I_kwDOAm_5kc5a3nG7",
  "number": 13853,
  "title": "Potential Casting Discrepancy (Yul)",
  "user": {
    "login": "alex-ppg",
    "id": 31933616,
    "node_id": "MDQ6VXNlcjMxOTMzNjE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/31933616?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alex-ppg",
    "html_url": "https://github.com/alex-ppg",
    "followers_url": "https://api.github.com/users/alex-ppg/followers",
    "following_url": "https://api.github.com/users/alex-ppg/following{/other_user}",
    "gists_url": "https://api.github.com/users/alex-ppg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alex-ppg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alex-ppg/subscriptions",
    "organizations_url": "https://api.github.com/users/alex-ppg/orgs",
    "repos_url": "https://api.github.com/users/alex-ppg/repos",
    "events_url": "https://api.github.com/users/alex-ppg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alex-ppg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-01-08T14:17:05Z",
  "updated_at": "2023-01-09T13:33:24Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThe documentation of Solidity does not strictly define what happens when a sub-32 byte negative integer is upcast to a `bytes32` variable in an `assembly` / Yul context where it is permitted. Currently, it appears to misbehave as it will pre-fill the byte representation with `ff` to indicate it is a negative number rather than only writing the bytes that the sub-32 byte integer held and leaving the remaining zero.\r\n\r\n## Environment\r\n\r\nThe compiler utilized where the behaviour is present is `0.8.7`, however, some example compiler versions where this is applicable are: `0.8.0`, `0.7.0`, `0.6.0`, `0.5.0`, and `0.4.0`\r\n\r\n## Steps to Reproduce\r\n\r\nBelow is a minimal example of how this discrepancy manifests:\r\n\r\n```solidity\r\nfunction retrieve() public view returns (bytes32 b) {\r\n    int64 a = -5;\r\n    assembly { b := a }\r\n}\r\n```\r\n\r\nThe above example will yield `0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb` instead of `0x000000000000000000000000000000000000000000000000fffffffffffffffb`, as if we performed an upcast of `int64` to `int256` prior to assignment.\r\n\r\nI believe this is not a deliberate action by the compiler and is a side-effect of how sub-32 byte variables are \"artificial\" and not natively supported by the EVM. I advise its behaviour to be explicitly documented as it can affect encoding mechanisms significantly.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13853/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13853/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1375633574",
    "html_url": "https://github.com/ethereum/solidity/issues/13853#issuecomment-1375633574",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13853",
    "id": 1375633574,
    "node_id": "IC_kwDOAm_5kc5R_oCm",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-09T13:33:23Z",
    "updated_at": "2023-01-09T13:33:23Z",
    "author_association": "MEMBER",
    "body": "This is deliberate - inline assembly is not typed, so any referenced variable is treated as a \"raw\" 256-bit word. So ``a`` in the assembly block refers to the 256-bit word representation of the 64-bit integer ``-5``, which indeed is ``0xff..ffb``.\r\n\r\nIn general, a lot of care has to be taken when dealing with sub-32-byte variables in inline assembly and the behaviour here is intentionally not well documented, since we reserve the right to change behaviour, resp. in these circumstances using inline assembly follows a \"you need to know what you're doing\" policy. However, we may want to consider specifying the behaviour more strictly and then adhere to that specification, since issues like this have been the source of some confusion and bugs in the past.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1375633574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
