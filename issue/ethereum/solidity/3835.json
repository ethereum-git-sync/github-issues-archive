{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3835/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3835/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3835/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3835",
  "id": 311702275,
  "node_id": "MDU6SXNzdWUzMTE3MDIyNzU=",
  "number": 3835,
  "title": "Allow `immutable` variables to be set in the constructor",
  "user": {
    "login": "maurelian",
    "id": 23033765,
    "node_id": "MDQ6VXNlcjIzMDMzNzY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/maurelian",
    "html_url": "https://github.com/maurelian",
    "followers_url": "https://api.github.com/users/maurelian/followers",
    "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
    "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
    "organizations_url": "https://api.github.com/users/maurelian/orgs",
    "repos_url": "https://api.github.com/users/maurelian/repos",
    "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/maurelian/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 42,
  "created_at": "2018-04-05T17:30:58Z",
  "updated_at": "2020-05-28T06:00:24Z",
  "closed_at": "2020-05-27T12:18:56Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "This request extends #715, and #3356.\r\n\r\n**Motivation:**\r\n\r\nIt's very common in Solidity contracts to include storage variables which are never intended to be mutated. An example of this is `decimals` in EIP20.  (examples: [consensys](https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/DetailedERC20.sol), [Zeppelin](https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/DetailedERC20.sol#L9))\r\n\r\nThe `decimals` value should never change, but no one declares it as `constant` because they want to be able to set the value in the constructor.\r\n\r\nThis is both less safe, and more expensive because the values need to be written to, and read from storage.\r\n\r\n**Proposal:**\r\n\r\n* `immutable` values should be appended to the runtime bytecode. \r\n* The location of the values should be stored in bytecode at compile time\r\n* Where `constant` values are currently placed on the stack using `PUSH_`, `immutable` values can be accessed using `CODECOPY`. \r\n\r\nThis approach has additional safety beyond compiler errors, as it's not possible to modify bytecode in the ethereum protocol. \r\n\r\nThat would look something like this: \r\n\r\n```js\r\ncontract Example {\r\n\r\n    uint public constant I_AM_CONSTANT; \r\n    uint public immutable I_AM_IMMUTABLE;\r\n    \r\n    function Example(uint _b) public {\r\n        I_AM_CONSTANT = _b; // TypeError: Cannot assign to a constant variable.\r\n        I_AM_IMMUTABLE = _b; \r\n    }\r\n    \r\n}\r\n```\r\n\r\n----\r\n\r\nImplementation notes:\r\n\r\n - [x] parse additional state variable modifier \"immutable\" and add to AST — @chriseth -> #8444 \r\n - [x] check that the type is a value type — @chriseth \r\n - [x] determine call graph: Which functions are only used in construction context and which functions are reachable from external functions? — @marenz #8475\r\n   - properly handle virtual function calls\r\n   - calls from base contructors\r\n   - calls in member-initializations.\r\n   - check that immutable variables are only assigned to exactly once (also not zero times) in construction context (also check the point of declaration)\r\n   - check that immutable variables are not read from in functions called from the constructor\r\n   - it might be necessary to re-check the above conditions for all contracts derived from a contract that defines immutable state variables because of virtual functions.\r\n - [x] since assignment might happen way before actual deployment, it might be a good idea to reserve a fixed spot in memory for each immutable variable, copy there upon assignment (this might also allow multi-assignment) and then either copy to each location in bytecode before returning or use codecopy routines.\r\n - [x] determine positions in bytecode where immutable variables are read - this probably requires introducing a new AssemblyItem type. For the yul code generator, this could be a new builtin function with literal argument.\r\n - [ ] codegen for yul\r\n - [x] debug output (also part of metadata)\r\n - [x] public immutables\r\n - [x] documentation\r\n - [ ] external function pointers",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3835/reactions",
    "total_count": 21,
    "+1": 21,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3835/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394686312",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-394686312",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 394686312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDY4NjMxMg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-05T12:13:22Z",
    "updated_at": "2018-06-05T12:13:22Z",
    "author_association": "MEMBER",
    "body": "The `immutable` keyword fits because we also plan to use it for function parameters which cannot be changed inside the function (but of course the function can be called with different arguments).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394686312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394775271",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-394775271",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 394775271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDc3NTI3MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-05T16:31:07Z",
    "updated_at": "2018-06-05T16:31:07Z",
    "author_association": "MEMBER",
    "body": "Two problems that still need to be solved are:\r\n - what happens if an immutable value is read by (a function called by) the constructor?\r\n - what happens if an immutable value is written to multiple times in (a function called by) the constructor?\r\n\r\nA solution for both might be to provide a fixed slot in memory for the variable which is then stored in code right before the code deploy step, i.e. an immutable variable behaves completely different at construction time than at runtime (which is to be expected).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394775271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394786119",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-394786119",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 394786119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDc4NjExOQ==",
    "user": {
      "login": "GNSPS",
      "id": 4008213,
      "node_id": "MDQ6VXNlcjQwMDgyMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4008213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GNSPS",
      "html_url": "https://github.com/GNSPS",
      "followers_url": "https://api.github.com/users/GNSPS/followers",
      "following_url": "https://api.github.com/users/GNSPS/following{/other_user}",
      "gists_url": "https://api.github.com/users/GNSPS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GNSPS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GNSPS/subscriptions",
      "organizations_url": "https://api.github.com/users/GNSPS/orgs",
      "repos_url": "https://api.github.com/users/GNSPS/repos",
      "events_url": "https://api.github.com/users/GNSPS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GNSPS/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-05T17:03:29Z",
    "updated_at": "2018-06-05T17:04:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that the second scenario should revert. Immutable vars should be initializable only once.\r\n\r\nAlso re-reading this made me think if we can extend the `immutable` definition to encompass `public` function parameters as well and these would not get copied into memory and would get read directly from CALLDATA.\r\n\r\n*EDIT*: in the case the public function is called externally and the parameters live in the call data, of course.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394786119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394787187",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-394787187",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 394787187,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDc4NzE4Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-05T17:06:50Z",
    "updated_at": "2018-06-05T17:06:50Z",
    "author_association": "MEMBER",
    "body": "@GNSPS public function arguments have to live in memory, otherwise it is not possible to call it internally. This is different for `external` functions. The compiler might suggest to make a function external if it is never called internally.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394787187/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394787310",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-394787310",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 394787310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDc4NzMxMA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-05T17:07:11Z",
    "updated_at": "2018-06-05T17:07:11Z",
    "author_association": "MEMBER",
    "body": "Oh and I don't think it should revert, it should just not compile if you assign an immutable variable twice.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394787310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394788250",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-394788250",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 394788250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDc4ODI1MA==",
    "user": {
      "login": "GNSPS",
      "id": 4008213,
      "node_id": "MDQ6VXNlcjQwMDgyMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4008213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GNSPS",
      "html_url": "https://github.com/GNSPS",
      "followers_url": "https://api.github.com/users/GNSPS/followers",
      "following_url": "https://api.github.com/users/GNSPS/following{/other_user}",
      "gists_url": "https://api.github.com/users/GNSPS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GNSPS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GNSPS/subscriptions",
      "organizations_url": "https://api.github.com/users/GNSPS/orgs",
      "repos_url": "https://api.github.com/users/GNSPS/repos",
      "events_url": "https://api.github.com/users/GNSPS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GNSPS/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-05T17:10:15Z",
    "updated_at": "2018-06-05T17:10:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh shoot! Of course! My brain stopped, \"not compile\" is what I meant, \"revert\"ing makes no sense in a compile-time mechanism. 😂 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394788250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394792880",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-394792880",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 394792880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDc5Mjg4MA==",
    "user": {
      "login": "GNSPS",
      "id": 4008213,
      "node_id": "MDQ6VXNlcjQwMDgyMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4008213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GNSPS",
      "html_url": "https://github.com/GNSPS",
      "followers_url": "https://api.github.com/users/GNSPS/followers",
      "following_url": "https://api.github.com/users/GNSPS/following{/other_user}",
      "gists_url": "https://api.github.com/users/GNSPS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GNSPS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GNSPS/subscriptions",
      "organizations_url": "https://api.github.com/users/GNSPS/orgs",
      "repos_url": "https://api.github.com/users/GNSPS/repos",
      "events_url": "https://api.github.com/users/GNSPS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GNSPS/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-05T17:24:39Z",
    "updated_at": "2018-06-05T17:25:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "In my mind, this immutable parameter thing was for the different behavior of public functions when called internally and externally but I can see how this would be so much more confusing and not save that much gas. Could just be juxtaposition of `external` and `public` functions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394792880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/557859788",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-557859788",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 557859788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Nzg1OTc4OA==",
    "user": {
      "login": "MrChico",
      "id": 8930559,
      "node_id": "MDQ6VXNlcjg5MzA1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8930559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrChico",
      "html_url": "https://github.com/MrChico",
      "followers_url": "https://api.github.com/users/MrChico/followers",
      "following_url": "https://api.github.com/users/MrChico/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrChico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrChico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrChico/subscriptions",
      "organizations_url": "https://api.github.com/users/MrChico/orgs",
      "repos_url": "https://api.github.com/users/MrChico/repos",
      "events_url": "https://api.github.com/users/MrChico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrChico/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-24T05:37:31Z",
    "updated_at": "2019-11-24T05:37:31Z",
    "author_association": "MEMBER",
    "body": "This feature would be super nice to have imo. Especially with the istanbul increase of SLOADS, I think this can result in significant optimization gains. \r\nIf the questions above are still open, here's my 2 cents:\r\n- Only allow assigning to the immutable value once.\r\n- Ideally, the semantics would be that if a function is called which reads the immutable value before the assignment, refuse to compile.\r\n \r\nIf that turns out to be too complex since the immutable could come from memory or the bytecode, then to not allow for functions which depend on the immutable variable in the constructor seems like a good enough start!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/557859788/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/558111961",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-558111961",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 558111961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODExMTk2MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T11:22:23Z",
    "updated_at": "2019-11-25T11:22:23Z",
    "author_association": "MEMBER",
    "body": "Discussion: We might want to implement this soonish, maybe with `immutable` for now, but we could also combine it with the `constant` keyword in the future.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/558111961/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573194102",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-573194102",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 573194102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MzE5NDEwMg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-10T20:31:30Z",
    "updated_at": "2020-01-14T20:59:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I propose there is an error in the test case. Should be:\r\n\r\n```solidity\r\ncontract Example {\r\n\r\n    uint public constant I_AM_CONSTANT; \r\n    uint public immutable I_AM_IMMUTABLE;\r\n    \r\n    function Example(uint _b) public { // WARNING: This function can be changed to \"pure\" mutability\r\n        I_AM_CONSTANT = _b; // TypeError: Cannot assign to a constant variable.\r\n        I_AM_IMMUTABLE = _b; \r\n    }\r\n    \r\n}\r\n \r\n```\r\n\r\nWarning added inline",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573194102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573209841",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-573209841",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 573209841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MzIwOTg0MQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-10T21:20:07Z",
    "updated_at": "2020-01-10T21:20:07Z",
    "author_association": "MEMBER",
    "body": "Nowadays it should rather be ``constructor`` instead of ``function Example``, shouldn't it?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573209841/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573632323",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-573632323",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 573632323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MzYzMjMyMw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-13T12:06:48Z",
    "updated_at": "2020-01-13T12:06:48Z",
    "author_association": "MEMBER",
    "body": "Re-added \"to discuss\" because we need to agree about the problems related to reading the variable before its final value has been set.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573632323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573633861",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-573633861",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 573633861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MzYzMzg2MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-13T12:11:02Z",
    "updated_at": "2020-01-13T12:11:02Z",
    "author_association": "MEMBER",
    "body": "Another thing to note: This should only work for value types or at most for types that are statically-sized. In that case, we can reserve a certain spot in the deployed bytecode, do not have to move code around and can keep the metadata cbor struct at the very end.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573633861/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573634427",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-573634427",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 573634427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MzYzNDQyNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-13T12:12:48Z",
    "updated_at": "2020-01-13T12:12:48Z",
    "author_association": "MEMBER",
    "body": "Another complication is the order of execution of constructors in the inheritance hierarchy. Because of that, I would also say that accessing a non-initialized immutable should result in a compiler error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/573634427/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574300080",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574300080",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574300080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDMwMDA4MA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T18:04:19Z",
    "updated_at": "2020-01-14T18:04:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is a blunt way to get this to work in the next version, with further improvement possible later:\r\n\r\n* Accessing a property defined `immutable` as an r-value inside that contract's constructor shall be a compile error.\r\n\r\nIf r-value in that constructor is necessary then a workaround exists, the developer can use a temporary variable in the constructor.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574300080/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574334299",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574334299",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574334299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDMzNDI5OQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T19:29:42Z",
    "updated_at": "2020-01-14T19:29:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "From my understanding, this means it'll be possible to read from `immutable` variables in `external pure` functions. Is this correct?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574334299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574338223",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574338223",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574338223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDMzODIyMw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T19:38:58Z",
    "updated_at": "2020-01-14T19:38:58Z",
    "author_association": "MEMBER",
    "body": "At least my first instinct would be to consider reading from ``immutable`` variables a ``view`` operation, not a ``pure`` one...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574338223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574371848",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574371848",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574371848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDM3MTg0OA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-14T21:00:28Z",
    "updated_at": "2020-01-14T21:00:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "`pure`. For sure. @nventuro, thank you updated that test case above.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574371848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574464087",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574464087",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574464087,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDQ2NDA4Nw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T02:18:05Z",
    "updated_at": "2020-01-15T02:18:05Z",
    "author_association": "MEMBER",
    "body": "Why would you say it's definitely ``pure``? In what way is this \"purer\" than ``this`` (which is ``view``)? In my mind ``pure`` basically means compile-time constant and that's not the case here...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574464087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574598245",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574598245",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574598245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDU5ODI0NQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T10:31:21Z",
    "updated_at": "2020-01-15T10:33:25Z",
    "author_association": "MEMBER",
    "body": "As an example:\r\n```\r\ncontract C {\r\n  uint public immutable IMMUTABLE;\r\n  uint public immutable IMMUTABLE_NOT_WRITTEN_IN_CONSTRUCTOR = 23;\r\n  constructor(uint v) { IMMUTABLE = v; }\r\n  function PURE() public pure returns(uint256) { return 42; }\r\n\r\n  uint256[PURE()] x; // This could and should be valid at some point.\r\n  uint256[IMMUTABLE] y;  // This will never work.\r\n  uint256[IMMUTABLE_NOT_WRITTEN_IN_CONSTRUCTOR] z; // This again is fine.\r\n}\r\n```\r\n\r\nSo I'd argue that writing to an immutable variable in the constructor demotes reading it from ``pure`` to ``view``...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574598245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574605218",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574605218",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574605218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDYwNTIxOA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T10:49:10Z",
    "updated_at": "2020-01-15T10:49:10Z",
    "author_association": "MEMBER",
    "body": "I think we have an issue about this which had a more fine-grained categorization of \"constantness\", but I would also go for \"view\" in this case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574605218/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574801292",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574801292",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574801292,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDgwMTI5Mg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T18:55:51Z",
    "updated_at": "2020-01-15T18:55:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "`pure` means it is compatible with `STATICCALL`. The `immutable` feature is compatible with `STATICCALL` so it should be `pure`.\r\n\r\n# Example implementation and usage:\r\n\r\nSolidity code:\r\n\r\n```solidity\r\ncontract Token {\r\n    string immutable SYMBOL;\r\n    \r\n    function constructor(string newSymbol) public {\r\n        SYMBOL = newSymbol;\r\n    }\r\n    function getSymbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n }\r\n```\r\n\r\nExample init code:\r\n\r\n```\r\nstuff\r\nstuff\r\nput SYMBOL here\r\nstuff\r\nload the constructor parameter into SYMBOL\r\nstuff\r\n```\r\n\r\nExample deployed code for a contract constructed with newSymbol = \"Bob\":\r\n\r\n```\r\nfunction selector jump table\r\nentry point for function getSymbol\r\n  return string literal \"Bob\"\r\nstuff\r\nstuff\r\n```\r\n\r\nExample usage of deployed contract from accessor contract:\r\n\r\n```\r\nDELEGATECALL\r\n  - To some Token contract\r\n  - function selector = getSymbol\r\n```\r\n\r\n^^ Here the deployed contract is able to return the \"Bob\" literal without accessing storage. This means the `getSymbol` function is pure.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574801292/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574854014",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574854014",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574854014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDg1NDAxNA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T21:00:49Z",
    "updated_at": "2020-01-15T21:00:49Z",
    "author_association": "MEMBER",
    "body": "``view`` already means compatible with ``STATICCALL`` (in fact we *do* call everything ``view`` with staticcall). And the immutable feature is definitely compatible with staticcall, so it definitely is *at least* view, there's no arguing that.\r\n\r\nThe problem is (as @chriseth has hinted at) that there are two interpretations of ``pure``, one stricter than the other:\r\n - the function does not write/modify and not even *read* from storage **or from any other blockchain state**\r\n - the function is compile-time constant or alternatively: a pure function is *solely* a function of its input arguments, i.e. it will always result in the same values for the same inputs.\r\n\r\nWhile the immutable feature arguably fits the first interpretation (depending on what exactly we consider \"state\"), it doesn't fit the second one. This *either* means that we need to define something *beyond* ``pure`` that fits the second bullet point, *or* that immutable variables (when written to in the constructor) are only ``view``.\r\n\r\nFor comparison: reading the *address* of ``this`` doesn't access storage either - but it's still ``view`` not ``pure``. So ``pure`` doesn't merely promise not to read from storage, but rather not to read *any* state and I'd consider the value assigned to immutable variables as part of \"state\".\r\n\r\nOn the other hand we - to my own surprise - currently allow the ``codecopy`` opcode in pure functions - but I'd actually consider that a bug.\r\n\r\nIn any case - I think we can agree that immutable variable are *more than view* - and we can have a separate discussion about the future of ``pure`` (i.e. as I hinted at, we have the long-term plan to allow pure expressions e.g. for array lengths of state variables, which would be prevented by considering immutable variables assigned to in constructors as pure) to decide whether it's *sufficiently* beyond ``view`` to call it ``pure`` :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574854014/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574855895",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-574855895",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 574855895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDg1NTg5NQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T21:05:49Z",
    "updated_at": "2020-01-15T21:06:48Z",
    "author_association": "MEMBER",
    "body": "I'd suggest to move further discussion about ``pure`` itself away from this issue towards  https://github.com/ethereum/solidity/issues/8153 .\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574855895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/576665478",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-576665478",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 576665478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NjY2NTQ3OA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-21T12:46:34Z",
    "updated_at": "2020-01-21T12:46:34Z",
    "author_association": "MEMBER",
    "body": "To simplify the implementation, I would say that immutable variables cannot be read in the construction context and they can only be written to once. This includes direct assignment at the point of definition (`immutable address me = address(this)`).\r\n\r\nIt might still be a bit tricky to determine these, so maybe we can even strengthen that to: immutable variables can only be written to in the constructor itself and they cannot be read from in any function that is called from the constructor.\r\n\r\nEven with that, \"called from the constructor\" might be tricky, because of inheritance and overriding functions changing the call patterns. But anyway, in the worst case, for the first implementation, we can detect these cases at code creation time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/576665478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577431096",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-577431096",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 577431096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzQzMTA5Ng==",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-22T23:15:29Z",
    "updated_at": "2020-01-22T23:18:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "> immutable variables cannot be read in the construction context\r\n\r\nI agree, though I hope to see that functionality in the long-run. Until then it should be easy enough to substitute stack variables or calldata for that purpose.\r\n\r\nIllustration:\r\n\r\n```\r\ncontract Liquidator {\r\n  ERC20 public immutable inputToken;\r\n  ERC20 public immutable outputToken;\r\n  UniswapV2 public immutable exchange;\r\n  \r\n  constructor(ERC20 input, ERC20 output, UniswapFactory exchangeFactory) {\r\n    inputToken = input;\r\n    outputToken = output;\r\n    exchange = exchangeFactory.getExchange(inputToken, outputToken); // can be getExchange(input, output)\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577431096/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577519482",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-577519482",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 577519482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzUxOTQ4Mg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-23T06:03:52Z",
    "updated_at": "2020-01-23T06:03:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry I was way off in my explanation above. Thanks for the correction.\r\n\r\nSame conclusion though, `immutable` must be `pure`. If an `immutable` causes an `SLOAD` (which just got a lot more expensive) then we are doing little of value here.\r\n\r\n# @chriseth / \"called from the constructor\"\r\n\r\n> Even with that, \"called from the constructor\" might be tricky...\r\n\r\nI think this is easy — any use of the `immutable` RVALUE from functions is compiled to `0xfe` in the construction context.\r\n\r\nAll LVALUE use must be in the constructor.\r\n\r\nConstructor can only set LVALUE once.\r\n\r\nAlso, there should be no direct assignment of constants (i.e. in the `contract` context).\r\n\r\n```solidity\r\nimmutable address me = address(this)\r\n```\r\n\r\nThe only useful case would be address(this) and other chain data. This is limited utility.\r\n\r\n# Strongest implementation <kbd>NEW</kbd>\r\n\r\n* Rename `immutable` to `plastic`. (A definition of plasticity is: formable until hardened.)\r\n\r\n* The `plastic` values can written to zero or more times from the constructor function.\r\n\r\n* The constructor reserves memory locations a...b for `plastic` variables. (These are defined at compile-time.)\r\n\r\n* Writing to a `plastic` LVALUE is always disabled for functions.\r\n\r\n* Writing to a `plastic` LVALUE is allowed for constructor and this is achieved by writing to those compile-time defined memory locations.\r\n\r\n* Reading from a `plastic` RVALUE in the construction context (constructor and other functions) uses those those compile-time defined memory locations.\r\n\r\n* When construction completes, the `plastic` values are inlined to every RVALUE site (as `0x60 PUSH1` commands...)\r\n\r\n*Alternatively, those `plastic`s can be stored in code and accessed using `0x39 CODECOPY`. I'm not sure how `constant` is currently implemented. But `plastic` and `constant` should be the some. And of course inlining is better runtime performance than `CODECOPY` for single-word variables.*\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577519482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577589329",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-577589329",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 577589329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzU4OTMyOQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-23T09:04:29Z",
    "updated_at": "2020-01-23T09:04:29Z",
    "author_association": "MEMBER",
    "body": "@wjmelements @fulldecent sorry, to clarify: In my comment above I was talking about the first implementation, we will improve on that later. But for now, this is what we an do as a reasonable first step.\r\n\r\n@fulldecent Why do you think `address immutable me = address(this)` should not be allowed in the contract context?\r\n\r\nDirectly copying to all locations in code where it is used sounds like a very good idea I did not think of that! For that, we would need all locations to use `push32`, though (maybe smaller for smaller types). Again, for the initial implementation, this is too complicated, though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577589329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577825286",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-577825286",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 577825286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzgyNTI4Ng==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-23T19:00:23Z",
    "updated_at": "2020-01-23T19:00:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "The only usable one that would be your example:\r\n\r\n```solidity\r\ncontract Liquidator {\r\n    address payable plastic me = address(this);\r\n    function getMe() external returns (address) {\r\n        return me;\r\n    }\r\n}\r\n```\r\n\r\nBut actually that is not very helpful because `address(this)` is already available.\r\n\r\nIn general, there are two other ways to use contract context:\r\n\r\n```solidity\r\ncontract Liquidator {\r\n    uint payable plastic totalSupply = 1000;\r\n}\r\n```\r\n\r\nEntirely useless because that could be constant.\r\n\r\nAnd lastly the only other way is:\r\n\r\n```solidity\r\ncontract Liquidator {\r\n    uint payable plastic number = block.number;\r\n}\r\n```\r\n\r\nThis last example has a risk that it is misunderstood. A programmer may think that the *current* block number will be returned.\r\n\r\nThe alternate way of having that code in the constructor is much more clear and explicit that it is only run once.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/577825286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/578155490",
    "html_url": "https://github.com/ethereum/solidity/issues/3835#issuecomment-578155490",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3835",
    "id": 578155490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODE1NTQ5MA==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-24T14:35:58Z",
    "updated_at": "2020-01-24T14:35:58Z",
    "author_association": "NONE",
    "body": "My 2 cents:\r\n\r\nOn **naming**, I'd avoid the keyword `immutable`, since it's often associated with immutable data structures (see [immutable.js](https://github.com/immutable-js/immutable-js) or [data structures](https://clojure.org/reference/data_structures) in functional languages). Since this is a concept that already exists in other languages, I'd suggest reusing the same keywords that already exist to denote it, such as `readonly` or `final`, following [Java](https://en.wikipedia.org/wiki/Final_(Java)) or [C#](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly).\r\n\r\n> But actually that is not very helpful because address(this) is already available.\r\n\r\nDisagree. Being able to pin down `address(this)` in construction time is particularly useful for detecting when code is being run from a `DELEGATECALL` or not: if `address(this)` is different to the `readonly me` value, then it's a delegate call. I understand this is the same mechanism used by Solidity libraries under the hood, and it would be super useful for implementation contracts in the context of proxies.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/578155490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
