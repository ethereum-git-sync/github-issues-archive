{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10382",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10382/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10382/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10382/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10382",
  "id": 749375456,
  "node_id": "MDU6SXNzdWU3NDkzNzU0NTY=",
  "number": 10382,
  "title": "feature discussion: batched delegatecalls and the msg.value problem",
  "user": {
    "login": "gitpusha",
    "id": 36712489,
    "node_id": "MDQ6VXNlcjM2NzEyNDg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gitpusha",
    "html_url": "https://github.com/gitpusha",
    "followers_url": "https://api.github.com/users/gitpusha/followers",
    "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
    "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
    "organizations_url": "https://api.github.com/users/gitpusha/orgs",
    "repos_url": "https://api.github.com/users/gitpusha/repos",
    "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gitpusha/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-11-24T06:10:14Z",
  "updated_at": "2020-12-02T16:54:20Z",
  "closed_at": "2020-12-02T16:54:20Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Referencing the discussion that started here: #10317 \r\n\r\n@gitpusha \r\n> make it so that when batch delegatecalling targets from a contract, not all of them have to be payable functions in order for there to be a non-zero msg.value property (probably impossible to implement due to EVM restriction? )\r\n\r\n@chriseth \r\n> Yes, this is an EVM restriction. Solidity library functions actually do not have a check for msg.value for exactly this purpose. Maybe we could find another way to specify \"this is a delegatecall target function\"? Or maybe we should modify libraries so that they can be more easily used like that?\r\n\r\nOne example where such batched delegatecalls takes place and where, if you want to use `msg.value` with the call invoking the batched delegatecalls ( `cast() external payable` ), you have to make sure all `_targets` are `payable` functions, is [InstaDapps smart wallets ](https://github.com/InstaDApp/dsa-contracts/blob/7e70b926cb33263783f621612157f49f785daa0a/contracts/account.sol#L91)cast function.\r\n\r\n```solidity\r\n    function spell(address _target, bytes memory _data) internal {\r\n        require(_target != address(0), \"target-invalid\");\r\n        assembly {\r\n            let succeeded := delegatecall(gas(), _target, add(_data, 0x20), mload(_data), 0, 0)\r\n\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    // throw if delegatecall failed\r\n                    let size := returndatasize()\r\n                    returndatacopy(0x00, 0x00, size)\r\n                    revert(0x00, size)\r\n                }\r\n        }\r\n    }\r\n\r\n    function cast(\r\n        address[] calldata _targets,\r\n        bytes[] calldata _datas,\r\n        address _origin\r\n    )\r\n        external\r\n        payable\r\n    {\r\n        require(isAuth(msg.sender) || msg.sender == instaIndex, \"permission-denied\");\r\n        require(_targets.length == _datas.length , \"array-length-invalid\");\r\n        IndexInterface indexContract = IndexInterface(instaIndex);\r\n        bool isShield = shield;\r\n        if (!isShield) {\r\n            require(ConnectorsInterface(indexContract.connectors(version)).isConnector(_targets), \"not-connector\");\r\n        } else {\r\n            require(ConnectorsInterface(indexContract.connectors(version)).isStaticConnector(_targets), \"not-static-connector\");\r\n        }\r\n        for (uint i = 0; i < _targets.length; i++) {\r\n            spell(_targets[i], _datas[i]);\r\n        }\r\n        address _check = indexContract.check(version);\r\n        if (_check != address(0) && !isShield) require(CheckInterface(_check).isOk(), \"not-ok\");\r\n        emit LogCast(_origin, msg.sender, msg.value);\r\n    }\r\n```\r\n\r\nSometimes you might want to send some ETH to `cast` and make use of it in a `target` delegatecall, like for example depositing new ETH somewhere. This however means that if you want to batch any other delegatecalls with that payable call to `cast`, all of their target functions must be `payable` too, even if they shouldnt be, in order for their to be no call-value revert. ",
  "closed_by": {
    "login": "gitpusha",
    "id": 36712489,
    "node_id": "MDQ6VXNlcjM2NzEyNDg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gitpusha",
    "html_url": "https://github.com/gitpusha",
    "followers_url": "https://api.github.com/users/gitpusha/followers",
    "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
    "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
    "organizations_url": "https://api.github.com/users/gitpusha/orgs",
    "repos_url": "https://api.github.com/users/gitpusha/repos",
    "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gitpusha/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10382/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10382/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/732679551",
    "html_url": "https://github.com/ethereum/solidity/issues/10382#issuecomment-732679551",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10382",
    "id": 732679551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMjY3OTU1MQ==",
    "user": {
      "login": "gitpusha",
      "id": 36712489,
      "node_id": "MDQ6VXNlcjM2NzEyNDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitpusha",
      "html_url": "https://github.com/gitpusha",
      "followers_url": "https://api.github.com/users/gitpusha/followers",
      "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
      "organizations_url": "https://api.github.com/users/gitpusha/orgs",
      "repos_url": "https://api.github.com/users/gitpusha/repos",
      "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitpusha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-24T06:20:01Z",
    "updated_at": "2020-11-24T06:20:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Talking about solutions: \r\n\r\n> Solidity library functions actually do not have a check for msg.value for exactly this purpose. Maybe we could find another way to specify \"this is a delegatecall target function\"? Or maybe we should modify libraries so that they can be more easily used like that?\r\n\r\nCan you call `library` methods directly with a low-level delegatecall without linking them in your contract code? If so, I guess one possible solution would be to write and deploy all `targets` that are not `payable` as `libraries` instead of `contracts` and thus let them bypass the call-value restriction? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/732679551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/736327814",
    "html_url": "https://github.com/ethereum/solidity/issues/10382#issuecomment-736327814",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10382",
    "id": 736327814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjMyNzgxNA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-01T09:04:12Z",
    "updated_at": "2020-12-01T09:04:12Z",
    "author_association": "MEMBER",
    "body": "Oh of course, If you use `delegatecall`, then libraries are a better target, because they are built for that purpose. Why would you use them only for non-payable functions?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/736327814/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/737358895",
    "html_url": "https://github.com/ethereum/solidity/issues/10382#issuecomment-737358895",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10382",
    "id": 737358895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNzM1ODg5NQ==",
    "user": {
      "login": "gitpusha",
      "id": 36712489,
      "node_id": "MDQ6VXNlcjM2NzEyNDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitpusha",
      "html_url": "https://github.com/gitpusha",
      "followers_url": "https://api.github.com/users/gitpusha/followers",
      "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
      "organizations_url": "https://api.github.com/users/gitpusha/orgs",
      "repos_url": "https://api.github.com/users/gitpusha/repos",
      "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitpusha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-02T16:53:36Z",
    "updated_at": "2020-12-02T16:54:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Why would you use them only for non-payable functions? \r\n\r\nNot sure. I think I wrongly assumed library methods shouldnt be `payable` which was a misconception. \r\n\r\nI think I am happy with this solution to circumvent the call-value restriction for these use cases. I will close the issue. Thanks for your help!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/737358895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
