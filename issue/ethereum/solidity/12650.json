{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12650/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12650/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12650/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12650",
  "id": 1127881030,
  "node_id": "I_kwDOAm_5kc5DOhlG",
  "number": 12650,
  "title": "Constant-complexity dispatcher idea",
  "user": {
    "login": "k06a",
    "id": 702124,
    "node_id": "MDQ6VXNlcjcwMjEyNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/k06a",
    "html_url": "https://github.com/k06a",
    "followers_url": "https://api.github.com/users/k06a/followers",
    "following_url": "https://api.github.com/users/k06a/following{/other_user}",
    "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
    "organizations_url": "https://api.github.com/users/k06a/orgs",
    "repos_url": "https://api.github.com/users/k06a/repos",
    "events_url": "https://api.github.com/users/k06a/events{/privacy}",
    "received_events_url": "https://api.github.com/users/k06a/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    },
    {
      "id": 4699440809,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvGqQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/closed%20due%20inactivity",
      "name": "closed due inactivity",
      "color": "91535E",
      "default": false,
      "description": "The issue/PR was automatically closed due to inactivity."
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 48,
  "created_at": "2022-02-08T23:54:17Z",
  "updated_at": "2023-09-08T09:18:13Z",
  "closed_at": "2023-03-31T12:04:26Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Today I spent some time on prototyping and was managed to achieve O(1)-complexity dispatcher. Check out few my messages here: https://github.com/vyperlang/vyper/issues/2386#issuecomment-1033117651\r\n\r\nAnd find code prototype here: https://gist.github.com/k06a/737fd1f389bb6f2e66f0ef76ea73729b\r\n\r\n## Abstract\r\n\r\nI believe dispatcher implementation initially was O(N), but now it may be tree-like O(log(n)). I assume having an O(1) dispatcher when some contract has 5+ methods is a cool achievement.\r\n\r\n## Motivation\r\n\r\nContracts with tens of methods could have really slow dispatcher for most of the methods. Computing keccak256 and 2 jumps is a relatively cheap way to dispatch.\r\n\r\n## Specification\r\n\r\nWe just need to brute-force `magic` values at compile time to achieve all selectors being mapped into 0..N-1 values. The complexity of such brute force should be `N^N/N!`. If the number of selectors is really huge we could, for example, find the first function for splitting into a few groups by 8, and then use different magic for each group. Having 1 magic number you could split 32 selectors into 4 groups by 8 and then find magic for each group. Finding magic for a group of 8 would take `8^8/8! = 416` iterations in average. Seems possible to do this in compile-time.\r\n\r\nPseudocode:\r\n```solidity\r\nconst index = keccak256(abi.encodePacked(selector + (magic << 32))) % selectors.length;\r\nJUMP(READ(table_start + index));\r\n```\r\n\r\n## Backwards Compatibility\r\n\r\nThe resulting dispatcher code should be fully compatible for external calls with any other versions of the dispatcher.\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12650/reactions",
    "total_count": 5,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12650/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034012536",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034012536",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034012536,
    "node_id": "IC_kwDOAm_5kc49ocd4",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T17:26:31Z",
    "updated_at": "2022-02-09T17:26:31Z",
    "author_association": "NONE",
    "body": "I will write detailed specification, hope you like the idea and have desire to implement it. I assume dispatching can cost 100-150 gas for up to 512 methods and bytecode size could be smaller than now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034012536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034036174",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034036174",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034036174,
    "node_id": "IC_kwDOAm_5kc49oiPO",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T17:52:30Z",
    "updated_at": "2022-02-09T17:52:30Z",
    "author_association": "MEMBER",
    "body": "I actually spent some time months ago to do something similar.\r\nI would say: Why not?\r\nOne problem is that we still need to do the final comparison in the end, but we already do that even in the binary search case.\r\nAnother problem might be if we want to get rid of dynamic jumps at some point. Oh and this won't be compatible with code generation via Yul unless...\r\nwe implement this for the yul to evm code generation for `switch` statements in general :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034036174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034041638",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034041638",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034041638,
    "node_id": "IC_kwDOAm_5kc49ojkm",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T17:58:57Z",
    "updated_at": "2022-02-09T17:58:57Z",
    "author_association": "MEMBER",
    "body": "Ah, maybe I misread your algorithm: Why do you need `keccak`? Shouldn't the following also work:\r\n\r\n```\r\nlet n := mod(byte(0, mul(X, calldataload(0))), N)\r\ncodecopy(0, add(start, mul(n, 4)))\r\nlet d := shr(240, mload(0))\r\njump(d)\r\n```\r\n\r\nHere, `N` is the number of selectors and `X` is a number that needs to be brute-forced. instead of multiplying by `X` we could also use some other strategy or more complicated formulas.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034041638/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034045315",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034045315",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034045315,
    "node_id": "IC_kwDOAm_5kc49okeD",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T18:02:54Z",
    "updated_at": "2022-02-09T18:03:08Z",
    "author_association": "NONE",
    "body": "If 2 selectors are multiples of N, mulmod with any salt X will lead to a collision.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034045315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034050290",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034050290",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034050290,
    "node_id": "IC_kwDOAm_5kc49olry",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T18:08:08Z",
    "updated_at": "2022-02-09T18:08:08Z",
    "author_association": "MEMBER",
    "body": "> If 2 selectors are multiples of N, mulmod with any salt X will lead to a collision.\r\n\r\nOk, then it looks like we need to throw some xor and add operations in to the mix :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034050290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034057441",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034057441",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034057441,
    "node_id": "IC_kwDOAm_5kc49onbh",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T18:16:21Z",
    "updated_at": "2022-02-09T18:16:42Z",
    "author_association": "NONE",
    "body": "XOR could help in some cases. In general we don’t have any proof than solution will exist for some arbitrary form of hash function. I consider keccak as safe and reliable hash to use. But we should consider some other functions, maybe we can find something better.\r\n\r\nCase in which XOR is not working:\r\n> Imagine we have 16 selectors and 2 of them are 0xZZZZZZZ5 and 0xYYYYYYY5. Modulus of 16 is 5 for both. XORing both selectors with any salt will keep division remainder equal for them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034057441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034076693",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034076693",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034076693,
    "node_id": "IC_kwDOAm_5kc49osIV",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T18:39:17Z",
    "updated_at": "2022-02-09T18:39:17Z",
    "author_association": "MEMBER",
    "body": "What about fallback? This looks like it would map any other function to one of those N. I think this would need an extra check before the jump to ensure that the input selector actually matches the destination selector. If not, we should jump to fallback instead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034076693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034080008",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034080008",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034080008,
    "node_id": "IC_kwDOAm_5kc49os8I",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T18:43:27Z",
    "updated_at": "2022-02-09T18:43:27Z",
    "author_association": "NONE",
    "body": "What we are trying to build is this: https://en.wikipedia.org/wiki/Perfect_hash_function",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034080008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034093979",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034093979",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034093979,
    "node_id": "IC_kwDOAm_5kc49owWb",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T19:00:26Z",
    "updated_at": "2022-02-09T19:00:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "O(1) would be interesting, but what would be the magnitude of the constant cost? Would it be less than the current costs? It would be nice to see some numbers.\r\n\r\nI played around a bit with @k06a's script yesterday. For ~10 selectors it works well but any more than that the brute forcing can take a long time. I think most contracts have more than 10 selectors, so splitting into buckets and doing multiple dispatches would likely be necessary. Not sure if it needs to be done with multiple keccak like @k06a suggested, perhaps the cheapest approach is combination of binary search until reaching small enough buckets that we can generate and use an O(1) dispatch table.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034093979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034103169",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034103169",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034103169,
    "node_id": "IC_kwDOAm_5kc49oymB",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T19:11:34Z",
    "updated_at": "2022-02-09T19:11:34Z",
    "author_association": "NONE",
    "body": "@frangio, yes and formula is `n^n/n!` of bad salts per good salt. I think we can have this parameter adjustable, and use 6-7 by default. I will provide implementation for buckets soon, it’s almost the same - just need to count min and max selectors per bucket and check (max - min) <= 1",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034103169/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034107193",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034107193",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034107193,
    "node_id": "IC_kwDOAm_5kc49ozk5",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T19:16:36Z",
    "updated_at": "2022-02-09T19:16:36Z",
    "author_association": "NONE",
    "body": "@frangio I think we can one step solution for 50 gas, 2-step for 100, etc. Current dispatcher gas is around 150 for 10-method contract and 350 for 80-method contract, AFAIR.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034107193/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034253668",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034253668",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034253668,
    "node_id": "IC_kwDOAm_5kc49pXVk",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-09T22:21:13Z",
    "updated_at": "2022-02-09T22:21:13Z",
    "author_association": "NONE",
    "body": "Updated gist with code to support buckets: https://gist.github.com/k06a/737fd1f389bb6f2e66f0ef76ea73729b\r\nAdded computations for some cases:\r\n```solidity\r\n//\r\n// N = number of selectors\r\n// B = number of buckets\r\n//\r\n// All possible combinations: B^N\r\n// Valid combinations: N! / ((N/B)!)^B\r\n// Combinations per valid: B^N * ((N/B)!)^B / N!\r\n// Combinations per valid when B=N: N^N / N!\r\n//\r\n// Splitting 6 selectors into 6 buckets: 64 combinations\r\n// Splitting 7 selectors into 7 buckets: 163 combinations\r\n// Splitting 8 selectors into 8 buckets: 416 combinations\r\n// Splitting 9 selectors into 9 buckets: 1,067 combinations\r\n// Splitting 10 selectors into 10 buckets: 2,755 combinations\r\n// Splitting 11 selectors into 11 buckets: 7,147 combinations\r\n// Splitting 12 selectors into 12 buckets: 18,000 combinations\r\n// Splitting 13 selectors into 13 buckets: 48,000 combinations\r\n// Splitting 13 selectors into 13 buckets: 127,000 combinations\r\n// Splitting 15 selectors into 15 buckets: 334,000 combinations\r\n//\r\n// Splitting 40 selectors into 5 buckets of equal size: 1,187 combinations\r\n// Splitting 40 selectors into 8 buckets of equal size: 70,000 combinations\r\n// Splitting 100 selectors into 5 buckets of equal size: 7,204 combinations\r\n// Splitting 100 selectors into 4 buckets of equal size: 996 combinations\r\n// Splitting 100 selectors into 10 buckets of equal size: 42,000,000 combinations\r\n//\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034253668/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034642688",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034642688",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034642688,
    "node_id": "IC_kwDOAm_5kc49q2UA",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T08:43:04Z",
    "updated_at": "2022-02-10T08:43:04Z",
    "author_association": "MEMBER",
    "body": "> What about fallback? This looks like it would map any other function to one of those N. I think this would need an extra check before the jump to ensure that the input selector actually matches the destination selector. If not, we should jump to fallback instead.\r\n\r\nWhatever we do, we need at least one full equality comparison per function, even if the contract does not have a fallback function, because there are always \"false positives\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034642688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034643443",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034643443",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034643443,
    "node_id": "IC_kwDOAm_5kc49q2fz",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T08:43:53Z",
    "updated_at": "2022-02-10T08:43:53Z",
    "author_association": "MEMBER",
    "body": "> XOR could help in some cases. In general we don’t have any proof than solution will exist for some arbitrary form of hash function. I consider keccak as safe and reliable hash to use. But we should consider some other functions, maybe we can find something better.\r\n\r\nSure, it's just that keccak is relatively expensive and if there is a cheaper option, I would use the cheaper option.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034643443/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034716919",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034716919",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034716919,
    "node_id": "IC_kwDOAm_5kc49rIb3",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T09:56:18Z",
    "updated_at": "2022-02-10T09:56:18Z",
    "author_association": "NONE",
    "body": "@chriseth I agree keccak256 is expensive especially on the host side, is Solidity it is relatively cheap. I will try to produce another function. But we can start with keccak256.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034716919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034775911",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1034775911",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1034775911,
    "node_id": "IC_kwDOAm_5kc49rW1n",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T10:55:22Z",
    "updated_at": "2022-02-10T10:55:48Z",
    "author_association": "NONE",
    "body": "The probability of several selectors having the same remainders by multiple primary numbers is much lower. Moreover, we can select these primary numbers for a specific selector set exclusively. Maybe the following formula will work:\r\n```\r\n((selector % p1) * (selector % p2) * (selector % p3) * SALT) % N\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1034775911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1035294858",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1035294858",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1035294858,
    "node_id": "IC_kwDOAm_5kc49tViK",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T18:30:02Z",
    "updated_at": "2022-02-10T18:30:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "At that point I don't know if it will be cheaper than keccak.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1035294858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1035490128",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1035490128",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1035490128,
    "node_id": "IC_kwDOAm_5kc49uFNQ",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T20:42:00Z",
    "updated_at": "2022-02-10T20:42:00Z",
    "author_association": "NONE",
    "body": "Just played with this idea of multiple remainders - it has so many collisions, not possible to find such SALT in practice for 5-10 selectors. I afraid multiplication of remainders produces more possibilities to have the same remainder after MOD N.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1035490128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1035521478",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1035521478",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1035521478,
    "node_id": "IC_kwDOAm_5kc49uM3G",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T21:10:54Z",
    "updated_at": "2022-02-10T21:10:54Z",
    "author_association": "MEMBER",
    "body": "We could try dividing by the largest power of N that's a factor in any selector. I'd expect ``((selector / powerOfN) * X) % N`` to usually work out for some random X (maybe checking random primes would even be enough). The division can of course collapse selectors in some cases, but we don't need to use the same schema for all cases, but can just fall back to something else if it doesn't work...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1035521478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1035615486",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1035615486",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1035615486,
    "node_id": "IC_kwDOAm_5kc49ujz-",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T22:54:39Z",
    "updated_at": "2022-02-10T22:54:39Z",
    "author_association": "NONE",
    "body": "Found something interesting: http://stevehanov.ca/blog/?id=119",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1035615486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1036328170",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1036328170",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1036328170,
    "node_id": "IC_kwDOAm_5kc49xRzq",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-11T15:23:49Z",
    "updated_at": "2022-02-11T15:28:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@k06a Great reference.\r\n\r\nHowever, reading it made me realize that we're completely overthinking this. The function selector is already a random number. If we take `selector % N` we've got a pretty good hash function that splits in pretty small buckets. The cheapest dispatch function might be %N followed by linear if-else matches. It's not constant time, but it sounds like the difference would be up to a small constant with high probability.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1036328170/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1036517109",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1036517109",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1036517109,
    "node_id": "IC_kwDOAm_5kc49x_71",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-11T18:53:38Z",
    "updated_at": "2022-02-11T18:53:38Z",
    "author_association": "NONE",
    "body": "@frangio we could bruteforce some simple formula to ensure distribution is good enough, for example, each bucket have max 2 selectors. I think this can be achieved pretty fast even for huge number of selectors.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1036517109/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1036828387",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1036828387",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1036828387,
    "node_id": "IC_kwDOAm_5kc49zL7j",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-12T00:17:44Z",
    "updated_at": "2022-02-12T07:45:48Z",
    "author_association": "NONE",
    "body": "@frangio splitting selectors onto N bucket by just using remainder works as following for some 78-selectors contract:\r\n```\r\n{\r\n  '1': [ '0x28ffe6c8', '0xecc06c76' ],\r\n  '4': [ '0x44467b82' ],\r\n  '5': [ '0xbfe91734', '0x29fd9747' ],\r\n  '6': [ '0x754e29c7' ],\r\n  '7': [ '0xd1058e59', '0xf616a9c6', '0xd505accf' ],\r\n  '8': [ '0x2733ff81' ],\r\n  '9': [ '0x9cf9f4b1', '0xde00c0b4', '0x0b3b5df4', '0x70c86628' ],\r\n  '13': [ '0xb6b55f25' ],\r\n  '14': [ '0x70a08231' ],\r\n  '16': [ '0xf00363fe', '0x18160ddd' ],\r\n  '17': [ '0xc5ebeaec' ],\r\n  '21': [ '0x1988513b' ],\r\n  '22': [ '0x363eb6da', '0x4b75f54f', '0xe91f0ac6' ],\r\n  '23': [ '0x9b648279', '0xeeb74c9a' ],\r\n  '24': [ '0xc392f766' ],\r\n  '25': [ '0x935a8b84', '0xf40fe2d2' ],\r\n  '26': [ '0xfda0241d', '0xb1bd3517' ],\r\n  '28': [ '0xea91c053', '0x6d10dd20' ],\r\n  '30': [ '0x095ea7b3', '0x3fc8cef3' ],\r\n  '33': [ '0x5fc11161', '0xd6d75f51' ],\r\n  '34': [ '0xef1cd1cb' ],\r\n  '35': [ '0xdd62ed3e' ],\r\n  '37': [ '0x2f4f21e2', '0x3c968d3b' ],\r\n  '38': [ '0x06fdde03' ],\r\n  '39': [ '0xfe1195ec' ],\r\n  '40': [ '0x3644e515', '0xfd52a774' ],\r\n  '42': [ '0x3ba040c2' ],\r\n  '44': [ '0xee77ffcf', '0xba3ff097' ],\r\n  '47': [ '0x38c22694', '0x286e154d' ],\r\n  '48': [ '0x6a6da61e' ],\r\n  '49': [ '0xbe87321d', '0xa035b1fe' ],\r\n  '51': [ '0x1e83409a' ],\r\n  '52': [ '0x62273a93' ],\r\n  '55': [ '0x2e1a7d4d' ],\r\n  '56': [ '0x7ecebe00' ],\r\n  '57': [ '0xfc0c546a' ],\r\n  '58': [ '0x95d89b41' ],\r\n  '59': [ '0x6496649c' ],\r\n  '61': [ '0x35ec1a75', '0xd32b91dd', '0x371fd8e6', '0x9e4dec0c' ],\r\n  '62': [ '0xa9059cbb' ],\r\n  '65': [ '0x198f67ef', '0x23b872dd', '0x4774c812' ],\r\n  '66': [ '0x32d323a5' ],\r\n  '67': [ '0x39509351', '0xc8f56839' ],\r\n  '69': [ '0x313ce567', '0xa457c2d7', '0x205c2878' ],\r\n  '70': [ '0x23a27622' ],\r\n  '71': [ '0xa9355827' ],\r\n  '75': [ '0x1a686502' ],\r\n  '76': [ '0x555e7f4a' ],\r\n  '78': [ '0x4484bf97', '0xe0227cc5' ]\r\n}\r\n```\r\nI see it have only 49 non-empty slots\r\n\r\nI also tried to spend 1000 iterations to find SALT XORing which leads to a good distribution among N/2 slots:\r\n```\r\n  '0': [ '0x3644e515', '0x6496649c', '0x28ffe6c8' ],\r\n  '1': [ '0x095ea7b3', '0x2f4f21e2' ],\r\n  '2': [ '0x95d89b41' ],\r\n  '3': [ '0xfe1195ec', '0x18160ddd' ],\r\n  '5': [ '0xe0227cc5', '0x9e4dec0c', '0x3c968d3b' ],\r\n  '6': [ '0x4b75f54f', '0x1988513b' ],\r\n  '7': [ '0xfda0241d', '0x44467b82', '0x754e29c7' ],\r\n  '8': [ '0xdd62ed3e', '0x5fc11161', '0xa035b1fe' ],\r\n  '9': [ '0x3ba040c2', '0xa9355827' ],\r\n  '10': [ '0x06fdde03', '0x4774c812' ],\r\n  '11': [ '0xd505accf', '0xc8f56839', '0xf40fe2d2' ],\r\n  '12': [ '0x23b872dd' ],\r\n  '13': [ '0x555e7f4a', '0x2e1a7d4d' ],\r\n  '14': [ '0x35ec1a75', '0xd6d75f51', '0xfd52a774' ],\r\n  '16': [ '0xe91f0ac6', '0x1a686502' ],\r\n  '17': [ '0xea91c053' ],\r\n  '18': [ '0xb6b55f25', '0xd32b91dd' ],\r\n  '19': [ '0x935a8b84', '0xeeb74c9a' ],\r\n  '20': [ '0xc5ebeaec', '0xee77ffcf', '0x2733ff81' ],\r\n  '21': [ '0x70c86628', '0xfc0c546a', '0x3fc8cef3' ],\r\n  '22': [ '0x1e83409a', '0xb1bd3517', '0x363eb6da' ],\r\n  '24': [ '0x70a08231', '0xde00c0b4', '0xa9059cbb' ],\r\n  '26': [ '0xef1cd1cb' ],\r\n  '27': [ '0x313ce567', '0x0b3b5df4' ],\r\n  '28': [ '0xbe87321d' ],\r\n  '29': [ '0xf616a9c6', '0xf00363fe', '0x38c22694' ],\r\n  '30': [ '0x32d323a5', '0x9cf9f4b1', '0x205c2878' ],\r\n  '31': [ '0xd1058e59', '0xa457c2d7', '0x39509351' ],\r\n  '32': [ '0xba3ff097', '0xecc06c76' ],\r\n  '33': [ '0xbfe91734', '0x29fd9747', '0x23a27622' ],\r\n  '34': [ '0x371fd8e6' ],\r\n  '35': [ '0xc392f766', '0x6a6da61e', '0x6d10dd20' ],\r\n  '37': [ '0x4484bf97', '0x9b648279', '0x62273a93' ],\r\n  '38': [ '0x198f67ef', '0x7ecebe00', '0x286e154d' ]\r\n```\r\n\r\nScript used:\r\n```js\r\nlet min = selectors.length;\r\nfor (let salt = 1; salt < 10000; salt++) {\r\n    let dict = {};\r\n    let max = 0;\r\n    for (let s of selectors) {\r\n        let key = ((s ^ salt) >>> 0) % Math.trunc(selectors.length / 2);\r\n        dict[key] = (dict[key] || []).concat([s]);\r\n        max = Math.max(max, dict[key].length);\r\n    }\r\n    min = Math.min(min, max);\r\n\r\n    if (max <= 3) {\r\n        console.log('Found salt =', salt, ' max =', max, ' dict =', dict);\r\n        break;\r\n    }\r\n}\r\nconsole.log('min =', min);\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1036828387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1036976442",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1036976442",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1036976442,
    "node_id": "IC_kwDOAm_5kc49zwE6",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-12T03:40:46Z",
    "updated_at": "2022-02-12T03:40:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's great! I wasn't considering that empty buckets are a problem. Using xor for salting makes a lot of sense.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1036976442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1037246351",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1037246351",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1037246351,
    "node_id": "IC_kwDOAm_5kc490x-P",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-12T14:50:03Z",
    "updated_at": "2022-02-12T15:01:42Z",
    "author_association": "NONE",
    "body": "Got advice from @snjax that `(selector XOR salt) % n` could match for any `salt` if `n` is some power of 2 like `2**k`.\r\n\r\nIt makes much more sense to use:\r\n```\r\n((selector XOR salt) % prime) % n\r\n```\r\n\r\nAnd I would not suggest to use MUL instead of XOR, because it could keep remainder the same in some cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1037246351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060840422",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1060840422",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1060840422,
    "node_id": "IC_kwDOAm_5kc4_OyPm",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-07T15:56:12Z",
    "updated_at": "2022-03-07T15:56:12Z",
    "author_association": "MEMBER",
    "body": "Has there been any progress on this in the last days? :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060840422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060904545",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1060904545",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1060904545,
    "node_id": "IC_kwDOAm_5kc4_PB5h",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-07T16:53:55Z",
    "updated_at": "2022-03-07T16:53:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "My current thinking is that we should use the hash function `(selector ^ salt) % n` but `n` should not necessarily be the number of functions (call it `N`), and potentially several values of `n` should be tried. The result will not be a perfect hash function but one where \"buckets\" are small enough that searching within that bucket still is an optimization wrt status quo.\r\n\r\nA remaining question for me is what range of `n` it makes sense to look at. In part this question relates to what we want to optimize for. For large `n` it will be faster to find a salt that results in less collisions (smaller buckets), but there will also be more \"empty space\" in the bytecode which may impact deployment cost.\r\n\r\nI started [this document](https://observablehq.com/@frangio/constant-time-function-dispatch) to analyze the probabilty distribution of bucket sizes for combinations of `N` and `n` (sorry different variable names in the doc).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060904545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060909967",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1060909967",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1060909967,
    "node_id": "IC_kwDOAm_5kc4_PDOP",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-07T16:59:35Z",
    "updated_at": "2022-03-07T16:59:35Z",
    "author_association": "NONE",
    "body": "I found a relatively cheap way to build a perfect hash function but this function itself is not O(1):\r\n- Find minimal M that every SELECTOR % M is disctinct.\r\n- Find some S that (SELECTOR + S) % M have M2 < M giving different rests, repeat\r\n\r\nSo the function will look like the following:\r\n```\r\nx = addmod(selector, s1, m1)\r\nx = addmod(x, s2, m2)\r\nx = addmod(x, s3, m3)\r\n...\r\n```\r\n\r\nIt will come to Mx = N relatively fast even on a huge number of selectors. But the execution of such hash function in EVM could take 100-200 gas for 100 selectors. I don't like it, so still looking for a better solution.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1060909967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1070771336",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1070771336",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1070771336,
    "node_id": "IC_kwDOAm_5kc4_0qyI",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-17T10:37:09Z",
    "updated_at": "2022-03-17T10:37:09Z",
    "author_association": "MEMBER",
    "body": "The \"JUMP(READ(table_start + index))\" in the issue description is a bit too optimistic. I wrote some pseudo-assembly to see what the rest of the boilerplate code apart from computing a good hash value is. This assumes that this mechanism is applied to code generation for yul switch statements in general, and not just the external dispatch.\r\n\r\nIn the following, the stack grows to the right.\r\n\r\n```\r\n//   we assume the value of the switch statement is on top of the stack\r\n// stack: value\r\n//   by some method, we compute a better discriminator (perfect hash function or whatever)\r\n//   main requirement: The value is bounded by a \"small\" number.\r\n// stack: value discriminator\r\n//   compute index for jump table\r\npush <jump_table_offset_in_code> add\r\n// stack: value jump_table_pointer\r\n//   we need to access the code but should not destroy current\r\n//   memory contents, so we store it on the stack\r\npush 0 mload swap1\r\n// stack: vaule mem_stored jump_table_pointer\r\npush 32 swap1 push 0 codecopy push 0 mload\r\n// stack: value mem_stored jump_target\r\nswap1 push0 mstore\r\n// stack: value jump_target\r\njump\r\n\r\n// FOR EACH CASE:\r\n//    There can be \"false positives\". If the value is wrong,\r\n//    we need to jump back to the default case.\r\n//    This can be extended to multiple values per discriminator as well.\r\n<jump_target:>\r\npush <case value> sub <default_tag> jumpi\r\n// now follows the code of the case block\r\n\r\n// jump over the other cases\r\nafter_switch_tag jump\r\n\r\ndefault_tag:\r\n// code of the default case (if it exists)\r\n\r\nafter_switch_tag:\r\n// code following the switch statement\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1070771336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1079694437",
    "html_url": "https://github.com/ethereum/solidity/issues/12650#issuecomment-1079694437",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12650",
    "id": 1079694437,
    "node_id": "IC_kwDOAm_5kc5AWtRl",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-26T13:27:31Z",
    "updated_at": "2022-03-26T13:27:31Z",
    "author_association": "NONE",
    "body": "We could just use `keccak256(selector) % m` where `m > n` and requires no salt brute-forcing. It seems probability of the collision for n = 100 and m = 115 is around 6% and falling dramatically during increasing of m.\r\n\r\nI think formula of the collision probability is the following:\r\n```\r\nm^n / (n! * m!/(n! * (m-n)!) * m^(m-n))\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1079694437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
