{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9806",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9806/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9806/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9806/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9806",
  "id": 701367818,
  "node_id": "MDU6SXNzdWU3MDEzNjc4MTg=",
  "number": 9806,
  "title": "[SMTChecker] Validate the eth2 deposit contract",
  "user": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-09-14T19:30:44Z",
  "updated_at": "2021-04-20T14:50:49Z",
  "closed_at": "2021-01-12T11:35:23Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "https://github.com/axic/eth2-deposit-contract/blob/master/deposit_contract.sol\r\n\r\nIt would be nice to be able to \"verify\" the deposit contract, or at least to remove the warnings for unimplemented features.\r\n\r\n- [x] checked arithmetic https://github.com/ethereum/solidity/issues/10066\r\n- [x] in place constants https://github.com/ethereum/solidity/issues/10631\r\n- [x] `type(T).max` (#9780)\r\n- [x] `type(I).interfaceId` (#9781)\r\n- [x] type conversions with literals (e.g. `bytes24(0)`) (#9789)\r\n- [x] truncating type conversions (e.g. `uint64(deposit_count)` where `deposit_count` is `uint256`) (#5808 #5795)\r\n- [x] indexed access of fixed bytes (#7663)\r\n- [x] memory allocation (`new bytes()`) (#6050)\r\n- [x] abi.encodePacked (#5264)\r\n- [x] sha256 https://github.com/ethereum/solidity/issues/9908\r\n- [x] bytes slices (e.g. `signature[64:]`) (#9885)\r\n- [x] constants (#8669)\r\n- [x] events (#9785)\r\n- [x] Handle `return` properly (https://github.com/ethereum/solidity/issues/9103)\r\n\r\n---\r\n\r\nFor reference, this is the status as of Oct 17 (source was modified to remove the constant):\r\n```\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> deposit_contract_r2.sol:87:31:\r\n   |\r\n87 |                 node = sha256(abi.encodePacked(branch[height], node));\r\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> deposit_contract_r2.sol:89:31:\r\n   |\r\n89 |                 node = sha256(abi.encodePacked(node, zero_hashes[height]));\r\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> deposit_contract_r2.sol:92:23:\r\n   |\r\n92 |         return sha256(abi.encodePacked(\r\n   |                       ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:131:38:\r\n    |\r\n131 |         bytes32 pubkey_root = sha256(abi.encodePacked(pubkey, bytes16(0)));\r\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:133:20:\r\n    |\r\n133 |             sha256(abi.encodePacked(signature[:64])),\r\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:134:20:\r\n    |\r\n134 |             sha256(abi.encodePacked(signature[64:], bytes32(0)))\r\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:132:41:\r\n    |\r\n132 |         bytes32 signature_root = sha256(abi.encodePacked(\r\n    |                                         ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:137:20:\r\n    |\r\n137 |             sha256(abi.encodePacked(pubkey_root, withdrawal_credentials)),\r\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:138:20:\r\n    |\r\n138 |             sha256(abi.encodePacked(amount, bytes24(0), signature_root))\r\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:136:31:\r\n    |\r\n136 |         bytes32 node = sha256(abi.encodePacked(\r\n    |                               ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:155:27:\r\n    |\r\n155 |             node = sha256(abi.encodePacked(branch[height], node));\r\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: BMC: Assertion violation might happen here.\r\n   --> deposit_contract_r2.sol:160:9:\r\n    |\r\n160 |         assert(false);\r\n    |         ^^^^^^^^^^^^^\r\nNote: \r\nNote that some information is erased after the execution of loops.\r\nYou can re-introduce information using require().\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> deposit_contract_r2.sol:79:46:\r\n   |\r\n79 |             zero_hashes[height + 1] = sha256(abi.encodePacked(zero_hashes[height], zero_hashes[height]));\r\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nAnd with the \"constant\" put back in place:\r\n```\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> deposit_contract_r2.sol:87:31:\r\n   |\r\n87 |                 node = sha256(abi.encodePacked(branch[height], node));\r\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> deposit_contract_r2.sol:89:31:\r\n   |\r\n89 |                 node = sha256(abi.encodePacked(node, zero_hashes[height]));\r\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> deposit_contract_r2.sol:92:23:\r\n   |\r\n92 |         return sha256(abi.encodePacked(\r\n   |                       ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:131:38:\r\n    |\r\n131 |         bytes32 pubkey_root = sha256(abi.encodePacked(pubkey, bytes16(0)));\r\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:133:20:\r\n    |\r\n133 |             sha256(abi.encodePacked(signature[:64])),\r\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:134:20:\r\n    |\r\n134 |             sha256(abi.encodePacked(signature[64:], bytes32(0)))\r\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:132:41:\r\n    |\r\n132 |         bytes32 signature_root = sha256(abi.encodePacked(\r\n    |                                         ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:137:20:\r\n    |\r\n137 |             sha256(abi.encodePacked(pubkey_root, withdrawal_credentials)),\r\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:138:20:\r\n    |\r\n138 |             sha256(abi.encodePacked(amount, bytes24(0), signature_root))\r\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:136:31:\r\n    |\r\n136 |         bytes32 node = sha256(abi.encodePacked(\r\n    |                               ^ (Relevant source part starts here and spans across multiple lines).\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n   --> deposit_contract_r2.sol:155:27:\r\n    |\r\n155 |             node = sha256(abi.encodePacked(branch[height], node));\r\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: BMC: Assertion violation might happen here.\r\n   --> deposit_contract_r2.sol:160:9:\r\n    |\r\n160 |         assert(false);\r\n    |         ^^^^^^^^^^^^^\r\nNote: \r\nNote that some information is erased after the execution of loops.\r\nYou can re-introduce information using require().\r\n\r\nWarning: Assertion checker does not yet implement this operator.\r\n  --> deposit_contract_r2.sol:68:39:\r\n   |\r\n68 |     uint constant MAX_DEPOSIT_COUNT = 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1;\r\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: Assertion checker does not yet implement this type of function call.\r\n  --> deposit_contract_r2.sol:79:46:\r\n   |\r\n79 |             zero_hashes[height + 1] = sha256(abi.encodePacked(zero_hashes[height], zero_hashes[height]));\r\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nWarning: BMC: Underflow (resulting value less than 0) happens here.\r\n  --> deposit_contract_r2.sol:68:39:\r\n   |\r\n68 |     uint constant MAX_DEPOSIT_COUNT = 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1;\r\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nNote: Counterexample:\r\n  <result> = (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)\r\n  DEPOSIT_CONTRACT_TREE_DEPTH = 32\r\n  MAX_DEPOSIT_COUNT = 0\r\n  deposit_count = 0\r\n  height = 0\r\n\r\nNote: Callstack:\r\nNote: \r\nNote that some information is erased after the execution of loops.\r\nYou can re-introduce information using require().\r\n\r\n\r\n```\r\n",
  "closed_by": {
    "login": "leonardoalt",
    "id": 504195,
    "node_id": "MDQ6VXNlcjUwNDE5NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/leonardoalt",
    "html_url": "https://github.com/leonardoalt",
    "followers_url": "https://api.github.com/users/leonardoalt/followers",
    "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
    "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
    "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
    "repos_url": "https://api.github.com/users/leonardoalt/repos",
    "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9806/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9806/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/747955050",
    "html_url": "https://github.com/ethereum/solidity/issues/9806#issuecomment-747955050",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9806",
    "id": 747955050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0Nzk1NTA1MA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-18T08:55:21Z",
    "updated_at": "2020-12-18T08:55:21Z",
    "author_association": "MEMBER",
    "body": "All the features were merged!\r\n\r\nI'd still keep this issue open, because:\r\n\r\nThe SMTChecker creates a bunch of verification targets: `assert(false)` and some arithmetic checks. Unfortunately I don't think we'll be able to prove that `assert(false)` is unreachable, because this requires Spacer to infer a nonlinear invariant for the loop, which I don't think will happen.\r\n\r\nHowever, it should be able to prove the arithmetic checks. Right now it's not able to, for any of them.\r\nMy analysis is that currently it cannot prove termination of the loop, which blocks the inductiveness of the safe arithmetic properties. Proving termination of the loop should be easy though: even if `return` is never reached, the loop has at most 32 iterations, so it should be able to ainfer that the loop can at least run entirely and go on with the function (reaching assert(false)).\r\nCurrently, it's not. Constants are still a problem. Even though the constant is assigned at deployment, it needs to be \"carried over\" by the predicates, and this information is lost at some point. Spacer has some new work fixing that, but it won't be available until z3's next version. One easy fix one our side that makes sense anyway is replacing the constants by their values in place, like the code generator does. Another small but annoying issue is wrapping arithmetic inside loops (`height++`). This should be fixed by supporting checked arithmetic.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/747955050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758597783",
    "html_url": "https://github.com/ethereum/solidity/issues/9806#issuecomment-758597783",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9806",
    "id": 758597783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODU5Nzc4Mw==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-12T11:35:23Z",
    "updated_at": "2021-01-12T11:35:23Z",
    "author_association": "MEMBER",
    "body": "Running current develop on vanilla `deposit.sol` proves all targets but the `assert`, which is actually the best we can expect due to the `assert(false)` needing a nonlinear inductive invariant which we don't expect Spacer to find. All the language features are supported.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/758597783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
