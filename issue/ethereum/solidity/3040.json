{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3040",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3040/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3040/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3040/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3040",
  "id": 263416658,
  "node_id": "MDU6SXNzdWUyNjM0MTY2NTg=",
  "number": 3040,
  "title": "Adding payable to constructor of contract causes deployment cost to skyrocket",
  "user": {
    "login": "dwalintukan",
    "id": 4350404,
    "node_id": "MDQ6VXNlcjQzNTA0MDQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4350404?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dwalintukan",
    "html_url": "https://github.com/dwalintukan",
    "followers_url": "https://api.github.com/users/dwalintukan/followers",
    "following_url": "https://api.github.com/users/dwalintukan/following{/other_user}",
    "gists_url": "https://api.github.com/users/dwalintukan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dwalintukan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dwalintukan/subscriptions",
    "organizations_url": "https://api.github.com/users/dwalintukan/orgs",
    "repos_url": "https://api.github.com/users/dwalintukan/repos",
    "events_url": "https://api.github.com/users/dwalintukan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dwalintukan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2017-10-06T11:33:51Z",
  "updated_at": "2018-07-24T10:34:26Z",
  "closed_at": "2017-12-02T11:47:27Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I think I've found a bug.\r\n\r\nI have a working contract that deploys fine using Kovan testnet & Remix.\r\n**Gas Deployment cost: 0.02820 ETH**\r\n```\r\nfunction TopicEvent(\r\n        address _owner, \r\n        address _resultSetter, \r\n        bytes32 _name, \r\n        bytes32[] _resultNames, \r\n        uint256 _bettingEndBlock) \r\n    {\r\n        require(_owner != 0);\r\n        require(_resultSetter != 0);\r\n        require(_name.length > 0);\r\n        require(_resultNames.length > 1);\r\n        require(_bettingEndBlock > block.number);\r\n\r\n        owner = _owner;\r\n        resultSetter = _resultSetter;\r\n        name = _name;\r\n\r\n        for (uint i = 0; i < _resultNames.length; i++) {\r\n            results.push(Result({\r\n            name: _resultNames[i],\r\n            balance: 0\r\n            }));\r\n        }\r\n\r\n        bettingEndBlock = _bettingEndBlock;\r\n\r\n        TopicCreated(name);\r\n    }\r\n```\r\n\r\nAfter adding the `payable` keyword to the constructor: \r\n**gas deployment costs ~100 ETH**.\r\n\r\nI've tested this with two different contracts. Why is this happening?",
  "closed_by": {
    "login": "dwalintukan",
    "id": 4350404,
    "node_id": "MDQ6VXNlcjQzNTA0MDQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4350404?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dwalintukan",
    "html_url": "https://github.com/dwalintukan",
    "followers_url": "https://api.github.com/users/dwalintukan/followers",
    "following_url": "https://api.github.com/users/dwalintukan/following{/other_user}",
    "gists_url": "https://api.github.com/users/dwalintukan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dwalintukan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dwalintukan/subscriptions",
    "organizations_url": "https://api.github.com/users/dwalintukan/orgs",
    "repos_url": "https://api.github.com/users/dwalintukan/repos",
    "events_url": "https://api.github.com/users/dwalintukan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dwalintukan/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3040/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3040/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/334732652",
    "html_url": "https://github.com/ethereum/solidity/issues/3040#issuecomment-334732652",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3040",
    "id": 334732652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDczMjY1Mg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T11:46:41Z",
    "updated_at": "2017-10-06T11:46:41Z",
    "author_association": "MEMBER",
    "body": "Can you please copy in your entire contract triggering this and all the version of the tools used (Solidity, Remix/Geth, etc.)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/334732652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/334829914",
    "html_url": "https://github.com/ethereum/solidity/issues/3040#issuecomment-334829914",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3040",
    "id": 334829914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDgyOTkxNA==",
    "user": {
      "login": "dwalintukan",
      "id": 4350404,
      "node_id": "MDQ6VXNlcjQzNTA0MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4350404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwalintukan",
      "html_url": "https://github.com/dwalintukan",
      "followers_url": "https://api.github.com/users/dwalintukan/followers",
      "following_url": "https://api.github.com/users/dwalintukan/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwalintukan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwalintukan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwalintukan/subscriptions",
      "organizations_url": "https://api.github.com/users/dwalintukan/orgs",
      "repos_url": "https://api.github.com/users/dwalintukan/repos",
      "events_url": "https://api.github.com/users/dwalintukan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwalintukan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T18:08:48Z",
    "updated_at": "2017-10-06T18:10:43Z",
    "author_association": "NONE",
    "body": "**Solidity Version on Remix: 0.4.17+commit.bdeb9e52.Emscripten.clang**\r\n**My Machine: 0.4.16+commit.d7661dd9.Emscripten.clang**\r\n**TestRPC: 4.1.1**\r\n\r\n**My exact steps to figuring this out:**\r\n\r\n**Local Testing first**\r\nOn my local machine and using `TestRPC`, the following contract would compile, migrate, and pass all the tests. With the `payable` keyword, but without the `address _addressManager` param in the constructor (first param).\r\n\r\nOnce I added the `address _addressManager`, the tests would crash with an `Out of Gas exception`. I commented out the code that used this param and it still threw the OOG exception. Literally, just passing in the address would cause the OOG exception (even if I didn't do anything with the address). I have tested this thoroughly and have verified this (both having the address param and without).\r\n\r\nNext I tried to increasing the block gas limit on TestRPC to 10,000,000 and sending the max limit of gas when creating the contract in my tests with the `address _addressManager` param. Still I received the OOG exception.\r\n\r\n**Remix Testing**\r\nThis lead me to do some further testing on Remix, Parity, and deploying on the Kovan testnet. I just copied my working code (without the `address _addressManager` param) to Remix and tried deploying, but it was asking me for 100 ETH to deploy the contract. So I started removing constructor params and contract code to see if anything would make it go down. Until I realized it was the `payable` keyword in the constructor. \r\n\r\nI then re-copied all the contract code to Remix (with the `address _addressManager` param) and removed the `payable` keyword. Then deployed from Remix and Parity allowed me to deploy it with ~0.02 ETH.\r\n\r\n**Conclusions**\r\nSo my findings were:\r\n1. on my local machine, adding the `address _addressManager` param would cause my tests to fail with an OOG exception. But the `payable` was allowed.\r\n2. on Remix/Kovan testnet, the `payable` keyword caused my deployment costs from ~0.02 ETH to jump to 100 ETH. But the `address _addressManager` logic worked fine.\r\n\r\n\r\n\r\n**Oracle.sol**\r\n\r\n```\r\npragma solidity ^0.4.15;\r\n\r\nimport \"../libs/SafeMath.sol\";\r\nimport \"../addressmanager/IAddressManager.sol\";\r\n\r\ncontract Oracle {\r\n    using SafeMath for uint256;\r\n\r\n    struct Participant {\r\n        uint256 stakeContributed;\r\n        bool didSetResult;\r\n        uint8 resultIndex;\r\n        bool didWithdrawEarnings;\r\n    }\r\n\r\n    struct Result {\r\n        bytes32 name;\r\n        uint256 votedBalance;\r\n    }\r\n\r\n    uint256 public constant nativeDecimals = 18; // Number of decimals of token used to create Oracle\r\n    uint256 public constant botDecimals = 8; // Number of decimals for BOT\r\n    uint256 public constant minBaseReward = 1 * (10**nativeDecimals); // Minimum amount needed to create Oracle\r\n    uint256 public constant maxStakeContribution = 101 * (10**botDecimals); // Maximum amount of BOT staking contributions allowed\r\n\r\n    bytes public eventName;\r\n    uint256 public eventBettingEndBlock;\r\n    uint256 public decisionEndBlock; // Block number when Oracle participants can no longer set a result\r\n    uint256 public arbitrationOptionEndBlock; // Block number when Oracle participants can no longer start arbitration\r\n    uint256 public totalStakeContributed;\r\n\r\n    IAddressManager private addressManager;\r\n    Result[] private eventResults;\r\n    mapping(address => Participant) private participants;\r\n\r\n    // Modifiers\r\n    modifier validResultIndex(uint _resultIndex) {\r\n        require(_resultIndex >= 0);\r\n        require(_resultIndex <= eventResults.length - 1);\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event OracleCreated(bytes _eventName, bytes32[] _eventResultNames, uint256 _eventBettingEndBlock, \r\n        uint256 _decisionEndBlock, uint256 _arbitrationOptionEndBlock, uint256 _baseRewardAmount);\r\n    event ParticipantVoted(address _participant, uint256 _stakeContributed, uint8 _resultIndex);\r\n    event EarningsWithdrawn(uint256 _amountWithdrawn);\r\n\r\n    /// @notice Creates new Oracle contract. Requires payment of the minBaseReward. \r\n    /// @param _eventName The name of the Event this Oracle will arbitrate.\r\n\r\n    function Oracle(\r\n        address _addressManager,\r\n        bytes _eventName,\r\n        bytes32[] _eventResultNames,\r\n        uint256 _eventBettingEndBlock,\r\n        uint256 _decisionEndBlock,\r\n        uint8 _averageBlockTime,\r\n        uint256 _arbitrationOptionMinutes) \r\n        public\r\n        payable\r\n    {\r\n        require(_addressManager != address(0));\r\n        require(msg.value >= minBaseReward);\r\n        require(_eventName.length > 0);\r\n        require(_eventResultNames.length > 1);\r\n        require(_decisionEndBlock > _eventBettingEndBlock);\r\n        require(_averageBlockTime > 0);\r\n        require(_arbitrationOptionMinutes > 0);\r\n\r\n        addressManager = IAddressManager(_addressManager);\r\n        eventName = _eventName;\r\n\r\n        for (uint i = 0; i < _eventResultNames.length; i++) {\r\n            eventResults.push(Result({\r\n                name: _eventResultNames[i],\r\n                votedBalance: 0\r\n            }));\r\n        }\r\n\r\n        eventBettingEndBlock = _eventBettingEndBlock;\r\n        decisionEndBlock = _decisionEndBlock;\r\n\r\n        uint256 arbitrationBlocks = getArbitrationOptionBlocks(_averageBlockTime, _arbitrationOptionMinutes);\r\n        arbitrationOptionEndBlock = decisionEndBlock.add(arbitrationBlocks);\r\n        assert(arbitrationOptionEndBlock > decisionEndBlock);\r\n\r\n        OracleCreated(_eventName, _eventResultNames, _eventBettingEndBlock, _decisionEndBlock, \r\n            arbitrationOptionEndBlock, msg.value);\r\n    }\r\n\r\n    function() payable {\r\n    }\r\n\r\n    /// @notice Vote an Event result which requires BOT payment.\r\n    /// @param _eventResultIndex The Event result which is being voted on.\r\n    function voteResult(uint8 _eventResultIndex) \r\n        public \r\n        payable \r\n        validResultIndex(_eventResultIndex) \r\n    {\r\n        require(msg.value > 0);\r\n        require(block.number >= eventBettingEndBlock);\r\n        require(block.number < decisionEndBlock);\r\n        require(!participants[msg.sender].didSetResult);\r\n\r\n        Participant storage participant = participants[msg.sender];\r\n        participant.stakeContributed = participant.stakeContributed.add(msg.value);\r\n        participant.resultIndex = _eventResultIndex;\r\n        participant.didSetResult = true;\r\n\r\n        eventResults[_eventResultIndex].votedBalance = eventResults[_eventResultIndex].votedBalance.add(msg.value);\r\n        totalStakeContributed = totalStakeContributed.add(msg.value);\r\n\r\n        ParticipantVoted(msg.sender, msg.value, _eventResultIndex);\r\n    }\r\n\r\n    /// @notice Withdraw earnings if you picked the correct result.\r\n    function withdrawEarnings() public {\r\n        require(block.number >= arbitrationOptionEndBlock);\r\n        require(participants[msg.sender].stakeContributed > 0);\r\n        require(totalStakeContributed > 0);\r\n        require(!participants[msg.sender].didWithdrawEarnings);\r\n\r\n        uint256 withdrawAmount = getEarningsAmount();\r\n        participants[msg.sender].didWithdrawEarnings = true;\r\n\r\n        require(withdrawAmount > 0);\r\n        msg.sender.transfer(withdrawAmount);\r\n\r\n        EarningsWithdrawn(withdrawAmount);\r\n    }\r\n\r\n    /// @notice Gets the Event result name given a valid index.\r\n    /// @param _eventResultIndex The index of the wanted result name.\r\n    /// @return The name of the Event result.\r\n    function getEventResultName(uint8 _eventResultIndex) \r\n        public \r\n        validResultIndex(_eventResultIndex) \r\n        constant \r\n        returns (bytes32) \r\n    {\r\n        return eventResults[_eventResultIndex].name;\r\n    }\r\n\r\n    /// @notice Gets the number of blocks allowed for arbitration.\r\n    /// @param _averageBlockTime The current average mining block time.\r\n    /// @param _arbitrationOptionMinutes The number of minutes allowed for initiating arbitration.\r\n    function getArbitrationOptionBlocks(\r\n        uint8 _averageBlockTime, \r\n        uint256 _arbitrationOptionMinutes) \r\n        public \r\n        constant \r\n        returns(uint256) \r\n    {\r\n        return _arbitrationOptionMinutes.div(uint256(_averageBlockTime));\r\n    }\r\n\r\n    /// @notice Gets the stake contributed by the Oracle participant.\r\n    /// @return The amount of stake contributed by the Oracle participant.\r\n    function getStakeContributed() public constant returns(uint256) {\r\n        return participants[msg.sender].stakeContributed;\r\n    }\r\n\r\n    /// @notice Shows if the Oracle participant has voted yet.\r\n    /// @return Flag that shows if the Oracle participant has voted yet.\r\n    function didSetResult() public constant returns(bool) {\r\n        return participants[msg.sender].didSetResult;\r\n    }\r\n\r\n    /// @notice Gets the result index the Oracle participant previously voted on.\r\n    /// @return The voted result index.\r\n    function getVotedResultIndex() public constant returns(uint8) {\r\n        require(participants[msg.sender].didSetResult);\r\n        return participants[msg.sender].resultIndex;\r\n    }\r\n\r\n    /// @notice Gets the final result index set by the Oracle participants.\r\n    /// @return The index of the final result set by Oracle participants.\r\n    function getFinalResultIndex() public constant returns (uint8) {\r\n        require(block.number >= decisionEndBlock);\r\n\r\n        uint8 finalResultIndex = 0;\r\n        uint256 winningIndexAmount = 0;\r\n        for (uint8 i = 0; i < eventResults.length; i++) {\r\n            uint256 votedBalance = eventResults[i].votedBalance;\r\n            if (votedBalance > winningIndexAmount) {\r\n                winningIndexAmount = votedBalance;\r\n                finalResultIndex = i;\r\n            }\r\n        }\r\n\r\n        return finalResultIndex;\r\n    }\r\n\r\n    /// @notice Gets the amount of earnings you can withdraw.\r\n    /// @return The amount of earnings you can withdraw.\r\n    function getEarningsAmount() public constant returns(uint256) {\r\n        uint256 stakeContributed = participants[msg.sender].stakeContributed;\r\n        if (stakeContributed == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (!participants[msg.sender].didSetResult) {\r\n            return 0;\r\n        }\r\n\r\n        if (participants[msg.sender].didWithdrawEarnings) {\r\n            return 0;\r\n        }\r\n\r\n        uint8 finalResultIndex = getFinalResultIndex();\r\n        if (participants[msg.sender].resultIndex != finalResultIndex) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 winningResultContributions = eventResults[finalResultIndex].votedBalance;\r\n        uint256 losingResultContributions = totalStakeContributed.sub(winningResultContributions);\r\n        return stakeContributed.mul(losingResultContributions).div(winningResultContributions).add(stakeContributed);\r\n    }\r\n}\r\n\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/334829914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/347707732",
    "html_url": "https://github.com/ethereum/solidity/issues/3040#issuecomment-347707732",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3040",
    "id": 347707732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzcwNzczMg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T00:09:53Z",
    "updated_at": "2017-11-29T00:09:53Z",
    "author_association": "MEMBER",
    "body": "@dwalintukan I couldn't reproduce it. Is it still an issue?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/347707732/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/348686826",
    "html_url": "https://github.com/ethereum/solidity/issues/3040#issuecomment-348686826",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3040",
    "id": 348686826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODY4NjgyNg==",
    "user": {
      "login": "dwalintukan",
      "id": 4350404,
      "node_id": "MDQ6VXNlcjQzNTA0MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4350404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwalintukan",
      "html_url": "https://github.com/dwalintukan",
      "followers_url": "https://api.github.com/users/dwalintukan/followers",
      "following_url": "https://api.github.com/users/dwalintukan/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwalintukan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwalintukan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwalintukan/subscriptions",
      "organizations_url": "https://api.github.com/users/dwalintukan/orgs",
      "repos_url": "https://api.github.com/users/dwalintukan/repos",
      "events_url": "https://api.github.com/users/dwalintukan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwalintukan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-02T11:47:12Z",
    "updated_at": "2017-12-02T11:47:26Z",
    "author_association": "NONE",
    "body": "@axic I actually just did a workaround and sent value after constructor was called. Going to close it for now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/348686826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
