{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11555",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11555/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11555/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11555/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11555",
  "id": 924234228,
  "node_id": "MDU6SXNzdWU5MjQyMzQyMjg=",
  "number": 11555,
  "title": "[Docs] Builtin function argument evaluation order is different between legacy and new code gen",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 275027668,
      "node_id": "MDU6TGFiZWwyNzUwMjc2Njg=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/documentation%20:book:",
      "name": "documentation :book:",
      "color": "006b75",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2021-06-17T18:49:52Z",
  "updated_at": "2021-07-05T11:52:41Z",
  "closed_at": "2021-07-05T11:52:41Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "We claim in the IR breaking changes docs that function arguments are evaluated the same way by both code gens.\r\n\r\nSee https://github.com/ethereum/solidity/blob/6e74df8ab6d3a0b24adf8eed50d2dfb1d6982e03/docs/ir/ir-breaking-changes.rst\r\n\r\nHowever, arguments passed to builtin functions (Global variables to be specific, see https://docs.soliditylang.org/en/v0.8.5/cheatsheet.html#global-variables) such as `addmod` and `mulmod` are evaluated inconsistently (left-to-right by Sol->Yul and right-to-left by legacy).\r\n\r\nThe following test demonstrates this nicely. The functions `test` and `add` are user-defined functions, whose return value is consistent with both code gens evaluating args the same way.\r\n\r\nHowever, the function `f()` that invokes `addmod` returns `5` for legacy code gen and `3` for new code gen. So, the test partially passes (i.e., `test(uint8, uint8)` call passes via both codegens) but fails for the `addmod` invocation.\r\n\r\nPerhaps this is a corner case that needs clarification in the breaking changes docs. I will use the documentation label for this issue unless someone thinks otherwise.\r\n\r\n```\r\ncontract C {\r\n  uint x = 0;\r\n  function g() internal returns (uint) {\r\n    return ++x;\r\n  }\r\n  function f() external returns (uint) {\r\n    return addmod(g(), g(), g() + 17);\r\n  }\r\n  function add(uint8 _a, uint8 _b) public pure returns (uint8) {\r\n    return _a + _b;\r\n  }\r\n  function test(uint8 _a, uint8 _b) public pure returns (uint8) {\r\n    return add(++_a + ++_b, _a + _b);\r\n  }\r\n}\r\n// ====\r\n// compileViaYul: also\r\n// ----\r\n// test(uint8,uint8): 1, 2 -> 10\r\n// f() -> 5\r\n```",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11555/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11555/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/863537049",
    "html_url": "https://github.com/ethereum/solidity/issues/11555#issuecomment-863537049",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11555",
    "id": 863537049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzUzNzA0OQ==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-17T20:19:15Z",
    "updated_at": "2021-06-17T20:43:40Z",
    "author_association": "MEMBER",
    "body": "I am not able to reproduce this via Remix. So this looks like a bug in EVMHost to me. Remix example below produces identical results for both `solFunction()` and `yulFunction()`. My assumption is that the yul function uses Sol->Yul for code gen but this may be wrong as well.\r\n\r\nEdit:\r\n  - In Remix, both `solFunction()` and `yulFunction()` seem to be evaluating arguments to `addmod` from *right-to-left*\r\n  - I am unable to force viaYul using a Remix setting, so perhaps this is why the divergence cannot be demonstrated via Remix alone.\r\n  - I may have been wrong about bug being in the EVMHost part. See following comments.\r\n\r\n```\r\npragma solidity >=0.8.5;\r\ncontract C {\r\n  uint x = 0;\r\n  function yulFunction() external returns (uint r) {\r\n      assembly {\r\n          function incrementStorageVarInAssembly() -> s {\r\n              sstore(x.slot, add(sload(x.slot), 1))\r\n              s := sload(x.slot)\r\n          }\r\n          sstore(x.slot, 0)\r\n          r := addmod(incrementStorageVarInAssembly(), incrementStorageVarInAssembly(), add(incrementStorageVarInAssembly(), 17))\r\n      }\r\n  }\r\n  function incrementStorageVar() public returns (uint) {\r\n    return ++x;\r\n  }\r\n  function solFunction() external returns (uint) {\r\n      return addmod(incrementStorageVar(), incrementStorageVar(), incrementStorageVar() + 17);\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/863537049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/863542752",
    "html_url": "https://github.com/ethereum/solidity/issues/11555#issuecomment-863542752",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11555",
    "id": 863542752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzU0Mjc1Mg==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-17T20:27:58Z",
    "updated_at": "2021-06-17T20:27:58Z",
    "author_association": "MEMBER",
    "body": "Looking at the Yul code generated for the original example, I get the feeling that this is not an EVMHost issue but a divergence in the legacy and new code generators.\r\n\r\nHaving said that, I have not yet found a way to trigger this divergence in code that may be compiled via Sol->Yul in the production compiler.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/863542752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/863857685",
    "html_url": "https://github.com/ethereum/solidity/issues/11555#issuecomment-863857685",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11555",
    "id": 863857685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2Mzg1NzY4NQ==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-18T08:24:03Z",
    "updated_at": "2021-06-18T08:26:33Z",
    "author_association": "MEMBER",
    "body": "Here's a much simpler test case that demonstrates that legacy codegen evaluates arguments to `addmod` (and presumably `mulmod` right-to-left). For user-defined functions, on the other hand, argument evaluation order is left-to-right even by the legacy code gen as shown in the first test case above.\r\n\r\n```\r\npragma solidity >=0.0.0;\r\ncontract C {\r\n    function f() pure external returns (uint r1, uint r2) {\r\n        uint x = 3;\r\n        // Expected result: 4\r\n        // Obtained result: 0\r\n        r1 = addmod(++x, ++x, x);\r\n        assembly {\r\n            r2 := addmod(4, 5, 5)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd a much simpler semantic test compared to the original example\r\n\r\n```\r\ncontract C {\r\n  function f() external returns (uint) {\r\n    uint x = 3;\r\n    return addmod(++x, ++x, x);\r\n  }\r\n  function add(uint8 _a, uint8 _b) public pure returns (uint8) {\r\n    return _a + _b;\r\n  }\r\n  function test(uint8 _a, uint8 _b) public pure returns (uint8) {\r\n    return add(++_a + ++_b, _a + _b);\r\n  }\r\n}\r\n// ====\r\n// compileViaYul: also\r\n// ----\r\n// test(uint8,uint8): 1, 2 -> 10\r\n// f() -> 0\r\n```\r\n\r\n```\r\n$ isoltest -t semanticTests/addMod\r\n...\r\n  Running via Yul:\r\n  Expected result:\r\n  // test(uint8,uint8): 1, 2 -> 10\r\n  // f() -> 0\r\n\r\n  Obtained result:\r\n  // test(uint8,uint8): 1, 2 -> 10\r\n  // f() -> 4\r\n  Warning: The call to \"f()\" returned \r\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4]\r\n  \r\n  Attention: Updates on the test will apply the detected format displayed.\r\n  \r\n  Note that the test passed without Yul.\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/863857685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/865168059",
    "html_url": "https://github.com/ethereum/solidity/issues/11555#issuecomment-865168059",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11555",
    "id": 865168059,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NTE2ODA1OQ==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-21T16:16:10Z",
    "updated_at": "2021-06-21T16:16:10Z",
    "author_association": "MEMBER",
    "body": "JFYI: The following patch fixes this divergence.\r\n\r\n```\r\ndiff --git a/libsolidity/codegen/ExpressionCompiler.cpp b/libsolidity/codegen/ExpressionCompiler.cpp\r\nindex 5b092363b..db42ca29e 100644\r\n--- a/libsolidity/codegen/ExpressionCompiler.cpp\r\n+++ b/libsolidity/codegen/ExpressionCompiler.cpp\r\n@@ -966,11 +966,12 @@ bool ExpressionCompiler::visit(FunctionCall const& _functionCall)\r\n \t\tcase FunctionType::Kind::AddMod:\r\n \t\tcase FunctionType::Kind::MulMod:\r\n \t\t{\r\n+\t\t\tfor (unsigned i = 0; i < 2; i ++)\r\n+\t\t\t\tacceptAndConvert(*arguments[i], *TypeProvider::uint256());\r\n \t\t\tacceptAndConvert(*arguments[2], *TypeProvider::uint256());\r\n \t\t\tm_context << Instruction::DUP1 << Instruction::ISZERO;\r\n \t\t\tm_context.appendConditionalPanic(util::PanicCode::DivisionByZero);\r\n-\t\t\tfor (unsigned i = 1; i < 3; i ++)\r\n-\t\t\t\tacceptAndConvert(*arguments[2 - i], *TypeProvider::uint256());\r\n+\r\n \t\t\tif (function.kind() == FunctionType::Kind::AddMod)\r\n \t\t\t\tm_context << Instruction::ADDMOD;\r\n \t\t\telse\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/865168059/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
