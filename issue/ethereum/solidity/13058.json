{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13058",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13058/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13058/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13058/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13058",
  "id": 1246868001,
  "node_id": "I_kwDOAm_5kc5KUbIh",
  "number": 13058,
  "title": "[YUL Optimizer] Optimize gas consumption in Solidity",
  "user": {
    "login": "sergiuiacob1",
    "id": 22725336,
    "node_id": "MDQ6VXNlcjIyNzI1MzM2",
    "avatar_url": "https://avatars.githubusercontent.com/u/22725336?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sergiuiacob1",
    "html_url": "https://github.com/sergiuiacob1",
    "followers_url": "https://api.github.com/users/sergiuiacob1/followers",
    "following_url": "https://api.github.com/users/sergiuiacob1/following{/other_user}",
    "gists_url": "https://api.github.com/users/sergiuiacob1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sergiuiacob1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sergiuiacob1/subscriptions",
    "organizations_url": "https://api.github.com/users/sergiuiacob1/orgs",
    "repos_url": "https://api.github.com/users/sergiuiacob1/repos",
    "events_url": "https://api.github.com/users/sergiuiacob1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sergiuiacob1/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-05-24T17:05:53Z",
  "updated_at": "2022-05-25T13:30:24Z",
  "closed_at": "2022-05-25T13:29:56Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "<!--## Prerequisites\r\n\r\n- First, many thanks for taking part in the community. We really appreciate that.\r\n- We realize there is a lot of data requested here. We ask only that you do your best to provide as much information as possible so we can better help you.\r\n- Support questions are better asked in one of the following locations:\r\n    - [Solidity chat](https://gitter.im/ethereum/solidity)\r\n    - [Stack Overflow](https://ethereum.stackexchange.com/)\r\n- Ensure the issue isn't already reported (check `feature` and `language design` labels).\r\n\r\n*Delete the above section and the instructions in the sections below before submitting*\r\n-->\r\n\r\n## Abstract\r\n\r\nAs the official Solidity documentation states, \"the optimizer is under heavy development\". I'm currently working on my Master's Thesis, which focuses on optimizing Solidity code by analysing the Control Flow Graphs built from Solidity Code. I'm looking to work on something that will be worth it.\r\n\r\n## Motivation\r\n\r\nThe more efficient the bytecode is, the lower the cost of deploying and running a Smart Contract on the blockchain. If the optimizer gets better, all of the contracts will decrease in size / increase in efficiency / both. Worst case, they'll use the same amount of gas to deploy / run.\r\n\r\n## Specification\r\n\r\nI'm thinking of working with the YUL IR, since the docs also specify that the \"new\" optimizer works with YUL. I'm looking to do some high level optimizations that the current optimizer does not do / does not support. For example, this code\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ncontract VariableLoop {\r\n    function declareVariableInsideLoop() public pure {\r\n        for (uint i = 1; i <= 1000; i++) {\r\n            uint x = i * i;\r\n        }\r\n    }\r\n\r\n    function declareVariableOutsideLoop() public pure {\r\n        uint x;\r\n        for (uint i = 1; i <= 1000; i++) {\r\n            x = i * i;\r\n        }\r\n    }\r\n}\r\n```\r\nuses `420223` gas to run `declareVariableInsideLoop`, and `415250` to run `declareVariableOutsideLoop`. From my experiments, the solc compiler (v 0.8.14) (with `--optimize-runs=200`) optimized the code to `237215` gas to run `declareVariableInsideLoop` vs `232242` gas to run `declareVariableOutsideLoop`.\r\nThe conclusion is that `declareVariableInsideLoop` will still use more gas. I'm thinking of starting with such a use case, where I'd extract declared variables inside loops and declare them before the loop block.\r\n\r\nI'm looking for any advice / direction / requests on what could be improved, optimized and how (but mostly I'd figure out the how).\r\n\r\nP.S. I hope this is the right place to start such a discussion. If not, please redirect me to a more appropriate place. It would also be great to get in touch with somebody working in the Solidity team to see how I can make a difference.",
  "closed_by": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13058/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13058/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1136383140",
    "html_url": "https://github.com/ethereum/solidity/issues/13058#issuecomment-1136383140",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13058",
    "id": 1136383140,
    "node_id": "IC_kwDOAm_5kc5Du9Sk",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-24T20:08:12Z",
    "updated_at": "2022-05-24T20:08:12Z",
    "author_association": "MEMBER",
    "body": "Can you try benchmarking with --via-ir? It should be the same in both cases already.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1136383140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1137154330",
    "html_url": "https://github.com/ethereum/solidity/issues/13058#issuecomment-1137154330",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13058",
    "id": 1137154330,
    "node_id": "IC_kwDOAm_5kc5Dx5ka",
    "user": {
      "login": "sergiuiacob1",
      "id": 22725336,
      "node_id": "MDQ6VXNlcjIyNzI1MzM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22725336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sergiuiacob1",
      "html_url": "https://github.com/sergiuiacob1",
      "followers_url": "https://api.github.com/users/sergiuiacob1/followers",
      "following_url": "https://api.github.com/users/sergiuiacob1/following{/other_user}",
      "gists_url": "https://api.github.com/users/sergiuiacob1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sergiuiacob1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sergiuiacob1/subscriptions",
      "organizations_url": "https://api.github.com/users/sergiuiacob1/orgs",
      "repos_url": "https://api.github.com/users/sergiuiacob1/repos",
      "events_url": "https://api.github.com/users/sergiuiacob1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sergiuiacob1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-25T12:02:04Z",
    "updated_at": "2022-05-25T12:02:04Z",
    "author_association": "NONE",
    "body": "> Can you try benchmarking with --via-ir? It should be the same in both cases already.\r\n\r\nI've set up a truffle project, set the solc optimizer configuration in `truffle-config.js` to the following:\r\n```\r\n  compilers: {\r\n    solc: {\r\n      version: \"0.8.14\",      // Fetch exact version from solc-bin (default: truffle's version)\r\n      // docker: true,        // Use \"0.5.1\" you've installed locally with docker (default: false)\r\n      // settings: {          // See the solidity docs for advice about optimization and evmVersion\r\n       optimizer: {\r\n        \"yul\": true,\r\n        enabled: true,\r\n        runs: 200\r\n       },\r\n       \"viaIR\": true\r\n      //  evmVersion: \"byzantium\"\r\n      // }\r\n    }\r\n  },\r\n```\r\nthen deployed the `VariableLoop` contract above. The numbers remained the same:\r\n```\r\ntruffle(develop)> VariableLoop.deployed().then(function (c) {return c.declareVariableInsideLoop.estimateGas()})\r\n417223\r\ntruffle(develop)> VariableLoop.deployed().then(function (c) {return c.declareVariableOutsideLoop.estimateGas()})\r\n412250\r\n```\r\n\r\nIs the compiler config sufficient? That should be equivalent to `solc --optimize --via-ir ...`, right?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1137154330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1137177462",
    "html_url": "https://github.com/ethereum/solidity/issues/13058#issuecomment-1137177462",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13058",
    "id": 1137177462,
    "node_id": "IC_kwDOAm_5kc5Dx_N2",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-25T12:27:28Z",
    "updated_at": "2022-05-25T12:27:28Z",
    "author_association": "MEMBER",
    "body": "@sergiuiacob1 this is weird. I looked at the optimized IR. Both functions are optimized into a single one! I wonder if truffle is taking in the parameter properly.\r\n\r\nCan you try testing it on foundry? It definitely handles `viaIR` properly.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1137177462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1137239151",
    "html_url": "https://github.com/ethereum/solidity/issues/13058#issuecomment-1137239151",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13058",
    "id": 1137239151,
    "node_id": "IC_kwDOAm_5kc5DyORv",
    "user": {
      "login": "sergiuiacob1",
      "id": 22725336,
      "node_id": "MDQ6VXNlcjIyNzI1MzM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22725336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sergiuiacob1",
      "html_url": "https://github.com/sergiuiacob1",
      "followers_url": "https://api.github.com/users/sergiuiacob1/followers",
      "following_url": "https://api.github.com/users/sergiuiacob1/following{/other_user}",
      "gists_url": "https://api.github.com/users/sergiuiacob1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sergiuiacob1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sergiuiacob1/subscriptions",
      "organizations_url": "https://api.github.com/users/sergiuiacob1/orgs",
      "repos_url": "https://api.github.com/users/sergiuiacob1/repos",
      "events_url": "https://api.github.com/users/sergiuiacob1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sergiuiacob1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-25T13:27:48Z",
    "updated_at": "2022-05-25T13:27:48Z",
    "author_association": "NONE",
    "body": "> @sergiuiacob1 this is weird. I looked at the optimized IR. Both functions are optimized into a single one! I wonder if truffle is taking in the parameter properly.\r\n> \r\n> Can you try testing it on foundry? It definitely handles `viaIR` properly.\r\n\r\n`foundry.toml` is \r\n```\r\n[default]\r\nsrc = 'src'\r\nout = 'out'\r\nlibs = ['lib']\r\n\r\n# See more config options https://github.com/foundry-rs/foundry/tree/master/config\r\n\r\noptimizer = true\r\nvia_ir = true\r\nyul = true\r\noptimizer_runs = 200\r\n```\r\n\r\n`declareVariableInsideLoop`: `119194` gas, `declareVariableOutsideLoop`: `119211` gas\r\n\r\nFull output:\r\n```\r\nsergiuiacob@Sergius-MacBook-Pro foundry-project % forge build --contracts src/variable_declaration_loops.sol\r\n[⠊] Compiling...\r\n[⠢] Compiling 7 files with 0.8.14\r\n[⠆] Solc 0.8.14 finished in 3.11s\r\nCompiler run successful (with warnings)\r\nwarning[2072]: Warning: Unused local variable.\r\n --> /Users/sergiuiacob/solidity-optimization-with-control-flow-graphs/foundry-project/src/variable_declaration_loops.sol:7:13:\r\n  |\r\n7 |             uint x = i * i;\r\n  |             ^^^^^^\r\n\r\n\r\n\r\nsergiuiacob@Sergius-MacBook-Pro foundry-project % forge run src/variable_declaration_loops.sol --sig \"declareVariableInsideLoop()\"\r\n[⠒] Compiling...\r\n[⠢] Compiling 1 files with 0.8.14\r\n[⠆] Solc 0.8.14 finished in 33.91ms\r\nCompiler run successful (with warnings)\r\nwarning[2072]: Warning: Unused local variable.\r\n --> /Users/sergiuiacob/solidity-optimization-with-control-flow-graphs/foundry-project/src/variable_declaration_loops.sol:7:13:\r\n  |\r\n7 |             uint x = i * i;\r\n  |             ^^^^^^\r\n\r\n\r\n\r\nScript ran successfully.\r\nGas used: 119194\r\n== Return ==\r\n== Logs ==\r\nsergiuiacob@Sergius-MacBook-Pro foundry-project % forge run src/variable_declaration_loops.sol --sig \"declareVariableOutsideLoop()\"\r\n[⠊] Compiling...\r\n[⠢] Compiling 1 files with 0.8.14\r\n[⠆] Solc 0.8.14 finished in 32.56ms\r\nCompiler run successful (with warnings)\r\nwarning[2072]: Warning: Unused local variable.\r\n --> /Users/sergiuiacob/solidity-optimization-with-control-flow-graphs/foundry-project/src/variable_declaration_loops.sol:7:13:\r\n  |\r\n7 |             uint x = i * i;\r\n  |             ^^^^^^\r\n\r\n\r\n\r\nScript ran successfully.\r\nGas used: 119211\r\n== Return ==\r\n== Logs ==\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1137239151/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1137241652",
    "html_url": "https://github.com/ethereum/solidity/issues/13058#issuecomment-1137241652",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13058",
    "id": 1137241652,
    "node_id": "IC_kwDOAm_5kc5DyO40",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-25T13:29:56Z",
    "updated_at": "2022-05-25T13:30:24Z",
    "author_association": "MEMBER",
    "body": "That looks correct. The difference you are seeing is because of dispatch affecting gas. See slides 11 to 13 in https://hrkrshnn.com/t/devconnect.pdf \r\n\r\nClosing this for now. Feel free to reply if you have any questions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1137241652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
