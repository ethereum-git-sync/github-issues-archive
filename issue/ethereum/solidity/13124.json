{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13124",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13124/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13124/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13124/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13124",
  "id": 1268372836,
  "node_id": "I_kwDOAm_5kc5LmdVk",
  "number": 13124,
  "title": "Automatic reentrancy protection",
  "user": {
    "login": "lukehutch",
    "id": 811305,
    "node_id": "MDQ6VXNlcjgxMTMwNQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lukehutch",
    "html_url": "https://github.com/lukehutch",
    "followers_url": "https://api.github.com/users/lukehutch/followers",
    "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
    "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
    "organizations_url": "https://api.github.com/users/lukehutch/orgs",
    "repos_url": "https://api.github.com/users/lukehutch/repos",
    "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lukehutch/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-06-11T21:06:31Z",
  "updated_at": "2022-07-04T09:05:40Z",
  "closed_at": "2022-07-04T09:05:40Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nThe majority of smart contract vulnerabilities that have been exploited, resulting in the loss of millions to hundreds of millions of dollars per vulnerability, have been reentrancy attacks.\r\n\r\nThe [Checks-Effects-Interactions](https://blog.openzeppelin.com/reentrancy-after-istanbul/) pattern mitigates or prevents these attacks from being successful.\r\n\r\nFollowing this pattern requires conscious choice and vigilance on the part of the smart contract developer.\r\n\r\nThe Solidity compiler could automatically enforce this pattern to protect all contracts against reentrancy attacks.\r\n\r\n## Motivation\r\n\r\nThe [DAO attack](https://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/) should be the only motivation needed.\r\n\r\n## Specification\r\n\r\nThere are two possible ways for the Solidity compiler to prevent reentrancy attacks automatically, which I will term the \"aggressive\" and \"conservative\" approaches.\r\n\r\n### Aggressive approach\r\n\r\nThe Solidity compiler adds code around `call`, `delegatecall` etc. as follows, incrementing a depth counter before the call and decrementing it again after the call, to signify that a function of another contract is being executed. Functions of the original contract that are not `view` or `pure` (i.e. that can modify state) have entry checks that revert unless the depth counter is zero.\r\n\r\nOriginal source (unimportant code elided with `[...]`):\r\n\r\n```\r\ncontract A {\r\n    address internal addr;\r\n\r\n    function one() external {\r\n        addr.call(abi.encodeWithSignature( [...] ));\r\n    }\r\n\r\n    function two() external {\r\n        // Do something with side effects\r\n    }\r\n\r\n    function three() external view returns (uint256) {\r\n        // Read something without causing side effects\r\n        return [...];\r\n    }\r\n}\r\n```\r\n\r\nCompiler-protected code compiled as if written as follows:\r\n\r\n```\r\ncontract A {\r\n    address internal addr;\r\n\r\n    uint256 private _callDepth;\r\n\r\n    function one() external {\r\n        ++callDepth;\r\n        addr.call(abi.encodeWithSignature( [...] ));\r\n        --callDepth;\r\n    }\r\n\r\n    function two() external {\r\n        require(callDepth == 0, \"Reentrant call\");\r\n        // Do something with side effects\r\n    }\r\n\r\n    function three() external view returns (uint256) {\r\n        // Read something without causing side effects\r\n        return [...];\r\n    }\r\n}\r\n```\r\n\r\nThere is still a small possibility of triggering a vulnerability in _other_ contracts with this pattern, because a `view` function may still present an out-of-date view of the internal state of contract `A` to some other contract `B`, causing `B` to be tricked into taking an action that it should not take, but contract `A` itself would be protected. To prevent even contract `B` from being tricked in this way, an even more aggressive approach could be taken of adding `require(callDepth == 0, \"Reentrant call\")` to even `view` functions (such as `three()` in this example). This would disallow all reentrancy, except for in the case of `pure` functions, which by definition can't rely on internal state. This would limit the power of Solidity, but it would also prevent these attacks.\r\n\r\n### Conservative approach\r\n\r\nA more conservative approach to automated reentrancy protection would be to find the point within the code of each function at which the last possible modification of contract state occurs, where modification of state is defined as:\r\n\r\n1. writing to storage\r\n2. overwriting a local variable in memory with a new value\r\n3. calling a function within the contract that is neither `view` nor `pure`.\r\n\r\nThe compiler then statically enforces that functions in other contracts are only callable after the last state update in any function.\r\n\r\nThe compiler must ensure that this is enforced regardless of the call stack, so if a function `f` updates states and then makes a `call` to another contract, `f` can only be called by other functions if the call to `f` is the last potentially state-modifying operation in any other function in the contract (so that it cannot be followed by another state update).\r\n\r\n## Backwards Compatibility\r\n\r\nThe aggressive approach may break some Solidity usage patterns involving the interaction of multiple contracts, but those usage patterns are potentially dangerous anyway. The main downside to this approach is that failures will only be seen at runtime. Also, this approach will add some overhead in gas and code size.\r\n\r\nThe conservative approach is significantly better, because all potential issues will be able to be caught at compiletime, forcing the programmer to notice and fix problematic effect ordering issues. Also there will be no overhead to the generated code. The main downside to the conservative approach is that the changes to the compiler will be more complex.\r\n",
  "closed_by": {
    "login": "leonardoalt",
    "id": 504195,
    "node_id": "MDQ6VXNlcjUwNDE5NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/leonardoalt",
    "html_url": "https://github.com/leonardoalt",
    "followers_url": "https://api.github.com/users/leonardoalt/followers",
    "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
    "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
    "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
    "repos_url": "https://api.github.com/users/leonardoalt/repos",
    "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13124/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13124/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1173555289",
    "html_url": "https://github.com/ethereum/solidity/issues/13124#issuecomment-1173555289",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13124",
    "id": 1173555289,
    "node_id": "IC_kwDOAm_5kc5F8whZ",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-04T09:05:21Z",
    "updated_at": "2022-07-04T09:05:21Z",
    "author_association": "MEMBER",
    "body": "You could combine both approaches, eg have the aggressive approach by default which can be bypassed by the user if the external call is in an `unchecked` block, and the compiler can also choose to optimize it away if it detects the conditions in the conservative approach.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1173555289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1173555652",
    "html_url": "https://github.com/ethereum/solidity/issues/13124#issuecomment-1173555652",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13124",
    "id": 1173555652,
    "node_id": "IC_kwDOAm_5kc5F8wnE",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-04T09:05:40Z",
    "updated_at": "2022-07-04T09:05:40Z",
    "author_association": "MEMBER",
    "body": "This issue is a dup of https://github.com/ethereum/solidity/issues/12996 though, so let's keep the discussion there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1173555652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
