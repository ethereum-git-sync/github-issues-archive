{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12920",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12920/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12920/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12920/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12920",
  "id": 1199045380,
  "node_id": "I_kwDOAm_5kc5Hd_sE",
  "number": 12920,
  "title": "Allow storage layout overrides",
  "user": {
    "login": "beerefine",
    "id": 93521351,
    "node_id": "U_kgDOBZMFxw",
    "avatar_url": "https://avatars.githubusercontent.com/u/93521351?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/beerefine",
    "html_url": "https://github.com/beerefine",
    "followers_url": "https://api.github.com/users/beerefine/followers",
    "following_url": "https://api.github.com/users/beerefine/following{/other_user}",
    "gists_url": "https://api.github.com/users/beerefine/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/beerefine/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/beerefine/subscriptions",
    "organizations_url": "https://api.github.com/users/beerefine/orgs",
    "repos_url": "https://api.github.com/users/beerefine/repos",
    "events_url": "https://api.github.com/users/beerefine/events{/privacy}",
    "received_events_url": "https://api.github.com/users/beerefine/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    },
    {
      "id": 4699440809,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvGqQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/closed%20due%20inactivity",
      "name": "closed due inactivity",
      "color": "91535E",
      "default": false,
      "description": "The issue/PR was automatically closed due to inactivity."
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-04-10T14:02:42Z",
  "updated_at": "2023-04-03T12:04:43Z",
  "closed_at": "2023-04-03T12:04:43Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nTLDR: Implement a flag similarly to Vyper's \"--storage-layout-file\" flag. See: https://githubhot.com/repo/vyperlang/vyper/issues/2572\r\n\r\n## Motivation\r\n\r\nHaving the ability to control storage layout (slots) brings interesting benefits.\r\nFor one, controlling the exact storage location provides greater stability and consistency between contracts and different versions.\r\n\r\nFor example, the `owner()` view method may compile to different bytecodes depending on the underlying storage slots, even though their implementation logic is essentially the same. It forces contracts to implement the same logic again and again, deploying duplicated code, accumulating junk at expense of deployers & entire blockchain infrastructure.\r\n\r\nAs a consequence - this will open the possibility to access storage by name rather than by number, in a JSON-like manner.\r\n\r\nFor example, if I have the following contract:\r\n\r\n```\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MyCode1 is Ownable, ERC20 {\r\n    constructor() ERC20(\"\", \"\") { }\r\n}\r\ncontract MyCode2 is ERC20, Ownable {\r\n    constructor() ERC20(\"\", \"\") { }\r\n}\r\n```\r\n\r\nCurrently, the slot for `owner` depends on the order of inheritance, as shown in the build-info output: (slot 0 vs. 5 in the examples above)\r\n\r\n```\r\n\"storageLayout\": {\r\n  \"storage\": [\r\n    {\r\n      \"contract\": \"contracts/test2.sol:MyCode1\",\r\n      \"label\": \"_owner\",\r\n      \"slot\": \"0\",\r\n    },\r\n    {\r\n      \"contract\": \"contracts/test2.sol:MyCode1\",\r\n      \"label\": \"_balances\",\r\n      \"slot\": \"1\",\r\n    },\r\n\r\n...\r\n...\r\n\r\n\"storageLayout\": {\r\n  \"storage\": [\r\n    {\r\n      \"contract\": \"contracts/test2.sol:MyCode2\",\r\n      \"label\": \"_balances\",\r\n      \"slot\": \"0\",\r\n    },\r\n    ...\r\n    {\r\n      \"contract\": \"contracts/test2.sol:MyCode2\",\r\n      \"label\": \"_owner\",\r\n      \"slot\": \"5\",\r\n    }\r\n  ],\r\n...\r\n}\r\n```\r\n\r\n## Specification\r\n\r\nInstead of using slot numbers starting from 0, 1, 2, ... I suggest using the storage name in ASCII, with zero padding to 32-bytes.\r\nWith name-as-key, \"owner\" will be at slot 0x6f776e6572000000000000000000000000000000000000000000000000000000.\r\n\r\nHelper methods can be implemented, e.g. `readKey(bytes32 key)`, `writeKey(bytes32 key)`, etc. for cross-contract storage access.\r\n\r\n## Backwards Compatibility\r\n\r\nIt is not expected to break existing ABIs.\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12920/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12920/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1094284395",
    "html_url": "https://github.com/ethereum/solidity/issues/12920#issuecomment-1094284395",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12920",
    "id": 1094284395,
    "node_id": "IC_kwDOAm_5kc5BOXRr",
    "user": {
      "login": "beerefine",
      "id": 93521351,
      "node_id": "U_kgDOBZMFxw",
      "avatar_url": "https://avatars.githubusercontent.com/u/93521351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/beerefine",
      "html_url": "https://github.com/beerefine",
      "followers_url": "https://api.github.com/users/beerefine/followers",
      "following_url": "https://api.github.com/users/beerefine/following{/other_user}",
      "gists_url": "https://api.github.com/users/beerefine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/beerefine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/beerefine/subscriptions",
      "organizations_url": "https://api.github.com/users/beerefine/orgs",
      "repos_url": "https://api.github.com/users/beerefine/repos",
      "events_url": "https://api.github.com/users/beerefine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/beerefine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-10T14:15:45Z",
    "updated_at": "2022-04-10T14:15:45Z",
    "author_association": "NONE",
    "body": "I tried patching `libsolidity/interface/StorageLayout.cpp` by simply changing `_slot.str()` to `_var.name()` which compiled but I didn't get around to debugging the issue, I assume hex-encoding is required.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1094284395/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1097768883",
    "html_url": "https://github.com/ethereum/solidity/issues/12920#issuecomment-1097768883",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12920",
    "id": 1097768883,
    "node_id": "IC_kwDOAm_5kc5Bbp-z",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T09:13:51Z",
    "updated_at": "2022-04-13T09:16:16Z",
    "author_association": "MEMBER",
    "body": "> For example, the balanceOf() or owner() view methods may compile to different bytecodes because the underlying storage slots differ, even though their implementation logic is essentially the same.\r\n\r\nThe implementation logic in this case should be different, shouldn't it? @beerefine \r\n\r\n> this will open the possibility to access storage by name rather than by number\r\n\r\nNot sure if this is what you are referring to, but you can access the slot of a variable in inline assembly via `.slot` member. For example `owner.slot`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1097768883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1097796499",
    "html_url": "https://github.com/ethereum/solidity/issues/12920#issuecomment-1097796499",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12920",
    "id": 1097796499,
    "node_id": "IC_kwDOAm_5kc5BbwuT",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T09:29:00Z",
    "updated_at": "2022-04-13T09:29:00Z",
    "author_association": "MEMBER",
    "body": "About a feature to override storage slots, there is a huge downside to this: having this feature would open up possibilities for storage collisions. Even extra checks wouldn't be able to catch things like collisions between a random variable `uint owner` and a mapping `mapping (address => uint) balanceOf` (currently you can ignore this issue, but it becomes a serious concern if users can set the slot of `owner` to particular slots).\r\n\r\nSolidity guarantees that the storage slots would remain unchanged across compiler versions for the same contract. If upgradability is something you have in mind, I believe, OpenZeppelin has built some tools that check if two contracts have the same storage slots (using the compiler output `--storage-slots`). Regrading this feature in Vyper,  Vyper doesn't have this guarantee for storage slots remaining consistent across versions, and likely need this additional feature for certain upgradable contract.\r\n\r\nAlso, getting storage slots from an external file is probably a bad idea, from a practical standpoint. Since each of the frameworks differ in how they send external flags into `solc`, I think it's risky to have contracts fetch this information from a file. A better alternative is to add a syntax for it in the language. There should be other issues for this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1097796499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1097939378",
    "html_url": "https://github.com/ethereum/solidity/issues/12920#issuecomment-1097939378",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12920",
    "id": 1097939378,
    "node_id": "IC_kwDOAm_5kc5BcTmy",
    "user": {
      "login": "beerefine",
      "id": 93521351,
      "node_id": "U_kgDOBZMFxw",
      "avatar_url": "https://avatars.githubusercontent.com/u/93521351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/beerefine",
      "html_url": "https://github.com/beerefine",
      "followers_url": "https://api.github.com/users/beerefine/followers",
      "following_url": "https://api.github.com/users/beerefine/following{/other_user}",
      "gists_url": "https://api.github.com/users/beerefine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/beerefine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/beerefine/subscriptions",
      "organizations_url": "https://api.github.com/users/beerefine/orgs",
      "repos_url": "https://api.github.com/users/beerefine/repos",
      "events_url": "https://api.github.com/users/beerefine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/beerefine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T11:29:34Z",
    "updated_at": "2022-04-13T11:29:34Z",
    "author_association": "NONE",
    "body": "> The implementation logic in this case should be different, shouldn't it? @beerefine\r\n\r\nI wasn't clear; I gave two different examples of methods, not that both of these should have the same logic. I edited my original post for clarity.\r\n\r\n \r\n> Not sure if this is what you are referring to, but you can access the slot of a variable in inline assembly via `.slot` member. For example `owner.slot`.\r\n\r\nI know it is possible with some hacking around, but my use case fits better as a compiler flag/syntax.\r\n\r\n\r\n> About a feature to override storage slots, there is a huge downside to this: having this feature would open up possibilities for storage collisions. Even extra checks wouldn't be able to catch things like collisions between a random variable `uint owner` and a mapping `mapping (address => uint) balanceOf` (currently you can ignore this issue, but it becomes a serious concern if users can set the slot of `owner` to particular slots).\r\n\r\nI don't see how. in my vision, owner will go to the specific slot 0x\"owner\"0000... (or 0x00..00\"owner\") but even if you control the slots completely - why wouldn't you be able to, if as you said this can be done via .slot anyway? technically even existing mappings have collisions, they will just be as rare as private key collisions.\r\n\r\n> Solidity guarantees that the storage slots would remain unchanged across compiler versions for the same contract. If upgradability is something you have in mind, I believe, OpenZeppelin has built some tools that check if two contracts have the same storage slots (using the compiler output `--storage-slots`). Regrading this feature in Vyper, Vyper doesn't have this guarantee for storage slots remaining consistent across versions, and likely need this additional feature for certain upgradable contract.\r\n\r\nI see, but my intention is not to replace existing contracts and possibly break upgrades - it is that future contracts will be able to use predictable slots. (and with syntax you can have the same contract produce same slots across compiler versions)\r\n\r\n> Also, getting storage slots from an external file is probably a bad idea, from a practical standpoint. Since each of the frameworks differ in how they send external flags into `solc`, I think it's risky to have contracts fetch this information from a file. A better alternative is to add a syntax for it in the language. There should be other issues for this.\r\n\r\nI agree; syntax sounds better, or perhaps a flag/syntax for the specific case of slot == ASCII of var name.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1097939378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1484076521",
    "html_url": "https://github.com/ethereum/solidity/issues/12920#issuecomment-1484076521",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12920",
    "id": 1484076521,
    "node_id": "IC_kwDOAm_5kc5YdTXp",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-03-26T12:05:08Z",
    "updated_at": "2023-03-26T12:05:08Z",
    "author_association": "NONE",
    "body": "This issue has been marked as stale due to inactivity for the last 90 days.\nIt will be automatically closed in 7 days.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1484076521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1494198763",
    "html_url": "https://github.com/ethereum/solidity/issues/12920#issuecomment-1494198763",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12920",
    "id": 1494198763,
    "node_id": "IC_kwDOAm_5kc5ZD6nr",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-04-03T12:04:41Z",
    "updated_at": "2023-04-03T12:04:41Z",
    "author_association": "NONE",
    "body": "Hi everyone! This issue has been automatically closed due to inactivity.\nIf you think this issue is still relevant in the latest Solidity version and you have something to [contribute](https://docs.soliditylang.org/en/latest/contributing.html), feel free to reopen.\nHowever, unless the issue is a concrete proposal that can be implemented, we recommend starting a language discussion on the [forum](https://forum.soliditylang.org) instead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1494198763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
