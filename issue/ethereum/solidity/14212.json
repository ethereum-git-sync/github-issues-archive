{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14212",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14212/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14212/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14212/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14212",
  "id": 1704431377,
  "node_id": "I_kwDOAm_5kc5ll48R",
  "number": 14212,
  "title": "Interface type check inconsistency during import",
  "user": {
    "login": "pcaversaccio",
    "id": 25297591,
    "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pcaversaccio",
    "html_url": "https://github.com/pcaversaccio",
    "followers_url": "https://api.github.com/users/pcaversaccio/followers",
    "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
    "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
    "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
    "repos_url": "https://api.github.com/users/pcaversaccio/repos",
    "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-05-10T18:24:32Z",
  "updated_at": "2023-05-11T18:25:17Z",
  "closed_at": "2023-05-11T17:15:45Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nDepending on how the same interface is imported (let's call it interface `A`), a function using a subset interface of `A` (let's call it interface `B`) is either compiled or thrown.\r\n\r\n## Environment\r\n\r\n- Compiler version: `0.8.19`\r\n- Target EVM version (as per compiler settings): `paris`\r\n- Framework/IDE (e.g. Truffle or Remix): `forge`\r\n- Operating system: `ubuntu`\r\n\r\n## Steps to Reproduce\r\n\r\nSo I define the following interface called `IERC20Extended`:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20Metadata} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\"; // using this import does compile\r\n// import {IERC20Metadata} from \"./IERC20Metadata.sol\"; // using this import does not compile\r\n\r\ninterface IERC20Extended is IERC20Metadata {\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedAmount\r\n    ) external returns (bool);\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedAmount\r\n    ) external returns (bool);\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address owner, uint256 amount) external;\r\n\r\n    function mint(address owner, uint256 amount) external;\r\n}\r\n```\r\n\r\nI copy the OpenZeppelin interface `IERC20Metadata` locally but I also pull the OZ contracts via submodules. They are both exactly the same except that I have to adjust locally the path in `IERC20Metadata` from `import \"../IERC20.sol\";` to `import \"./IERC20.sol\";`.\r\n\r\nSo now I have a contract `C`:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.19;\r\n\r\nimport {IERC20Extended} from \"./interfaces/IERC20Extended.sol\";\r\nimport {IERC20, SafeERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract C {\r\n    using SafeERC20 for IERC20;\r\n    IERC20Extended private DAI = IERC20Extended(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    function run() external {\r\n        approveAll(DAI, address(1));\r\n    }\r\n\r\n    function approveAll(IERC20 token, address to) public virtual {\r\n        token.safeApprove(to, type(uint256).max);\r\n    }\r\n}\r\n```\r\n\r\nIt's important to observe that `IERC20` is a subset of `IERC20Extended`. Now the following inconsistency happens:\r\n- If I import the interface from the OZ submodules in `IERC20Extended` it compiles successfully,\r\n- If I import the interface from the local directory in `IERC20Extended` it throws with the following (just run `forge compile`):\r\n```bash\r\nCompiler run failed\r\nerror[9553]: TypeError: Invalid type for argument in function call. Invalid implicit conversion from contract IERC20Extended to contract IERC20 requested.\r\n  --> src/C.sol:12:20:\r\n   |\r\n12 |         approveAll(DAI, address(1));\r\n   |                    ^^^\r\n```\r\n\r\nI created a repo [here](https://github.com/pcaversaccio/interface-solc-test) to reproduce this error. I tested it with other interfaces and experienced the same behavior. It looks like as if the import with long path resolution relaxes the type checking.",
  "closed_by": {
    "login": "cameel",
    "id": 137030,
    "node_id": "MDQ6VXNlcjEzNzAzMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cameel",
    "html_url": "https://github.com/cameel",
    "followers_url": "https://api.github.com/users/cameel/followers",
    "following_url": "https://api.github.com/users/cameel/following{/other_user}",
    "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
    "organizations_url": "https://api.github.com/users/cameel/orgs",
    "repos_url": "https://api.github.com/users/cameel/repos",
    "events_url": "https://api.github.com/users/cameel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cameel/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14212/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14212/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1544285801",
    "html_url": "https://github.com/ethereum/solidity/issues/14212#issuecomment-1544285801",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14212",
    "id": 1544285801,
    "node_id": "IC_kwDOAm_5kc5cC-5p",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-11T16:15:11Z",
    "updated_at": "2023-05-11T16:19:49Z",
    "author_association": "MEMBER",
    "body": "You're getting this error because you have two separate copies of `IERC20`, one in `src/interfaces/IERC20.sol`, the other in `lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol`. To the compiler they're two distinct interfaces. Your `IERC20Metadata` uses one and OZ uses the other. When you try to cast your `IERC20Metadata` to OZ's `IERC20`, you get a conversion error because one is not derived from the other. It's derived from the other `IERC20`. The fact that they happen to have the same name and the same content, does not matter - the compiler sees two separate interface definitions in the AST. It's perfectly legal to have two different things with the same name in Solidity as long as they're not both imported into the same namespace and. The compiler does not attempt to \"deduplicate\" them in any way.\r\n\r\nIt's just the fact that the interfaces have the same name that makes the error message somewhat confusing. Also the fact that you never import both `IERC20` in the same file - you'd get a more explicit error then. If you just have them in the inheritance hierarchies of separate contracts, it works until they meet - then it doesn't :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1544285801/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1544320542",
    "html_url": "https://github.com/ethereum/solidity/issues/14212#issuecomment-1544320542",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14212",
    "id": 1544320542,
    "node_id": "IC_kwDOAm_5kc5cDHYe",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-11T16:39:21Z",
    "updated_at": "2023-05-11T16:39:53Z",
    "author_association": "NONE",
    "body": "@cameel that makes perfect sense, thx for elaborating. One remaining question: Does Solidity always allow using interface casting of variables that are using a superset interface into a subset interface? Let me make a quick example:\r\n- You have in interface `IERC20`\r\n- You have an interface `IERC20Metadata` which inherits from `IERC20`.\r\n\r\nNow there is a `public` function `f(IERC20 token)` in a contract `C` that imports `IERC20Metadata`. Via another `external` function you call `f` with a `token` argument that was cast into `IERC20Metadata` (and not `IERC20`). I think this should always be possible as long as the interface used is inherited from a parent interface that is used in the function. Am I correct here?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1544320542/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1544385376",
    "html_url": "https://github.com/ethereum/solidity/issues/14212#issuecomment-1544385376",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14212",
    "id": 1544385376,
    "node_id": "IC_kwDOAm_5kc5cDXNg",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-11T17:15:34Z",
    "updated_at": "2023-05-11T17:16:25Z",
    "author_association": "MEMBER",
    "body": "You mean something like this?\r\n```solidity\r\ninterface IERC20 {}\r\ninterface IERC20Metadata is IERC20 {}\r\n\r\ncontract C {\r\n    function f(IERC20 token) public {}\r\n    function g() external {\r\n        IERC20Metadata token;\r\n        this.f(token);\r\n    }\r\n}\r\n```\r\n\r\nYes, there's always an implicit conversion from a contract/interface to any other contract/interface in its inheritance hierarchy. It being a parameter of an external function does not prevent you from doing it.\r\n\r\nIn fact, it could allow you to do more, since in the ABI contracts and interfaces have the same exact representation as the plain `address` type. A tool that did not have access to the declaration of `f()` might allow you to call it with any address. When you make a call from Solidity, though, the declaration must be available in some form so the compiler can check it. Of course, it depends on the declaration being correct - if it does not match what's deployed, that's another story :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1544385376/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1544481053",
    "html_url": "https://github.com/ethereum/solidity/issues/14212#issuecomment-1544481053",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14212",
    "id": 1544481053,
    "node_id": "IC_kwDOAm_5kc5cDukd",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-05-11T18:25:17Z",
    "updated_at": "2023-05-11T18:25:17Z",
    "author_association": "NONE",
    "body": "thanks for the insights!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1544481053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
