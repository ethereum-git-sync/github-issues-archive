{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14640",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14640/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14640/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14640/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14640",
  "id": 1960131194,
  "node_id": "I_kwDOAm_5kc501Tp6",
  "number": 14640,
  "title": "In yul, there's a bug when mixing `verbatim`, `switch`, and unoptimized code",
  "user": {
    "login": "qbzzt",
    "id": 12722969,
    "node_id": "MDQ6VXNlcjEyNzIyOTY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/12722969?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qbzzt",
    "html_url": "https://github.com/qbzzt",
    "followers_url": "https://api.github.com/users/qbzzt/followers",
    "following_url": "https://api.github.com/users/qbzzt/following{/other_user}",
    "gists_url": "https://api.github.com/users/qbzzt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qbzzt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qbzzt/subscriptions",
    "organizations_url": "https://api.github.com/users/qbzzt/orgs",
    "repos_url": "https://api.github.com/users/qbzzt/repos",
    "events_url": "https://api.github.com/users/qbzzt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qbzzt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 2376132438,
      "node_id": "MDU6TGFiZWwyMzc2MTMyNDM4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/codegen%20error",
      "name": "codegen error",
      "color": "000000",
      "default": false,
      "description": "Compiler generates invalid code. Critical."
    },
    {
      "id": 4372329032,
      "node_id": "LA_kwDOAm_5kc8AAAABBJxySA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/selected%20for%20development",
      "name": "selected for development",
      "color": "ff8e00",
      "default": false,
      "description": "It's on our short-term development"
    },
    {
      "id": 4438006499,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaa4w",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20effort",
      "name": "low effort",
      "color": "ffb1fa",
      "default": false,
      "description": "There is not much implementation work to be done. The task is very easy or tiny."
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/solidity/milestones/58",
    "html_url": "https://github.com/ethereum/solidity/milestone/58",
    "labels_url": "https://api.github.com/repos/ethereum/solidity/milestones/58/labels",
    "id": 10055790,
    "node_id": "MI_kwDOAm_5kc4AmXBu",
    "number": 58,
    "title": "0.8.23",
    "description": null,
    "creator": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 2,
    "state": "open",
    "created_at": "2023-10-16T13:46:09Z",
    "updated_at": "2023-11-08T03:35:46Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 4,
  "created_at": "2023-10-24T21:47:53Z",
  "updated_at": "2023-11-08T03:35:46Z",
  "closed_at": "2023-11-08T03:35:46Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nWe need unoptimized Yul code to measure gas costs (see https://github.com/ethereum/solidity/issues/14621). This is often facilitated using expressions such as:\r\n\r\n```\r\ndelta := verbatim_1i_1o(hex\"<gas><swap1><operation, which uses the parameter><gas><swap1><sub>\", <input value>)\r\n```\r\n\r\nHowever, such expressions tend to confuse the compiler when put inside a `switch` statement\r\n\r\n## Environment\r\n\r\n- Compiler version:\r\n  ```\r\n  qbzzt1@tests:~/yul$ ./solc --version\r\n  solc, the solidity compiler commandline interface\r\n  Version: 0.8.21+commit.d9974bed.Linux.g++\r\n  ```\r\n\r\n- Target EVM version (as per compiler settings): The default, but I also verified with `--evm-version shanghai`.\r\n\r\n- Framework/IDE (e.g. Truffle or Remix): None\r\n\r\n- EVM execution environment / backend / blockchain client: Geth, but I can prove that's not the issue.\r\n\r\n- Operating system: \r\n\r\n  Running on GCP\r\n  ```\r\n  qbzzt1@tests:~/yul$ uname -a\r\n  Linux tests 5.10.0-26-cloud-amd64 #1 SMP Debian 5.10.197-1 (2023-09-29) x86_64 GNU/Linux\r\n  qbzzt1@tests:~/yul$ \r\n  ```\r\n\r\n## Steps to Reproduce\r\n\r\nCompile this Yul code:\r\n\r\n```yul\r\n{\r\n  let dummy := 0xAABBCCDDEEFF\r\n  let input := sload(0)\r\n  let output\r\n\r\n  // I also verified this when switching on a variable's value\r\n  switch input\r\n  // This is the case that needs to be executed\r\n  case 0x00 {\r\n      output := verbatim_1i_1o(hex\"506000\", dummy)\r\n\r\n      // Case gets executed with this (logically equivalent) code:\r\n      // output := verbatim_0i_1o(hex\"6000\")\r\n  }\r\n  case 0x01 {\r\n      output := 1 \r\n  }\r\n  // This is the case that actually gets executed.\r\n  // It is the last but one case.\r\n  case 0x02 {\r\n      output := verbatim_1i_1o(hex\"506002\", dummy)\r\n\r\n      // The first case gets executed correctly if I put here\r\n      // this (logically equivalent) code\r\n      // output := verbatim_0i_1o(hex\"6002\")\r\n  }          \r\n  case 0x03 {\r\n      output := 3\r\n  }          \r\n\r\n  sstore(0, output)\r\n}\r\n```\r\n\r\nUsing the command line:\r\n\r\n```sh\r\n./solc --strict-assembly --optimize --yul-optimizations=\":\" x.yul \r\n```\r\n\r\nThe binary you get is: \r\n\r\n```\r\n5f805465aabbccddeeff8115602e578160011460385781600214602e57506003146027575f55005b5060035f55005b9150505060025f55005b50505060015f5500\r\n```\r\n\r\nWhen I run it on geth, starting with empty storage, I get this output:\r\n\r\n```\r\n    \"0xcccccccccccccccccccccccccccccccccccccccc\" : {\r\n        \"code\" : \"0x5f805465aabbccddeeff8115602e578160011460385781600214602e57506003146027575f55005b5060035f55005b9150505060025f55005b50505060015f5500\",\r\n        \"nonce\" : \"0x01\",\r\n        \"balance\" : \"0x0186a0\",\r\n        \"storage\" : {\r\n            \"0x00\" : \"0x02\"\r\n        }\r\n    }\r\n```\r\n\r\nEven though `sload(0)` returns zero (we start from an empty storage), so `input` is zero and therefore we'd expect the first case of the `switch` to happen, not the third.\r\n\r\nHere is a raw trace:\r\n\r\n```\r\n{\"pc\":0,\"op\":95,\"gas\":\"0x26207f8\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PUSH0\"}\r\n{\"pc\":1,\"op\":128,\"gas\":\"0x26207f6\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"DUP1\"}\r\n{\"pc\":2,\"op\":84,\"gas\":\"0x26207f3\",\"gasCost\":\"0x834\",\"memSize\":0,\"stack\":[\"0x0\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"SLOAD\"}\r\n{\"pc\":3,\"op\":101,\"gas\":\"0x261ffbf\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"PUSH6\"}\r\n{\"pc\":10,\"op\":129,\"gas\":\"0x261ffbc\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x0\",\"0xaabbccddeeff\"],\"depth\":1,\"refund\":0,\"opName\":\"DUP2\"}\r\n{\"pc\":11,\"op\":21,\"gas\":\"0x261ffb9\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x0\",\"0xaabbccddeeff\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"ISZERO\"}\r\n{\"pc\":12,\"op\":96,\"gas\":\"0x261ffb6\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x0\",\"0xaabbccddeeff\",\"0x1\"],\"depth\":1,\"refund\":0,\"opName\":\"PUSH1\"}\r\n{\"pc\":14,\"op\":87,\"gas\":\"0x261ffb3\",\"gasCost\":\"0xa\",\"memSize\":0,\"stack\":[\"0x0\",\"0x0\",\"0xaabbccddeeff\",\"0x1\",\"0x2e\"],\"depth\":1,\"refund\":0,\"opName\":\"JUMPI\"}\r\n{\"pc\":46,\"op\":91,\"gas\":\"0x261ffa9\",\"gasCost\":\"0x1\",\"memSize\":0,\"stack\":[\"0x0\",\"0x0\",\"0xaabbccddeeff\"],\"depth\":1,\"refund\":0,\"opName\":\"JUMPDEST\"}\r\n{\"pc\":47,\"op\":145,\"gas\":\"0x261ffa8\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[\"0x0\",\"0x0\",\"0xaabbccddeeff\"],\"depth\":1,\"refund\":0,\"opName\":\"SWAP2\"}\r\n{\"pc\":48,\"op\":80,\"gas\":\"0x261ffa5\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[\"0xaabbccddeeff\",\"0x0\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"POP\"}\r\n{\"pc\":49,\"op\":80,\"gas\":\"0x261ffa3\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[\"0xaabbccddeeff\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"POP\"}\r\n{\"pc\":50,\"op\":80,\"gas\":\"0x261ffa1\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[\"0xaabbccddeeff\"],\"depth\":1,\"refund\":0,\"opName\":\"POP\"}\r\n{\"pc\":51,\"op\":96,\"gas\":\"0x261ff9f\",\"gasCost\":\"0x3\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"PUSH1\"}\r\n{\"pc\":53,\"op\":95,\"gas\":\"0x261ff9c\",\"gasCost\":\"0x2\",\"memSize\":0,\"stack\":[\"0x2\"],\"depth\":1,\"refund\":0,\"opName\":\"PUSH0\"}\r\n{\"pc\":54,\"op\":85,\"gas\":\"0x261ff9a\",\"gasCost\":\"0x4e20\",\"memSize\":0,\"stack\":[\"0x2\",\"0x0\"],\"depth\":1,\"refund\":0,\"opName\":\"SSTORE\"}\r\n{\"pc\":55,\"op\":0,\"gas\":\"0x261b17a\",\"gasCost\":\"0x0\",\"memSize\":0,\"stack\":[],\"depth\":1,\"refund\":0,\"opName\":\"STOP\"}\r\n{\"output\":\"\",\"gasUsed\":\"0x567e\"}\r\n```\r\n\r\nTracing the code manually shows us what happens:\r\n\r\n| PC | Opcode | Stack (after operation) |\r\n| -: | - | :- |\r\n| 0 | PUSH0 | 0\r\n| 1 | DUP1 | 0,0\r\n| 2 | SLOAD | 0,0\r\n| 3 | PUSH6 0xaabbccddeeff | 0xaa..ff, 0, 0\r\n| 10 | DUP2 | 0, 0xaa..ff, 0, 0\r\n| 11 | ISZERO | 1, 0xaa..ff, 0, 0\r\n| 12 | PUSH1 0x2E | 0x2E, 1, 0xaa..ff, 0, 0\r\n| 14 | JUMPI | 0xaa..ff, 0, 0\r\n| (0x2e=) 46 | JUMPDEST | 0xaa..ff, 0, 0\r\n| 47 | SWAP2 | 0, 0, 0xaa..ff\r\n| 48 | POP | 0, 0xaa..ff\r\n| 49 | POP |  0xaa..ff\r\n| 50 | POP | \r\n| 51 | PUSH1 0x02 | 2\r\n| 53 | PUSH0 | 0, 2\r\n| 54 | SSTORE | \r\n| 55 | STOP |\r\n\r\nNote that this is an edge case. If I replace either of the `verbatim` expressions with `verbatim_0i_1o(hex\"<same operation, but without the initial pop>\")`, the compiler works correctly. ",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14640/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14640/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1780183993",
    "html_url": "https://github.com/ethereum/solidity/issues/14640#issuecomment-1780183993",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14640",
    "id": 1780183993,
    "node_id": "IC_kwDOAm_5kc5qG3O5",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-25T23:15:14Z",
    "updated_at": "2023-10-25T23:36:06Z",
    "author_association": "MEMBER",
    "body": "Thank you very much for the report - I just confirmed this.\r\n\r\nThis is a genuine bug in the libevmasm block-deduplicator's treatment of verbatim assembly items.\r\nThe comparison used for the block deduplicator is broken - if there are two blocks that are completely identical except for a difference in the data of a verbatim assembly item, they may wrongfully compare equal. (In your example this leads to the optimizer wrongfully collapsing the jump target of the zero case and the two case.)\r\n\r\nYou can work around it by disabling the block deduplicator (that's possible via standard-json in the optimizer detail settings). The fix is https://github.com/ethereum/solidity/pull/14649.\r\n\r\nWe will need to closely evaluate which other effects this bug may have.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1780183993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1781319297",
    "html_url": "https://github.com/ethereum/solidity/issues/14640#issuecomment-1781319297",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14640",
    "id": 1781319297,
    "node_id": "IC_kwDOAm_5kc5qLMaB",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-26T15:08:33Z",
    "updated_at": "2023-10-26T15:13:28Z",
    "author_association": "MEMBER",
    "body": "I tried compiling the code with the buggy operator removed and looks like we have exactly 2 places that use it:\r\n\r\nhttps://github.com/ethereum/solidity/blob/28ee5d3fad770dfaf4c5c1addb9f1ee489bc34e3/libevmasm/BlockDeduplicator.cpp#L76\r\nhttps://github.com/ethereum/solidity/blob/28ee5d3fad770dfaf4c5c1addb9f1ee489bc34e3/libevmasm/ConstantOptimiser.cpp#L42-L44\r\n\r\nThe latter will not use the item when `type() == VerbatimBytecode` so looks like `BlockDeduplicator` must be the only affected component.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1781319297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1783422215",
    "html_url": "https://github.com/ethereum/solidity/issues/14640#issuecomment-1783422215",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14640",
    "id": 1783422215,
    "node_id": "IC_kwDOAm_5kc5qTN0H",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-27T19:44:28Z",
    "updated_at": "2023-10-30T08:50:31Z",
    "author_association": "MEMBER",
    "body": "Here's what I found regarding the use of `verbatim` in the wild.\r\n\r\n### Optimism\r\nAs far as I can tell, Optimism switched to a new design shortly after we introduced `verbatim`, which made it unnecessary for them.\r\n\r\n[OVM Deep Dive](https://medium.com/ethereum-optimism/ovm-deep-dive-a300d1085f52) seems to describe how it worked at the time of https://github.com/ethereum/solidity/issues/10869#issuecomment-773649502 (February 2021). Back then the bytecode had to be specially crafted to replace some opcodes with calls to an \"Execution Manager\" contract and this was done using [solc-transpiler](https://www.npmjs.com/package/@eth-optimism/solc-transpiler). In July we released 0.8.5 with support for `verbatim`.\r\n\r\n[Optimism's Solidity fork](https://github.com/ethereum-optimism/solidity) was retired in May 2021. Maybe they toyed with `verbatim`, but even if so, probably not for long. [Introducing EVM Equivalence](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306) from October 2021 already describes a new system that simulates EVM to run bytecode as is. There's no mention of any transpilation.\r\n\r\nThe current [official instructions for deploying to Optimism using various frameworks](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/getting-started) don't mention any special compilation or post-processing step. Sample configs just have the frameworks use solc the way they normally do.\r\n\r\n### Ethereum Execution Tests\r\nExecution tests use `verbatim` a lot. See [search for `verbatim` in `ethereum/tests`](https://github.com/search?q=repo%3Aethereum%2Ftests+verbatim&type=code).\r\n\r\n### zkSync Era\r\n`verbatim` is used in zkSync precompiles and some contracts, e.g.:\r\n- [`SHA256.yul`](https://github.com/matter-labs/era-system-contracts/blob/main/contracts/precompiles/SHA256.yul)\r\n- [`EventWriter.yul`](https://github.com/matter-labs/era-system-contracts/blob/main/contracts/EventWriter.yul)\r\n- [code search for `verbatim` in `matter-labs` org](https://github.com/search?q=org%3Amatter-labs+verbatim+path%3A*.yul&type=code)\r\n\r\nThose do not seem relevant to us. They use solc only for generating Yul and metadata. Yul is then compiled into circuits using their own [zksolc](https://era.zksync.io/docs/tools/compiler-toolchain/solidity.html). Since they do not emit bytecode, `verbatim` seems to be used differently, apparently using some primitives from their target, e.g.  `verbatim_2i_1o(\"precompile\", precompileParams, gasToBurn)`. So there's no risk of someone trying to compile and deploy it on the mainnet.\r\n\r\n### Other uses\r\nI did not see any other significant use of `verbatim` in public repos.\r\n\r\nThere are tiny experimental libs like [`Fmuldiv.yul`](https://github.com/bitwise343/fmuldiv/blob/main/src/Fmuldiv.yul) but no large public projects using it.\r\n\r\nHere are [other results from code search](https://sourcegraph.com/search?q=context%3Aglobal++lang%3AYul+content%3A\"verbatim\"+++-repo%3Aethereum%2Fsolidity+-repo%3Amatter-labs&patt1ernType=regexp&case=yes&sm=0&groupBy=repo) if case anyone wants to browse through them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1783422215/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1783460384",
    "html_url": "https://github.com/ethereum/solidity/issues/14640#issuecomment-1783460384",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14640",
    "id": 1783460384,
    "node_id": "IC_kwDOAm_5kc5qTXIg",
    "user": {
      "login": "qbzzt",
      "id": 12722969,
      "node_id": "MDQ6VXNlcjEyNzIyOTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12722969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qbzzt",
      "html_url": "https://github.com/qbzzt",
      "followers_url": "https://api.github.com/users/qbzzt/followers",
      "following_url": "https://api.github.com/users/qbzzt/following{/other_user}",
      "gists_url": "https://api.github.com/users/qbzzt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qbzzt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qbzzt/subscriptions",
      "organizations_url": "https://api.github.com/users/qbzzt/orgs",
      "repos_url": "https://api.github.com/users/qbzzt/repos",
      "events_url": "https://api.github.com/users/qbzzt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qbzzt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-27T20:20:10Z",
    "updated_at": "2023-10-27T20:20:10Z",
    "author_association": "MEMBER",
    "body": "Yes. Since the OVM 2.0 fork went into production (Nov 2021) Optimism had no reason to do anything strange with the Solidity compiler.\r\n\r\nI know the execution tests use `verbatim` a lot, I think I wrote most of those tests. The most common reason is that we need to have tests for opcodes early, usually before they are available in Yul. The second reason (which is how I discovered this bug) is that the Yul compiler does some rearranging that makes it difficult to measure the gas costs of operations. `verbatim` lets us avoid all of those changes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1783460384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
