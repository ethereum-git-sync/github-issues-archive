{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11373/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11373/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11373/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11373",
  "id": 884438496,
  "node_id": "MDU6SXNzdWU4ODQ0Mzg0OTY=",
  "number": 11373,
  "title": "try/catch block does not catch the exception caused by EXTCODESIZE check on external calls",
  "user": {
    "login": "aybehrouz",
    "id": 75391306,
    "node_id": "MDQ6VXNlcjc1MzkxMzA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/75391306?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aybehrouz",
    "html_url": "https://github.com/aybehrouz",
    "followers_url": "https://api.github.com/users/aybehrouz/followers",
    "following_url": "https://api.github.com/users/aybehrouz/following{/other_user}",
    "gists_url": "https://api.github.com/users/aybehrouz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aybehrouz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aybehrouz/subscriptions",
    "organizations_url": "https://api.github.com/users/aybehrouz/orgs",
    "repos_url": "https://api.github.com/users/aybehrouz/repos",
    "events_url": "https://api.github.com/users/aybehrouz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aybehrouz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 275027668,
      "node_id": "MDU6TGFiZWwyNzUwMjc2Njg=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/documentation%20:book:",
      "name": "documentation :book:",
      "color": "006b75",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2021-05-10T15:11:59Z",
  "updated_at": "2023-02-12T21:37:13Z",
  "closed_at": "2023-02-12T21:37:13Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "<!--## Prerequisites\r\n\r\n- First, many thanks for taking part in the community. We really appreciate that.\r\n- We realize there is a lot of information requested here. We ask only that you do your best to provide as much information as possible so we can better help you.\r\n- Support questions are better asked in one of the following locations:\r\n\t- [Solidity chat](https://gitter.im/ethereum/solidity)\r\n\t- [Stack Overflow](https://ethereum.stackexchange.com/)\r\n- Ensure the issue isn't already reported.\r\n- The issue should be reproducible with the latest solidity version; however, this isn't a hard requirement and being reproducible with an older version is sufficient.\r\n\r\n*Delete the above section and the instructions in the sections below before submitting*\r\n\r\n-->\r\n\r\n## Description\r\n`try/catch` block is unable to catch an exception.\r\n<!--Please shortly describe the bug you have found, and what you expect instead.-->\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.8.3\r\n- Target EVM version (as per compiler settings):\r\n- Framework/IDE (e.g. Truffle or Remix): Remix\r\n- EVM execution environment / backend / blockchain client: Remix\r\n- Operating system: Win10\r\n\r\n## Steps to Reproduce\r\n\r\n```solidity\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface HaveF {\r\n    function f() external view returns (uint);\r\n}\r\n\r\n\r\ncontract Test {\r\n    function dontFail(HaveF c) public {\r\n        try c.f() returns (uint v) {\r\n            \r\n        } catch {\r\n            \r\n        }\r\n    }\r\n}\r\n```\r\nWhen `Test.dontFail(addr)` is called with an `addr` which is not a contract, and does not implement `f()`, the transaction fails:\r\n```\r\ntransact to Test.dontFail errored: VM error: revert. revert The transaction has been reverted to the initial state. Note: The called function should be payable if you send value and the value you send should be less than your current balance. Debug the transaction to get more information\r\n```\r\n`dontFail` method should not fail. It seems that the `try/catch` block is unable to catch the thrown exception.\r\n",
  "closed_by": {
    "login": "cameel",
    "id": 137030,
    "node_id": "MDQ6VXNlcjEzNzAzMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cameel",
    "html_url": "https://github.com/cameel",
    "followers_url": "https://api.github.com/users/cameel/followers",
    "following_url": "https://api.github.com/users/cameel/following{/other_user}",
    "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
    "organizations_url": "https://api.github.com/users/cameel/orgs",
    "repos_url": "https://api.github.com/users/cameel/repos",
    "events_url": "https://api.github.com/users/cameel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cameel/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11373/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11373/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836855041",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-836855041",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 836855041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNjg1NTA0MQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-10T15:40:18Z",
    "updated_at": "2021-05-10T15:40:18Z",
    "author_association": "MEMBER",
    "body": "This is not a bug. `catch` by design can only catch reverts that happen inside the contract you're calling. If the address does not represent a contract, the `CALL` opcode actually reports success (this is a weird quirk of the EVM). This behavior of the opcode is counter-intuitive so high-level external calls in Solidity have an extra check to determine if the call was to a contract or not. It if was not, your contract reverts. But this revert is performed by your own contract so unfortunately you cannot catch it.\r\n\r\nBoth the behavior of `catch` and this extra check are documented but I can see how the effect when you combine them might be hard to realize. I think we should add an explicit warning about this gotcha.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836855041/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836875277",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-836875277",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 836875277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNjg3NTI3Nw==",
    "user": {
      "login": "aybehrouz",
      "id": 75391306,
      "node_id": "MDQ6VXNlcjc1MzkxMzA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/75391306?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aybehrouz",
      "html_url": "https://github.com/aybehrouz",
      "followers_url": "https://api.github.com/users/aybehrouz/followers",
      "following_url": "https://api.github.com/users/aybehrouz/following{/other_user}",
      "gists_url": "https://api.github.com/users/aybehrouz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aybehrouz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aybehrouz/subscriptions",
      "organizations_url": "https://api.github.com/users/aybehrouz/orgs",
      "repos_url": "https://api.github.com/users/aybehrouz/repos",
      "events_url": "https://api.github.com/users/aybehrouz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aybehrouz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-10T15:54:50Z",
    "updated_at": "2021-05-10T15:59:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks a lot for your detailed answer.\r\nThe problem is that this can easily introduce security bugs. There are situations that you need to make sure an external call can never make your contract fail or your contract will stop functioning forever. You may think(as I did) that with a try/catch block you can prevent your contract from failing (like what you do in all other conventional programming languages). but that may not work the way you thought.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836875277/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836882603",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-836882603",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 836882603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNjg4MjYwMw==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-10T15:59:47Z",
    "updated_at": "2021-05-10T15:59:47Z",
    "author_association": "MEMBER",
    "body": "Well, that's the more general problem of making external calls to arbitrary unknown addresses which should be avoided in the first place.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836882603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836892273",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-836892273",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 836892273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNjg5MjI3Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-10T16:06:15Z",
    "updated_at": "2021-05-10T16:06:15Z",
    "author_association": "MEMBER",
    "body": "@aybehrouz I see that this might seem like the failure is coming from `c` and thus it is an \"attack vector\" take make `dontFail` fail forever. One could argue that passing `c` (or storing it in storage) is already the problem. As an analogy, if you have a function\r\n```\r\nfunction f(uint x) returns (uint) { return x - 1; }\r\n```\r\nthen this function can fail if you pass the \"wrong\" `x` and there is no possibility to use `try/catch` because the failing code is in the current contract. This is the same with calling `c.f()` - the check for `c` being a contract is in the current contract and thus outside of the region covered by `try/catch`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836892273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836972118",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-836972118",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 836972118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNjk3MjExOA==",
    "user": {
      "login": "aybehrouz",
      "id": 75391306,
      "node_id": "MDQ6VXNlcjc1MzkxMzA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/75391306?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aybehrouz",
      "html_url": "https://github.com/aybehrouz",
      "followers_url": "https://api.github.com/users/aybehrouz/followers",
      "following_url": "https://api.github.com/users/aybehrouz/following{/other_user}",
      "gists_url": "https://api.github.com/users/aybehrouz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aybehrouz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aybehrouz/subscriptions",
      "organizations_url": "https://api.github.com/users/aybehrouz/orgs",
      "repos_url": "https://api.github.com/users/aybehrouz/repos",
      "events_url": "https://api.github.com/users/aybehrouz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aybehrouz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-10T17:01:59Z",
    "updated_at": "2021-05-10T17:01:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chriseth Thanks for your answer.\r\n@cameel explained the situation very well and I did understand why this is happening. What I am trying to say is that this behavior is really counterintuitive. because a try/catch block is supposed to cover a *region* of code not a function or an operator. A programmer usually tries to handle errors that come from some region of the code. Maybe you should use a different syntax for try/catch blocks?\r\n\r\nAnd it can introduce security problems. In my code an admin can register ERC20 tokens in our contract. usually the admin should be a good guy but if our admin turns out to be a bad guy he may try to register *bad* contracts. So our contract should be able to handle that situation. If the admin registers an ERC20 contract that fails when its balanceOf() method is called he can make our contract stop functioning forever.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/836972118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/837042733",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-837042733",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 837042733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNzA0MjczMw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-10T17:51:03Z",
    "updated_at": "2021-05-10T17:51:03Z",
    "author_association": "MEMBER",
    "body": "`try/catch` does on purpose not work with regions of code, but only with external function calls. If we use a different term, people will still try to make the connection - \"ah, this works just like try/catch in other languages\". The edge case of this issue is one of the very small details that can still be considered to be covered by the syntax, and I think we should highlight that in the documentation but not change the syntax. In general, I believe that such denial-of-service attacks should not be mitigated through try/catch but rather though multi-step processes.\r\n\r\nThe reason is that even if `c.f()` is a valid function and is executed but consumes all gas, it can make the contract stop working. You still have 1/64th of the gas left, but I think it is not good practice to rely on that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/837042733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/837220764",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-837220764",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 837220764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNzIyMDc2NA==",
    "user": {
      "login": "aybehrouz",
      "id": 75391306,
      "node_id": "MDQ6VXNlcjc1MzkxMzA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/75391306?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aybehrouz",
      "html_url": "https://github.com/aybehrouz",
      "followers_url": "https://api.github.com/users/aybehrouz/followers",
      "following_url": "https://api.github.com/users/aybehrouz/following{/other_user}",
      "gists_url": "https://api.github.com/users/aybehrouz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aybehrouz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aybehrouz/subscriptions",
      "organizations_url": "https://api.github.com/users/aybehrouz/orgs",
      "repos_url": "https://api.github.com/users/aybehrouz/repos",
      "events_url": "https://api.github.com/users/aybehrouz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aybehrouz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-10T19:43:42Z",
    "updated_at": "2021-05-10T19:58:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "> \r\n> The reason is that even if `c.f()` is a valid function and is executed but consumes all gas, it can make the contract stop working. You still have 1/64th of the gas left, but I think it is not good practice to rely on that.\r\n\r\noh thanks a lot for pointing out that problem. I really can not find a solution for that. Some internal state needs to be updated and it has to be done for all registered tokens.\r\n\r\nHowever in my case, the admin of the system is me and the ERC20 tokens are stable coins like USDT,DAI,.... I was wondering that if some one stole my private keys what would happen for my contract. Also I'm worried that I may register a wrong address by mistake while adding the functionality for un-registering tokens is not an option.\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/837220764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/838128361",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-838128361",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 838128361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzODEyODM2MQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-11T09:12:31Z",
    "updated_at": "2021-05-11T09:13:03Z",
    "author_association": "MEMBER",
    "body": "@frankgscott There's really nothing to fix here, except for adding a warning about this particular case in the try/catch docs. I think that any \"fix\" would be a major redesign and it still wouldn't be complete because of cases like out-of-gas mentioned above.\r\n\r\n@aybehrouz Just for completeness, another case try/catch will not catch is badly encoded return data from an external call. This could very well happen if you try to use the wrong interface and the function you're calling returns a different set of types than you expect it to but a malicious contract can also just use inline assembly to return virtually any invalid sequence of bytes. The decoding is obviously performed in your contract so, again, it's your contract that reverts on error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/838128361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/839176147",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-839176147",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 839176147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzOTE3NjE0Nw==",
    "user": {
      "login": "aybehrouz",
      "id": 75391306,
      "node_id": "MDQ6VXNlcjc1MzkxMzA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/75391306?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aybehrouz",
      "html_url": "https://github.com/aybehrouz",
      "followers_url": "https://api.github.com/users/aybehrouz/followers",
      "following_url": "https://api.github.com/users/aybehrouz/following{/other_user}",
      "gists_url": "https://api.github.com/users/aybehrouz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aybehrouz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aybehrouz/subscriptions",
      "organizations_url": "https://api.github.com/users/aybehrouz/orgs",
      "repos_url": "https://api.github.com/users/aybehrouz/repos",
      "events_url": "https://api.github.com/users/aybehrouz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aybehrouz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-11T21:14:20Z",
    "updated_at": "2021-05-11T21:14:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@cameel that's very good to know. thanks a lot for adding that useful information.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/839176147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1297317110",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-1297317110",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 1297317110,
    "node_id": "IC_kwDOAm_5kc5NU3z2",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-31T16:03:58Z",
    "updated_at": "2022-10-31T16:19:56Z",
    "author_association": "NONE",
    "body": "Sadly we consider this behaviour (revering during `try-catch`) as a new attack vector. Attackers could selfdestruct contract which are used with try-catch and code assumes this try-catch will never revert - but it will revert.\r\n\r\nExample of code sensitive to this attack: https://github.com/1inch/erc20-pods/blob/a2dd8997a1c7b3ade48de269ccb081ec8bcc6ea1/contracts/ERC20Pods.sol#L98-L100",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1297317110/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1427138782",
    "html_url": "https://github.com/ethereum/solidity/issues/11373#issuecomment-1427138782",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11373",
    "id": 1427138782,
    "node_id": "IC_kwDOAm_5kc5VEGje",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-12T21:37:13Z",
    "updated_at": "2023-02-12T21:37:13Z",
    "author_association": "MEMBER",
    "body": "Here's a new syntax proposal that would address this: https://github.com/ethereum/solidity/issues/13869#issuecomment-1422879881.\r\n\r\nWe have too many duplicate issues about this so I'm closing this one in favor of #13869.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1427138782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
