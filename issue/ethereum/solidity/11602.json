{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11602/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11602/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11602/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11602",
  "id": 934669397,
  "node_id": "MDU6SXNzdWU5MzQ2NjkzOTc=",
  "number": 11602,
  "title": "[ecrecover] Legacy codegen cleans dirty storage bits on read but Sol->Yul on write itself",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 275027668,
      "node_id": "MDU6TGFiZWwyNzUwMjc2Njg=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/documentation%20:book:",
      "name": "documentation :book:",
      "color": "006b75",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2021-07-01T10:10:22Z",
  "updated_at": "2022-06-15T09:44:20Z",
  "closed_at": "2022-06-15T09:44:19Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "```\r\ncontract C {\r\n  bytes s0;\r\n  constructor() {\r\n    ecrecover(\r\n        0,\r\n        1,\r\n        bytes32(0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa),\r\n        bytes32(0x1337133713371337133713371337133713371337133713371337133713371337)\r\n    ).code;\r\n    s0=(\"thisisa33bytearraythisisa33bytear\");\r\n  }\r\n  function f() external returns (bytes32 r) {\r\n      assembly {\r\n          mstore(0, s0.slot)\r\n          r := sload(add(keccak256(0, 32), 1))\r\n      }\r\n  }\r\n}\r\n// ====\r\n// compileViaYul: also\r\n// ----\r\n// f() -> 0x7237133713371337133713371337133713371337133713371337133713371337\r\n```\r\n\r\nThis test checks the value obtained via inline assembly from the storage slot 32 bytes after the start of storage variable `s0`. \r\n\r\nIdeally, this slot should return the last byte of the 33-byte bytes array literal that is being assigned to `s0` (which would be the hex of the ascii value of `r` i.e., `0x72`). However, what is actually returned includes \"dirty bits\" that seem to be from the last argument to the `ecrecover` call preceeding the storage variable assignment in the constructor.\r\n\r\nThe semantic test above passes via legacy code gen but fails via Yul. Via Yul the return value from `f()` is `0x7200...00`.\r\n\r\nPlease note that the legacy codegen does clean up the dirty bits but lazily such that non inline assembly accesses e.g., `r = s0[32];` returns `0x7200...00` as expected i.e., the cleaned up value from the adjacent slot.",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11602/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11602/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872121217",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-872121217",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 872121217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjEyMTIxNw==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-01T10:27:20Z",
    "updated_at": "2021-07-01T10:27:20Z",
    "author_association": "MEMBER",
    "body": "I'm not sure if this is a \"bug\" as such. Perhaps sufficient to document in IR breaking changes docs? We already document the fact that dirty storage bits may be retained by the legacy codegen using the following example. But there the \"dirtying\" is visible to the auditor's eyes unlike the present example (via a call to ecrecover)\r\n\r\n```\r\n    contract C {\r\n        bytes x;\r\n        function f() public returns (uint _r) {\r\n            bytes memory m = \"tmp\";\r\n            assembly {\r\n                mstore(m, 8)\r\n                mstore(add(m, 32), \"deadbeef15dead\")\r\n            }\r\n            x = m;\r\n            assembly {\r\n                _r := sload(x.slot)\r\n            }\r\n        }\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872121217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872173406",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-872173406",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 872173406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjE3MzQwNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-01T11:41:19Z",
    "updated_at": "2021-07-01T11:41:19Z",
    "author_association": "MEMBER",
    "body": "Whether or not the dirtying is visible or not does not change the issue in my opinion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872173406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872213957",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-872213957",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 872213957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjIxMzk1Nw==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-01T12:42:31Z",
    "updated_at": "2021-07-01T12:42:44Z",
    "author_association": "MEMBER",
    "body": "> Whether or not the dirtying is visible or not does not change the issue in my opinion.\r\n\r\nI'm sorry, didn't follow. Is the argument that this issue is not different from the documented example in the comment above (where `deadbeef15dead` is assigned)? Or otherwise i.e., it is different?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872213957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872285724",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-872285724",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 872285724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjI4NTcyNA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-01T14:16:19Z",
    "updated_at": "2021-07-01T14:16:19Z",
    "author_association": "MEMBER",
    "body": "Sorry: I think this is the same issue as the one we already have documented. There are numerous places where memory can get dirty, not only in explicit mstore operations.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872285724/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872397266",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-872397266",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 872397266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjM5NzI2Ng==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-01T16:44:30Z",
    "updated_at": "2021-07-01T16:44:30Z",
    "author_association": "MEMBER",
    "body": "> Sorry: I think this is the same issue as the one we already have documented. There are numerous places where memory can get dirty, not only in explicit mstore operations.\r\n\r\nIf I understood it correctly, what is being dirtied here via the `ecrecover` call is storage, not memory, right? At least this is what the fuzzer reported.\r\n\r\nThe fuzzer does not compare memory traces anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/872397266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/932167080",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-932167080",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 932167080,
    "node_id": "IC_kwDOAm_5kc43j72o",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-01T12:01:44Z",
    "updated_at": "2021-10-01T12:01:44Z",
    "author_association": "MEMBER",
    "body": "Summary of discussion with Chris on gitter:\r\n\r\nMost likely explanation for this issue is that the string `thisisa33bytearray...` is copied to memory next to one of the arguments to `ecrecover` that are not cleared after the call. Because the 31 bytes next to the string contain garbage, and the bytes copy from memory to storage does not clean dirty bytes, these dirty bytes are reflected in storage as well. These dirty bytes are only readable via inline assembly.\r\n\r\nThe main difference between this issue and https://github.com/ethereum/solidity/pull/12050 is that the dirty bytes are not part of the underlying type i.e., the length of bytes is specified by its first byte.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/932167080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131599677",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-1131599677",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 1131599677,
    "node_id": "IC_kwDOAm_5kc5Dctc9",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-19T12:00:57Z",
    "updated_at": "2022-05-19T12:12:44Z",
    "author_association": "MEMBER",
    "body": "In the semantic test below, `s2` contains dirty bits via legacy when accessed via inline assembly, IR does not. Essentially\r\n\r\n- call to `g()` via legacy returns (r1 = `0x3030...62`; r2 = `0x37...02`)\r\n- call to `g()` via IR returns (r1 = `0x3030...62 i.e., same as legacy; but r2 = `0x37...00` i.e., the last byte zero)\r\n\r\nI'm not sure where the stray `0x02` (last byte that creeps into storage originates from but my guess would be the length parameter of the function pointer array parameter of emitted event since commenting out the emit call makes the stray byte go away)\r\n\r\n```\r\ncontract C{\r\n  event ev0(function (bytes10, uint208) external returns (bytes27)[] i0, string i1);\r\n  string  public s2 ;\r\n  bytes13[] s3;\r\n  constructor() {\r\n    emit ev0(new function (bytes10, uint208) external returns(bytes27)[](2), (\"\"));\r\n    (s2, s3)= (string(\"00000000000000000000000004e57bdb7\"), [ bytes13(0xffffffffffffffffffffffffff)]);\r\n  }\r\n  function g() external returns (uint r1, uint r2) {\r\n    assembly {\r\n      mstore(0, s2.slot)\r\n      let slot := keccak256(0, 32)\r\n      r1 := sload(slot)\r\n      r2 := sload(add(slot, 1))\r\n    }\r\n  }\r\n}\r\n// ====\r\n// compileViaYul: also\r\n// ----\r\n// constructor() ->\r\n// ~ emit ev0(function[],string): 0x40, 0xa0, 0x02, 0x00, 0x00, 0x00\r\n// gas irOptimized: 303941\r\n// gas legacyOptimized: 279801\r\n// g() -> 0x3030303030303030303030303030303030303030303030303034653537626462, 0x3700000000000000000000000000000000000000000000000000000000000002\r\n// gas irOptimized: 277193\r\n// gas legacy: 295222\r\n// gas legacyOptimized: 257286\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131599677/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131616534",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-1131616534",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 1131616534,
    "node_id": "IC_kwDOAm_5kc5DcxkW",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-19T12:20:07Z",
    "updated_at": "2022-05-19T12:20:07Z",
    "author_association": "MEMBER",
    "body": "Slightly simpler repro:\r\n```\r\ncontract C{\r\n  event ev0(function (bytes10, uint208) external returns (bytes27)[] i0, string i1);\r\n  string  public s2 ;\r\n  constructor() {\r\n    emit ev0(new function (bytes10, uint208) external returns(bytes27)[](2), (\"\"));\r\n    s2 = string(\"00000000000000000000000004e57bdb7\");\r\n  }\r\n  function h() external returns (string memory) {\r\n        assembly {\r\n                sstore(s2.slot, 129) // forced resize\r\n        }\r\n        return s2;\r\n  }\r\n}\r\n// ====\r\n// compileViaYul: also\r\n// ----\r\n// constructor() ->\r\n// ~ emit ev0(function[],string): 0x40, 0xa0, 0x02, 0x00, 0x00, 0x00\r\n// gas irOptimized: 277193\r\n// gas legacy: 295222\r\n// gas legacyOptimized: 257286\r\n// h() -> 0x20, 0x40, 0x3030303030303030303030303030303030303030303030303034653537626462, 0x3700000000000000000000000000000000000000000000000000000000000002\r\n```\r\nI guess there's dirty memory before the assignment to ``s2`` that's not properly cleared...\r\nThe desired behaviour is the IR behaviour - storage should be clean at all times...\r\nSo looks like a genuine minor bug in legacy codegen to me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131616534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131619590",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-1131619590",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 1131619590,
    "node_id": "IC_kwDOAm_5kc5DcyUG",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-19T12:23:33Z",
    "updated_at": "2022-05-19T12:24:53Z",
    "author_association": "MEMBER",
    "body": "Actually:\r\n```\r\ncontract C {\r\n  event ev0(function (bytes10, uint208) external returns (bytes27)[] i0, string i1);\r\n  bytes public s2 ;\r\n  constructor() {\r\n    emit ev0(new function (bytes10, uint208) external returns(bytes27)[](2), (\"\"));\r\n    s2 = bytes(\"00000000000000000000000004e57bdb7\");\r\n  }\r\n  function h() external returns (bytes memory) {\r\n        for (uint i = 0; i < 31; ++i)\r\n                s2.push();\r\n        return s2;\r\n  }\r\n}\r\n// ====\r\n// compileViaYul: false\r\n// ----\r\n// constructor() ->\r\n// ~ emit ev0(function[],string): 0x40, 0xa0, 0x02, 0x00, 0x00, 0x00\r\n// gas irOptimized: 277193\r\n// gas legacy: 295222\r\n// gas legacyOptimized: 257286\r\n// h() -> 0x20, 0x40, 0x3030303030303030303030303030303030303030303030303034653537626462, 0x3700000000000000000000000000000000000000000000000000000000000002\r\n```\r\n\r\nhas the issue without any inline assembly...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131619590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131639155",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-1131639155",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 1131639155,
    "node_id": "IC_kwDOAm_5kc5Dc3Fz",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-19T12:43:42Z",
    "updated_at": "2022-05-19T12:43:42Z",
    "author_association": "MEMBER",
    "body": "Also happens with a less exotic event...\r\n```\r\ncontract C {\r\n  event ev0(uint[] i0, string i1);\r\n  bytes public s2;\r\n  constructor() {\r\n    emit ev0(new uint[](2), (\"\"));\r\n    s2 = bytes(\"00000000000000000000000004e57bdb7\");\r\n  }\r\n  function h() external returns (bytes memory) {\r\n        for (uint i = 0; i < 31; ++i)\r\n                s2.push();\r\n        return s2;\r\n  }\r\n}\r\n// ====\r\n// compileViaYul: false\r\n// ----\r\n// constructor() ->\r\n// ~ emit ev0(function[],string): 0x40, 0xa0, 0x02, 0x00, 0x00, 0x00\r\n// gas irOptimized: 277193\r\n// gas legacy: 340105\r\n// gas legacyOptimized: 257286\r\n// h() -> 0x20, 0x40, 0x3030303030303030303030303030303030303030303030303034653537626462, 0x3700000000000000000000000000000000000000000000000000000000000002\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131639155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131656449",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-1131656449",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 1131656449,
    "node_id": "IC_kwDOAm_5kc5Dc7UB",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-19T12:57:34Z",
    "updated_at": "2022-05-19T13:35:57Z",
    "author_association": "MEMBER",
    "body": "Another simplification:\r\n```\r\ncontract C {\r\n  event ev0(uint[] i0, uint);\r\n  bytes public s2;\r\n  constructor() {\r\n    emit ev0(new uint[](2), 0); // or probably anything else leaving memory dirty in the right spot\r\n    bytes memory m = new bytes(63);\r\n    s2 = m;\r\n  }\r\n  function h() external returns (bytes memory) {\r\n        s2.push();\r\n        return s2;\r\n  }\r\n}\r\n// ====\r\n// compileViaYul: false\r\n// ----\r\n// constructor() ->\r\n// ~ emit ev0(uint256[],string): 0x40, 0xa0, 0x02, 0x00, 0x00, 0x00\r\n// h() -> 0x20, 0x40, 0x00, 0x02\r\n```\r\n\r\n...this is starting to look somewhat serious to me...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1131656449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1154359492",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-1154359492",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 1154359492,
    "node_id": "IC_kwDOAm_5kc5EziDE",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-13T19:44:09Z",
    "updated_at": "2022-06-13T19:44:09Z",
    "author_association": "MEMBER",
    "body": "So do we consider #13045 a complete fix for this or are there potentially more cases that we need to explore?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1154359492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156246675",
    "html_url": "https://github.com/ethereum/solidity/issues/11602#issuecomment-1156246675",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11602",
    "id": 1156246675,
    "node_id": "IC_kwDOAm_5kc5E6uyT",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T09:44:19Z",
    "updated_at": "2022-06-15T09:44:19Z",
    "author_association": "MEMBER",
    "body": "Reading through this again, I think #13045 should have been a complete fix, so I'm closing this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156246675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
