{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9616",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9616/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9616/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9616/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9616",
  "id": 678060177,
  "node_id": "MDU6SXNzdWU2NzgwNjAxNzc=",
  "number": 9616,
  "title": "Replace \"returns\" with \"->\" in function definitions (and other use cases)",
  "user": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 467898404,
      "node_id": "MDU6TGFiZWw0Njc4OTg0MDQ=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/breaking%20change%20:warning:",
      "name": "breaking change :warning:",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438006499,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaa4w",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20effort",
      "name": "low effort",
      "color": "ffb1fa",
      "default": false,
      "description": "There is not much implementation work to be done. The task is very easy or tiny."
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "001dff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4438492402,
      "node_id": "LA_kwDOAm_5kc8AAAABCI4E8g",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/nice%20to%20have",
      "name": "nice to have",
      "color": "ffdeb3",
      "default": false,
      "description": "We don’t see a good reason not to have it but won’t go out of our way to implement it."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-08-13T00:29:06Z",
  "updated_at": "2022-09-14T14:33:01Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "**Warning: this issue is not too much thought out yet.**\r\n\r\nWhile implementing #9605 and making that a feature of `ScannerKind::Yul` I realised that perhaps that token is invalid in the current Solidity language syntax and could unconditionally enable it. This sparked some ideas about how it could be used.\r\n\r\n---\r\n\r\n1. Replace `returns` with`->`:\r\n\r\n```\r\nfunction approve(uint amount) -> (bool) external pure {}\r\n```\r\n\r\nSide comment:\r\n> Perhaps grouping the input and output and then having specifiers follow is more readable. Though one could argue that some specifiers (such as modifiers) logically belong before the output declaration as they are \"processed” before the output is returned.\r\n\r\n---\r\n\r\n2. Use it in function types\r\n\r\n```\r\nfunction (uint, uint) returns (uint)`\r\n```\r\nwould be reduced to\r\n```\r\n(uint, uint) -> (uint)\r\n```\r\n\r\n@ekpyron pointed out:\r\n> `function (uint, uint) -> (uint) public x;`... is the state variable public or the function type?\r\n\r\n---\r\n\r\n3. Use it for lambdas:\r\n\r\n```\r\nlambda min = (uint, uint) -> (uint) { }\r\n```\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9616/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9616/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673178682",
    "html_url": "https://github.com/ethereum/solidity/issues/9616#issuecomment-673178682",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9616",
    "id": 673178682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzE3ODY4Mg==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T00:31:49Z",
    "updated_at": "2020-08-13T00:31:49Z",
    "author_association": "MEMBER",
    "body": "I'm all for that, if we find a solution for the function type ambiguity. We can even do it non-breakingly, if we keep ``returns`` with a deprecated warning. People will probably hate us for it, though, because this would literally break almost every contract out there I guess :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673178682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674094338",
    "html_url": "https://github.com/ethereum/solidity/issues/9616#issuecomment-674094338",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9616",
    "id": 674094338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDA5NDMzOA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T14:11:33Z",
    "updated_at": "2020-08-14T14:11:33Z",
    "author_association": "MEMBER",
    "body": "Actually the function type ambiguity may not be related to this that much... we already do have this problem for function types without return values, i.e. we have stuff like ``function() internal internal x;``, etc. - so the arrow wouldn't make this *that* much worse...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674094338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1157669625",
    "html_url": "https://github.com/ethereum/solidity/issues/9616#issuecomment-1157669625",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9616",
    "id": 1157669625,
    "node_id": "IC_kwDOAm_5kc5FAKL5",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-16T13:35:03Z",
    "updated_at": "2022-06-16T13:35:03Z",
    "author_association": "MEMBER",
    "body": "Is this actually breaking or can we transition by allowing both :-)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1157669625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
