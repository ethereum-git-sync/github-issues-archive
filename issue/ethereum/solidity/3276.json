{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3276",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3276/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3276/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3276/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3276",
  "id": 278937083,
  "node_id": "MDU6SXNzdWUyNzg5MzcwODM=",
  "number": 3276,
  "title": "Feature Request: Composition-based inheritance",
  "user": {
    "login": "rphmeier",
    "id": 10121380,
    "node_id": "MDQ6VXNlcjEwMTIxMzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/10121380?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rphmeier",
    "html_url": "https://github.com/rphmeier",
    "followers_url": "https://api.github.com/users/rphmeier/followers",
    "following_url": "https://api.github.com/users/rphmeier/following{/other_user}",
    "gists_url": "https://api.github.com/users/rphmeier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rphmeier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rphmeier/subscriptions",
    "organizations_url": "https://api.github.com/users/rphmeier/orgs",
    "repos_url": "https://api.github.com/users/rphmeier/repos",
    "events_url": "https://api.github.com/users/rphmeier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rphmeier/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4726043980,
      "node_id": "LA_kwDOAm_5kc8AAAABGbG1TA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/Feature%20Request",
      "name": "Feature Request",
      "color": "5DBB65",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2017-12-04T10:06:26Z",
  "updated_at": "2022-10-27T14:23:35Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Apologies if this has already been suggested.\r\n\r\nCurrently if we want to extend the functionality of a contract `B` with some additional functionality in `A` we have two options:\r\n  1. declare a `contract A extends B {}` and access all items of `B` from within the context of `A` implicitly. I find this can make logic harder to follow when `A` and `B` are defined in separate files.\r\n  1. declare `contract A { B b_member; }`. This requires actually deploying another contract and being allowed only to access public items. Additionally, each call requires actually making an EVM sub-call, which is fairly expensive.\r\n\r\nI would like to be able to declare something along the lines of\r\n\r\n```\r\ncontract A {\r\n    B b_member inline;\r\n}\r\n```\r\n\r\nwhere `b_member` will be laid out in storage and code the same way as in option 1, but will function the same way as in option 2, but with private items also accessible. This kind of composition is helpful for code quality but should not harm performance.\r\n\r\nAlternatives:\r\n  - Only have public items accessible from an inline member contract. The member's logic may require certain invariants about the state of its storage to be upheld, and can expose a safe public interface. Bypassing the public interface could lead to invariants being broken. If access to private items is allowed, it should be actively discouraged and linted against.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3276/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3276/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/348931675",
    "html_url": "https://github.com/ethereum/solidity/issues/3276#issuecomment-348931675",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3276",
    "id": 348931675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODkzMTY3NQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T11:11:21Z",
    "updated_at": "2017-12-04T11:11:21Z",
    "author_association": "MEMBER",
    "body": "This actually has been considered before (\"relocatable contracts\"), although I think it also used calls (back then they were of course much cheaper).\r\n\r\nSo if I understand you correctly, you only want to separate the code into different files / blocks and have an implicit \"self\" struct that might be at a different place than the default beginning of storage, right?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/348931675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/348931945",
    "html_url": "https://github.com/ethereum/solidity/issues/3276#issuecomment-348931945",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3276",
    "id": 348931945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODkzMTk0NQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T11:12:25Z",
    "updated_at": "2017-12-04T11:12:25Z",
    "author_association": "MEMBER",
    "body": "You currently can get something like this by using a library with internal functions and a struct as first parameter, by the way.\r\n\r\nIn general, I think the code size will get too big quite fast, so I'm not too sure this model is very useful. But I'm happy to learn of different numbers :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/348931945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/348958331",
    "html_url": "https://github.com/ethereum/solidity/issues/3276#issuecomment-348958331",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3276",
    "id": 348958331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODk1ODMzMQ==",
    "user": {
      "login": "rphmeier",
      "id": 10121380,
      "node_id": "MDQ6VXNlcjEwMTIxMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/10121380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rphmeier",
      "html_url": "https://github.com/rphmeier",
      "followers_url": "https://api.github.com/users/rphmeier/followers",
      "following_url": "https://api.github.com/users/rphmeier/following{/other_user}",
      "gists_url": "https://api.github.com/users/rphmeier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rphmeier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rphmeier/subscriptions",
      "organizations_url": "https://api.github.com/users/rphmeier/orgs",
      "repos_url": "https://api.github.com/users/rphmeier/repos",
      "events_url": "https://api.github.com/users/rphmeier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rphmeier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T13:12:50Z",
    "updated_at": "2017-12-04T13:50:01Z",
    "author_association": "NONE",
    "body": "> have an implicit \"self\" struct that might be at a different place than the default beginning of storage, right?\r\n\r\nyes, from an implementation standpoint that sounds correct. Although one alternative would be make it work exactly as `extend` does but prefix item names with the member name. e.g. if B has a member `bar` and `A` has an inline member `B foo`, The identifier is changed to `foo.bar` instead of just `bar`. I am not familiar with solc internals so it's hard for me to say which implementation approach is easier -- although this will probably break tokenization.\r\n\r\n> You currently can get something like this by using a library with internal functions and a struct as first parameter\r\n\r\nInteresting! I think the ergonomics could be better but it might be worth a shot.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/348958331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/349254174",
    "html_url": "https://github.com/ethereum/solidity/issues/3276#issuecomment-349254174",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3276",
    "id": 349254174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTI1NDE3NA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T09:58:14Z",
    "updated_at": "2017-12-05T09:58:14Z",
    "author_association": "MEMBER",
    "body": "It's actually not too different than direct inheritance. Take a look at the library code here: https://github.com/Arachnid/solidity-stringutils/blob/master/strings.sol\r\n\r\nThe main difference is that you have an explicit `self` argument like in Python, but then you can just use `a.f()` (again, like in Python). And you have the flexibility to make some functions internal and others not.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/349254174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
