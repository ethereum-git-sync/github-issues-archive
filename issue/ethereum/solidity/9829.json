{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9829",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9829/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9829/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9829/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9829",
  "id": 703067673,
  "node_id": "MDU6SXNzdWU3MDMwNjc2NzM=",
  "number": 9829,
  "title": "pack / unpack: a flexible data encoding scheme",
  "user": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2020-09-16T20:54:00Z",
  "updated_at": "2022-08-17T13:49:54Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Exchanging data with contracts is a crucial feature, which has been mostly covered by the ABI and hidden by the language with decoding and encoding done opaquely. Various constructs, such as proxies and layer-2 solutions, demand more control over the data, and as a result new functionality was introduced to widen the control for the users: `abi.encode`, `abi.encodePacked`, and `abi.decode`.\r\n\r\nImportant to note that `abi.encode`/`abi.decode` operate on the \"non-packed\" ABI encoding specification, while `abi.encodePacked` allows for a [weird ruleset of packed encoding](https://solidity.readthedocs.io/en/v0.7.0/abi-spec.html?highlight=abi.encode#non-standard-packed-mode).\r\n\r\nThere have been several requests for more flexibility for decoding, including `abi.decodePacked`, which due to the ambiguity of the encoding cannot be done.\r\n\r\nI propose to take a cue from other languages and consider the widely used pack / unpack functions:\r\n- Python packing: https://docs.python.org/2/library/struct.html\r\n- Ruby packing: https://apidock.com/ruby/String/unpack\r\n- Lua packing: http://www.inf.puc-rio.br/~roberto/struct/\r\n\r\n---\r\n\r\nIntroduce two functions:\r\n1. `pack(<format>, <values>...) -> (bytes memory data)`\r\n2. `unpack(<data>, <format>, <types>...) -> <variables>...)`\r\n\r\nThe `format` is a *string literal* consisting of the keys described below, where the space character between the keys are ignored. The `types` is the same format as used by `abi.decode`, and the number of types must match the number of \"captures\" provided in the `format`. Both of these rules are so an encoder/decoder can be generated at compile time.\r\n\r\nThese could be placed under `abi.`, some new namespace, or left top level.\r\n\r\nExample:\r\n```solidity\r\nbytes memory data = pack(\"i8 c20 A\", -1234, \"20 bytes of string!\\0\", this);\r\n(int64 a, string memory b, address c) = unpack(data, \"i8 c20 A\", (int64, string memory, address));\r\n```\r\n\r\n---\r\n\r\n| Key | C type         | Solidity type | Python | Ruby | Lua | Comments |\r\n|-----|----------------|---------------|--------|------|-----|-----|\r\n| t   | \"bool\"         | bool          | *      | *    | *   | (probably not needed)\r\n| b   | char           | int8          | Y      |      | Y   |\r\n| B   | unsigned char  | uint8         | Y      |      | Y   |\r\n| h   | short          | int16         | Y      |      | Y   |\r\n| H   | unsigned short | uint16        | Y      |      | Y   |\r\n| iN  | int            | intN          | *      |      | Y   |\r\n| IN  | unsigned int   | uintN         | *      |      | Y   |\r\n| l   | long           | int32         | Y      |      | Y   |\r\n| L   | unsigned long  | uint32        | Y      |      | Y   |\r\n| cN  | char[]         | bytes         | *      |      | Y   |\r\n| c0  | C-string       | string        | *      |      | Y   |\r\n| A   | char[20]       | address       | n/a    | n/a  | n/a |\r\n\r\nThere are two more special symbols:\r\n- `>` sets big-endian mode (this is the default)\r\n- `<` sets little-endian mode\r\n\r\nAdditional rules:\r\n- any number of spaces between the keys are ignored\r\n- a valid lowercase hex number (in the form of `[0-9a-z][0-9a-z]`) is taken as a literal value to be matched\r\n- the underscore followed by a decimal number (`_NN`) literal signals the number of bytes to skip (or zero-pad in case of packing)\r\n- `iN` and `IN` mean that `N` is a decimal number literal which defines the number of bytes of that integer type\r\n- `cN` means that `N` number of bytes are expected, where `N` is a literal decimal number\r\n- `c0` means that a zero terminated C-string is expected, furthermore it must be valid UTF-8\r\n\r\nOne of many questions: should the decoder fail (revert) if the length of input is shorter than expected? I think so, though one could argue if that is calldata then it can be \"safely\" zero padded.\r\n\r\n---\r\n\r\nExample for decoding ABI encoded data:\r\n```solidity\r\n// Decodes 32-bit, skipping 12 bytes, and 20 characters.\r\n(uint32 selector, address recipient) = unpack(data, “L _12 A”, (uint32, address));\r\n```\r\n\r\n---\r\n\r\nThis is only a rough draft and I think we have to be careful at selecting this initial list of supported keys. I think the above is a good starting point, but not something final. It could also eventually deprecate `abi.encodePacked`.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9829/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9829/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/693676273",
    "html_url": "https://github.com/ethereum/solidity/issues/9829#issuecomment-693676273",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9829",
    "id": 693676273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzY3NjI3Mw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T21:30:19Z",
    "updated_at": "2020-09-16T21:30:19Z",
    "author_association": "MEMBER",
    "body": "As an extension we could consider supporting structs to be encoded directly, marked with the key `x`, and considering the following restriction: only value types are supported and dynamic types or arrays are not. The structs are encoded as they are laid out in memory (such as `struct A { uint8, uint16 }` would be encoded as two zero padded 32-byte fields). Furthermore could consider introducing the `packed` keyword for structs to remove any padding from the encoding (such as `packed struct { uint8, uint16 }` would be encoded as 3 bytes).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/693676273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694382123",
    "html_url": "https://github.com/ethereum/solidity/issues/9829#issuecomment-694382123",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9829",
    "id": 694382123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDM4MjEyMw==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T17:26:06Z",
    "updated_at": "2020-09-17T17:26:06Z",
    "author_association": "MEMBER",
    "body": "Nice! I think it's a good idea, and it makes sense to reuse the [sort of] common format the other languages have.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694382123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694398331",
    "html_url": "https://github.com/ethereum/solidity/issues/9829#issuecomment-694398331",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9829",
    "id": 694398331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDM5ODMzMQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T17:52:30Z",
    "updated_at": "2020-09-17T20:32:25Z",
    "author_association": "MEMBER",
    "body": "Thinking about this perhaps we should consider making the above compile-time fixed-size only. This means removing the `c0` key as that depends on the input.\r\n\r\nIf the expected length and the generated output length is known at compile time, then\r\n- the compiler can insert a length-check statement and revert if out of bounds,\r\n- it would help the SMT checker to at least argue about the input/output lengths,\r\n- it would simplify the generated code.\r\n\r\nI don't see any immediate use case which would need that dynamic behaviour, in fact I would expect the dynamic behaviour to be handled by the caller. Also note that Python, Ruby, and Lua, each to some extent support dynamic behaviour, some stretching it to provide a \"semi-regexp\" format. We absolutely want to avoid that here.\r\n\r\nShould also consider replacing `abi.encodePacked` with a specialised version called `concat`. Perhaps the difference is that smaller number of types are supported.\r\n\r\nSome example code follows:\r\n#### Eth2 deposit contract\r\nbefore:\r\n```solidity\r\n        bytes32 node = sha256(abi.encodePacked(\r\n            sha256(abi.encodePacked(pubkey_root, withdrawal_credentials)),\r\n            sha256(abi.encodePacked(amount, bytes24(0), signature_root))\r\n        ));\r\n```\r\nafter:\r\n```solidity\r\n        bytes32 node = sha256(pack(\"c32 c32\",\r\n            sha256(pack(\"c32 c32\", pubkey_root, withdrawal_credentials)),\r\n            sha256(pack(\"<I8 >c24 c32\", deposit_amount, bytes24(0), signature_root))\r\n        ));\r\n```\r\nNote due to support for endianness, there is no need for the [`to_little_endian_64` helper function](https://github.com/axic/eth2-deposit-contract/blob/r2/deposit_contract.sol#L165-L177).\r\n\r\nCould also choose to represent the padding as a literal, such as `<I8 0000..0000 c32` where the `00...` part is 48 nibbles long, but the above seems shorter.\r\n\r\n#### openzeppelin/ecdsa\r\nbefore:\r\n```solidity\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n```\r\nafter:\r\n```solidity\r\n        (bytes32 r, bytes32 s, uint8 v) = unpack(signature, \"c32 c32 B\", (bytes32, bytes32, uint8));\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694398331/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694497040",
    "html_url": "https://github.com/ethereum/solidity/issues/9829#issuecomment-694497040",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9829",
    "id": 694497040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDQ5NzA0MA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T21:00:00Z",
    "updated_at": "2020-09-17T21:01:10Z",
    "author_association": "MEMBER",
    "body": "As an alternate proposal (triggered by @ekpyron) we could consider is possible if we have #9170 (wasn't there an earlier issue for this? we discussed it as early as 2016). \r\n\r\nThe above examples in order would look like this:\r\n\r\n```solidity\r\n// Decodes 32-bit, skipping 12 bytes, and 20 characters.\r\nrequire(data.length == 36);\r\nuint32 selector = uint32(bytes4(data[:4]));\r\naddress recipient = address(bytes20(data[24:]));\r\n````\r\n\r\n---\r\n\r\n```solidity\r\n        bytes32 node = sha256(concat(\r\n            sha256(concat(pubkey_root, withdrawal_credentials)),\r\n            sha256(concat(bswap(bytes8(uint64(deposit_amount))), bytes24(0), signature_root)\r\n        ));\r\n```\r\n\r\nHere we use `bswap` to perform endianness swap. It would be possible to consider `bytes8_le` or some other functionality in the type system to deal with this.\r\n\r\n---\r\n\r\n```solidity\r\nrequire(signature.length == 65);\r\nbytes32(signature[:32])\r\nbytes32(signature[32:64])\r\nuint8(signature[65])\r\n```\r\n\r\nThis one is actually pretty neat.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694497040/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694498528",
    "html_url": "https://github.com/ethereum/solidity/issues/9829#issuecomment-694498528",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9829",
    "id": 694498528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDQ5ODUyOA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T21:03:14Z",
    "updated_at": "2020-09-17T21:03:14Z",
    "author_association": "MEMBER",
    "body": "This is also related: https://github.com/ethereum/solidity/issues/8772\r\nThat could e.g. replace the ``cN`` thing for ``N > 32``, etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694498528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694498602",
    "html_url": "https://github.com/ethereum/solidity/issues/9829#issuecomment-694498602",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9829",
    "id": 694498602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDQ5ODYwMg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T21:03:24Z",
    "updated_at": "2020-09-17T21:03:24Z",
    "author_association": "MEMBER",
    "body": "The original proposal was written a while back and initially looked to support more dynamic features. If we make it entirely static, it probably is possible to drop the formatting string and rely on the types only -- which basically means this is a proposal to clarify which types `abi.encodePacked` (and a potential `abi.decodePacked`) support, and how it encodes them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694498602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694746282",
    "html_url": "https://github.com/ethereum/solidity/issues/9829#issuecomment-694746282",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9829",
    "id": 694746282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDc0NjI4Mg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-18T08:56:57Z",
    "updated_at": "2020-09-18T08:56:57Z",
    "author_association": "MEMBER",
    "body": "Would it be possible to use template syntax for the format specifier, so that we can do proper type checking? I.e.\r\n``pack::<format>(v1,v2,v3)``\r\n\r\nThis would maybe require the format to be something else than a string, but maybe not.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/694746282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/696006402",
    "html_url": "https://github.com/ethereum/solidity/issues/9829#issuecomment-696006402",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9829",
    "id": 696006402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjAwNjQwMg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-21T09:35:51Z",
    "updated_at": "2020-09-21T09:35:51Z",
    "author_association": "MEMBER",
    "body": "I prefer the more verbose way to do it (with the added benefit that it is mainly in \"userland\"). The abbreviations are just very hard to remember correctly. The downside is that the offsets have to be matched, and I wonder if there is some other mechanism to do it that looks more like:\r\n\r\n```\r\nUnpacker memory unpack(signature);\r\nbytes32 r = unpack.Bytes32();\r\nbytes32 s = unpack.Bytes32();\r\nuint8 v = unpack.Uint8();\r\nunpack.end();\r\n```\r\n\r\nOne drawback I can see is that people could be tempted to use the unpacking functions directly in function arguments here evaluation order is not always strictly adhered to.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/696006402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
