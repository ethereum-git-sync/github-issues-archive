{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13136/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13136/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13136/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13136",
  "id": 1270585352,
  "node_id": "I_kwDOAm_5kc5Lu5gI",
  "number": 13136,
  "title": "Ignore interfaces when checking if the linearization of inheritance graph is possible",
  "user": {
    "login": "migoldfinger",
    "id": 106750422,
    "node_id": "U_kgDOBlzh1g",
    "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/migoldfinger",
    "html_url": "https://github.com/migoldfinger",
    "followers_url": "https://api.github.com/users/migoldfinger/followers",
    "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
    "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
    "repos_url": "https://api.github.com/users/migoldfinger/repos",
    "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2022-06-14T10:21:24Z",
  "updated_at": "2023-03-30T12:05:36Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nFollowing an Interface pattern for every contract leads to unsolvable inheritance situation even if it should not.\r\n\r\n## Motivation\r\n\r\nI tried to implement a number of base contracts with interfaces. The pattern I was following is that a Interface for a contract should have all visible functions and all events for that contract. For that reason each interface that describes a contract that already derives from an other contract also extends the interface of the derived class.\r\nWhile this was a success with the base contracts it leads to unsolvable inheritance errors when using this contracts as base for other contracts.\r\n\r\n## Specification\r\n\r\nInterfaces should not be taken into account when checking the inheritance graph.\r\nInstead since they hold no implementation all interfaces of a contract should be merged to a single interface that hold the functions and events of all used interfaces.\r\nThat interface is then used to test if all functions are implemented as needed.\r\n\r\n## Backwards Compatibility\r\n\r\nTo prevent code breaking changes. Interfaces that work that way should be marked with a keyword.\r\n\r\nFor example: virtual interface <name> is <IName>...\r\n\r\n## Current Workaround\r\n\r\nThis would also reflect the workaround I used at the moment to manually copy methods of base interfaces to the derived one without linking the interfaces with the \"is\" keyword. The drawback of this workaround is that in big codebases changes in the base interfaces are not reflected in the derived Interfaces without manual intervention.",
  "closed_by": {
    "login": "migoldfinger",
    "id": 106750422,
    "node_id": "U_kgDOBlzh1g",
    "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/migoldfinger",
    "html_url": "https://github.com/migoldfinger",
    "followers_url": "https://api.github.com/users/migoldfinger/followers",
    "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
    "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
    "repos_url": "https://api.github.com/users/migoldfinger/repos",
    "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13136/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13136/timeline",
  "performed_via_github_app": null,
  "state_reason": "reopened"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155109267",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1155109267",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1155109267,
    "node_id": "IC_kwDOAm_5kc5E2ZGT",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-14T12:20:17Z",
    "updated_at": "2022-06-14T12:20:17Z",
    "author_association": "MEMBER",
    "body": "### The feature\r\nI think you have a point. The linearization order matters mostly for two things: deciding which virtual function to call and the order of construction/initialization of base contracts. They both do not matter for interfaces since their functions cannot have implementations and then cannot have constructors or variables that would need to be initialized.\r\n\r\nI'm not sure if I'm not missing some corner case but it seems to me like we could indeed relax the rules here and not issue this error for interfaces. The change would not be breaking because it would not affect code generation and would just allow compiling new code that used to result in an error.\r\n\r\n### Workaround\r\nStill, even with the current implementation you do not need any wild workarounds to deal with this error as long as you control the inheritance hierarchy. Problems with linearization should always be solvable by rearranging the inheritance lists you have and/or avoiding unnecessary inheritance from the same contract at different levels.\r\n\r\nYou're getting this error because the order in which you place contracts on the inheritance list imposes some constraints that the compiler must satisfy:\r\n- A contract must must not come before any contract it inherits from.\r\n- A contract must must not come before any of its siblings to the left on the inheritance list.\r\n\r\nIt would be easier to discuss if you gave an example of a situation you cannot resolve. Since you didn't, let's look at the simplest possible case:\r\n```solidity\r\ninterface I {}\r\ncontract C is I {}\r\ncontract D is C, I {}\r\n```\r\nIf you have something like this in your code you're telling the compiler that `C` must come before `I` (because it inherits from `I`) but also `I` must come before `C` (because `C` is before `I` on the inheritance list). This is impossible to satisfy.\r\n\r\nYou can work around this by either rearranging the inheritance list (`D is I, C`) or cleaning it up so that `I` does not appear in the hierarchy twice (`D is C`).\r\n\r\nFor contracts doing this might affect contract behavior but in case of interfaces it's always safe (which is also the reason why the feature you're requesting would be possible at all).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155109267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155189291",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1155189291",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1155189291,
    "node_id": "IC_kwDOAm_5kc5E2sor",
    "user": {
      "login": "migoldfinger",
      "id": 106750422,
      "node_id": "U_kgDOBlzh1g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/migoldfinger",
      "html_url": "https://github.com/migoldfinger",
      "followers_url": "https://api.github.com/users/migoldfinger/followers",
      "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
      "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
      "repos_url": "https://api.github.com/users/migoldfinger/repos",
      "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-14T13:29:21Z",
    "updated_at": "2022-06-15T20:30:11Z",
    "author_association": "NONE",
    "body": "@cameel  thanks for considering\r\nI will try to recreate the problem. I already moved forward so I will have to recreate some from my memory\r\nThe Example is loosely based on openzeppelin contracts ERC20. Lets assume they have an interface for each contract even if they do not have it, because that's basically what I have done.\r\n```\r\ninterface IERC20 {}\r\ninterface IOwnable {}\r\ninterface IERC20AltApprove {} // holds decreaseAllowance and increaseAllowance functions.\r\ninterface IERC20Metadata is IERC20 {} // optional metadata elements.\r\ninterface IERC20Burnable is IERC20Metadata {}\r\nabstract contract Context {}\r\nabstract contract Ownable is IOwnable, Context {}\r\ncontract ERC20 is IERC20Metadata, IERC20AltApprove, Context {}\r\ncontract ERC20Burnable is IERC20Burnable, ERC20, Context {}\r\n```\r\nI got this setting working without error messages.\r\nThe unsolvable problem pops up if I want to use this to create my own token.\r\n```\r\ninterface IMyToken is IOwnable, IERC20Burnable, IERC20AltApprove {}\r\ncontract MyToken, IMyToken, Ownable, ERC20Burnable {}\r\n```\r\nI think I already tried each and every possible combination of ordering without success.\r\nAs far as I understand that this is the case because for example IERC20Burnable interface is used at ERC20Burnable and in MyToken via IMyToken and the compiler can not resolve this circle reference.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155189291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155205813",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1155205813",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1155205813,
    "node_id": "IC_kwDOAm_5kc5E2wq1",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-14T13:43:22Z",
    "updated_at": "2022-06-15T20:30:32Z",
    "author_association": "MEMBER",
    "body": "It must have been slightly different because this\r\n> ```solidity\r\n> contract ERC20Burnable is IERC20Burnable, ERC20, Context {}\r\n> ```\r\n\r\nactually looks like this in OZ\r\n> ```solidity\r\n> contract ERC20Burnable is IERC20Burnable, Context, ERC20 {}\r\n> ```\r\n\r\nand with that change there's no linearization error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155205813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155223832",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1155223832",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1155223832,
    "node_id": "IC_kwDOAm_5kc5E21EY",
    "user": {
      "login": "migoldfinger",
      "id": 106750422,
      "node_id": "U_kgDOBlzh1g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/migoldfinger",
      "html_url": "https://github.com/migoldfinger",
      "followers_url": "https://api.github.com/users/migoldfinger/followers",
      "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
      "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
      "repos_url": "https://api.github.com/users/migoldfinger/repos",
      "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-14T13:58:03Z",
    "updated_at": "2022-06-15T20:31:04Z",
    "author_association": "NONE",
    "body": "@cameel I know, I can and did solve the linearization error, if any, for the base classes.\r\n\r\nThe difference in my order is because I wrote the example out of memory and I tried many alternative orders in my attempt so solvle the error at the MyToken class.\r\nThe at the moment unsolveable linearization error happens at MyToken.\r\nEven if the base classes compile fine.\r\nThere is no way to get MyToken working in my example.\r\n\r\nAlso, I am not sure if this is a separated feature or related. If you use interfaces in that way you came across cases where\r\nan Interface holds a function that is defined in the interface and also already implemented in some base class.\r\nIf that happens you are forced to override the function and call the implementation for Example\r\n\r\nIMyToken contains `function allowance(address owner, address spender) external view returns (uint256);`\r\nThis function is also present in `IERC20` and implemented in `ERC20` and inherited by `ERC20Burnable`\r\n```\r\ncontract MyToken is IMyToken, ERC20Burnable, Ownable\r\n{\r\n...\r\n\tfunction allowance(address owner, address spender) override (IMyToken, ERC20) public view returns (uint256)\r\n\t{\r\n\t\treturn ERC20.allowance(owner, spender);\r\n\t}\r\n...\r\n}\r\n```\r\nI think it is save to assume that if only one implementation is present ether by direct implementation or by inheritance that implementation should be used by default without the need to explicitly call the implementation like in the code above.\r\nAnother drawback I came over my workaround is that while you can define functions and override them in the way shown you can not do the same thing with events. You will just get an `DeclarationError: Event with same name and parameter types defined twice.` error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155223832/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155620305",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1155620305",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1155620305,
    "node_id": "IC_kwDOAm_5kc5E4V3R",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-14T19:17:27Z",
    "updated_at": "2022-06-15T20:31:21Z",
    "author_association": "MEMBER",
    "body": "> The difference in my order is because I wrote the example out of memory and I tried many alternative orders in my attempt so solvle the error at the MyToken class.\r\n> The at the moment unsolveable linearization error happens at MyToken.\r\n> Even if the base classes compile fine.\r\n> There is no way to get MyToken working in my example.\r\n\r\nThen I think I don't understand what you mean. Can you give me a complete example that triggers this error? Because when I adjust your example the way I stated above I get this and this does not cause any error for `MyToken`:\r\n\r\n```solidity\r\ninterface IERC20 {}\r\ninterface IOwnable {}\r\ninterface IERC20AltApprove {} // holds decreaseAllowance and increaseAllowance functions.\r\ninterface IERC20Metadata is IERC20 {} // optional metadata elements.\r\ninterface IERC20Burnable is IERC20Metadata {}\r\nabstract contract Context {}\r\nabstract contract Ownable is IOwnable, Context {}\r\ncontract ERC20 is IERC20Metadata, IERC20AltApprove, Context {}\r\ncontract ERC20Burnable is IERC20Burnable, Context, ERC20 {}\r\n\r\ninterface IMyToken is IOwnable, IERC20Burnable, IERC20AltApprove {}\r\ncontract MyToken is IMyToken, Ownable, ERC20Burnable {}\r\n```\r\n\r\n> Also, I am not sure if this is a separated feature or related. If you use interfaces in that way you came across cases where\r\nan Interface holds a function that is defined in the interface and also already implemented in some base class.\r\n\r\nYes. There are reasons for this (see this topic on the forum if you're interested in details: [Thoughts on override(A, B) syntax](https://forum.soliditylang.org/t/thoughts-on-override-a-b-syntax/767)) but in the end we decided to relax the override restrictions for interfaces. This is tracked in #12665.\r\n\r\n> Another drawback I came over my workaround is that while you can define functions and override them in the way shown you can not do the same thing with events.\r\n\r\nYou probably mean a situation like this?\r\n```solidity\r\ninterface I {\r\n    event E();\r\n}\r\n\r\ninterface J {\r\n    event E();\r\n}\r\n\r\ncontract C is I, J {}\r\n```\r\n```\r\nError: Event with same name and parameter types defined twice.\r\n --> test.sol:6:5:\r\n  |\r\n6 |     event E();\r\n  |     ^^^^^^^^^^\r\nNote: Other declaration is here:\r\n --> test.sol:2:5:\r\n  |\r\n2 |     event E();\r\n  |     ^^^^^^^^^^\r\n```\r\n\r\nNot sure if we'll do it but it's worth considering at least. Feel free to submit it as a separate issue with a feature request.\r\n\r\nThere's a technical limitation that prevents us from allowing situations where multiple events with the same signature are in scope: #11114. This can be solved but the solution requires bumping the Natspec version which would be a breaking change. But recently we have decided to do it a bit differently to make it non-breaking (#13086) so we might actually be in a position to allow this after all.\r\n\r\nBut then there's the question of whether it's a good idea. This needs some discussion. Providing a good, practical use case would help us make a decision.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155620305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155640420",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1155640420",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1155640420,
    "node_id": "IC_kwDOAm_5kc5E4axk",
    "user": {
      "login": "lukehutch",
      "id": 811305,
      "node_id": "MDQ6VXNlcjgxMTMwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/811305?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehutch",
      "html_url": "https://github.com/lukehutch",
      "followers_url": "https://api.github.com/users/lukehutch/followers",
      "following_url": "https://api.github.com/users/lukehutch/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehutch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehutch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehutch/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehutch/orgs",
      "repos_url": "https://api.github.com/users/lukehutch/repos",
      "events_url": "https://api.github.com/users/lukehutch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehutch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-14T19:41:47Z",
    "updated_at": "2022-06-14T20:17:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't know if this is related, but I have the following issue:\r\n\r\n```\r\ninterface A {\r\n    function x() public returns (uint256);\r\n}\r\n\r\ncontract B is A {\r\n    uint256 public x;\r\n}\r\n\r\ncontract C is A, B {\r\n}\r\n```\r\n\r\nI get an error that contract C should be marked as `abstract` because it does not implement `function x()` from interface A (but it does implement this function, via the implicit function created from the inherited `uint256 public x` in contract `B`).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155640420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155671231",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1155671231",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1155671231,
    "node_id": "IC_kwDOAm_5kc5E4iS_",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-14T20:17:31Z",
    "updated_at": "2022-06-14T20:17:48Z",
    "author_association": "MEMBER",
    "body": "@lukehutch I'm not getting this error. I'm instead getting an error saying that `x()` should be `external` and making it `external` resolves it.\r\n\r\nBut yeah, this is completely unrelated to the issue here. If you're sure it's a problem in the compiler please report it as a separate issue and we'll investigate. But if you're not sure it's best to ask first, e.g. on the [#solidity](https://gitter.im/ethereum/solidity) channel first or on Ethereum Stack Exchange.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155671231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155777462",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1155777462",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1155777462,
    "node_id": "IC_kwDOAm_5kc5E48O2",
    "user": {
      "login": "migoldfinger",
      "id": 106750422,
      "node_id": "U_kgDOBlzh1g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/migoldfinger",
      "html_url": "https://github.com/migoldfinger",
      "followers_url": "https://api.github.com/users/migoldfinger/followers",
      "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
      "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
      "repos_url": "https://api.github.com/users/migoldfinger/repos",
      "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-14T22:38:35Z",
    "updated_at": "2022-06-15T20:31:48Z",
    "author_association": "NONE",
    "body": "> Then I think I don't understand what you mean. Can you give me a complete example that triggers this error? Because when I adjust your example the way I stated above I get this and this does not cause any error for `MyToken`:\r\n\r\n@cameel Just give me some time until weekend and I will set up a repository that creates exactly the described problem.\r\n\r\n> Yes. There are reasons for this (see this topic on the forum if you're interested in details: [Thoughts on override(A, B) syntax](https://forum.soliditylang.org/t/thoughts-on-override-a-b-syntax/767)) but in the end we decided to relax the override restrictions for interfaces. This is tracked in #12665.\r\n\r\nThanks for the clarification. In my case and opinion I would drop the override(A, B) syntax if every object except one is an interface. But this is not very important because it does not hurt to write the override(A, B) syntax. It just a nice to have.\r\n```\r\ninterface IA { function f() external; }\r\ninterface IB { function f() external; }\r\ncontract A is IA, B { function f() override public{} } <- should be ok\r\ncontract A is IA, B { } <- should be ok also because f() it is already implemented in B\r\n```\r\nIn every other case I would keep the override(A, B) syntax.\r\n\r\n> You probably mean a situation like this?\r\n> \r\n> ```solidity\r\n> interface I {\r\n>     event E();\r\n> }\r\n> \r\n> interface J {\r\n>     event E();\r\n> }\r\n> \r\n> contract C is I, J {}\r\n> ```\r\n\r\nExactly that's what pops up in my workaround attempt.\r\n\r\nTo sum it up I think that solidity handles interfaces to much like contracts.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1155777462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156606122",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1156606122",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1156606122,
    "node_id": "IC_kwDOAm_5kc5E8Giq",
    "user": {
      "login": "migoldfinger",
      "id": 106750422,
      "node_id": "U_kgDOBlzh1g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/migoldfinger",
      "html_url": "https://github.com/migoldfinger",
      "followers_url": "https://api.github.com/users/migoldfinger/followers",
      "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
      "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
      "repos_url": "https://api.github.com/users/migoldfinger/repos",
      "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T15:18:15Z",
    "updated_at": "2022-06-15T20:31:56Z",
    "author_association": "NONE",
    "body": "@cameel I tried for 2 hours now but was unable to recreate the \"linearization of inheritance graph impossible\" error.\r\nMaybe you are right and I did have some mistake in the order somewhere or accidentally used the contract instead of the interface.\r\nI will now start to remove the workaround and use my initial interface driven concept again. Maybe I ran into the error again but I do not believe it since I got a working prototype now. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156606122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156900133",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1156900133",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1156900133,
    "node_id": "IC_kwDOAm_5kc5E9OUl",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-15T20:29:46Z",
    "updated_at": "2022-06-15T20:29:46Z",
    "author_association": "MEMBER",
    "body": "Sure. If you manage to reproduce it, please report an issue. Best if you can actually get a short repro the size of the one you had above - that's all we need to investigate, it just needs to produce the error.\r\n\r\nAlso, I'll keep the issue open since I think you raised a very good point. Even if this is solvable by changing the order, ignoring interfaces in linearization still makes sense to me and would make the language easier to use. We'll consider it when we'll be overhauling inheritance. I'll just hide our discussion related to the debugging of the error to keep the focus on the feature here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1156900133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1165452755",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1165452755",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1165452755,
    "node_id": "IC_kwDOAm_5kc5Fd2XT",
    "user": {
      "login": "migoldfinger",
      "id": 106750422,
      "node_id": "U_kgDOBlzh1g",
      "avatar_url": "https://avatars.githubusercontent.com/u/106750422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/migoldfinger",
      "html_url": "https://github.com/migoldfinger",
      "followers_url": "https://api.github.com/users/migoldfinger/followers",
      "following_url": "https://api.github.com/users/migoldfinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/migoldfinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/migoldfinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/migoldfinger/subscriptions",
      "organizations_url": "https://api.github.com/users/migoldfinger/orgs",
      "repos_url": "https://api.github.com/users/migoldfinger/repos",
      "events_url": "https://api.github.com/users/migoldfinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/migoldfinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-24T10:49:31Z",
    "updated_at": "2022-06-24T10:49:31Z",
    "author_association": "NONE",
    "body": "@cameel I finally came across my linearization problem again.\r\nI took the base contracts from https://github.com/Exoda/exoda-contracts/tree/interfaceextension the contracts are published and can be installed with `npm i @exoda/contracts`.\r\nThe contract in question Fermion.sol is here https://github.com/ExofiDEX/exofi-contracts/tree/dev.\r\nI do have write access to both repositories.\r\nI could not find any way to solve the linearization error on contracts/Fermion.sol:11:1: in any way.\r\n\r\nAs stated I could not find any order of listing the inherited interfaces/classes to avoid the error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1165452755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1490188085",
    "html_url": "https://github.com/ethereum/solidity/issues/13136#issuecomment-1490188085",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13136",
    "id": 1490188085,
    "node_id": "IC_kwDOAm_5kc5Y0nc1",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-03-30T12:05:34Z",
    "updated_at": "2023-03-30T12:05:34Z",
    "author_association": "NONE",
    "body": "This issue has been marked as stale due to inactivity for the last 90 days.\nIt will be automatically closed in 7 days.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1490188085/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
