{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/5379",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/5379/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/5379/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/5379/events",
  "html_url": "https://github.com/ethereum/solidity/issues/5379",
  "id": 378991604,
  "node_id": "MDU6SXNzdWUzNzg5OTE2MDQ=",
  "number": 5379,
  "title": "EVM calls have wrong jump direction markings in source map",
  "user": {
    "login": "haltman-at",
    "id": 35589221,
    "node_id": "MDQ6VXNlcjM1NTg5MjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/haltman-at",
    "html_url": "https://github.com/haltman-at",
    "followers_url": "https://api.github.com/users/haltman-at/followers",
    "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
    "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
    "organizations_url": "https://api.github.com/users/haltman-at/orgs",
    "repos_url": "https://api.github.com/users/haltman-at/repos",
    "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
    "received_events_url": "https://api.github.com/users/haltman-at/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-11-09T01:55:09Z",
  "updated_at": "2018-11-13T23:46:14Z",
  "closed_at": "2018-11-13T23:46:14Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThe Solidity compiler provides, as part of its source map, markings for whether a given jump instruction is a jump in, jump out, or neither.  These work for internal function calls, but do not interact well with EVM calls.  We may divide EVM calls into three types: (A) constructor calls; (B) calls to a method of a Solidity contract object or library; (C) calls to a method of an address object, such as `transfer` or `call`.  Currently, the Truffle debugger uses these markings to keep track of the current callstack depth, as well as to determine where to stop a \"step out\".\r\n\r\nWith types (A) and (C), both the call and the return appear to be unmarked.  (Since these are EVM calls, of course, it may not be *jump* instructions that would be marked, but it seems to me that in principle there's nothing preventing other sorts of instructions from being marked if appropriate.)  This seems slightly off, but is not in itself a problem.\r\n\r\nThe problem comes from calls of type (B).  With these, the call is not marked, but the return *is* marked as a jump out.  This means that, if we use these markings to keep track of our call depth (as the Truffle debugger currently does), then after returning from a call of type (B), our call depth counter has (incorrectly) decreased by 1.  Moreover, because of type (C), one cannot easily work around this by incrementing the call depth on each `CALL` or `DELEGATECALL` instruction, as that would cause the call depth counter to incorrectly *increase* by 1 after returning from a call of type (C), since calls of type (B) and (C) cannot readily be distinguished at the bytecode level.  I believe it may still be possible to work around this problem despite these issues, but it will be heavily hackish and not something we want to rely on.\r\n\r\nWhat should happen instead is either one of two things:\r\n1. EVM calls are never marked, either on the call or on the return; or,\r\n2. EVM calls are always marked, both on the call and on the return.\r\n\r\nI think solution (2) would be preferable (though it would probably require marking instructions that are not jumps -- I hope you're OK with that, I personally don't see any problem with it), but solution (1) would also be acceptable.\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.4.25\r\n- Framework/IDE (e.g. Truffle or Remix): Truffle\r\n- EVM execution environment / backend / blockchain client: ganache-cli\r\n- Operating system: Linux Mint 18.3 64-bit\r\n\r\n## Steps to Reproduce\r\n\r\n(Note: I didn't actually try it with the following Solidity code -- what follows is just a stripped-down version of things I did try it with.  I hope that's OK.)\r\n\r\n```\r\npragma solidity ^0.4.25;\r\n\r\ncontract Outer {\r\n\r\n  uint8 public x;\r\n\r\n  function test() public\r\n  {\r\n    Innner inner = new Inner(107);\r\n    x = inner.plusOne();\r\n    address(inner).send(0);\r\n  }\r\n}\r\n\r\ncontract Inner {\r\n\r\n  uint8 private y;\r\n\r\n  constructor(uint8 n) public\r\n  {\r\n    y = n;\r\n  }\r\n\r\n  function plusOne() public view returns (uint8 incremented)\r\n  {\r\n    incremented = y + 1;\r\n  }\r\n\r\n  function() public payable\r\n  {\r\n  }\r\n}\r\n\r\n```\r\n\r\nThis code doesn't demonstrate that library calls have the same problem, of course, but in my testing, they do.",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/5379/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/5379/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/437303434",
    "html_url": "https://github.com/ethereum/solidity/issues/5379#issuecomment-437303434",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5379",
    "id": 437303434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzMwMzQzNA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T09:35:04Z",
    "updated_at": "2018-11-09T09:35:04Z",
    "author_association": "MEMBER",
    "body": "The reason we introduced in/out annotations is that you cannot see from a 'jump' instruction whether it is a jump to a subroutine or a return from a subroutine. For EVM calls, there is a clear distinction: call* goes in, and return/stop/revert goes out.\r\n\r\nCould you provide an example annotation where a return is annotated with 'out'? I was not able to reproduce it and I also don't see a way for this to happen in the source code. Perhaps I just misunderstood the issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/437303434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/437478521",
    "html_url": "https://github.com/ethereum/solidity/issues/5379#issuecomment-437478521",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5379",
    "id": 437478521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQ3ODUyMQ==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T20:01:04Z",
    "updated_at": "2018-11-13T01:11:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, sorry, yes, I think I didn't explain this properly.  I explained this in terms of the overall effect, rather than in terms of the actual markings.  It does not literally occur that a `RETURN` or `STOP` gets annotated as \"out\"; as you say, that is impossible.  I agree that there is no need to mark such instructions, as their direction is obvious.\r\n\r\nRather the problem is that, when exiting an EVM call (of a contract method -- again, this does not happen with address methods or constructor calls), one encounters an additional \"out\" marking *overall*.  This out marking is not on the `RETURN` instruction, because those are not marked, but rather it occurs on a `JUMP` instruction prior to the `RETURN` instruction; it appears to be, as best I can tell -- but take this with a grain of salt as I haven't looked too closely at this and you know the relevant code better than I do -- when the function returns to some sort of dispatcher, which then does the `RETURN`.\r\n\r\nThe reason that this is a problem is because this \"out\" marking is not balanced by a corresponding \"in\" marking; that is why I described the out marking as extra or additional.  That is to say, exiting involves an out-marked `JUMP`, but entering the function does not involve an in-marked jump.  And so anything relying on these markings becomes unbalanced after a call to a contract method.\r\n\r\nSo, when I talked about making EVM calls and returns \"marked\" or \"unmarked\", I didn't necessarily mean the `CALL` (or `DELEGATECALL` or `CREATE`) or `RETURN` (or `STOP`) instructions themselves, but rather the overall effect of the call or return -- that is to say, I was including any `JUMP` instructions that are part of how the call or return is effected.\r\n\r\nAs mentioned above, the ideal would be if either:\r\n1. The overall effect of every call was +1 and the overall effect of every return was -1, or\r\n2. The overall effect of every call and of every return was 0.\r\n\r\nHowever, as I was thinking this over last night, and how you seem to have implemented things (as best I can discern) I realized that achieving either of these might be a bit tricky.  So, let me just say that the most important thing is that every call should be *balanced* -- the number of \"in\" markings encountered on the way in should equal the number of \"out\" markings encountered on the way out.  If we have that, that's something we can work with!  Which, as mentioned, could be accomplished by adding the missing \"in\" markings somehow.\r\n\r\nIndeed I realized that it's probably impossible to eliminate those seemily-extra \"out\" markings, since they're on the `JUMP` that causes the function to return, and that's the same instruction whether the dispatcher afterwards decides that this is an internal return or an EVM return!  That's probably just not something you can change.  But perhaps you could alter how your \"in\" markings work?  You would know better than me, of course, but offhand that seems like it might be possible.\r\n\r\nOne way or another though, ultimately, \"in\" should be balanced with \"out\".  Well, or we could work with it if it were consistently *unbalanced*, but that seems even harder to accomplish, since you'd have to somehow *unbalance* address methods!  (You wouldn't have to unbalance constructor calls since those are readily distinguished, as they use `CREATE` rather than `CALL` or `DELEGATECALL`.)\r\n\r\nI guess the absolute bare minimum we need is this: That the net change in depth (i.e., number of `i`s encountered minus number of `o`s encountered), from the beginning of an EVM call to the end -- including all auxiliary `JUMP`s that goes into effecting that EVM call and its return, since after all those are the only instructions that are so marked -- should, for all EVM calls other than constructor calls, be a constant.  (Again, ideally 0, but if we're talking about the bare minimum here...)  Again, as noted above, presently it's 0 for address methods but -1 for contract (and library) methods.\r\n\r\nSorry for the inclarity, hope that's clearer, thanks again!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/437478521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/437539243",
    "html_url": "https://github.com/ethereum/solidity/issues/5379#issuecomment-437539243",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5379",
    "id": 437539243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzUzOTI0Mw==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-10T00:43:14Z",
    "updated_at": "2018-11-10T00:44:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "A note: We do now have a workaround for this, but, as might be expected, it won't work in all cases.  Storing a contract method in a function-type variable and then calling that function variable later would still screw things up, for instance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/437539243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/438201933",
    "html_url": "https://github.com/ethereum/solidity/issues/5379#issuecomment-438201933",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5379",
    "id": 438201933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODIwMTkzMw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T09:44:42Z",
    "updated_at": "2018-11-13T09:44:42Z",
    "author_association": "MEMBER",
    "body": "Ok, now I understood! The current structure of a contract is roughly as follows:\r\n\r\n```\r\ncontract entrypoint:\r\nsig == f? f();\r\nsig == g? g();\r\n\r\nf: ... jump out\r\ng: ... jump out\r\n```\r\n\r\nIf `g` calls `f`, it has  a \"jump in\", while the \"jump out\" is part of `f`.\r\n\r\nThe dispatch routine currently does not have a \"jump in\", but probably it would make sense to make it symmetric.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/438201933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/438412259",
    "html_url": "https://github.com/ethereum/solidity/issues/5379#issuecomment-438412259",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5379",
    "id": 438412259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQxMjI1OQ==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T19:51:17Z",
    "updated_at": "2018-11-13T19:52:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "OK, yes, that would do it!  Glad to know it's as easy as that.  Thanks a bunch!  Should I close this now that you've made a separate issue for this?\r\n\r\nEdit: Oh wow looks like you already have a fix ready (even if it won't be released for a while).  Wonderful, thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/438412259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/438482147",
    "html_url": "https://github.com/ethereum/solidity/issues/5379#issuecomment-438482147",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/5379",
    "id": 438482147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQ4MjE0Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T23:46:14Z",
    "updated_at": "2018-11-13T23:46:14Z",
    "author_association": "MEMBER",
    "body": "Yes, I'll close it as you seem to be satisfied with the resolution :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/438482147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
