{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/2467/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/2467/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/2467/events",
  "html_url": "https://github.com/ethereum/solidity/issues/2467",
  "id": 238418248,
  "node_id": "MDU6SXNzdWUyMzg0MTgyNDg=",
  "number": 2467,
  "title": "Impossible to use modifiers defined in libraries",
  "user": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2017-06-26T00:36:53Z",
  "updated_at": "2022-08-17T13:49:39Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Modifier invocations only work when the modifier is an identifier. A modifier `m` defined in library `L` can only be referred to as the member access `L.m`. There's no way to use it.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/2467/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/2467/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/320930133",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-320930133",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 320930133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDkzMDEzMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-08T11:38:24Z",
    "updated_at": "2017-08-08T11:38:24Z",
    "author_association": "MEMBER",
    "body": "Would a modifier placed in a library act as an internal library function and thus be inlined or would be called remotely via delegatecall?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/320930133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/321280348",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-321280348",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 321280348,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTI4MDM0OA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-09T14:54:45Z",
    "updated_at": "2017-08-09T14:54:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was thinking of them as internal.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/321280348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/333238138",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-333238138",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 333238138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzIzODEzOA==",
    "user": {
      "login": "dr-orlovsky",
      "id": 372034,
      "node_id": "MDQ6VXNlcjM3MjAzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/372034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-orlovsky",
      "html_url": "https://github.com/dr-orlovsky",
      "followers_url": "https://api.github.com/users/dr-orlovsky/followers",
      "following_url": "https://api.github.com/users/dr-orlovsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-orlovsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-orlovsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-orlovsky/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-orlovsky/orgs",
      "repos_url": "https://api.github.com/users/dr-orlovsky/repos",
      "events_url": "https://api.github.com/users/dr-orlovsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-orlovsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-29T21:01:02Z",
    "updated_at": "2017-09-29T21:01:02Z",
    "author_association": "NONE",
    "body": "Modifiers in libraries are really useful thing. I was working on the state machine library, and function modifiers are good companions to it allowing aspect-oriented applications. \r\n\r\n```\r\nlibrary StateMachine {\r\n    enum State {\r\n        // Since `destroyself()` zeroes values of all variables, we need the first state (corresponding to zero)\r\n        // to indicate that contract had being destroyed\r\n        Destroyed,\r\n        Offline,\r\n        InsufficientStake,\r\n        UnderPenalty,\r\n        Idle,\r\n        Computing\r\n    }\r\n\r\n    struct StateMachine {\r\n        bool initialized;\r\n        State currentState;\r\n        mapping(uint8 => State[]) transitionTable;\r\n    }\r\n\r\n    modifier transitionToState(\r\n        StateMachine storage _machine,\r\n        State _newState\r\n    ) {\r\n        // Should not happen\r\n        assert(_machine.currentState == State.Destroyed);\r\n\r\n        // Checking if the state transition is allowed\r\n        State[] storage allowedStates = _machine.transitionTable[uint8(_machine.currentState)];\r\n        for (uint no = 0; no < allowedStates.length; no++) {\r\n            if (allowedStates[no] == _newState) {\r\n                _;\r\n                _machine.currentState = _newState;\r\n                return;\r\n            }\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    modifier transitionThroughState(\r\n        StateMachine storage _machine,\r\n        State _transitionState\r\n    ) {\r\n        // Should not happen\r\n        assert(_machine.currentState == State.Destroyed);\r\n\r\n        // Checking if the state transitions are allowed\r\n\r\n        bool firstTransitionAllowed = false;\r\n        State[] storage allowedStates = _machine.transitionTable[uint8(_machine.currentState)];\r\n        for (uint no = 0; no < allowedStates.length; no++) {\r\n            if (allowedStates[no] == _transitionState) {\r\n                firstTransitionAllowed = true;\r\n                break;\r\n            }\r\n        }\r\n        require(firstTransitionAllowed == true);\r\n\r\n        bool secondTransitionAllowed = false;\r\n        allowedStates = _machine.transitionTable[uint8(_transitionState)];\r\n        for (no = 0; no < allowedStates.length; no++) {\r\n            if (allowedStates[no] == _machine.currentState) {\r\n                secondTransitionAllowed = true;\r\n                break;\r\n            }\r\n        }\r\n        require(secondTransitionAllowed == true);\r\n\r\n        State initialState = _machine.currentState;\r\n        _machine.currentState = _transitionState;\r\n        _;\r\n        _machine.currentState = initialState;\r\n    }\r\n\r\n    modifier requireState(\r\n        StateMachine storage _machine,\r\n        State _requiredState\r\n    ) {\r\n        require(_machine.currentState == _requiredState);\r\n        _;\r\n    }\r\n\r\n    function initStateMachine(\r\n        StateMachine storage _machine\r\n    ) internal {\r\n        require(_machine.initialized == false);\r\n\r\n        _machine.currentState = State.Offline;\r\n\r\n        _machine.transitionTable[uint8(State.Offline)] = [ State.InsufficientStake, State.Idle ];\r\n        /*\r\n        and so on ...\r\n        */\r\n\r\n        _machine.initialized = true;\r\n    }\r\n\r\n}\r\n\r\ncontract StateMachineUser {\r\n    using StateMachine for StateMachine.StateMachine;\r\n\r\n    StateMachine.StateMachine internal stateMachine;\r\n\r\n    function currentState() public returns (StateMachine.State) {\r\n        return stateMachine.currentState;\r\n    }\r\n\r\n    function StateMachineUser () {\r\n        stateMachine.initStateMachine();\r\n    }\r\n\r\n    function someFunction(\r\n        // ...\r\n    ) StateMachine.requireState(StateMachine.State.Idle)\r\n      StateMachine.transitionToState(StateMachine.State.Computing) {\r\n        // some code ...\r\n    }\r\n}\r\n```\r\n\r\nThis useful solution is not working for now since there is no way to import modifiers from a library.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/333238138/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/335045660",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-335045660",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 335045660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTA0NTY2MA==",
    "user": {
      "login": "limexp",
      "id": 19608867,
      "node_id": "MDQ6VXNlcjE5NjA4ODY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19608867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/limexp",
      "html_url": "https://github.com/limexp",
      "followers_url": "https://api.github.com/users/limexp/followers",
      "following_url": "https://api.github.com/users/limexp/following{/other_user}",
      "gists_url": "https://api.github.com/users/limexp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/limexp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/limexp/subscriptions",
      "organizations_url": "https://api.github.com/users/limexp/orgs",
      "repos_url": "https://api.github.com/users/limexp/repos",
      "events_url": "https://api.github.com/users/limexp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/limexp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-08T23:09:29Z",
    "updated_at": "2017-10-08T23:09:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would like to work on this.\r\n\r\n@axic @frangio \r\n\r\nLet's take an overall look. From [documentation](http://solidity.readthedocs.io/en/latest/contracts.html#libraries):\r\n\r\n> Libraries are similar to contracts, but their purpose is that they are deployed only once at a specific address and their code is reused using the **DELEGATECALL**\r\n\r\nThere is no way to use modifiers from libraries directly because there is no such objects in EVM. Of course we can translate them to some kind of library functions and then emulate modifiers substitution, but this is not good as different approach and behaviour introduced for \"normal modifiers\" and \"library modifiers\". So inlining is the only/best option.\r\n\r\nNow let's look at the libraries in Solidity. Why not to inline everything? Why we need **DELEGATECALL** at all? I understand that some gas saving during deployment can be reached, but is it enough? Maybe it is time to introduce a new concept? Here is the first sight proposal:\r\n\r\n1. Add externalLibrary object that is equal to current library behaviour, but can also be declared by address, for example: ```\texternalLibrary MathLib (0x8812...ed0f);```. Source code can also be provided as a reference for function calls. Or current library declaration can be extended with address addition. \r\n2. There must be an utility and/or step before compilation that can get library metadata information and EVM code from block for specified address. \r\n3. There also must be a way to clone library code and deploy it with a new address for testing in different networks.\r\n4. If we inline everything then it is an inlineLibrary, or interface, or namespace. Or current library declaration can be extended to force inlining, but different semantics is not good.\r\n\r\nCould you provide a clear point of view on a way how to resolve this issue? \r\n\r\nI'm ready to code when you make a decision about implementation approach.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/335045660/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/335123733",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-335123733",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 335123733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTEyMzczMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-09T10:51:03Z",
    "updated_at": "2017-10-09T10:51:03Z",
    "author_association": "MEMBER",
    "body": "@limexp thanks! Modifiers work like internal functions, they are just inlined.\r\n\r\nThe first step of this PR is actually enhancing the parser to support fully qualified names  in function definitions, i.e. it doesn't accept the dot currently in:\r\n```function f() Library.modifier() {}```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/335123733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/335627735",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-335627735",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 335627735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTYyNzczNQ==",
    "user": {
      "login": "limexp",
      "id": 19608867,
      "node_id": "MDQ6VXNlcjE5NjA4ODY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19608867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/limexp",
      "html_url": "https://github.com/limexp",
      "followers_url": "https://api.github.com/users/limexp/followers",
      "following_url": "https://api.github.com/users/limexp/following{/other_user}",
      "gists_url": "https://api.github.com/users/limexp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/limexp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/limexp/subscriptions",
      "organizations_url": "https://api.github.com/users/limexp/orgs",
      "repos_url": "https://api.github.com/users/limexp/repos",
      "events_url": "https://api.github.com/users/limexp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/limexp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-10T22:32:39Z",
    "updated_at": "2017-10-10T22:32:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@axic \r\n\r\nFor modifiers there is no difference if they are defined in a library or in another contract. \r\n\r\nAs I understand the ```function f1()``` definition must be correct. But what about ```function f2()```?\r\n\r\n```\r\npragma solidity ^0.4.11;\r\n\r\nlibrary libraryName {\r\n\tmodifier libraryModifier() { _; }\r\n}\r\n\r\ncontract contractName {\r\n\tmodifier contractModifier() { _; }\r\n}\r\n\r\ncontract test {\r\n\tmodifier localModifier() { _; }\r\n\r\n//\tfunction f1() libraryName.libraryModifier { }\r\n//\tfunction f2() contractName.contractModifier { }\r\n\tfunction f3() localModifier { }\r\n}\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/335627735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/335742442",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-335742442",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 335742442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTc0MjQ0Mg==",
    "user": {
      "login": "limexp",
      "id": 19608867,
      "node_id": "MDQ6VXNlcjE5NjA4ODY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19608867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/limexp",
      "html_url": "https://github.com/limexp",
      "followers_url": "https://api.github.com/users/limexp/followers",
      "following_url": "https://api.github.com/users/limexp/following{/other_user}",
      "gists_url": "https://api.github.com/users/limexp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/limexp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/limexp/subscriptions",
      "organizations_url": "https://api.github.com/users/limexp/orgs",
      "repos_url": "https://api.github.com/users/limexp/repos",
      "events_url": "https://api.github.com/users/limexp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/limexp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-11T08:53:39Z",
    "updated_at": "2017-10-11T08:53:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I need a small guidance where is a right place to add tests for this issue? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/335742442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/336023687",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-336023687",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 336023687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjAyMzY4Nw==",
    "user": {
      "login": "limexp",
      "id": 19608867,
      "node_id": "MDQ6VXNlcjE5NjA4ODY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19608867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/limexp",
      "html_url": "https://github.com/limexp",
      "followers_url": "https://api.github.com/users/limexp/followers",
      "following_url": "https://api.github.com/users/limexp/following{/other_user}",
      "gists_url": "https://api.github.com/users/limexp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/limexp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/limexp/subscriptions",
      "organizations_url": "https://api.github.com/users/limexp/orgs",
      "repos_url": "https://api.github.com/users/limexp/repos",
      "events_url": "https://api.github.com/users/limexp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/limexp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T05:20:58Z",
    "updated_at": "2017-10-12T05:20:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@axic \r\n\r\nThere are several ways this issue could be resolved. I am new to this project, so please help to select the best approach according to spirit of ethereum/solidity.\r\n\r\n1. Do not change ```class ModifierInvocation``` definition, but change ```Identifier``` semantics, so it could contain period https://github.com/ethereum/solidity/blob/81f9f86ce51d2e9b54bf76b1169f12e193c79745/libsolidity/ast/AST.h#L756 \r\n2. Add a new ```ASTPointer<Identifier> m_modifierLibraryName;``` attribute into ```class ModifierInvocation```. \r\n3. For ```m_modifierName``` attribute create a new ```ModifierName``` type like ```Identifier```, but with \"period\" semantics.\r\n4. For ```m_modifierName``` attribute create a new ```ModifierName``` type like ```UserDefinedTypeName```.\r\n5. Change ```m_modifierName``` to ```UserDefinedTypeName``` type.\r\n6. something else...\r\n\r\nP.S. I personally prefer the most general approach nr.4, or the minimum code change nr.1.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/336023687/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/344405845",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-344405845",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 344405845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDQwNTg0NQ==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-14T21:32:39Z",
    "updated_at": "2017-11-14T21:32:39Z",
    "author_association": "MEMBER",
    "body": "I just ran into this myself. Kind of shocked they aren't already added into the functionality of the language. Modifiers in libraries definitely enable reusable safety features and I really think this should be added in. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/344405845/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/346741317",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-346741317",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 346741317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njc0MTMxNw==",
    "user": {
      "login": "androolloyd",
      "id": 1237259,
      "node_id": "MDQ6VXNlcjEyMzcyNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1237259?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/androolloyd",
      "html_url": "https://github.com/androolloyd",
      "followers_url": "https://api.github.com/users/androolloyd/followers",
      "following_url": "https://api.github.com/users/androolloyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/androolloyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/androolloyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/androolloyd/subscriptions",
      "organizations_url": "https://api.github.com/users/androolloyd/orgs",
      "repos_url": "https://api.github.com/users/androolloyd/repos",
      "events_url": "https://api.github.com/users/androolloyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/androolloyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T04:35:57Z",
    "updated_at": "2017-11-24T04:35:57Z",
    "author_association": "NONE",
    "body": "@limexp i don't mind option 2.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/346741317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/346841169",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-346841169",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 346841169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njg0MTE2OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-24T14:32:48Z",
    "updated_at": "2017-11-24T14:32:48Z",
    "author_association": "MEMBER",
    "body": "Be aware that modifiers are polymorphic. If you reference a modifier through a base class name, it should be exactly that modifier. If you reference it through a library, this should be the same.\r\n\r\nProbably it is best to change `Identifier` to something new like `NamePath` and then also use `NamePath` inside `UserDefinedTypeName`.\r\n\r\nThis is basically like 3 but a little more generic.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/346841169/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/442947350",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-442947350",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 442947350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjk0NzM1MA==",
    "user": {
      "login": "roschler",
      "id": 4660487,
      "node_id": "MDQ6VXNlcjQ2NjA0ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4660487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/roschler",
      "html_url": "https://github.com/roschler",
      "followers_url": "https://api.github.com/users/roschler/followers",
      "following_url": "https://api.github.com/users/roschler/following{/other_user}",
      "gists_url": "https://api.github.com/users/roschler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/roschler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/roschler/subscriptions",
      "organizations_url": "https://api.github.com/users/roschler/orgs",
      "repos_url": "https://api.github.com/users/roschler/repos",
      "events_url": "https://api.github.com/users/roschler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/roschler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T18:45:35Z",
    "updated_at": "2018-11-29T18:45:35Z",
    "author_association": "NONE",
    "body": "Comment to show support for this features, especially since it might help contracts that run out of gas during deployment (i.e. - by splitting out code to different contracts).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/442947350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/442949582",
    "html_url": "https://github.com/ethereum/solidity/issues/2467#issuecomment-442949582",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2467",
    "id": 442949582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjk0OTU4Mg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T18:51:55Z",
    "updated_at": "2018-11-29T18:51:55Z",
    "author_association": "MEMBER",
    "body": "@roschler sorry to disappoint you, but I don't see a way how to call modifiers defined in libraries using delegatecall.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/442949582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
