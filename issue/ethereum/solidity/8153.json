{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/8153/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/8153/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/8153/events",
  "html_url": "https://github.com/ethereum/solidity/issues/8153",
  "id": 550428506,
  "node_id": "MDU6SXNzdWU1NTA0Mjg1MDY=",
  "number": 8153,
  "title": "Strengthen the definition of ``pure`` potentially disallowing e.g. ``codecopy`` - or \"the future of ``pure``\".",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    },
    {
      "id": 4699440809,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvGqQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/closed%20due%20inactivity",
      "name": "closed due inactivity",
      "color": "91535E",
      "default": false,
      "description": "The issue/PR was automatically closed due to inactivity."
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2020-01-15T21:04:27Z",
  "updated_at": "2023-03-05T12:05:05Z",
  "closed_at": "2023-03-05T12:05:05Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Came up in https://github.com/ethereum/solidity/issues/3835, in particular https://github.com/ethereum/solidity/issues/3835#issuecomment-574854014 states the issue.\r\n\r\nThe main question is: since ``view`` already allows ``staticcall``, is there any use for the coarse definition of ``pure``, that allows for expressions that are *not* compile-time constant?\r\n\r\nPersonally, I'd say we should officially strengthen pure, so that everything pure can be used in place of compile-time-constant expressions, e.g. the most basic definition of pure is \"everything that can be used as array size of a statically sized array\".\r\n\r\nWe *could* also move towards the opposite direction and e.g. *allow* reading the address of ``this`` in ``pure`` functions and weaken ``pure`` to mainly mean \"does not read from storage\". But then we need yet another stricter concept for compile-time-constant expressions. So I'm not a fan of that course of action :-).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/8153/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/8153/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574868854",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-574868854",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 574868854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDg2ODg1NA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T21:40:28Z",
    "updated_at": "2020-01-15T21:40:28Z",
    "author_association": "MEMBER",
    "body": "This is what pure was supposed to be, but it was softened up somehow :wink:",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574868854/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574874526",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-574874526",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 574874526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDg3NDUyNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T21:55:40Z",
    "updated_at": "2020-01-15T21:55:40Z",
    "author_association": "MEMBER",
    "body": "I agree, pure functions should not be allowed to read from data that can be modified by a constructor.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574874526/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574875481",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-574875481",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 574875481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDg3NTQ4MQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T21:58:11Z",
    "updated_at": "2020-01-15T21:58:11Z",
    "author_association": "MEMBER",
    "body": "I agree, but then ``SemanticInformation::invalidInPureFunctions`` should be extended by ``CODECOPY`` - and there may be others, we should check. I'll move this to \"accepted in 0.7.0\" right away then (unless we call it \"bug\" and want to do it earlier).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/574875481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/575008078",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-575008078",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 575008078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTAwODA3OA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-16T06:42:29Z",
    "updated_at": "2020-01-16T06:42:29Z",
    "author_association": "MEMBER",
    "body": "(sorry for the double-post, missed the comment that discussion about pure should be moved here)\r\n\r\n@ekpyron Great breakdown (in the linked issue) of the two potential definitions of pure.  I have always treated pure as along the lines of \"_if you call this method on this contract multiple times with the same inputs, you'll get the same result every time no matter what other conditions change between calls_\".  This interpretation generally aligns with what I want as a dapp developer, and it also makes sense that `codecopy` would be allowed.  To me, `pure` does not mean \"_this function would yield the same result no matter what contract it was implemented in_\".\r\n\r\nI can kind of see the merits to the other definitions, but IMO \"it yields the same result if called multiple times\" feels both the most useful and the most natural.\r\n\r\nCan someone express the argument as to why a _user_ would want pure to mean \"provides the same result no matter what bytecode the function is deployed with\" is?  I want to be careful that we are implementing pure in the most pure (pun intended) way because it offers the best developer experience, not just because it is the strictest definition we can come up with.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/575008078/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/575042743",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-575042743",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 575042743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTA0Mjc0Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-16T08:35:29Z",
    "updated_at": "2020-01-16T08:35:29Z",
    "author_association": "MEMBER",
    "body": "@MicahZoltu the only problem I see is a potential confusion that a pure method in the less restrictive sense yields a different result when moved to a different contract. Or put a different way: In the functional sense, pure means that there is no other state to take into account except the arguments to the function call.\r\n\r\nOn the other hand, when seen at the EVM level, then a pure function always reads the code, because that is what is executed, so maybe it should also be able to use codecopy.\r\n\r\nMaybe we should ask the same question from the other end: How would you use \"pure\" as a feature when it is defined in the one or the other way?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/575042743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/575059311",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-575059311",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 575059311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NTA1OTMxMQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-16T09:20:54Z",
    "updated_at": "2020-01-16T09:20:54Z",
    "author_association": "MEMBER",
    "body": "Honestly, I don't use it much.  `view` gives _huge_ benefits over non-view, it is an even bigger step than from `payable` to `non-payable`.  `pure` however is a pretty small/marginal step.  It is useful sometimes during auditing, just as any compiler guarantees are, but it doesn't come up that often.\r\n\r\nWhen it does come up in auditing for me, I am usually just using it as a shortcut to avoid going down some particular code path when I need to validate that a call won't read some dirty storage variable.  If `pure` didn't exist (only `view` did) I wouldn't really miss it that much personally, though I don't advocate for removing it as I'm a big fan of _any_ additional guarantees the compiler can make.\r\n\r\nI would also support splitting `pure` into two different modifiers:\r\n1. functionality can be determined by looking at the code of this function only\r\n2. function will not read any storage variables or block details, but its execution may be dependent on static parts of the contract like the contract's code, the contract's hash, the contract's address, immutable variables, etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/575059311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/605923266",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-605923266",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 605923266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTkyMzI2Ng==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-30T10:39:41Z",
    "updated_at": "2020-03-30T10:39:41Z",
    "author_association": "MEMBER",
    "body": "Agreement from call: codecopy should not be pure (let alone for consistency with immutable).\r\n\r\n@ekpyron which other things did you have in mind?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/605923266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/607784106",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-607784106",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 607784106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzc4NDEwNg==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-02T11:19:10Z",
    "updated_at": "2020-04-02T11:19:10Z",
    "author_association": "MEMBER",
    "body": "We should probably go through the list of opcodes to check if there's anything else, but ``codecopy`` was the main thing so far, that should be stricter.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/607784106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/742447086",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-742447086",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 742447086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MjQ0NzA4Ng==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-10T10:57:49Z",
    "updated_at": "2020-12-10T10:57:49Z",
    "author_association": "MEMBER",
    "body": "This issue just came up again recently, when we realized that we - while we wanted to get all this sorted for 0.7.0 - don't really have consensus about ``pure`` and sorted this out for the upcoming 0.8.0 release :-). The plan now is to discuss this further and finally come to some consensus for 0.9.0.\r\n\r\nWhile I think the two ways to think of ``pure`` have been described well already, let me offer another perspective on that that came to my mind:\r\n\r\nI think that intuitively there is a difference between ``external pure`` and ``internal pure``, so there is no wonder, that there is disagreement about what a general ``public pure`` is supposed to be :-).\r\nAs an example ``msg.data`` came up recently. In an external function ``msg.data`` can effectively be considered the same as a function argument, so - thinking of ``pure`` as \"a function only depends on inputs\" - ``msg.data`` should be allowed in ``external pure`` functions.\r\nAlso, it does not make sense to think about \"compile-time constantness\" in ``external pure`` functions - e.g. I can never use the result of a call to an external function as static array size, ``function f() external pure returns(uint) {...} function g() public { uint[this.f()] x; }``.\r\n\r\nHowever, ``internal pure`` functions are different. For those ``msg.data`` is *not* effectively the same as the function arguments, but rather \"additional state\". I can call the same internal pure function with the same arguments, expecting the same results, while having different contents in ``msg.data`` in the background.\r\nAlso, now for ``internal pure`` functions I would say \"only depends on its inputs\" effectively means it is \"compile-time constant\". So for internal pure functions, I would in fact expect to be able to use them in the size of statically sized arrays.\r\n\r\nI'm definitely not saying that we should make the meaning of ``pure`` depend on visibility (especially since that would still not clarify what to do for ``public``), but maybe this helps in the discussion. I actually - contrary to my earlier position - might be starting to lean towards going for what I just described as ``external pure`` (having ``internal pure`` just be \"usable in ``external pure``\") and then have \"compile-time constantness\", which is quite a bit stricter, just be determined by the compiler via analysis (or there were suggestions to introduce something like ``constexpr`` for it, alternatively).\r\n\r\nStill, even if we come to an agreement about this part, we still have to precisely clarify what counts as \"state\" and what as \"input arguments\" for those external pure functions, because the distinction is not always entirely clear.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/742447086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/742568359",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-742568359",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 742568359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MjU2ODM1OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-10T14:50:24Z",
    "updated_at": "2020-12-10T14:50:24Z",
    "author_association": "MEMBER",
    "body": "Your reasoning sounds consistent, @ekpyron . It might be not that confusing to strengthen the restrictions imposed by 'pure` at least for free functions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/742568359/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/948136263",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-948136263",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 948136263,
    "node_id": "IC_kwDOAm_5kc44g2lH",
    "user": {
      "login": "wjmelements",
      "id": 799573,
      "node_id": "MDQ6VXNlcjc5OTU3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/799573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjmelements",
      "html_url": "https://github.com/wjmelements",
      "followers_url": "https://api.github.com/users/wjmelements/followers",
      "following_url": "https://api.github.com/users/wjmelements/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjmelements/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjmelements/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjmelements/subscriptions",
      "organizations_url": "https://api.github.com/users/wjmelements/orgs",
      "repos_url": "https://api.github.com/users/wjmelements/repos",
      "events_url": "https://api.github.com/users/wjmelements/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjmelements/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-21T00:32:33Z",
    "updated_at": "2021-10-21T00:32:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since the evaluation of a pure function depends on its immutable code, it seems silly to prevent codecopy or reading from immutable variables inside `pure` functions. Pushing a constant to the stack isn't conceptually different from pushing an immutable; both are in the code. But currently the constant allows `pure` but the immutable requires `view`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/948136263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/956117340",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-956117340",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 956117340,
    "node_id": "IC_kwDOAm_5kc44_TFc",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-01T10:31:14Z",
    "updated_at": "2021-11-01T10:31:14Z",
    "author_association": "MEMBER",
    "body": "The main reason for strengthening ``pure`` would be to be able to syntactically mark functions as compile-time-constant.\r\n```\r\nuint[f()] compileTimeConstantlySizedArray;\r\n```\r\nwill only work sanely if ``f`` does *not* depend on its code and does not involve e.g. ``codecopy`` or especially immutable access (unless you want to run a recompilation in the constructor ;-)). It can very well involve pushing constants as much as it wants, though. So there *is* a conceptual difference between the two.\r\n\r\nThere is two ways to proceed with this:\r\n1. ultimately decide to *weaken* pure to allow it to depend on code, thereby splitting \"compile-time-constant\" and ``pure`` (this would involve making ``immutable`` access pure) or\r\n2. strengthen ``pure`` to really mean \"compile-time-constant\" (this would involve making ``codecopy`` ``view``).\r\n\r\nBoth are OK, but we have an inconsistent mixture right now. 1 would mean that we either need a different way to mark functions \"compile-time constant\" or merely rely on the compiler to determine whether it is or not (both would be feasible, though). The main question is whether 2 forces things to be ``view`` that would *really* benefit from being marked as a weaker ``pure`` (as long as I don't evaluate things at compile-time there is no difference between ``pure`` and ``view`` execution-wise at all, so it is mainly a question of which kind of annotation has more value).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/956117340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/991852649",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-991852649",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 991852649,
    "node_id": "IC_kwDOAm_5kc47Hnhp",
    "user": {
      "login": "deluca-mike",
      "id": 35537333,
      "node_id": "MDQ6VXNlcjM1NTM3MzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/35537333?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deluca-mike",
      "html_url": "https://github.com/deluca-mike",
      "followers_url": "https://api.github.com/users/deluca-mike/followers",
      "following_url": "https://api.github.com/users/deluca-mike/following{/other_user}",
      "gists_url": "https://api.github.com/users/deluca-mike/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deluca-mike/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deluca-mike/subscriptions",
      "organizations_url": "https://api.github.com/users/deluca-mike/orgs",
      "repos_url": "https://api.github.com/users/deluca-mike/repos",
      "events_url": "https://api.github.com/users/deluca-mike/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deluca-mike/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-12T08:10:40Z",
    "updated_at": "2021-12-12T08:12:24Z",
    "author_association": "NONE",
    "body": "As someone who is heavy user (and proponent) of pure functions (and functional programming in general), I prefer option 1.\r\n\r\nIt seems reasonable to strive for objective technical accuracy, rather than striving for some subjective semantic accuracy.\r\n\r\nImmutables end up as in-line litterals. The on-chain byte code for a function that returns a `constant`, `immutable`, or literal, is identical.\r\n\r\nWith a perfect decompiler that could translate any on-chain bytecode into human-readable Solidity (as one would write it), the following 4 smart contracts would have identically decompiled `foo` functions, all marked at `pure`:\r\n\r\n```\r\ncontract ImmutableTest1 {\r\n    function foo() external pure returns (uint256) { return uint256(4); }\r\n}\r\n\r\ncontract ImmutableTest2 {\r\n    uint256 internal constant _foo = uint256(4);\r\n    function foo() external pure returns (uint256) { return _foo; }\r\n}\r\n\r\ncontract ImmutableTest3 {\r\n    uint256 internal immutable _foo;\r\n    constructor() { _foo = uint256(4); }\r\n    function foo() external view returns (uint256) { return _foo; }\r\n}\r\n\r\ncontract ImmutableTest4 {\r\n    uint256 internal immutable _foo;\r\n    constructor(uint256 foo_) { _foo = foo_; }\r\n    function foo() external view returns (uint256) { return _foo; }\r\n}\r\n```\r\n\r\nIn my opinion, `pure` should define what happens (and can't happen) on-chain, not what humans expect to happen before the contract is even created.\r\n\r\nWhen you deploy a contract to the chain, you already need to wait for the receipt to be sure of its address (i.e. consider a factory that deploys children using the blockhash as a `create2` salt), so to interact with it, you need at least _some_ data/event from the chain. If you really needed to know what the resulting immutables were, if any, of a contract, just get more data from the chain (i.e. emit them in events, or expose externally).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/991852649/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/992550729",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-992550729",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 992550729,
    "node_id": "IC_kwDOAm_5kc47KR9J",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-13T14:44:56Z",
    "updated_at": "2021-12-13T14:44:56Z",
    "author_association": "MEMBER",
    "body": "Thank you for your input, @deluca-mike ! I think your examples fall a bit short on the most generic case. Of course a function that uses an immutable that in fact is a compile-time constant can be pure in the most strict functional-programming sense.\r\n\r\nThe question is if code whose semantics depend on the time and circumstances it was deployed at can be considered pure or not.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/992550729/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1092895108",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-1092895108",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 1092895108,
    "node_id": "IC_kwDOAm_5kc5BJEGE",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-08T14:04:16Z",
    "updated_at": "2022-04-08T14:04:16Z",
    "author_association": "MEMBER",
    "body": "Just because this has come up in the context of #12860 again:\r\n\r\nI'm personally starting to change my mind on this issue. In https://github.com/ethereum/solidity/issues/3835#issuecomment-574854014 I basically argued that it makes a difference whether one considers ``external pure`` (does not read from storage nor from blockchain state) or ``internal pure`` (which one may interpret as \"fully determined by the function arguments\").\r\n\r\nHowever, there is a different notion one can use for ``internal pure``, i.e. solely \"it is admissible to call this internal function from an external pure function\".\r\n\r\nIn this interpretation, it's perfectly fine to read arbitrary calldata and memory in ``internal pure`` functions - while arbitrary ``mload`` or ``calldataload`` (resp. access to ``msg.data``) clearly violates for a function to be fully determined by its arguments. Also the argument that ``returndatacopy`` is an issue in ``pure`` functions does not apply to the \"admissible to call in an external pure function\" interpretation.\r\n\r\nI think the weak notion of it being admissible to call an internal function from an external pure function, is useful - for example in inheritance context (e.g. leaving an internal pure function unimplemented, but calling it, for a derived contract to provide an implementation, which may e.g. read ``msg.data``, but not state).\r\n\r\nSo I'm more and more leaning towards actually *weakening* ``pure`` to just the ``external pure`` interpretation.\r\n\r\nThere is still merit in decorating internal functions that are compile-time constant, i.e. that only depend on their immediate arguments and are pure in the classical functional sense. However, these days I'd rather introduce a new separate keyword for this property, like C++'s ``constexpr``.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1092895108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1126678039",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-1126678039",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 1126678039,
    "node_id": "IC_kwDOAm_5kc5DJ74X",
    "user": {
      "login": "howardpen9",
      "id": 36764495,
      "node_id": "MDQ6VXNlcjM2NzY0NDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/36764495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/howardpen9",
      "html_url": "https://github.com/howardpen9",
      "followers_url": "https://api.github.com/users/howardpen9/followers",
      "following_url": "https://api.github.com/users/howardpen9/following{/other_user}",
      "gists_url": "https://api.github.com/users/howardpen9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/howardpen9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/howardpen9/subscriptions",
      "organizations_url": "https://api.github.com/users/howardpen9/orgs",
      "repos_url": "https://api.github.com/users/howardpen9/repos",
      "events_url": "https://api.github.com/users/howardpen9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/howardpen9/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-14T09:20:06Z",
    "updated_at": "2022-05-14T09:20:06Z",
    "author_association": "NONE",
    "body": "follow from https://github.com/ethereum/solidity/issues/12829",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1126678039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1445344156",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-1445344156",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 1445344156,
    "node_id": "IC_kwDOAm_5kc5WJjOc",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-02-26T12:04:51Z",
    "updated_at": "2023-02-26T12:04:51Z",
    "author_association": "NONE",
    "body": "This issue has been marked as stale due to inactivity for the last 90 days.\nIt will be automatically closed in 7 days.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1445344156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1455072316",
    "html_url": "https://github.com/ethereum/solidity/issues/8153#issuecomment-1455072316",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8153",
    "id": 1455072316,
    "node_id": "IC_kwDOAm_5kc5WuqQ8",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-03-05T12:05:03Z",
    "updated_at": "2023-03-05T12:05:03Z",
    "author_association": "NONE",
    "body": "Hi everyone! This issue has been automatically closed due to inactivity.\nIf you think this issue is still relevant in the latest Solidity version and you have something to [contribute](https://docs.soliditylang.org/en/latest/contributing.html), feel free to reopen.\nHowever, unless the issue is a concrete proposal that can be implemented, we recommend starting a language discussion on the [forum](https://forum.soliditylang.org) instead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1455072316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
