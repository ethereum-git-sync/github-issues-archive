{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10917",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10917/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10917/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10917/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10917",
  "id": 804463593,
  "node_id": "MDU6SXNzdWU4MDQ0NjM1OTM=",
  "number": 10917,
  "title": "[Sol->Yul] Invalid code generation when deleting function type storage var",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 2376134343,
      "node_id": "MDU6TGFiZWwyMzc2MTM0MzQz",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/should%20compile%20without%20error",
      "name": "should compile without error",
      "color": "c48f13",
      "default": false,
      "description": "Error is reported even though it shouldn't. Source is fine."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-02-09T11:26:34Z",
  "updated_at": "2021-02-24T12:24:32Z",
  "closed_at": "2021-02-24T12:24:32Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "<!--## Prerequisites\r\n\r\n- First, many thanks for taking part in the community. We really appreciate that.\r\n- We realize there is a lot of information requested here. We ask only that you do your best to provide as much information as possible so we can better help you.\r\n- Support questions are better asked in one of the following locations:\r\n\t- [Solidity chat](https://gitter.im/ethereum/solidity)\r\n\t- [Stack Overflow](https://ethereum.stackexchange.com/)\r\n- Ensure the issue isn't already reported.\r\n- The issue should be reproducible with the latest solidity version; however, this isn't a hard requirement and being reproducible with an older version is sufficient.\r\n-->\r\n\r\n## Description\r\n\r\n<!--Please shortly describe the bug you have found, and what you expect instead.-->\r\n\r\n```\r\ncontract C { function() external  x;function f() public {delete x; }}\r\n```\r\n\r\nresults in the following invalid Yul code\r\n\r\n```\r\nInternal compiler error during compilation:\r\n/solidity/libsolidity/codegen/ir/IRGenerator.cpp(64): Throw in function pair<std::string, std::string> solidity::frontend::IRGenerator::run(const solidity::frontend::ContractDefinition &, const map<const solidity::frontend::ContractDefinition *, const std::string_view> &)\r\nDynamic exception type: boost::wrapexcept<solidity::langutil::InternalCompilerError>\r\nstd::exception::what: \r\nobject \"C_12\" {\r\n    code {\r\n        mstore(64, 128)\r\n        if callvalue() { revert(0, 0) }\r\n\r\n        constructor_C_12()\r\n\r\n        codecopy(0, dataoffset(\"C_12_deployed\"), datasize(\"C_12_deployed\"))\r\n\r\n        return(0, datasize(\"C_12_deployed\"))\r\n\r\n        function constructor_C_12() {\r\n\r\n        }\r\n\r\n    }\r\n    object \"C_12_deployed\" {\r\n        code {\r\n            mstore(64, 128)\r\n\r\n            if iszero(lt(calldatasize(), 4))\r\n            {\r\n                let selector := shift_right_224_unsigned(calldataload(0))\r\n                switch selector\r\n\r\n                case 0x26121ff0\r\n                {\r\n                    // f()\r\n\r\n                    if callvalue() { revert(0, 0) }\r\n                    abi_decode_tuple_(4, calldatasize())\r\n                    fun_f_11()\r\n                    let memPos := allocate_memory(0)\r\n                    let memEnd := abi_encode_tuple__to__fromStack(memPos  )\r\n                    return(memPos, sub(memEnd, memPos))\r\n                }\r\n\r\n                default {}\r\n            }\r\n            if iszero(calldatasize()) {  }\r\n            revert(0, 0)\r\n\r\n            function abi_decode_tuple_(headStart, dataEnd)   {\r\n                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }\r\n\r\n            }\r\n\r\n            function abi_encode_tuple__to__fromStack(headStart ) -> tail {\r\n                tail := add(headStart, 0)\r\n\r\n            }\r\n\r\n            function allocate_memory(size) -> memPtr {\r\n                memPtr := allocate_unbounded()\r\n                finalize_allocation(memPtr, size)\r\n            }\r\n\r\n            function allocate_unbounded() -> memPtr {\r\n                memPtr := mload(64)\r\n            }\r\n\r\n            function combine_external_function_id(addr, selector) -> combined {\r\n                combined := shift_left_64(or(shift_left_32(addr), and(selector, 0xffffffff)))\r\n            }\r\n\r\n            function convert_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(addr, functionId) -> outAddr, outFunctionId {\r\n                outAddr := addr\r\n                outFunctionId := functionId\r\n            }\r\n\r\n            function finalize_allocation(memPtr, size) {\r\n                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\r\n                // protect against overflow\r\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\r\n                mstore(64, newFreePtr)\r\n            }\r\n\r\n            function fun_f_11() {\r\n\r\n                storage_set_to_zero_t_function_external_nonpayable$__$returns$__$(0x00, 0)\r\n\r\n            }\r\n\r\n            function panic_error_0x41() {\r\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\r\n                mstore(4, 0x41)\r\n                revert(0, 0x24)\r\n            }\r\n\r\n            function prepare_store_t_bytes24(value) -> ret {\r\n                ret := shift_right_64_unsigned(value)\r\n            }\r\n\r\n            function prepare_store_t_function_external_nonpayable$__$returns$__$(addr, selector) -> ret {\r\n                ret := prepare_store_t_bytes24(combine_external_function_id(addr, selector))\r\n            }\r\n\r\n            function round_up_to_mul_of_32(value) -> result {\r\n                result := and(add(value, 31), not(31))\r\n            }\r\n\r\n            function shift_left_32(value) -> newValue {\r\n                newValue :=\r\n\r\n                shl(32, value)\r\n\r\n            }\r\n\r\n            function shift_left_64(value) -> newValue {\r\n                newValue :=\r\n\r\n                shl(64, value)\r\n\r\n            }\r\n\r\n            function shift_left_dynamic(bits, value) -> newValue {\r\n                newValue :=\r\n\r\n                shl(bits, value)\r\n\r\n            }\r\n\r\n            function shift_right_224_unsigned(value) -> newValue {\r\n                newValue :=\r\n\r\n                shr(224, value)\r\n\r\n            }\r\n\r\n            function shift_right_64_unsigned(value) -> newValue {\r\n                newValue :=\r\n\r\n                shr(64, value)\r\n\r\n            }\r\n\r\n            function storage_set_to_zero_t_function_external_nonpayable$__$returns$__$(slot, offset) {\r\n                update_storage_value_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(slot, offset, zero_value_for_split_t_function_external_nonpayable$__$returns$__$())\r\n            }\r\n\r\n            function update_byte_slice_dynamic24(value, shiftBytes, toInsert) -> result {\r\n                let shiftBits := mul(shiftBytes, 8)\r\n                let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffff)\r\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\r\n                value := and(value, not(mask))\r\n                result := or(value, and(toInsert, mask))\r\n            }\r\n\r\n            function update_storage_value_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(slot, offset, value_0, value_1) {\r\n                let convertedValue_0, convertedValue_1 := convert_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(value_0, value_1)\r\n                sstore(slot, update_byte_slice_dynamic24(sload(slot), offset, prepare_store_t_function_external_nonpayable$__$returns$__$(convertedValue_0, convertedValue_1)))\r\n            }\r\n\r\n            function zero_value_for_split_t_function_external_nonpayable$__$returns$__$() -> retAddress, retFunction {\r\n                retAddress := 0\r\n                retFunction := 0\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nInvalid IR generated:\r\nError: Function expects 4 arguments but got 3.\r\n\r\nError: Expected expression to evaluate to one value, but got 2 values instead.\r\n\r\n\r\n\r\n[solidity::util::tag_comment*] = \r\nobject \"C_12\" {\r\n    code {\r\n        mstore(64, 128)\r\n        if callvalue() { revert(0, 0) }\r\n\r\n        constructor_C_12()\r\n\r\n        codecopy(0, dataoffset(\"C_12_deployed\"), datasize(\"C_12_deployed\"))\r\n\r\n        return(0, datasize(\"C_12_deployed\"))\r\n\r\n        function constructor_C_12() {\r\n\r\n        }\r\n\r\n    }\r\n    object \"C_12_deployed\" {\r\n        code {\r\n            mstore(64, 128)\r\n\r\n            if iszero(lt(calldatasize(), 4))\r\n            {\r\n                let selector := shift_right_224_unsigned(calldataload(0))\r\n                switch selector\r\n\r\n                case 0x26121ff0\r\n                {\r\n                    // f()\r\n\r\n                    if callvalue() { revert(0, 0) }\r\n                    abi_decode_tuple_(4, calldatasize())\r\n                    fun_f_11()\r\n                    let memPos := allocate_memory(0)\r\n                    let memEnd := abi_encode_tuple__to__fromStack(memPos  )\r\n                    return(memPos, sub(memEnd, memPos))\r\n                }\r\n\r\n                default {}\r\n            }\r\n            if iszero(calldatasize()) {  }\r\n            revert(0, 0)\r\n\r\n            function abi_decode_tuple_(headStart, dataEnd)   {\r\n                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }\r\n\r\n            }\r\n\r\n            function abi_encode_tuple__to__fromStack(headStart ) -> tail {\r\n                tail := add(headStart, 0)\r\n\r\n            }\r\n\r\n            function allocate_memory(size) -> memPtr {\r\n                memPtr := allocate_unbounded()\r\n                finalize_allocation(memPtr, size)\r\n            }\r\n\r\n            function allocate_unbounded() -> memPtr {\r\n                memPtr := mload(64)\r\n            }\r\n\r\n            function combine_external_function_id(addr, selector) -> combined {\r\n                combined := shift_left_64(or(shift_left_32(addr), and(selector, 0xffffffff)))\r\n            }\r\n\r\n            function convert_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(addr, functionId) -> outAddr, outFunctionId {\r\n                outAddr := addr\r\n                outFunctionId := functionId\r\n            }\r\n\r\n            function finalize_allocation(memPtr, size) {\r\n                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\r\n                // protect against overflow\r\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\r\n                mstore(64, newFreePtr)\r\n            }\r\n\r\n            function fun_f_11() {\r\n\r\n                storage_set_to_zero_t_function_external_nonpayable$__$returns$__$(0x00, 0)\r\n\r\n            }\r\n\r\n            function panic_error_0x41() {\r\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\r\n                mstore(4, 0x41)\r\n                revert(0, 0x24)\r\n            }\r\n\r\n            function prepare_store_t_bytes24(value) -> ret {\r\n                ret := shift_right_64_unsigned(value)\r\n            }\r\n\r\n            function prepare_store_t_function_external_nonpayable$__$returns$__$(addr, selector) -> ret {\r\n                ret := prepare_store_t_bytes24(combine_external_function_id(addr, selector))\r\n            }\r\n\r\n            function round_up_to_mul_of_32(value) -> result {\r\n                result := and(add(value, 31), not(31))\r\n            }\r\n\r\n            function shift_left_32(value) -> newValue {\r\n                newValue :=\r\n\r\n                shl(32, value)\r\n\r\n            }\r\n\r\n            function shift_left_64(value) -> newValue {\r\n                newValue :=\r\n\r\n                shl(64, value)\r\n\r\n            }\r\n\r\n            function shift_left_dynamic(bits, value) -> newValue {\r\n                newValue :=\r\n\r\n                shl(bits, value)\r\n\r\n            }\r\n\r\n            function shift_right_224_unsigned(value) -> newValue {\r\n                newValue :=\r\n\r\n                shr(224, value)\r\n\r\n            }\r\n\r\n            function shift_right_64_unsigned(value) -> newValue {\r\n                newValue :=\r\n\r\n                shr(64, value)\r\n\r\n            }\r\n\r\n            function storage_set_to_zero_t_function_external_nonpayable$__$returns$__$(slot, offset) {\r\n                update_storage_value_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(slot, offset, zero_value_for_split_t_function_external_nonpayable$__$returns$__$())\r\n            }\r\n\r\n            function update_byte_slice_dynamic24(value, shiftBytes, toInsert) -> result {\r\n                let shiftBits := mul(shiftBytes, 8)\r\n                let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffff)\r\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\r\n                value := and(value, not(mask))\r\n                result := or(value, and(toInsert, mask))\r\n            }\r\n\r\n            function update_storage_value_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(slot, offset, value_0, value_1) {\r\n                let convertedValue_0, convertedValue_1 := convert_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(value_0, value_1)\r\n                sstore(slot, update_byte_slice_dynamic24(sload(slot), offset, prepare_store_t_function_external_nonpayable$__$returns$__$(convertedValue_0, convertedValue_1)))\r\n            }\r\n\r\n            function zero_value_for_split_t_function_external_nonpayable$__$returns$__$() -> retAddress, retFunction {\r\n                retAddress := 0\r\n                retFunction := 0\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nInvalid IR generated:\r\nError: Function expects 4 arguments but got 3.\r\n\r\nError: Expected expression to evaluate to one value, but got 2 values instead.\r\n```\r\n\r\nTo reproduce\r\n\r\n```\r\n$ solc --ir test.sol\r\n```",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10917/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10917/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775884458",
    "html_url": "https://github.com/ethereum/solidity/issues/10917#issuecomment-775884458",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10917",
    "id": 775884458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTg4NDQ1OA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-09T11:54:21Z",
    "updated_at": "2021-02-09T11:54:21Z",
    "author_association": "MEMBER",
    "body": "```\r\n            function storage_set_to_zero_t_function_external_nonpayable$__$returns$__$(slot, offset) {\r\n                update_storage_value_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(slot, offset, zero_value_for_split_t_function_external_nonpayable$__$returns$__$())\r\n            }\r\n\r\n            function update_storage_value_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(slot, offset, value_0, value_1) {\r\n                let convertedValue_0, convertedValue_1 := convert_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$(value_0, value_1)\r\n                sstore(slot, update_byte_slice_dynamic24(sload(slot), offset, prepare_store_t_function_external_nonpayable$__$returns$__$(convertedValue_0, convertedValue_1)))\r\n            }\r\n\r\n            function zero_value_for_split_t_function_external_nonpayable$__$returns$__$() -> retAddress, retFunction {\r\n                retAddress := 0\r\n                retFunction := 0\r\n            }\r\n```\r\n\r\nYet another tuple issue, calling `update_storage_value_t_function_external_nonpayable$__$returns$__$_to_t_function_external_nonpayable$__$returns$__$` is not satisfied because the last argument is assumed by the IR to fill in two arguments.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775884458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776968140",
    "html_url": "https://github.com/ethereum/solidity/issues/10917#issuecomment-776968140",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10917",
    "id": 776968140,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3Njk2ODE0MA==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-10T19:43:57Z",
    "updated_at": "2021-02-10T19:43:57Z",
    "author_association": "MEMBER",
    "body": "The test\r\n```\r\ncontract C {\r\n    function(uint) external returns (uint) x;\r\n    function(uint) internal returns (uint) y;\r\n    function f() public {\r\n        delete x;\r\n        function(uint) internal returns (uint) a = y;\r\n        delete a;\r\n        delete y;\r\n        function() internal c = f;\r\n        delete c;\r\n        function(uint) internal returns (uint) g;\r\n        delete g;\r\n    }\r\n}\r\n// ----\r\n```\r\n\r\nFrom `test/libsolidity/syntaxTests/functionTypes/delete_function_type.sol`, also has the issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776968140/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
