{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/2699",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/2699/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/2699/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/2699/events",
  "html_url": "https://github.com/ethereum/solidity/issues/2699",
  "id": 248207910,
  "node_id": "MDU6SXNzdWUyNDgyMDc5MTA=",
  "number": 2699,
  "title": "Rename `library` to something more appropriate.",
  "user": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 467898404,
      "node_id": "MDU6TGFiZWw0Njc4OTg0MDQ=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/breaking%20change%20:warning:",
      "name": "breaking change :warning:",
      "color": "b60205",
      "default": false,
      "description": ""
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2017-08-05T20:36:44Z",
  "updated_at": "2022-11-25T12:42:40Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The keyword `library` causes a lot of confusion because a `library` in Solidity is different from a library in just about any other language.  For example, in C# one would call the .NET Framework a library.  It is a collection of contracts that can be useful for developing applications.  `ImmutableList`, for example, is a C# library class that you can instantiate to get an immutable collection with certain properties.\r\n\r\nIn JavaScript, a library is something like Underscore, which is a collection of helpful functions.\r\n\r\nIn Solidity though, `library` means a particular type of contract that is called in a certain way and must be utilized in a very constrained fashion.  I find myself very often in incredibly confusing conversations because I want to talk about a library in the traditional sense (a useful contract/collection of contracts that I can build my application with) but I no longer can use the term library and have to come up with some other term that no one understands.  Similarly, when people come to talk to me about libraries they _rarely_ mean Solidity `library`, they almost always mean library as used in the rest of the industry.\r\n\r\nI would like to see `library` in Solidity renamed to something that is more clearly constrained.\r\n\r\n### mild tangent\r\n\r\nPersonally, I haven't yet found libraries to be particularly useful outside of the `using ... for ...` context because they require a pretty complex build/deploy pipeline to get working smoothly, something which almost no projects have setup.  Also, because most people want upgradability (which is why they use delegate calls), libraries (which require baking the library address in at compilation time) don't offer this feature.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/2699/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/2699/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/320941792",
    "html_url": "https://github.com/ethereum/solidity/issues/2699#issuecomment-320941792",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2699",
    "id": 320941792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDk0MTc5Mg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-08T12:31:54Z",
    "updated_at": "2017-08-08T12:31:54Z",
    "author_association": "MEMBER",
    "body": "One of the main reason for libraries wasn't upgradeability, but reducing code duplication, which it fulfils. Supporting upgradeable libraries is tracked in #2469.\r\n\r\nI don't fully get how Solidity libraries are that different to other libraries considering how a blockchain is a different setting. Could you elaborate a bit more and what naming would you suggest?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/320941792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/322057731",
    "html_url": "https://github.com/ethereum/solidity/issues/2699#issuecomment-322057731",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2699",
    "id": 322057731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjA1NzczMQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-13T18:13:58Z",
    "updated_at": "2017-08-13T18:13:58Z",
    "author_association": "MEMBER",
    "body": "TL;DR: After thinking more on the subject I think my issue is with the fact that Solidity libraries are dynamic libraries rather than static and libraries do delegate call instead of call.\r\n\r\nIn most other languages (exception being C for dynamic libraries), libraries are a build-time dependency, not a runtime dependency.  I suspect this is the source of the confusion because libraries in Solidity are runtime dependencies in that it is expected they have previously been uploaded to the blockchain and the developer will provide linking addresses (which is a painful process when you consider that the linking address differs per environment).  In general, I loath dynamic libraries in C as over the years I have burned a massive amount of time dealing with the trouble they cause and in general I very much prefer runtime/static linking.  Also, almost every modern language has moved away from dynamic linking other than links to the OS due to the amount of pain it causes.\r\n\r\nI recognize that runtime linking saves on uploading gas, but in general I believe that any project of substance is more than willing to pay a few dollars extra to upload their project to main net.  That being said, I _do_ believe there is value in providing a mechanism by which a multi-contract project can easily have a library that is referenced by multiple contracts in the project.  At the moment, one needs to upload the library contract, get the address of it, then construct all of your other contracts with the library's address.\r\n\r\nThe other issue that makes libraries different from other languages is the fact that they are delegate called.  I would prefer it if libraries had static analysis checks that ensured that they never wrote to storage and were called with a normal call (or delegate call as it doesn't really matter).  The whole delegate call of libraries results in an unusual pattern similar to extension methods in languages like C# and Kotlin, where one can add methods to a class.  However, even in those languages extension methods do not gain access to private storage of the target class, they are only a syntactic sugar around calling a static function with an instance of the target class mapped to `this`. \r\n\r\nIn general, while the library pattern is clever I don't find that it encourages good application design/architecture and leveraging it requires a complicated build/deploy process.  I _would_ like to see re-usable code become a first class citizen in Solidity, but I believe in order to be more usable a dependency management system is necessary, libraries should be statically linked, and they shouldn't have private access to the using class's state.  With regards to this issue, what Solidity has is a new language design concept that doesn't match what other (modern) languages call a library, which is why I believe the naming to be a poor choice.  I would also like the name to be freed up to be used in the future when Solidity has a dependency management solution and more traditional library support (e.g., static classes that one can call functions on and classes that one can easily instantiate and use).\r\n\r\nAs an example of something I think of as a library contract is https://github.com/AugurProject/augur-core/blob/develop/src/libraries/set.se (sorry, hasn't been migrated to Solidity yet).  It has its own storage and it is instantiated by some other class and called with CALL, not DELEGATECALL.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/322057731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/322254055",
    "html_url": "https://github.com/ethereum/solidity/issues/2699#issuecomment-322254055",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2699",
    "id": 322254055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjI1NDA1NQ==",
    "user": {
      "login": "roadriverrail",
      "id": 614752,
      "node_id": "MDQ6VXNlcjYxNDc1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/614752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/roadriverrail",
      "html_url": "https://github.com/roadriverrail",
      "followers_url": "https://api.github.com/users/roadriverrail/followers",
      "following_url": "https://api.github.com/users/roadriverrail/following{/other_user}",
      "gists_url": "https://api.github.com/users/roadriverrail/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/roadriverrail/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/roadriverrail/subscriptions",
      "organizations_url": "https://api.github.com/users/roadriverrail/orgs",
      "repos_url": "https://api.github.com/users/roadriverrail/repos",
      "events_url": "https://api.github.com/users/roadriverrail/events{/privacy}",
      "received_events_url": "https://api.github.com/users/roadriverrail/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-14T17:28:12Z",
    "updated_at": "2017-08-14T17:28:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "\r\n\r\n\r\nI'll let someone else talk about the delegate call matters, but I want to speak to the matter of \"other languages\" and to suggest that comparisons of this nature don't really end up clarifying this issue and leading to to a course of action.\r\n\r\nI don't think it's really accurate to say that \"most languages\" treat libraries as \"build time dependencies.\"  A significant number of the most popular languages are dynamic and interpreted, and thus there isn't really a \"build time\" and encountering a library dependency will happen at run time.  You previously mentioned C# as your frame of comparison.  I haven't done a lot of C# work, but I've been working in Java since 1998, and libraries in Java are not a compile time dependency.  It is necessary to have access to class/method/field names and types at compile time, but the linkage is dynamic and you can easily substitute one library for another at run time.  Anyone who's worked in Android has experienced this firsthand-- the Android SDK is a type-compliant set of function stubs, and the actual Android framework transparently replaced at run time.\r\n\r\n\"Library\" means different things in different language contexts, so can we perhaps refine this issue into something more actionable?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/322254055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/322720536",
    "html_url": "https://github.com/ethereum/solidity/issues/2699#issuecomment-322720536",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2699",
    "id": 322720536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjcyMDUzNg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-16T09:46:13Z",
    "updated_at": "2017-08-16T09:46:13Z",
    "author_association": "MEMBER",
    "body": "Sorry this will not be a comprehensive answer.\r\n\r\n> In most other languages (exception being C for dynamic libraries), libraries are a build-time dependency, not a runtime dependency.\r\n\r\nI find the opposite more likely to be true, especially considering market share:\r\n- C, C++, C#, Java - majority of code is dynamically linked\r\n- Javascript - this is a 50/50%, web deployments are \"statically linked\", but server side deployments (node.js) are dynamically linked\r\n- Python - dynamic linking\r\n- Ruby - dynamic linking\r\n\r\n> I recognize that runtime linking saves on uploading gas, but in general I believe that any project of substance is more than willing to pay a few dollars extra to upload their project to main net. \r\n\r\nThis is all fine up to a certain level, until blockchain bloat becomes unbearable and a limiting factor. Hopefully before it becomes a problem there will be means, such as rent cost, to keep only relevant code in the blockchain. At that point this will be a very desired feature. Note at the time Solidity libraries were implemented, blockhain rent was already discussed.\r\n\r\n>  I suspect this is the source of the confusion because libraries in Solidity are runtime dependencies in that it is expected they have previously been uploaded to the blockchain and the developer will provide linking addresses\r\n\r\nI think, as you already mentioned elsewhere, the main problem is with tooling instead.\r\n\r\n> I would prefer it if libraries had static analysis checks that ensured that they never wrote to storage and were called with a normal call (or delegate call as it doesn't really matter).\r\n\r\nWith #992 and #2606 that will be possible and we're working towards that.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/322720536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/322786079",
    "html_url": "https://github.com/ethereum/solidity/issues/2699#issuecomment-322786079",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2699",
    "id": 322786079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjc4NjA3OQ==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-16T14:17:57Z",
    "updated_at": "2017-08-16T14:17:57Z",
    "author_association": "MEMBER",
    "body": "Regardless, I believe one could easily argue that the current implementation is flawed. I still think that Solidity needs to work on a decent standard library with contracts that can be simply \"baked in\" when imported from said standard library. Library here could just mean \"runtime linked immutable functionality\"...which is certainly useful and does work to an extent...still is relatively painful and awkward to work into a dev pipeline as @MicahZoltu suggests. I'm not certain if hardcoding addresses to certain libraries on the live network would be a substantially better solution but certainly it might be worth consideration if it is decided that a standard library could be a workable solution? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/322786079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/323032612",
    "html_url": "https://github.com/ethereum/solidity/issues/2699#issuecomment-323032612",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2699",
    "id": 323032612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzAzMjYxMg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-17T10:36:26Z",
    "updated_at": "2017-08-17T10:37:08Z",
    "author_association": "MEMBER",
    "body": "All the methods marked `internal` will be statically linked and a good while back I've suggested an option which turns on static linking (even for those methods not marked `internal`). I think that would good a middle ground.\r\n\r\nAnd I've also argued to not use `internal`, but `inline` as a keyword in libraries and keep `internal` for library-internal usage and hidden from the user.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/323032612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/323173706",
    "html_url": "https://github.com/ethereum/solidity/issues/2699#issuecomment-323173706",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2699",
    "id": 323173706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzE3MzcwNg==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-17T19:40:52Z",
    "updated_at": "2017-08-17T19:40:52Z",
    "author_association": "MEMBER",
    "body": "I have realized, through this discussion, (sorry for not having all of my thoughts in order up front) that I really have two separate problems with libraries right now:\r\n\r\n#### Dev Pipeline Issue\r\n\r\n@axic @roadriverrail You are correct, I am using the term `dynamic` and `static` incorrectly here, I apologize.  In traditional languages, if I am dynamically linking to a library I need to know the shape of the library, and its lookup key (e.g., name and sometimes version).  With that information, the underlying OS/runtime has the ability to find the library for me if it exists, and it will do so whether I bundle the library with my code or if the library pre-existed on the system.\r\n\r\nWith Solidity, _at link time_ I need to provide the location of the library.  This is what makes the build tooling so complicated, because I have to build a separate \"binary\" for each environment I want my code to run on.  If I build/link against main network, my code will not work on a test network.\r\n\r\n#### Delegate Call Issue\r\n\r\nThe other big part of my dislike for libraries is the delegate call thing.  In my projects I tend to treat/think of libraries as classes that provide useful value and I can instantiate.  However, in Solidity libraries function more like a collection of state-less static methods/extension methods.  I cannot, for example, instantiate a library in my contract when I want a list/stack/queue.  Also, any libraries I use that have state will mess with the state ordering of of my contract, which is a very unexpected behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/323173706/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/323174025",
    "html_url": "https://github.com/ethereum/solidity/issues/2699#issuecomment-323174025",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2699",
    "id": 323174025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzE3NDAyNQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-17T19:42:09Z",
    "updated_at": "2017-08-17T19:42:09Z",
    "author_association": "MEMBER",
    "body": "I also realize through this discussion that I don't have a concrete proposal for how to fix things.  :/  I think libraries in the form of stateless contracts that provide extension methods via `using ... for ...` are valuable and useful, but I have yet to find a use for libraries outside of that context, and stateful libraries make my brain melt (I can't grok how exactly they interact with my contract or make sense or where I would use them).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/323174025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
