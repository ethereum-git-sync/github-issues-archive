{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13713",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13713/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13713/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13713/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13713",
  "id": 1453129789,
  "node_id": "I_kwDOAm_5kc5WnQA9",
  "number": 13713,
  "title": "Cheap and efficient calldata access [discussion]",
  "user": {
    "login": "k06a",
    "id": 702124,
    "node_id": "MDQ6VXNlcjcwMjEyNA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/k06a",
    "html_url": "https://github.com/k06a",
    "followers_url": "https://api.github.com/users/k06a/followers",
    "following_url": "https://api.github.com/users/k06a/following{/other_user}",
    "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
    "organizations_url": "https://api.github.com/users/k06a/orgs",
    "repos_url": "https://api.github.com/users/k06a/repos",
    "events_url": "https://api.github.com/users/k06a/events{/privacy}",
    "received_events_url": "https://api.github.com/users/k06a/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-11-17T10:51:05Z",
  "updated_at": "2022-11-18T11:31:43Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "We noticed that some calldata access cost hundreds of gas for almost no reason.\r\n\r\nFor example following 2 examples have 150 gas difference in cost:\r\n```solidity\r\nstruct Thing {\r\n    uint256 a;\r\n    address b;\r\n    uint256 c;\r\n}\r\n\r\nfunction getB(Thing calldata thing) external view returns(address) {\r\n    return thing.b;\r\n}\r\n```\r\n\r\n```solidity\r\nstruct Thing {\r\n    uint256 a;\r\n    uint256 b; // <= important\r\n    uint256 c;\r\n}\r\n\r\nfunction getB(Thing calldata thing) external view returns(address) {\r\n    return address(uint160(thing.b)); // 150 gas cheaper\r\n}\r\n```\r\n\r\n## Motivation\r\n\r\nThis would dramatically decrease cost of the transactions. If some calldata expected to be `address`, let's read those 20 bytes and **ignore** 12 high bytes, not **check it and maybe revert**.\r\n\r\n## Specification\r\n\r\nI am not sure Solidity compiler put so many checks of calldata size and check high bits are zeroed. I would expect this access to `thing.b` be compiled into the following assembly:\r\n```solidity\r\nshr(96, calldataload(48))\r\n```\r\n\r\nThis would make sure top bits are zeroed and will cost almost nothing.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13713/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13713/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1318458220",
    "html_url": "https://github.com/ethereum/solidity/issues/13713#issuecomment-1318458220",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13713",
    "id": 1318458220,
    "node_id": "IC_kwDOAm_5kc5OlhNs",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-17T10:58:06Z",
    "updated_at": "2022-11-17T10:58:06Z",
    "author_association": "NONE",
    "body": "1inch team recent invention makes every `address` struct field access 150 gas cheaper:\r\n```solidity\r\nlibrary CalldataLib {\r\n     type Address is uint256;\r\n\r\n     function get(Address account) internal pure returns (address) {\r\n         return address(uint160(Address.unwrap(account)));\r\n     }\r\n}\r\n\r\ncontract MyContract {\r\n    using CalldataLib for CalldataLib.Address;\r\n\r\n    struct Thing {\r\n        uint256 a;\r\n        CalldataLib.Address b; // <= wow\r\n        uint256 c;\r\n    }\r\n\r\n    function getB(Thing calldata thing) external view returns(address) {\r\n        return thing.b.get(); // 150 gas cheaper\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1318458220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1319878559",
    "html_url": "https://github.com/ethereum/solidity/issues/13713#issuecomment-1319878559",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13713",
    "id": 1319878559,
    "node_id": "IC_kwDOAm_5kc5Oq7-f",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-18T11:28:54Z",
    "updated_at": "2022-11-18T11:31:43Z",
    "author_association": "MEMBER",
    "body": "Is this the gas difference with legacy or IR codegen?\r\n\r\nWith IR the generated optimized code looks like this:\r\n\r\n- `address`:\r\n    ```yul\r\n    let value := calldataload(36)\r\n    let _3 := and(value, sub(shl(160, 1), 1))\r\n    if iszero(eq(value, _3)) { revert(_2, _2) }\r\n    mstore(_1, _3)\r\n    ```\r\n- `uint256`\r\n    ```yul\r\n    mstore(_1, and(calldataload(36), sub(shl(160, 1), 1)))\r\n    ```\r\n\r\nSo basically, the `address` case has an extra `if` to check that the higher bits are not dirty. Other than that they're the same apart from having some extra intermediate variables.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1319878559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
