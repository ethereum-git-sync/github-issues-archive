{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14570",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14570/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14570/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14570/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14570",
  "id": 1904861108,
  "node_id": "I_kwDOAm_5kc5xid-0",
  "number": 14570,
  "title": "Distinguish fixed free types from generic type variables in experimental solidity.",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 5513089130,
      "node_id": "LA_kwDOAm_5kc8AAAABSJsQag",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/experimental",
      "name": "experimental",
      "color": "E8A072",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "cameel",
    "id": 137030,
    "node_id": "MDQ6VXNlcjEzNzAzMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cameel",
    "html_url": "https://github.com/cameel",
    "followers_url": "https://api.github.com/users/cameel/followers",
    "following_url": "https://api.github.com/users/cameel/following{/other_user}",
    "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
    "organizations_url": "https://api.github.com/users/cameel/orgs",
    "repos_url": "https://api.github.com/users/cameel/repos",
    "events_url": "https://api.github.com/users/cameel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cameel/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-09-20T12:14:51Z",
  "updated_at": "2023-10-31T11:21:14Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Currently, all type variables, whether implicitly assigned or explicitly mentioned in the sources, are treated as generic type variables (``TypeVariable``). It is worthwhile to distinguish those from contextually fixed free types. (See also \"Distinction between Fixed Free Type Variables and Schematic Type Variables\" in https://notes.ethereum.org/_OSmtx9aQAOHQXwa60IDsQ for some previous notes on that)\r\n\r\nThe unification behaviour of fixed free type variables is simple: they only unify with themselves (including identical sort constraints), nothing else.\r\n\r\nThe assignment between a name (like ``a`` in ``function f(x:a)``) and a free type variable is scoped (here valid for the function signature and body - for type variables in type classes for the entire type class definition), but for safety their internal representation in the type system should be globally unique.\r\n\r\nOne of the main advantages of having free type variables is that they can prevent accidental, undesired unification.\r\n\r\nThe process of type-checking a function should involve a post-processing step on the type, which replaces all generic type variables by free types. That prevents further unification of the function type after its passed type inference (unifying the actual function signature later on is erroneous).\r\nConversely, that means that *importing* a function (when referred to with an identifier) into local context will involve the opposite transformation, *generalization*, i.e. replacing the fixed free types with fresh type variables (the analog to this currently happens using ``polymorphicInstance``, but nothing prevents us from forgetting to use this function and import with not-freshened type variables, which will result in invalid behaviour - if we have assign fixed free types to the function instead, importing that type without generalization will usually result in unification errors rather than invalid behaviour)\r\n\r\nNote that this approach is expected to break mutually recursive functions for now (they're not expected to properly work in the current version anyways, though) - that will be remedied after we can order type inference using the upcoming function call graph (https://github.com/ethereum/solidity/issues/14532), but there's no reason to delay this issue until that's done.\r\n\r\nFurthermore, explicitly mentioned type variables should be assigned fixed free types to begin with instead of generic type variables. Note that reference resolution currently also doesn't scope explicitly mentioned type variables correctly, so don't be surprised by that (e.g. ``function f(x:a) -> a`` won't resolve the second ``a`` properly, I think). We could resolve this by messing with scoping in name and type resolution, but we can also just already introduce proper syntax for declaring fixed free types (i.e. ``f<a>`` - we can still haggle over iterating the syntax later). That'd involve treating ``<a>`` as declaration with a proper scope in reference resolution, s.t. the uses in the signature resolve to that declaration. (Obviously, we would need to allow ``<a, b>`` and ``<a:SomeClass, b:SomeOtherClass>``, etc.)\r\n\r\n\r\nSo initial scope:\r\n- Introduce a new ``variant`` of ``Type`` for fixed free type variables.\r\n- Implement unification on them.\r\n- Fix types after type-inference on function.\r\n- Replace ``polymorphicInstance`` on importing types of already type-checked functions with a generalization step.\r\n- Treat explicit type variables in function signatures and type class declarations as fixed free types instead of generic type variables. Optionally, adjust syntax and scoping for them in function signatures.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14570/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14570/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1728160777",
    "html_url": "https://github.com/ethereum/solidity/issues/14570#issuecomment-1728160777",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14570",
    "id": 1728160777,
    "node_id": "IC_kwDOAm_5kc5nAaQJ",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-20T17:29:15Z",
    "updated_at": "2023-09-20T17:29:15Z",
    "author_association": "MEMBER",
    "body": "> We could resolve this by messing with scoping in name and type resolution, but we can also just already introduce proper syntax for declaring fixed free types\r\n\r\nWell, I think that they should be declared explicitly anyway. Otherwise there are some issues:\r\n1. How do you choose between a fixed/generic type variable for the result? You cannot omit the type there.\r\n2. It's too easy to accidentally introduce a type variable by just misspelling something in the type.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1728160777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1728823142",
    "html_url": "https://github.com/ethereum/solidity/issues/14570#issuecomment-1728823142",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14570",
    "id": 1728823142,
    "node_id": "IC_kwDOAm_5kc5nC79m",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-21T05:00:59Z",
    "updated_at": "2023-09-21T05:01:43Z",
    "author_association": "MEMBER",
    "body": "In particular for function return types a placeholder ``_`` indicating a fresh generic type variable would generally come in handy :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1728823142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1787013189",
    "html_url": "https://github.com/ethereum/solidity/issues/14570#issuecomment-1787013189",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14570",
    "id": 1787013189,
    "node_id": "IC_kwDOAm_5kc5qg6hF",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-31T11:17:30Z",
    "updated_at": "2023-10-31T11:21:14Z",
    "author_association": "MEMBER",
    "body": "> - Replace `polymorphicInstance` on importing types of already type-checked functions with a generalization step.\r\n\r\nIs this still something we want to do? Generalization is just the replacement with fresh type variables, i.e. `TypeEnvironment::fresh()`, which is why I wanted to replace `polymorphicInstance()` with it in #14635, but then you objected to that. So now I'm not sure if I should do anything for this point.\r\n\r\n> Treat explicit type variables in function signatures and type class declarations as fixed free types\r\n\r\nShould I do that for type declarations (e.g. make `X` fixed in `type T(X) = ...`) too? For now #14655 only handles what the description says, but it seems to me that the same exact problem exists for type declarations.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1787013189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
