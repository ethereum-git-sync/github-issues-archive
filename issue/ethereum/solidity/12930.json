{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12930",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12930/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12930/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12930/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12930",
  "id": 1202694318,
  "node_id": "I_kwDOAm_5kc5Hr6iu",
  "number": 12930,
  "title": "Optimize ternary expressions to branchless code when cheaper.",
  "user": {
    "login": "transmissions11",
    "id": 26209401,
    "node_id": "MDQ6VXNlcjI2MjA5NDAx",
    "avatar_url": "https://avatars.githubusercontent.com/u/26209401?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/transmissions11",
    "html_url": "https://github.com/transmissions11",
    "followers_url": "https://api.github.com/users/transmissions11/followers",
    "following_url": "https://api.github.com/users/transmissions11/following{/other_user}",
    "gists_url": "https://api.github.com/users/transmissions11/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/transmissions11/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/transmissions11/subscriptions",
    "organizations_url": "https://api.github.com/users/transmissions11/orgs",
    "repos_url": "https://api.github.com/users/transmissions11/repos",
    "events_url": "https://api.github.com/users/transmissions11/events{/privacy}",
    "received_events_url": "https://api.github.com/users/transmissions11/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    },
    {
      "id": 4437999539,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZ_sw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20effort",
      "name": "high effort",
      "color": "ff54f4",
      "default": false,
      "description": "A lot to implement but still doable by a single person. The task is large or difficult."
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    },
    {
      "id": 4438488423,
      "node_id": "LA_kwDOAm_5kc8AAAABCI31Zw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have",
      "name": "must have",
      "color": "ffa12a",
      "default": false,
      "description": "Something we consider an essential part of Solidity 1.0."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-04-13T03:12:35Z",
  "updated_at": "2022-09-14T15:35:34Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nThe ability to cast `bool`s to `uint256` or `uint8`.\r\n\r\n## Motivation\r\n\r\nBranchless optimizations are becoming more and more common to see lately, but often they require dropping down into inline assembly since their efficiency depends on being able to treat a bool as a uint that resolves to either `1` in the true case or `0` if false. Solidity should support performing these conversions without jumps or branches as bools are already represented this way under the hood. Requiring devs to drop into assembly is presenting them with a bunch of extra footguns to hurt themselves with, adding this ability to the high level language will make Solidity safer for devs and make these optimization techniques more readable.\r\n\r\n## Specification\r\n\r\nI am not opinionated as to whether bools would have to be cast to `uint8`s or `uint256`s assuming they use the same amount of gas. I will demonstrate both possible options:\r\n\r\n```solidity\r\nbool status = false;\r\nassert(uint256(status) == 0);\r\n```\r\n\r\n```solidity\r\nbool status = true;\r\nassert(uint8(status) == uint8(1));\r\n```\r\n\r\n## Backwards Compatibility\r\n\r\nI don't think this would introduce any backwards compatibility issues, but please correct me if so!",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12930/reactions",
    "total_count": 40,
    "+1": 32,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 6,
    "rocket": 0,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12930/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1097690285",
    "html_url": "https://github.com/ethereum/solidity/issues/12930#issuecomment-1097690285",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12930",
    "id": 1097690285,
    "node_id": "IC_kwDOAm_5kc5BbWyt",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T08:11:53Z",
    "updated_at": "2022-04-13T08:11:53Z",
    "author_association": "MEMBER",
    "body": "Rather than allowing this cast, we'd prefer working towards improving code generation and the optimizer to have ``status ? 1 : 0`` result in branchless code to begin with, i.e. have the solidity optimizer perform the branchless optimization you want on its own. That would help much more generally.\r\n\r\nDo you happen to have some examples at hand where such a cast is performed in inline assembly?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1097690285/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1098354687",
    "html_url": "https://github.com/ethereum/solidity/issues/12930#issuecomment-1098354687",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12930",
    "id": 1098354687,
    "node_id": "IC_kwDOAm_5kc5Bd4__",
    "user": {
      "login": "recmo",
      "id": 4532328,
      "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/recmo",
      "html_url": "https://github.com/recmo",
      "followers_url": "https://api.github.com/users/recmo/followers",
      "following_url": "https://api.github.com/users/recmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
      "organizations_url": "https://api.github.com/users/recmo/orgs",
      "repos_url": "https://api.github.com/users/recmo/repos",
      "events_url": "https://api.github.com/users/recmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/recmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T18:25:58Z",
    "updated_at": "2022-04-13T18:34:25Z",
    "author_association": "NONE",
    "body": "[This function](https://github.com/recmo/solmate/blob/2b0cf0c043a1933fb9018a95c8513bd7a5ac7d08/src/utils/BitwiseLib.sol#L13) is a nice example, the assembly block exists only because we want to go from `lt(-,-)` to `0` or `1` efficiently:\r\n\r\n```solidity\r\n    function ilog2(uint256 x) internal returns (uint256 r) {\r\n        assembly {\r\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\r\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\r\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\r\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\r\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\r\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\r\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\r\n            r := or(r, lt(0x1, shr(r, x)))\r\n        }\r\n    }\r\n```\r\n\r\nIt would be great if this could be rewritten at same or better gas cost as:\r\n\r\n```solidity\r\n       r  = ((0xffffffffffffffffffffffffffffffff < x) ? 1 : 0) << 7;\r\n       r |= ((0xffffffffffffffff < (x >> r)) ? 1 : 0) << 6;\r\n       r |= ((0xffffffff < (x >> r)) ? 1 : 0) << 5;\r\n       r |= ((0xffff < (x >> r)) ? 1 : 0) << 4;\r\n       // ...\r\n```\r\n\r\nIt would be *awesome* if it could be rewritten at same or better gas cost as:\r\n\r\n```solidity\r\n       r  = (0xffffffffffffffffffffffffffffffff < x) ? 127 : 0;\r\n       r |= (0xffffffffffffffff < (x >> r)) ? 64 : 0;\r\n       r |= (0xffffffff < (x >> r)) ? 32 : 0;\r\n       r |= (0xffff < (x >> r)) ? 8 : 0;\r\n       // ...\r\n```\r\n\r\nBut that requires a more complex optimization rule where the compiler realizes it can turn `? 2**n : 0` into `? 1 : 0` with a cheap bitshift.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1098354687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1098363050",
    "html_url": "https://github.com/ethereum/solidity/issues/12930#issuecomment-1098363050",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12930",
    "id": 1098363050,
    "node_id": "IC_kwDOAm_5kc5Bd7Cq",
    "user": {
      "login": "recmo",
      "id": 4532328,
      "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/recmo",
      "html_url": "https://github.com/recmo",
      "followers_url": "https://api.github.com/users/recmo/followers",
      "following_url": "https://api.github.com/users/recmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
      "organizations_url": "https://api.github.com/users/recmo/orgs",
      "repos_url": "https://api.github.com/users/recmo/repos",
      "events_url": "https://api.github.com/users/recmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/recmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-13T18:35:57Z",
    "updated_at": "2022-04-13T18:35:57Z",
    "author_association": "NONE",
    "body": "Think about the last rule some more. If the optimization pass turns `x ? a : b` into `(x ? a: 1) * (a - b) + b` and existing optimization passes elliminate `+ 0` and reduce `* 2**n` into `<< n` than this would be taken care of!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1098363050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1246949601",
    "html_url": "https://github.com/ethereum/solidity/issues/12930#issuecomment-1246949601",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12930",
    "id": 1246949601,
    "node_id": "IC_kwDOAm_5kc5KUvDh",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-14T15:35:03Z",
    "updated_at": "2022-09-14T15:35:03Z",
    "author_association": "MEMBER",
    "body": "I'm repurposing this issue for the optimization that would make the original suggestion obsolete.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1246949601/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
