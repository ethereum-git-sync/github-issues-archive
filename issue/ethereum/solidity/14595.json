{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14595",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14595/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14595/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14595/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14595",
  "id": 1932638276,
  "node_id": "I_kwDOAm_5kc5zMbhE",
  "number": 14595,
  "title": "Gas cost of equivalent prefix and postfix decrement and increment operators should be equal",
  "user": {
    "login": "CodeSandwich",
    "id": 26183680,
    "node_id": "MDQ6VXNlcjI2MTgzNjgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/CodeSandwich",
    "html_url": "https://github.com/CodeSandwich",
    "followers_url": "https://api.github.com/users/CodeSandwich/followers",
    "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
    "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
    "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
    "repos_url": "https://api.github.com/users/CodeSandwich/repos",
    "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2023-10-09T09:22:14Z",
  "updated_at": "2023-11-30T10:32:55Z",
  "closed_at": "2023-11-30T10:32:54Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThe prefix (`++i` / `--i`) and postfix (`i++` / `i--`) decrement and increment operators differ by the order in which the value is updated and returned. Sometimes this is crucial, but sometimes it makes no difference, because the modified value isn't used in the expression, e.g.:\r\n```solidity\r\nmyVar--;\r\n```\r\n```solidity\r\nfor(uint i = 0; i < 9; ++i) {\r\n```\r\nIn such cases it makes no difference whether a prefix or postfix operator is used, the behavior of the code is identical. The problem is that **using one version or another affects the gas cost**. Ideally as long as there's no difference in the behavior, the optimizer should generate identical bytecodes for both versions, and the prefix or postfix choice should be a purely aesthetic one. The Solidity ecosystem is strongly focused on gas optimization, and the programmers are actually spending their time switching between equivalent prefix and postfix operators and benchmarking the gas differences, this should be the optimizer's job.\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.8.21\r\n- Target EVM version (as per compiler settings): london\r\n- Framework/IDE (e.g. Truffle or Remix): Foundry\r\n- EVM execution environment / backend / blockchain client: revm\r\n- Operating system: Linux\r\n\r\n## Steps to Reproduce\r\n\r\nHere's a simple benchmark compatible with Foundry:\r\n```solidity\r\nfunction testDecrPost() public view returns (uint x) {\r\n    x = gasleft();\r\n    x--;\r\n}\r\n\r\nfunction testDecrPre() public view returns (uint x) {\r\n    x = gasleft();\r\n    --x;\r\n}\r\n\r\nfunction testIncrPost() public view returns (uint x) {\r\n    x = gasleft();\r\n    x++;\r\n}\r\n\r\nfunction testIncrPre() public view returns (uint x) {\r\n    x = gasleft();\r\n    ++x;\r\n}\r\n\r\nfunction testLoopDecrPost() public view returns (uint x) {\r\n    for(uint i = 9; i > 0; i--)\r\n        x += gasleft() * i;\r\n}\r\n\r\nfunction testLoopDecrPre() public view returns (uint x) {\r\n    for(uint i = 9; i > 0; --i)\r\n        x += gasleft() * i;\r\n}\r\n\r\nfunction testLoopIncrPost() public view returns (uint x) {\r\n    for(uint i = 1; i < 10; i++)\r\n        x += gasleft() * i;\r\n}\r\n\r\nfunction testLoopIncrPre() public view returns (uint x) {\r\n    for(uint i = 1; i < 10; ++i)\r\n        x += gasleft() * i;\r\n}\r\n```\r\n\r\nThe results for 20K runs optimizer:\r\n```\r\n[PASS] testDecrPost():(uint256) (gas: 271)\r\n[PASS] testDecrPre():(uint256) (gas: 288)\r\n[PASS] testIncrPost():(uint256) (gas: 342)\r\n[PASS] testIncrPre():(uint256) (gas: 271)\r\n[PASS] testLoopDecrPost():(uint256) (gas: 2763)\r\n[PASS] testLoopDecrPre():(uint256) (gas: 2673)\r\n[PASS] testLoopIncrPost():(uint256) (gas: 2854)\r\n[PASS] testLoopIncrPre():(uint256) (gas: 2810)\r\n```\r\n\r\nThe results for 20K runs optimizer and via-IR enabled:\r\n```\r\n[PASS] testDecrPost():(uint256) (gas: 204)\r\n[PASS] testDecrPre():(uint256) (gas: 226)\r\n[PASS] testIncrPost():(uint256) (gas: 361)\r\n[PASS] testIncrPre():(uint256) (gas: 296)\r\n[PASS] testLoopDecrPost():(uint256) (gas: 2392)\r\n[PASS] testLoopDecrPre():(uint256) (gas: 2436)\r\n[PASS] testLoopIncrPost():(uint256) (gas: 2545)\r\n[PASS] testLoopIncrPre():(uint256) (gas: 2457)\r\n```\r\n",
  "closed_by": {
    "login": "CodeSandwich",
    "id": 26183680,
    "node_id": "MDQ6VXNlcjI2MTgzNjgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/CodeSandwich",
    "html_url": "https://github.com/CodeSandwich",
    "followers_url": "https://api.github.com/users/CodeSandwich/followers",
    "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
    "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
    "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
    "repos_url": "https://api.github.com/users/CodeSandwich/repos",
    "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14595/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14595/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1777905119",
    "html_url": "https://github.com/ethereum/solidity/issues/14595#issuecomment-1777905119",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14595",
    "id": 1777905119,
    "node_id": "IC_kwDOAm_5kc5p-K3f",
    "user": {
      "login": "NoahMarconi",
      "id": 627649,
      "node_id": "MDQ6VXNlcjYyNzY0OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/627649?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NoahMarconi",
      "html_url": "https://github.com/NoahMarconi",
      "followers_url": "https://api.github.com/users/NoahMarconi/followers",
      "following_url": "https://api.github.com/users/NoahMarconi/following{/other_user}",
      "gists_url": "https://api.github.com/users/NoahMarconi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NoahMarconi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NoahMarconi/subscriptions",
      "organizations_url": "https://api.github.com/users/NoahMarconi/orgs",
      "repos_url": "https://api.github.com/users/NoahMarconi/repos",
      "events_url": "https://api.github.com/users/NoahMarconi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NoahMarconi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-24T19:35:56Z",
    "updated_at": "2023-10-24T19:37:02Z",
    "author_association": "NONE",
    "body": "Without being exhaustive the pre/post decrement at least incur identical gas costs when using `via_ir = true` in the foundry file and separating each test into its own file:\r\n\r\n\r\n```\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.21;\r\n\r\n\r\nimport { PRBTest } from \"@prb/test/PRBTest.sol\";\r\nimport { StdCheats } from \"forge-std/StdCheats.sol\";\r\n\r\ncontract PreTest is PRBTest, StdCheats {\r\n\r\n    function testDecrPre() public view returns (uint x) {\r\n        x = gasleft();\r\n        --x;\r\n    }\r\n\r\n}\r\n```\r\n```\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.21;\r\n\r\n\r\nimport { PRBTest } from \"@prb/test/PRBTest.sol\";\r\nimport { StdCheats } from \"forge-std/StdCheats.sol\";\r\n\r\ncontract PostTest is PRBTest, StdCheats {\r\n\r\n    function testDecrPost() public view returns (uint x) {\r\n        x = gasleft();\r\n        x--;\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n```\r\n[profile.default]\r\n  auto_detect_solc = false\r\n  block_timestamp = 1_680_220_800 # March 31, 2023 at 00:00 GMT\r\n  bytecode_hash = \"none\"\r\n  evm_version = \"paris\"           # See https://www.evmdiff.com/features?name=PUSH0&kind=opcode\r\n  fuzz = { runs = 1_000 }\r\n  gas_reports = [\"*\"]\r\n  libs = [\"lib\"]\r\n  optimizer = true\r\n  optimizer_runs = 10_000\r\n  out = \"out\"\r\n  script = \"script\"\r\n  solc = \"0.8.21\"\r\n  src = \"src\"\r\n  test = \"test\"\r\n  via_ir = true\r\n```\r\n\r\n\r\n```\r\n$ forge test --match-contract PreTest\r\n[⠒] Compiling...\r\n[⠆] Compiling 28 files with 0.8.21\r\n[⠒] Solc 0.8.21 finished in 5.07s\r\nCompiler run successful!\r\n\r\nRunning 1 test for test/Pre.t.sol:PreTest\r\n[PASS] testDecrPre():(uint256) (gas: 187)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 174.17µs\r\nRan 1 test suites: 1 tests passed, 0 failed, 0 skipped (1 total tests)\r\n\r\n\r\n$ forge test --match-contract PostTest\r\n[⠒] Compiling...\r\nNo files changed, compilation skipped\r\n\r\nRunning 1 test for test/Post.t.sol:PostTest\r\n[PASS] testDecrPost():(uint256) (gas: 187)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 209.20µs\r\nRan 1 test suites: 1 tests passed, 0 failed, 0 skipped (1 total tests)\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1777905119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1777958492",
    "html_url": "https://github.com/ethereum/solidity/issues/14595#issuecomment-1777958492",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14595",
    "id": 1777958492,
    "node_id": "IC_kwDOAm_5kc5p-X5c",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-10-24T20:07:57Z",
    "updated_at": "2023-10-24T20:08:24Z",
    "author_association": "NONE",
    "body": "You're right, `via-ir=true` solves this problem, the issue only exists for the legacy pipeline.\r\n\r\nGood catch, my benchmark was flawed. Foundry measures the entire call, including the function selection, which for contracts with multiple functions has a different cost for each function. Here's the fixed version where each test is a separate contract with a single function, so the resolution cost is constant:\r\n\r\n```solidity\r\ncontract TestDecrPost {\r\n    function test() public view returns (uint x) {\r\n        x = gasleft();\r\n        x--;\r\n    }\r\n}\r\n\r\ncontract TestDecrPre {\r\n    function test() public view returns (uint x) {\r\n        x = gasleft();\r\n        --x;\r\n    }\r\n}\r\n\r\ncontract TestIncrPost {\r\n    function test() public view returns (uint x) {\r\n        x = gasleft();\r\n        x++;\r\n    }\r\n}\r\n\r\ncontract TestIncrPre {\r\n    function test() public view returns (uint x) {\r\n        x = gasleft();\r\n        ++x;\r\n    }\r\n}\r\n\r\ncontract TestLoopDecrPost {\r\n    function test() public view returns (uint x) {\r\n        for(uint i = 9; i > 0; i--)\r\n            x += gasleft() * i;\r\n    }\r\n}\r\n\r\ncontract TestLoopDecrPre {\r\n    function test() public view returns (uint x) {\r\n        for(uint i = 9; i > 0; --i)\r\n            x += gasleft() * i;\r\n    }\r\n}\r\n\r\ncontract TestLoopIncrPost {\r\n    function test() public view returns (uint x) {\r\n        for(uint i = 1; i < 10; i++)\r\n            x += gasleft() * i;\r\n    }\r\n}\r\n\r\ncontract TestLoopIncrPre {\r\n    function test() public view returns (uint x) {\r\n        for(uint i = 1; i < 10; ++i)\r\n            x += gasleft() * i;\r\n    }\r\n}\r\n```\r\n\r\nThe results for 20K runs optimizer:\r\n\r\n```\r\nRunning 1 test for test/a.t.sol:TestIncrPre\r\n[PASS] test():(uint256) (gas: 249)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 280.76µs\r\n\r\nRunning 1 test for test/a.t.sol:TestIncrPost\r\n[PASS] test():(uint256) (gas: 254)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 285.05µs\r\n\r\nRunning 1 test for test/a.t.sol:TestDecrPre\r\n[PASS] test():(uint256) (gas: 243)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 324.07µs\r\n\r\nRunning 1 test for test/a.t.sol:TestDecrPost\r\n[PASS] test():(uint256) (gas: 248)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 353.03µs\r\n\r\nRunning 1 test for test/a.t.sol:TestLoopIncrPre\r\n[PASS] test():(uint256) (gas: 2743)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 323.81µs\r\n\r\nRunning 1 test for test/a.t.sol:TestLoopIncrPost\r\n[PASS] test():(uint256) (gas: 2788)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 309.60µs\r\n\r\nRunning 1 test for test/a.t.sol:TestLoopDecrPre\r\n[PASS] test():(uint256) (gas: 2629)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 309.87µs\r\n\r\nRunning 1 test for test/a.t.sol:TestLoopDecrPost\r\n[PASS] test():(uint256) (gas: 2674)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 379.08µs\r\n```\r\n\r\nThe results for 20K runs optimizer and via-IR enabled:\r\n\r\n```\r\nRunning 1 test for test/a.t.sol:TestIncrPre\r\n[PASS] test():(uint256) (gas: 179)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 403.44µs\r\n\r\nRunning 1 test for test/a.t.sol:TestIncrPost\r\n[PASS] test():(uint256) (gas: 179)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 528.07µs\r\n\r\nRunning 1 test for test/a.t.sol:TestDecrPre\r\n[PASS] test():(uint256) (gas: 176)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 490.85µs\r\n\r\nRunning 1 test for test/a.t.sol:TestDecrPost\r\n[PASS] test():(uint256) (gas: 176)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 536.63µs\r\n\r\nRunning 1 test for test/a.t.sol:TestLoopIncrPre\r\n[PASS] test():(uint256) (gas: 1697)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 379.51µs\r\n\r\nRunning 1 test for test/a.t.sol:TestLoopIncrPost\r\n[PASS] test():(uint256) (gas: 1697)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 492.76µs\r\n\r\nRunning 1 test for test/a.t.sol:TestLoopDecrPre\r\n[PASS] test():(uint256) (gas: 1541)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 468.36µs\r\n\r\nRunning 1 test for test/a.t.sol:TestLoopDecrPost\r\n[PASS] test():(uint256) (gas: 1541)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 500.89µs\r\n```\r\n\r\nFor `via-ir=true` the results are exactly as they should be, there's no difference between prefix and postfix operators. The issue only exists for the legacy pipeline.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1777958492/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1833494394",
    "html_url": "https://github.com/ethereum/solidity/issues/14595#issuecomment-1833494394",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14595",
    "id": 1833494394,
    "node_id": "IC_kwDOAm_5kc5tSOd6",
    "user": {
      "login": "CodeSandwich",
      "id": 26183680,
      "node_id": "MDQ6VXNlcjI2MTgzNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/26183680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeSandwich",
      "html_url": "https://github.com/CodeSandwich",
      "followers_url": "https://api.github.com/users/CodeSandwich/followers",
      "following_url": "https://api.github.com/users/CodeSandwich/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeSandwich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeSandwich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeSandwich/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeSandwich/orgs",
      "repos_url": "https://api.github.com/users/CodeSandwich/repos",
      "events_url": "https://api.github.com/users/CodeSandwich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeSandwich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-11-30T10:32:54Z",
    "updated_at": "2023-11-30T10:32:54Z",
    "author_association": "NONE",
    "body": "The issue is non-existent in the via-IR pipeline, so I think that it can be considered resolved.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1833494394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
