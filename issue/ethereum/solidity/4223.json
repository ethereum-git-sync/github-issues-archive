{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/4223/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/4223/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/4223/events",
  "html_url": "https://github.com/ethereum/solidity/issues/4223",
  "id": 329080671,
  "node_id": "MDU6SXNzdWUzMjkwODA2NzE=",
  "number": 4223,
  "title": "Extract Semantics Tests",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1018738457,
      "node_id": "MDU6TGFiZWwxMDE4NzM4NDU3",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/testing%20:hammer:",
      "name": "testing :hammer:",
      "color": "ffc6db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "erak",
    "id": 20012009,
    "node_id": "MDQ6VXNlcjIwMDEyMDA5",
    "avatar_url": "https://avatars.githubusercontent.com/u/20012009?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/erak",
    "html_url": "https://github.com/erak",
    "followers_url": "https://api.github.com/users/erak/followers",
    "following_url": "https://api.github.com/users/erak/following{/other_user}",
    "gists_url": "https://api.github.com/users/erak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/erak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/erak/subscriptions",
    "organizations_url": "https://api.github.com/users/erak/orgs",
    "repos_url": "https://api.github.com/users/erak/repos",
    "events_url": "https://api.github.com/users/erak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/erak/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "erak",
      "id": 20012009,
      "node_id": "MDQ6VXNlcjIwMDEyMDA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/20012009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erak",
      "html_url": "https://github.com/erak",
      "followers_url": "https://api.github.com/users/erak/followers",
      "following_url": "https://api.github.com/users/erak/following{/other_user}",
      "gists_url": "https://api.github.com/users/erak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erak/subscriptions",
      "organizations_url": "https://api.github.com/users/erak/orgs",
      "repos_url": "https://api.github.com/users/erak/repos",
      "events_url": "https://api.github.com/users/erak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erak/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2018-06-04T14:29:59Z",
  "updated_at": "2020-01-27T16:55:23Z",
  "closed_at": "2020-01-27T16:55:23Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Part of #3486 concerning semantics tests (i.e. \"end-to-end\"-tests).\r\n\r\nSimilarly to #3644 the semantics tests (resp. end-to-end tests) should be extracted into individual files. ``Ã¬soltest`` should support running the semantics tests interactively.\r\n\r\nThis issue is meant to discuss the syntax of the test expectations and the encoding of arguments and expected results.\r\n",
  "closed_by": {
    "login": "Marenz",
    "id": 424752,
    "node_id": "MDQ6VXNlcjQyNDc1Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Marenz",
    "html_url": "https://github.com/Marenz",
    "followers_url": "https://api.github.com/users/Marenz/followers",
    "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
    "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
    "organizations_url": "https://api.github.com/users/Marenz/orgs",
    "repos_url": "https://api.github.com/users/Marenz/repos",
    "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Marenz/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/4223/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/4223/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394386568",
    "html_url": "https://github.com/ethereum/solidity/issues/4223#issuecomment-394386568",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
    "id": 394386568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDM4NjU2OA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-04T15:01:34Z",
    "updated_at": "2018-06-04T15:01:34Z",
    "author_association": "MEMBER",
    "body": "Some initial and unrefined ideas for the expectation syntax:\r\n\r\nThe syntax originally suggested in #3486, slightly adapted to be closer to the syntax already used for the syntax tests, would be the following:\r\n```\r\ncontract test {\r\n   ...\r\n}\r\n// ----\r\n// f(uint,bytes32): 0x123000, 456 -> 123, true\r\n// g(string): \"abc\" -> X\r\n```\r\n\r\n\r\nWe could also consider the following to keep arguments and their values closer together and adopt a more \"function-call-like\" syntax. It might also make sense to explicitly state the types of return values:\r\n\r\n\r\n```\r\ncontract test {\r\n   ...\r\n}\r\n// ----\r\n// f(uint(0x123000),bytes32(456)): uint(123), bool(true)\r\n// g(string(\"abc\")): REVERT\r\n```\r\nThe signature can easily be extracted during parsing of the expectations.\r\n\r\nThe colon could be also be replaced by \"==\" and the return arguments given as tuple, e.g.\r\n```// f(uint(0x123000),bytes32(456)) == (uint(123), bool(true))```\r\n\r\nThe parser for the return values should remember the used formatting and recreate expectations with the same format when updating expectations (for ``isoltest``).\r\n\r\nThe first line of the expectations could optionally be an explicit deploy command:\r\n\r\n\r\n```\r\ncontract test {\r\n  constructor(uint256, bool) {}\r\n   ...\r\n}\r\n// ----\r\n// DEPLOY: test(uint256(0x123),bool(false))\r\n// f(uint(0x123000),bytes32(456)) == (uint(123), bool(true))\r\n// g(string(\"abc\")): REVERT\r\n```\r\n\r\nMaybe a simple constructor call would suffice, however that may be more ambiguous:\r\n```// test(uint256(0x123),bool(false))```\r\n\r\nAdditionally there needs to be an optional way to send ether to both the constructor and functions. As a suggestion:\r\n\r\n```\r\ncontract test {\r\n  constructor(uint256, bool) {}\r\n   ...\r\n}\r\n// ----\r\n// DEPLOY: test(uint256(0x123),bool(false)) <- 20\r\n// f(uint(0x123000),bytes32(456)) <- 40 == uint(123), bool(true)\r\n// g(string(\"abc\")): REVERT\r\n```\r\n\r\nI'll start writing the general framework already and I'll keep thinking about further syntax options for the expectations in the process - suggestions are welcome.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394386568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394412031",
    "html_url": "https://github.com/ethereum/solidity/issues/4223#issuecomment-394412031",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
    "id": 394412031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDQxMjAzMQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-04T16:12:54Z",
    "updated_at": "2018-06-04T16:12:54Z",
    "author_association": "MEMBER",
    "body": "To be honest, I find `f(uint(0x123000),bytes32(456))` rather difficult to read and also correlate with what function is called on the contract.\r\n\r\nPerhaps we should split inputs and expectations across two lines. Ether could be given in square brackets. Also I'm not sure if we should implement a full ABI-encoder here. If we always assume expectations to be abi-encoded, we lose the ability to test data encoded invalidly and also providing input data that is encoded in a weird way.\r\n\r\n```\r\n// DEPLOY: test[20]: 0x123, false\r\n// f(uint256,bytes32)[40]: 0x123000, 456\r\n// -> 123, true\r\n// g(string): 0x20, 3, \"abc\"\r\n// REVERT\r\n```\r\n\r\nIf we assume each field to be exactly 32 bytes with decimals padded on the left and hex and strings padded on the right, then we also need a way to specify things that are not padded, but that could be left for the tests that do not work like that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/394412031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395416743",
    "html_url": "https://github.com/ethereum/solidity/issues/4223#issuecomment-395416743",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
    "id": 395416743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTQxNjc0Mw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T13:17:46Z",
    "updated_at": "2018-06-07T13:17:46Z",
    "author_association": "MEMBER",
    "body": "OK, I adopted that syntax.\r\n\r\nRegarding padding: the current WIP PR pads both decimals and hex numbers on the left, but hex strings ``hex\"ABCD\"`` are padded on the right - I think that's clearer than ``1`` and ``0x1`` resulting in different padding.\r\nI also added dedicated syntax to encode unpadded bytes ``rawbytes(0x12, 0x00, 0xAB)`` and dynamic length strings ``string(\"abc\")`` (i.e. ``0x20, 3, \"abc\"``).\r\n\r\nShould expectation and result mismatch, the PR attempts to format the actual result exactly like the expected result and, if that's impossible, falls back to hex numbers (and unpadded bytes in the absence of 32-byte alignment).\r\n\r\n(the PR still needs quite some cleaning up in detail, though)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395416743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395423477",
    "html_url": "https://github.com/ethereum/solidity/issues/4223#issuecomment-395423477",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
    "id": 395423477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTQyMzQ3Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T13:39:06Z",
    "updated_at": "2018-06-07T13:39:06Z",
    "author_association": "MEMBER",
    "body": "The padding is probably a good idea, yes!\r\n\r\nWhat is the difference between `hex\"1200ab\"` and `rawbytes(0x12, 0x00, 0xab)`? Isn't the first format better?\r\n\r\nAbout `string(\"abc\")`: This only works if the string is the only argument or return value. I know we have the helper also in the C++ code, but I don't know if it is more confusing than helpful.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395423477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395429420",
    "html_url": "https://github.com/ethereum/solidity/issues/4223#issuecomment-395429420",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
    "id": 395429420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTQyOTQyMA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T13:56:57Z",
    "updated_at": "2018-06-07T13:56:57Z",
    "author_association": "MEMBER",
    "body": "OK - I can remove the ``string`` helper - you may be right and always using the encoding explicitly may be less confusing.\r\n\r\nThe difference between ``hex\"1200ab\"`` and ``rawbytes(0x12, 0x00, 0xab)`` is that the former is padded to 32-bytes (to the right), whereas the latter is unpadded. ``rawbytes`` should only ever be needed, if something is wrong, i.e. if we want to supply non-32-byte-aligned input or if the output is not aligned. Maybe I should rename it to ``unpaddedbytes``, though...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395429420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395468369",
    "html_url": "https://github.com/ethereum/solidity/issues/4223#issuecomment-395468369",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
    "id": 395468369,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTQ2ODM2OQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T15:42:40Z",
    "updated_at": "2018-06-07T15:42:40Z",
    "author_association": "MEMBER",
    "body": "One issue is that the RPC interface doesn't distinguish between revert and no return data, so I'm not sure whether we should just use ``->`` (empty return) instead of ``REVERT``, or whether we should just let every function that is called in the tests return something, if only a bool ``true``...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395468369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395671407",
    "html_url": "https://github.com/ethereum/solidity/issues/4223#issuecomment-395671407",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
    "id": 395671407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTY3MTQwNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T07:16:05Z",
    "updated_at": "2018-06-08T07:16:05Z",
    "author_association": "MEMBER",
    "body": "The \"success condition\" should be part of the receipt. It might be that cpp-ethereum does not implement it or the json-rpc parser in the testing framework does not implement it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395671407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395702838",
    "html_url": "https://github.com/ethereum/solidity/issues/4223#issuecomment-395702838",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
    "id": 395702838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTcwMjgzOA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-08T09:18:45Z",
    "updated_at": "2018-06-08T09:18:45Z",
    "author_association": "MEMBER",
    "body": "So far I haven't found a way to properly deduce a revert - probably related: https://github.com/ethereum/cpp-ethereum/issues/4157",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/395702838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/578844026",
    "html_url": "https://github.com/ethereum/solidity/issues/4223#issuecomment-578844026",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/4223",
    "id": 578844026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODg0NDAyNg==",
    "user": {
      "login": "Marenz",
      "id": 424752,
      "node_id": "MDQ6VXNlcjQyNDc1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Marenz",
      "html_url": "https://github.com/Marenz",
      "followers_url": "https://api.github.com/users/Marenz/followers",
      "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
      "organizations_url": "https://api.github.com/users/Marenz/orgs",
      "repos_url": "https://api.github.com/users/Marenz/repos",
      "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Marenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-27T16:55:23Z",
    "updated_at": "2020-01-27T16:55:23Z",
    "author_association": "MEMBER",
    "body": "This issue existed to track the progress of isoltest in regards with semantic test capabilities. @erak says this is done now and we favor closing this issue and create a new one that is purely for extracting more semantic tests.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/578844026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
