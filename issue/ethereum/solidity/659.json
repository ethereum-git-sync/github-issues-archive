{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/659",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/659/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/659/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/659/events",
  "html_url": "https://github.com/ethereum/solidity/issues/659",
  "id": 160982309,
  "node_id": "MDU6SXNzdWUxNjA5ODIzMDk=",
  "number": 659,
  "title": "Explicit conversion of bool to int",
  "user": {
    "login": "graup",
    "id": 898549,
    "node_id": "MDQ6VXNlcjg5ODU0OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/898549?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/graup",
    "html_url": "https://github.com/graup",
    "followers_url": "https://api.github.com/users/graup/followers",
    "following_url": "https://api.github.com/users/graup/following{/other_user}",
    "gists_url": "https://api.github.com/users/graup/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/graup/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/graup/subscriptions",
    "organizations_url": "https://api.github.com/users/graup/orgs",
    "repos_url": "https://api.github.com/users/graup/repos",
    "events_url": "https://api.github.com/users/graup/events{/privacy}",
    "received_events_url": "https://api.github.com/users/graup/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2016-06-17T21:56:26Z",
  "updated_at": "2021-12-29T19:22:04Z",
  "closed_at": "2016-06-19T09:52:58Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I cannot do this:\n\n```\nfunction C(bool flag) {\n    test = int(flag);\n}\n\n\nError: Explicit type conversion not allowed.\n    test = int(flag);\n           ^-------^\n```\n\nIs this intentional?\n",
  "closed_by": {
    "login": "graup",
    "id": 898549,
    "node_id": "MDQ6VXNlcjg5ODU0OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/898549?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/graup",
    "html_url": "https://github.com/graup",
    "followers_url": "https://api.github.com/users/graup/followers",
    "following_url": "https://api.github.com/users/graup/following{/other_user}",
    "gists_url": "https://api.github.com/users/graup/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/graup/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/graup/subscriptions",
    "organizations_url": "https://api.github.com/users/graup/orgs",
    "repos_url": "https://api.github.com/users/graup/repos",
    "events_url": "https://api.github.com/users/graup/events{/privacy}",
    "received_events_url": "https://api.github.com/users/graup/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/659/reactions",
    "total_count": 5,
    "+1": 5,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/659/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226988473",
    "html_url": "https://github.com/ethereum/solidity/issues/659#issuecomment-226988473",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/659",
    "id": 226988473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk4ODQ3Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T09:45:31Z",
    "updated_at": "2016-06-19T09:45:31Z",
    "author_association": "MEMBER",
    "body": "Yes, this is intentional to avoid unwanted conversions. You can change your code to\n`test = flag ? 1 : 0` to make it work.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226988473/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226988770",
    "html_url": "https://github.com/ethereum/solidity/issues/659#issuecomment-226988770",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/659",
    "id": 226988770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk4ODc3MA==",
    "user": {
      "login": "graup",
      "id": 898549,
      "node_id": "MDQ6VXNlcjg5ODU0OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/898549?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/graup",
      "html_url": "https://github.com/graup",
      "followers_url": "https://api.github.com/users/graup/followers",
      "following_url": "https://api.github.com/users/graup/following{/other_user}",
      "gists_url": "https://api.github.com/users/graup/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/graup/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/graup/subscriptions",
      "organizations_url": "https://api.github.com/users/graup/orgs",
      "repos_url": "https://api.github.com/users/graup/repos",
      "events_url": "https://api.github.com/users/graup/events{/privacy}",
      "received_events_url": "https://api.github.com/users/graup/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T09:52:57Z",
    "updated_at": "2016-06-19T09:52:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh, with the ternary operator it is indeed very easy. Didn't know Solidity has that, but now I do see it mentioned in [the guide](http://solidity.readthedocs.io/en/latest/control-structures.html#control-structures).\n\nThanks!\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/226988770/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1002713956",
    "html_url": "https://github.com/ethereum/solidity/issues/659#issuecomment-1002713956",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/659",
    "id": 1002713956,
    "node_id": "IC_kwDOAm_5kc47xDNk",
    "user": {
      "login": "wchargin",
      "id": 4317806,
      "node_id": "MDQ6VXNlcjQzMTc4MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4317806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wchargin",
      "html_url": "https://github.com/wchargin",
      "followers_url": "https://api.github.com/users/wchargin/followers",
      "following_url": "https://api.github.com/users/wchargin/following{/other_user}",
      "gists_url": "https://api.github.com/users/wchargin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wchargin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wchargin/subscriptions",
      "organizations_url": "https://api.github.com/users/wchargin/orgs",
      "repos_url": "https://api.github.com/users/wchargin/repos",
      "events_url": "https://api.github.com/users/wchargin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wchargin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-29T17:56:37Z",
    "updated_at": "2021-12-29T17:56:37Z",
    "author_association": "NONE",
    "body": "Unfortunately, the `flag ? 1 : 0` version (a) has a subtle footgun that\r\nmakes it easy to use incorrectly, and (b) is slower than the direct\r\nconversion. Consider the following contract, which tries to form a mask\r\nby shifting a boolean by a constant:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Benchmark {\r\n    function boolShiftedBad(bool _b) external pure returns (uint256) {\r\n        return (_b ? 1 : 0) << 8;\r\n    }\r\n    function boolShiftedSlow(bool _b) external pure returns (uint256) {\r\n        return uint256(_b ? 1 : 0) << 8;\r\n    }\r\n    function boolShiftedFast(bool _b) external pure returns (uint256) {\r\n        uint256 _bInt;\r\n        assembly {\r\n            // SAFETY: Simple bool-to-int cast.\r\n            _bInt := _b\r\n        }\r\n        return _bInt << 8;\r\n    }\r\n}\r\n```\r\n\r\nThe function `boolShiftedBad` tries the obvious approach as suggested\r\nin this thread. But in fact this function always returns `0`, even when\r\ncalled with `true` as its argument! This seems like it has to do with\r\nthe literals in `_b ? 1 : 0` being treated as `uint8`s for some reason.\r\nThe assembly shows an `0xff; and` after the `shl`, and replacing `<< 8`\r\nwith `<< 7` hides the problem (the code returns 127).\r\n\r\nIf the right-hand side of the shift is a `uint256` variable (`<< _v`),\r\nthen Solidity helpfully issues a warning. But if it's a `uint8`\r\nvariable---which is entirely reasonable, since `uint8 _v` indicates\r\nwhich bit to select in the `_b << _v` mask---then there is no warning!\r\n\r\nExplicitly converting `_b ? 1 : 0` to `uint256` works, as shown in\r\n`boolShiftedSlow`. However, this approach appears to have an overhead of\r\n40 gas, even with the optimizer enabled and set to `runs: 999999`. (Also\r\nwith `runs` set to `200` or `0`; it makes no difference.) Thus:\r\n\r\n```\r\nboolShiftedSlow(false): 21551 gas\r\nboolShiftedSlow(true):  21553 gas\r\nboolShiftedFast(false): 21511 gas\r\nboolShiftedFast(true):  21523 gas\r\n```\r\n\r\nLooking at the assembly, it looks like the `? 1 : 0` literally compiles\r\nto a jump, plus an `& 0xff`(?):\r\n\r\n```\r\n      0x08 /* \"contracts/Benchmark.sol\":322:323  8 */\r\n      dup3 /* \"contracts/Benchmark.sol\":307:309  _b */\r\n      tag_24 /* \"contracts/Benchmark.sol\":307:317  _b ? 1 : 0 */\r\n      jumpi\r\n      0x00 /* \"contracts/Benchmark.sol\":316:317  0 */\r\n      jump(tag_25) /* \"contracts/Benchmark.sol\":307:317  _b ? 1 : 0 */\r\n    tag_24:\r\n      0x01 /* \"contracts/Benchmark.sol\":312:313  1 */\r\n    tag_25: /* \"contracts/Benchmark.sol\":307:317  _b ? 1 : 0 */\r\n      0xff /* \"contracts/Benchmark.sol\":299:318  uint256(_b ? 1 : 0) */\r\n      and\r\n      swap1 /* \"contracts/Benchmark.sol\":299:323  uint256(_b ? 1 : 0) << 8 */\r\n      shl\r\n```\r\n\r\nThis seems pretty unfortunate, since this conversion doesn't actually\r\nrequire *anything* to be done at runtime. In my production contract, I\r\nsaved hundreds of gas by making this change to a few places that occur\r\nin a loop.\r\n\r\nIMHO, avoiding \"unwanted conversions\" is definitely desirable, but explicitly\r\nwriting the cast `uint256(_b)` is enough to signal that this conversion is, in\r\nfact, wanted. It'd be more readable, more safe, and more efficient.\r\n\r\n<details>\r\n<summary>Driver script</summary>\r\n\r\n```javascript\r\nconst hre = require(\"hardhat\"); // v2.8.0\r\n\r\nasync function main() {\r\n  await hre.run(\"compile\");\r\n  const Benchmark = await hre.ethers.getContractFactory(\"Benchmark\");\r\n  const benchmark = await Benchmark.deploy();\r\n  await benchmark.deployed();\r\n\r\n  // First, demonstrate that omitting an explicit `uint256` cast leads to the\r\n  // wrong answer.\r\n  for (const input of [false, true]) {\r\n    const result = await benchmark.boolShiftedBad(input);\r\n    console.log(`boolShiftedBad(${input}) = ${result}`);\r\n  }\r\n  console.log();\r\n\r\n  for (const method of [\"boolShiftedSlow\", \"boolShiftedFast\"]) {\r\n    for (const input of [false, true]) {\r\n      const result = await benchmark[method](input);\r\n      if (!result.eq(input << 8)) {\r\n        throw new Error(`wrong answer for ${method}(${input}): ${result}`);\r\n      }\r\n      const gas = await benchmark.estimateGas[method](input);\r\n      console.log(`${method}${`(${input}):`.padEnd(8)} ${gas} gas`);\r\n    }\r\n  }\r\n}\r\n\r\nmain().catch((e) => {\r\n  console.error(e);\r\n  process.exitStatus = 1;\r\n});\r\n```\r\n\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1002713956/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1002743770",
    "html_url": "https://github.com/ethereum/solidity/issues/659#issuecomment-1002743770",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/659",
    "id": 1002743770,
    "node_id": "IC_kwDOAm_5kc47xKfa",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-29T19:22:04Z",
    "updated_at": "2021-12-29T19:22:04Z",
    "author_association": "MEMBER",
    "body": "I think the best way to solve this is to create a free function of the following form:\r\n```\r\nfunction toUInt256(bool x) pure returns (uint r) {\r\n  assembly { r := x }\r\n}\r\n```\r\nIt will very likely be inlined and as efficient as adding a conversion function to the compiler, with the added benefit that you can use \"follow definition\" to look up the semantics of this conversion function.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1002743770/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
