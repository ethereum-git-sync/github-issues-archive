{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11430",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11430/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11430/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11430/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11430",
  "id": 899062497,
  "node_id": "MDU6SXNzdWU4OTkwNjI0OTc=",
  "number": 11430,
  "title": "[Yul] Add the ability to escape machine language instructions",
  "user": {
    "login": "qbzzt",
    "id": 12722969,
    "node_id": "MDQ6VXNlcjEyNzIyOTY5",
    "avatar_url": "https://avatars.githubusercontent.com/u/12722969?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/qbzzt",
    "html_url": "https://github.com/qbzzt",
    "followers_url": "https://api.github.com/users/qbzzt/followers",
    "following_url": "https://api.github.com/users/qbzzt/following{/other_user}",
    "gists_url": "https://api.github.com/users/qbzzt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/qbzzt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/qbzzt/subscriptions",
    "organizations_url": "https://api.github.com/users/qbzzt/orgs",
    "repos_url": "https://api.github.com/users/qbzzt/repos",
    "events_url": "https://api.github.com/users/qbzzt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/qbzzt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-05-23T16:56:01Z",
  "updated_at": "2021-05-23T17:06:29Z",
  "closed_at": "2021-05-23T17:01:19Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nIt would be very helpful for testing if we could add arbitrary machine language code to a Yul contract. This is important because we need to make sure that even code that is invalid is handled the same by all clients to preserve consensus.\r\n\r\n\r\n## Motivation\r\n\r\nIn the tests repository (https://github.com/ethereum/tests) we have to test code that:\r\n\r\n1. Contains invalid machine language (to make sure it is properly reverted). Currently we can only use Yul to test invalid machine language with `invalid()`, which translates to `0xFE`. We cannot check that other invalid opcodes are handled the same way unless we use either raw machine language for the contract or LLL.\r\n\r\nor\r\n\r\n2. Contains new opcodes that aren't implemented yet in Yul, such as `BASEFEE` (https://eips.ethereum.org/EIPS/eip-3198). Currrently to use Yul we need a workaround, for example to call a small contract written in raw machine language that runs the opcode, writes the result to memory, and then returns it.\r\n\r\n\r\n## Specification\r\n\r\nHave a function called `raw` that takes two parameters:\r\n\r\n1. The code to execute as a number\r\n2. The expected number of entries pushed into the stack.\r\n\r\nTreat it as a function that returns multiple values. For example, this line defines two variables, sets the first one to the base fee and the second one to the priority fee. The variables are filled right to left so left to right will be the order in which they are calculated.\r\n\r\n```\r\nlet base, tip := raw(0x48483A03, 2)\r\n```\r\n\r\nThe comments should include an explanation:\r\n\r\n| Opcode | Name        | Stack after execution |\r\n| ----------  | -------------  | -----------------------       |\r\n| 0x48      | BASEFEE | [basefee]                    |\r\n| 0x48      | BASEFEE | [basefee, basefee]                    |\r\n| 0x3A      | GASPRICE | [gasprice, basefee basefee] |\r\n| 0x03      | SUB            | [gasprice-basefee, basefee] |\r\n\r\n\r\nCode with jumps would be a lot harder to add, so it is not worth the effort, IMAO.\r\n\r\n## Backwards Compatibility\r\n\r\nThis would break any Yul code that has a `raw` function. I recommend that if such a function is defined the compiler emit a warning and use the defined function as `raw` to ",
  "closed_by": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11430/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11430/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/846593958",
    "html_url": "https://github.com/ethereum/solidity/issues/11430#issuecomment-846593958",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11430",
    "id": 846593958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjU5Mzk1OA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-23T17:01:18Z",
    "updated_at": "2021-05-23T17:06:29Z",
    "author_association": "MEMBER",
    "body": "This is covered by #10869 and will be in the next release. Only for Yul and not inline assembly. The syntax for basefee would be `verbatim_0i_1o(hex\"48\")` and you could write a complete code as:\r\n```\r\n{\r\n  let a:= verbatim_0i_1o(hex\"48\")\r\n  let b:= sub(gasprice(), verbatim_0i_1o(hex\"48\"))\r\n}\r\n```\r\nor if you wish to encode the entire bytecode:\r\n```\r\n{\r\n  let base, tip := vebratim_0i_2o(hex\"48483a03\")\r\n}\r\n```\r\n\r\nAlso `basefee` will be added in #11390, though that is no help in the general case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/846593958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
