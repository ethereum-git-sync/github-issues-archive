{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12268",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12268/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12268/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12268/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12268",
  "id": 1049978186,
  "node_id": "I_kwDOAm_5kc4-lWVK",
  "number": 12268,
  "title": "[Yul EVM code transform] More efficient codegen for terminating control-flow",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2021-11-10T15:31:16Z",
  "updated_at": "2022-01-31T18:24:25Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "When calling a user-defined function that never returns, we should\r\n - not try to clean the stack after the function call (there should be zero additional opcodes after the jump)\r\n - not push the return tag to begin with\r\n\r\nThe return tag should also not be expected to be there by the called function.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12268/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12268/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/965501917",
    "html_url": "https://github.com/ethereum/solidity/issues/12268#issuecomment-965501917",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12268",
    "id": 965501917,
    "node_id": "IC_kwDOAm_5kc45jGPd",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-10T16:15:58Z",
    "updated_at": "2021-11-10T16:15:58Z",
    "author_association": "MEMBER",
    "body": "@ekpyron 's opinion:\r\n\r\n> Yes, exactly. And it should just be fine to create layouts like this (i.e. what we do now) in a first step and then in a second step at every jump where the target reverts just fill in a prefix of JUNK, i.e. make it {x,y,z} to {junk,junk,junk} (and add those three junks at every operation in the path of the block)\r\n> I think that's easier than thinking of the layouts as suffices during the transitions.\r\n\r\nSo essentially, after we have computed the stack layout, we do a second pass over the control flow graph. For every branch that goes into a control-flow that always terminates, we add junk slots at the bottom of the entry layout of the following block.\r\n\r\nWe might only do it (or try it with different number of junk slots) if this makes the stack shuffling easier. Is there a case where stack shuffling is easier without adding junk slots?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/965501917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/965516419",
    "html_url": "https://github.com/ethereum/solidity/issues/12268#issuecomment-965516419",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12268",
    "id": 965516419,
    "node_id": "IC_kwDOAm_5kc45jJyD",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-10T16:31:02Z",
    "updated_at": "2021-11-10T16:31:02Z",
    "author_association": "MEMBER",
    "body": "In ``7 6 5 4 3 2 1 -> 7 6 5 4 3 2`` adding a junk slot is fatal...\r\n\r\nWe *might* get away with just doing the shuffling without adding junk, counting the operations it takes, and then iteratively add junk slots, shuffling and counting each time, until the lengths match - and then just choose the amount of junk for which the shuffling is cheapest.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/965516419/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/965523384",
    "html_url": "https://github.com/ethereum/solidity/issues/12268#issuecomment-965523384",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12268",
    "id": 965523384,
    "node_id": "IC_kwDOAm_5kc45jLe4",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-10T16:34:15Z",
    "updated_at": "2021-11-10T16:34:15Z",
    "author_association": "MEMBER",
    "body": "Another example: `1 2 3 4 5 -> 1 3` could be done using `# # # 1 3` or `# # # # # 1 3` - the first resulting in three swaps while the second can be done with two dups",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/965523384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/965538432",
    "html_url": "https://github.com/ethereum/solidity/issues/12268#issuecomment-965538432",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12268",
    "id": 965538432,
    "node_id": "IC_kwDOAm_5kc45jPKA",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-10T16:50:50Z",
    "updated_at": "2021-11-10T16:50:50Z",
    "author_association": "MEMBER",
    "body": "We should not do this iteratively but only compute an \"optimal\" number of junk slots at the branch point and then \"inherit\" these junk slots on all the blocks until the termination.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/965538432/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012360047",
    "html_url": "https://github.com/ethereum/solidity/issues/12268#issuecomment-1012360047",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12268",
    "id": 1012360047,
    "node_id": "IC_kwDOAm_5kc48V2Nv",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-13T17:38:58Z",
    "updated_at": "2022-01-13T17:49:52Z",
    "author_association": "MEMBER",
    "body": "As an update on this: I have a rather crude and hacky initial implementation of this that determines all cut-edges in the control flow graph (viewed as undirected graph), that don't lead to function-return paths and don't have backwards-edge entries. At each vertex at the end of such a cut-edge (in the direction of the CFG as directed graph again) it then brute-forces adding junk slots to check if the result (locally) uses less gas when shuffling (at the respective block entry). If so it uniformly adds the (locally) optimal amount of junk slots to the subgraph (the subgraph is disconnected due to the initial edge being a cut-edge).\r\n\r\nThe result is savings of a few gas in runtime cost, but up to 1%-2% in constructor gas costs, so it's probably correct that this is at least partly responsible for the code size increase of the new code transform (runtime gas cost is rarely affected significantly, since the most common place for this issue is reverting code paths anyways).\r\n\r\nHowever, my WIP approach has a few regression cases I still have to track down and in a few of our test cases either the brute force approach is too slow or my implementation loops due to some residual bug. Generally, I haven't measured the runtime impact yet.\r\n\r\nBut I still think the general approach may work out with some more refinement.\r\n\r\n<details><summary>Click for a table of gas differences</summary>\r\n\r\n| File name                                                                                    |   IR-optimized (%) |   Legacy-Optimized (%) |   Legacy (%) |\r\n|----------------------------------------------------------------------------------------------|--------------------|------------------------|--------------|\r\n| constructor_inheritance_init_order.sol                                                       |       -0.189801    |                      0 |            0 |\r\n| constructor_with_params_inheritance.sol                                                      |       -0.275544    |                      0 |            0 |\r\n| constructor_with_params.sol                                                                  |       -0.283996    |                      0 |            0 |\r\n| constructor_inheritance_init_order_2.sol                                                     |       -0.189801    |                      0 |            0 |\r\n| constructor_with_params_diamond_inheritance.sol                                              |       -0.493914    |                      0 |            0 |\r\n| smoke/constructor.sol                                                                        |        0.309695    |                      0 |            0 |\r\n| events/event_dynamic_array_storage_v2.sol                                                    |       -0.00435745  |                      0 |            0 |\r\n| events/event_emit_from_other_contract.sol                                                    |        0.0563876   |                      0 |            0 |\r\n| events/event_dynamic_array_storage.sol                                                       |       -0.00435745  |                      0 |            0 |\r\n| functionCall/failed_create.sol                                                               |       -0.992801    |                      0 |            0 |\r\n| functionCall/creation_function_call_with_salt.sol                                            |       -0.321264    |                      0 |            0 |\r\n| functionCall/gas_and_value_basic.sol                                                         |       -1.39268     |                      0 |            0 |\r\n| functionCall/external_call_to_nonexisting_debugstrings.sol                                   |       -0.62625     |                      0 |            0 |\r\n| functionCall/external_call_to_nonexisting.sol                                                |       -3.06786     |                      0 |            0 |\r\n| functionCall/mapping_array_internal_argument.sol                                             |       -0.00178737  |                      0 |            0 |\r\n| functionCall/creation_function_call_with_args.sol                                            |       -0.321526    |                      0 |            0 |\r\n| functionCall/send_zero_ether.sol                                                             |       -0.62997     |                      0 |            0 |\r\n| functionCall/gas_and_value_brace_syntax.sol                                                  |       -1.39268     |                      0 |            0 |\r\n| externalContracts/snark.sol                                                                  |        0           |                      0 |            0 |\r\n| externalContracts/ramanujan_pi.sol                                                           |       -1.69397     |                      0 |            0 |\r\n| externalContracts/deposit_contract.sol                                                       |       -0.626414    |                      0 |            0 |\r\n| externalContracts/FixedFeeRegistrar.sol                                                      |       -1.82649     |                      0 |            0 |\r\n| externalContracts/strings.sol                                                                |       -0.394212    |                      0 |            0 |\r\n| constructor/constructor_static_array_argument.sol                                            |       -0.602553    |                      0 |            0 |\r\n| constructor/arrays_in_constructors.sol                                                       |       -1.71416     |                      0 |            0 |\r\n| constructor/constructor_arguments_external.sol                                               |        0.794222    |                      0 |            0 |\r\n| constructor/bytes_in_constructors_packer.sol                                                 |       -1.30244     |                      0 |            0 |\r\n| constructor/bytes_in_constructors_unpacker.sol                                               |       -2.00314     |                      0 |            0 |\r\n| calldata/copy_from_calldata_removes_bytes_data.sol                                           |        0.00128884  |                      0 |            0 |\r\n| inheritance/value_for_constructor.sol                                                        |       -0.774297    |                      0 |            0 |\r\n| inheritance/inherited_function_calldata_memory_interface.sol                                 |       -8.45582     |                      0 |            0 |\r\n| abiEncoderV2/abi_encode_calldata_slice.sol                                                   |       -0.016033    |                      0 |            0 |\r\n| abiEncoderV2/storage_array_encoding.sol                                                      |       -0.00136305  |                      0 |            0 |\r\n| abiEncoderV2/abi_encode_v2_in_function_inherited_in_v1_contract.sol                          |        0.338528    |                      0 |            0 |\r\n| abiEncoderV2/calldata_array.sol                                                              |       -0.0034891   |                      0 |            0 |\r\n| abiEncoderV2/abi_encode_v2.sol                                                               |       -0.00176428  |                      0 |            0 |\r\n| userDefinedValueType/erc20.sol                                                               |       -1.31874     |                      0 |            0 |\r\n| userDefinedValueType/calldata.sol                                                            |       -0.00163253  |                      0 |            0 |\r\n| libraries/internal_types_in_library.sol                                                      |       -0.00172679  |                      0 |            0 |\r\n| libraries/using_library_mappings_public.sol                                                  |       -0.00167005  |                      0 |            0 |\r\n| libraries/using_library_structs.sol                                                          |       -0.00392661  |                      0 |            0 |\r\n| abiEncoderV1/abi_encode_calldata_slice.sol                                                   |       -0.016033    |                      0 |            0 |\r\n| abiEncoderV1/abi_decode_v2_storage.sol                                                       |       -0.00098371  |                      0 |            0 |\r\n| abiEncoderV1/struct/struct_storage_ptr.sol                                                   |        0.0077637   |                      0 |            0 |\r\n| viaYul/array_storage_length_access.sol                                                       |       -0.000492669 |                      0 |            0 |\r\n| viaYul/array_storage_index_boundary_test.sol                                                 |       -0.00935666  |                      0 |            0 |\r\n| viaYul/array_memory_index_access.sol                                                         |       -0.00144466  |                      0 |            0 |\r\n| viaYul/array_storage_index_access.sol                                                        |       -2.44065e-05 |                      0 |            0 |\r\n| viaYul/array_storage_push_empty_length_address.sol                                           |       -0.00061745  |                      0 |            0 |\r\n| viaYul/array_storage_push_empty.sol                                                          |       -0.00161416  |                      0 |            0 |\r\n| viaYul/array_storage_push_pop.sol                                                            |       -8.78286e-05 |                      0 |            0 |\r\n| viaYul/array_storage_index_zeroed_test.sol                                                   |       -6.05855e-05 |                      0 |            0 |\r\n| salted_create/salted_create_with_value.sol                                                   |        0.219823    |                      0 |            0 |\r\n| state/blockhash_basic.sol                                                                    |       -0.569097    |                      0 |            0 |\r\n| array/constant_var_as_array_length.sol                                                       |       -0.207524    |                      0 |            0 |\r\n| array/function_array_cross_calls.sol                                                         |       -1.93678     |                      0 |            0 |\r\n| array/reusing_memory.sol                                                                     |        0.174325    |                      0 |            0 |\r\n| array/byte_array_transitional_2.sol                                                          |       -0.00126468  |                      0 |            0 |\r\n| array/fixed_arrays_in_constructors.sol                                                       |        0.322049    |                      0 |            0 |\r\n| array/bytes_length_member.sol                                                                |       -0.000905526 |                      0 |            0 |\r\n| array/dynamic_multi_array_cleanup.sol                                                        |       -0.00163228  |                      0 |            0 |\r\n| array/fixed_arrays_as_return_type.sol                                                        |       -0.89856     |                      0 |            0 |\r\n| array/arrays_complex_from_and_to_storage.sol                                                 |       -0.00105313  |                      0 |            0 |\r\n| array/create_memory_array.sol                                                                |       -0.00153146  |                      0 |            0 |\r\n| array/delete/bytes_delete_element.sol                                                        |        0.00354148  |                      0 |            0 |\r\n| array/push/array_push_struct_from_calldata.sol                                               |       -0.00144108  |                      0 |            0 |\r\n| array/push/array_push_nested_from_calldata.sol                                               |       -0.00176574  |                      0 |            0 |\r\n| array/push/byte_array_push_transition.sol                                                    |       -0.00113091  |                      0 |            0 |\r\n| array/copying/array_copy_storage_storage_static_static.sol                                   |       -0.00465924  |                      0 |            0 |\r\n| array/copying/array_copy_different_packing.sol                                               |       -0.00188172  |                      0 |            0 |\r\n| array/copying/array_copy_target_simple_2.sol                                                 |       -0.000730026 |                      0 |            0 |\r\n| array/copying/array_nested_calldata_to_storage.sol                                           |       -0.00136578  |                      0 |            0 |\r\n| array/copying/memory_dyn_2d_bytes_to_storage.sol                                             |        0.00230918  |                      0 |            0 |\r\n| array/copying/array_nested_memory_to_storage.sol                                             |       -0.00110868  |                      0 |            0 |\r\n| array/copying/array_copy_including_array.sol                                                 |       -4.29914e-05 |                      0 |            0 |\r\n| array/copying/array_copy_target_simple.sol                                                   |       -0.00067849  |                      0 |            0 |\r\n| array/copying/copy_function_internal_storage_array.sol                                       |       -0.00161186  |                      0 |            0 |\r\n| array/copying/array_of_function_external_storage_to_storage_dynamic.sol                      |       -0.0019102   |                      0 |            0 |\r\n| array/copying/copy_byte_array_in_struct_to_storage.sol                                       |       -0.00139235  |                      0 |            0 |\r\n| array/copying/array_of_function_external_storage_to_storage_dynamic_different_mutability.sol |       -0.00191622  |                      0 |            0 |\r\n| array/copying/calldata_array_dynamic_to_storage.sol                                          |       -0.00179919  |                      0 |            0 |\r\n| array/copying/bytes_inside_mappings.sol                                                      |       -0.00138716  |                      0 |            0 |\r\n| array/copying/array_of_struct_memory_to_storage.sol                                          |       -0.000839285 |                      0 |            0 |\r\n| array/copying/copy_byte_array_to_storage.sol                                                 |       -0.00165091  |                      0 |            0 |\r\n| array/copying/array_copy_calldata_storage.sol                                                |       -0.000307376 |                      0 |            0 |\r\n| array/copying/copy_removes_bytes_data.sol                                                    |       -0.000563644 |                      0 |            0 |\r\n| array/copying/array_copy_nested_array.sol                                                    |       -0.000289769 |                      0 |            0 |\r\n| array/copying/array_of_struct_calldata_to_storage.sol                                        |       -0.00165224  |                      0 |            0 |\r\n| array/copying/copying_bytes_multiassign.sol                                                  |        0.00180276  |                      0 |            0 |\r\n| array/copying/storage_memory_nested.sol                                                      |       -0.00192507  |                      0 |            0 |\r\n| array/copying/storage_memory_nested_struct.sol                                               |       -0.000685284 |                      0 |            0 |\r\n| array/copying/array_copy_storage_storage_different_base.sol                                  |       -0.000885128 |                      0 |            0 |\r\n| array/copying/storage_memory_nested_from_pointer.sol                                         |       -0.00192507  |                      0 |            0 |\r\n| array/copying/bytes_storage_to_storage.sol                                                   |       -0.0031624   |                      0 |            0 |\r\n| array/pop/array_pop_uint24_transition.sol                                                    |       -0.00376944  |                      0 |            0 |\r\n| array/pop/byte_array_pop_masking_long.sol                                                    |       -0.00553031  |                      0 |            0 |\r\n| array/pop/byte_array_pop_copy_long.sol                                                       |       -0.00365287  |                      0 |            0 |\r\n| array/pop/byte_array_pop_long_storage_empty_garbage_ref.sol                                  |       -0.000701066 |                      0 |            0 |\r\n| array/pop/byte_array_pop_long_storage_empty.sol                                              |       -0.00203516  |                      0 |            0 |\r\n| array/pop/array_pop_array_transition.sol                                                     |       -0.000264145 |                      0 |            0 |\r\n| immutable/use_scratch.sol                                                                    |       -2.99889     |                      0 |            0 |\r\n| immutable/multi_creation.sol                                                                 |       -0.00471006  |                      0 |            0 |\r\n| structs/struct_copy.sol                                                                      |       -0.00174812  |                      0 |            0 |\r\n| structs/struct_containing_bytes_copy_and_delete.sol                                          |       -0.0014953   |                      0 |            0 |\r\n| structs/struct_memory_to_storage_function_ptr.sol                                            |       -0.00180235  |                      0 |            0 |\r\n| structs/calldata/calldata_struct_with_nested_array_to_storage.sol                            |       -0.00245825  |                      0 |            0 |\r\n| various/staticcall_for_view_and_pure.sol                                                     |        3.04758e-06 |                      0 |            0 |\r\n| various/erc20.sol                                                                            |       -1.33243     |                      0 |            0 |\r\n| various/senders_balance.sol                                                                  |       -0.41538     |                      0 |            0 |\r\n| various/value_complex.sol                                                                    |       -0.633705    |                      0 |            0 |\r\n| various/address_code.sol                                                                     |       -1.5364      |                      0 |            0 |\r\n| various/contract_binary_dependencies.sol                                                     |       -0.429378    |                      0 |            0 |\r\n| various/value_insane.sol                                                                     |       -0.63034     |                      0 |            0 |\r\n| various/skip_dynamic_types_for_structs.sol                                                   |       -0.00335505  |                      0 |            0 |\r\n| isoltestTesting/balance_other_contract.sol                                                   |       -0.621482    |                      0 |            0 |\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1012360047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1026076531",
    "html_url": "https://github.com/ethereum/solidity/issues/12268#issuecomment-1026076531",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12268",
    "id": 1026076531,
    "node_id": "IC_kwDOAm_5kc49KK9z",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-31T18:24:24Z",
    "updated_at": "2022-01-31T18:24:24Z",
    "author_association": "MEMBER",
    "body": "Can you check how this does in combination with https://github.com/ethereum/solidity/pull/12206 ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1026076531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
