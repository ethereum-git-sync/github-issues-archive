{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/2465",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/2465/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/2465/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/2465/events",
  "html_url": "https://github.com/ethereum/solidity/issues/2465",
  "id": 238366277,
  "node_id": "MDU6SXNzdWUyMzgzNjYyNzc=",
  "number": 2465,
  "title": "LLL: (alloc 0) corrupts memory",
  "user": {
    "login": "benjaminion",
    "id": 20796281,
    "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/benjaminion",
    "html_url": "https://github.com/benjaminion",
    "followers_url": "https://api.github.com/users/benjaminion/followers",
    "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
    "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
    "organizations_url": "https://api.github.com/users/benjaminion/orgs",
    "repos_url": "https://api.github.com/users/benjaminion/repos",
    "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/benjaminion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2017-06-25T07:50:18Z",
  "updated_at": "2017-07-11T20:44:41Z",
  "closed_at": "2017-07-11T20:44:41Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The built-in `alloc ` expression in LLL reserves some memory by writing a zero byte to memory at (msize + n -1) where n is the number of bytes requested, ie `(alloc n)`.\r\n\r\nIf n is 0, then this can corrupt the previous word in memory with data at (misze - 1). Sample code:\r\n\r\n```\r\n(seq\r\n  (mstore 0x00 1)\r\n  (alloc 0)\r\n  (return 0x00 0x20))\r\n```\r\n\r\nThis returns 0 rather than 1 as it should.\r\n\r\nFor me, `(alloc 0)` could be flagged as a run-time error as there could be security implications of this either way.  If we just alloc 0 bytes (don't change msize), then that could lead to other problems if the later code is expecting some allocated memory to have been reserved for it. But thoughts welcome.",
  "closed_by": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/2465/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/2465/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/310980498",
    "html_url": "https://github.com/ethereum/solidity/issues/2465#issuecomment-310980498",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2465",
    "id": 310980498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDk4MDQ5OA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-26T07:10:42Z",
    "updated_at": "2017-06-26T07:10:42Z",
    "author_association": "MEMBER",
    "body": "memory can be grown by reading, not by writing, and I think LLL should always allocate at least 32 bytes (although I would not make `alloc 0` fail).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/310980498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/310985176",
    "html_url": "https://github.com/ethereum/solidity/issues/2465#issuecomment-310985176",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2465",
    "id": 310985176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDk4NTE3Ng==",
    "user": {
      "login": "benjaminion",
      "id": 20796281,
      "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjaminion",
      "html_url": "https://github.com/benjaminion",
      "followers_url": "https://api.github.com/users/benjaminion/followers",
      "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
      "organizations_url": "https://api.github.com/users/benjaminion/orgs",
      "repos_url": "https://api.github.com/users/benjaminion/repos",
      "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjaminion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-26T07:37:38Z",
    "updated_at": "2017-06-26T07:37:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> memory can be grown by reading, not by writing\r\n\r\nInteresting. That would definitely be safer!\r\n\r\n> I think LLL should always allocate at least 32 bytes\r\n\r\nI guess this could be achieved cheaply and without jumps by inserting the following after putting the alloc argument on the stack.\r\n\r\n```\r\nDUP1\r\nISZERO\r\nADD\r\n```\r\n\r\nThis should then make alloc safe whether we read or write to extend the memory.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/310985176/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311811987",
    "html_url": "https://github.com/ethereum/solidity/issues/2465#issuecomment-311811987",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2465",
    "id": 311811987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTgxMTk4Nw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-28T22:39:14Z",
    "updated_at": "2017-06-28T22:39:14Z",
    "author_association": "MEMBER",
    "body": "As mentioned memory is extended by reading or writing an offset not previously touched. Changing alloc to `mload` would at least solve the overwriting issue.\r\n\r\nNot entirely sure an overhaul is not needed, because static memory ranges are assumed right now by the compiler, such as the range by `set`/`get`, etc.\r\n\r\nDo I understand correctly that `(alloc n)` allocated n bytes and returns the starting offset? I think `n = 0` is fine in that case (it won't change current semantics), but not very useful.\r\n\r\nI'd rather go into thinking about a proper design of these LLL features and do an overhaul at some point.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311811987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311865893",
    "html_url": "https://github.com/ethereum/solidity/issues/2465#issuecomment-311865893",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2465",
    "id": 311865893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTg2NTg5Mw==",
    "user": {
      "login": "benjaminion",
      "id": 20796281,
      "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjaminion",
      "html_url": "https://github.com/benjaminion",
      "followers_url": "https://api.github.com/users/benjaminion/followers",
      "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
      "organizations_url": "https://api.github.com/users/benjaminion/orgs",
      "repos_url": "https://api.github.com/users/benjaminion/repos",
      "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjaminion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-29T05:26:55Z",
    "updated_at": "2017-06-29T05:43:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> As mentioned memory is extended by reading or writing an offset not previously touched. Changing alloc to mload would at least solve the overwriting issue.\r\n\r\nAgreed, but two issues:\r\n\r\n 1. There is no `MLOAD8` opcode, so some logic change is needed.\r\n 2. When I try to implement it with `MLOAD` there seems to be a compiler problem (see below).\r\n\r\n> Not entirely sure an overhaul is not needed, because static memory ranges are assumed right now by the compiler, such as the range by set/get, etc.\r\n\r\nAlso agreed. There is some legacy code at the top of liblll/CodeFragment.cpp to handle conflict with variables storage, I think. But it is no longer effective since `vars.size` is not managed when variables are created:\r\n\r\n```\r\nvoid CodeFragment::finalise(CompilerState const& _cs)\r\n{\r\n\tif (_cs.usedAlloc && _cs.vars.size() && !m_finalised)\r\n\t{\r\n```\r\n\r\n> Do I understand correctly that (alloc n) allocated n bytes and returns the starting offset?\r\n\r\nYes, except that 32 * (1+(n-1)/32) bytes are allocated (rounded up to a multiple of 32).\r\n\r\n> I'd rather go into thinking about a proper design of these LLL features and do an overhaul at some point.\r\n\r\nYes. I'm not honestly a fan of `alloc`; it seems to me that most will want to do their own memory management. That's kind of the point of LLL.\r\n\r\nIn the meantime, the following is a quick fix that still uses `MSTORE8`, but fixes the immediate issue effectively. For the `(alloc 0)` case it allocates 32 bytes as suggested by @chriseth.\r\n\r\n```\r\nm_asm.append(Instruction::MSIZE);\r\nm_asm.append(u256(0));\r\nm_asm.append(u256(1));\r\nm_asm.append(code[0].m_asm, 1);\r\n// Handle (alloc 0) case: always alloc at least 32 bytes.\r\nm_asm.append(Instruction::DUP1);\r\nm_asm.append(Instruction::ISZERO);\r\nm_asm.append(Instruction::ADD);\r\nm_asm.append(Instruction::MSIZE);\r\nm_asm.append(Instruction::ADD);\r\nm_asm.append(Instruction::SUB);\r\nm_asm.append(Instruction::MSTORE8);\r\n```\r\n\r\nThe above code all seems to work as expected and should be safe.\r\n\r\nNow, the code below is an attempt to use `MLOAD` instead of `MSTORE8` to achieve the same thing. I believe it should work, but for reasons unclear the compiler does not emit the `MLOAD` instruction, although it emits all the rest! So my implementation is currently failing.\r\n\r\n```\r\nm_asm.append(Instruction::MSIZE);\r\nm_asm.append(u256(32));\r\nm_asm.append(Instruction::DUP1);\r\nm_asm.append(u256(1));\r\nm_asm.append(code[0].m_asm, 1);\r\nm_asm.append(Instruction::DUP1);\r\nm_asm.append(Instruction::ISZERO);\r\nm_asm.append(Instruction::ADD);\r\nm_asm.append(Instruction::SUB);\r\nm_asm.append(Instruction::DIV); // Align on 32 byte boundary\r\nm_asm.append(Instruction::MUL);\r\nm_asm.append(Instruction::MSIZE);\r\nm_asm.append(Instruction::ADD);\r\nm_asm.append(Instruction::MLOAD); // <-- The compiler does not emit this!! Why not?\r\nm_asm.append(Instruction::POP);\r\n```\r\n\r\nThis is the assembly produced. You can see that `mload` is missing at the end.  This is a mystery.\r\n\r\n```\r\nbuild> echo '(alloc 64)' | lllc -a\r\n  msize\r\n  0x20\r\n  dup1\r\n  0x1\r\n  0x40\r\n  dup1\r\n  iszero\r\n  add\r\n  sub\r\n  div\r\n  mul\r\n  msize\r\n  add\r\n  pop\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311865893/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311901615",
    "html_url": "https://github.com/ethereum/solidity/issues/2465#issuecomment-311901615",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2465",
    "id": 311901615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTkwMTYxNQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-29T08:41:27Z",
    "updated_at": "2017-06-29T08:41:27Z",
    "author_association": "MEMBER",
    "body": "> There is no MLOAD8 opcode, so some logic change is needed.\r\n\r\n`MSTORE8` writes strictly 8 bits to the offset provided. In order not to overextended by 248 bits, just do an `MLOAD(SUB(n, 31))`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311901615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311910036",
    "html_url": "https://github.com/ethereum/solidity/issues/2465#issuecomment-311910036",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2465",
    "id": 311910036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTkxMDAzNg==",
    "user": {
      "login": "benjaminion",
      "id": 20796281,
      "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjaminion",
      "html_url": "https://github.com/benjaminion",
      "followers_url": "https://api.github.com/users/benjaminion/followers",
      "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
      "organizations_url": "https://api.github.com/users/benjaminion/orgs",
      "repos_url": "https://api.github.com/users/benjaminion/repos",
      "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjaminion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-29T09:15:41Z",
    "updated_at": "2017-06-29T09:15:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> MSTORE8 writes strictly 8 bits to the offset provided. In order not to overextended by 248 bits, just do an MLOAD(SUB(n, 31))\r\n\r\nThat could work. We'd need to handle the case that n < 31 so as not to attempt to read from the top of memory. E.g. `(alloc 8)` with MSIZE initially 0 (another edge case).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311910036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311920501",
    "html_url": "https://github.com/ethereum/solidity/issues/2465#issuecomment-311920501",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2465",
    "id": 311920501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTkyMDUwMQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-29T09:58:55Z",
    "updated_at": "2017-06-29T09:58:55Z",
    "author_association": "MEMBER",
    "body": "Having read the above again, I think `alloc 0` should equal to `msize`. I'm not sure why `MLOAD` is omitted in the above code, will check.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311920501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311922413",
    "html_url": "https://github.com/ethereum/solidity/issues/2465#issuecomment-311922413",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2465",
    "id": 311922413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTkyMjQxMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-29T10:07:03Z",
    "updated_at": "2017-06-29T10:07:03Z",
    "author_association": "MEMBER",
    "body": "It is some kind of optimiser issue as for example: `(alloc 0)` works, but `(return (alloc 0))` optimises it out, however forcing the usage of the stack (such as `keccak256`) keeps it even in that case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/311922413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
