{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/2421/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/2421/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/2421/events",
  "html_url": "https://github.com/ethereum/solidity/issues/2421",
  "id": 236696633,
  "node_id": "MDU6SXNzdWUyMzY2OTY2MzM=",
  "number": 2421,
  "title": "RFE: Introduce private selectors for struct and other types",
  "user": {
    "login": "ethernian",
    "id": 4574735,
    "node_id": "MDQ6VXNlcjQ1NzQ3MzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4574735?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ethernian",
    "html_url": "https://github.com/ethernian",
    "followers_url": "https://api.github.com/users/ethernian/followers",
    "following_url": "https://api.github.com/users/ethernian/following{/other_user}",
    "gists_url": "https://api.github.com/users/ethernian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ethernian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ethernian/subscriptions",
    "organizations_url": "https://api.github.com/users/ethernian/orgs",
    "repos_url": "https://api.github.com/users/ethernian/repos",
    "events_url": "https://api.github.com/users/ethernian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ethernian/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4699440809,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvGqQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/closed%20due%20inactivity",
      "name": "closed due inactivity",
      "color": "91535E",
      "default": false,
      "description": "The issue/PR was automatically closed due to inactivity."
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2017-06-18T02:52:06Z",
  "updated_at": "2023-02-20T12:05:39Z",
  "closed_at": "2023-02-20T12:05:39Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "# Problem\r\nConsider an already deployed contract `Base` exposing a complex struct into public space.\r\n```\r\ncontract Base {\r\n    struct S { uint n; string name; bytes code; /* and so on */ }\r\n    S public s;\r\n}\r\n```\r\nConsider some other contract `BaseUser` developed later and accessing some fields of the struct `S` from the contract `Base.`\r\n\r\n```\r\ncontract BaseUser{\r\n    Base base = Base(BASE_ADDR);\r\n    function storeIfOnly(string _name) {\r\n        var (n,name,code) = base.s();  //(A)\r\n        if (sha3(name) == sha3(_name) && n==1) {\r\n             //store something.\r\n        }    \r\n    }\r\n}\r\n```\r\nAs you see, if the contract `Base` does not define individual accessors for fields of struct `S`, the `BaseUser` should retrieve whole struct, what is inefficient. If the contract `Base` defines accessors for individual fields of `S`, it is also inefficient to make one message call per field access. It could be impossible to define a group field accessors in `Base` in advance, because `BaseUser` is not designed yet.\r\n\r\nThere is another problem retrieving whole struct in `BaseUser`: solidity compiler supports currently up to 16 local variables. Line **(A)** pollutes local space with unused variables. It can lead to  _\"Stack too deep, try removing local variables\"_ error.\r\n\r\n# Solution\r\nI would propose a new language feature \"private selectors\". It selects only necessary fields from the struct. The syntax could be like:\r\n\r\n```\r\ncontract BaseUser{\r\n    Base base = Base(BASE_ADDR);\r\n    function storeIfOnly(string _name) {\r\n        var (n,name) = base.s[name,n]();  //(A)\r\n        if (sha3(name) == sha3(_name) && n==1) {\r\n             //store something.\r\n        }    \r\n    }\r\n}\r\n```\r\nwhere **[name,n]** is the private _field_ selector for the type `struct`.\r\n\r\n# Implementation\r\nImplementation of this private selector is quite simple: Solidity compiler should inject a bitmask as a field selector into the current accessor call:\r\n\r\ncontract BaseUser:\r\n```\r\nvar (n,name) = base.s(/*injected*/ 0x3);  // binary 011 selects fields 'n', 'name' but not 'code'\r\n```\r\nThe public accessor `s()` in the contract Base should evaluate the given bitmask and make internally an private call to embedded selector function returning only requested fields. This is essentially the  'private selector' or 'embedded selector'.\r\n\r\nNote, that length of the return value is known at compile time of the contract `BaseUser`. \r\n\r\n# Generalization\r\nWe could define private selectors not only for `struct`, but for another types as well. Here is an example of private selector for arrays.\r\n\r\n```\r\ncontract Base {\r\n    uint[] publlic arr;\r\n}\r\n```\r\nand access the first element of `arr` as\r\n```\r\n  var e =  base.arr[0]();\r\n```\r\nThe  **()** are still necessary in order to express, that we have a read-only accessor call here, and not an array access. Thus the expression can't be used as the left part of an assignment.\r\n```\r\n  base.arr[0]() = 0x42;  // causes compile error\r\n```\r\n\r\nPersonally I find an expression `base.arr[0]()` for an array element access much more consequent and clear as the current solidity syntax `base.arr(0)`.\r\n\r\n# Other complex structures\r\nIt could be useful to define selectors for more complex data types like trees.\r\n\r\n```\r\ncontract Base {\r\n    //we should better define a new type 'tree' for that\r\n    struct Node { uint id; uint[] children; string name; }\r\n    mapping(uint=>Node) public tree;\r\n}\r\n```\r\nand select it like...\r\n```\r\nvar node = base.tree[/foo/bar]();\r\n```\r\n# Custom selectors\r\nThere are also ideas to define a custom selector functions in the `Base` contract. \r\nPossible syntax and semantic is still unclear and to be discussed.\r\n\r\n### Acknowledgement\r\nA lot of thanks to @chriseth  and @pirapira for important feedback and ideas.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/2421/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/2421/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309270660",
    "html_url": "https://github.com/ethereum/solidity/issues/2421#issuecomment-309270660",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
    "id": 309270660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI3MDY2MA==",
    "user": {
      "login": "ethernian",
      "id": 4574735,
      "node_id": "MDQ6VXNlcjQ1NzQ3MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4574735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernian",
      "html_url": "https://github.com/ethernian",
      "followers_url": "https://api.github.com/users/ethernian/followers",
      "following_url": "https://api.github.com/users/ethernian/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernian/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernian/orgs",
      "repos_url": "https://api.github.com/users/ethernian/repos",
      "events_url": "https://api.github.com/users/ethernian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T11:04:06Z",
    "updated_at": "2017-06-18T11:04:06Z",
    "author_association": "NONE",
    "body": "### [Change 1] Implementation: \r\nit would be better to use reverse bitmask; 0-include the field, 1- exclude it. \r\n0x0 value would select all fields per default. \r\nIt would be compatible with current struct accessor (without bitmask support). \r\n``` \r\nvar (n,name) = base.s(/*injected*/ 0x8);  // binary 100 deselects 'code' keeping 'n' and 'name' \r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309270660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309279551",
    "html_url": "https://github.com/ethereum/solidity/issues/2421#issuecomment-309279551",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
    "id": 309279551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI3OTU1MQ==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T14:02:51Z",
    "updated_at": "2017-06-18T14:02:51Z",
    "author_association": "MEMBER",
    "body": "An alternative is to introduce `ignore` in the tuple assignment:\r\n\r\n```\r\nvar (_, name, _) = base.s()\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309279551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309284736",
    "html_url": "https://github.com/ethereum/solidity/issues/2421#issuecomment-309284736",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
    "id": 309284736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI4NDczNg==",
    "user": {
      "login": "ethernian",
      "id": 4574735,
      "node_id": "MDQ6VXNlcjQ1NzQ3MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4574735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernian",
      "html_url": "https://github.com/ethernian",
      "followers_url": "https://api.github.com/users/ethernian/followers",
      "following_url": "https://api.github.com/users/ethernian/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernian/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernian/orgs",
      "repos_url": "https://api.github.com/users/ethernian/repos",
      "events_url": "https://api.github.com/users/ethernian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T15:35:17Z",
    "updated_at": "2017-06-18T15:35:17Z",
    "author_association": "NONE",
    "body": "@pirapira , the `ignore` statement will workaround the local vars limitation, but doesn't solve the efficiency problem.  Is it correct?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309284736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309288006",
    "html_url": "https://github.com/ethereum/solidity/issues/2421#issuecomment-309288006",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
    "id": 309288006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI4ODAwNg==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T16:31:16Z",
    "updated_at": "2017-06-18T18:24:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks reasonable. I would suggest a more standard destructuring syntax:\r\n```javascript\r\nvar { n, name } = base.s()\r\n```\r\nYou could also allow renaming:\r\n```javascript\r\nvar { n: sN, name: sName } = base.s()\r\n// or:\r\nvar { n as sN, name as sName } = base.s()\r\n```\r\nFor arrays, I am more inclined to provide a fake method:\r\n```javascript\r\nbase.arr.get(i)\r\n// or:\r\nbase.arr.getElementAt(i)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309288006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309290727",
    "html_url": "https://github.com/ethereum/solidity/issues/2421#issuecomment-309290727",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
    "id": 309290727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI5MDcyNw==",
    "user": {
      "login": "ethernian",
      "id": 4574735,
      "node_id": "MDQ6VXNlcjQ1NzQ3MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4574735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernian",
      "html_url": "https://github.com/ethernian",
      "followers_url": "https://api.github.com/users/ethernian/followers",
      "following_url": "https://api.github.com/users/ethernian/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernian/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernian/orgs",
      "repos_url": "https://api.github.com/users/ethernian/repos",
      "events_url": "https://api.github.com/users/ethernian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T17:23:01Z",
    "updated_at": "2017-06-18T17:23:01Z",
    "author_association": "NONE",
    "body": "@federicobond \r\nI think it is not like destructuring because we don't want to transfer the whole object through msg.data. There is no object to destruct at all; we want to request parts of it. \r\nIt should be quite tricky, to pass the field list from the left part of the assignment into the right part to build an accessor call. And what about if we have no assignment at all, but a method call or return?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309290727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309294824",
    "html_url": "https://github.com/ethereum/solidity/issues/2421#issuecomment-309294824",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
    "id": 309294824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTI5NDgyNA==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T18:37:39Z",
    "updated_at": "2017-06-18T18:37:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "You are right, what I had in mind would be tricky to implement and only work with assignment statements. I am still not sold on the syntax though, I'll give it some thought.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309294824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309309708",
    "html_url": "https://github.com/ethereum/solidity/issues/2421#issuecomment-309309708",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
    "id": 309309708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTMwOTcwOA==",
    "user": {
      "login": "ethernian",
      "id": 4574735,
      "node_id": "MDQ6VXNlcjQ1NzQ3MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4574735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernian",
      "html_url": "https://github.com/ethernian",
      "followers_url": "https://api.github.com/users/ethernian/followers",
      "following_url": "https://api.github.com/users/ethernian/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernian/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernian/orgs",
      "repos_url": "https://api.github.com/users/ethernian/repos",
      "events_url": "https://api.github.com/users/ethernian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T23:22:58Z",
    "updated_at": "2017-06-18T23:22:58Z",
    "author_association": "NONE",
    "body": "@federicobond \r\n\r\n> I am still not sold on the syntax though,\r\n\r\nYes, it is not perfect yet. \r\n\r\nMy problem with the syntax is that the expression in the brackets sometimes looks like compile time declaration of struct fields like `base.s[name,n]()` and sometimes it looks like runtime expression like `base.arr[i+1]()`. Although it should not be a problem because the type of the context is always defined, I am not quite happy with compile-time/runtime semantic mix inside of square brackets. \r\n\r\nBut nevertheless I am not happy with the syntax of fake methods like `base.arr.get(i)` too.\r\nI see here two problems:\r\n1. we use the same dot operator twice in different cases. Once to express reference from `base` to `arr` which is cheap, and then to express a message call to another contract with object serialization inside which more expensive and is subject to further restrictions. For example your fake method syntax implies you could use `base.arr` in expressions as an accessible object, but you can't.\r\n2. with fake methods we have completely different syntax to access array elements inside declaring contract and from outside. It is not consequent.\r\n\r\nThe syntax `base.s[name,n]()` defines a method call, configurable by selector. The selector gets executes **before** the `msg.data` serialization takes place. This is the main objective of this RFE.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/309309708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1427015961",
    "html_url": "https://github.com/ethereum/solidity/issues/2421#issuecomment-1427015961",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
    "id": 1427015961,
    "node_id": "IC_kwDOAm_5kc5VDokZ",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-02-12T12:04:54Z",
    "updated_at": "2023-02-12T12:04:54Z",
    "author_association": "NONE",
    "body": "This issue has been marked as stale due to inactivity for the last 90 days.\nIt will be automatically closed in 7 days.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1427015961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1436879751",
    "html_url": "https://github.com/ethereum/solidity/issues/2421#issuecomment-1436879751",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2421",
    "id": 1436879751,
    "node_id": "IC_kwDOAm_5kc5VpQuH",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-02-20T12:05:37Z",
    "updated_at": "2023-02-20T12:05:37Z",
    "author_association": "NONE",
    "body": "Hi everyone! This issue has been automatically closed due to inactivity.\nIf you think this issue is still relevant in the latest Solidity version and you have something to [contribute](https://docs.soliditylang.org/en/latest/contributing.html), feel free to reopen.\nHowever, unless the issue is a concrete proposal that can be implemented, we recommend starting a language discussion on the [forum](https://forum.soliditylang.org) instead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1436879751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
