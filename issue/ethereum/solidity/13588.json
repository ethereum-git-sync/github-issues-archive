{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13588",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13588/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13588/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13588/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13588",
  "id": 1390946034,
  "node_id": "I_kwDOAm_5kc5S6Cby",
  "number": 13588,
  "title": "Unexpected packed abi encoding in solidity abi.encode operation ",
  "user": {
    "login": "gitpusha",
    "id": 36712489,
    "node_id": "MDQ6VXNlcjM2NzEyNDg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gitpusha",
    "html_url": "https://github.com/gitpusha",
    "followers_url": "https://api.github.com/users/gitpusha/followers",
    "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
    "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
    "organizations_url": "https://api.github.com/users/gitpusha/orgs",
    "repos_url": "https://api.github.com/users/gitpusha/repos",
    "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gitpusha/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2022-09-29T14:10:57Z",
  "updated_at": "2022-09-30T09:12:08Z",
  "closed_at": "2022-09-30T09:12:00Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\nToday we stumbled upon a bug and digging deeper I was surprised to see that in one of our smart contracts an `abi.encode` resulted in what looks like an `abi.encodePacked` , which if true and not intended by the compiler is of course quite problematic.  \r\n\r\nMy suspicion is that as soon as multiple inputs are supplied to `abi.encode` it defaults to running `abi.encodePacked`, instead. \r\n\r\n## Environment\r\n\r\n- Compiler version: `0.8.17` (optimizer enabled)\r\n- Target EVM version (as per compiler settings): default\r\n- Framework/IDE (e.g. Truffle or Remix): Hardhat ( `\"hardhat\": \"2.11.2\",` )\r\n- EVM execution environment / backend / blockchain client: Hardhat EVM\r\n- Operating system: macOS \r\n\r\n## Steps to Reproduce\r\n\r\nI created solidity and typescript example code to reproduce the findings. \r\n\r\nStep 1: import files into your local hardhat environment \r\nStep2: build \r\nStep3: run the test with hardhat\r\n\r\nThe `ts` test code assumes that you use `hardhat` and `hardhat-deploy` and `typechain` locally, but you can easily reproduce on Remix as well with some modifications.\r\n\r\n`hardhat.config.ts` \r\n\r\n```ts\r\n solidity: {\r\n    compilers: [\r\n      {\r\n        version: \"0.8.17\",\r\n        settings: {\r\n          optimizer: { enabled: true },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n```\r\n  \r\n### Mock Contract for Reproduction\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nstruct Message {\r\n    address service;\r\n    bytes data;\r\n    uint256 salt;\r\n    uint256 deadline;\r\n}\r\n\r\ncontract AbiEncode {\r\n    bytes32 public constant EXEC_WITH_SIGS_TYPEHASH =\r\n        keccak256(\r\n            bytes(\r\n                // solhint-disable-next-line max-line-length\r\n                \"ExecWithSigs(address service,bytes data,uint256 salt,uint256 deadline)\"\r\n            )\r\n        );\r\n\r\n    function normalEncoding(Message calldata _msg)\r\n        external\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return abi.encode(_msg);\r\n    }\r\n\r\n    function unexpectedPackedEncoding(Message calldata _msg)\r\n        external\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            abi.encode(\r\n                EXEC_WITH_SIGS_TYPEHASH,\r\n                _msg.service,\r\n                keccak256(_msg.data),\r\n                _msg.salt,\r\n                _msg.deadline\r\n            );\r\n    }\r\n}\r\n\r\n```\r\n\r\n**_Use this deploy file with `hardhat-deploy` and run the test file:_** \r\n\r\n```ts\r\nimport { deployments, getNamedAccounts } from \"hardhat\";\r\nimport { HardhatRuntimeEnvironment } from \"hardhat/types\";\r\nimport { DeployFunction } from \"hardhat-deploy/types\";\r\n\r\nconst func: DeployFunction = async (hre: HardhatRuntimeEnvironment) => {\r\n  if (hre.network.name !== \"hardhat\") {\r\n    console.error(\"Only deploy AbiEncode locally for testing\");\r\n    process.exit(1);\r\n  }\r\n\r\n  const { deploy } = deployments;\r\n  const { deployer } = await getNamedAccounts();\r\n\r\n  await deploy(\"AbiEncode\", {\r\n    from: deployer,\r\n    log: hre.network.name != \"hardhat\" ? true : false,\r\n  });\r\n};\r\n\r\nexport default func;\r\n\r\nfunc.skip = async (hre: HardhatRuntimeEnvironment) => {\r\n  return hre.network.name !== \"hardhat\";\r\n};\r\nfunc.tags = [\"AbiEncode\"];\r\n```\r\n\r\n### Test file: \r\n\r\n```ts\r\nimport { expect } from \"chai\";\r\nimport hre, { ethers } from \"hardhat\";\r\nimport { AbiEncode } from \"../typechain\";\r\nimport { MessageStruct } from \"../typechain/contracts/AbiEncode\";\r\n\r\nconst service = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\nconst data =\r\n  \"0x18cbafe50000000000000000000000000000000000000000000000878678326eac900000000000000000000000000000000000000000000000000000005ed6013cc864d700000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000143021f7aa26f577d02d02c037e79631406450e60000000000000000000000000000000000000000000000000000000061025b1700000000000000000000000000000000000000000000000000000000000000020000000000000000000000006369c3dadfc00054a42ba8b2c09c48131dd4aa38000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\";\r\nconst salt = 420;\r\nconst deadline = 42069;\r\n\r\nfunction typedAbiEncode(_typehash: string, _msg: MessageStruct): string {\r\n  return new ethers.utils.AbiCoder().encode(\r\n    [\"bytes\", \"address\", \"bytes32\", \"uint256\", \"uint256\"],\r\n    [\r\n      _typehash,\r\n      _msg.service,\r\n      ethers.utils.keccak256(_msg.data as string),\r\n      _msg.salt,\r\n      _msg.deadline,\r\n    ]\r\n  );\r\n}\r\n\r\ndescribe(\"AbiEncode Tests\", function () {\r\n  beforeEach(async function () {\r\n    await hre.deployments.fixture();\r\n  });\r\n\r\n  it(\"normalEncoding\", async function () {\r\n    const msg: MessageStruct = {\r\n      service,\r\n      data,\r\n      salt,\r\n      deadline,\r\n    };\r\n\r\n    const abiEncode = (await ethers.getContract(\"AbiEncode\")) as AbiEncode;\r\n\r\n    const contractEncoding = await abiEncode.normalEncoding(msg);\r\n    console.log({ contractEncoding });\r\n\r\n    let ethersEncoding = abiEncode.interface.encodeFunctionData(\r\n      \"normalEncoding\",\r\n      [msg]\r\n    );\r\n    // remove function selector\r\n    ethersEncoding = `0x${ethersEncoding.substring(2 + 2 * 4)}`;\r\n    console.log({ ethersEncoding });\r\n\r\n    expect(contractEncoding).to.be.equal(ethersEncoding);\r\n  });\r\n\r\n  it(\"unexpectedPackedEncoding\", async function () {\r\n    const msg: MessageStruct = {\r\n      service,\r\n      data,\r\n      salt,\r\n      deadline,\r\n    };\r\n\r\n    const abiEncode = (await ethers.getContract(\"AbiEncode\")) as AbiEncode;\r\n\r\n    const contractEncoding = await abiEncode.unexpectedPackedEncoding(msg);\r\n    console.log({ contractEncoding });\r\n    const ethersEncoding = typedAbiEncode(\r\n      await abiEncode.EXEC_WITH_SIGS_TYPEHASH(),\r\n      msg\r\n    );\r\n    console.log({ ethersEncoding });\r\n\r\n    expect(contractEncoding).to.be.equal(ethersEncoding);\r\n  });\r\n});\r\n\r\n```\r\n\r\n\r\n\r\n### Test Results\r\n\r\n**normalEncoding** \r\n\r\n```ts\r\n{\r\n  contractEncoding:  '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000a455000000000000000000000000000000000000000000000000000000000000010418cbafe50000000000000000000000000000000000000000000000878678326eac900000000000000000000000000000000000000000000000000000005ed6013cc864d700000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000143021f7aa26f577d02d02c037e79631406450e60000000000000000000000000000000000000000000000000000000061025b1700000000000000000000000000000000000000000000000000000000000000020000000000000000000000006369c3dadfc00054a42ba8b2c09c48131dd4aa38000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000'\r\n} âœ… \r\n{\r\n  ethersEncoding: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000a455000000000000000000000000000000000000000000000000000000000000010418cbafe50000000000000000000000000000000000000000000000878678326eac900000000000000000000000000000000000000000000000000000005ed6013cc864d700000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000143021f7aa26f577d02d02c037e79631406450e60000000000000000000000000000000000000000000000000000000061025b1700000000000000000000000000000000000000000000000000000000000000020000000000000000000000006369c3dadfc00054a42ba8b2c09c48131dd4aa38000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000'\r\n} âœ… \r\n```\r\n\r\n**unexpectedPackedEncoding**\r\n\r\n```ts\r\n{\r\n  contractEncoding: '0xa60d3d5ef73882f5e7edb151ae707dcaf09cdc2a400201dafebbc6e5130013870000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488df4261ef29426d50260f88ff5f8cbdb55ecebaed02d09ac2919449660db896f1400000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000a455'\r\n} ðŸ”´ (looks like encoding was non-standard packed)\r\n{\r\n  ethersEncoding: '0x00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488df4261ef29426d50260f88ff5f8cbdb55ecebaed02d09ac2919449660db896f1400000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000a4550000000000000000000000000000000000000000000000000000000000000020a60d3d5ef73882f5e7edb151ae707dcaf09cdc2a400201dafebbc6e513001387'\r\n} âœ… \r\n```",
  "closed_by": {
    "login": "gitpusha",
    "id": 36712489,
    "node_id": "MDQ6VXNlcjM2NzEyNDg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gitpusha",
    "html_url": "https://github.com/gitpusha",
    "followers_url": "https://api.github.com/users/gitpusha/followers",
    "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
    "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
    "organizations_url": "https://api.github.com/users/gitpusha/orgs",
    "repos_url": "https://api.github.com/users/gitpusha/repos",
    "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gitpusha/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13588/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13588/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1262359449",
    "html_url": "https://github.com/ethereum/solidity/issues/13588#issuecomment-1262359449",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13588",
    "id": 1262359449,
    "node_id": "IC_kwDOAm_5kc5LPhOZ",
    "user": {
      "login": "sashaaldrick",
      "id": 33594434,
      "node_id": "MDQ6VXNlcjMzNTk0NDM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/33594434?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sashaaldrick",
      "html_url": "https://github.com/sashaaldrick",
      "followers_url": "https://api.github.com/users/sashaaldrick/followers",
      "following_url": "https://api.github.com/users/sashaaldrick/following{/other_user}",
      "gists_url": "https://api.github.com/users/sashaaldrick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sashaaldrick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sashaaldrick/subscriptions",
      "organizations_url": "https://api.github.com/users/sashaaldrick/orgs",
      "repos_url": "https://api.github.com/users/sashaaldrick/repos",
      "events_url": "https://api.github.com/users/sashaaldrick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sashaaldrick/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-29T14:23:33Z",
    "updated_at": "2022-09-29T14:23:33Z",
    "author_association": "NONE",
    "body": "I worked with @gitpusha as well on this, so I have further code snippets/environment information to share if needed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1262359449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1263318291",
    "html_url": "https://github.com/ethereum/solidity/issues/13588#issuecomment-1263318291",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13588",
    "id": 1263318291,
    "node_id": "IC_kwDOAm_5kc5LTLUT",
    "user": {
      "login": "gitpusha",
      "id": 36712489,
      "node_id": "MDQ6VXNlcjM2NzEyNDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitpusha",
      "html_url": "https://github.com/gitpusha",
      "followers_url": "https://api.github.com/users/gitpusha/followers",
      "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
      "organizations_url": "https://api.github.com/users/gitpusha/orgs",
      "repos_url": "https://api.github.com/users/gitpusha/repos",
      "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitpusha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-30T09:12:00Z",
    "updated_at": "2022-09-30T09:12:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing this as I found a mistake in the `ethers.js` encoding we used. \r\n\r\nThis should have been\r\n\r\n```ts\r\nfunction typedAbiEncode(_typehash: string, _msg: MessageStruct): string {\r\n  return new ethers.utils.AbiCoder().encode(\r\n    [\"bytes32\", \"address\", \"bytes32\", \"uint256\", \"uint256\"],\r\n    [\r\n      _typehash,\r\n      _msg.service,\r\n      ethers.utils.keccak256(_msg.data as string),\r\n      _msg.salt,\r\n      _msg.deadline,\r\n    ]\r\n  );\r\n}\r\n```\r\n\r\nThe `_typehash` is `bytes32` not `bytes` \r\n\r\nFixing this also makes the test go green âœ… ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1263318291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
