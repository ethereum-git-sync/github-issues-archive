{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9622/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9622/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9622/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9622",
  "id": 678579661,
  "node_id": "MDU6SXNzdWU2Nzg1Nzk2NjE=",
  "number": 9622,
  "title": "Recursion stack overflow - Out of stack PUSH1 1/1024",
  "user": {
    "login": "loredanacirstea",
    "id": 4785356,
    "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/loredanacirstea",
    "html_url": "https://github.com/loredanacirstea",
    "followers_url": "https://api.github.com/users/loredanacirstea/followers",
    "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
    "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
    "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
    "repos_url": "https://api.github.com/users/loredanacirstea/repos",
    "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
    "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2020-08-13T16:39:20Z",
  "updated_at": "2020-08-14T12:46:01Z",
  "closed_at": "2020-08-14T12:46:01Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nThe recursion limit is not an out of gas exception. Instead, I get a stack exception.\r\n\r\nThe error on Ganache is: \r\n> RuntimeError: VM Exception while processing transaction: stack overflow\r\n\r\nThe error in Remix, when I execute the call on Kovan is: \r\n> The execution failed due to an exception. Out of stack PUSH1 1/1024\r\n\r\nCan be seen here: https://kovan.etherscan.io/tx/0x09b3f100f3786290c8383847e002f4d32e72984d1cb54bab9095115d616d2c8f\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.7.0, 0.6.x \r\n- Target EVM version (as per compiler settings): default\r\n- Framework/IDE (e.g. Truffle or Remix): Remix & custom setup\r\n- EVM execution environment / backend / blockchain client: Remix JS VM (crashes), Kovan(through Metamask), Ganache\r\n- Operating system: web, macos\r\n\r\n## Steps to Reproduce\r\n\r\nDeploy the following and call. Calldata doesn't matter. It just runs `eval` 203 times. And you get the above error.\r\nIf you change to 202, you get the correct computation result (`203`).\r\n\r\nThe issue may be related to input/output arguments for the `eval` function. When you reduce the number of input/outputs, the steps required to obtain the overflow increase by ~100 / argument.\r\n\r\n```solidity\r\nobject \"RecursionStackOverflow\" {\r\n    code {\r\n        datacopy(0, dataoffset(\"Runtime\"), datasize(\"Runtime\"))\r\n        return(0, datasize(\"Runtime\"))\r\n    }\r\n    object \"Runtime\" {\r\n    code {\r\n\r\n        let end, response := eval(0, 0)\r\n        \r\n        function eval(data_ptr, env_ptr) -> end_ptr, result_ptr {\r\n            let stepcount := mload(0x20)\r\n            if gt(stepcount, 203) { mstore(0, stepcount) return(0, 32) }\r\n            mstore(0x20, add(stepcount, 1))\r\n            \r\n            let rootid := 3\r\n\r\n            switch rootid\r\n            \r\n            // number\r\n            case 1 {\r\n\r\n            }\r\n            \r\n            // function\r\n            case 3 {\r\n\r\n            }\r\n            \r\n            default {\r\n\r\n            }\r\n            let ee, rrr := eval(data_ptr, env_ptr)\r\n        }\r\n    \r\n    }}\r\n}\r\n\r\n```\r\n",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9622/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9622/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673584886",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-673584886",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 673584886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzU4NDg4Ng==",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T16:43:02Z",
    "updated_at": "2020-08-13T16:43:02Z",
    "author_association": "NONE",
    "body": "Is it an issue that can be fixed?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673584886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673585452",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-673585452",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 673585452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzU4NTQ1Mg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T16:44:09Z",
    "updated_at": "2020-08-13T16:44:09Z",
    "author_association": "MEMBER",
    "body": "The EVM has a value stack limit and you keep growing the stack with recursive calls. I suggest to rework your code to not use recursive calls and then the compiler has a chance to reduce stack usage.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673585452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673598775",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-673598775",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 673598775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzU5ODc3NQ==",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T17:10:11Z",
    "updated_at": "2020-08-13T17:10:11Z",
    "author_association": "NONE",
    "body": "Unfortunately, removing recursion is not an option.\r\nSo, the only solution would be changing the compiler or me working directly in assembly & handling stack & memory management.\r\nThank you for the fast answer.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673598775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673605201",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-673605201",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 673605201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzYwNTIwMQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T17:23:10Z",
    "updated_at": "2020-08-13T17:23:10Z",
    "author_association": "MEMBER",
    "body": "How would you improve the compiler to use less stack during recursion?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673605201/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673615091",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-673615091",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 673615091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzYxNTA5MQ==",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T17:42:54Z",
    "updated_at": "2020-08-13T17:42:54Z",
    "author_association": "NONE",
    "body": "By saving in memory when the stack is not enough and keeping on the stack one single pointer to the pointers of frames saved in memory.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673615091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673620245",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-673620245",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 673620245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzYyMDI0NQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T17:48:38Z",
    "updated_at": "2020-08-13T17:48:38Z",
    "author_association": "MEMBER",
    "body": "General stack to memory elevation is being considered and prototyped, but that will be extremely expensive in your case if you need to keep a recursive function.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673620245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673623360",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-673623360",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 673623360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzYyMzM2MA==",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T17:54:44Z",
    "updated_at": "2020-08-13T17:54:44Z",
    "author_association": "NONE",
    "body": "That is very good news. Expensive is fine.\r\nHow can I help? Solving this issue is urgent/important for me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673623360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673695848",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-673695848",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 673695848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzY5NTg0OA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T20:31:59Z",
    "updated_at": "2020-08-13T20:37:43Z",
    "author_association": "MEMBER",
    "body": "Short answer: I think our current work on memory variables won't apply here and there's not much the compiler can do to help here in the immediate future, so you will have to reduce the stack strain manually in assembly. Once we have a new Yul dialect with memory objects that might change, but there's no ETA for that, unfortunately (but hopefully we will get there in the next months, feel free to chime in at https://github.com/ethereum/solidity/issues/5107 - any input on that is highly appreciated).\r\n\r\nLong answer:\r\n\r\nWell, we are prototyping moving stack variables to memory, if needed, as an optimization step after Solidity to Yul code generation (the latest prototype of that is https://github.com/ethereum/solidity/pull/9162) - I guess that's what you were referring to @axic? But that's different from the situation here. First of all the idea for that is to only do it when we can be sure that solidity's memory management (with a free memory pointer at 0x40 that is initialized using a special builtin) is used and not in general (if it works out we could consider exposing it to general Yul, though, documenting that eligible Yul code has to interact with memory in a specific way). But more importantly, we specifically excluded recursive functions for the first prototype, since they complicate this a lot (so far we're working with static memory frames to avoid the need of actual memory management and frame pointers). And generally with that prototype we're mainly trying to solve errors due to too many local variables in solidity which will become unreachable due to the EVM only providing access to 16 stack slots, which is a problem already at compile time, not errors due to the limit of 1024 stack slots in the EVM at runtime due to the call stack. So none of this will help with this problem directly.\r\n\r\n> By saving in memory when the stack is not enough and keeping on the stack one single pointer to the pointers of frames saved in memory.\r\n\r\nYes, this is the way to go, I think. More optimally, the frame pointer itself would even be stored at some fixed memory location instead (the pointer to the previous frame being saved as part of the current frame, I sketched an example of that below). Then you only need one stack slot for the return ``JUMPDEST`` that's implicit in the recursive call. If the call was tail-recursive, even that ``JUMPDEST`` could be avoided allowing infinite recursion (up to the gas limit), but I think we're lacking the required optimization for that so far. (Also it should be possible to rewrite any tail-recursive function as loop and since you said that that's not an option, I guess that won't work in your case anyways).\r\n\r\nBut I think there's (1) no general way to decide whether the compiler *should* save things to memory instead of stack (in your example 200 iterations *do* work and the compiler cannot really know if that's enough or you need more than that, at least in generall, when this may depend on calldata) and (2) even if the compiler wanted to do that, there would be no natural place *in* memory for storing variables, unless we force some form of specific memory management. As mentioned above, the latter would go along the lines of the planned \"Yul with memory objects\" dialect - in that dialect we can consider using either some heuristics or some special syntax to force a function to use memory variables instead of stack variables. But unfortunately, there's no fixed time frame for that to be finished (but as said above, feel free to chime in on that in https://github.com/ethereum/solidity/issues/5107, we're still trying to finalize the concept and some input from heavy Yul users would be most welcome).\r\n\r\nSo for the time being I think you have to manage this manually. I'm imagining something like this:\r\n\r\nI'm assuming ``MEMORY_FRAME_POINTER`` to be any fixed otherwise unused memory location, ``FREE_MEMORY`` a memory location beyond any other memory location that is used by the rest of the code and due to the function in question having two arguments and two return values ``MEMORY_FRAME_SIZE`` as 0xA0 (4*0x20 plus an additional 0x20 for saving the old frame pointer).\r\n\r\n```\r\nobject \"RecursionStackOverflow\" {\r\n    code {\r\n        datacopy(0, dataoffset(\"Runtime\"), datasize(\"Runtime\"))\r\n        return(0, datasize(\"Runtime\"))\r\n    }\r\n    object \"Runtime\" {\r\n    code {\r\n\r\n        let currentMemoryFrame := FREE_MEMORY // or whatever memory offset is beyond what the rest of the code uses\r\n        // in more complex cases this will have to use some full-blown memory management mechanism\r\n        // set call arguments:\r\n        mstore(add(currentMemoryFrame, 0x20), 0) // first argument\r\n        mstore(add(currentMemoryFrame, 0x40), 0) // second argument\r\n        mstore(MEMORY_FRAME_POINTER, currentMemoryFrame)\r\n\r\n        eval()\r\n\r\n        // fetch return values\r\n        let end := mload(add(currentMemoryFrame,  0x60))\r\n        let response := mload(add(currentMemoryFrame,  0x80))\r\n        \r\n        function eval() {\r\n          {\r\n            // fetch current memory frame\r\n            let currentMemoryFrame := mload(MEMORY_FRAME_POINTER)\r\n            // fetch arguments\r\n            let data_ptr := mload(add(currentMemoryFrame, 0x20)\r\n            let env_ptr := mload(add(currentMemoryFrame, 0x40))\r\n\r\n            let stepcount := mload(0x20)\r\n            if gt(stepcount, 203) { mstore(0, stepcount) return(0, 32) }\r\n            mstore(0x20, add(stepcount, 1))\r\n            \r\n            let rootid := 3\r\n\r\n            switch rootid\r\n            \r\n            // number\r\n            case 1 {\r\n\r\n            }\r\n            \r\n            // function\r\n            case 3 {\r\n\r\n            }\r\n            \r\n            default {\r\n\r\n            }\r\n\r\n            // prepare memory frame for the next recursive call\r\n            let nextMemoryFrame := add(currentMemoryFrame, MEMORY_FRAME_SIZE)\r\n            // save the current memory frame pointer in the next memory frame\r\n            mstore(nextMemoryFrame, currentMemoryFrame)\r\n            // set arguments for the next recursive call\r\n            mstore(add(nextMemoryFrame, 0x20), data_ptr)\r\n            mstore(add(nextMemoryFrame, 0x40), env_ptr)\r\n            // update memory frame for recursive call\r\n            mstore(MEMORY_FRAME_POINTER, nextMemoryFrame)\r\n        } // The entire stack should be popped at the end of the block. Note that the Yul optimizer must be enabled for that to work.\r\n        // it's important that there is not a single local variable in scope here, but everything is stored in memory instead\r\n        eval()\r\n        {\r\n            // fetch memory frame of the recursive call\r\n            let recursiveCallMemoryFramePointer := mload(MEMORY_FRAME_POINTER)\r\n            // fetch our own memory frame\r\n            let currentMemoryFramePointer := mload(recursiveCallMemoryFramePointer)\r\n            // fetch the return values of the recursive call\r\n            let ee := mload(add(recursiveCallMemoryFramePointer, 0x60)\r\n            let rr := mload(add(recursiveCallMemoryFramePointer, 0x80)\r\n            // restore to original memory frame pointer\r\n            mstore(MEMORY_FRAME_POINTER, currentMemoryFramePointer)\r\n\r\n            let end_ptr, result_ptr\r\n            /// ... further computation calculating end_ptr and result_ptr\r\n            \r\n            // store our return values\r\n            mstore(add(currentMemoryFramePointer, 0x60), end_ptr)\r\n            mstore(add(currentMemoryFramePointer, 0x80), result_ptr)\r\n        }\r\n        }\r\n    \r\n    }}\r\n}\r\n```\r\n\r\nThat's the best I can come up with - I'd expect a construct like that to support roughly 1024 iterations (due to the implicit ``JUMPDEST``). Depending on the exact function this can either be optimized a bit (e.g. sharing memory slots for arguments and return values may be an option) or it needs even more complex memory management (in case you have multiple recursive functions calling each other or you may need unbounded memory within the function), as for example linked-list memory management as sketched in https://github.com/ethereum/solidity/issues/5766#issuecomment-452636221 . Let me know if you have a more optimal approach, I'd be rather curious and might use it for the continuation of https://github.com/ethereum/solidity/pull/9162 after we will finally have https://github.com/ethereum/solidity/issues/5107 !",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673695848/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673755977",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-673755977",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 673755977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3Mzc1NTk3Nw==",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T23:18:47Z",
    "updated_at": "2020-08-13T23:18:47Z",
    "author_association": "NONE",
    "body": "Thank you for the very detailed & useful answer.\r\nI was trying your code example, but I still need to make some changes for it to work and it is getting late, so I will continue in the morning and come back with results.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/673755977/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674019508",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-674019508",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 674019508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDAxOTUwOA==",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T11:00:14Z",
    "updated_at": "2020-08-14T11:00:14Z",
    "author_association": "NONE",
    "body": "It seems the issue is in the optimizer. The stack is not cleared after the unnamed blocks finish - at least this is what the Remix debugger shows me.\r\nE.g. when entering the `eval()` inside the main `eval()` function, the previous stack is not cleared. I am talking about:\r\n```\r\n         mstore(MEMORY_FRAME_POINTER, nextMemoryFrame)\r\n        } // The entire stack should be popped at the end of the block. Note that the Yul optimizer must be enabled for that to work.\r\n        // it's important that there is not a single local variable in scope here, but everything is stored in memory instead\r\n        eval()\r\n        {\r\n```\r\n\r\nI tried: (code & results: https://gist.github.com/loredanacirstea/92d2dd1127fb95ea05d4cec671d02a91)\r\n- 0.7.0 solc.js in Remix, optimizations enabled\r\n- 0.7.0 solc in my local setup with: \r\n     - `solc --strict-assembly --optimize --optimize-runs=200 contracts/recursive_test.sol` - with or without blocks, the resulting bytecode was the same\r\n     - `solc --optimize --optimize-runs=200 -o build --bin --ast-json --asm contracts/recursive_test_wrap.sol` - with Yul code wrapped in a Solidity contract, in the `fallback` function.\r\n- deploying the `solc` produced bytecode directly\r\n- assembling the asm output separately (made a plugin for Remix for this https://github.com/loredanacirstea/mevm) & deploying it.\r\n- Ropsten, Ganache, JS VM(Remix)\r\n\r\nResults were the same: 168 steps worked, 169 steps crashed with stack overflow.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674019508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674031382",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-674031382",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 674031382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDAzMTM4Mg==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T11:33:07Z",
    "updated_at": "2020-08-14T11:33:07Z",
    "author_association": "MEMBER",
    "body": "Yes, you're right, the optimizer actually messes this up, hm...\r\n\r\nThe issue is that the optimizer doesn't know what we're trying to do and after optimization we end up with:\r\n```\r\n           function eval()\r\n            {\r\n                let _1 := 0x20\r\n                let _currentMemoryFrame := mload(_1)\r\n                let data_ptr := mload(add(_currentMemoryFrame, _1))\r\n                let env_ptr := mload(add(_currentMemoryFrame, 0x40))\r\n                let _2 := 0\r\n                let stepcount := mload(_2)\r\n                if gt(stepcount, 169)\r\n                {\r\n                    mstore(_2, stepcount)\r\n                    return(_2, _1)\r\n                }\r\n                mstore(_2, add(stepcount, 1))\r\n                let nextMemoryFrame := add(_currentMemoryFrame, 0xa0)\r\n                mstore(nextMemoryFrame, _currentMemoryFrame)\r\n                mstore(add(_currentMemoryFrame, 192), data_ptr)\r\n                mstore(add(_currentMemoryFrame, 224), env_ptr)\r\n                mstore(_1, nextMemoryFrame)\r\n                eval()\r\n                let currentMemoryFramePointer := mload(mload(_1))\r\n                mstore(_1, currentMemoryFramePointer)\r\n                mstore(add(currentMemoryFramePointer, 0x60), _2)\r\n                mstore(add(currentMemoryFramePointer, 0x80), _2)\r\n            }\r\n```\r\nSo the optimizer destroyed the property that no stack variables from before the recursive ``eval()`` call are still used afterwards, since it's trying to be clever and reuses ``_1`` and ``_2``...\r\n\r\nAs a quick solution, in case you don't rely on the optimizer otherwise, you could disable it, except for the stack optimization, that would be ``solc --strict-assembly --optimize --yul-optimizations \"\"`` (popping unused variables from stack is part of the transformation from yul to evm bytecode that is enabled if optimization is enabled in general, but ``--yul-optimizations \"\"`` will disable all other optimiser steps). I think/hope that should in fact work.\r\n\r\nBut it's of course annoying not being able to actually use the optimiser, but I'm not sure there's a way around that at this point...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674031382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674050483",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-674050483",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 674050483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDA1MDQ4Mw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T12:28:48Z",
    "updated_at": "2020-08-14T12:28:48Z",
    "author_association": "MEMBER",
    "body": "Adjusting the optimiser sequence slightly to\r\n``solc --strict-assembly --optimize --yul-optimizations \"dhfoDgvulfnTUtnIf[xarrscLMcCTUtTOntnfDIulLculVculjjeulxarulrulxarrcLgvifCTUcarrLsTOtfDncarrIulcT]jmuljuljulVcTOculjmul\"``\r\nshould also preserve the needed property, at least for the code here https://gist.github.com/loredanacirstea/92d2dd1127fb95ea05d4cec671d02a91 - (I added ``T``, the \"LiteralMaterializer\" to the end of the inner ``[]`` sequence, otherwise it's the default sequence) - but that's fragile and may or may not break with any change to the code...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674050483/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674053352",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-674053352",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 674053352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDA1MzM1Mg==",
    "user": {
      "login": "loredanacirstea",
      "id": 4785356,
      "node_id": "MDQ6VXNlcjQ3ODUzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4785356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loredanacirstea",
      "html_url": "https://github.com/loredanacirstea",
      "followers_url": "https://api.github.com/users/loredanacirstea/followers",
      "following_url": "https://api.github.com/users/loredanacirstea/following{/other_user}",
      "gists_url": "https://api.github.com/users/loredanacirstea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loredanacirstea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loredanacirstea/subscriptions",
      "organizations_url": "https://api.github.com/users/loredanacirstea/orgs",
      "repos_url": "https://api.github.com/users/loredanacirstea/repos",
      "events_url": "https://api.github.com/users/loredanacirstea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loredanacirstea/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T12:36:39Z",
    "updated_at": "2020-08-14T12:36:39Z",
    "author_association": "NONE",
    "body": "It worked: 1015 steps with `solc --strict-assembly --optimize --yul-optimizations \"\"`\r\nI will look into yul optimizer options, but I already consider this issue solved - from my part, it can be closed.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674053352/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674056828",
    "html_url": "https://github.com/ethereum/solidity/issues/9622#issuecomment-674056828",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9622",
    "id": 674056828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDA1NjgyOA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T12:46:01Z",
    "updated_at": "2020-08-14T12:46:01Z",
    "author_association": "MEMBER",
    "body": "Nice! And it was quite an interesting issue - I hope in the future we'll have more progress on https://github.com/ethereum/solidity/issues/5107 and https://github.com/ethereum/solidity/pull/9162 and will at some point arrive at a stage, in which the compiler will be able to handle cases like this on its own.\r\nI'm still closing this issue then, though, for now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/674056828/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
