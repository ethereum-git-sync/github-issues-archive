{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9287",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9287/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9287/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9287/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9287",
  "id": 649716924,
  "node_id": "MDU6SXNzdWU2NDk3MTY5MjQ=",
  "number": 9287,
  "title": "[SMTChecker] Detect when known code can be trusted",
  "user": {
    "login": "leonardoalt",
    "id": 504195,
    "node_id": "MDQ6VXNlcjUwNDE5NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/leonardoalt",
    "html_url": "https://github.com/leonardoalt",
    "followers_url": "https://api.github.com/users/leonardoalt/followers",
    "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
    "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
    "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
    "repos_url": "https://api.github.com/users/leonardoalt/repos",
    "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2020-07-02T07:51:55Z",
  "updated_at": "2022-08-17T13:48:58Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "In the example below, the assertion is false because `D`'s code cannot be trusted while analyzing `C`. Since `C.d`'s address is a runtime value, it could point to an address that has the same interface as `D` but implements `f` differently, returning a value different than 0.\r\nThe only case where the SMTChecker can trust that `d` points to a contract that has the code from `D` is if `C` deploys it. We need to identify that, and only then can use `D.f`'s code for the analysis.\r\n\r\n```\r\ncontract D {\r\n    function f() external pure returns (uint) {\r\n        return 0;\r\n    }\r\n}\r\n\r\ncontract C {\r\n    D d;\r\n    constructor(D _d) public {\r\n        d = _d;\r\n    }\r\n    function f() public {\r\n        uint x = d.f();\r\n        assert(x == 0);\r\n    }\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9287/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9287/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/652847651",
    "html_url": "https://github.com/ethereum/solidity/issues/9287#issuecomment-652847651",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9287",
    "id": 652847651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mjg0NzY1MQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-02T07:52:14Z",
    "updated_at": "2020-07-02T07:52:14Z",
    "author_association": "MEMBER",
    "body": "@ekpyron wrote:\r\n\"I wonder what's the best way to have CHC track if we know that the address in a state variable like C c; is of a contract type C for which we know the code (i.e. CHC sees where it is deployed)...\r\n\r\nMaybe there's just a boolean flag for C c; that means \"contains valid C\" and that is initialized to false and set to true on any c = new C()? And then calling c.f() will take the undefined path, if it's false and assume the code of C.f being called, if it's true?\r\n\r\nBut yeah - maybe we can really just assume that everything named C is actually a C, I'm not entirely sure... it would feel weird to me in any case.\"",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/652847651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/699473687",
    "html_url": "https://github.com/ethereum/solidity/issues/9287#issuecomment-699473687",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9287",
    "id": 699473687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTQ3MzY4Nw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-26T10:04:48Z",
    "updated_at": "2020-09-26T10:04:48Z",
    "author_association": "MEMBER",
    "body": "There is a similar case when an external address is cast to a contract/interface type, like `ERC20 token = ERC20(0x2...)`.\r\n\r\nI think the nicest would be as @ekpyron says, any contract assignment is untrusted (and should report a warning) unless it is a `new` in the same contract,",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/699473687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/699473904",
    "html_url": "https://github.com/ethereum/solidity/issues/9287#issuecomment-699473904",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9287",
    "id": 699473904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTQ3MzkwNA==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-26T10:06:58Z",
    "updated_at": "2020-09-26T10:06:58Z",
    "author_association": "MEMBER",
    "body": "I agree.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/699473904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
