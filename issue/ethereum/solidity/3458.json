{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3458",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3458/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3458/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3458/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3458",
  "id": 294216749,
  "node_id": "MDU6SXNzdWUyOTQyMTY3NDk=",
  "number": 3458,
  "title": "Implement interface: allow compatible visibility",
  "user": {
    "login": "fulldecent",
    "id": 382183,
    "node_id": "MDQ6VXNlcjM4MjE4Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fulldecent",
    "html_url": "https://github.com/fulldecent",
    "followers_url": "https://api.github.com/users/fulldecent/followers",
    "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
    "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
    "organizations_url": "https://api.github.com/users/fulldecent/orgs",
    "repos_url": "https://api.github.com/users/fulldecent/repos",
    "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fulldecent/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 838064207,
      "node_id": "MDU6TGFiZWw4MzgwNjQyMDc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/annoys%20users%20:cry:",
      "name": "annoys users :cry:",
      "color": "ea2cab",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2018-02-04T18:03:52Z",
  "updated_at": "2018-03-27T13:48:00Z",
  "closed_at": "2018-03-27T13:48:00Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# Discussion\r\n\r\nCurrently, `interface` is meant to track ABI (again, I hate this word choice). Here is a contract that demonstrates `public` and `external` functions do have identical ABI:\r\n\r\n```solidity\r\n\r\ncontract MathABITest {\r\n    function a() external pure {\r\n    }\r\n    function b() public pure {\r\n    }\r\n}\r\n```\r\n\r\nAnd the ABI calculated by Solidity is:\r\n\r\n```json\r\n[\r\n\t{\r\n\t\t\"constant\": true,\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"b\",\r\n\t\t\"outputs\": [],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"pure\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"constant\": true,\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"a\",\r\n\t\t\"outputs\": [],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"pure\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n]\r\n```\r\n\r\nTherefore, a contract that uses an `public` or `external` function should be compatible with an interface that requires an `external` function.\r\n\r\n# Test case\r\n\r\n```\r\npragma solidity ^0.4.19;\r\n\r\ninterface Math {\r\n    function calculateMostCommonNumberInSolidityDocumentation() external returns (int);\r\n}\r\n\r\ncontract MathImplementation is Math {\r\n    function calculateMostCommonNumberInSolidityDocumentation() public returns (int) {\r\n        return 69;\r\n    }\r\n}\r\n```\r\n\r\nThis should produce no error. But currently the error is:\r\n\r\n> TypeError: Overriding function visibility differs.\r\n\r\n# References\r\n\r\nRelated issues:\r\n\r\n* https://github.com/ethereum/solidity/issues/3442\r\n* https://github.com/ethereum/solidity/issues/2330\r\n* https://github.com/ethereum/EIPs/pull/841 -- currently blocks on several solidity issues",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3458/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3458/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367173417",
    "html_url": "https://github.com/ethereum/solidity/issues/3458#issuecomment-367173417",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3458",
    "id": 367173417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzE3MzQxNw==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T00:42:45Z",
    "updated_at": "2018-02-21T01:44:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry I posted here, but it should have been #3412.\r\n\r\n<details>\r\n<summary>OLD COMMENT</summary>\r\nAlso can we please evaluate if this test case should pass or fail:\r\n\r\n# Test case 1\r\n\r\n```solidity\r\npragma solidity ^0.4.20;\r\n\r\ninterface Math {\r\n    function calculateMostCommonNumberInSolidityDocumentation() external payable returns (int);\r\n}\r\n\r\ncontract MathImplementation is Math {\r\n    function calculateMostCommonNumberInSolidityDocumentation() external returns (int) {\r\n        return 69;\r\n    }\r\n}\r\n```\r\n\r\n# Test case 2\r\n\r\n```solidity\r\npragma solidity ^0.4.20;\r\n\r\ninterface Math {\r\n    function calculateMostCommonNumberInSolidityDocumentation() external returns (int);\r\n}\r\n\r\ncontract MathImplementation is Math {\r\n    function calculateMostCommonNumberInSolidityDocumentation() external payable returns (int) {\r\n        return 69;\r\n    }\r\n}\r\n```\r\n\r\n# Discussion\r\n\r\nIn the discussion of the deed/NFT/DAR standard https://github.com/ethereum/EIPs/pull/841 we have specified which functions are payable and which are not. The 0x team argues that it is not in scope for a standard (an interface) to specify whether functions are payable.\r\n\r\nI think this discussion has wider applicability in the Solidity ecosystem so I have brought it here.\r\n</details>",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367173417/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367177446",
    "html_url": "https://github.com/ethereum/solidity/issues/3458#issuecomment-367177446",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3458",
    "id": 367177446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzE3NzQ0Ng==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T01:02:39Z",
    "updated_at": "2018-02-21T01:09:08Z",
    "author_association": "MEMBER",
    "body": "I think the current specific rule in the code is that a contract implementing an interface may not modify  the state mutability level of a function.\r\n\r\nState mutability is defined as ([the only summary](http://solidity.readthedocs.io/en/develop/abi-spec.html?highlight=payable#json) - there is also another suggestion to [move selfdestruct into another state mutability level](https://github.com/ethereum/solidity/issues/3221)):\r\n\r\n> stateMutability: a string with one of the following values:\r\n> - pure (specified to not read blockchain state),\r\n> - view (specified to not modify the blockchain state),\r\n> - nonpayable (cannot accept value transfers) and\r\n> - payable (can accept value transfers).\r\n\r\nAbove the state mutability level is increasing from pure (nothing) to payable (everything).\r\n\r\nWhat are the reasons proposed for disregarding the payable keyword for interfaces?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367177446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/371155926",
    "html_url": "https://github.com/ethereum/solidity/issues/3458#issuecomment-371155926",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3458",
    "id": 371155926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTE1NTkyNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T14:30:58Z",
    "updated_at": "2018-03-07T14:30:58Z",
    "author_association": "MEMBER",
    "body": "Coming back to the initial proposal again: I think it should not be an error if a public function overrides an external function. The requirement for interface functions to be external makes their use extremely annoying. Because of that, I think this should be part of 0.5.0.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/371155926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
