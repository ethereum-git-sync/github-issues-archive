{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/8244/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/8244/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/8244/events",
  "html_url": "https://github.com/ethereum/solidity/issues/8244",
  "id": 560324256,
  "node_id": "MDU6SXNzdWU1NjAzMjQyNTY=",
  "number": 8244,
  "title": "Refactor TestCase classes",
  "user": {
    "login": "Marenz",
    "id": 424752,
    "node_id": "MDQ6VXNlcjQyNDc1Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Marenz",
    "html_url": "https://github.com/Marenz",
    "followers_url": "https://api.github.com/users/Marenz/followers",
    "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
    "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
    "organizations_url": "https://api.github.com/users/Marenz/orgs",
    "repos_url": "https://api.github.com/users/Marenz/repos",
    "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Marenz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 717596767,
      "node_id": "MDU6TGFiZWw3MTc1OTY3Njc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "006b75",
      "default": true,
      "description": ""
    },
    {
      "id": 1012613901,
      "node_id": "MDU6TGFiZWwxMDEyNjEzOTAx",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/easy%20difficulty",
      "name": "easy difficulty",
      "color": "0b3f89",
      "default": false,
      "description": ""
    },
    {
      "id": 1018738457,
      "node_id": "MDU6TGFiZWwxMDE4NzM4NDU3",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/testing%20:hammer:",
      "name": "testing :hammer:",
      "color": "ffc6db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/ethereum/solidity/milestones/49",
    "html_url": "https://github.com/ethereum/solidity/milestone/49",
    "labels_url": "https://api.github.com/repos/ethereum/solidity/milestones/49/labels",
    "id": 5143179,
    "node_id": "MDk6TWlsZXN0b25lNTE0MzE3OQ==",
    "number": 49,
    "title": "Sprint 4",
    "description": "Capacity multiplier: 41\nStory points: 26\nVelocity: 0.63",
    "creator": {
      "login": "elenadimitrova",
      "id": 703848,
      "node_id": "MDQ6VXNlcjcwMzg0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/703848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elenadimitrova",
      "html_url": "https://github.com/elenadimitrova",
      "followers_url": "https://api.github.com/users/elenadimitrova/followers",
      "following_url": "https://api.github.com/users/elenadimitrova/following{/other_user}",
      "gists_url": "https://api.github.com/users/elenadimitrova/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elenadimitrova/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elenadimitrova/subscriptions",
      "organizations_url": "https://api.github.com/users/elenadimitrova/orgs",
      "repos_url": "https://api.github.com/users/elenadimitrova/repos",
      "events_url": "https://api.github.com/users/elenadimitrova/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elenadimitrova/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 12,
    "state": "closed",
    "created_at": "2020-02-26T11:51:46Z",
    "updated_at": "2020-03-26T07:41:46Z",
    "due_on": "2020-03-25T07:00:00Z",
    "closed_at": "2020-03-25T13:00:12Z"
  },
  "comments": 9,
  "created_at": "2020-02-05T11:56:36Z",
  "updated_at": "2020-03-19T06:41:57Z",
  "closed_at": "2020-03-19T06:41:57Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "@ekpyron and I went a bit over the testcases code (while looking at #8238) and come up with the following ideas for a refactor:\r\n\r\n* remove `validateSettings` and the related variables `m_settings` and `m_validateSettings`. Instead add a function `void addSetting()` that takes a string and a lambda/function pointer that is called for each setting that is found. The lambda can set desired member variables or throw if the setting is invalid.\r\n* To keep the mechanic of `validateSettings` that we can cause tests not to be run based on various conditions the idea is to add a member variable `bool m_shouldRun = true` that any member function can set to false\r\n* There is currently logic in both `YulOptimizerTest` and `libyul/SyntaxTest` that validates/handles the `dialect` option that should be unified.\r\n* the name of `printExpectationAndError` does not make it obvious that it checks for errors, too\r\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/8244/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/8244/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587392147",
    "html_url": "https://github.com/ethereum/solidity/issues/8244#issuecomment-587392147",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
    "id": 587392147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzM5MjE0Nw==",
    "user": {
      "login": "Marenz",
      "id": 424752,
      "node_id": "MDQ6VXNlcjQyNDc1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Marenz",
      "html_url": "https://github.com/Marenz",
      "followers_url": "https://api.github.com/users/Marenz/followers",
      "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
      "organizations_url": "https://api.github.com/users/Marenz/orgs",
      "repos_url": "https://api.github.com/users/Marenz/repos",
      "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Marenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-18T10:32:55Z",
    "updated_at": "2020-02-18T10:32:55Z",
    "author_association": "MEMBER",
    "body": "@a3d4 started working on this",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/587392147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/588530535",
    "html_url": "https://github.com/ethereum/solidity/issues/8244#issuecomment-588530535",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
    "id": 588530535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODUzMDUzNQ==",
    "user": {
      "login": "a3d4",
      "id": 60588784,
      "node_id": "MDQ6VXNlcjYwNTg4Nzg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/60588784?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a3d4",
      "html_url": "https://github.com/a3d4",
      "followers_url": "https://api.github.com/users/a3d4/followers",
      "following_url": "https://api.github.com/users/a3d4/following{/other_user}",
      "gists_url": "https://api.github.com/users/a3d4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a3d4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a3d4/subscriptions",
      "organizations_url": "https://api.github.com/users/a3d4/orgs",
      "repos_url": "https://api.github.com/users/a3d4/repos",
      "events_url": "https://api.github.com/users/a3d4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a3d4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-19T23:36:47Z",
    "updated_at": "2020-02-19T23:36:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "If we introduce `addSetting()`, the following issue has to be addressed.\r\n\r\nConsider, for instance, `SMTCheckerTest` and `SyntaxTest`. Both classes can be instantiated and `SMTCheckerTest` is derived from `SyntaxTest`. (That violates Meyer's \"Make non-leaf classes abstract\" recommendation BTW.)\r\n\r\n`SMTCheckerTest` has `\"SMTSolvers\"` setting. `SyntaxTest` has `\"optimize-yul\"` setting.\r\n\r\nIf we construct `SyntaxTest` as a base class of `SMTCheckerTest`, then parsing of settings should not happen (it should be done later during construction of `SMTCheckerTest`).\r\n\r\nBut if we construct `SyntaxTest` on its own, then parsing of settings should happen.\r\n\r\nThere are a few options to implement it, but none is particularly appealing:\r\n**[a]** change class hierarchy to allow instantiation of most-derived classes only;\r\n**[b]** add a second constructor to SyntaxCheck and use different constructors for different scenarios;\r\n**[c]** add `Init()` function to both classes, keep `addSetting()` in the constructors, move setting parsing to `Init()`, and call `Init()` before returning an objects from `SyntaxTest::create()` and `SMTCheckerTest::create()`.\r\n\r\nI would consider **[c]** as a smaller evil (combined with making the constructors protected).\r\n\r\nHowever, it might be significantly simpler just\r\n\r\n**[d]** to keep `m_settings` in the base class, read all available settings during construction of the base class, and then allow derived classes to convert their settings in their constructors in an explicit way, something like `m_optimizeYul = initBoolSetting(\"optimize-yul\")`.\r\n\r\nThere are not so many settings, so **[d]** looks less invasive. And the classes would have all their settings (and `m_shouldRun` flag) initialized already during construction.\r\n\r\nWhat do you think?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/588530535/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/589087520",
    "html_url": "https://github.com/ethereum/solidity/issues/8244#issuecomment-589087520",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
    "id": 589087520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTA4NzUyMA==",
    "user": {
      "login": "Marenz",
      "id": 424752,
      "node_id": "MDQ6VXNlcjQyNDc1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Marenz",
      "html_url": "https://github.com/Marenz",
      "followers_url": "https://api.github.com/users/Marenz/followers",
      "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
      "organizations_url": "https://api.github.com/users/Marenz/orgs",
      "repos_url": "https://api.github.com/users/Marenz/repos",
      "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Marenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-20T14:48:25Z",
    "updated_at": "2020-02-20T14:48:40Z",
    "author_association": "MEMBER",
    "body": "for solution **[d]**, how would that work with non bool/int settings like evm version?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/589087520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/589167989",
    "html_url": "https://github.com/ethereum/solidity/issues/8244#issuecomment-589167989",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
    "id": 589167989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTE2Nzk4OQ==",
    "user": {
      "login": "a3d4",
      "id": 60588784,
      "node_id": "MDQ6VXNlcjYwNTg4Nzg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/60588784?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a3d4",
      "html_url": "https://github.com/a3d4",
      "followers_url": "https://api.github.com/users/a3d4/followers",
      "following_url": "https://api.github.com/users/a3d4/following{/other_user}",
      "gists_url": "https://api.github.com/users/a3d4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a3d4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a3d4/subscriptions",
      "organizations_url": "https://api.github.com/users/a3d4/orgs",
      "repos_url": "https://api.github.com/users/a3d4/repos",
      "events_url": "https://api.github.com/users/a3d4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a3d4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-20T16:29:08Z",
    "updated_at": "2020-02-20T16:29:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "It could be a static utility function, e.g. `initEvmVersionSetting()`. Or we can handle it the same way as now. Since we have a limited number of settings, the first option might be slightly better.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/589167989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/591423311",
    "html_url": "https://github.com/ethereum/solidity/issues/8244#issuecomment-591423311",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
    "id": 591423311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTQyMzMxMQ==",
    "user": {
      "login": "Marenz",
      "id": 424752,
      "node_id": "MDQ6VXNlcjQyNDc1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Marenz",
      "html_url": "https://github.com/Marenz",
      "followers_url": "https://api.github.com/users/Marenz/followers",
      "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
      "organizations_url": "https://api.github.com/users/Marenz/orgs",
      "repos_url": "https://api.github.com/users/Marenz/repos",
      "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Marenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-26T13:23:11Z",
    "updated_at": "2020-02-26T13:23:11Z",
    "author_association": "MEMBER",
    "body": "So one thing we can consider is that there is a `create` function for all the classes that takes care of init. Maybe we can add a call to the `init()` function in there and make the c'tor protected?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/591423311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/595981179",
    "html_url": "https://github.com/ethereum/solidity/issues/8244#issuecomment-595981179",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
    "id": 595981179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NTk4MTE3OQ==",
    "user": {
      "login": "a3d4",
      "id": 60588784,
      "node_id": "MDQ6VXNlcjYwNTg4Nzg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/60588784?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a3d4",
      "html_url": "https://github.com/a3d4",
      "followers_url": "https://api.github.com/users/a3d4/followers",
      "following_url": "https://api.github.com/users/a3d4/following{/other_user}",
      "gists_url": "https://api.github.com/users/a3d4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a3d4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a3d4/subscriptions",
      "organizations_url": "https://api.github.com/users/a3d4/orgs",
      "repos_url": "https://api.github.com/users/a3d4/repos",
      "events_url": "https://api.github.com/users/a3d4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a3d4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-06T21:53:58Z",
    "updated_at": "2020-03-06T21:53:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There is currently logic in both YulOptimizerTest and libyul/SyntaxTest that validates/handles the dialect option that should be unified.\r\n\r\nThere is a subtle difference. For `\"evm\"` we use \r\n`EVMDialect::strictAssemblyForEVMObjects` in `YulOptimizerTest` and \r\n`EVMDialect::strictAssemblyForEVM` in `SyntaxTest`\r\n```\r\nelse if (dialectName == \"evm\")\r\n    m_dialect = &EVMDialect::strictAssemblyForEVMObjects( . . . . );\r\n                                                 ^^^^^^\r\n```\r\n\r\n```\r\n\"evm\",\r\n[](langutil::EVMVersion _evmVersion) -> yul::Dialect const&\r\n{ return yul::EVMDialect::strictAssemblyForEVM(_evmVersion); }\r\n```\r\n\r\nWith `strictAssemblyForEVMObjects` in both cases, tests pass. With `strictAssemblyForEVM`, some tests fail.\r\n\r\nWhat is the intended behavior?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/595981179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/596233682",
    "html_url": "https://github.com/ethereum/solidity/issues/8244#issuecomment-596233682",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
    "id": 596233682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjIzMzY4Mg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-08T18:07:52Z",
    "updated_at": "2020-03-08T18:07:52Z",
    "author_association": "MEMBER",
    "body": "Please use `...EVMObjects`, it is more generic than the other one.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/596233682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/596271514",
    "html_url": "https://github.com/ethereum/solidity/issues/8244#issuecomment-596271514",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
    "id": 596271514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjI3MTUxNA==",
    "user": {
      "login": "a3d4",
      "id": 60588784,
      "node_id": "MDQ6VXNlcjYwNTg4Nzg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/60588784?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a3d4",
      "html_url": "https://github.com/a3d4",
      "followers_url": "https://api.github.com/users/a3d4/followers",
      "following_url": "https://api.github.com/users/a3d4/following{/other_user}",
      "gists_url": "https://api.github.com/users/a3d4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a3d4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a3d4/subscriptions",
      "organizations_url": "https://api.github.com/users/a3d4/orgs",
      "repos_url": "https://api.github.com/users/a3d4/repos",
      "events_url": "https://api.github.com/users/a3d4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a3d4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-09T00:26:10Z",
    "updated_at": "2020-03-09T00:51:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Proposed draft is PR #8442.\r\n\r\nI did consider reading settings via callbacks (`addSetting()` + lambda). This approach looks elegant, but would result in (IMO) more complex and repetitive code.\r\n\r\n* We could not keep the logic in ctors only. Might need to move ctor logic to somewhere like virtual `init()`, and call it from every `create()`, as @Marenz mentioned. (The reason is that we cannot call lambda for subclass settings from a superclass ctor.)\r\n* Interface-wise, it is not ideal to get source(s) and expectation(s) as explicit function results, but settings as a side effect of the function.\r\n* Via lambdas, we can only set settings if their values are present in the file. The default values have to be assigned to settings somewhere else. So initialization of a setting has to spread across two places.\r\n* For `TestCase::printUpdatedSettings` we do need one container with all settings anyway.\r\n\r\nSo I would propose direct reading of everything in ctors.\r\n\r\nI introduced `TestCaseReader` class which reads source(s), settings and simple expectations. It is not ideal either.\r\n\r\n* Custom expectation readers belong to corresponding `TestCase` subclasses. Such subclasses read from the stream, partly parsed by TestCaseReader. It is eclectic.\r\n\r\nBut all in all, it looks as a smaller evil to me. Let's discuss :).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/596271514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/601014580",
    "html_url": "https://github.com/ethereum/solidity/issues/8244#issuecomment-601014580",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8244",
    "id": 601014580,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTAxNDU4MA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-19T06:41:57Z",
    "updated_at": "2020-03-19T06:41:57Z",
    "author_association": "MEMBER",
    "body": "Implemented in #8442",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/601014580/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
