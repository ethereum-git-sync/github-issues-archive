{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11819/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11819/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11819/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11819",
  "id": 973786835,
  "node_id": "MDU6SXNzdWU5NzM3ODY4MzU=",
  "number": 11819,
  "title": "Ability to override function selectors to support external interfaces not expressible in valid syntax.",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438006499,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaa4w",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20effort",
      "name": "low effort",
      "color": "ffb1fa",
      "default": false,
      "description": "There is not much implementation work to be done. The task is very easy or tiny."
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "314aff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4438481746,
      "node_id": "LA_kwDOAm_5kc8AAAABCI3bUg",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have%20eventually",
      "name": "must have eventually",
      "color": "ffb04d",
      "default": false,
      "description": "Something we consider essential but not enough to prevent us from releasing Solidity 1.0 without it."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 21,
  "created_at": "2021-08-18T15:11:13Z",
  "updated_at": "2022-09-14T16:47:23Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Came up in https://github.com/ethereum/solidity/issues/11743, earlier in https://github.com/ethereum/solidity/issues/1687, resp. https://github.com/ethereum/solidity/issues/8081\r\n\r\nWe need a way to override function selectors in interfaces for two reasons:\r\n- We might ourselves add new keywords to the language which might break backwards compatibility with contracts with an entry point with that name.\r\n- Third-Party languages might allow selectors that collide with keywords or are otherwise incompatible with regular solidity function definitions.\r\n\r\nWe seem to have pretty much consensus on that we want this, but we require good syntax for it.\r\n\r\nOne option (I myself dislike) would be a modifier-style decorator at various positions with various names.\r\n```\r\ninterface C\r\n{\r\n  function errorCompat() selector(0x01020304) external returns (uint);\r\n  function errorCompat2() signature(\"error()\") external returns (uint);\r\n}\r\n```\r\nTo me it seems like those are not prominent enough, though, among visiblity and mutability.\r\n\r\nWe had the idea to use ``= Base.f;`` for disambiguating during inheritance at some point, along those lines a possiblity would be:\r\n\r\n```\r\ninterface C\r\n{\r\n  function errorCompat() external returns (uint) = \"error()\";\r\n  function errorCompat2() external returns (uint) = 0x01020304;\r\n}\r\n```\r\nMight be good to force encapsulation in a call-like construct, e.g. ``= externalSignature(\"error()\")``, but choosing a name for that may be hairy.\r\n\r\nAnother option would be to borrow from the call option syntax, e.g.\r\n```\r\ninterface C\r\n{\r\n  function{ signature = \"error()\" } errorCompat() external returns (uint);\r\n  function{ selector = 0x01020304 } errorCompat() external returns (uint);\r\n}\r\n```\r\nadvantage: extensible if we ever need further similar annotations (e.g. if we ever want to break the ABI encoding, we could select a version here). No need for making ``selector`` (or anything) a keyword.\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11819/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11819/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901199298",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901199298",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901199298,
    "node_id": "IC_kwDOAm_5kc41tzXC",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:14:09Z",
    "updated_at": "2021-08-18T15:14:09Z",
    "author_association": "MEMBER",
    "body": "I think the last option may work the best for us given we already use that syntax. It does look a bit odd on the declaration site though.\r\n\r\nAs discussed on gitter, this could be reused for introduced a new ABI encoding (which came up several times in the past), via:\r\n```\r\ninterface I {\r\n  function{abi=3} transferTo(address to, uint amount) external returns(uint);\r\n}\r\n```\r\n\r\nThis works well for calling such interfaces, but what should happen in contracts implementing such functions -- they should just copy the declaration as-is, including the `abi` part.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901199298/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901200530",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901200530",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901200530,
    "node_id": "IC_kwDOAm_5kc41tzqS",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:15:40Z",
    "updated_at": "2021-08-18T15:15:40Z",
    "author_association": "MEMBER",
    "body": "Shouldn't it be on the method though?\r\n\r\n```solidity\r\ninterface I {\r\n  function transferTo{ abi = 3 }(address to, uint amount) external returns(uint);\r\n  function errorCompat{ signature = \"error()\" }() external returns (uint);\r\n  function errorCompat{ selector = 0x01020304 }() external returns (uint);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901200530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901202932",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901202932",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901202932,
    "node_id": "IC_kwDOAm_5kc41t0P0",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:18:44Z",
    "updated_at": "2021-08-18T15:18:44Z",
    "author_association": "MEMBER",
    "body": "Should also work on the method, but aesthetically to me on ``function`` seems nicer... and conceptually both works in my mind.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901202932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901209704",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901209704",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901209704,
    "node_id": "IC_kwDOAm_5kc41t15o",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:27:19Z",
    "updated_at": "2021-08-18T16:02:59Z",
    "author_association": "MEMBER",
    "body": "@axic Noted that there may also be the need to *implement* functions with inexpressible selectors. (EDIT: ah, sorry, I only see now that you already commented on that above yourself)\r\n\r\nThe bracket syntax should work for that, too, though.\r\n```\r\ncontract C {\r\n  function{selector= ...} f() external {}\r\n}\r\n```\r\n\r\nBut I'd tend to still restrict this to interfaces, when inheriting and require that there is a unique interface containing that function. Although we might force to re-state the selector on implementation nonetheless.\r\n\r\nFurther issues:\r\noverloading, i.e.\r\n```\r\nfunction{signature = \"f()\"} f() external;\r\nfunction{signature = \"g()\"} f(uint256) external;\r\n```\r\nfirst response: disallow entirely - there must be a unique signature in solidity for each \"artificial signature\"\r\n\r\nconflicting signatures\r\n```\r\nfunction{signature = \"f()\"} g() external;\r\nfunction{signature = \"f()\"} h() external;\r\n```\r\nor\r\n```\r\nfunction{signature = \"f()\"} g() external;\r\nfunction f() external;\r\n```\r\nfirst response: should be covered by our analysis of uniqueness of selectors.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901209704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901215739",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901215739",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901215739,
    "node_id": "IC_kwDOAm_5kc41t3X7",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:35:04Z",
    "updated_at": "2021-08-18T15:35:04Z",
    "author_association": "MEMBER",
    "body": "Next question: what to do with these things in json ABI. For ``signature = \"someSig\"``, it would just appear as ``someSig``.\r\nBut ``selector=...`` might be an issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901215739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901216868",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901216868",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901216868,
    "node_id": "IC_kwDOAm_5kc41t3pk",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:36:18Z",
    "updated_at": "2021-08-18T15:36:18Z",
    "author_association": "MEMBER",
    "body": "Another question is regarding the ABI JSON. If we always want to be able to generate an output from an interface, then we should not allow `selector`, just `signature`, to make the problem go away.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901216868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901221647",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901221647",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901221647,
    "node_id": "IC_kwDOAm_5kc41t40P",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:42:39Z",
    "updated_at": "2021-08-18T15:42:39Z",
    "author_association": "MEMBER",
    "body": "> Another question is regarding the ABI JSON. If we always want to be able to generate an output from an interface, then we should not allow `selector`, just `signature`, to make the problem go away.\r\n\r\nAt least that's an option. We could also extend the ABI JSON to support numeric selectors, but that would raise a whole new bunch of questions, so at least at first restricting to signatures may be wise indeed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901221647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901223079",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901223079",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901223079,
    "node_id": "IC_kwDOAm_5kc41t5Kn",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:44:40Z",
    "updated_at": "2021-08-18T15:44:40Z",
    "author_association": "MEMBER",
    "body": "Another thought: Since the bracket syntax already exists for function calls, we *could* force re-mentioning the signature on all call sites, if we consider obscuring what ``someInterface.someFunction()`` actually calls an issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901223079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901225258",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901225258",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901225258,
    "node_id": "IC_kwDOAm_5kc41t5sq",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:47:31Z",
    "updated_at": "2021-08-18T15:47:31Z",
    "author_association": "MEMBER",
    "body": "There may also be more corner-cases to consider, e.g. unicode escapes in the signature string.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901225258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901231364",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901231364",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901231364,
    "node_id": "IC_kwDOAm_5kc41t7ME",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:55:43Z",
    "updated_at": "2021-08-18T15:55:43Z",
    "author_association": "MEMBER",
    "body": "An entirely different (reasonably insane) approach would be to allow quoted strings as identifiers in function context :-D.\r\n```\r\ninterface I {\r\n  function \"error()\"() external;\r\n}\r\ncontract C {\r\n  function f(I i) public { i.\"error()\"(); }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901231364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901232418",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901232418",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901232418,
    "node_id": "IC_kwDOAm_5kc41t7ci",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:57:02Z",
    "updated_at": "2021-08-18T15:57:02Z",
    "author_association": "MEMBER",
    "body": "Another general choise is: do we want to be able to override the full signature or just the name or both. (Since other languages may have different ABI types full signatures seem more general).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901232418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901233105",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-901233105",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 901233105,
    "node_id": "IC_kwDOAm_5kc41t7nR",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T15:57:59Z",
    "updated_at": "2021-08-18T15:57:59Z",
    "author_association": "MEMBER",
    "body": "> There may also be more corner-cases to consider, e.g. unicode escapes in the signature string.\r\n\r\nDo not 😅 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/901233105/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/907850160",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-907850160",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 907850160,
    "node_id": "IC_kwDOAm_5kc42HLGw",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-29T18:54:46Z",
    "updated_at": "2021-08-29T18:55:54Z",
    "author_association": "MEMBER",
    "body": "How about this syntax:\r\n```solidity\r\ninterface I {\r\n    function \"error\" as err() external;\r\n}\r\ncontract C {\r\n    function f(I i) public { i.err(); }\r\n}\r\n```\r\nThis would follow how `as` is used e.g. in imports - the original name is the thing before `as` but only the identifier after it is visible in the source unit. The only weirdness being that the thing before `as` here is a string rather than an identifier.\r\n\r\nRegarding overloading, I think that we'll have to consider both names for collisions. I.e. if you declare `function \"g\" as f(uint)` then both `function f(uint)` and `function g(uint)` should not be allowed due to a conflicting signature.\r\n\r\n> Another general choise is: do we want to be able to override the full signature or just the name or both. (Since other languages may have different ABI types full signatures seem more general).\r\n\r\nI think that it's important to allow overriding just the name, without having to repeat the signature. We might allow overriding the whole signature too but I'd consider that optional.\r\n\r\nI'd disallow `(` and `)` in function names used in signatures to avoid ambiguities. It would also allow us to have the same syntax for both cases - `function \"g(uint256,bool)\" as f(uint, bool)` would change the whole signature while `function \"g\" as f(uint, bool)` would only change the name.\r\n\r\nThe problem with overriding the signature though is that it would open a whole new bag of potential mistakes if it's not validated. Forgetting to update the signature after updating the function, introducing whitespace where it's not expected, etc. And validating it would be problematic if the point is to allow things that the compiler does not support.\r\n\r\n> > There may also be more corner-cases to consider, e.g. unicode escapes in the signature string.\r\n> \r\n> Do not sweat_smile\r\n\r\nYeah, I'd rather disallow non-ASCII chars. It people suddenly start hand-crafting tons of contracts that do have unicode in signatures (or some other language starts allowing them), it might force us to support them but I'd worry about that when it happens :) I'd disallow control characters as well.\r\n\r\nActually, maybe it would be better to require these names to be valid identifiers? It would be enough to solve the keyword problem for now and we can always extend the set of supported characters later in a non-breaking way.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/907850160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/913671086",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-913671086",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 913671086,
    "node_id": "IC_kwDOAm_5kc42dYOu",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-06T13:59:01Z",
    "updated_at": "2021-09-06T13:59:01Z",
    "author_association": "MEMBER",
    "body": "I think I like the `{signature = \"...\"}` syntax most, but I would prefer to not have the option to allow to change the selector. Also, do we want to perform any type checking on the parameters? Can we do it?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/913671086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/913722861",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-913722861",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 913722861,
    "node_id": "IC_kwDOAm_5kc42dk3t",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-06T15:17:51Z",
    "updated_at": "2021-09-06T15:22:31Z",
    "author_association": "MEMBER",
    "body": "I'd not do any type checking and leave things entirely in user-responsibility - that way we simultaneously achieve compatibility with types other languages might have, but we don't (or ABI types we might want to remove at some point, if that ever comes up ;-)).\r\nBut I'd also be fine with doing type checking, since we can still relax it afterwards.\r\nEDIT: there might even be cases in which some other language has some type that extends to two 256-bit words, which could be captures in a struct in solidity or in two separate arguments, so I'd not even attempt to verify that the signature has the same number of arguments - or even that it has parentheses.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/913722861/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915217410",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-915217410",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 915217410,
    "node_id": "IC_kwDOAm_5kc42jRwC",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-08T13:00:11Z",
    "updated_at": "2021-09-08T13:00:11Z",
    "author_association": "MEMBER",
    "body": "Comments from call: We should use `:` instead of `=` and we should also allow this for function types.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915217410/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915219331",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-915219331",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 915219331,
    "node_id": "IC_kwDOAm_5kc42jSOD",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-08T13:02:37Z",
    "updated_at": "2021-09-08T13:02:37Z",
    "author_association": "MEMBER",
    "body": "Ok actually not needed for function types.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915219331/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915221716",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-915221716",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 915221716,
    "node_id": "IC_kwDOAm_5kc42jSzU",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-08T13:05:43Z",
    "updated_at": "2021-09-08T13:05:43Z",
    "author_association": "MEMBER",
    "body": "@cameel proposed to move it after the function definition into the specifiers space. I think there it could use some syntax similar to modifiers:\r\n```solidity\r\nfunction transferTo(address to, uint amount) abi({ version: 3, selector: 0x01020304 }) external returns(uint);\r\nfunction transferTo(address to, uint amount) abi{ version: 3, selector: 0x01020304 } external returns(uint);\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915221716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1013926183",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-1013926183",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 1013926183,
    "node_id": "IC_kwDOAm_5kc48b0kn",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-16T18:19:30Z",
    "updated_at": "2022-01-16T18:19:30Z",
    "author_association": "MEMBER",
    "body": "One important detail that needs to be taken into account here: the syntax has to work for public state variables too since these generate getter functions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1013926183/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1014389634",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-1014389634",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 1014389634,
    "node_id": "IC_kwDOAm_5kc48dluC",
    "user": {
      "login": "dwardu",
      "id": 497145,
      "node_id": "MDQ6VXNlcjQ5NzE0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/497145?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwardu",
      "html_url": "https://github.com/dwardu",
      "followers_url": "https://api.github.com/users/dwardu/followers",
      "following_url": "https://api.github.com/users/dwardu/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwardu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwardu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwardu/subscriptions",
      "organizations_url": "https://api.github.com/users/dwardu/orgs",
      "repos_url": "https://api.github.com/users/dwardu/repos",
      "events_url": "https://api.github.com/users/dwardu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwardu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-17T10:56:36Z",
    "updated_at": "2022-01-17T10:56:36Z",
    "author_association": "NONE",
    "body": "@cameel Continuing [our discussion](https://forum.soliditylang.org/t/appstorage-for-distinguishing-state-variables-and-preventing-name-clashes/757/5?u=dwardu) here. Sorry, I might be missing something, but what’s wrong with:\r\n\r\n```solidity\r\npragma solidity 0.8.11;\r\ncontract Test {\r\n    error Oops(uint256 value);\r\n    function error() external pure returns (uint256) { return 123; }\r\n}\r\n```\r\n?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1014389634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1014416857",
    "html_url": "https://github.com/ethereum/solidity/issues/11819#issuecomment-1014416857",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11819",
    "id": 1014416857,
    "node_id": "IC_kwDOAm_5kc48dsXZ",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-17T11:26:17Z",
    "updated_at": "2022-01-17T11:26:17Z",
    "author_association": "MEMBER",
    "body": "Nothing yet, but we'd like to make it a keyword in 0.9.0. Then it will break. We almost did but had to revert that change (#11218, #11859).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1014416857/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
