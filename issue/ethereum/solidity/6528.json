{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/6528",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/6528/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/6528/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/6528/events",
  "html_url": "https://github.com/ethereum/solidity/issues/6528",
  "id": 433680658,
  "node_id": "MDU6SXNzdWU0MzM2ODA2NTg=",
  "number": 6528,
  "title": "[Yul] optimizer takes too long on recursive function call within nested (potentially infinite) for loops",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-04-16T09:39:23Z",
  "updated_at": "2019-04-24T11:49:19Z",
  "closed_at": "2019-04-24T11:49:19Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\n(Found by LPM+libFuzzer)\r\n\r\nFor\r\n\r\n```\r\n{\r\n  function foo(x, y) -> z\r\n  {\r\n    for {} x {}\r\n    {\r\n      for {} y {}\r\n      {\r\n        z := foo(x, y)\r\n      }\r\n    }\r\n  }\r\n  let a_0 := foo(calldataload(0),calldataload(32))\r\n}\r\n```\r\n\r\n`solc` call to optimize does not finish computation for several minutes (I'm not sure if there is an infinite loop somewhere in the optimizer or if there is some computation that should return but takes too long)\r\n\r\nRepro is:\r\n```\r\n$ solc --strict-assembly --optimize <code.yul>\r\n```\r\n\r\nNotes\r\n  - While debugging this using `yulopti` fullInliner seemed to be one of the reasons for blowing up the AST size\r\n  - RedundantAssignmentEliminator was seen to take too long to process intermediate ASTs\r\n  - Bounded for loops do not trigger the bug for some reason (this tells me that there is something more than full inlining that causes the underlying problem)\r\n\r\n## Environment\r\n\r\n- Compiler version: latest develop",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/6528/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/6528/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/484710851",
    "html_url": "https://github.com/ethereum/solidity/issues/6528#issuecomment-484710851",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6528",
    "id": 484710851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDcxMDg1MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-18T22:30:35Z",
    "updated_at": "2019-04-18T22:30:35Z",
    "author_association": "MEMBER",
    "body": "The problem here is that the RedundantAssignEliminator has exponential behaviour with the nesting depth of functions. It is probably fine to degrade the efficiency of the RedundantAssignEliminator at a certain for loop nesting depth. The question is how to make it efficient but still correct at that depth.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/484710851/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/484787326",
    "html_url": "https://github.com/ethereum/solidity/issues/6528#issuecomment-484787326",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6528",
    "id": 484787326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDc4NzMyNg==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-19T07:06:27Z",
    "updated_at": "2019-04-19T07:37:47Z",
    "author_association": "MEMBER",
    "body": "> It is probably fine to degrade the efficiency of the RedundantAssignEliminator at a certain for loop nesting depth.\r\n\r\nDo you mean \"at a certain function nesting depth\" or \"for loop nesting depth\"? IIUC, the former is unbounded while the latter is 2 in this case?\r\n\r\nAlso, shouldn't the optimizer steps reach a fixed point at some point in cases like this where opt(n+1) = opt(n) and bail out at that point? Or is the exponential slowdown in the process of reaching such a fixed point?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/484787326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
