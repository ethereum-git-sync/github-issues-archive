{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13869",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13869/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13869/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13869/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13869",
  "id": 1530468368,
  "node_id": "I_kwDOAm_5kc5bORgQ",
  "number": 13869,
  "title": "Unable to use try/catch to reliably catch errors",
  "user": {
    "login": "drortirosh",
    "id": 40341007,
    "node_id": "MDQ6VXNlcjQwMzQxMDA3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/drortirosh",
    "html_url": "https://github.com/drortirosh",
    "followers_url": "https://api.github.com/users/drortirosh/followers",
    "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
    "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
    "organizations_url": "https://api.github.com/users/drortirosh/orgs",
    "repos_url": "https://api.github.com/users/drortirosh/repos",
    "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/drortirosh/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-01-12T10:26:48Z",
  "updated_at": "2023-01-12T10:26:48Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "How can we call an external code, and reliably catch errors?\r\n\r\nConsider the following code, which tries to create \"`safeBalance`\" method, which calls balanceOf and never reverts.\r\n(spoiler: `try/catch` doesn't catch a lot of cases)\r\n\r\n- It returns a proper balance of an external token\r\n- It properly catches revert in the external balanceOf method\r\n\r\nBut....\r\n\r\n- it **crashes** if calling non-existent address (e.g. `address(0)`)\r\n- it **crashes** if the target contract doesn't have that method.\r\n- it **crashes** if the target contract returns wrong number of arguments.\r\n\r\nSo basically, we **can't** rely on try/catch ...\r\n\r\nThe only alternative is to resort to low-level call (`address.call()`) and manually parse the result - in `realSafeBalance()`\r\nThis solution is error-prone, type-unsafe and more expensive in its gas usage.\r\n\r\n```solidity\r\npragma solidity ^0.8.17;\r\n//SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address) external returns (uint);\r\n}\r\n\r\ncontract ATestSafeBalance {\r\n\r\n    event Debug(uint bal);\r\n    constructor () {\r\n        IERC20 a;\r\n        //  a = IERC20(address(this));\r\n        //  a = IERC20(address(0));\r\n        // a = new Token();\r\n        //  a = new RevertToken();\r\n         a = IERC20(address(new NoReturnValue()));\r\n        uint bal = pseudoSafeBalance(a,address(this));\r\n        emit Debug(bal);\r\n    }\r\n\r\n    function pseudoSafeBalance(IERC20 token, address addr) public returns (uint) {\r\n        try token.balanceOf(addr) returns (uint ret) {\r\n            return ret;\r\n        }\r\n        catch {\r\n            return 11111;\r\n        }\r\n    }\r\n\r\n    function realSafeBalance(IERC20 token, address addr) public returns (uint retBalance) {\r\n       (bool success, bytes memory ret) = address(token).call(abi.encodeCall(IERC20.balanceOf, addr));\r\n       if (!success || ret.length != 32) return 11111;\r\n       (retBalance) = abi.decode(ret, (uint));\r\n    }\r\n}\r\n\r\ncontract NoReturnValue {\r\n  function balanceOf(address) external {\r\n  }\r\n}\r\n\r\ncontract RevertToken is IERC20 {\r\n  function balanceOf(address) external override returns (uint) {\r\n      revert(\"just because\");\r\n  }\r\n}\r\n\r\ncontract Token is IERC20 {\r\n  function balanceOf(address) external override returns (uint) {\r\n      return 1;\r\n  }\r\n}\r\n```\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13869/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13869/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
