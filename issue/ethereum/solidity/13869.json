{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13869",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13869/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13869/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13869/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13869",
  "id": 1530468368,
  "node_id": "I_kwDOAm_5kc5bORgQ",
  "number": 13869,
  "title": "Unable to use `try`/`catch` to catch local reverts in extra code generated for high-level external calls",
  "user": {
    "login": "drortirosh",
    "id": 40341007,
    "node_id": "MDQ6VXNlcjQwMzQxMDA3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/drortirosh",
    "html_url": "https://github.com/drortirosh",
    "followers_url": "https://api.github.com/users/drortirosh/followers",
    "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
    "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
    "organizations_url": "https://api.github.com/users/drortirosh/orgs",
    "repos_url": "https://api.github.com/users/drortirosh/repos",
    "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/drortirosh/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4437999539,
      "node_id": "LA_kwDOAm_5kc8AAAABCIZ_sw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20effort",
      "name": "high effort",
      "color": "ff54f4",
      "default": false,
      "description": "A lot to implement but still doable by a single person. The task is large or difficult."
    },
    {
      "id": 4438153180,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjX3A",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/high%20impact",
      "name": "high impact",
      "color": "001dff",
      "default": false,
      "description": "Changes are very prominent and affect users or the project in a major way."
    },
    {
      "id": 4438488423,
      "node_id": "LA_kwDOAm_5kc8AAAABCI31Zw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have",
      "name": "must have",
      "color": "ffa12a",
      "default": false,
      "description": "Something we consider an essential part of Solidity 1.0."
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2023-01-12T10:26:48Z",
  "updated_at": "2023-02-17T22:20:57Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "How can we call an external code, and reliably catch errors?\r\n\r\nConsider the following code, which tries to create \"`safeBalance`\" method, which calls balanceOf and never reverts.\r\n(spoiler: `try/catch` doesn't catch a lot of cases)\r\n\r\n- It returns a proper balance of an external token\r\n- It properly catches revert in the external balanceOf method\r\n\r\nBut....\r\n\r\n- it **crashes** if calling non-existent address (e.g. `address(0)`)\r\n- it **crashes** if the target contract doesn't have that method.\r\n- it **crashes** if the target contract returns wrong number of arguments.\r\n\r\nSo basically, we **can't** rely on try/catch ...\r\n\r\nThe only alternative is to resort to low-level call (`address.call()`) and manually parse the result - in `realSafeBalance()`\r\nThis solution is error-prone, type-unsafe and more expensive in its gas usage.\r\n\r\n```solidity\r\npragma solidity ^0.8.17;\r\n//SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address) external returns (uint);\r\n}\r\n\r\ncontract ATestSafeBalance {\r\n\r\n    event Debug(uint bal);\r\n    constructor () {\r\n        IERC20 a;\r\n        //  a = IERC20(address(this));\r\n        //  a = IERC20(address(0));\r\n        // a = new Token();\r\n        //  a = new RevertToken();\r\n         a = IERC20(address(new NoReturnValue()));\r\n        uint bal = pseudoSafeBalance(a,address(this));\r\n        emit Debug(bal);\r\n    }\r\n\r\n    function pseudoSafeBalance(IERC20 token, address addr) public returns (uint) {\r\n        try token.balanceOf(addr) returns (uint ret) {\r\n            return ret;\r\n        }\r\n        catch {\r\n            return 11111;\r\n        }\r\n    }\r\n\r\n    function realSafeBalance(IERC20 token, address addr) public returns (uint retBalance) {\r\n       (bool success, bytes memory ret) = address(token).call(abi.encodeCall(IERC20.balanceOf, addr));\r\n       if (!success || ret.length != 32) return 11111;\r\n       (retBalance) = abi.decode(ret, (uint));\r\n    }\r\n}\r\n\r\ncontract NoReturnValue {\r\n  function balanceOf(address) external {\r\n  }\r\n}\r\n\r\ncontract RevertToken is IERC20 {\r\n  function balanceOf(address) external override returns (uint) {\r\n      revert(\"just because\");\r\n  }\r\n}\r\n\r\ncontract Token is IERC20 {\r\n  function balanceOf(address) external override returns (uint) {\r\n      return 1;\r\n  }\r\n}\r\n```\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13869/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13869/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1399597115",
    "html_url": "https://github.com/ethereum/solidity/issues/13869#issuecomment-1399597115",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13869",
    "id": 1399597115,
    "node_id": "IC_kwDOAm_5kc5TbCg7",
    "user": {
      "login": "drortirosh",
      "id": 40341007,
      "node_id": "MDQ6VXNlcjQwMzQxMDA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40341007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drortirosh",
      "html_url": "https://github.com/drortirosh",
      "followers_url": "https://api.github.com/users/drortirosh/followers",
      "following_url": "https://api.github.com/users/drortirosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/drortirosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drortirosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drortirosh/subscriptions",
      "organizations_url": "https://api.github.com/users/drortirosh/orgs",
      "repos_url": "https://api.github.com/users/drortirosh/repos",
      "events_url": "https://api.github.com/users/drortirosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drortirosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-22T20:20:18Z",
    "updated_at": "2023-01-22T20:20:18Z",
    "author_association": "NONE",
    "body": "This issue is a major use-case of the #12725 issue.\r\nI do think this issue requires language support and not require developers to resort to assembly. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1399597115/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1422879881",
    "html_url": "https://github.com/ethereum/solidity/issues/13869#issuecomment-1422879881",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13869",
    "id": 1422879881,
    "node_id": "IC_kwDOAm_5kc5Uz2yJ",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T16:16:14Z",
    "updated_at": "2023-02-08T16:16:14Z",
    "author_association": "MEMBER",
    "body": "I think we should extend the try/catch statement in the following way (which is backwards-compatible):\r\n\r\nCurrently, we allow the following catch statements:\r\n- `catch ErorrName(...) {}`\r\n- `catch (bytes memory ...) {}`\r\n- `catch {}`\r\n\r\nWe can easily extend these to capture the two additional cases of \"contract does not exist\" and \"abi decoding failure\" by adding more catch statements:\r\n\r\n- `catch NoContract {}` \r\n- `catch DecodingFailure {}`\r\n(note the missing parentheses, they are required for custom errors)\r\n\r\nIn order to make this easier to use and also backwards-compatible, we could also add\r\n- `catch Other {}`\r\nThat one would be invoked if there is any kind of failure (including non-existing contract, abi-decoding failure of error data and of return data), but there is no clause that would match for that failure.\r\n\r\nIn the end, this could at some point maybe be replaced by some kind of destructuring / match expression, and both NoContract and DecodingFailure could be specific identifiers that need to be defined in the standard library.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1422879881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1423021751",
    "html_url": "https://github.com/ethereum/solidity/issues/13869#issuecomment-1423021751",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13869",
    "id": 1423021751,
    "node_id": "IC_kwDOAm_5kc5U0Za3",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-08T17:57:13Z",
    "updated_at": "2023-02-08T18:03:08Z",
    "author_association": "MEMBER",
    "body": "Here's my proposal from the call, adapted a bit to cover also all @chriseth is proposing above:\r\n- Allow using `external` after `catch` to make it very clear that it only catches reverts from external calls:\r\n    - `catch external ErorrName(...) {}`\r\n    - `catch external (bytes memory ...) {}`\r\n    - `catch external {}`\r\n- Introduce a new form that can the reverts performed by the current contract:\r\n    - `catch internal {}`\r\n- Optionally, allow distinguishing between different internal failures. Instead of introducing identifiers for them, we could instead implement #11664 and then use the error signature that they would revert with:\r\n    - `catch internal Error(0x01) {}`\r\n    - `catch internal Error(0x02) {}`\r\n    - `catch internal (bytes memory ...) {}`\r\n- Having names for these codes is not bad in itself but they would pollute the global namespace. Maybe instead we could also introduce enums in stdlib to cover them?\r\n    - `catch external Panic(PanicCode.Assert) {}`\r\n    - `catch internal Error(ErrorCode.DecodingFailure) {}`\r\n    - or maybe even `catch internal ErrorCode.DecodingFailure {}`?\r\n- In a breaking release disallow all `catch` forms without explicit `internal` or `external`.\r\n    - Or we could make it catch both kinds.\r\n    - Consider adding deprecation warnings for `catch` without `internal`/`external`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1423021751/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1431303757",
    "html_url": "https://github.com/ethereum/solidity/issues/13869#issuecomment-1431303757",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13869",
    "id": 1431303757,
    "node_id": "IC_kwDOAm_5kc5VT_ZN",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-15T12:37:24Z",
    "updated_at": "2023-02-15T12:37:24Z",
    "author_association": "MEMBER",
    "body": "I think we should avoid extending `try-catch` with new annotations--try-catch is already probably the most confusing part of Solidity.\r\n\r\nI would rather prefer re-adding the `extcodesize` check for `try I(...).f()` in all cases and going into catch all than further extending `try-catch`.\r\n\r\n----\r\n\r\nAlternatively, we should create a primitive that allows completely getting rid of `try-catch`. One such primitive could be `try_decode` for decoding abi routines. This way, a user can explicitly reason about what would be caught.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1431303757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1431314688",
    "html_url": "https://github.com/ethereum/solidity/issues/13869#issuecomment-1431314688",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13869",
    "id": 1431314688,
    "node_id": "IC_kwDOAm_5kc5VUCEA",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-15T12:47:03Z",
    "updated_at": "2023-02-15T12:47:03Z",
    "author_association": "MEMBER",
    "body": "> I would rather prefer re-adding the `extcodesize` check for `try I(...).f()` in all cases and going into catch all than further extending `try-catch`.\r\n\r\nBut that's breaking, isn't it? I think the idea of bringing it up now was to patch it to make it actually usable without breaking its current semantics.\r\n\r\n> Alternatively, we should create a primitive that allows completely getting rid of `try-catch`. One such primitive could be `try_decode` for decoding abi routines. This way, a user can explicitly reason about what would be caught.\r\n\r\nThat's a good idea too if we're fine deprecating `try`/`catch`. I don't think the proposals above are very extreme though. You have to be aware of distinction between \"external\" and \"internal\" reverts either way and the altered `try`/`catch` syntax wraps it in some nice syntax sugar.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1431314688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1431327479",
    "html_url": "https://github.com/ethereum/solidity/issues/13869#issuecomment-1431327479",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13869",
    "id": 1431327479,
    "node_id": "IC_kwDOAm_5kc5VUFL3",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-15T12:57:37Z",
    "updated_at": "2023-02-15T12:57:37Z",
    "author_association": "MEMBER",
    "body": "Just generally: We can still decide to only change this for 0.9, doing anything here non-breakingly would be nice, but we shouldn't constrain ourselves by it. A \"silent\" change in behaviour for the default clause without any prior change or notice *is* harsh even for a breaking release though (by no means a no-go, but it *is* a heavy thing to do).\r\n\r\nSomething like ``try_decode`` is a separate issue we're not unlikely to do anyways (https://github.com/ethereum/solidity/issues/10381), but it's not a good reason for deprecating ``try``/``catch``.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1431327479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1435341702",
    "html_url": "https://github.com/ethereum/solidity/issues/13869#issuecomment-1435341702",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13869",
    "id": 1435341702,
    "node_id": "IC_kwDOAm_5kc5VjZOG",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-17T22:20:43Z",
    "updated_at": "2023-02-17T22:20:57Z",
    "author_association": "MEMBER",
    "body": "We talked about `try`/`catch` in depth on the last design call. For anyone interested in the topic, I made a write-up based on what I took out of that discussion. It goes over the current problem and various design proposals we considered to address this and also several other related `try`/`catch` issues (#10381, #11886, #11278, #12654).\r\n\r\n[[call for feedback] The future of `try`/`catch` in Solidity](https://forum.soliditylang.org/t/call-for-feedback-the-future-of-try-catch-in-solidity/1497).\r\n\r\nThe decision on the call was basically to wait for user feedback on these proposals and maybe implement the short term ones, but also keep in mind that in the long term we'll likely want to replace `try`/`catch` with generic language primitives once we have them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1435341702/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
