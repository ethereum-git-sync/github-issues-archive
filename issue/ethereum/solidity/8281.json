{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/8281/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/8281/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/8281/events",
  "html_url": "https://github.com/ethereum/solidity/issues/8281",
  "id": 562781368,
  "node_id": "MDU6SXNzdWU1NjI3ODEzNjg=",
  "number": 8281,
  "title": "Do not require override for functions from interfaces",
  "user": {
    "login": "frangio",
    "id": 481465,
    "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frangio",
    "html_url": "https://github.com/frangio",
    "followers_url": "https://api.github.com/users/frangio/followers",
    "following_url": "https://api.github.com/users/frangio/following{/other_user}",
    "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
    "organizations_url": "https://api.github.com/users/frangio/orgs",
    "repos_url": "https://api.github.com/users/frangio/repos",
    "events_url": "https://api.github.com/users/frangio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frangio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 31,
  "created_at": "2020-02-10T19:38:09Z",
  "updated_at": "2023-06-22T07:56:55Z",
  "closed_at": "2021-08-31T08:45:58Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "The override keyword is required when implementing a function from a parent interface.\r\n\r\n```solidity\r\ninterface I {\r\n    function foo() external;\r\n}\r\n\r\ncontract C is I {\r\n    function foo() external override { // Does not compile without override\r\n    }\r\n}\r\n```\r\n\r\nThis doesn't sound right to me. The function is not overriding anything, it's simply filling in a missing abstract function.",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/8281/reactions",
    "total_count": 23,
    "+1": 23,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/8281/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584314239",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-584314239",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 584314239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDMxNDIzOQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-10T19:41:17Z",
    "updated_at": "2020-02-10T19:41:17Z",
    "author_association": "MEMBER",
    "body": "I think this is a delicate question. It is true that override may sound misleading, as it suggests an existing implementation is changed. This makes sense for inherited functions. It is confusing for implementing functions from abstract contracts, too.\r\n\r\nHowever, if we would remove the keyword, then it would not be possible to easily tell apart functions specific to `C` or functions which are part of an inherited interface `I`.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584314239/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584327908",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-584327908",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 584327908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDMyNzkwOA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-10T20:06:18Z",
    "updated_at": "2020-02-10T20:06:18Z",
    "author_association": "CONTRIBUTOR",
    "body": ">It is confusing for implementing functions from abstract contracts, too.\r\n\r\nYes, I agree.\r\n\r\nThe way I see it, `override` is required when overriding an existing function because it hints to the developer or reviewer that something weird can happen at that point. They should consider the consequences, and the syntax also forces them to understand exactly what they're overriding (through `override(A, B, C)`).\r\n\r\nImplementing an abstract function is more of a normal situation. If `override` is also used in this normal situation, it loses significance. The developer may mistakenly think they're implementing something that was abstract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584327908/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584715841",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-584715841",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 584715841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDcxNTg0MQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T16:16:30Z",
    "updated_at": "2020-02-11T16:16:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "As @axic pointed out, one of the benefits of `override` is that it lets the reader easily know if a function is 'new' or if it's just a definition for an already declared one. It also acts as an assertion that a function is indeed already declared, and prevents errors if the declaration changes on the interface but not on the implementation (making the derived contract abstract).\r\n\r\nHowever, given that we also have `abstract`, I'm not sure this is actually needed. Failing to define a function, including the regression bug I mentioned above, will cause the contract to require the `abstract` keyword, making it obvious something is wrong.\r\n\r\nI'm with @frangio on this one: if we require `override` in these cases, then it becomes very hard for a reader to tell whether a function definition is actually an override, or if it's just the base implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584715841/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584720520",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-584720520",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 584720520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDcyMDUyMA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T16:25:37Z",
    "updated_at": "2020-02-11T16:25:37Z",
    "author_association": "MEMBER",
    "body": "@frangio @nventuro so you wouldn't want to know if the function actually refers to the declaration in the interface or not? What if you have:\r\n\r\ninterface I\r\ncontract C is I\r\ncontract D is C\r\n\r\nand a function `f` is defined in I and D. You wanted to define it also in C but you accidentally made a typo. The only protection against that typo in your proposed model is that you would get an error that you do not need the override in D. I'm almost certain that there are cases with multiple inheritance where this would even pass unnoticed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584720520/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584724649",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-584724649",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 584724649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDcyNDY0OQ==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T16:33:36Z",
    "updated_at": "2020-02-11T16:33:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "If `C` didn't fully implement `I` due to lacking `f`, it'd then have to be `abstract`, which would hint that something may be wrong.\r\n\r\nMore importantly though, if `D` initially implemented `f` using `override` and the compiler did not raise any errors when it was also added to `C` (as happens in 0.6.2), `D`'s behavior would change from 'implementing an undefined function' to 'overriding a base implementation' with no changes to its source code. \r\n\r\nOverrides should be used carefully, with knowledge of the expected behavior of the overridden function in the base contract. Allowing contracts to unknowingly override a base function is IMO dangerous.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584724649/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584726631",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-584726631",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 584726631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDcyNjYzMQ==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T16:37:31Z",
    "updated_at": "2020-02-11T16:37:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "> More importantly though, if `D` initially implemented `f` using `override` and the compiler did not raise any errors when it was also added to `C` (as happens in 0.6.2), `D`'s behavior would change from 'implementing an undefined function' to 'overriding a base implementation' with no changes to its source code.\r\n\r\nNote that this is only true if `f` is implemented as `virtual override` in `C`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584726631/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584734291",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-584734291",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 584734291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDczNDI5MQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T16:52:47Z",
    "updated_at": "2020-02-11T16:54:20Z",
    "author_association": "MEMBER",
    "body": "I'm wondering: Would anyone have a good suggestion for a second keyword for indicating that a function implements a previously unimplemented function? ``implements`` would be a natural choice, but then you kind of expect it saying *what* it implements... and requiring ``function f() external implements(I.f)`` might be a tad too much and I don't really like the look of it, but maybe there's a better choice...\r\nEDIT: ``implements function f() { .. }`` could work, I'm not sure... but yeah, just thought it might be worth exploring that option.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/584734291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/593887867",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-593887867",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 593887867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Mzg4Nzg2Nw==",
    "user": {
      "login": "robinbryce",
      "id": 4013001,
      "node_id": "MDQ6VXNlcjQwMTMwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4013001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robinbryce",
      "html_url": "https://github.com/robinbryce",
      "followers_url": "https://api.github.com/users/robinbryce/followers",
      "following_url": "https://api.github.com/users/robinbryce/following{/other_user}",
      "gists_url": "https://api.github.com/users/robinbryce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robinbryce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robinbryce/subscriptions",
      "organizations_url": "https://api.github.com/users/robinbryce/orgs",
      "repos_url": "https://api.github.com/users/robinbryce/repos",
      "events_url": "https://api.github.com/users/robinbryce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robinbryce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-03T10:50:50Z",
    "updated_at": "2020-03-03T10:54:29Z",
    "author_association": "NONE",
    "body": "Interfaces require that inheriting contracts implement all the methods declared in the interface. There is, by definition, nothing to override. This was a clean intuitive means to guard against incomplete implementations in related contracts.\r\n\r\nNow, with 0.6, having made that declaration, we aditionally need to tag all the implementations as 'override' - and yet they are not overriding anything.\r\n\r\nInterfaces were great as they were and now they are, if not broken, certainly diminished. \r\n\r\nIs there no way to restore interfaces without compromising the goals for this keyword ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/593887867/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/594719568",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-594719568",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 594719568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDcxOTU2OA==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-04T18:13:17Z",
    "updated_at": "2020-03-04T18:13:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "It feels like removing the requirement for `override` (or switching to a new keyword) when implementing an interface function (along with a deprecation message on the compiler output) would be non-contentious in terms of backwards compatibility. \r\n\r\nFrom this discussion, it seems like moving in this direction would be desirable. Does anyone feel strongly about keeping `override` for some reason not discussed here?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/594719568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/594780076",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-594780076",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 594780076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDc4MDA3Ng==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-04T19:32:34Z",
    "updated_at": "2020-03-04T19:35:43Z",
    "author_association": "MEMBER",
    "body": "Just to strengthen the case against removing the requirement without any replacement:\r\nSuppose you have two interfaces:\r\n```\r\ninterface I {\r\n  function doImportantStuff(address x) external;\r\n}\r\ninterface J {\r\n  function getSomeData(address x) returns (uint256) external;\r\n}\r\n```\r\nNow consider two parties - one providing a contract library, and the other using it.\r\nInitially the first party writes:\r\n```\r\nabstract contract A is I, J {\r\n  function doImportantStuff(address x, address y) external\r\n  {\r\n    // ...\r\n  }\r\n}\r\n```\r\nNow you have an auditor confirm that this always does the right stuff. It's a perfectly conformant implementation of I for an implementation of J the user provides. Every conformant implementation of J will get a conformant implementation of I, nothing can go wrong.\r\n\r\nBased on that the second party writes:\r\n```\r\ncontract B is A {\r\n  function validate(address x, address y) public {\r\n    if (/* some involved condition */) revert();\r\n  }\r\n  function getSomeData(address x) returns(uint256) external {\r\n    validate(msg.sender, x);\r\n    return data[x];\r\n  }\r\n}\r\n```\r\nAnd an auditor confirms: this is fine - ``getSomeData`` conforms perfectly to the requirements of J, this is foolproof.\r\n\r\nBut now there is a fancy third party, providing a cheaper, safer and more feature-rich implementation of ``I``. They write:\r\n```\r\nabstract contract A2 is I, J {\r\n  function validate(address x, address y) public virtual;\r\n  function doImportantStuff(address x, address y) external\r\n  {\r\n    validate(x,y);\r\n    // ...\r\n  }\r\n}\r\n```\r\nAnd their contracts are audited. It gives you a perfectly conformant implementation of I, if you provide a conformant implementation of J. It is even rumored to be especially safe, since it enforces additional validation.\r\n\r\nNow ``B`` switches from ``A`` to ``A2``. They know their implementation of J is conformant and you know that for every conformant J both A and A2 provide the required conformant I. A2 is cheaper and safer, so why not use that. And you end up with:\r\n```\r\ncontract B is A2 {\r\n  function validate(address x, address y) public {\r\n    if (/* some involved condition */) revert();\r\n  }\r\n  function getSomeData(address x) returns(uint256) external {\r\n    validate(msg.sender, x);\r\n    return data[x];\r\n  }\r\n}\r\n```\r\nEverything compiles, no reason to doubt this... but you potentially have an utterly broken implementation of the important stuff.\r\n\r\nThat's of course highly artificial and a bit stupid, but I still maintain that allowing to silently implement unimplemented functions *is* dangerous. And there would be no justification to allow it for interfaces, but not for abstract contracts, which increases the problem.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/594780076/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/594806702",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-594806702",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 594806702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDgwNjcwMg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-04T20:08:22Z",
    "updated_at": "2020-03-04T20:08:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, the scenario you've described isn't too different from Solidity v0.5, where you unexpectedly may end up overriding an already defined function.\r\n\r\nGiven the focus on readability and explicitness, somehow signalling that a definition corresponds to a previous declaration makes sense. I like the `implements function` syntax you proposed, but don't mind the alternatives.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/594806702/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598194551",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-598194551",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 598194551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODE5NDU1MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-12T13:47:08Z",
    "updated_at": "2020-03-12T13:47:08Z",
    "author_association": "MEMBER",
    "body": "I see the point that implementing an interface function and overriding a previously implemented functions are two different things, but I'm not sure we should add yet another keyword for that. Furthermore, note that you can have a function that, at the same time, implements an interface and changes the functionality of a parallel base class.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598194551/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598466613",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-598466613",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 598466613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODQ2NjYxMw==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-12T22:51:09Z",
    "updated_at": "2020-03-12T22:51:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "I also don't think we should add another keyword for this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598466613/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598777119",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-598777119",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 598777119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODc3NzExOQ==",
    "user": {
      "login": "robinbryce",
      "id": 4013001,
      "node_id": "MDQ6VXNlcjQwMTMwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4013001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robinbryce",
      "html_url": "https://github.com/robinbryce",
      "followers_url": "https://api.github.com/users/robinbryce/followers",
      "following_url": "https://api.github.com/users/robinbryce/following{/other_user}",
      "gists_url": "https://api.github.com/users/robinbryce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robinbryce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robinbryce/subscriptions",
      "organizations_url": "https://api.github.com/users/robinbryce/orgs",
      "repos_url": "https://api.github.com/users/robinbryce/repos",
      "events_url": "https://api.github.com/users/robinbryce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robinbryce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T15:23:56Z",
    "updated_at": "2020-03-13T15:31:43Z",
    "author_association": "NONE",
    "body": "If doImportantStuff is actually 'important' to the implementor of B they would not have switched to A2. If it is important to consumers of B presumably the author of B would advertise the important change. I think attempting to solve this scenario (a social problem) with a keyword breaks what inheritiance is for.\r\n\r\nIf as a consumer of B i am very sensitive to (or untrusting of) how doImportantStuff is implemented, what I actually want is\r\n\r\ncontract C is B[using A for doImportantStuff] {\r\n /// not suggesting the class decl is the right place, its just an easier illustration.\r\n}\r\n\r\nI am explicitly opting out of the normal mechanics of inheritance, which permit the provider of B full discretion on how 'doImportantStuff' is implemented. This is more explicit than having to carpet bomb my implementations with a keyword that is, mostly, redundant.\r\n\r\nOr, rather than overrides *everywhere*, instead have 'overrides a in b' only in those places where this kind of thing is a problem.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598777119/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598793674",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-598793674",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 598793674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODc5MzY3NA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T15:58:15Z",
    "updated_at": "2020-03-13T15:58:15Z",
    "author_association": "MEMBER",
    "body": "To be honest, I'm not in favor of introducing a new keyword either. I was hoping that we could establish that it makes sense to *somehow* indicate that a function implements a previously unimplemented function, because otherwise we give way to implicit unexpected changes in behavior (the otherwise rather silly example was mainly meant to demonstrate a case where this in fact happens).\r\n\r\nBased on that I'd personally argue that the best *means* to indicate this is to keep it at requiring ``override`` for implementing unimplemented functions.\r\n\r\nOr put differently: you said: \"Or, rather than overrides everywhere, instead have 'overrides a in b' only in those places where this kind of thing is a problem.\" - I agree with that, but I would argue that implementing unimplemented functions *is* a place where this kind of thing *is* a problem.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598793674/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598799441",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-598799441",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 598799441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODc5OTQ0MQ==",
    "user": {
      "login": "robinbryce",
      "id": 4013001,
      "node_id": "MDQ6VXNlcjQwMTMwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4013001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robinbryce",
      "html_url": "https://github.com/robinbryce",
      "followers_url": "https://api.github.com/users/robinbryce/followers",
      "following_url": "https://api.github.com/users/robinbryce/following{/other_user}",
      "gists_url": "https://api.github.com/users/robinbryce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robinbryce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robinbryce/subscriptions",
      "organizations_url": "https://api.github.com/users/robinbryce/orgs",
      "repos_url": "https://api.github.com/users/robinbryce/repos",
      "events_url": "https://api.github.com/users/robinbryce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robinbryce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T16:10:33Z",
    "updated_at": "2020-03-13T16:10:33Z",
    "author_association": "NONE",
    "body": "Thats a fair response. I quible over 'implementing unimplemented' in the case of interfaces. Do you think this situation is an inevitable consequence of mixing 'abstract' with 'interfaces' ? Ie, what interfaces led me to expect is just simply not the right way to think about smart contracts ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598799441/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598824075",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-598824075",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 598824075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODgyNDA3NQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T17:06:39Z",
    "updated_at": "2020-03-13T17:06:39Z",
    "author_association": "MEMBER",
    "body": "Does it help to read ``override`` as \"change what a previously existing identifier refers to\" rather than \"change the implementation of a previously existing function\"?\r\nThe former happens for interface functions, implemented functions and unimplemented functions alike and I'd argue it's something worth making explicit and I think one can construct \"problematic\" cases without mixing abstract contracts and interfaces. But we should, of course, also take care not to over-engineer things like this relative to potentially merely artificial cases...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598824075/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598957596",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-598957596",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 598957596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODk1NzU5Ng==",
    "user": {
      "login": "robinbryce",
      "id": 4013001,
      "node_id": "MDQ6VXNlcjQwMTMwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4013001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robinbryce",
      "html_url": "https://github.com/robinbryce",
      "followers_url": "https://api.github.com/users/robinbryce/followers",
      "following_url": "https://api.github.com/users/robinbryce/following{/other_user}",
      "gists_url": "https://api.github.com/users/robinbryce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robinbryce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robinbryce/subscriptions",
      "organizations_url": "https://api.github.com/users/robinbryce/orgs",
      "repos_url": "https://api.github.com/users/robinbryce/repos",
      "events_url": "https://api.github.com/users/robinbryce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robinbryce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-13T22:32:10Z",
    "updated_at": "2020-03-13T22:32:10Z",
    "author_association": "NONE",
    "body": "Hah! I think that is quite nice mental judo but in my case I read interfaces as saying \"I don't refer to anything yet and you must fill that in\". But that is a very special case of what is generally going on in significant inheritance graphs. I'm content to adapt.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/598957596/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634524328",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-634524328",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 634524328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDUyNDMyOA==",
    "user": {
      "login": "elenadimitrova",
      "id": 703848,
      "node_id": "MDQ6VXNlcjcwMzg0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/703848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elenadimitrova",
      "html_url": "https://github.com/elenadimitrova",
      "followers_url": "https://api.github.com/users/elenadimitrova/followers",
      "following_url": "https://api.github.com/users/elenadimitrova/following{/other_user}",
      "gists_url": "https://api.github.com/users/elenadimitrova/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elenadimitrova/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elenadimitrova/subscriptions",
      "organizations_url": "https://api.github.com/users/elenadimitrova/orgs",
      "repos_url": "https://api.github.com/users/elenadimitrova/repos",
      "events_url": "https://api.github.com/users/elenadimitrova/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elenadimitrova/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-27T08:54:32Z",
    "updated_at": "2020-05-27T08:54:32Z",
    "author_association": "COLLABORATOR",
    "body": "I also feel strongly **for** removing the `override` keyword in interface implementations. Considering interfaces can now inherit too, we could enforce all interface methods are implemented in a contract. This would eliminate the problematic cases described above and is also what I would logically expect when something claims to **be** `I`. Essentially when `contract C is I {..}` we require that all of `I` is implemented in `C`. If `I` it to be implemented across multiple contracts then it can be split down into child interface contracts.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634524328/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/644100901",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-644100901",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 644100901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDEwMDkwMQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-15T12:26:06Z",
    "updated_at": "2020-06-15T12:26:06Z",
    "author_association": "MEMBER",
    "body": "@elenadimitrova what about an abstract contract that adds some functionality to an interface but not everything?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/644100901/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/644117713",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-644117713",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 644117713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDExNzcxMw==",
    "user": {
      "login": "elenadimitrova",
      "id": 703848,
      "node_id": "MDQ6VXNlcjcwMzg0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/703848?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elenadimitrova",
      "html_url": "https://github.com/elenadimitrova",
      "followers_url": "https://api.github.com/users/elenadimitrova/followers",
      "following_url": "https://api.github.com/users/elenadimitrova/following{/other_user}",
      "gists_url": "https://api.github.com/users/elenadimitrova/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elenadimitrova/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elenadimitrova/subscriptions",
      "organizations_url": "https://api.github.com/users/elenadimitrova/orgs",
      "repos_url": "https://api.github.com/users/elenadimitrova/repos",
      "events_url": "https://api.github.com/users/elenadimitrova/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elenadimitrova/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-15T12:56:01Z",
    "updated_at": "2020-06-15T12:56:01Z",
    "author_association": "COLLABORATOR",
    "body": "`abstract` contracts stay unchanged, without the need to override interface methods they implement. For instance:\r\n\r\n```\r\ninterface I {\r\n    function a() external view returns (uint);\r\n    function b() external view returns (uint);\r\n}\r\n\r\n// partially implements I\r\nabstract contract A is I { \r\n    function a() external view returns (uint) {\r\n        return 1;\r\n    }\r\n}\r\n// partially implements I\r\nabstract contract B is I {\r\n    function b() external view returns (uint) {\r\n        return 2;\r\n    }\r\n}\r\ncontract C is I, A, B { }\r\n```\r\nWhat exactly bothers you there?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/644117713/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/644168259",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-644168259",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 644168259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDE2ODI1OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-15T14:26:26Z",
    "updated_at": "2020-06-15T14:26:26Z",
    "author_association": "MEMBER",
    "body": "\"we could enforce all interface methods are implemented in a contract\" - we already do enforce that unless the contract is abstract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/644168259/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/646581609",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-646581609",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 646581609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjU4MTYwOQ==",
    "user": {
      "login": "makoto",
      "id": 2630,
      "node_id": "MDQ6VXNlcjI2MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2630?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/makoto",
      "html_url": "https://github.com/makoto",
      "followers_url": "https://api.github.com/users/makoto/followers",
      "following_url": "https://api.github.com/users/makoto/following{/other_user}",
      "gists_url": "https://api.github.com/users/makoto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/makoto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/makoto/subscriptions",
      "organizations_url": "https://api.github.com/users/makoto/orgs",
      "repos_url": "https://api.github.com/users/makoto/repos",
      "events_url": "https://api.github.com/users/makoto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/makoto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-19T11:19:03Z",
    "updated_at": "2020-06-19T11:19:03Z",
    "author_association": "MEMBER",
    "body": "Am I correct to understand that I have to do `virtual override` if I am using both Interface and Abstract like below?\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.10;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ninterface Foo {\r\n    function foo1() external view returns (uint);\r\n    function bar1() external view returns (uint);\r\n}\r\n\r\n\r\nabstract contract Bar is Foo {\r\n    function bar1() external virtual override view returns (uint) {}\r\n\r\n    function foo1() external view override returns (uint){\r\n        return this.bar1();\r\n    }\r\n}\r\n\r\ncontract Baz is Bar {\r\n    function bar1() external override view  returns (uint){\r\n        return 1;   \r\n    }\r\n}\r\n```\r\n\r\nI was currently trying to upgrade my smartcontract but I end up adding `override` into all functions in the abstract which personally feels like defeating the benefit of having `virtual` and `override` to begin with",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/646581609/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/646841721",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-646841721",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 646841721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Njg0MTcyMQ==",
    "user": {
      "login": "robinbryce",
      "id": 4013001,
      "node_id": "MDQ6VXNlcjQwMTMwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4013001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robinbryce",
      "html_url": "https://github.com/robinbryce",
      "followers_url": "https://api.github.com/users/robinbryce/followers",
      "following_url": "https://api.github.com/users/robinbryce/following{/other_user}",
      "gists_url": "https://api.github.com/users/robinbryce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robinbryce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robinbryce/subscriptions",
      "organizations_url": "https://api.github.com/users/robinbryce/orgs",
      "repos_url": "https://api.github.com/users/robinbryce/repos",
      "events_url": "https://api.github.com/users/robinbryce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robinbryce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-19T20:05:45Z",
    "updated_at": "2020-06-19T20:05:45Z",
    "author_association": "NONE",
    "body": "All of the arguments in favour of override seem to miss the point of ineheritance all together. They are based on largely synthetic examples. And those examples really only illustrate well understood   'gotchas' with Inheritance in general. Really if there is a compeling case for override then inheritance is too dangerous to have in the language all together (somewhat toungue in cheek). \r\n\r\nDevelopers who prioritize explicitness over the established conventions for inheritance are free not to inherit. The burden is then theirs. With respect, override seems to be little more than an opinionated burden on the rest of us. And it is certainly not helping us in any way I recognise.\r\n\r\nRemove override or remove inheritance ;-)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/646841721/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/646846606",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-646846606",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 646846606,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Njg0NjYwNg==",
    "user": {
      "login": "nventuro",
      "id": 2530770,
      "node_id": "MDQ6VXNlcjI1MzA3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2530770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nventuro",
      "html_url": "https://github.com/nventuro",
      "followers_url": "https://api.github.com/users/nventuro/followers",
      "following_url": "https://api.github.com/users/nventuro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nventuro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nventuro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nventuro/subscriptions",
      "organizations_url": "https://api.github.com/users/nventuro/orgs",
      "repos_url": "https://api.github.com/users/nventuro/repos",
      "events_url": "https://api.github.com/users/nventuro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nventuro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-19T20:21:00Z",
    "updated_at": "2020-06-19T20:21:00Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I end up adding override into all functions\r\n\r\nThis is IMO the key issue: `override` becomes meaningless when all functions have it, instead of being an attribute that makes you pay attention and think about the implications of overriding the base definition.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/646846606/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/647518079",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-647518079",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 647518079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzUxODA3OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-22T13:26:05Z",
    "updated_at": "2020-06-22T13:26:05Z",
    "author_association": "MEMBER",
    "body": "@makoto is your intention that `Bar::bar1` is a complete \"default\" implementation of the interface that returns zero? if not, why do you not leave it out?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/647518079/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/862454814",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-862454814",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 862454814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjQ1NDgxNA==",
    "user": {
      "login": "frangio",
      "id": 481465,
      "node_id": "MDQ6VXNlcjQ4MTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/481465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frangio",
      "html_url": "https://github.com/frangio",
      "followers_url": "https://api.github.com/users/frangio/followers",
      "following_url": "https://api.github.com/users/frangio/following{/other_user}",
      "gists_url": "https://api.github.com/users/frangio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frangio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frangio/subscriptions",
      "organizations_url": "https://api.github.com/users/frangio/orgs",
      "repos_url": "https://api.github.com/users/frangio/repos",
      "events_url": "https://api.github.com/users/frangio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frangio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-16T15:00:07Z",
    "updated_at": "2021-06-16T15:00:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another data point on this.... As I was reviewing code, I saw a function definition with an `override` modifier. I was surprised that I didn't see a `super` call in its body, and had to think about the implications, until I realized this function was only declared in an interface and there was no overriding happening.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/862454814/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/862526111",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-862526111",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 862526111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjUyNjExMQ==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-16T16:28:31Z",
    "updated_at": "2021-06-16T16:29:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Seeing this issue for the first time, wanted to add my support. I assume that at least some of the motivation for the `override` keyword was meant to address the issue that Phil Daian pointed out [here](https://pdaian.com/blog/solidity-anti-patterns-fun-with-inheritance-dag-abuse/), by providing a flag when an inheritance collision happens. But echoing @nventuro's statement above:\r\n\r\n>  `override` becomes meaningless when all functions have it, instead of being an attribute that makes you pay attention and think about the implications of overriding the base definition.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/862526111/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/868691689",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-868691689",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 868691689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODY5MTY4OQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-25T16:39:53Z",
    "updated_at": "2021-06-25T16:39:53Z",
    "author_association": "MEMBER",
    "body": "We discussed this on the last call. There seems to be no consensus here so we need more feedback. To make discussion a bit more organized and bring more attention to this issue I have created a forum post laying out the available options and summarizing the most important points from this discussion: [Should overriding function declarations require the `override` keyword?](https://forum.soliditylang.org/t/should-overriding-function-declarations-require-the-override-keyword/347). Please post your opinions there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/868691689/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/875446204",
    "html_url": "https://github.com/ethereum/solidity/issues/8281#issuecomment-875446204",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/8281",
    "id": 875446204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTQ0NjIwNA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-07T09:28:07Z",
    "updated_at": "2021-07-07T09:28:07Z",
    "author_association": "MEMBER",
    "body": "Since we're discussing this again:\r\n\r\nThe example case in which not requiring ``override`` is actually dangerous and can lead to silent unexpected changes in behaviour, if a base interface and a base contract change in a specific way, is only really relevant for overriding unimplemented ``public`` functions. (It relies on some contract calling the unimplemented base function, but it's unlikely to do so externally with an interface function instead of redeclaring the interface function ``public`` and calling it internally.)\r\nGiven that, the actual danger of not requiring ``override`` for interface functions may indeed be minimal (e.g. be the argument that contracts will have to turn ``abstract`` on typos, etc.).\r\n\r\nSo while I personally still think it conceptually makes sense to mark functions overriding interface functions, I'd not object to drop that requirement based on popular opinion :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/875446204/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
