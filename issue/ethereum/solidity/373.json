{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/373",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/373/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/373/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/373/events",
  "html_url": "https://github.com/ethereum/solidity/issues/373",
  "id": 128945058,
  "node_id": "MDU6SXNzdWUxMjg5NDUwNTg=",
  "number": 373,
  "title": "Solc is compiling contracts that claim code length is 0 on function calls",
  "user": {
    "login": "jgostylo",
    "id": 1153587,
    "node_id": "MDQ6VXNlcjExNTM1ODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1153587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jgostylo",
    "html_url": "https://github.com/jgostylo",
    "followers_url": "https://api.github.com/users/jgostylo/followers",
    "following_url": "https://api.github.com/users/jgostylo/following{/other_user}",
    "gists_url": "https://api.github.com/users/jgostylo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jgostylo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jgostylo/subscriptions",
    "organizations_url": "https://api.github.com/users/jgostylo/orgs",
    "repos_url": "https://api.github.com/users/jgostylo/repos",
    "events_url": "https://api.github.com/users/jgostylo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jgostylo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2016-01-26T21:18:41Z",
  "updated_at": "2016-01-28T15:50:23Z",
  "closed_at": "2016-01-28T15:50:19Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Version: 0.2.0-d2f18c73/Release-Darwin/unknown/int linked to libethereum-1.1.1-377f1a37/Release-Darwin/unknown/int\n\nI am going to apologize for the lack of a small reproducible.  I spent all day trying to reproduce this issue with a smaller subset of my contract and I cannot get it to fail without the full contract.\n\nThe hub contract is AccountManager and the rest are spoke contracts.  There is a contract \"account_identity\" that is inherited by other contracts.  The only deployed contract is AccountManager:\n\n```\n// AccountManager.sol\ncontract account_identity {\n  address owner;\n  address[] admins;\n  address[] users;\n\n  modifier ifUser(){\n    bool isUser = false;\n    if (msg.sender == owner)\n      isUser = true;\n    else {\n      for (uint i = 0; i < admins.length; i++){\n        if (msg.sender == admins[i])\n          isUser = true;\n          break;\n      }\n      if (!isUser){\n        for (uint j = 0; j < users.length; j++){\n          if (msg.sender == users[j])\n            isUser = true;\n            break;\n        }\n      }\n    }\n    if (!isUser)\n      throw;\n    _\n  }\n\n  modifier ifAdmin(){\n    bool isAdmin = false;\n    if (msg.sender == owner)\n      isAdmin = true;\n    else {\n      for (uint i = 0; i < admins.length; i++){\n        if (msg.sender == admins[i]){\n          isAdmin = true;\n          break;\n        }\n      }\n    }\n    if (!isAdmin)\n      throw;\n    _\n  }\n\n  modifier ifOwner(){\n    if (msg.sender != owner) throw;\n    _\n  }\n\n  function addAdmin(address _address) ifAdmin returns(bool success){\n    for (uint i = 0; i < admins.length; i++){\n      if (admins[i] == _address)\n        return false;\n    }\n    admins.push(_address);\n    return true;\n  }\n\n  function removeAdmin(address _address) ifAdmin returns(bool success){\n    for (uint i = 0; i < admins.length; i++){\n      if (admins[i] == _address){\n        delete admins[i];\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function isAdmin(address _address) ifAdmin returns(bool success){\n    bool isAdmin = false;\n\n    for (uint i = 0; i < admins.length; i++){\n      if (_address == admins[i]){\n        isAdmin = true;\n        break;\n      }\n    }\n\n    return isAdmin;\n  }\n\n  function addUser(address _address) ifAdmin returns(bool success){\n    for (uint i = 0; i < users.length; i++){\n      if (users[i] == _address)\n        return false;\n    }\n    users.push(_address);\n    return true;\n  }\n\n  function removeUser(address _address) ifAdmin returns(bool success){\n    for (uint i = 0; i < users.length; i++){\n      if (users[i] == _address){\n        delete users[i];\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function isUser(address _address) ifAdmin returns(bool success){\n    bool isUser = false;\n\n    for (uint i = 0; i < users.length; i++){\n      if (_address == users[i]){\n        isUser = true;\n        break;\n      }\n    }\n\n    return isUser;\n  }\n\n  function () {\n    throw;\n  }\n}\n\ncontract AccountManager is account_identity {\n  CompanyCoin companyCoin;\n\n  struct Customer {\n    string name;\n    address id;\n    bool active;\n  }\n\n  mapping (string => Customer) customers;\n\n  function AccountManager() {\n    owner = msg.sender;\n    companyCoin = new CompanyCoin();\n  }\n\n  function createCustomer(string _name, string _companyId, uint _companyCoins) ifUser returns(address id){\n    ClientCompany company = new ClientCompany(_name, _companyId, this);\n    customers[_companyId] = Customer({\n      name: _name,\n      id: company,\n      active: true\n    });\n\n    companyCoin.mint(company, _companyCoins);\n\n    return address(company);\n  }\n\n  function removeCustomer(string _companyId) ifUser returns(bool){\n    customers[_companyId].active = false;\n    return companyCoin.revoke(customers[_companyId].id, 0, true);\n  }\n\n  function getCustomerFunds(string _companyId) ifUser returns(uint funds){\n    return companyCoin.balances(customers[_companyId].id);\n  }\n\n  function checkFundsAndPurchase() ifUser returns(bool didPurchase){\n    if(companyCoin.balances(msg.sender) > 0){\n      companyCoin.revoke(msg.sender, 1, false);\n      return true;\n    }\n    return false;\n  }\n}\n\n\ncontract CompanyCoin {\n  address minter;\n  mapping (address => uint) public balances;\n\n  event Sent(address from, address to, uint amount);\n  event Minted(address to, uint amount);\n  event Revoked(address from, uint amount);\n\n  modifier ifMinter(){\n    if (msg.sender != minter) throw;\n    _\n  }\n\n  function CompanyCoin() {\n      minter = msg.sender;\n  }\n\n  function mint(address _address, uint _amount) ifMinter {\n      balances[_address] += _amount;\n      Minted(_address, _amount);\n  }\n\n  function revoke(address _address, uint _amount, bool _all) ifMinter returns(bool){\n    if(_all || _amount > balances[_address]) {\n      Revoked(_address, balances[_address]);\n      balances[_address] = 0;\n      return true;\n    }\n\n    balances[_address] -= _amount;\n    Revoked(_address, _amount);\n    return true;\n  }\n\n  function send(address receiver, uint amount) {\n      if (balances[msg.sender] < amount) return;\n      balances[msg.sender] -= amount;\n      balances[receiver] += amount;\n      Sent(msg.sender, receiver, amount);\n  }\n\n}\n\n\ncontract ClientCompany is account_identity {\n  AccountManager accountManager;\n  string public companyName;\n  string companyId;\n\n  struct Product {\n    string name;\n    address id;\n    bool active;\n    uint companyIdCount;\n    mapping(string => bool) companyIdPurchased;\n  }\n\n  Product[] products;\n\n  function ClientCompany(string _companyName, string _companyId, AccountManager _accountManager) {\n    owner = msg.sender;\n    accountManager = _accountManager;\n    companyName = _companyName;\n    companyId = _companyId;\n  }\n\n  function createProduct(string _name) ifOwner returns(address id){\n    CompanyProduct c = new CompanyProduct(_name, owner, this);\n    products.push(Product(_name, c, true, 0));\n  }\n\n  function checkCompanyId(address _product, string _companyId, bool _shouldAdd) returns(bool isAvailable){\n    int foundIndex = -1;\n    for (uint i = 0; i < products.length; i++){\n      if (products[i].id == _product){\n        foundIndex = int(i);\n        break;\n      }\n    }\n    if(foundIndex >= 0){\n      uint useIndex = uint(foundIndex);\n      if (products[useIndex].companyIdPurchased[_companyId])\n        return true;\n      if (_shouldAdd){\n        if(addCompanyId(_companyId, _product))\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  function addCompanyId(string _companyId, address _product) returns(bool added){\n    if(accountManager.checkFundsAndPurchase()){\n      for (uint i = 0; i < products.length; i++){\n        if (products[i].id == _product){\n          products[i].companyIdPurchased[_companyId] == true;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n}\n\ncontract CompanyProduct is account_identity {\n  string name;\n\n  event CompanyIdLookup(string name);\n\n  function CompanyProduct(string _name, address _owner, address _parent){\n    name = _name;\n    owner = _owner;\n    addAdmin(_parent);\n  }\n}\n```\n\nAnd the unittest:\n\n``` javascript\n// test/accountmanager.js\ncontract('AccountManager', function(accounts) {\n\n  var fakeCompany = {'co_name': 'My Fake Company', 'companyId': '001231272', 'companyCoin': 350};\n\n  it(\"should add and remove my last account as an admin\", function(done){\n    var accountContract = AccountManager.deployed();\n\n    //var addAdmin;\n    var checkAdmin;\n    var checkRemoved;\n\n    accountContract.addAdmin(accounts[9]).then(function(success){\n      //addAdmin = success;\n      //adminLength = length.toNumber();\n      return accountContract.isAdmin.call(accounts[9]);\n    }).then(function(success){\n      checkAdmin = success;\n      return accountContract.removeAdmin(accounts[9]);\n    }).then(function(success){\n      //removeAdmin = success;\n      return accountContract.isAdmin.call(accounts[9]);\n    }).then(function(success){\n      checkRemoved = success;\n\n      assert.isTrue(checkAdmin, \"Account was not verified as admin\");\n      assert.isFalse(checkRemoved, \"Account was not verified as removed from admin\");\n\n    }).then(done).catch(done);\n  });\n\n\n  it(\"should add and remove my second to last account as a user\", function(done){\n    var accountContract = AccountManager.deployed();\n\n    var checkUser;\n    var checkRemoved;\n\n    accountContract.addUser(accounts[8]).then(function(success){\n      return accountContract.isUser.call(accounts[8]);\n    }).then(function(success){\n      checkUser = success;\n      return accountContract.removeUser(accounts[8]);\n    }).then(function(success){\n      return accountContract.isUser.call(accounts[8]);\n    }).then(function(success){\n      checkRemoved = success;\n\n      assert.isTrue(checkUser, \"Account was not verified as user\");\n      assert.isFalse(checkRemoved, \"Account was not verified as removed from user\");\n\n    }).then(done).catch(done);\n  });\n\n  it(\"should create a customer and check their funds\", function(done){\n    var accountContract = AccountManager.deployed();\n\n    var customerFunds;\n    var customerFundsRevoke;\n\n    accountContract.createCustomer(fakeCompany.co_name, fakeCompany.companyId, fakeCompany.companyCoin).then(function(tx){\n      return accountContract.getCustomerFunds.call(fakeCompany.companyId);\n    }).then(function(funds){\n      customerFunds = funds.toNumber();\n    //   return accountContract.removeCustomer(fakeCompany.companyId);\n    // }).then(function(tx){\n    //   return accountContract.getCustomerFunds.call(fakeCompany.companyId);\n    // }).then(function(funds){\n    //   customerFundsRevoke = funds.toNumber();\n\n      assert.equal(customerFunds, fakeCompany.companyCoin, \"Customer does not have the funds expected\");\n      //assert.equal(customerFundsRevoke, 0, \"Customer does not have the empty funds expected\");\n\n    }).then(done).catch(done);\n  });\n\n});\n```\n\nThis contract compiles but none of the functionality works.  I am using the python testrpc to build/deploy/unit test my contract.  When any calls to my contract are made the EXIT cause is always \"CODE OUT OF RANGE\".  When I debug vm.py from the python ethereum project I see that codelen = len(processed_code) is 0 which is what paths to this error message.\n\nHere is the problem code as I see it.  In the contract around line 149-156 I am accessing the mapping to the Customer struct and I am accessing two different properties from that struct.\n\n```\n  function removeCustomer(string _companyId) ifUser returns(bool){\n    customers[_companyId].active = false;\n    return companyCoin.revoke(customers[_companyId].id, 0, true);\n  }\n\n  function getCustomerFunds(string _companyId) ifUser returns(uint funds){\n    return companyCoin.balances(customers[_companyId].id);\n  }\n```\n\nIf I comment out lines of code that use customers[_companyId] to leave just one active line then the contract works (for everything except what I commented out of course).  I can leave in any one and everything works.  If I have any two of them then nothing works.\n\nAs I said before I attempted to build up a smaller reproducible and I was not able to get it to fail.  I duplicated this project into another space and started to strip things out and it started to not fail.  I get the feeling that this error is caused by the mapping mixed with the interactivity of the contracts.\n\nI assume that this issue is a compiler issue because of the behavior.\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/373/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/373/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/175813428",
    "html_url": "https://github.com/ethereum/solidity/issues/373#issuecomment-175813428",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/373",
    "id": 175813428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTgxMzQyOA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-27T19:34:50Z",
    "updated_at": "2016-01-27T19:34:50Z",
    "author_association": "MEMBER",
    "body": "My first guess would be that if the code is empty, then there was not enough gas to deploy the contract.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/175813428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/175827827",
    "html_url": "https://github.com/ethereum/solidity/issues/373#issuecomment-175827827",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/373",
    "id": 175827827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTgyNzgyNw==",
    "user": {
      "login": "jgostylo",
      "id": 1153587,
      "node_id": "MDQ6VXNlcjExNTM1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1153587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgostylo",
      "html_url": "https://github.com/jgostylo",
      "followers_url": "https://api.github.com/users/jgostylo/followers",
      "following_url": "https://api.github.com/users/jgostylo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgostylo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgostylo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgostylo/subscriptions",
      "organizations_url": "https://api.github.com/users/jgostylo/orgs",
      "repos_url": "https://api.github.com/users/jgostylo/repos",
      "events_url": "https://api.github.com/users/jgostylo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgostylo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-27T20:05:16Z",
    "updated_at": "2016-01-27T20:05:16Z",
    "author_association": "NONE",
    "body": "I think that is a possibility.  Thank you for pointing that out.  When things pass I see an estimated gas cost of:\n1838600\n\nWhen things fail I see an estimated gas cost of:\n2382800\n\nI think 2 million is the magic number.  I will check to see how truffle is doing this.  It seems that with 1 million ether in my test accounts I should have more than enough gas to deploy these contracts.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/175827827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/175843840",
    "html_url": "https://github.com/ethereum/solidity/issues/373#issuecomment-175843840",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/373",
    "id": 175843840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTg0Mzg0MA==",
    "user": {
      "login": "jgostylo",
      "id": 1153587,
      "node_id": "MDQ6VXNlcjExNTM1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1153587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgostylo",
      "html_url": "https://github.com/jgostylo",
      "followers_url": "https://api.github.com/users/jgostylo/followers",
      "following_url": "https://api.github.com/users/jgostylo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgostylo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgostylo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgostylo/subscriptions",
      "organizations_url": "https://api.github.com/users/jgostylo/orgs",
      "repos_url": "https://api.github.com/users/jgostylo/repos",
      "events_url": "https://api.github.com/users/jgostylo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgostylo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-27T20:40:32Z",
    "updated_at": "2016-01-27T20:40:32Z",
    "author_association": "NONE",
    "body": "Ok, I will confirm your suspicion.  I went into the truffle source and found how much gas it is sending for creating a contract and added a 0 to the end.  Things are running once more.  Thank you for helping me track this down and thank you for Solidity!\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/175843840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/176244223",
    "html_url": "https://github.com/ethereum/solidity/issues/373#issuecomment-176244223",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/373",
    "id": 176244223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjI0NDIyMw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-28T15:50:19Z",
    "updated_at": "2016-01-28T15:50:19Z",
    "author_association": "MEMBER",
    "body": "Still, gas should be calculated correctly. That might either be an issue in truffle or in the backend.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/176244223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
