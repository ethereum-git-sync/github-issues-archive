{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11745/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11745/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11745/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11745",
  "id": 960758303,
  "node_id": "MDU6SXNzdWU5NjA3NTgzMDM=",
  "number": 11745,
  "title": "Add #define to Solidity",
  "user": {
    "login": "clemlak",
    "id": 39790678,
    "node_id": "MDQ6VXNlcjM5NzkwNjc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/39790678?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/clemlak",
    "html_url": "https://github.com/clemlak",
    "followers_url": "https://api.github.com/users/clemlak/followers",
    "following_url": "https://api.github.com/users/clemlak/following{/other_user}",
    "gists_url": "https://api.github.com/users/clemlak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/clemlak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/clemlak/subscriptions",
    "organizations_url": "https://api.github.com/users/clemlak/orgs",
    "repos_url": "https://api.github.com/users/clemlak/repos",
    "events_url": "https://api.github.com/users/clemlak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/clemlak/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 455256446,
      "node_id": "MDU6TGFiZWw0NTUyNTY0NDY=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/waiting%20for%20more%20input",
      "name": "waiting for more input",
      "color": "fef2c0",
      "default": false,
      "description": "Issues waiting for more input by the reporter"
    },
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "001dff",
      "default": false,
      "description": "Default level of impact"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2021-08-04T17:15:22Z",
  "updated_at": "2022-11-07T16:59:08Z",
  "closed_at": "2022-11-07T16:59:08Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nAdd a way to define macros using `#define` within the source code to declare constants (numbers, strings, addresses, expressions, etc) and fragments of code:\r\n\r\n```c\r\n#define PI 3141592653589793238\r\n```\r\n\r\n## Motivation\r\n\r\nStoring values and performing computations in a smart contract costs gas (and thus money). However when comes the time to gas golf a contract, a dilemma can appear between optimizing the gas usage as much as possible or keeping the readability of the code.\r\n\r\n### Example 1\r\n\r\nThis simplistic example shows that using a direct numeric value for `PI` obviously consumes less gas than storing and reading its value from a constant variable. However too much optimization might impact both the maintainability and the readability of the code.\r\n\r\n> Case 1, using PI as a constant\r\n\r\n```solidity\r\ncontract PIExample {\r\n    uint256 public constant PI = 3141592653589793238;\r\n    uint256 public area;\r\n    uint256 public circumference;\r\n    \r\n    // 44,450 gas used\r\n    function setArea(uint256 r) external {\r\n        area = PI * r ** 2;\r\n    }\r\n    \r\n    // 44,210 gas used\r\n    function setCircumference(uint256 r) external {\r\n        circumference = 2 * PI * r;\r\n    }\r\n}\r\n```\r\n\r\n> Case 2, using PI value directly\r\n\r\n```solidity\r\ncontract PIExample {\r\n    uint256 public area;\r\n    uint256 public circumference;\r\n    \r\n    // 44,428 gas used\r\n    function setArea(uint256 r) external {\r\n        area = 3141592653589793238 * r ** 2;\r\n    }\r\n    \r\n    // 43,978 gas used\r\n    function setCircumference(uint256 r) external {\r\n        circumference = 2 * 3141592653589793238 * r;\r\n    }\r\n}\r\n```\r\n\r\nProgramming languages such as C allow developers to define macros within the source code. These macros can represent constants but also fragments of code that can receive arguments. These *defines* are preprocessed by the compiler before compiling the actual code.\r\n\r\nHaving this feature in Solidity would (in some cases) avoid the necessity to declare constant variables or private functions and then would reduce the gas cost while keeping the readability of the code.\r\n\r\nThe previous example could then be written as:\r\n\r\n```csharp\r\n#define PI 3141592653589793238\r\n\r\ncontract PIExample {\r\n    uint256 public area;\r\n    uint256 public circumference;\r\n    \r\n    function setArea(uint256 r) external {\r\n        area = PI * r ** 2;\r\n    }\r\n    \r\n    function setCircumference(uint256 r) external {\r\n        circumference = 2 * PI * r;\r\n    }\r\n}\r\n```\r\n\r\n### Example 2\r\n\r\nThis other example compares 3 different cases where two private functions and one constant are used. As expected, using directly the expressions or the values instead of their declarations will reduce the gas cost but also impact the maintainability and readability of the code.\r\n\r\n> Case 1: Private functions and PI constant\r\n\r\n```solidity\r\ncontract PIExample {\r\n    uint256 public constant PI = 3141592653589793238;\r\n    uint256 public area;\r\n    uint256 public circumference;\r\n    \r\n    function calculateArea(uint256 r) private pure returns (uint256) {\r\n        return PI * r ** 2;\r\n    }\r\n    \r\n    function calculateCircumference(uint256 r) private pure returns (uint256) {\r\n        return 2 * PI * r;\r\n    }\r\n    \r\n    // 44,493 gas used\r\n    function setArea(uint256 r) external {\r\n        area = calculateArea(r);\r\n    }\r\n    \r\n    // 44,253 gas used\r\n    function setCircumference(uint256 r) external {\r\n        circumference = calculateCircumference(r);\r\n    }\r\n}\r\n```\r\n\r\n> Case 2: No private functions, with PI constant\r\n\r\n```solidity\r\ncontract PIExample {\r\n    uint256 public constant PI = 3141592653589793238;\r\n    uint256 public area;\r\n    uint256 public circumference;\r\n    \r\n    // 44,450 gas used\r\n    function setArea(uint256 r) external {\r\n        area = PI * r ** 2;\r\n    }\r\n    \r\n    // 44,210 gas used\r\n    function setCircumference(uint256 r) external {\r\n        circumference = 2 * PI * r;\r\n    }\r\n}\r\n```\r\n\r\n> Case 3: No private functions, no PI constant\r\n\r\n```solidity\r\ncontract PIExample {\r\n    uint256 public area;\r\n    uint256 public circumference;\r\n    \r\n    // 44,428 gas used\r\n    function setArea(uint256 r) external {\r\n        area = 3141592653589793238 * r ** 2;\r\n    }\r\n    \r\n    // 43,978 gas used\r\n    function setCircumference(uint256 r) external {\r\n        circumference = 2 * 3141592653589793238 * r;\r\n    }\r\n}\r\n```\r\n\r\nUsing `#define`, the previous example could be written as:\r\n\r\n```csharp\r\n#define PI 3141592653589793238\r\n#define calculateArea(r) (PI * r * r)\r\n#define calculateCircumference(r) (2 * PI * R)\r\n\r\ncontract PIExample {\r\n    uint256 public area;\r\n    uint256 public circumference;\r\n    \r\n    // 44,428 gas used\r\n    function setArea(uint256 r) external {\r\n        area = calculateArea(r);\r\n    }\r\n    \r\n    // 43,978 gas used\r\n    function setCircumference(uint256 r) external {\r\n        circumference = calculateCircumference(r);\r\n    }\r\n    \r\n    /**\r\n     * Now calculateArea(r) and calculateCircumference(r) can be reused\r\n     * multiple times in different functions with no additional gas cost\r\n     */\r\n}\r\n```\r\n\r\nObviously these 2 examples are depicting very basic use cases of the `#define` macro, and even if the improvement of both the gas cost and the readability might not be obviously here, the impact on large-scale projects might be significant.\r\n\r\nAdditionally, these macros could also be used to:\r\n- Reduce the storage of some math libraries by replacing constant variables\r\n- Reduce the gas cost of large projects by replacing private functions\r\n- Etc\r\n\r\n*Note: A suggested way to achieve this feature without modifying the Solidity language was to use an external preprocessing tool, such as [hardhat-preprocessor](https://hardhat.org/plugins/hardhat-preprocessor.html). However, relying on an external tool is not an option since it would result in writing non-standard Solidity code and would break the compatibility with many tools.*\r\n\r\n## Specification\r\n\r\nThe specification of the `#define` macro would be very similar to the one used in the C programming language.\r\n\r\n### Simple macro\r\n\r\nA simple macro is a fragment of code defined by a name using `#define`:\r\n\r\n```c\r\n#define PI 31415\r\n#define SOME_ADDRESS 0x012345...\r\n```\r\n\r\nEvery time the compiler would encounter `PI` in the code, it would replace it by `31415`, etc.\r\n\r\n### Function-like macro\r\n\r\nMore complex macros could be defined too: function-like macros. These special macros would work like a function call and would accept arguments.\r\n\r\n```c\r\n#define PI 31415\r\n#define circleArea(r) (PI * r * r)\r\n#define max(a, b) (a < b) ? b : a\r\n```\r\n\r\nThe compiler would then replace `circleArea(r)` by `(31415 * r * r)`, etc.\r\n\r\n### Multiline macro\r\n\r\nMacros could also be defined on multiple lines, such as:\r\n\r\n```c\r\n#define PI\\\r\n        3141592653589793238\r\n```\r\n\r\n### Inheritance\r\n\r\nMacros should be available in the child contracts.\r\n\r\n## Backwards Compatibility\r\n\r\nThe addition of this feature would not impact the compatibility with previous Solidity version.",
  "closed_by": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11745/reactions",
    "total_count": 6,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11745/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/893249992",
    "html_url": "https://github.com/ethereum/solidity/issues/11745#issuecomment-893249992",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
    "id": 893249992,
    "node_id": "IC_kwDOAm_5kc41PenI",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-05T07:59:35Z",
    "updated_at": "2021-08-05T07:59:35Z",
    "author_association": "MEMBER",
    "body": "> This simplistic example shows that using a direct numeric value for PI obviously consumes less gas than storing and reading its value from a constant variable.\r\n\r\n@clemlak Did you use a solidity version `>= 0.8.4` and enabled optimization for this comparison? Could you please share the gas comparisons?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/893249992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/893261606",
    "html_url": "https://github.com/ethereum/solidity/issues/11745#issuecomment-893261606",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
    "id": 893261606,
    "node_id": "IC_kwDOAm_5kc41Phcm",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-05T08:15:53Z",
    "updated_at": "2021-09-23T18:24:02Z",
    "author_association": "MEMBER",
    "body": "```\r\n#define circleArea(r) (PI * r * r)\r\n#define max(a, b) (a < b) ? b : a\r\n```\r\n\r\nA problem with macros like this is that they don't have proper type checking. I would say that this goes against the goal of type safety in the language\r\n\r\n---\r\n\r\nIf the goal of macros when compared to proper typed functions / typed constants is merely gas, this can be fixed by the optimizer. The Yul based codegen and it's optimizer (not enabled by default; but will be the standard in future solidity versions) has an inliner that can inline these constants and small functions, making the gas of macro v/s optimized code to be the same (You can already test this with command `--experimental-via-ir --optimize` or the corresponding standard json settings.) \r\n\r\nAs for current solidity, in version `0.8.2`, we included a simple bytecode level inliner that should inline the code examples from above. I believe this should be able to cover at least the constants and small functions without any control flow. We purposefully kept this inliner simple for now. If you have specific examples that you think should be covered by the inliner, we can take a look.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/893261606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/893287468",
    "html_url": "https://github.com/ethereum/solidity/issues/11745#issuecomment-893287468",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
    "id": 893287468,
    "node_id": "IC_kwDOAm_5kc41Pnws",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-05T08:56:16Z",
    "updated_at": "2021-08-05T08:56:16Z",
    "author_association": "MEMBER",
    "body": "Duplicate of #10 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/893287468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/920388787",
    "html_url": "https://github.com/ethereum/solidity/issues/11745#issuecomment-920388787",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
    "id": 920388787,
    "node_id": "IC_kwDOAm_5kc423ASz",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-15T21:18:03Z",
    "updated_at": "2021-09-15T21:18:03Z",
    "author_association": "NONE",
    "body": "> ## Abstract\r\n> Add a way to define macros using `#define` within the source code to declare constants (numbers, strings, addresses, expressions, etc) and fragments of code:\r\n> \r\n> ```c\r\n> #define PI 3141592653589793238\r\n> ```\r\n> \r\n> ## Motivation\r\n> Storing values and performing computations in a smart contract costs gas (and thus money). However when comes the time to gas golf a contract, a dilemma can appear between optimizing the gas usage as much as possible or keeping the readability of the code.\r\n> \r\n> ### Example 1\r\n> This simplistic example shows that using a direct numeric value for `PI` obviously consumes less gas than storing and reading its value from a constant variable. However too much optimization might impact both the maintainability and the readability of the code.\r\n> \r\n> > Case 1, using PI as a constant\r\n> \r\n> ```solidity\r\n> contract PIExample {\r\n>     uint256 public constant PI = 3141592653589793238;\r\n>     uint256 public area;\r\n>     uint256 public circumference;\r\n>     \r\n>     // 44,450 gas used\r\n>     function setArea(uint256 r) external {\r\n>         area = PI * r ** 2;\r\n>     }\r\n>     \r\n>     // 44,210 gas used\r\n>     function setCircumference(uint256 r) external {\r\n>         circumference = 2 * PI * r;\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> > Case 2, using PI value directly\r\n> \r\n> ```solidity\r\n> contract PIExample {\r\n>     uint256 public area;\r\n>     uint256 public circumference;\r\n>     \r\n>     // 44,428 gas used\r\n>     function setArea(uint256 r) external {\r\n>         area = 3141592653589793238 * r ** 2;\r\n>     }\r\n>     \r\n>     // 43,978 gas used\r\n>     function setCircumference(uint256 r) external {\r\n>         circumference = 2 * 3141592653589793238 * r;\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> Programming languages such as C allow developers to define macros within the source code. These macros can represent constants but also fragments of code that can receive arguments. These _defines_ are preprocessed by the compiler before compiling the actual code.\r\n> \r\n> Having this feature in Solidity would (in some cases) avoid the necessity to declare constant variables or private functions and then would reduce the gas cost while keeping the readability of the code.\r\n> \r\n> The previous example could then be written as:\r\n> \r\n> ```cs\r\n> #define PI 3141592653589793238\r\n> \r\n> contract PIExample {\r\n>     uint256 public area;\r\n>     uint256 public circumference;\r\n>     \r\n>     function setArea(uint256 r) external {\r\n>         area = PI * r ** 2;\r\n>     }\r\n>     \r\n>     function setCircumference(uint256 r) external {\r\n>         circumference = 2 * PI * r;\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> ### Example 2\r\n> This other example compares 3 different cases where two private functions and one constant are used. As expected, using directly the expressions or the values instead of their declarations will reduce the gas cost but also impact the maintainability and readability of the code.\r\n> \r\n> > Case 1: Private functions and PI constant\r\n> \r\n> ```solidity\r\n> contract PIExample {\r\n>     uint256 public constant PI = 3141592653589793238;\r\n>     uint256 public area;\r\n>     uint256 public circumference;\r\n>     \r\n>     function calculateArea(uint256 r) private pure returns (uint256) {\r\n>         return PI * r ** 2;\r\n>     }\r\n>     \r\n>     function calculateCircumference(uint256 r) private pure returns (uint256) {\r\n>         return 2 * PI * r;\r\n>     }\r\n>     \r\n>     // 44,493 gas used\r\n>     function setArea(uint256 r) external {\r\n>         area = calculateArea(r);\r\n>     }\r\n>     \r\n>     // 44,253 gas used\r\n>     function setCircumference(uint256 r) external {\r\n>         circumference = calculateCircumference(r);\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> > Case 2: No private functions, with PI constant\r\n> \r\n> ```solidity\r\n> contract PIExample {\r\n>     uint256 public constant PI = 3141592653589793238;\r\n>     uint256 public area;\r\n>     uint256 public circumference;\r\n>     \r\n>     // 44,450 gas used\r\n>     function setArea(uint256 r) external {\r\n>         area = PI * r ** 2;\r\n>     }\r\n>     \r\n>     // 44,210 gas used\r\n>     function setCircumference(uint256 r) external {\r\n>         circumference = 2 * PI * r;\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> > Case 3: No private functions, no PI constant\r\n> \r\n> ```solidity\r\n> contract PIExample {\r\n>     uint256 public area;\r\n>     uint256 public circumference;\r\n>     \r\n>     // 44,428 gas used\r\n>     function setArea(uint256 r) external {\r\n>         area = 3141592653589793238 * r ** 2;\r\n>     }\r\n>     \r\n>     // 43,978 gas used\r\n>     function setCircumference(uint256 r) external {\r\n>         circumference = 2 * 3141592653589793238 * r;\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> Using `#define`, the previous example could be written as:\r\n> \r\n> ```cs\r\n> #define PI 3141592653589793238\r\n> #define calculateArea(r) (PI * r * r)\r\n> #define calculateCircumference(r) (2 * PI * R)\r\n> \r\n> contract PIExample {\r\n>     uint256 public area;\r\n>     uint256 public circumference;\r\n>     \r\n>     // 44,428 gas used\r\n>     function setArea(uint256 r) external {\r\n>         area = calculateArea(r);\r\n>     }\r\n>     \r\n>     // 43,978 gas used\r\n>     function setCircumference(uint256 r) external {\r\n>         circumference = calculateCircumference(r);\r\n>     }\r\n>     \r\n>     /**\r\n>      * Now calculateArea(r) and calculateCircumference(r) can be reused\r\n>      * multiple times in different functions with no additional gas cost\r\n>      */\r\n> }\r\n> ```\r\n> \r\n> Obviously these 2 examples are depicting very basic use cases of the `#define` macro, and even if the improvement of both the gas cost and the readability might not be obviously here, the impact on large-scale projects might be significant.\r\n> \r\n> Additionally, these macros could also be used to:\r\n> \r\n> * Reduce the storage of some math libraries by replacing constant variables\r\n> * Reduce the gas cost of large projects by replacing private functions\r\n> * Etc\r\n> \r\n> _Note: A suggested way to achieve this feature without modifying the Solidity language was to use an external preprocessing tool, such as [hardhat-preprocessor](https://hardhat.org/plugins/hardhat-preprocessor.html). However, relying on an external tool is not an option since it would result in writing non-standard Solidity code and would break the compatibility with many tools._\r\n> \r\n> ## Specification\r\n> The specification of the `#define` macro would be very similar to the one used in the C programming language.\r\n> \r\n> ### Simple macro\r\n> A simple macro is a fragment of code defined by a name using `#define`:\r\n> \r\n> ```c\r\n> #define PI 31415\r\n> #define SOME_ADDRESS 0x012345...\r\n> ```\r\n> \r\n> Every time the compiler would encounter `PI` in the code, it would replace it by `31415`, etc.\r\n> \r\n> ### Function-like macro\r\n> More complex macros could be defined too: function-like macros. These special macros would work like a function call and would accept arguments.\r\n> \r\n> ```c\r\n> #define PI 31415\r\n> #define circleArea(r) (PI * r * r)\r\n> #define max(a, b) (a < b) ? b : a\r\n> ```\r\n> \r\n> The compiler would then replace `circleArea(r)` by `(31415 * r * r)`, etc.\r\n> \r\n> ### Multiline macro\r\n> Macros could also be defined on multiple lines, such as:\r\n> \r\n> ```c\r\n> #define PI\\\r\n>         3141592653589793238\r\n> ```\r\n> \r\n> ### Inheritance\r\n> Macros should be available in the child contracts.\r\n> \r\n> ## Backwards Compatibility\r\n> The addition of this feature would not impact the compatibility with previous Solidity version.\r\n\r\nA project has already implemented this functionality:\r\nhttps://github.com/MerkleX/tSol\r\n\r\nI used it briefly [sambacha/transpiler-solidity/tree/trunk](https://github.com/sambacha/transpiler-solidity/tree/trunk), it has to use a modified build system (gradle) to properly deploy on chain. \r\n\r\nTrail of Bits did a security audit of the original repo, however the audit was not published publicly. \r\n\r\nHopefully this adds some clarity to your proposal. As you can see by https://github.com/ethereum/solidity/issues/10 this is a long standing debate. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/920388787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/926049963",
    "html_url": "https://github.com/ethereum/solidity/issues/11745#issuecomment-926049963",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
    "id": 926049963,
    "node_id": "IC_kwDOAm_5kc43Mmar",
    "user": {
      "login": "banshee",
      "id": 14540,
      "node_id": "MDQ6VXNlcjE0NTQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/14540?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/banshee",
      "html_url": "https://github.com/banshee",
      "followers_url": "https://api.github.com/users/banshee/followers",
      "following_url": "https://api.github.com/users/banshee/following{/other_user}",
      "gists_url": "https://api.github.com/users/banshee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/banshee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/banshee/subscriptions",
      "organizations_url": "https://api.github.com/users/banshee/orgs",
      "repos_url": "https://api.github.com/users/banshee/repos",
      "events_url": "https://api.github.com/users/banshee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/banshee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T18:21:54Z",
    "updated_at": "2021-09-23T18:21:54Z",
    "author_association": "NONE",
    "body": "> As for current solidity, in version `0.8.4`, we included a simple bytecode level inliner that should inline the code examples from above. I believe this should be able to cover at least the constants and small functions without any control flow. We purposefully kept this inliner simple for now. If you have specific examples that you think should be covered by the inliner, we can take a look.\r\n\r\nOne motivation for this kind of thing is to define the constants on the compiler command line, not in the files.  You'd do this in a file:\r\n\r\n```\r\n#ifndef SOME_ADDRESS\r\n#error you must define SOME_ADDRESS to be some address\r\n#ifndef\r\n```\r\n\r\nand then on the compiler command line you'd do\r\n\r\n```\r\ninvokeTheSolCompiler -DSOME_ADDRESS=0xabcdefg\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/926049963/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/926533005",
    "html_url": "https://github.com/ethereum/solidity/issues/11745#issuecomment-926533005",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
    "id": 926533005,
    "node_id": "IC_kwDOAm_5kc43OcWN",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-24T10:52:32Z",
    "updated_at": "2021-09-24T10:52:32Z",
    "author_association": "MEMBER",
    "body": "> One motivation for this kind of thing is to define the constants on the compiler command line, not in the files. \r\n\r\n@banshee for this use case I think #1650 is a better solution as it fits the syntax more nicely.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/926533005/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/934539382",
    "html_url": "https://github.com/ethereum/solidity/issues/11745#issuecomment-934539382",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
    "id": 934539382,
    "node_id": "IC_kwDOAm_5kc43s_B2",
    "user": {
      "login": "sambacha",
      "id": 32783916,
      "node_id": "MDQ6VXNlcjMyNzgzOTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/32783916?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sambacha",
      "html_url": "https://github.com/sambacha",
      "followers_url": "https://api.github.com/users/sambacha/followers",
      "following_url": "https://api.github.com/users/sambacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/sambacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sambacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sambacha/subscriptions",
      "organizations_url": "https://api.github.com/users/sambacha/orgs",
      "repos_url": "https://api.github.com/users/sambacha/repos",
      "events_url": "https://api.github.com/users/sambacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sambacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-05T15:56:49Z",
    "updated_at": "2021-10-05T15:56:49Z",
    "author_association": "NONE",
    "body": "> > As for current solidity, in version `0.8.4`, we included a simple bytecode level inliner that should inline the code examples from above. I believe this should be able to cover at least the constants and small functions without any control flow. We purposefully kept this inliner simple for now. If you have specific examples that you think should be covered by the inliner, we can take a look.\r\n> \r\n> One motivation for this kind of thing is to define the constants on the compiler command line, not in the files. You'd do this in a file:\r\n> \r\n> ```\r\n> #ifndef SOME_ADDRESS\r\n> #error you must define SOME_ADDRESS to be some address\r\n> #ifndef\r\n> ```\r\n> \r\n> and then on the compiler command line you'd do\r\n> \r\n> ```\r\n> invokeTheSolCompiler -DSOME_ADDRESS=0xabcdefg\r\n> ```\r\n\r\nmakes sense, esp. after seeing @axic link to https://github.com/ethereum/solidity/issues/1650\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/934539382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1006811106",
    "html_url": "https://github.com/ethereum/solidity/issues/11745#issuecomment-1006811106",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
    "id": 1006811106,
    "node_id": "IC_kwDOAm_5kc48Arfi",
    "user": {
      "login": "Nielsbishere",
      "id": 28758736,
      "node_id": "MDQ6VXNlcjI4NzU4NzM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/28758736?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nielsbishere",
      "html_url": "https://github.com/Nielsbishere",
      "followers_url": "https://api.github.com/users/Nielsbishere/followers",
      "following_url": "https://api.github.com/users/Nielsbishere/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nielsbishere/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nielsbishere/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nielsbishere/subscriptions",
      "organizations_url": "https://api.github.com/users/Nielsbishere/orgs",
      "repos_url": "https://api.github.com/users/Nielsbishere/repos",
      "events_url": "https://api.github.com/users/Nielsbishere/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nielsbishere/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-06T18:18:42Z",
    "updated_at": "2022-01-06T18:18:42Z",
    "author_association": "NONE",
    "body": "I'm also in need of this;\r\n`function x() testPublicOrExternal`\r\nWhere I can set a define testPublicOrExternal to `external` if it's production and `public` if it's a test. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1006811106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1305908864",
    "html_url": "https://github.com/ethereum/solidity/issues/11745#issuecomment-1305908864",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11745",
    "id": 1305908864,
    "node_id": "IC_kwDOAm_5kc5N1paA",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-07T16:59:08Z",
    "updated_at": "2022-11-07T16:59:08Z",
    "author_association": "MEMBER",
    "body": "Closing this both as a duplicate of the already mentioned issues and as well as a feature we will most likely not implement (superior solutions like proper compile-time-constant expression evaluation are in our pipeline).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1305908864/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
