{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3525/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3525/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3525/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3525",
  "id": 297443151,
  "node_id": "MDU6SXNzdWUyOTc0NDMxNTE=",
  "number": 3525,
  "title": "User defined types in Yul",
  "user": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4438003076,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaNhA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20effort",
      "name": "medium effort",
      "color": "ff7df7",
      "default": false,
      "description": "Default level of effort"
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "001dff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4525128519,
      "node_id": "LA_kwDOAm_5kc8AAAABDbf7Rw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/needs%20design",
      "name": "needs design",
      "color": "18F737",
      "default": false,
      "description": "The proposal is too vague to be implemented right away"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-02-15T13:20:37Z",
  "updated_at": "2022-09-26T19:04:35Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "User defined types, if used properly, can be useful. (This we have discussed multiple times, recently today on gitter.)\r\n\r\nFor example, in `mstore`  we want to make sure that memory pointers and values are never swapped by mistake.\r\n\r\nWe could use a new `typedef` keyword in assembly to achieve that, which takes an underlying base type and creates two special functions for typecasting. It also allows the user type to be used in literals and the value range of the base type is enforced.\r\n\r\n```\r\ntypedef <user_type> -> <base_type>\r\n// or typedef <base_type> as <user_type>\r\n\r\n// creates these two functions:\r\nfunction cast_<user_type>_to_<base_type>(a:<user_type>) -> b:<base_type> {}\r\nfunction cast_<base_type>_to_<user_type>(a:<base_type>) -> b:<user_type> {}\r\n\r\n// allows this:\r\nlet a:<user_type> := 1234:<user_type>\r\n```\r\n\r\nA real world example:\r\n```\r\ntypedef memptr -> u256\r\n\r\nfunction add_memptr(a: memptr, b: u256) -> c:memptr {\r\n  x := cast_u256_to_memptr(add(cast_memptr_to_u256(a), b))\r\n}\r\n\r\nlet a:memptr := 64:memptr\r\nmstore(a, 1:u256)\r\na := add_memptr(a, 32:u256)\r\nmstore(a, 2:u256)\r\n```\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3525/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3525/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365927406",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-365927406",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 365927406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTkyNzQwNg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T13:30:11Z",
    "updated_at": "2018-02-15T13:30:11Z",
    "author_association": "MEMBER",
    "body": "Alternatively special functions could be introduced such as `cast:memptr()` and `cast:u256()` (or even C++ like `cast<memptr>()`) instead of `cast_u256_to_memptr` and `cast_memptr_to_u256`, respectively.\r\n\r\nIt seems however that would conflict with the current parser and not sure we want to introduce any more complexity in that regard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365927406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/549498612",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-549498612",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 549498612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTQ5ODYxMg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-04T19:00:53Z",
    "updated_at": "2019-11-04T19:00:53Z",
    "author_association": "MEMBER",
    "body": "Since we support dots in function names, how about `convert.<from>_to_<to>` instead of the `cast_<from>_to_<to>` syntax?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/549498612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/549812022",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-549812022",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 549812022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTgxMjAyMg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-05T12:58:14Z",
    "updated_at": "2019-11-05T12:58:14Z",
    "author_association": "MEMBER",
    "body": "`<from>.to.<to>`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/549812022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621318882",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-621318882",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 621318882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTMxODg4Mg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-29T16:23:33Z",
    "updated_at": "2020-04-29T16:23:53Z",
    "author_association": "MEMBER",
    "body": "We could also ask the user to provide the names of the conversion functions as part of the typedef:\r\n\r\n`typedef <a> as <b> convertvia a_to_b, b_to_a;`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621318882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621324220",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-621324220",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 621324220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTMyNDIyMA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-29T16:33:05Z",
    "updated_at": "2020-04-29T16:33:05Z",
    "author_association": "MEMBER",
    "body": "Feedback from the summit: maybe user defined types are not too urgent, but having specific types from dialect (#7830) would be useful.\r\n\r\nI suggest we consider the following types for the EVM dialect:\r\n- address -> `address`\r\n- memory pointer -> `memptr`\r\n- storage key?\r\n- storage pointer? \r\n- calldata pointer?\r\n\r\nAnd define typecasting functions for them in the form of `<from>_to_<to>`, e.g. `memptr_to_u256` and `u256_to_memptr`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621324220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621326123",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-621326123",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 621326123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTMyNjEyMw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-29T16:36:35Z",
    "updated_at": "2020-04-29T16:36:35Z",
    "author_association": "MEMBER",
    "body": "The benefit of having to specify the names of the conversion functions is that it allows you to search for a function being referenced and see that it is a conversion function or not.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621326123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621332324",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-621332324",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 621332324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTMzMjMyNA==",
    "user": {
      "login": "SilentCicero",
      "id": 9806174,
      "node_id": "MDQ6VXNlcjk4MDYxNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9806174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SilentCicero",
      "html_url": "https://github.com/SilentCicero",
      "followers_url": "https://api.github.com/users/SilentCicero/followers",
      "following_url": "https://api.github.com/users/SilentCicero/following{/other_user}",
      "gists_url": "https://api.github.com/users/SilentCicero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SilentCicero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SilentCicero/subscriptions",
      "organizations_url": "https://api.github.com/users/SilentCicero/orgs",
      "repos_url": "https://api.github.com/users/SilentCicero/repos",
      "events_url": "https://api.github.com/users/SilentCicero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SilentCicero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-29T16:47:54Z",
    "updated_at": "2020-04-29T16:48:11Z",
    "author_association": "NONE",
    "body": "### My preferences:\r\n```\r\ndefine SomeType as uint256\r\ndefine OtherType as uint256, uint32\r\n\r\ncast(SomeType, uint8) // like datacopy etc *special functional notation*\r\n\r\ndefine MemoryLocation as pointer\r\ndefine StorageLocation as pointer\r\n\r\nfunction something(a:MemoryLocation, b:StorageLocation) {}\r\n```\r\n\r\n### Typedef:\r\nI also prefer `define` vs `typedef` in that case you're cutting the word define off. This is not Yulish IMO.\r\n\r\n```\r\ntype Nick as uint8\r\ndefine Nick as uint8\r\n```\r\n\r\nI like `type` or `define` not `typedef` (i.e. be explicit and clear, it's also similar to TypeScript)\r\n\r\n### Pointer conversation:\r\nI like a general pointer type, more basic. Not against though a memory / storage pointer. But for now even basic pointer is fine. I don't really like the idea of converting between memory pointers and storage pointers but I see the safety reasons for it.\r\n\r\nIf we add mem/storage, I like the below statement:\r\n\r\n```\r\ndefine Nick as storagepointer // use the full word like datacopy etc\r\ndefine Nick as memorypointer // use full word\r\n\r\nor\r\n\r\ndefine Nick as spointer // like sstore\r\ndefine Nick as mpointer // like mstore\r\n```\r\n\r\n### Address Builtin Type:\r\nYou could do an address type, but is it not more strict to define uint160 instead.\r\n\r\n```\r\ndefine Contract as address // address does seem clearer\r\ndefine Contract as uint160\r\n```\r\n\r\n### Casting:\r\nI sometimes which case was just a function (i know it doesn't make sense) but.. cast(t1, t2).. like datacopy etc.\r\n\r\n```\r\ncast(uint160, bool)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621332324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621749117",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-621749117",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 621749117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTc0OTExNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-30T10:28:54Z",
    "updated_at": "2020-04-30T10:28:54Z",
    "author_association": "MEMBER",
    "body": "@SilentCicero can you elaborate on how `cast(uint160, bool)` would work? The current idea is that there are only conversion functions from a user-defined type to its base type and vice-versa - because that is the bare minimum you need in order to operate. Everything else can be done by user-defined functions.\r\n\r\nSo assuming you meant `cast(address, uint160)` - how would you apply such a function to variables of that type?\r\n\r\nI think it makes sense to abbreviate the word `pointer` to `ptr` - you probably have to write it a lot. So either `memptr` or `mptr`.\r\n\r\nFurthermore, I think we should introduce as many types as make sense on the EVM (this also means that `uint8` and such should not be built-in types) and type the parameters to the built-in functions. The reason is that this is a good protection against confusing the parameters - just think about the `call` bulitin function!\r\n\r\nExtensive list, could be trimmed down:\r\n\r\nuint256\r\nint256 (sdiv!)\r\nbool (iszero - but maybe not)\r\nbytes32 (distinction between arithmetic and bitwise functions, maybe overkill)\r\nmemptr\r\nmemlength (the only thing that can be added to a memptr and is used for the length params, maybe overkill)\r\nsslot / storageptr / storageslot (I'm leaning towards `slot` since storage is not byte-addressable)\r\ngas (probably overkill)\r\naddress\r\nbalance / wei (probably overkill)\r\ncalldataptr\r\ncalldatalength (could also have generic `length` type, which can also be returned by `returndatasize`)\r\n\r\nThinking about this again, maybe the following is a good choice:\r\n\r\nuint256\r\nint256\r\nbool\r\nbytes32\r\nmemptr\r\nlength\r\nsslot\r\ngas\r\naddress\r\nwei\r\ncalldataptr",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621749117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621749804",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-621749804",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 621749804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTc0OTgwNA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-30T10:30:24Z",
    "updated_at": "2020-04-30T10:30:24Z",
    "author_association": "MEMBER",
    "body": "Sorry, this got out of hand away from user-defined types. My current preferred solution for the typedef would be:\r\n\r\n`type UserName as uint256 via uint256_to_UserName, UserName_to_uint256`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/621749804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/633471448",
    "html_url": "https://github.com/ethereum/solidity/issues/3525#issuecomment-633471448",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3525",
    "id": 633471448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzQ3MTQ0OA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-25T09:16:31Z",
    "updated_at": "2020-05-25T09:16:31Z",
    "author_association": "MEMBER",
    "body": "I'm wondering if it makes sense to allow for user-defined restrictions on existing built-in functions. For example, if we have\r\n\r\n```\r\ntype mptr as u256 via u256_to_mptr, mptr_to_u256\r\n```\r\n\r\nthen we would like `mload(u256)->u256` to change to `mload(mptr)->u256`. Without that, the user-defined type is not really helpful.\r\n\r\nShould we add\r\n```\r\nrestrict mload(mptr) -> u256\r\n```\r\nwhere the listed types (note we only have types here, no variable names) have to have a base type that equals the actual types of the builtins. This statement has the effect that the named function changes its signature in the scope of the statement.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/633471448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
