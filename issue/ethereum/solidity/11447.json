{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11447",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11447/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11447/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11447/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11447",
  "id": 902814970,
  "node_id": "MDU6SXNzdWU5MDI4MTQ5NzA=",
  "number": 11447,
  "title": "Support safe shift-left in solc 0.8.x",
  "user": {
    "login": "barakman",
    "id": 7003246,
    "node_id": "MDQ6VXNlcjcwMDMyNDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barakman",
    "html_url": "https://github.com/barakman",
    "followers_url": "https://api.github.com/users/barakman/followers",
    "following_url": "https://api.github.com/users/barakman/following{/other_user}",
    "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
    "organizations_url": "https://api.github.com/users/barakman/orgs",
    "repos_url": "https://api.github.com/users/barakman/repos",
    "events_url": "https://api.github.com/users/barakman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barakman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2021-05-26T19:06:25Z",
  "updated_at": "2021-05-28T15:20:37Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nThe shift-left operation can overflow.\r\n\r\nYet, unlike all other arithmetic operations of this nature, shift-left does not revert upon overflow.\r\n\r\n## Motivation\r\n\r\nStarting from solc 0.8.0, every arithmetic operation which has the potential to overflow, reverts upon overflow.\r\n\r\nEvery arithmetic operation - except for shift-left.\r\n\r\nIn other words, every expression consisting of `<<` or `<<=` may yield incorrect result.\r\n\r\n[The official documentation](https://docs.soliditylang.org/en/v0.8.0/control-structures.html#checked-or-unchecked-arithmetic) is clear about this fact.\r\n\r\nNevertheless, anyone unfamiliar with it, is in for a world of hurt.\r\n\r\n## Specification\r\n\r\nMy suggestion is to align the behavior of shift-left upon overflow to be compatible with that of all other arithmetic operations.\r\n\r\n## Side Note\r\n\r\nThe official documentation also lists division and modulo as arithmetic operations which are checked starting from solc 0.8.0.\r\n\r\nWhile this may be correct in the sense that these two operations will from now on return a 'revert' opcode instead of an 'invalid' opcode (which impacts the gas cost inflicted on the caller), the context of this entire section is overflow and underflow handling.\r\n\r\nAnd under this context, it seems inappropriate to mention these two operations, since they obviously never overflow or underflow (at least when the operands are `unsigned`, I'm not really sure about the definition of 'overflow' and 'underflow' when the operands are `signed`).\r\n\r\nSo my additional suggestion is to somehow differentiate these operations from all the rest, explain what 'checked' means with respect to them, and perhaps even elaborate on the 'revert vs invalid' opcode issue.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11447/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11447/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849486500",
    "html_url": "https://github.com/ethereum/solidity/issues/11447#issuecomment-849486500",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11447",
    "id": 849486500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTQ4NjUwMA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T09:31:55Z",
    "updated_at": "2021-05-27T09:31:55Z",
    "author_association": "MEMBER",
    "body": "Can you provide some examples where the \"overflow\" check for shift would be useful? Since shifts operate on the bit-representation, we assumed that truncation is the expected behaviour. I currently cannot think of a situation where you would want to check for bits being shifted out of the range.\r\n\r\nAlso, just for clarification, I myself consider shift a bit operation instead of an arithmetic operation, since it is usually not defined based on its arithmetic/numeric semantics, but on the semantics of the bit representation of the values.\r\n\r\nAbout your side note: This is solely for the case `type(int).min / -1`. I think for `%` overflow can actually never occur. Still it might be useful to list all the arithmetic operations.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849486500/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849506008",
    "html_url": "https://github.com/ethereum/solidity/issues/11447#issuecomment-849506008",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11447",
    "id": 849506008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTUwNjAwOA==",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T10:03:37Z",
    "updated_at": "2021-05-27T10:05:09Z",
    "author_association": "NONE",
    "body": "Consider a function which computes the integer division of a 512-bit dividend by a 256-bit divisor.\r\n\r\nIf the result of the computation is larger than 256 bits, then we want this function to revert.\r\n\r\nHere is the function, which implements a simple long-division method:\r\n```\r\nfunction div(uint256 xh, uint256 xl, uint256 y) returns (uint256) {\r\n    uint256 result = 0;\r\n    uint256 length = 255 - log2(y);\r\n    while (xh > 0) {\r\n        uint256 bits = log2(xh) + length;\r\n        result += 1 << bits;\r\n        (xh, xl) = sub(xh, xl, y >> (256 - bits), y << bits);\r\n    }\r\n    return result + xl / y;\r\n}\r\n```\r\nNote that we have two shift-left operations in the function above:\r\n- `1 << bits`\r\n- `y << bits`\r\n\r\nThe purpose of `y << bits`, just like you mentioned, is to obtain the LSB part of `y`.\r\n\r\nSo we indeed want this expression to overflow **without** reverting (for which purpose, we can use `unchecked`).\r\n\r\nIn contrast, if `1 << bits` overflows, then it means that the result of the function is going to be larger than 256 bits.\r\n\r\nHence we want it this expression to revert on overflow.\r\n\r\nThanks",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849506008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849595708",
    "html_url": "https://github.com/ethereum/solidity/issues/11447#issuecomment-849595708",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11447",
    "id": 849595708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTU5NTcwOA==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T12:35:45Z",
    "updated_at": "2021-05-27T12:35:45Z",
    "author_association": "MEMBER",
    "body": "@barakman While this does not answer you question, if you need overflow checking for `1 << bits`, you can replace it by `2**y`. For the IR based codegen and yul optimizer (`--experimental-via-yul`), it would actually lead to efficient codegen. That is, change the exponentiation to `shl`, except that it reverts on overflow. Unfortunately, for the current code gen, the `exp` still remains (need to improve the inliner to fix this.)\r\n\r\nOn an unrelated note, can we talk about how you use 512 bit division? It would be great if you can ping me @hrkrshnn or @hrkrshnn:matrix.org on gitter / matrix.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849595708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849612426",
    "html_url": "https://github.com/ethereum/solidity/issues/11447#issuecomment-849612426",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11447",
    "id": 849612426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTYxMjQyNg==",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T12:57:44Z",
    "updated_at": "2021-05-27T13:02:11Z",
    "author_association": "NONE",
    "body": "@hrkrshnn:\r\nMy purpose in this feature request is not to seek a solution for asserting on shift-left, but rather to align the behavior of this arithmetic operation, with the behavior of all other arithmetic operations **at the compiler-level** (behavior under the context of overflow handling of course).\r\n\r\nMy concern is that for those who are oblivious of this inconsistency, thus assuming `<<` to revert on overflow.\r\n\r\nWith regards to your other question - I use this function in order to extend the input range in the expression `x * y / z` (I have left out the entire code, since it is not directly related to the issue at hand).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849612426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849714977",
    "html_url": "https://github.com/ethereum/solidity/issues/11447#issuecomment-849714977",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11447",
    "id": 849714977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTcxNDk3Nw==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T15:10:00Z",
    "updated_at": "2021-05-27T15:10:00Z",
    "author_association": "MEMBER",
    "body": "I agree that the behaviour of shifts doesn't fit with the rest. In fact, at least two other users have pointed this out recently. Perhaps we should indeed consider reverting shifts.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849714977/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849726168",
    "html_url": "https://github.com/ethereum/solidity/issues/11447#issuecomment-849726168",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11447",
    "id": 849726168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTcyNjE2OA==",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-27T15:24:42Z",
    "updated_at": "2021-05-27T15:26:15Z",
    "author_association": "NONE",
    "body": "@hrkrshnn:\r\nAll of that being said, I do have to agree with the point made earlier by @chriseth, because the shift-left operation is often regarded as a bit-wise operation rather than an arithmetic operation, in the sense that it is not designated for a quantitive computation, but rather for retrieving a specific part in the 2s-complement representation of an integer, in which case, the term 'overflow' is de facto meaningless (apologies for the longest sentence in recorded history).\r\n\r\nTBH, even in the example that I gave earlier in this thread, I have used shift-left in one case for a quantitive computation (overflow meaningful), and in the other case in order to obtain a part of the bit-representation of the input value (overflow meaningless).\r\n\r\nThe thing is - while the bit-representation can be computed by executing it inside an `unchecked` scope, the quantitive computation cannot be computed (safely) by executing it outside an `unchecked` scope, because the compiler does not revert on that.\r\n\r\nSo one needs to perform the assertion as part of the code, which at this point (solc 0.8.x) does not align with all other operations.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/849726168/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/850493352",
    "html_url": "https://github.com/ethereum/solidity/issues/11447#issuecomment-850493352",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11447",
    "id": 850493352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDQ5MzM1Mg==",
    "user": {
      "login": "barakman",
      "id": 7003246,
      "node_id": "MDQ6VXNlcjcwMDMyNDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7003246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barakman",
      "html_url": "https://github.com/barakman",
      "followers_url": "https://api.github.com/users/barakman/followers",
      "following_url": "https://api.github.com/users/barakman/following{/other_user}",
      "gists_url": "https://api.github.com/users/barakman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barakman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barakman/subscriptions",
      "organizations_url": "https://api.github.com/users/barakman/orgs",
      "repos_url": "https://api.github.com/users/barakman/repos",
      "events_url": "https://api.github.com/users/barakman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barakman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-28T15:20:37Z",
    "updated_at": "2021-05-28T15:20:37Z",
    "author_association": "NONE",
    "body": "The more I think about this feature, the better off the compiler will be without it.\r\n\r\nBut the fact that shift-left does not revert on overflow should really be stated in the documentation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/850493352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
