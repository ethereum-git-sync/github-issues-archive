{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9182",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9182/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9182/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9182/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9182",
  "id": 636751898,
  "node_id": "MDU6SXNzdWU2MzY3NTE4OTg=",
  "number": 9182,
  "title": "Unexpected values from abi.decode calldata bytes",
  "user": {
    "login": "gitpusha",
    "id": 36712489,
    "node_id": "MDQ6VXNlcjM2NzEyNDg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gitpusha",
    "html_url": "https://github.com/gitpusha",
    "followers_url": "https://api.github.com/users/gitpusha/followers",
    "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
    "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
    "organizations_url": "https://api.github.com/users/gitpusha/orgs",
    "repos_url": "https://api.github.com/users/gitpusha/repos",
    "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gitpusha/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2020-06-11T06:24:43Z",
  "updated_at": "2020-06-11T11:06:07Z",
  "closed_at": "2020-06-11T11:06:07Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nI get some unexpected values from `abi.decode(bytes calldata, (address,uint256))`.\r\n\r\nWell maybe I should expect them and I just don't know. Maybe it has to do with the fact that `abi.decode` only works with abi encoded formats and `calldata` `bytes` are not in such format.\r\n\r\n```solidity\r\nfunction foo(bytes calldata _actionData, bytes calldata _inFlowData)\r\n```\r\n\r\nThis seems to only affect the second `bytes calldata _inFlowData` param and not the first `bytes calldata _actionData` param.\r\n\r\nAlso the values that get decoded for `_inFlowData` \r\n\r\n```\r\nsendToken:  0x0000000000000000000000000000000000000020\r\nsendAmount:  64\r\n```\r\n\r\nlook like they might be the `length` and maybe an offset for the `bytes calldata _inFlowData`.\r\n\r\nAs you can see from the various outputs I have included below, this clearly has something to do with the way the two `bytes calldata` params are formatted. They look different.\r\n\r\nOne notable difference between them.  `_actionData` is encoded off-chain with `ethers.js` abi-encoding with function selector. `_inFlowData` I get from another contract that emits it as `abi.encode(sendToken, sendAmount)` (address,uint).\r\n\r\n## What I expect is the source of the issue\r\n\r\nThe source of the issue is probably this function invocation on \r\n```solidity\r\ncontract ConsumesData\r\n```\r\n\r\n```solidity\r\nfunction foo(bytes calldata _offChainData, bytes calldata _contractEmitsData)\r\n```\r\n\r\nIt expects \r\n```solidity\r\nbytes calldata _contractEmitsData\r\n```\r\n\r\nHowever, during the call batching in a single tx, it actually get's `data` that we stored in `memory` from a previous call to `EmitsData.emitData()`.\r\n\r\nSo the formatting might be off.\r\n\r\nHowever, since `ConsumesData.foo()` is invoked with another `low-level` `delegatecall`, I would have expected the `emittedData` we stored in `memory` to be placed in `calldata` for this second `delegatecall` ? But here my solidity knowledge is out of depth.\r\n\r\n\r\n## Environment\r\n\r\n- Compiler version:  solc-js 0.6.9\r\n- Framework/IDE: `@nomiclabs/buidler`\r\n- EVM execution environment / backend / blockchain client: buidlerevm\r\n\r\n## Steps to Reproduce\r\n\r\nThis will be tricky because in our process we use a Smart Contract Wallet that batches calls.\r\n\r\n\r\n\r\nBut here are some rough guidelines.\r\n\r\n1. Install `buidler` if you want the console.log output\r\n\r\n2. Call `Batcher.delegatecallEmitsData` which `delegatecalls` `EmitsData.emitData()` first, then saves the emitted data to bytes memory, and then makes the next `delegatecall` to  ConsumesData.foo() with the off-chain encoded bytes `_offchainData` that can be any bytes array (that has an `address` at position `_offChainData[68:100]` and is encoded with any `function selector`) and with  `_contractEmitsData` that we stored in memory from the previous atomic `delegatecall` to `EmitsData.emitData()`. \r\n\r\n3. Look at the console.log output and see that `_actionData` was `decoded` as expected as `address destination` but `_inFlowData` wasn't decoded as `(address sendToken, uint256 sendAmount`).\r\n\r\n```solidity\r\n// \"SPDX-License-Identifier: UNLICENSED\"\r\npragma solidity ^0.6.9;\r\n\r\ncontract Batcher {\r\n    // I tried to slim our actual code down here so might have overlooked something\r\n     function delegatecallEmitsDataAndDelegatecallConsumesDataWithTheEmittedData(\r\n          address _emitsData, \r\n          address _consumesData,\r\n          bytes calldata _offChainData\r\n     ) \r\n          external \r\n    {\r\n           (bool success, bytes memory emittedData) = _emitsData.delegatecall();\r\n           if (!success) revert();\r\n           (bool success,) = _consumesData.delegatecall(_offChainData, emittedData);\r\n           if (!success) revert();\r\n    }\r\n}\r\n\r\ncontract EmitsData {\r\n      function emitData() external returns(bytes memory) {\r\n          address sendToken = 0x0078371bdede8aac7debfff451b74c5edb385af7;\r\n          uint256 sendAmount = 10000000000000000000;\r\n          return abi.encode(sendToken, sendAmount);   \r\n      }\r\n}\r\n\r\ncontract ConsumesData {\r\n    function foo(bytes calldata _offChainData, bytes calldata _contractEmitsData)\r\n        external\r\n        payable\r\n    {\r\n        // calldata decoding of first bytes: works\r\n        console.log(\"ConsumesData.foo\");\r\n        console.log(\"_offChainData: calldata\");\r\n        console.logBytes(_offChainData);\r\n        address destination = abi.decode(_offChainData[68:100], (address));\r\n        console.log(\"destination\", destination);  // this is as expected\r\n        \r\n        // calldata decoding of second bytes: does not work\r\n        console.log(\"_contractEmitsData: calldata\");\r\n        console.logBytes(_contractEmitsData);\r\n        (address sendToken, uint256 sendAmount) = abi.decode(_contractEmitsData, (address,uint256));\r\n        console.log(\"sendToken: \", sendToken);  // this is unexpected\r\n        console.log(\"sendAmount: \", sendAmount);  // this is unexpected\r\n    }\r\n\r\n}\r\n```\r\n\r\nThis should be the console.log output:\r\n\r\n```\r\nConsumesData.foo\r\n_offChainData: calldata\r\n0x42929d440000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c783df8a850f42e7f7e57013759c285caa701eb6\r\ndestination 0xc783df8a850f42e7f7e57013759c285caa701eb6\r\n\r\n_contractEmitsData: calldata\r\n0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000008ac7230489e80000\r\nsendToken:  0x0000000000000000000000000000000000000020\r\nsendAmount:  64\r\n```\r\n\r\nHowever, when I decode the `calldata` `bytes` as `memory` `bytes` first and then decode the two values, it works!\r\n\r\n```solidity\r\nbytes memory contractEmitsData = abi.decode(contractEmitsData, (bytes));\r\n```\r\n\r\nTry this:\r\n\r\n```solidity\r\n// \"SPDX-License-Identifier: UNLICENSED\"\r\npragma solidity ^0.6.9;\r\n\r\ncontract ConsumesData {\r\n    function foo(bytes calldata _offChainData, bytes calldata _contractEmitsData)\r\n        external\r\n        payable\r\n    {\r\n        // calldata decoding of first bytes: works\r\n        console.log(\"ConsumesData.foo\");\r\n        console.log(\"_offChainData: calldata\");\r\n        console.logBytes(_offChainData);\r\n        address destination = abi.decode(_offChainData[68:100], (address));\r\n        console.log(\"destination\", destination);  // this is as expected\r\n\r\n        // calldata decoding of second bytes: does not work\r\n        console.log(\"_contractEmitsData: calldata\");\r\n        console.logBytes(_contractEmitsData);\r\n        (address sendToken, uint256 sendAmount) = abi.decode(_contractEmitsData, (address,uint256));\r\n        console.log(\"sendToken: \", sendToken);  // this is unexpected\r\n        console.log(\"sendAmount: \", sendAmount);  // this is unexpected\r\n\r\n        // memory decoding of second bytes: works\r\n        bytes memory contractEmitsData = abi.decode(_contractEmitsData, (bytes));\r\n        console.log(\"contractEmitsData: memory\");\r\n        console.logBytes(contractEmitsData);\r\n        (sendToken, sendAmount) = abi.decode(contractEmitsData, (address,uint256));\r\n        console.log(\"sendToken: \", sendToken);  // as expected \r\n        console.log(\"sendAmount: \", sendAmount);  // as expected\r\n    }\r\n}\r\n```\r\n\r\nMy output:\r\n\r\n```\r\nConsumesData.foo\r\n_offChainData\r\n0x42929d440000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c783df8a850f42e7f7e57013759c285caa701eb6\r\ndestination 0xc783df8a850f42e7f7e57013759c285caa701eb6\r\n\r\n_contractEmitsData: calldata\r\n0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000008ac7230489e80000\r\nsendToken:  0x0000000000000000000000000000000000000020\r\nsendAmount:  64\r\n\r\ncontractEmitsData: memory\r\n0x0000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000008ac7230489e80000\r\nsendToken:  0x0078371bdede8aac7debfff451b74c5edb385af7\r\nsendAmount:  10000000000000000000\r\n```",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9182/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9182/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642469203",
    "html_url": "https://github.com/ethereum/solidity/issues/9182#issuecomment-642469203",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9182",
    "id": 642469203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjQ2OTIwMw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T07:35:55Z",
    "updated_at": "2020-06-11T07:35:55Z",
    "author_association": "MEMBER",
    "body": "Thanks for opening this issue! Just to clarify: Does it work by changing the second function parameter from `calldata` to `bytes`?\r\n\r\nMy current suspicion is that the encoded calldata is wrong. If you say that first decoding it into `bytes` makes it work, this means that there is another \"layer of indirection\" inside the data - `abi.decode(_contractEmitsData, (bytes))` is not the same as `bytes memory c = _contractEmitsData` (the first follows another offset, the second does a plain conversion).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642469203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642471727",
    "html_url": "https://github.com/ethereum/solidity/issues/9182#issuecomment-642471727",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9182",
    "id": 642471727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjQ3MTcyNw==",
    "user": {
      "login": "gitpusha",
      "id": 36712489,
      "node_id": "MDQ6VXNlcjM2NzEyNDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitpusha",
      "html_url": "https://github.com/gitpusha",
      "followers_url": "https://api.github.com/users/gitpusha/followers",
      "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
      "organizations_url": "https://api.github.com/users/gitpusha/orgs",
      "repos_url": "https://api.github.com/users/gitpusha/repos",
      "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitpusha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T07:41:12Z",
    "updated_at": "2020-06-11T07:41:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just edited the original comment a bit for more clarity and a closer assimilation to our actual data flow in the Dapp (using the delegatecall Batcher proxy).\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642471727/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642475706",
    "html_url": "https://github.com/ethereum/solidity/issues/9182#issuecomment-642475706",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9182",
    "id": 642475706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjQ3NTcwNg==",
    "user": {
      "login": "gitpusha",
      "id": 36712489,
      "node_id": "MDQ6VXNlcjM2NzEyNDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitpusha",
      "html_url": "https://github.com/gitpusha",
      "followers_url": "https://api.github.com/users/gitpusha/followers",
      "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
      "organizations_url": "https://api.github.com/users/gitpusha/orgs",
      "repos_url": "https://api.github.com/users/gitpusha/repos",
      "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitpusha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T07:49:00Z",
    "updated_at": "2020-06-11T08:07:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Does it work by changing the second function parameter from calldata to bytes?\r\n\r\nDo you mean from `calldata` to `memory` ? (or is the definition of `bytes calldata == calldata` and `bytes memory == bytes` ? )\r\n\r\nIf so. I just tested. It does not work for \r\n\r\n```solidity\r\nfunction foo(bytes calldata _offChainData, bytes memory _contractEmitsData)\r\n```\r\n\r\nResult: Same unexpected output.\r\n\r\n> My current suspicion is that the encoded calldata is wrong.\r\n\r\nYes, I assume this has to do with the fact that `Batcher` gets the `emittedData` as `bytes memory`  and then uses this data to call `ConsumesData.foo` which takes `bytes calldata` ?\r\n\r\nActually let me add this to `EmitsData.emitData()`:\r\n\r\n```solidity\r\ncontract EmitsData {\r\n      function emitData() external returns(bytes memory emittedData) {\r\n          console.log(\"EmitsData.emitData\");\r\n          address sendToken = 0x0078371bdede8aac7debfff451b74c5edb385af7;\r\n          uint256 sendAmount = 10000000000000000000;\r\n          console.log(\"sendToken: \", sendToken);\r\n          console.log(\"sendAmount: \", sendAmount);\r\n          emittedData = abi.encode(sendToken, sendAmount);\r\n          console.log(\"emittedData:\");\r\n          console.logBytes(emittedData);\r\n      }\r\n}\r\n```\r\n\r\nThis yields this output:\r\n```\r\nEmitsData.emitData\r\nsendToken:  10000000000000000000\r\nsendAmount:  0x0078371bdede8aac7debfff451b74c5edb385af7\r\nemittedData:\r\n0x0000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000008ac7230489e80000\r\n\r\nConsumesData.foo\r\n_offChainData: calldata\r\n0x42929d440000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c783df8a850f42e7f7e57013759c285caa701eb6\r\ndestination 0xc783df8a850f42e7f7e57013759c285caa701eb6\r\n\r\n_contractEmitsData: calldata\r\n0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000008ac7230489e80000\r\nsendToken:  0x0000000000000000000000000000000000000020\r\nsendAmount:  64\r\n\r\ncontractEmitsData: memory\r\n0x0000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000008ac7230489e80000\r\nsendToken:  0x0078371bdede8aac7debfff451b74c5edb385af7\r\nsendAmount:  10000000000000000000\r\n```\r\n\r\n**Cleary, the emittedData is only in the correct format on ContractConsumesData, after it has been `abi.decoded` into bytes memory**\r\n\r\nSee:\r\n\r\nEmitsData: emittedData == ConsumesData: contractEmitsData: memory\r\n\r\n```\r\nEmitsData.emitData\r\nemittedData:\r\n0x0000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000008ac7230489e80000\r\n```\r\n```\r\nConsumesData.foo\r\ncontractEmitsData: memory\r\n0x0000000000000000000000000078371bdede8aac7debfff451b74c5edb385af70000000000000000000000000000000000000000000000008ac7230489e80000\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642475706/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642492212",
    "html_url": "https://github.com/ethereum/solidity/issues/9182#issuecomment-642492212",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9182",
    "id": 642492212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjQ5MjIxMg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T08:22:01Z",
    "updated_at": "2020-06-11T08:22:01Z",
    "author_association": "MEMBER",
    "body": "Ok, I think the problem lies in the fact that you return a `bytes` variable from a function that is low-level called. The return value of that low-level call is of type `bytes`, but this is encoded once, so you have to use `abi.decode` to get the original `bytes` value.\r\n\r\nI think you can fix it by changing `emitData` to directly return `(uint, address)` instead of abi-encoding these two values.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642492212/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642500872",
    "html_url": "https://github.com/ethereum/solidity/issues/9182#issuecomment-642500872",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9182",
    "id": 642500872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjUwMDg3Mg==",
    "user": {
      "login": "gitpusha",
      "id": 36712489,
      "node_id": "MDQ6VXNlcjM2NzEyNDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitpusha",
      "html_url": "https://github.com/gitpusha",
      "followers_url": "https://api.github.com/users/gitpusha/followers",
      "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
      "organizations_url": "https://api.github.com/users/gitpusha/orgs",
      "repos_url": "https://api.github.com/users/gitpusha/repos",
      "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitpusha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T08:37:27Z",
    "updated_at": "2020-06-11T08:37:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, thanks for the explanation.\r\n\r\n> I think you can fix it by changing emitData to directly return (uint, address) instead of abi-encoding these two values.\r\n\r\nI will try, but there is one problem I see already. The actual functions we use that emit data `override` an interface and to be standardisable that interface always `returns (bytes memory)`.\r\nSo I am getting a `Overriding function return types differ` if I will try to return `(uint, address)`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642500872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642502863",
    "html_url": "https://github.com/ethereum/solidity/issues/9182#issuecomment-642502863",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9182",
    "id": 642502863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjUwMjg2Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T08:41:21Z",
    "updated_at": "2020-06-11T08:41:21Z",
    "author_association": "MEMBER",
    "body": "If you cannot change the signature,then you have to run `abi.decode` one more time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642502863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642506762",
    "html_url": "https://github.com/ethereum/solidity/issues/9182#issuecomment-642506762",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9182",
    "id": 642506762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjUwNjc2Mg==",
    "user": {
      "login": "gitpusha",
      "id": 36712489,
      "node_id": "MDQ6VXNlcjM2NzEyNDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitpusha",
      "html_url": "https://github.com/gitpusha",
      "followers_url": "https://api.github.com/users/gitpusha/followers",
      "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
      "organizations_url": "https://api.github.com/users/gitpusha/orgs",
      "repos_url": "https://api.github.com/users/gitpusha/repos",
      "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitpusha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T08:49:31Z",
    "updated_at": "2020-06-11T09:20:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think you can fix it by changing emitData to directly return (uint, address) instead of abi-encoding these two values.\r\n\r\nThis worked! \r\n\r\n> If you cannot change the signature,then you have to run abi.decode one more time.\r\n\r\nBut yes, I cannot change the sig. So I'll have to resort to decoding the original `bytes` value first, before decoding the values encoded therein:\r\n\r\n```solidity\r\nbytes memory emittedData = abi.decode(_emittedData, (bytes))\r\n(address sendToken, uint256 sendAmount) = abi.decode(emittedData, (address,uint256));\r\n```\r\n\r\nBut that works ok, so all fine!\r\n\r\nThanks for helping out and clarifying what format to expect from such a data flow that involves low-level delegatecall returndata.\r\n\r\nActually, this makes total sense to me. I just got confused here at first because you have to `abi.decode()` `bytes` to `bytes`.  But actually this is valid of course. Just like you would `abi.decode` any other `bytes memory returndata` you get from a `low-level` `call` or `delegatecall` into their original `types` and `values`. Same goes for `bytes` that were returned  from a function, of course. Makes total sense !",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642506762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642529938",
    "html_url": "https://github.com/ethereum/solidity/issues/9182#issuecomment-642529938",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9182",
    "id": 642529938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjUyOTkzOA==",
    "user": {
      "login": "gitpusha",
      "id": 36712489,
      "node_id": "MDQ6VXNlcjM2NzEyNDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36712489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitpusha",
      "html_url": "https://github.com/gitpusha",
      "followers_url": "https://api.github.com/users/gitpusha/followers",
      "following_url": "https://api.github.com/users/gitpusha/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitpusha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitpusha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitpusha/subscriptions",
      "organizations_url": "https://api.github.com/users/gitpusha/orgs",
      "repos_url": "https://api.github.com/users/gitpusha/repos",
      "events_url": "https://api.github.com/users/gitpusha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitpusha/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T09:28:24Z",
    "updated_at": "2020-06-11T09:28:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually my final solution that works like a charm on all the contracts is just something like this on our delegatecall batcher contract:\r\n\r\n```solidity\r\ncontract Batcher {\r\n    // I tried to slim our actual code down here so might have overlooked something\r\n     function delegatecallEmitsDataAndDelegatecallConsumesDataWithTheEmittedData(\r\n          address _emitsData, \r\n          address _consumesData,\r\n          bytes calldata _offChainData\r\n     ) \r\n          external \r\n    {\r\n           (bool success, bytes memory returndata) = _emitsData.delegatecall();\r\n           if (!success) revert();\r\n           \r\n           // All OutFlow actions return (bytes memory). But the low-level\r\n           // delegatecall encoded those bytes into returndata.\r\n           // So we have to decode them again to obtain the original bytes value.\r\n           returndata = abi.decode(returndata, (bytes));\r\n\r\n           (bool success,) = _consumesData.delegatecall(_offChainData, returndata);\r\n           if (!success) revert();\r\n    }\r\n}\r\n```\r\n\r\nSo basically I already `decode` on the Batcher contract, so that all Contracts that consume the data from a previous contract that emitted it, already get the originally emitted `bytes` value and don't have to each `abi.decode` themselves. This is done centrally by the Batcher.\r\n\r\nGreat, thanks for helping out!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/642529938/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
