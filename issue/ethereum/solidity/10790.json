{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10790",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10790/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10790/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10790/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10790",
  "id": 787077161,
  "node_id": "MDU6SXNzdWU3ODcwNzcxNjE=",
  "number": 10790,
  "title": "[SMTChecker] Study Spacer's limits",
  "user": {
    "login": "leonardoalt",
    "id": 504195,
    "node_id": "MDQ6VXNlcjUwNDE5NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/leonardoalt",
    "html_url": "https://github.com/leonardoalt",
    "followers_url": "https://api.github.com/users/leonardoalt/followers",
    "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
    "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
    "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
    "repos_url": "https://api.github.com/users/leonardoalt/repos",
    "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-01-15T17:49:31Z",
  "updated_at": "2021-01-19T12:43:13Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Collecting some samples here where Spacer fails to prove/refute something, to try to understand why.\r\n\r\n- multisig\r\nhttps://gist.github.com/leonardoalt/66576430ca21d849dfdb138594c93d89\r\nHere the assertion is proved, which is really good! It answers `might happen` for the possible overflow. My guess is that it fails at unrolling the overflow because it's a 1-increment and a cex would take 2**256 txs.\r\n\r\n- erc777\r\nhttps://gist.github.com/leonardoalt/bf22ba50585363e276395bb4b2d0553d\r\nA couple arithmetic `might happen`. The one related to `totalSupply` might be hard because it might need the invariant `totalSupply = sum(balances)`. However I think the one related to `balances` shouldn't be too hard.\r\nIf you uncomment the external calls it gets harder.\r\n\r\nA few small but not necessarily simple examples from our own test suite:\r\n`abi/abi_encode_with_selector_vs_sig.sol`\r\n`operators/compound_bitwise_or_uint_1.sol`\r\n`operators/slice_default_start.sol`\r\n`external_calls/external_inc.sol`\r\n`loops/for_1_fail.sol`\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10790/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10790/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/762817476",
    "html_url": "https://github.com/ethereum/solidity/issues/10790#issuecomment-762817476",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10790",
    "id": 762817476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MjgxNzQ3Ng==",
    "user": {
      "login": "blishko",
      "id": 16404346,
      "node_id": "MDQ6VXNlcjE2NDA0MzQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16404346?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blishko",
      "html_url": "https://github.com/blishko",
      "followers_url": "https://api.github.com/users/blishko/followers",
      "following_url": "https://api.github.com/users/blishko/following{/other_user}",
      "gists_url": "https://api.github.com/users/blishko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blishko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blishko/subscriptions",
      "organizations_url": "https://api.github.com/users/blishko/orgs",
      "repos_url": "https://api.github.com/users/blishko/repos",
      "events_url": "https://api.github.com/users/blishko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blishko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-19T12:43:13Z",
    "updated_at": "2021-01-19T12:43:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Analysis of `loops/for_1_fail.sol`:\r\nThis example is a relatively simple for loop where Spacer does not seem to be able to prove that increment insider the loop body does not overflow. This actually requires only integer reasoning and so Spacer should be able to deal with it.\r\nIn fact, after Horn clauses produced by our encoding has been stripped off the unnecessary blockchain-related variables, Spacer immediately solved it.\r\n\r\nFurther investigation showed that the reason of divergence in this case are the transaction data.\r\nWhen that variable has been removed from the encoding, Spacer solved the problem. In fact, it is sufficient to remove only all constraints related to the transaction variable `tx_0` and then Spacer probably figures out that it can slice the variable away and solves the problem.\r\n\r\nThis has been confirmed also directly: Changing the encoding so that `SymbolicState::txConstraints` returns `smtutil::Expression(true)` leads to successful proof that the overflow cannot happen in this example.\r\n\r\nRunning `isoltest` with disabled transaction constraints gave mixed results:\r\n\r\n-  In general, Spacer was able to produce more counter-examples in general. But also some examples where it actually got worse were seen.\r\n- Nondeterminism in Spacer still plays a big role. When version pragma was added to the `loops/for_1_fail.sol`, Spacer diverged even without the transaction constraints. This might suggest that the nondeterminism, rather than the removed transaction constraints, was responsible for the successful solving.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/762817476/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
