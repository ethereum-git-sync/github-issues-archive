{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3486/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3486/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3486/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3486",
  "id": 296424784,
  "node_id": "MDU6SXNzdWUyOTY0MjQ3ODQ=",
  "number": 3486,
  "title": "Extract test cases (from SoldityEndToEndTest)",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1018738457,
      "node_id": "MDU6TGFiZWwxMDE4NzM4NDU3",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/testing%20:hammer:",
      "name": "testing :hammer:",
      "color": "ffc6db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2018-02-12T15:53:31Z",
  "updated_at": "2021-11-08T00:24:47Z",
  "closed_at": "2021-11-08T00:24:47Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Often a big source of annoyance is that recompiling the gigantic test source files we have takes quite a bit of time. Most of the tests, though, have a very similar structure:\r\n\r\nIn the EndToEnd-tests, a contract is given, it is compiled, deployed and then multiple functions are called on the contract with multiple arguments, yielding certain expected outputs.\r\n\r\nIn the NameAndType tests, a contract is given, is compiled until the type checking phase and then an expected list of warnings and errors (or none) is checked.\r\n\r\nBoth types do not really need to be .cpp files with their own logic. Most of the tests can be specified by just a list of strings. If this list is an external file, no recompilation is needed if just the test expectations are adjusted.\r\n\r\nWe can even go further than that: We might have an interactive test runner, that just asks the user to automatically correct test expectations if they fail, on a test-by-test basis: It displays the source, the inptus (for the case of EndToEnd tests), the actual values and the expected values and waits for a y/n response to adjust the values.\r\n\r\nThe only problem here might be the encoding of the inputs and outputs of the EndToEnd tests. For readability reasons, we do not want them to be fully hex encoded, so the file format has to be able to support some kind of flexibility there. We might start with an easy version, just supporting decimals and hex numbers (if auto-generated, we might want to check if the hex version ends with many zeros or `f`s and only then choose hex) and extract all test cases that have such simple inputs and outputs.\r\n\r\nI would propose to use a simple separator-based expectation file format (not yaml or json because it could create problems with escaping and also indentation is always weird):\r\n\r\n```\r\nTestName\r\ncontract {\r\n // source until separator\r\n}\r\n=====\r\nf(uint,bytes32): 0x123000, 456 -> 123, true\r\ng(string): \"abc\" -> X\r\n=====\r\nNextTest\r\n// ...\r\n```\r\nThe `X` signifies that a `revert` is expected.",
  "closed_by": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3486/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3486/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365637884",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-365637884",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 365637884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTYzNzg4NA==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-14T15:14:16Z",
    "updated_at": "2018-02-14T15:15:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is a great idea. I did some research on the topic and I saw that LLVM uses a variant of literate programming in their [test suite](https://github.com/llvm-mirror/test-suite/blob/master/ABI-Testsuite/test/s2_7/test01.xpp) that looks pretty good.\r\n\r\nThey embed special comments within the source that tell the compiler how they should test the file and which assertions they should enforce. While we could combine arbitrary RUN pragmas with a tool like [seth](https://github.com/dapphub/seth) to execute them, a good middle-of-the-road solution is to start with a CALL assertion for what you describe above and progressively add support for things like EXPECT_WARN, EXPECT_ERROR, etc.\r\n````\r\n// test_name.sol\r\n// CALL: f(uint,bytes32): 0x123000, 456 -> 123, true\r\n// CALL: g(string): \"abc\" -> X\r\n\r\ncontract test {\r\n // ...\r\n}\r\n````\r\nThis way test sources remain compilable standalone and the format has more flexibility to grow.\r\n\r\n**Update:** the second CALL could use a different pragma to be more clear, like REVERT.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365637884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365640966",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-365640966",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 365640966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTY0MDk2Ng==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-14T15:24:26Z",
    "updated_at": "2018-02-14T15:24:26Z",
    "author_association": "MEMBER",
    "body": "Hm, I actually did not think that far, but of course we could use one file per test. This would also make it easier to parallelize tests with tools like circleci.\r\n\r\nIf the expectations and \"commands\" are in comments, each single file can be compiled easily as a first check, even without a test runner.\r\n\r\nWe could even define things like\r\n```\r\n// DEPLOY: C(constructorArg1, constructoArg2)\r\n// EXPECT_LOG: ...\r\n```\r\n\r\nThe 99% use case of just deploying the first (or last?) contract in the file and running function on that address should not need an explicit DEPLOY command, though.\r\n\r\nI'm wondering if we get too many files that way or if it would be too hard to properly find test cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365640966/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365646628",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-365646628",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 365646628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTY0NjYyOA==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-14T15:41:56Z",
    "updated_at": "2018-02-14T15:41:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, agree on implicitly deploying the last contract if it has a zero-argument constructor (usually when defining an inheritance hierarchy it's the last one that you want to test).\r\n\r\nI think the fuzzy matching built into many tools makes it easier to find test cases spread across multiple files than what we have right now. You can see an example of how it looks in these [tests](https://github.com/federicobond/solidity-spec/tree/master/passes) I extracted a while ago.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365646628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365843313",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-365843313",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 365843313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTg0MzMxMw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T07:13:17Z",
    "updated_at": "2018-02-15T07:13:17Z",
    "author_association": "MEMBER",
    "body": "Are you just interested in this or would you even like to work on it?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/365843313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/366102835",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-366102835",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 366102835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjEwMjgzNQ==",
    "user": {
      "login": "aarlt",
      "id": 5008794,
      "node_id": "MDQ6VXNlcjUwMDg3OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5008794?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aarlt",
      "html_url": "https://github.com/aarlt",
      "followers_url": "https://api.github.com/users/aarlt/followers",
      "following_url": "https://api.github.com/users/aarlt/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarlt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aarlt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarlt/subscriptions",
      "organizations_url": "https://api.github.com/users/aarlt/orgs",
      "repos_url": "https://api.github.com/users/aarlt/repos",
      "events_url": "https://api.github.com/users/aarlt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aarlt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T23:59:05Z",
    "updated_at": "2018-02-15T23:59:05Z",
    "author_association": "MEMBER",
    "body": "I really like that idea! But I think that I probably didn't fully understand what you really mean with \"extraction\" here. After reading I thought about integrated unit tests. So additionally to the contract code, executable test-code can be defined, that is able to interact with the corresponding contract code. Probably you just mean that somehow current tests could be extracted to such testing environment - so we will save compilation time.\r\n\r\nI would somehow try to create a test execution framework that is able to parse the specific test comments, execute and compare the actual results with expectations. I could think of a special test mode in `solc` that is able to execute such integrated tests and interact with test-nodes via rpc.\r\n\r\nWhat do you think? Did you mean such thing?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/366102835/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/366461515",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-366461515",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 366461515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjQ2MTUxNQ==",
    "user": {
      "login": "aarlt",
      "id": 5008794,
      "node_id": "MDQ6VXNlcjUwMDg3OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5008794?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aarlt",
      "html_url": "https://github.com/aarlt",
      "followers_url": "https://api.github.com/users/aarlt/followers",
      "following_url": "https://api.github.com/users/aarlt/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarlt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aarlt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarlt/subscriptions",
      "organizations_url": "https://api.github.com/users/aarlt/orgs",
      "repos_url": "https://api.github.com/users/aarlt/repos",
      "events_url": "https://api.github.com/users/aarlt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aarlt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-17T18:30:12Z",
    "updated_at": "2018-02-17T18:30:12Z",
    "author_association": "MEMBER",
    "body": "@chriseth now I understood the extraction part - I just saw `test/libsolidity/SolidityEndToEndTest.cpp` with over 10.000 lines of code :D - I think that I have a nice idea for that - I will let you know.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/366461515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367204590",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-367204590",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 367204590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzIwNDU5MA==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T03:45:45Z",
    "updated_at": "2018-02-21T03:45:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chriseth I'm interested, but I won't have time to work on it at the moment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367204590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367660319",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-367660319",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 367660319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzY2MDMxOQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T12:04:18Z",
    "updated_at": "2018-02-22T12:04:18Z",
    "author_association": "MEMBER",
    "body": "@ehildenb uses pandoc to extract code from Markdown formatted files in the k-framework (kevm, kwasm). It may be a good option to use that since we could have more detailed descriptions around the test cases.\r\n\r\n@ehildenb do you have a look to the pandoc script?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367660319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367694942",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-367694942",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 367694942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzY5NDk0Mg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T14:20:44Z",
    "updated_at": "2018-02-22T14:20:44Z",
    "author_association": "MEMBER",
    "body": "I would really be careful not to overcomplicate this. Do we really need detailed descriptions formatted in html? I agree that we need a way to show descriptions, but just non-formatted comments should be more than fine. We don't need latex formulas or other stuff like kevm might need.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367694942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367754923",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-367754923",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 367754923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzc1NDkyMw==",
    "user": {
      "login": "ehildenb",
      "id": 12721972,
      "node_id": "MDQ6VXNlcjEyNzIxOTcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12721972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ehildenb",
      "html_url": "https://github.com/ehildenb",
      "followers_url": "https://api.github.com/users/ehildenb/followers",
      "following_url": "https://api.github.com/users/ehildenb/following{/other_user}",
      "gists_url": "https://api.github.com/users/ehildenb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ehildenb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ehildenb/subscriptions",
      "organizations_url": "https://api.github.com/users/ehildenb/orgs",
      "repos_url": "https://api.github.com/users/ehildenb/repos",
      "events_url": "https://api.github.com/users/ehildenb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ehildenb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T17:21:57Z",
    "updated_at": "2018-02-22T17:21:57Z",
    "author_association": "NONE",
    "body": "@chriseth the descriptions are just plain text (markdown, or any format supported by `pandoc`).\r\n\r\nI don't think I have enough experience with the test-case filling to speak about whether `pandoc-tangle` is the correct fit (which is what we use for KEVM/KWASM), but I can at least explain what's possible with `pandoc-tangle` which might help out here.\r\n\r\nFirst, it allows having text-explanation around the code (which then renders nicely in Github by default, Github understands Markdown). This is nice for repository presentation (which is one of the main reasons I like it for the K* repos which are supposed to be human-readable semantics).\r\n\r\nSecond, it allows \"tangling\" the source document to produce the target document. For example, there may be a chunk of code you want to show up as a prefix to *all* the generated files, and then have other specific code-blocks be included after the generic part. This is a fairly straight-forward one-liner with `pandoc-tangle`.\r\n\r\nTo clarify confusion, `pandoc` is the program that does most of the heavy lifting, but it accepts Lua-script configurations as the \"target\" writer which direct how to generate the output. `pandoc-tangle` is a Lua-script that does the \"tangling\" and lets you specify which code-blocks to include in the output of each document.\r\n\r\nAnyway, let me know if you want more information on it/think it might be a good fit, I can help to get it setup.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367754923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367781115",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-367781115",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 367781115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzc4MTExNQ==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T18:48:23Z",
    "updated_at": "2018-02-22T18:48:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm with @chriseth on this. Non-formatted comments should be more than enough for this use case, and makes it easier to point `solc` or any other  tool to the file.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367781115/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367806558",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-367806558",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 367806558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzgwNjU1OA==",
    "user": {
      "login": "aarlt",
      "id": 5008794,
      "node_id": "MDQ6VXNlcjUwMDg3OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5008794?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aarlt",
      "html_url": "https://github.com/aarlt",
      "followers_url": "https://api.github.com/users/aarlt/followers",
      "following_url": "https://api.github.com/users/aarlt/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarlt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aarlt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarlt/subscriptions",
      "organizations_url": "https://api.github.com/users/aarlt/orgs",
      "repos_url": "https://api.github.com/users/aarlt/repos",
      "events_url": "https://api.github.com/users/aarlt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aarlt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-22T20:10:09Z",
    "updated_at": "2018-02-22T20:28:18Z",
    "author_association": "MEMBER",
    "body": "I currently implementing a generic test framework for solidity. A first functional prototype will be ready during the next days. Basically I wrote a small interpreter for a subset of `solidity`. It's a small scripting language that take advantage of all the stuff already in-place: code checking, parsing & creation of the AST.  At first I thought it would be nice to have a test-mode inside `solc` - but after writing reporting classes I realised it would make more sense to just use `boost::test`. So we can nicely generate standard `xunit-test xml` reports.\r\n\r\nSo basically it is possible to define for a contract `Contract`, a file that is named `Contract.soltest`. The structure is like that:\r\n```\r\n{test case name}\r\n    <SOLTEST-CODE>\r\n...\r\n{test case name}\r\n    <SOLTEST-CODE>\r\n```\r\nCurrently it supports simple assignments & arithmetic expressions, and assertions with `assert`.\r\n```\r\n{simple test}\r\n    uint32 one = 1;\r\n    uint32 two = 2;\r\n    uint32 three = two + one;\r\n    assert(1 + three == 1 + one + three - 1);\r\n    assert(true);\r\n\r\n{another test}\r\n   assert(true);\r\n```\r\nHopefully during the next days, it will be possible to really interact with running nodes: create contract instances and interact with contract functions:\r\n```\r\n{simple test}\r\n    Contract contract = new Contract(2);\r\n    assert(contract.doSomething(1) == true);\r\n```\r\nEnd-to-end tests can be executed with `test/soltest --run_test=EndToEnd -- --ipcpath /tmp/ipc test/scripting/contracts/SimpleAssignment.sol`. `soltest` will basically iterate over all defined `.sol` files, extract the defined contracts, and will search for files that have the name of the `<contract name>+ \".soltest\"`, and will finally execute all the defined test-cases.\r\n\r\nInternally it will generate a test contract, just for the AST creation. The interpreter will then just walk through the AST, where it will take care of the interaction with the real test node - also that code seem to be already in place (`test/libsolidity/SolidityExecutionFramework.h`).\r\n\r\nPer `soltest-testcase` a `boost::test` test-case will be generated (at runtime) during the code analysis of the `soltest` file. Additionally to that `boost::test` test-cases are generated for the `parse`, `analyze` and `compile` steps of the contracts that need to be tested. If assertions fail, the framework is able to find out the correct location in the `soltest` file.\r\n\r\nI could imagine, that it would also be very nice to add a new `natspec tag` for testing:\r\n```\r\npragma solidity ^0.4.0;\r\n/// @test {setup}\r\n///      SimpleAssignment s = new SimpleAssignment(42);\r\n/// @test {check add}\r\n///     assert(s.add(1, 2) == 3);\r\n///     assert(s.add(2, 3) == 5);\r\ncontract SimpleAssignment {\r\n    function SimpleAssignment(uint a) public {\r\n    }\r\n    function add(uint a, uint b) public pure returns (uint sum)  {\r\n        return a + b;\r\n    }\r\n}\r\n```\r\nThere are also two special \"test-cases\", `setup` & `teardown`: `setup` code will be just prepended to the test-case functions, where `teardown` will be appended. \r\n\r\nAdditionally to that, the framework will provide a `soltest` object, that can be used to setup specific test scenarios.\r\n```\r\npragma solidity ^0.4.0;\r\n/// @test {setup}\r\n///      soltest.setChainParams(..);\r\n///      soltest.mineBlocks(..);\r\n///      soltest.modifyTimestamp(..);\r\n///      soltest.addBlock(..);\r\n///      soltest.rewindToBlock(..);\r\n/// @test {check add}\r\n///     SimpleAssignment s = new SimpleAssignment(42)\r\n///     assert(s.add(1, 2) == 3);\r\n///     assert(s.add(2, 3) == 5);\r\ncontract SimpleAssignment {\r\n    function SimpleAssignment(uint a) public {\r\n    }\r\n    function add(uint a, uint b) public pure returns (uint sum)  {\r\n        return a + b;\r\n    }\r\n}\r\n```\r\nAs far as I know, `setChainParams`, `mineBlocks`, `modifyTimestamp`, `addBlock` and `rewindToBlock` are only implemented in `eth`, where `geth` and `parity` providing different functions for testing. I could imagine, that the `soltest` object could provide a standardised interface to enable access to specific testing functions of different node implementations.\r\n\r\nFirst code can be found here: [https://github.com/aarlt/solidity/tree/soltest-interpreter](https://github.com/aarlt/solidity/tree/soltest-interpreter). \r\n\r\nIts the first code that I wrote that really interacts with internal solidity apis - so there is a lot that need to be improved - so just ignore all the hacky hacks :) \r\n\r\nWhat are your opinions?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/367806558/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/368994869",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-368994869",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 368994869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODk5NDg2OQ==",
    "user": {
      "login": "aarlt",
      "id": 5008794,
      "node_id": "MDQ6VXNlcjUwMDg3OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5008794?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aarlt",
      "html_url": "https://github.com/aarlt",
      "followers_url": "https://api.github.com/users/aarlt/followers",
      "following_url": "https://api.github.com/users/aarlt/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarlt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aarlt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarlt/subscriptions",
      "organizations_url": "https://api.github.com/users/aarlt/orgs",
      "repos_url": "https://api.github.com/users/aarlt/repos",
      "events_url": "https://api.github.com/users/aarlt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aarlt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T19:21:57Z",
    "updated_at": "2018-02-27T19:21:57Z",
    "author_association": "MEMBER",
    "body": "No opinions?\r\n\r\nI just finished a very basic prototype. It can now interact with contracts on chain - currently i use `geth` v1.8.1-stable in development mode with `geth --dev --rpcapi=personal`. I also added a new `soltest` method `setAccount(string)` that can be used to simulate contract calls from different users. These accounts will automatically preloaded with 1 ether from the \"master\" account during the first call of `soltest.setAccount(..)`. The \"master\" account is `eth.accounts[0]`.\r\n\r\nI recorded a small demo that is somehow trying to capture the features currently implemented. \r\n\r\n![Alt Text](https://arlt-labs.com/soltest-demo.gif)\r\n\r\nThe next thing that I want to do is to implement `@test` natspec support - so only one file is needed - the solidity file with `@test` natspecs.\r\n\r\nIt would be nice to get some feedback.\r\n\r\n@chriseth @axic What do you think?\r\n\r\nCurrent code can be found here: https://github.com/aarlt/solidity/tree/soltest-interpreter\r\n\r\nI guess the `SimpleOwner.sol` file was not shown long enough, so here it is:\r\n```solidity\r\npragma solidity ^0.4.0;\r\n\r\ncontract SimpleOwner {\r\n    address owner;\r\n    function SimpleOwner() public {\r\n        owner = msg.sender;\r\n    }\r\n    function add(uint16 a, uint16 b) public returns (uint16 sum)  {\r\n        if (msg.sender == owner) {\r\n            return a + b;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/368994869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/369098220",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-369098220",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 369098220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTA5ODIyMA==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T02:19:47Z",
    "updated_at": "2018-02-28T02:19:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it's an interesting tool for some use cases but I would try to avoid overengineering this at all costs.\r\n\r\nTest cases should be readable with a plain Solidity parser without any preprocessing. NatSpec was not designed for this use case and would probably add unnecessary clutter to the main codebase. Instead, I propose a minimally invasive test vocabulary using prefixed comments that would are only expected to be understood by the test executor and can be easily ignored by the rest of the tools.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/369098220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/369180764",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-369180764",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 369180764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTE4MDc2NA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-28T09:38:05Z",
    "updated_at": "2018-02-28T09:38:05Z",
    "author_association": "MEMBER",
    "body": "@aarlt what you are working on in certainly very useful, but I would say it is separate from this issue here. One idea behind extracting the test cases and expectations is that you can update the expectations automatically. Also, the test framework should be as non-invasive as possible to be sure that the correct piece of software is tested.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/369180764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/369779412",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-369779412",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 369779412,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTc3OTQxMg==",
    "user": {
      "login": "aarlt",
      "id": 5008794,
      "node_id": "MDQ6VXNlcjUwMDg3OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5008794?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aarlt",
      "html_url": "https://github.com/aarlt",
      "followers_url": "https://api.github.com/users/aarlt/followers",
      "following_url": "https://api.github.com/users/aarlt/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarlt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aarlt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarlt/subscriptions",
      "organizations_url": "https://api.github.com/users/aarlt/orgs",
      "repos_url": "https://api.github.com/users/aarlt/repos",
      "events_url": "https://api.github.com/users/aarlt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aarlt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-02T00:30:44Z",
    "updated_at": "2018-03-02T00:30:44Z",
    "author_association": "MEMBER",
    "body": "@federicobond @chriseth Thank you very much for your feedback! \r\n\r\n@chriseth Ok, looks like that I didn't understood the idea, especially not the part of updating expectations automatically. I thought somehow it's possible to cover these tests with such framework. However, the whole testing thing is really the perfect vehicle to learn some stuff in more detail. So thank you for the inspiration :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/369779412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/734506590",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-734506590",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 734506590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDUwNjU5MA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-26T23:28:19Z",
    "updated_at": "2020-11-26T23:28:19Z",
    "author_association": "MEMBER",
    "body": "I forgot this issue was still open, because of the two previous big steps (#3644, #4223). There are still certain features missing: #10426 and #10427, at least.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/734506590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/962712624",
    "html_url": "https://github.com/ethereum/solidity/issues/3486#issuecomment-962712624",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3486",
    "id": 962712624,
    "node_id": "IC_kwDOAm_5kc45YdQw",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-08T00:24:47Z",
    "updated_at": "2021-11-08T00:24:47Z",
    "author_association": "MEMBER",
    "body": "Tracking in #12253.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/962712624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
