{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9211/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9211/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9211/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9211",
  "id": 639816733,
  "node_id": "MDU6SXNzdWU2Mzk4MTY3MzM=",
  "number": 9211,
  "title": "Extend \"using for\"",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 31,
  "created_at": "2020-06-16T16:38:17Z",
  "updated_at": "2022-03-14T13:10:17Z",
  "closed_at": "2022-03-14T13:10:17Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This is a proposal to extend the \"using for\" directive in the following ways:\r\n\r\n - allow it at file level to be valid for all contracts and functions in that file\r\n - allow its first argument to be a free function\r\n - allow its first argument to be an imported module\r\n - allow its first argument to be `*`\r\n\r\nThe semantics are as follows:\r\n\r\nThe directive `using * for ...` matches all free functions in the current file (including non-scoped free functions imported from somewhere else), but it does not match functions in libraries or functions imported scoped into a module (`moduleName.functionName`).\r\n\r\nThe directive `using functionName for ...` matches the specified function. Here, `functionName` can be a path like `moduleName.functionName`.\r\n\r\nThe directive `using moduleName for ...` matches all free functions in the imported module (via `import \"fileName\" as moduleName`) including free functions imported from that module at file level. Here, `moduleName` can be a path like `moduleA.moduleB`.\r\n\r\n\r\nNote that most of the new uses are incompatible with flatteners.\r\n\r\n---\r\nUpdate (2021-09-20):\r\n\r\nExtend the `using A for B` statement everywhere to allow `A` to also be\r\n - a list of file-level functions in curly braces.\r\n - the name of a module\r\n - a single file-level function\r\n - `*`\r\n\r\nIf used at file-level, `B` cannot be `*`.\r\n\r\nIf used at file-level also allow `export using A for B`, when `B` is a type declared at file-level in the current file.\r\n\r\nClarification: In the above, all \"items\" can be paths (`A.B.f`) and don't have to be single identifiers.",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9211/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9211/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645353764",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-645353764",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 645353764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTM1Mzc2NA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T12:50:36Z",
    "updated_at": "2020-06-17T12:50:36Z",
    "author_association": "MEMBER",
    "body": "Restrict proposal to:\r\n - allow using for at file level\r\n - only allow the name of a module where currently a library is allowed",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645353764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645484981",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-645484981",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 645484981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTQ4NDk4MQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T16:38:27Z",
    "updated_at": "2020-06-17T16:38:27Z",
    "author_association": "MEMBER",
    "body": "I wanted to address one point from today's call: while doing `using x for y` separately for every function might be a bit verbose I think it does have some advantages over binding all functions from a module wholesale.\r\n\r\nThis is very similar to imports in Python where importing every name separately is in fact the recommended style. So this:\r\n``` python\r\nfrom math import abs, sin, ceil;\r\n```\r\nis recommended over this:\r\n``` python\r\nfrom math import *;\r\n```\r\n[Wildcard imports are actually frowned upon](https://stackoverflow.com/questions/2386714/why-is-import-bad).\r\n\r\nWith fine-grained imports you don't pollute the namespace with names you're not going to use (which helps avoid collisions) and they make it very straightforward to trace the source of every name in the file without having to refer to any other files. It seems like something that would be helpful when auditing. It's also something I loved when I switched to Python from Ruby which does not have these fine-grained imports and it can be very hard to find the definition of something. I'm missing it a bit in C++ too.\r\n\r\nSolidity is not Python, the circumstances are a bit different (contracts are not full applications and are therefore short; also new definitions can't be added dynamically at runtime) and the scale is smaller (it's not about all imports, just bound functions) but I wanted to add another perspective on this. For some people (including me) importing things one by one may actually be the more natural way to use this feature.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645484981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645523171",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-645523171",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 645523171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTUyMzE3MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T17:45:50Z",
    "updated_at": "2020-06-17T17:45:50Z",
    "author_association": "MEMBER",
    "body": "@cameel this is actually a valid point - I also very much like it if you can see where each item was defined or imported. Since `using M for uint[]` is very similar to the syntax for libraries, I would still keep it. What syntax for attaching specific functions would you propose?\r\n\r\n`using {M.f, M.g} for uint[]`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645523171/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645529773",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-645529773",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 645529773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTUyOTc3Mw==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T17:58:42Z",
    "updated_at": "2020-06-17T18:05:56Z",
    "author_association": "MEMBER",
    "body": "Wouldn't `using M.f, M.g for uint[]` just work? Or does this need to be analyzed before imports are resolved when we can't yet tell if `M.f` is a function or a library or something else?\r\n\r\nBraces are good too. They would allow doing this, which some people might like when the list gets long and needs to get wrapped:\r\n```solidity\r\nusing {\r\n    math.add,\r\n    math.sub,\r\n    math.mul,\r\n    convert.toString,\r\n    convert.toBytes16,\r\n} for uint[];\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645529773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645531789",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-645531789",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 645531789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTUzMTc4OQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T18:02:29Z",
    "updated_at": "2020-06-17T18:04:37Z",
    "author_association": "MEMBER",
    "body": "Alternatively, this would work too:\r\n\r\n``` solidity\r\nusing math.{add,sub,mul}, convert.{toString,toBytes16} for uint[];\r\n```\r\nThis is similar to braces work with shell expansion in Bash so it might seem familiar to some people.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645531789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645537492",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-645537492",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 645537492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTUzNzQ5Mg==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T18:13:29Z",
    "updated_at": "2020-06-17T18:13:52Z",
    "author_association": "MEMBER",
    "body": "> Since using `M for uint[]` is very similar to the syntax for libraries, I would still keep it.\r\n\r\nYeah, I'm for having that form too. Even in Python both ways to import are available and preference for one or the other is just a convention, not something forced upon you by the language.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/645537492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/871252948",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-871252948",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 871252948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTI1Mjk0OA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-30T09:42:52Z",
    "updated_at": "2021-06-30T09:42:52Z",
    "author_association": "MEMBER",
    "body": "It would be nice to somehow also \"import\" the effects of using. This could be especially useful for #11531 \r\n\r\nProposal: If the definition of `X` and the statement `using ... for X` are in the same file at the top level, then any way to access `X` automatically applies the using statement. This means even if you do `import X from \"file.sol\"`, you can use `X.f()` even though `f` itself is not directly visible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/871252948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890853100",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-890853100",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 890853100,
    "node_id": "IC_kwDOAm_5kc41GVbs",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-02T08:58:18Z",
    "updated_at": "2021-08-02T08:58:18Z",
    "author_association": "MEMBER",
    "body": "Especially with #11531 I think it would be useful to map operators to user-defined functions. This could be especially useful to define fixed point (or even floating point) types and make computations with them readable. It also removes the problem of how to apply compiler-supplied operators to user-defined value types (because the compiler-supplied operator is actually on a different type).\r\n\r\nProposal:\r\n```\r\ntype MyFixed = bytes32;\r\nfunction add(MyFixed _a, MyFixed _b) pure returns (MyFixed) { ... }\r\nfunction sub(MyFixed _a, MyFixed _b) pure returns (MyFixed) { ... }\r\nusing {add as +, sub as -} for MyFixed;\r\n```\r\n\r\nSo instead of a function or module, you can use `<function> as <operator>`.\r\n\r\nFor now, custom operators should not resolve inside unchecked blocks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890853100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890873996",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-890873996",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 890873996,
    "node_id": "IC_kwDOAm_5kc41GaiM",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-02T09:26:00Z",
    "updated_at": "2021-08-02T09:26:00Z",
    "author_association": "MEMBER",
    "body": "Question brought up by @hrkrshnn : How to handle mixed-type operators for user-defined operators:\r\n\r\nApart from exceptions like `<<` and `**`, the compiler-supplied operators always only handle a single type. I think to prevent complications, we should do the following for user-defined operators:\r\n\r\n- each operator can only be named once for a type in a using statement (or all using statements combined), and you cannot use `*` in combination with operators.\r\n- the signature of functions like `add` in the above example has to be `add(MyFixed, MyFixed) ...` (it can be non-pure and it can return a different type)\r\n- the identifier has to be unique (cannot used function overloads)\r\n- the type (`MyFixed`) cannot be a built-in type.\r\n\r\nThe operator is resolved as follows: In `x + y`, the compiler first checks if the type of `y` is implicitly convertible to the type of `x`. If this is true, the `using` statement is looked up and the return type and pureness is determined from the function. If it is not implicitly convertible or if no operator matches, the compiler checks if the type of `x` is implicitly convertible to the type of `y`. If yes, it looks up the operator for the type of `y`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890873996/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890874592",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-890874592",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 890874592,
    "node_id": "IC_kwDOAm_5kc41Garg",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-02T09:27:00Z",
    "updated_at": "2021-08-02T09:27:00Z",
    "author_association": "MEMBER",
    "body": "As an alternative: Lookup fails if both `x` can be converted to `y` and vice-versa and an operator / function can be found in both cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/890874592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/891330752",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-891330752",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 891330752,
    "node_id": "IC_kwDOAm_5kc41IKDA",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-02T21:03:13Z",
    "updated_at": "2021-08-02T21:03:13Z",
    "author_association": "MEMBER",
    "body": ">  (it can be non-pure and it can return a different type)\r\n\r\nWould it be allowed to modify storage? I hope not. Side-effects in operators do not sound like a good idea. I'd require the user to have a function rather than an operator if he really wants that.\r\n\r\nEven letting them be `view` seems a bit questionable but I guess that's only meant to allow operators to take `storage` parameters? If that's the only way for them to access storage (other than inline assembly) then it's fine.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/891330752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/891677173",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-891677173",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 891677173,
    "node_id": "IC_kwDOAm_5kc41Jen1",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-03T09:11:46Z",
    "updated_at": "2021-08-03T09:11:46Z",
    "author_association": "MEMBER",
    "body": "I'm not sure there is a good way to restrict access for functions implementing operators. Operators on storage structs sound useful, so if we want to restrict something else, we would have to look at the body of a function which I think is not a good idea.\r\n\r\nOn the other hand this raises another question: If you want to implement an operator for reference types, you need several different functions for different storage locations. This would contradict the requirement above (\"no overloads\") - but I guess we can relax that to \"no overloads, except for differences in storage locations\". In order to make this work well, we also need #1256 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/891677173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/911705547",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-911705547",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 911705547,
    "node_id": "IC_kwDOAm_5kc42V4XL",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-02T13:49:43Z",
    "updated_at": "2021-09-02T13:49:43Z",
    "author_association": "MEMBER",
    "body": "Yet another alternative - which is way more permissive and maybe also achieves the same goals and is more consistent with how `using` works currently:\r\n\r\nThere can be only one `using` statement at file-level, but operators can be named multiple times and function names can resolve to multiple identifiers. Operators can neither be used with a `using` statement for built-in types nor with `*`.\r\n\r\nFor each `x + y` in the code, the matching set of functions according to the following rule has to contain exactly one element:\r\n - consider all `using` statements for the (mobile) type of `x` and the (mobile) type of `y`. Restrict to the given operator. Iterate through all functions the names resolve to and add them to the set if the parameter types match after an implicit type conversion.\r\n\r\nWe can ignore \"built-in\" operators because `using` cannot be applied to built-in types.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/911705547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915458898",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-915458898",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 915458898,
    "node_id": "IC_kwDOAm_5kc42kMtS",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-08T18:10:01Z",
    "updated_at": "2021-09-08T18:10:01Z",
    "author_association": "MEMBER",
    "body": "Fixed point math example: https://gist.github.com/chriseth/cd6d825df5a13055b1c5d7bcf1e614a7",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915458898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915922517",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-915922517",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 915922517,
    "node_id": "IC_kwDOAm_5kc42l95V",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-09T09:32:18Z",
    "updated_at": "2021-09-09T09:50:14Z",
    "author_association": "MEMBER",
    "body": "I'm not sure about allowing mixed types. Consider `type Timestamp is uint` and `type Duration is uint`. If we allow a `+ :: Timestamp -> Duration -> Timestamp`, the expression `t + d + d` may be somewhat confusing: `(t + d) + d` is well-defined, whereas `t + (d + d)` is not. (Here `d + d` is not defined.) This can be even more problematic if the operator `+ :: Duration -> Duration -> Duration` is defined, making `(t + d) + d` and `t + (d + d)` evaluate to do different timestamps.\r\n\r\nThe problem is that the current syntax hides away all these complexities. For example, the operations may be non-commutative. Or how associativity of operators isn't well specified, which can affect the final value or introduce ambiguity during parsing.\r\n\r\n---\r\n\r\nA second problem with the using syntax is that it doesn't allow easy extension into unchecked block. I think some form of traits, without mixed types, may be better. Here's a rough syntax:\r\n\r\n```\r\ntype UFixed18 is uint256 with Add, UncheckedAdd;\r\n\r\ninstance Add(UFixed18) {\r\n    function add(UFixed18 a, UFixed18 b) public returns (UFixed18 c) { ... }\r\n}\r\ninstance UnCheckedAdd(UFixed18) {\r\n   function add(UFixed18 a, UFixed18 b) public returns (UFixed18 c) {unchecked{ ... }}\r\n}\r\n```\r\n\r\nThis still doesn't make any guarantees about commutativity of `UFixed18` or associativity. So `a + b + c` is again ambiguous.\r\n\r\n---\r\n\r\nAnother approach is to allow defining global infix operators similar to free functions (and disallow redefining existing operators).\r\n\r\n```solidity\r\ntype UFixed18 is uint256;\r\ninfix function <*>(UFixed18 a, uint b) returns (uint) { ... }\r\n\r\nuint constant a = UFixed18.wrap(25) <*> 50;\r\n```\r\n\r\nMaybe a stricter definition that allows specifying the precedence as a number, as well as associativity to resolve parsing ambiguity. Something similar to what [Haskell](https://bugfactory.io/blog/custom-infix-operators-in-haskell/) already does.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915922517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915940855",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-915940855",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 915940855,
    "node_id": "IC_kwDOAm_5kc42mCX3",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-09T09:57:50Z",
    "updated_at": "2021-09-09T09:57:50Z",
    "author_association": "MEMBER",
    "body": "Mixed types are also useful for things like `elliptic_curve_point * integer -> elliptic_curve_point`, so I would say the possibilities this opens outweighs the problem that you can implement the operators in a way that they are not associative.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915940855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915967865",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-915967865",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 915967865,
    "node_id": "IC_kwDOAm_5kc42mI95",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-09T10:35:46Z",
    "updated_at": "2021-09-09T10:35:46Z",
    "author_association": "MEMBER",
    "body": "Scalar vector space multiplication should get its own operator :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/915967865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/916225203",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-916225203",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 916225203,
    "node_id": "IC_kwDOAm_5kc42nHyz",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-09T15:54:03Z",
    "updated_at": "2021-09-09T15:54:03Z",
    "author_association": "MEMBER",
    "body": "I wager this is the only other signatures you'd ever want, i.e. monoidal multiplication ``'a -> 'a -> 'a`` and scalar multiplication over a vector space ``'a -> 'b -> 'b`` are all you ever need.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/916225203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/918096911",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-918096911",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 918096911,
    "node_id": "IC_kwDOAm_5kc42uQwP",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-13T11:24:03Z",
    "updated_at": "2021-09-13T11:24:03Z",
    "author_association": "MEMBER",
    "body": "If you also consider the inner product, I think we have now collected at least one example for all the possible combinations of two types (`a * a -> a`, `a * b -> b`, `a * b -> a` and `a * a -> b`).\r\n\r\nGiven that, my crystal ball clearly says we should just allow all possible signatures for all operators.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/918096911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/918392653",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-918392653",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 918392653,
    "node_id": "IC_kwDOAm_5kc42vY9N",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-13T17:04:20Z",
    "updated_at": "2021-09-13T17:04:20Z",
    "author_association": "MEMBER",
    "body": "```solidity\r\ntype UncheckedInt is int;\r\nfunction mul(UncheckedInt a, int b) returns (UncheckedInt c) {...}\r\nusing {mul as *} for UncheckedInt;\r\n```\r\n\r\nGoing back to the associativity issue, this creates an annoying problem on whether the expression `a * b * c` (where `a`, `b`, `c` has the types `UncheckedInt`, `int` and `int` respectively) is fully unchecked or partially unchecked. The expression, `(a * b) * c` would be unchecked and `a * (b * c)` would be partially unchecked. I think this pattern should be discouraged.\r\n\r\nI'm generally in favour of operators, but allowing mixed operators for `*, +, /, -, ==` etc does not sound safe. \r\n\r\nCustom operators (which can be mixed) surprisingly solve this problem:\r\n\r\n```solidity\r\ninfix function <*>(UncheckedInt a, int b) returns(Unchecked c) {...}\r\n```\r\n\r\nNow for `a <*> b * c`, only `a <*> (b * c)` is well-defined. The other expression, i.e., `(a <*> b) * c` doesn't type check, since there is no `* : UncheckedInt -> int -> UncheckedInt` defined. Similarly, for the expression `a <*> b <*> c`, only `(a <*> b) <*> c` is well-defined.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/918392653/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/918969824",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-918969824",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 918969824,
    "node_id": "IC_kwDOAm_5kc42xl3g",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T09:16:58Z",
    "updated_at": "2021-09-14T09:16:58Z",
    "author_association": "MEMBER",
    "body": "Another option would be to introduce a new set of operators: `+'`, `-'`, `*'`, ..., disable the associativity during parsing for them and only allow them to be defined for non-matching types.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/918969824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/918971983",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-918971983",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 918971983,
    "node_id": "IC_kwDOAm_5kc42xmZP",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T09:19:38Z",
    "updated_at": "2021-09-14T09:19:38Z",
    "author_association": "MEMBER",
    "body": "Another option would be to extend the concept of ``unchecked`` to arbitrary named operator scopes, each with its own set of operators (with its own signature requirements) and the ability to import compatible operators from other operator scopes.\r\n\r\nThis would even prevent obscure operator definitions that cannot be recognized locally, since if I don't use well-behaved standard-signature operators, I locally have to use e.g.\r\n```\r\ntimestamp x;\r\nduration y;\r\ntimestampOperators {\r\n  x += y;\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/918971983/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919060955",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-919060955",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 919060955,
    "node_id": "IC_kwDOAm_5kc42x8Hb",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T11:26:15Z",
    "updated_at": "2021-09-14T11:26:15Z",
    "author_association": "MEMBER",
    "body": "Rust restricts custom operators to be defined only on the left hand side type. This makes lookup easier and maybe also eliminates the associativity problem, but I currently don't see how you can do things like `2 * x`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919060955/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919902207",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-919902207",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 919902207,
    "node_id": "IC_kwDOAm_5kc421Jf_",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-15T10:34:47Z",
    "updated_at": "2021-09-15T10:34:47Z",
    "author_association": "MEMBER",
    "body": "It might be \"clean\" to (at least for now) restrict the target of a \"using for\"  statement at file-level to data structures only, i.e. disallow the use for contract-like types and of course non-nameable types.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919902207/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919992708",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-919992708",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 919992708,
    "node_id": "IC_kwDOAm_5kc421fmE",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-15T12:54:39Z",
    "updated_at": "2021-09-15T12:54:39Z",
    "author_association": "MEMBER",
    "body": "As far as I understood @ekpyron 's arguments, the only benefit of restricting operators to a fixed type signature (i.e. `+` always takes the same parameter types and also returns the same type, `==` always takes two equal parameter types and always returns bool, ...) is that it helps in the future when we introduce generics in the following way:\r\n\r\nYou can write functions `add(a, b) -> a + b` and the compiler only has to type-check this generic function and it will not have to type check it again when the function is used on specific types.\r\n\r\nIf we relax the restriction (like rust does it) and say that operators can be defined on different types (like `elliptic_curve_point * integer`), the only thing we have to add is traits and say that this `add` function is not absolutely generic, but can be applied to types that satisfy a certain trait.\r\n\r\nSince I'm in general in favour of requiring explicit types and think that auto-type-deduction is nice but can lead to errors since explicit types always also force you to condense your thinking into categories that specify semantics (like `AssociativeMul`), I think the benefits of being able to specify cross-type operators far outweigh the downsides.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/919992708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922928382",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-922928382",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 922928382,
    "node_id": "IC_kwDOAm_5kc43AsT-",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T13:28:08Z",
    "updated_at": "2021-09-20T13:28:08Z",
    "author_association": "MEMBER",
    "body": "@hrkrshnn proposed to make applying the using statement upon import more explicit. One solution there would be to use\r\n```\r\nexport using f for MyType;\r\n```\r\n\r\nI.e. if we have \"export using\" then the effect of `using` is applied whenever the type is visible, not only in the scope where the `using` is visible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922928382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922943989",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-922943989",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 922943989,
    "node_id": "IC_kwDOAm_5kc43AwH1",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T13:47:27Z",
    "updated_at": "2021-09-20T13:47:27Z",
    "author_association": "MEMBER",
    "body": "Updated the issue description.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/922943989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/975775646",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-975775646",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 975775646,
    "node_id": "IC_kwDOAm_5kc46KSee",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T17:52:47Z",
    "updated_at": "2021-12-01T15:04:54Z",
    "author_association": "MEMBER",
    "body": "Some alternatives for the `export using f for MyType` syntax:\r\n- `using {f, h} for MyType propagate`\r\n- `using {f, h} for MyType public` (with or without an explicit `using {f, h} for MyType private` needed for the opposite case)\r\n    - `using {public f, private h} for MyType` - would allow specifying it for each function separately.\r\n\r\nlatest: `using {f, h} for MyType global;`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/975775646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1005713916",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-1005713916",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 1005713916,
    "node_id": "IC_kwDOAm_5kc478fn8",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-05T14:06:11Z",
    "updated_at": "2022-01-05T14:06:11Z",
    "author_association": "MEMBER",
    "body": "@hrkrshnn wanted to know hy `using {f, h} for MyType globally` or `export using...` should not also be available it contract level. \r\nAs currently planned, `using ... globally` is only allowed at file level in the same file (and scope) where the type is defined and you can only use library functions or file-level functions. The reason is that these library functions and file-level functions can be called from everywhere. If we allow `using ... globally` inside a contract, then it would suggest that you can also use internal functions of that contract inside the contract. This would prevent the function to be called everywhere. Example:\r\n\r\n```\r\ncontract C {\r\n  struct S { uint x; }\r\n  using {f} for S globally;\r\n  function f(S memory) internal { ... }\r\n\r\n  function g() public returns (S memory) { ... }\r\n}\r\n\r\nfunction t(C c) {\r\n  // since the using statement above uses `globally`, the member is available on `S`\r\n  // here. So you should be able to call c.g().f(), but you cannot because it is an internal\r\n  // function of the contract.\r\n  c.g().f();\r\n}\r\n```\r\n\r\nI think only allowing file-level (and library) functions for using statements at file level is the simpler and saner approach.\r\nI would actually lean towards not modifying the syntax and semantics of the using statement inside a contract at all and maybe also deprecating it over time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1005713916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1005765887",
    "html_url": "https://github.com/ethereum/solidity/issues/9211#issuecomment-1005765887",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/9211",
    "id": 1005765887,
    "node_id": "IC_kwDOAm_5kc478sT_",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-05T15:06:13Z",
    "updated_at": "2022-01-05T15:34:00Z",
    "author_association": "MEMBER",
    "body": "EDIT: [this wasn't entirely thought through]<details>\r\nThinking about it, I'm not so sure the whole \"export using\" or \"using.. globally\" stuff is a good idea...\r\n\r\nI'd do the following:\r\n  - All using statements always ever only extend to their syntactic scope period.\r\n  - On each type definition we can immediately add functions to the type using a different mechanism, for example:\r\n    ``type UncheckedInt is int with {f};`` - for structs maybe even just as ``struct S { uint x; function f() ... }`` or also with ``with`` or some keyword.\r\n  - Only those functions declared directly together with the type are available everywhere where the type is available. Extending this set of functions later on is impossible.\r\n  - In situations in which I *want* to extend a type with more global functions, I simply define a new type that inherits all functions of the old type, make the type implicitly convertible and add more functions in the process (all of which we'd of course have to allow).\r\n\r\nThe result is a situation in which you can:\r\n  - explicitly extend any type for your current scope without affecting anything or anyone else\r\n  - have well-defined types with well-defined interfaces that do not depend on scope or the like at all\r\n  - still have extensible types with implicit conversions\r\n\r\nAnd I avoid to have weird implicit scoping effects and strange behaviour due to diamond-like cross-importing exported using statements on the same types and all such issues that will come up eventually with exporting ``using``...\r\n\r\nEDIT: Ok, I missed the fact that the intention was to only allow ``using...globally`` in the same file/scope as the type declaration...\r\n</details>",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1005765887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
