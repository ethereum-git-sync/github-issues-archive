{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13670",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13670/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13670/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13670/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13670",
  "id": 1430158078,
  "node_id": "I_kwDOAm_5kc5VPnr-",
  "number": 13670,
  "title": "False negative `Warning: Unreachable code.` in inline assembly",
  "user": {
    "login": "leonardoalt",
    "id": 504195,
    "node_id": "MDQ6VXNlcjUwNDE5NQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/leonardoalt",
    "html_url": "https://github.com/leonardoalt",
    "followers_url": "https://api.github.com/users/leonardoalt/followers",
    "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
    "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
    "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
    "repos_url": "https://api.github.com/users/leonardoalt/repos",
    "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 4438006499,
      "node_id": "LA_kwDOAm_5kc8AAAABCIaa4w",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/low%20effort",
      "name": "low effort",
      "color": "ffb1fa",
      "default": false,
      "description": "There is not much implementation work to be done. The task is very easy or tiny."
    },
    {
      "id": 4438155599,
      "node_id": "LA_kwDOAm_5kc8AAAABCIjhTw",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/medium%20impact",
      "name": "medium impact",
      "color": "001dff",
      "default": false,
      "description": "Default level of impact"
    },
    {
      "id": 4438481746,
      "node_id": "LA_kwDOAm_5kc8AAAABCI3bUg",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/must%20have%20eventually",
      "name": "must have eventually",
      "color": "ffb04d",
      "default": false,
      "description": "Something we consider essential but not enough to prevent us from releasing Solidity 1.0 without it."
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-10-31T16:48:57Z",
  "updated_at": "2022-11-29T18:47:38Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The code in [1] issues the warning in [2], which is not true since the function is called.\r\n\r\n[1]\r\n```solidity\r\ncontract C {\r\n    function f(uint) external pure returns (uint) {\r\n        assembly {\r\n            mstore(0, id(calldataload(4)))\r\n            return (0, 32)\r\n\r\n            function id(x) -> y {\r\n                y := x\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n[2]\r\n```bash\r\nWarning: Unreachable code.\r\n --> contracts/3_Ballot.sol:7:13:\r\n  |\r\n7 |             function id(x) -> y {\r\n  |             ^ (Relevant source part starts here and spans across multiple lines)\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13670/reactions",
    "total_count": 2,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13670/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1331130532",
    "html_url": "https://github.com/ethereum/solidity/issues/13670#issuecomment-1331130532",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13670",
    "id": 1331130532,
    "node_id": "IC_kwDOAm_5kc5PV3Ck",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-11-29T18:45:54Z",
    "updated_at": "2022-11-29T18:47:38Z",
    "author_association": "MEMBER",
    "body": "This should be fixed in ``ControlFlowBuilder`` (in ``libsolidity/analysis``) - it currently doesn't probably consider control flow for assembly functions.\r\nIt'd probably need a ``yul::Block`` visit, that scans for function definitions first, registering control flow nodes for them (which entails implementing the ``yul::FunctionDefinition`` visitor at least in a bogus manner at first, i.e. ignoring the flow, but adding a pseudo-node that covers the source range), and then connecting calls to user-defined yul functions to those nodes in the ``yul::FunctionCall`` visit.\r\nThat way, I'd expect the regular control flow analysis to properly consider these used without any changes.\r\n\r\nFor the record: this is merely an analysis step that won't affect optimization or codegen, so it's annoying, but harmless.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1331130532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
