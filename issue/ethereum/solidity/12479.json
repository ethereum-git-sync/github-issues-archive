{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12479/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12479/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12479/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12479",
  "id": 1092493364,
  "node_id": "I_kwDOAm_5kc5BHiA0",
  "number": 12479,
  "title": "Permit use of non-literal constants inside inline assembly",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2022-01-03T13:03:52Z",
  "updated_at": "2023-02-07T12:08:15Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "```\r\ncontract C {\r\n  enum E { E1, E2 }\r\n  E constant c = E.E1;\r\n  function f() external {\r\n    assembly {\r\n      let x := c\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nerrors on the use of the constant inside inline assembly.\r\n\r\n```\r\nError: Only direct number constants and references to such constants are supported by inline assembly.\r\n```\r\n\r\nThe same happens for constant expressions\r\n\r\n```\r\ncontract C {\r\n  bool constant c = (2 > 3 ? true : false);\r\n  function f() external {\r\n    assembly {\r\n      let x := c\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nand constants assigned a constructed value (not literal)\r\n\r\n```\r\ncontract C {\r\n  bool constant c = bool(true);\r\n  function f() external {\r\n    assembly {\r\n      let x := c\r\n    }\r\n  }\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12479/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12479/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1004110539",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1004110539",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1004110539,
    "node_id": "IC_kwDOAm_5kc472YLL",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-03T13:59:37Z",
    "updated_at": "2022-01-03T13:59:37Z",
    "author_association": "MEMBER",
    "body": "Constants are implemented by generating the right-hand side again whenever the constant is referenced. This means you would have to generate solidity code inside assembly code, and I don't think we should do that / it's not worth adding this since there is an easy workaround.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1004110539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1104926031",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1104926031",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1104926031,
    "node_id": "IC_kwDOAm_5kc5B29VP",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-21T09:11:48Z",
    "updated_at": "2022-04-22T14:39:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just bumped into this issue while trying to use a user-defined value type in assembly:\r\n\r\n```solidity\r\ntype UD60x18 is uint256;\r\n\r\nUD60x18 constant SCALE = UD60x18.wrap(1_000000000000000000);\r\n\r\nfunction foo(UD60x18) external pure {\r\n    assembly {\r\n        let remainder := mod(x, SCALE)\r\n    }\r\n}\r\n```\r\n\r\nGetting this error:\r\n\r\n> Only direct number constants and references to such constants are supported by inline assembly.\r\n\r\nI understand the rationale for not doing this for any kind of constant, but maybe we could make an exception for user-defined value types that are `uint256` under the hood?\r\n\r\nLooks like I can use `UD60x18` types in assembly when they are not constants.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1104926031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1107902682",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1107902682",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1107902682,
    "node_id": "IC_kwDOAm_5kc5CCUDa",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-24T19:25:28Z",
    "updated_at": "2022-04-24T19:25:28Z",
    "author_association": "MEMBER",
    "body": "Wouldn't it be feasible to implement by automatically inserting an extra `uint` local variable before the assembly block and assigning the constant value to it? Then using that variable in the block. The optimizer would just remove the variable most of the time, wouldn't it? So it shouldn't even increase the stack pressure in the optimized code.\r\n\r\nI did run into this limitation myself in the past and I have to admit it's really annoying. For example if you have a set of offsets that build on top of each other, you can't just do this (which would be less repetitive and error prone):\r\n```solidity\r\nuint constant offsetA = 0x20;\r\nuint constant offsetB = offsetA + 5;\r\nuint constant offsetC = offsetB + 0x40;\r\n```\r\nInstead you have to calculate each value. This is something the compiler should be able to do for you.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1107902682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1109011614",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1109011614",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1109011614,
    "node_id": "IC_kwDOAm_5kc5CGiye",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-25T20:31:14Z",
    "updated_at": "2022-04-25T20:31:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Wouldn't it be feasible to implement by automatically inserting an extra `uint` local variable before the assembly block and assigning the constant value to it?\r\n\r\nOh yes this is what I am planning on doing .. but I use `SCALE` in many places. My code will get somewhat verbose because of this limitation related to how constants can be used.\r\n\r\n> Instead you have to calculate each value. This is something the compiler should be able to do for you.\r\n\r\n100%. I really wished I could use non-uint constants in assembly.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1109011614/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1109014638",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1109014638",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1109014638,
    "node_id": "IC_kwDOAm_5kc5CGjhu",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-25T20:34:41Z",
    "updated_at": "2022-04-25T20:35:47Z",
    "author_association": "MEMBER",
    "body": "> Oh yes this is what I am planning on doing\r\n\r\nSorry, I should have made it clearer that I was asking @chriseth if it wouldn't be viable to implement it this way in the compiler :) I totally think you should not have to this manually, though unfortunately that seems to be the only real workaround right now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1109014638/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112121622",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1112121622",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1112121622,
    "node_id": "IC_kwDOAm_5kc5CSaEW",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-28T12:05:16Z",
    "updated_at": "2022-04-28T12:05:16Z",
    "author_association": "MEMBER",
    "body": "Yes, we should add the `wrap` functions to the stuff allowed for constants in inline assembly.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1112121622/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1114180889",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1114180889",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1114180889,
    "node_id": "IC_kwDOAm_5kc5CaQ0Z",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-01T09:14:56Z",
    "updated_at": "2022-05-01T09:14:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "FWIW, this is the workaround I had to recourse to to make my code compile. I created a copy of each constant by appending a `_UINT` suffix:\r\n\r\n```solidity\r\nUD60x18 constant HALF_SCALE = UD60x18.wrap(5_00000000000000000);\r\nuint256 constant HALF_SCALE_UINT = 5_00000000000000000;\r\n\r\nUD60x18 constant LOG2_E = UD60x18.wrap(1_442695040888963407);\r\nuint256 constant LOG2_E_UINT = 1_442695040888963407;\r\n\r\nUD60x18 constant MAX_UD60x18 = UD60x18.wrap(115792089237316195423570985008687907853269984665640564039457_584007913129639935);\r\nuint256 constant MAX_UD60x18_UINT = 115792089237316195423570985008687907853269984665640564039457_584007913129639935;\r\n\r\nUD60x18 constant MAX_WHOLE_UD60x18 = UD60x18.wrap(115792089237316195423570985008687907853269984665640564039457_000000000000000000);\r\nuint256 constant MAX_WHOLE_UD60x18_UINT = 115792089237316195423570985008687907853269984665640564039457_000000000000000000;\r\n\r\n/// @dev The unit amount which implies how many trailing decimals can be represented.\r\nUD60x18 constant SCALE = UD60x18.wrap(1_000000000000000000);\r\nuint256 constant SCALE_UINT = 1_000000000000000000;\r\n```\r\n\r\nIt's not terrible, but not great either. A bit verbose.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1114180889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1396093730",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1396093730",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1396093730,
    "node_id": "IC_kwDOAm_5kc5TNrMi",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T21:11:40Z",
    "updated_at": "2023-01-18T21:14:48Z",
    "author_association": "NONE",
    "body": "I wish we had this feature to necessarily to have methods and reverts selectors inside assembly. Putting this values into local variables before assembly block limits number of vars we could use inside the block due \"Stack too deep\" issue. Moreover I wish we could touch immutables inside assembly blocks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1396093730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1396094652",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1396094652",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1396094652,
    "node_id": "IC_kwDOAm_5kc5TNra8",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T21:12:31Z",
    "updated_at": "2023-01-18T21:13:08Z",
    "author_association": "NONE",
    "body": "> Yes, we should add the `wrap` functions to the stuff allowed for constants in inline assembly.\r\n\r\nWhy not to allow to access every constant? Both literal and non-literal, @chriseth.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1396094652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1396100155",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1396100155",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1396100155,
    "node_id": "IC_kwDOAm_5kc5TNsw7",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-18T21:17:41Z",
    "updated_at": "2023-01-18T21:18:16Z",
    "author_association": "NONE",
    "body": "> Constants are implemented by generating the right-hand side again whenever the constant is referenced. This means you would have to generate solidity code inside assembly code, and I don't think we should do that / it's not worth adding this since there is an easy workaround.\r\n\r\n@chriseth wouldn't it be better to not spend gas on constants in runtime? Why not to recalculate all the constants in the compile time?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1396100155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1420668725",
    "html_url": "https://github.com/ethereum/solidity/issues/12479#issuecomment-1420668725",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12479",
    "id": 1420668725,
    "node_id": "IC_kwDOAm_5kc5Ura81",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-02-07T12:08:14Z",
    "updated_at": "2023-02-07T12:08:14Z",
    "author_association": "MEMBER",
    "body": "> > Constants are implemented by generating the right-hand side again whenever the constant is referenced. This means you would have to generate solidity code inside assembly code, and I don't think we should do that / it's not worth adding this since there is an easy workaround.\r\n> \r\n> @chriseth wouldn't it be better to not spend gas on constants in runtime? Why not to recalculate all the constants in the compile time?\r\n\r\nPlanned (https://github.com/ethereum/solidity/issues/13724, https://github.com/ethereum/solidity/issues/3157) - just not trivial to do safely and in all generality.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1420668725/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
