{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/7173",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/7173/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/7173/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/7173/events",
  "html_url": "https://github.com/ethereum/solidity/issues/7173",
  "id": 476766396,
  "node_id": "MDU6SXNzdWU0NzY3NjYzOTY=",
  "number": 7173,
  "title": "[Abiv2 proto fuzzer] Test invalid encodings correctly fail",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-08-05T09:54:51Z",
  "updated_at": "2019-08-06T10:06:14Z",
  "closed_at": "2019-08-06T10:06:14Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nThe current abiv2 proto fuzzer only tests that `decode(valid_encoding(value)) == value`. This issue tracks support for `decode(invalid_encoding(value)) != value)`\r\n\r\n## Motivation\r\n\r\nOne way to construct invalid_encoding is to crop a valid encoding. Example\r\n\r\n```\r\ncontract C {\r\n  uint8[][2] y;\r\n\r\nfunction f(uint8[][2] x) returns (uint) {\r\n  if (x.length !=2 ) return 2;\r\n  ...\r\n}\r\n\r\nfunction test() returns (bool) {\r\n  y[0].length = 1;\r\n  y[1].length = 2;\r\n  y[0][0] = 3;\r\n  y[1][0] = 4;\r\n  y[1][1] = 5;\r\n  bytes memory validEncoding = abi.encode(y);\r\n  bytes memory cutOffEncoding = new bytes(validEncoding.length/2 + 4);\r\n  cutOffEncoding[0] = <first_four_bytes_of_keccak_of_function_f>;\r\n  for(uint i=0; i < cutOffEncoding.length; i++)\r\n\tcutOffEncoding[i + 4] = validEncoding[i];\r\n  // Use a low-level call that tests decoding of invalid encoding for a call to function `f`\r\n  (bool success,) = this.call(cutoffEncoding);\r\n  return success;\r\n}\r\n```\r\n\r\nIn the proto fuzzer c++ harness, we expect success to be `false` and the execution to not revert (as before).\r\n\r\n## Specification\r\n\r\nThis can be implemented as follows. We add a new field to the abi proto specification called `invalid_encoding_length`. The value of this field will be used to obtain invalid encoding length as follows\r\n\r\n```\r\ninvalidLength = invalid_encoding_length % validEncodingLength\r\n```\r\n\r\nThe solidity code that can be used to do this is as follows\r\n\r\n```\r\n\t/// Accepts function selector, correct argument encoding, and length of invalid encoding and returns\r\n\t/// the correct and incorrect abi encoding for calling the function specified by the function selector.\r\n\tfunction createEncoding(bytes4 funcSelector, bytes memory argumentEncoding, uint invalidLengthFuzz)\r\n\t\tinternal pure returns (bytes memory, bytes memory)\r\n\t{\r\n\t\tbytes memory validEncoding = new bytes(4 + argumentEncoding.length);\r\n\t\t// Ensure that invalidEncoding crops at least one and at most all bytes from correct encoding.\r\n\t\tuint invalidLength = invalidLengthFuzz % argumentEncoding.length;\r\n\t\tbytes memory invalidEncoding = new bytes(4 + invalidLength);\r\n\t\tfor (uint i = 0; i < 4; i++)\r\n\t\t\tvalidEncoding[i] = invalidEncoding[i] = funcSelector[i];\r\n\t\tfor (uint i = 0; i < argumentEncoding.length; i++)\r\n\t\t\tvalidEncoding[i+4] = argumentEncoding[i];\r\n\t\tfor (uint i = 0; i < invalidLength; i++)\r\n\t\t\tinvalidEncoding[i+4] = argumentEncoding[i];\r\n\t\treturn (validEncoding, invalidEncoding);\r\n\t}\r\n\r\n\t/// Accepts function selector, correct argument encoding, and an invalid encoding length as input.\r\n\t/// Returns a non-zero value if either call with correct encoding fails or call with incorrect encoding\r\n\t/// succeeds. Returns zero if both calls meet expectation.\r\n\tfunction checkEncodedCall(bytes4 funcSelector, bytes memory argumentEncoding, uint invalidLengthFuzz) public returns (uint)\r\n\t{\r\n\t\t(bytes memory validEncoding, bytes memory invalidEncoding) = createEncoding(funcSelector, argumentEncoding, invalidLengthFuzz);\r\n\t\t(bool success, ) = address(this).call(validEncoding);\r\n\t\t// Return non-zero value if call fails for correct encoding\r\n\t\tif (success == false)\r\n\t\t\treturn 400000;\r\n\t\t(success, ) = address(this).call(invalidEncoding);\r\n\t\t// Return non-zero value if call succeeds for incorrect encoding\r\n\t\tif (success == true)\r\n\t\t\treturn 400001;\r\n\t\treturn 0;\r\n\t}\r\n```\r\n\r\n",
  "closed_by": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/7173/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/7173/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[

]
