{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/11125/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/11125/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/11125/events",
  "html_url": "https://github.com/ethereum/solidity/issues/11125",
  "id": 835665477,
  "node_id": "MDU6SXNzdWU4MzU2NjU0Nzc=",
  "number": 11125,
  "title": "Disable safety checks on individual statements for gas efficiency",
  "user": {
    "login": "gakonst",
    "id": 17802178,
    "node_id": "MDQ6VXNlcjE3ODAyMTc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gakonst",
    "html_url": "https://github.com/gakonst",
    "followers_url": "https://api.github.com/users/gakonst/followers",
    "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
    "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
    "organizations_url": "https://api.github.com/users/gakonst/orgs",
    "repos_url": "https://api.github.com/users/gakonst/repos",
    "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gakonst/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    },
    {
      "id": 4699440809,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvGqQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/closed%20due%20inactivity",
      "name": "closed due inactivity",
      "color": "91535E",
      "default": false,
      "description": "The issue/PR was automatically closed due to inactivity."
    },
    {
      "id": 4699444681,
      "node_id": "LA_kwDOAm_5kc8AAAABGBvVyQ",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/stale",
      "name": "stale",
      "color": "BF4801",
      "default": false,
      "description": "The issue/PR was marked as stale because it has been open for too long."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2021-03-19T07:51:54Z",
  "updated_at": "2023-03-26T12:04:07Z",
  "closed_at": "2023-03-26T12:04:07Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Motivation\r\n\r\nWhen writing Solidity, the developer oftentimes has written code which makes assumptions that the compiler cannot know. An example would be the existence of a contract such as a Uniswap pool or an ERC20 token. If I know that contract exists, I should not need to pay additional gas to check that it exists!\r\n\r\nA simple example, is a dev having to write the following (h/t @moodysalem):\r\n\r\n```solidity\r\n// fetch the token balance of an address without triggering an EXTCODESIZE\r\nfunction balanceOf(address token, address owner) internal view returns (uint256) {\r\n        (bool success, bytes memory data) =\r\n            token.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector, owner));\r\n        require(success && data.length == 32);\r\n        return abi.decode(data, (uint256));\r\n}\r\n```\r\n\r\n## Specification\r\n\r\nThere should be an option in the solc compiler (a la Rustâ€™s #[cfg(feature = \"...\") directive) allowing you to skip some kinds of \"standard\" checks w/o having to do it manually (e.g. writing a addreor dropping to assembly, e.g. skipping an EXTCODESIZE when *CALLING to a contract you know exists.\r\n\r\nExample:\r\n```solidity\r\nIERC20 token = IERC20(...)\r\n\r\n\r\n#[cfg(contract_exists)]\r\ntoken.balanceOf(address(this))\r\n````\r\n\r\nThe above should skip generating the EXTCODESIZE part of the bytecode.\r\n\r\nThis is similar to the `unsafe` keyword, but a bit more specialized to disable specific safety checks than everything. We would need to figure out which categories of commonly-done optimizations exist.\r\n\r\n* Existence Checks\r\n* Overflow Checks\r\n* ..what else?\r\n\r\n## Backwards Compatibility\r\n\r\nThis should be fully backwards compatible.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/11125/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/11125/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803462381",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-803462381",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 803462381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzQ2MjM4MQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-20T20:59:09Z",
    "updated_at": "2021-03-20T21:08:09Z",
    "author_association": "MEMBER",
    "body": "For overflow checks we already have the `unchecked` blocks (with feature requests for various flavors of it: #10698, #10706). There's also a request for unchecked array access (#9117).\r\n\r\nWe could probably extend the `unchecked` block syntax to cover some or all of them, e.g.\r\n```solidity\r\nunchecked: math arrays calls {\r\n    ...\r\n}\r\n```\r\nthough I'm not sure if it's a good direction. The sentiment in the team currently is that these superfluous checks should be detected by the optimizer and removed when it's safe to do so. Unfortunately that's probably not that easy for `extcodesize` - we can't know at compilation time if the contract is actually there. And even if it is, it could potentially self-destruct at any moment.\r\n\r\n> ..what else?\r\n\r\nThe compiler performs many other checks under the hood (see [`Panic` via `assert` and `Error` via `require`](https://docs.soliditylang.org/en/latest/control-structures.html#panic-via-assert-and-error-via-require) in the docs for the list of situations that can result in a `Panic` or `Error`), though I don't think it's a good idea to allow disabling all of them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803462381/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803473188",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-803473188",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 803473188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzQ3MzE4OA==",
    "user": {
      "login": "gakonst",
      "id": 17802178,
      "node_id": "MDQ6VXNlcjE3ODAyMTc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/17802178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gakonst",
      "html_url": "https://github.com/gakonst",
      "followers_url": "https://api.github.com/users/gakonst/followers",
      "following_url": "https://api.github.com/users/gakonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/gakonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gakonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gakonst/subscriptions",
      "organizations_url": "https://api.github.com/users/gakonst/orgs",
      "repos_url": "https://api.github.com/users/gakonst/repos",
      "events_url": "https://api.github.com/users/gakonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gakonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-20T22:34:53Z",
    "updated_at": "2021-03-20T22:34:53Z",
    "author_association": "NONE",
    "body": "Thanks for the response!\r\n\r\n>  The sentiment in the team currently is that these superfluous checks should be detected by the optimizer and removed when it's safe to do so. Unfortunately that's probably not that easy for extcodesize - we can't know at compilation time if the contract is actually there. And even if it is, it could potentially self-destruct at any moment.\r\n\r\nAgreed, hence my point was that this feature should be developer controlled since it seems impossible to do at the optimizer level in many cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803473188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803491685",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-803491685",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 803491685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzQ5MTY4NQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-21T00:40:22Z",
    "updated_at": "2021-03-21T00:40:22Z",
    "author_association": "MEMBER",
    "body": "@cameel the original idea for extending `unchecked` was `unckecked \"something\" {}`, similarly to how `assembly \"evmasm\" {}` works.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803491685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803491881",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-803491881",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 803491881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzQ5MTg4MQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-21T00:42:29Z",
    "updated_at": "2021-03-21T00:42:29Z",
    "author_association": "MEMBER",
    "body": "> An example would be the existence of a contract such as a Uniswap pool or an ERC20 token.\r\n\r\nFor this particular case, I think we could utilise some require statement, which is \"understood\" by both the optimiser and the smtchecker.\r\n\r\nAs an example, `require(address(...).isContract())` could work like that, because the generated code could be deduplicated with the one generated by any call.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803491881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803496351",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-803496351",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 803496351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzQ5NjM1MQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-21T01:28:13Z",
    "updated_at": "2021-03-21T01:29:09Z",
    "author_association": "MEMBER",
    "body": "> the original idea for extending `unchecked` was `unckecked \"something\" {}`\r\n\r\nInteresting. I didn't know that.\r\n\r\n> As an example, `require(address(...).isContract())` could work like that, because the generated code could be deduplicated with the one generated by any call.\r\n\r\nThat would still result in an `EXTCODESIZE` check though, right? It would just move it into `require()` so it would still be a runtime check and you would not save any gas.\r\n\r\nHere's a different idea. There are two things the check guards against: no contract at the address yet (either because you have wrong address or contract has not been deployed yet) or contract destroyed. And given that `SELFDESTRUCT` will likely be removed in the future, the former is much more important. How about we let users declare dependencies - contract addresses that must already be occupied at deployment time. We generate constructor code to check them once and after that we know these contracts exist so we can skip `EXTCODESIZE` on external calls to such addresses.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803496351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803498103",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-803498103",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 803498103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzQ5ODEwMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-21T01:49:00Z",
    "updated_at": "2021-03-21T01:52:01Z",
    "author_association": "MEMBER",
    "body": "> > As an example, require(address(...).isContract()) could work like that, because the generated code could be deduplicated with the one generated by any call.\r\n>\r\n> That would still result in an EXTCODESIZE check though, right? It would just move it into require() so it would still be a runtime check and you would not save any gas.\r\n\r\nYes but you can extend this with the \"invariant\" idea (~~there must be an issue somewhere for invariant syntax~~ #4991, #8146, #8433), and so would be enforced once at creation time. I think in general going towards constructs like require and invariants gives better overall longterm results compared to adding features for unchecked.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803498103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803759565",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-803759565",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 803759565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzc1OTU2NQ==",
    "user": {
      "login": "moodysalem",
      "id": 7897876,
      "node_id": "MDQ6VXNlcjc4OTc4NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7897876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moodysalem",
      "html_url": "https://github.com/moodysalem",
      "followers_url": "https://api.github.com/users/moodysalem/followers",
      "following_url": "https://api.github.com/users/moodysalem/following{/other_user}",
      "gists_url": "https://api.github.com/users/moodysalem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moodysalem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moodysalem/subscriptions",
      "organizations_url": "https://api.github.com/users/moodysalem/orgs",
      "repos_url": "https://api.github.com/users/moodysalem/repos",
      "events_url": "https://api.github.com/users/moodysalem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moodysalem/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-22T04:56:54Z",
    "updated_at": "2021-03-22T04:56:54Z",
    "author_association": "NONE",
    "body": "I think I would prefer something like `IERC20(address).transfer{checkExists: false}(...)`\r\n\r\nBut also, it is strange to me that this check happens for methods that have return data when you can check that the `returndatasize` is as at least what is expected, which was my expectation because of [this tweet](https://twitter.com/bantg/status/1365755857284325378?s=21)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/803759565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/952973752",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-952973752",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 952973752,
    "node_id": "IC_kwDOAm_5kc44zTm4",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-27T14:13:43Z",
    "updated_at": "2021-10-27T14:13:43Z",
    "author_association": "MEMBER",
    "body": "About `extcodesize`: see https://github.com/ethereum/solidity/issues/12204 for a middle ground.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/952973752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1474830191",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-1474830191",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 1474830191,
    "node_id": "IC_kwDOAm_5kc5X6B9v",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-03-18T12:04:25Z",
    "updated_at": "2023-03-18T12:04:25Z",
    "author_association": "NONE",
    "body": "This issue has been marked as stale due to inactivity for the last 90 days.\nIt will be automatically closed in 7 days.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1474830191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1484076118",
    "html_url": "https://github.com/ethereum/solidity/issues/11125#issuecomment-1484076118",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/11125",
    "id": 1484076118,
    "node_id": "IC_kwDOAm_5kc5YdTRW",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2023-03-26T12:04:05Z",
    "updated_at": "2023-03-26T12:04:05Z",
    "author_association": "NONE",
    "body": "Hi everyone! This issue has been automatically closed due to inactivity.\nIf you think this issue is still relevant in the latest Solidity version and you have something to [contribute](https://docs.soliditylang.org/en/latest/contributing.html), feel free to reopen.\nHowever, unless the issue is a concrete proposal that can be implemented, we recommend starting a language discussion on the [forum](https://forum.soliditylang.org) instead.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1484076118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
