{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/7180/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/7180/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/7180/events",
  "html_url": "https://github.com/ethereum/solidity/issues/7180",
  "id": 477281196,
  "node_id": "MDU6SXNzdWU0NzcyODExOTY=",
  "number": 7180,
  "title": "[Abiv2 proto fuzzer] Use variable length literals to initialize arguments of `bytes`/s",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1018738457,
      "node_id": "MDU6TGFiZWwxMDE4NzM4NDU3",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/testing%20:hammer:",
      "name": "testing :hammer:",
      "color": "ffc6db",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2019-08-06T09:50:04Z",
  "updated_at": "2019-09-02T13:05:44Z",
  "closed_at": "2019-09-02T13:05:44Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Abstract\r\n\r\nIn #7177, after taking a look at  @ekpyron  (see https://github.com/ethereum/solidity/pull/7177#discussion_r310948711), I feel that the current approach that the proto fuzzer takes to initialize arguments of type `bytes`/`string` is insufficient to test abi coding. \r\n\r\nCurrently, the proto fuzzer always initializes a `bytes` argument with a value that is exactly 32 bytes in size.\r\n\r\nIdeally, we should be using a variable length literal to initialize an argument of `bytes`/`string` type.\r\n\r\n## Motivation\r\n\r\nPresently, the routine that provides the literal used to initialize a `bytes` or a `string` type variable is this\r\n\r\nhttps://github.com/ethereum/solidity/blob/cd563e526a92721a1e9e1633f5e2c9e53e77b242/test/tools/ossfuzz/protoToAbiV2.h#L242-L245\r\n\r\nThe routine hashes a monotonically increasing counter using  `keccak256` and assigns  the resulting 32 byte hash value (in hex encoding minus the `0x` prefix) to a variable of `bytes` or `string` type. The initialized value is a string literal (that holds the hash value).\r\n\r\nTBD.\r\n\r\n## Specification\r\n\r\n\r\n\r\n## Backwards Compatibility\r\n\r\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/7180/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/7180/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518607769",
    "html_url": "https://github.com/ethereum/solidity/issues/7180#issuecomment-518607769",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
    "id": 518607769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODYwNzc2OQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T10:16:18Z",
    "updated_at": "2019-08-06T10:16:18Z",
    "author_association": "MEMBER",
    "body": "We should remember to check whether this will prompt padding issues in the creation of invalid (cropped) encodings.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518607769/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518626780",
    "html_url": "https://github.com/ethereum/solidity/issues/7180#issuecomment-518626780",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
    "id": 518626780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODYyNjc4MA==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T11:18:23Z",
    "updated_at": "2019-08-06T11:19:39Z",
    "author_association": "MEMBER",
    "body": "Just verified that cropping fewer bytes incorrectly leads to successful execution of low level call. Example test case is the following which fails the check encoded in these lines of solidity code\r\n\r\n```\r\n\t\t// Return non-zero value if call succeeds for incorrect encoding\r\n\t\tif (success == true)\r\n\t\t\treturn 400001;\r\n```\r\n\r\n```\r\npragma solidity >=0.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract C {\r\n\r\n\tbytes x_0;\r\n\r\n\tfunction test() public returns (uint) {\r\n\t\r\n\t\tx_0 = hex\"\";\r\n\t\tuint returnVal = this.coder_public(x_0);\r\n\t\tif (returnVal != 0)\r\n\t\t\treturn returnVal;\r\n\r\n\t\treturnVal = this.coder_external(x_0);\r\n\t\tif (returnVal != 0)\r\n\t\t\treturn uint(200000) + returnVal;\r\n\r\n\t\tbytes memory argumentEncoding = abi.encode(x_0);\r\n\r\n\t\treturnVal = checkEncodedCall(this.coder_public.selector, argumentEncoding, 67);\r\n\t\tif (returnVal != 0)\r\n\t\t\treturn returnVal;\r\n\r\n\t\treturnVal = checkEncodedCall(this.coder_external.selector, argumentEncoding, 67);\r\n\t\tif (returnVal != 0)\r\n\t\t\treturn uint(200000) + returnVal;\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tfunction bytesCompare(bytes memory a, bytes memory b) internal pure returns (bool) {\r\n\t\tif(a.length != b.length)\r\n\t\t\treturn false;\r\n\t\tfor (uint i = 0; i < a.length; i++)\r\n\t\t\tif (a[i] != b[i])\r\n\t\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// Accepts function selector, correct argument encoding, and length of invalid encoding and returns\r\n\t/// the correct and incorrect abi encoding for calling the function specified by the function selector.\r\n\tfunction createEncoding(bytes4 funcSelector, bytes memory argumentEncoding, uint invalidLengthFuzz)\r\n\t\tinternal pure returns (bytes memory, bytes memory)\r\n\t{\r\n\t\tbytes memory validEncoding = new bytes(4 + argumentEncoding.length);\r\n\t\t// Ensure that invalidEncoding crops at least one and at most all bytes from correct encoding.\r\n\t\t// Check if shorter bytes/string values don't lead to successful decoding even when encoding\r\n\t\t// is cropped.\r\n\t\tuint invalidLength = invalidLengthFuzz % argumentEncoding.length + 10;\r\n\t\tbytes memory invalidEncoding = new bytes(4 + invalidLength);\r\n\t\tfor (uint i = 0; i < 4; i++)\r\n\t\t\tvalidEncoding[i] = invalidEncoding[i] = funcSelector[i];\r\n\t\tfor (uint i = 0; i < argumentEncoding.length; i++)\r\n\t\t\tvalidEncoding[i+4] = argumentEncoding[i];\r\n\t\tfor (uint i = 0; i < invalidLength; i++)\r\n\t\t\tinvalidEncoding[i+4] = argumentEncoding[i];\r\n\t\treturn (validEncoding, invalidEncoding);\r\n\t}\r\n\r\n\t/// Accepts function selector, correct argument encoding, and an invalid encoding length as input.\r\n\t/// Returns a non-zero value if either call with correct encoding fails or call with incorrect encoding\r\n\t/// succeeds. Returns zero if both calls meet expectation.\r\n\tfunction checkEncodedCall(bytes4 funcSelector, bytes memory argumentEncoding, uint invalidLengthFuzz) public returns (uint)\r\n\t{\r\n\t\t(bytes memory validEncoding, bytes memory invalidEncoding) = createEncoding(funcSelector, argumentEncoding, invalidLengthFuzz);\r\n\t\t(bool success, bytes memory returnVal) = address(this).call(validEncoding);\r\n\t\tuint returnCode = abi.decode(returnVal, (uint));\r\n\t\t// Return non-zero value if call fails for correct encoding\r\n\t\tif (success == false || returnCode != 0)\r\n\t\t\treturn 400000;\r\n\t\t(success, ) = address(this).call(invalidEncoding);\r\n\t\t// Return non-zero value if call succeeds for incorrect encoding\r\n\t\tif (success == true)\r\n\t\t\treturn 400001;\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tfunction coder_public(bytes memory c_0) public pure returns (uint) {\r\n\t\t\r\n\t\tif (!bytesCompare(c_0, hex\"\")) return 1;\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction coder_external(bytes calldata c_0) external pure returns (uint) {\r\n\t\t\r\n\t\tif (!bytesCompare(c_0, hex\"\")) return 1;\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518626780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518629862",
    "html_url": "https://github.com/ethereum/solidity/issues/7180#issuecomment-518629862",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
    "id": 518629862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODYyOTg2Mg==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T11:29:43Z",
    "updated_at": "2019-08-06T11:30:20Z",
    "author_association": "MEMBER",
    "body": "@ekpyron I am working on a more precise setting for invalid encoding length. Initially, I \r\nthought of doing something like the following (inside solidity test program template)\r\n\r\n```\r\n\t\tuint invalidLength = invalidLengthFuzz % argumentEncoding.length;\r\n\t\t// Ensure that invalidEncoding crops at least 32 bytes since shorter\r\n\t\t// bytes/string values can lead to successful decoding even when fewer\r\n                // than 32 bytes have been cropped.\r\n\t\tif (invalidLength < 32)\r\n\t\t\tinvalidLength = 32;\r\n```\r\n\r\nbut then, this never leads to an invalid encoding that is less than 32 bytes long.\r\n\r\nAt the moment, I am considering something like\r\n\r\n```\r\n\t\tuint invalidLength = invalidLengthFuzz % argumentEncoding.length;\r\n\t\t// Ensure that invalidEncoding crops at least 32 bytes when creating\r\n                // an invalid encoding for a (correct) encoding whose length is less\r\n                // than or equal to some predefined threshold that is indicative of \r\n                // unused padded bytes\r\n\t\tif (argumentEncoding.length <= <some_threshold_to_be_decided> && invalidLength < 32)\r\n\t\t\tinvalidLength = 32;\r\n```\r\n\r\ndo you think this makes sense?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518629862/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518631354",
    "html_url": "https://github.com/ethereum/solidity/issues/7180#issuecomment-518631354",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
    "id": 518631354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODYzMTM1NA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T11:34:34Z",
    "updated_at": "2019-08-06T11:34:34Z",
    "author_association": "MEMBER",
    "body": "What about\r\n```\r\nuint invalidLength = invalidLengthFuzz % (argumentEncoding.length - 31)\r\n```\r\n?\r\nThat is, if ``argumentEncoding.length`` is always greater than 31 - otherwise maybe something like\r\n```\r\nuint invalidLength = (argumentEncoding.length > 31) ? (invalidLengthFuzz % (argumentEncoding.length - 31)) : (argumentEncoding.length /2);\r\n```\r\n?\r\n\r\nPadding will be at most 31 bytes long, so if ``invalidLenth < argumentEncoding.length - 31`` we should be fine I think.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518631354/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518642203",
    "html_url": "https://github.com/ethereum/solidity/issues/7180#issuecomment-518642203",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
    "id": 518642203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODY0MjIwMw==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T12:10:30Z",
    "updated_at": "2019-08-06T12:10:30Z",
    "author_association": "MEMBER",
    "body": "I will test this a bit and ping back\r\n\r\n```\r\nuint invalidLength = (argumentEncoding.length > 31) ? (invalidLengthFuzz % (argumentEncoding.length - 31)) : (invalidLengthFuzz % argumentEncoding.length);\r\n```\r\n\r\nI modified the false case just so we get a somewhat uniform distribution over 0--31. Don't know if it matters though. Thank you for your feedback :-)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518642203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518642930",
    "html_url": "https://github.com/ethereum/solidity/issues/7180#issuecomment-518642930",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
    "id": 518642930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODY0MjkzMA==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T12:12:54Z",
    "updated_at": "2019-08-06T12:12:54Z",
    "author_association": "MEMBER",
    "body": "Haha, I just realize: the actual problem is that the argumentEncoding *is* padded, so we can of course be sure that it is at least 32 bytes long ;-)!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518642930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518648687",
    "html_url": "https://github.com/ethereum/solidity/issues/7180#issuecomment-518648687",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
    "id": 518648687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODY0ODY4Nw==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T12:30:55Z",
    "updated_at": "2019-08-06T12:30:55Z",
    "author_association": "MEMBER",
    "body": "Oh okay, I'm a bit confused now after reading this from https://solidity.readthedocs.io/en/v0.5.10/abi-spec.html\r\n\r\n> The encoding of string or bytes does not apply padding at the end unless it is part of an array or struct (then it is padded to a multiple of 32 bytes).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518648687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518651349",
    "html_url": "https://github.com/ethereum/solidity/issues/7180#issuecomment-518651349",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
    "id": 518651349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODY1MTM0OQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T12:38:59Z",
    "updated_at": "2019-08-06T12:39:24Z",
    "author_association": "MEMBER",
    "body": "That snippet is from \"Non-standard Packed Mode\".\r\n\r\nIf the encoding wasn't padded, then https://github.com/ethereum/solidity/issues/7180#issuecomment-518626780 would work just fine.\r\n\r\n(If I'm not mistaken ;-))",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518651349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518662919",
    "html_url": "https://github.com/ethereum/solidity/issues/7180#issuecomment-518662919",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7180",
    "id": 518662919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODY2MjkxOQ==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-06T13:11:49Z",
    "updated_at": "2019-08-06T13:11:49Z",
    "author_association": "MEMBER",
    "body": "Doh, sorry about my last comment, I should have browsed up to the heading the comment was under!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/518662919/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
