{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14358",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14358/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14358/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14358/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14358",
  "id": 1774123300,
  "node_id": "I_kwDOAm_5kc5pvvkk",
  "number": 14358,
  "title": "The new IR pipeline introduces stack-to-deep errors",
  "user": {
    "login": "pcaversaccio",
    "id": 25297591,
    "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
    "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pcaversaccio",
    "html_url": "https://github.com/pcaversaccio",
    "followers_url": "https://api.github.com/users/pcaversaccio/followers",
    "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
    "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
    "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
    "repos_url": "https://api.github.com/users/pcaversaccio/repos",
    "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-06-26T07:29:09Z",
  "updated_at": "2023-06-29T10:44:35Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nRunning my Solidity tests [here](https://github.com/pcaversaccio/snekmate/tree/main/test) (commit `2d8b8d1238e7534cef8a4fb1640068cc34259ea8`) using the `--via-ir` option will throw with a stack-too-deep error even though compiling it \"normally\", i.e using the old bytecode optimiser pipeline, will complete successfully.\r\n\r\n### Failure Case\r\n\r\n```bash\r\n~$ forge test --via-ir\r\n[⠒] Compiling...\r\n[⠃] Compiling 102 files with 0.8.20\r\n[⠘] Solc 0.8.20 finished in 566.03s\r\nError: \r\nCompiler run failed:\r\nError: Yul exception:Variable var_assets is 1 too deep in the stack [ RET var_assets _3 expr_2 _5 _2 expr_1 _6 expr _8 cleaned var_caller _7 _16 _12 var_receiver _20 _21 ]\r\nmemoryguard was present.\r\nmemoryguard was present.\r\n```\r\n\r\n### Success Case\r\n```bash\r\n~$ forge test\r\n[⠰] Compiling...\r\n[⠢] Compiling 102 files with 0.8.20\r\n[⠰] Solc 0.8.20 finished in 175.13s\r\nCompiler run successful!\r\n```\r\n\r\n## Environment\r\n\r\n- Compiler version: `0.8.20`\r\n- Target EVM version (as per compiler settings): `shanghai`\r\n- Framework/IDE (e.g. Truffle or Remix): `forge`\r\n- EVM execution environment / backend / blockchain client: `foundry` (i.e. `hevm` under the hood)\r\n- Operating system: `WSL` using `Ubuntu`\r\n\r\n## Steps to Reproduce\r\n\r\nInstall Foundry:\r\n\r\n```bash\r\ncurl -L https://foundry.paradigm.xyz | bash\r\n```\r\n\r\nClone my [repo](https://github.com/pcaversaccio/snekmate) and run `forge` with the `--via-ir` option (caveat: it's time-consuming since the new IR pipeline is very slow):\r\n\r\n```bash\r\ngit clone git@github.com:pcaversaccio/snekmate.git\r\ncd snekmate\r\ngit submodule update --init --recursive\r\nforge test --via-ir\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14358/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14358/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1612350239",
    "html_url": "https://github.com/ethereum/solidity/issues/14358#issuecomment-1612350239",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14358",
    "id": 1612350239,
    "node_id": "IC_kwDOAm_5kc5gGoMf",
    "user": {
      "login": "aathan",
      "id": 24279435,
      "node_id": "MDQ6VXNlcjI0Mjc5NDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24279435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aathan",
      "html_url": "https://github.com/aathan",
      "followers_url": "https://api.github.com/users/aathan/followers",
      "following_url": "https://api.github.com/users/aathan/following{/other_user}",
      "gists_url": "https://api.github.com/users/aathan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aathan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aathan/subscriptions",
      "organizations_url": "https://api.github.com/users/aathan/orgs",
      "repos_url": "https://api.github.com/users/aathan/repos",
      "events_url": "https://api.github.com/users/aathan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aathan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T02:30:39Z",
    "updated_at": "2023-06-29T02:30:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Possibly related. If `--optimizer-runs` is omitted, this error is not produced. Does the \"memoryguard\" indicate there is some arbitrary limit on the size of certain data structures? Can I increase it?  I plan to try 0.8.20 soon.\r\n\r\n```\r\n$ forge build --force --via-ir --optimizer-runs 1\r\n[⠊] Compiling...\r\n[⠃] Compiling 71 files with 0.8.19\r\n[⠢] Solc 0.8.19 finished in 75.88s\r\nError:\r\nCompiler run failed:\r\nError: Yul exception:Variable var_quantum is 2 too deep in the stack [ var_mult var_normToV _1 var_quantum var_name_mpos var_div var_quantize var_mm_slot RET RET[increment_uint256] var_i RET[checked_add_uint256] 0x06 RET[fun_log_23831] expr_1 _2 RET[string_concat_stringliteral_703d_string_stringliteral_681a_string_storage_stringliteral] var_name_mpos RET[fun_log_23831] _10 _8 ]\r\nmemoryguard was present.\r\nmemoryguard was present.\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1612350239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1612597447",
    "html_url": "https://github.com/ethereum/solidity/issues/14358#issuecomment-1612597447",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14358",
    "id": 1612597447,
    "node_id": "IC_kwDOAm_5kc5gHkjH",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T08:06:09Z",
    "updated_at": "2023-06-29T08:06:09Z",
    "author_association": "MEMBER",
    "body": "See [`memoryguard` in the Yul docs](https://docs.soliditylang.org/en/latest/yul.html#memoryguard). In this particular case the fact that `memoryguard` was present simply indicates that your code did not contain anything that would make the compiler assume your code is not [memory-safe](https://docs.soliditylang.org/en/latest/assembly.html#memory-safety) (like assembly blocks that access memory and are not marked `memory-safe`), and it was able to use `memoryguard`. Which means that the compiler was not prevented from using the mechanism for moving variables to memory, which is the most common cause of \"Stack too deep\" errors nowadays.\r\n\r\nIt does not impose any size limits.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1612597447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1612707366",
    "html_url": "https://github.com/ethereum/solidity/issues/14358#issuecomment-1612707366",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14358",
    "id": 1612707366,
    "node_id": "IC_kwDOAm_5kc5gH_Ym",
    "user": {
      "login": "pcaversaccio",
      "id": 25297591,
      "node_id": "MDQ6VXNlcjI1Mjk3NTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25297591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pcaversaccio",
      "html_url": "https://github.com/pcaversaccio",
      "followers_url": "https://api.github.com/users/pcaversaccio/followers",
      "following_url": "https://api.github.com/users/pcaversaccio/following{/other_user}",
      "gists_url": "https://api.github.com/users/pcaversaccio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pcaversaccio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pcaversaccio/subscriptions",
      "organizations_url": "https://api.github.com/users/pcaversaccio/orgs",
      "repos_url": "https://api.github.com/users/pcaversaccio/repos",
      "events_url": "https://api.github.com/users/pcaversaccio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pcaversaccio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T09:30:53Z",
    "updated_at": "2023-06-29T09:30:53Z",
    "author_association": "NONE",
    "body": "> See [`memoryguard` in the Yul docs](https://docs.soliditylang.org/en/latest/yul.html#memoryguard). In this particular case the fact that `memoryguard` was present simply indicates that your code did not contain anything that would make the compiler assume your code is not [memory-safe](https://docs.soliditylang.org/en/latest/assembly.html#memory-safety) (like assembly blocks that access memory and are not marked `memory-safe`), and it was able to use `memoryguard`. Which means that the compiler was not prevented from using the mechanism for moving variables to memory, which is the most common cause of \"Stack too deep\" errors nowadays.\r\n\r\nRight, so it's an optimizer bug in the end, correct?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1612707366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1612858333",
    "html_url": "https://github.com/ethereum/solidity/issues/14358#issuecomment-1612858333",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14358",
    "id": 1612858333,
    "node_id": "IC_kwDOAm_5kc5gIkPd",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T10:44:34Z",
    "updated_at": "2023-06-29T10:44:34Z",
    "author_association": "MEMBER",
    "body": "Technically it's a bug in what we call \"Yul-EVM-code-transform\" :-) - but it's a bug in any case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1612858333/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
