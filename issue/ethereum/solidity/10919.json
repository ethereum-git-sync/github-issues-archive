{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/10919",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/10919/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/10919/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/10919/events",
  "html_url": "https://github.com/ethereum/solidity/issues/10919",
  "id": 804469417,
  "node_id": "MDU6SXNzdWU4MDQ0Njk0MTc=",
  "number": 10919,
  "title": "[Sol->Yul] Invalid code generation due to address.call() for spuriousDragon only",
  "user": {
    "login": "bshastry",
    "id": 2388185,
    "node_id": "MDQ6VXNlcjIzODgxODU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bshastry",
    "html_url": "https://github.com/bshastry",
    "followers_url": "https://api.github.com/users/bshastry/followers",
    "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
    "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
    "organizations_url": "https://api.github.com/users/bshastry/orgs",
    "repos_url": "https://api.github.com/users/bshastry/repos",
    "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bshastry/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 2376134343,
      "node_id": "MDU6TGFiZWwyMzc2MTM0MzQz",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/should%20compile%20without%20error",
      "name": "should compile without error",
      "color": "c48f13",
      "default": false,
      "description": "Error is reported even though it shouldn't. Source is fine."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2021-02-09T11:34:51Z",
  "updated_at": "2021-02-23T12:24:50Z",
  "closed_at": "2021-02-23T12:24:50Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "<!--## Prerequisites\r\n\r\n- First, many thanks for taking part in the community. We really appreciate that.\r\n- We realize there is a lot of information requested here. We ask only that you do your best to provide as much information as possible so we can better help you.\r\n- Support questions are better asked in one of the following locations:\r\n\t- [Solidity chat](https://gitter.im/ethereum/solidity)\r\n\t- [Stack Overflow](https://ethereum.stackexchange.com/)\r\n- Ensure the issue isn't already reported.\r\n- The issue should be reproducible with the latest solidity version; however, this isn't a hard requirement and being reproducible with an older version is sufficient.\r\n-->\r\n\r\n## Description\r\n\r\n```\r\ncontract C {\r\nfunction f() public returns (bool success) {\r\n    (success, ) = (address(0)).call{value: 30}(\"\");\r\n}\r\n}\r\n```\r\n\r\nresults in invalid Yul code gen for spuriousDragon (```$ solc --ir --evm-version spuriousDragon test.sol```)\r\n\r\n```\r\nInternal compiler error during compilation:\r\n/solidity/libsolidity/codegen/ir/IRGenerator.cpp(64): Throw in function pair<std::string, std::string> solidity::frontend::IRGenerator::run(const solidity::frontend::ContractDefinition &, const map<const solidity::frontend::ContractDefinition *, const std::string_view> &)\r\nDynamic exception type: boost::wrapexcept<solidity::langutil::InternalCompilerError>\r\nstd::exception::what: \r\nobject \"C_21\" {\r\n    code {\r\n        mstore(64, 128)\r\n        if callvalue() { revert(0, 0) }\r\n\r\n        constructor_C_21()\r\n\r\n        codecopy(0, dataoffset(\"C_21_deployed\"), datasize(\"C_21_deployed\"))\r\n\r\n        return(0, datasize(\"C_21_deployed\"))\r\n\r\n        function constructor_C_21() {\r\n\r\n        }\r\n\r\n    }\r\n    object \"C_21_deployed\" {\r\n        code {\r\n            mstore(64, 128)\r\n\r\n            if iszero(lt(calldatasize(), 4))\r\n            {\r\n                let selector := shift_right_224_unsigned(calldataload(0))\r\n                switch selector\r\n\r\n                case 0x26121ff0\r\n                {\r\n                    // f()\r\n\r\n                    if callvalue() { revert(0, 0) }\r\n                    abi_decode_tuple_(4, calldatasize())\r\n                    let ret_0 :=  fun_f_20()\r\n                    let memPos := allocate_memory(0)\r\n                    let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos , ret_0)\r\n                    return(memPos, sub(memEnd, memPos))\r\n                }\r\n\r\n                default {}\r\n            }\r\n            if iszero(calldatasize()) {  }\r\n            revert(0, 0)\r\n\r\n            function abi_decode_tuple_(headStart, dataEnd)   {\r\n                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }\r\n\r\n            }\r\n\r\n            function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\r\n                mstore(pos, cleanup_t_bool(value))\r\n            }\r\n\r\n            function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\r\n                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\r\n                store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\r\n                end := add(pos, 0)\r\n            }\r\n\r\n            function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack(pos ) -> end {\r\n\r\n                pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\r\n\r\n                end := pos\r\n            }\r\n\r\n            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart , value0) -> tail {\r\n                tail := add(headStart, 32)\r\n\r\n                abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\r\n\r\n            }\r\n\r\n            function allocate_memory(size) -> memPtr {\r\n                memPtr := allocate_unbounded()\r\n                finalize_allocation(memPtr, size)\r\n            }\r\n\r\n            function allocate_unbounded() -> memPtr {\r\n                memPtr := mload(64)\r\n            }\r\n\r\n            function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\r\n                updated_pos := pos\r\n            }\r\n\r\n            function cleanup_t_bool(value) -> cleaned {\r\n                cleaned := iszero(iszero(value))\r\n            }\r\n\r\n            function cleanup_t_uint160(value) -> cleaned {\r\n                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\r\n            }\r\n\r\n            function cleanup_t_uint256(value) -> cleaned {\r\n                cleaned := value\r\n            }\r\n\r\n            function convert_t_bool_to_t_bool(value) -> converted {\r\n                converted := cleanup_t_bool(value)\r\n            }\r\n\r\n            function convert_t_rational_0_by_1_to_t_address(value) -> converted {\r\n                converted := convert_t_rational_0_by_1_to_t_uint160(value)\r\n            }\r\n\r\n            function convert_t_rational_0_by_1_to_t_uint160(value) -> converted {\r\n                converted := cleanup_t_uint160(value)\r\n            }\r\n\r\n            function convert_t_rational_30_by_1_to_t_uint256(value) -> converted {\r\n                converted := cleanup_t_uint256(value)\r\n            }\r\n\r\n            function convert_t_tuple$_t_bool_$_t_inaccessible_$_to_t_tuple$_t_bool_$__$(value0, value1) -> converted0 {\r\n                converted0 := convert_t_bool_to_t_bool(value0)\r\n\r\n            }\r\n\r\n            function finalize_allocation(memPtr, size) {\r\n                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\r\n                // protect against overflow\r\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\r\n                mstore(64, newFreePtr)\r\n            }\r\n\r\n            function fun_f_20() -> vloc_success_3 {\r\n                let zero_value_for_type_t_bool_1 := zero_value_for_split_t_bool()\r\n                vloc_success_3 := zero_value_for_type_t_bool_1\r\n\r\n                let expr_9 := 0x00\r\n                let expr_10 := convert_t_rational_0_by_1_to_t_address(expr_9)\r\n                let expr_11 := expr_10\r\n                let expr_12_address := expr_11\r\n                let expr_13 := 0x1e\r\n                let expr_14_address := expr_12_address\r\n                let expr_14_value := convert_t_rational_30_by_1_to_t_uint256(expr_13)\r\n\r\n                let _2 := allocate_unbounded()\r\n                let _3 := sub(abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack(_2  ), _2)\r\n\r\n                let expr_16_component_1 := call(gas(), expr_14_address,  expr_14_value,  _2, _3, 0, 0)\r\n\r\n                let _4_component_1 := convert_t_tuple$_t_bool_$_t_inaccessible_$_to_t_tuple$_t_bool_$__$(expr_16_component_1, expr_16_component_2)\r\n                vloc_success_3 := _4_component_1\r\n\r\n            }\r\n\r\n            function panic_error_0x41() {\r\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\r\n                mstore(4, 0x41)\r\n                revert(0, 0x24)\r\n            }\r\n\r\n            function round_up_to_mul_of_32(value) -> result {\r\n                result := and(add(value, 31), not(31))\r\n            }\r\n\r\n            function shift_right_224_unsigned(value) -> newValue {\r\n                newValue :=\r\n\r\n                div(value, 0x0100000000000000000000000000000000000000000000000000000000)\r\n\r\n            }\r\n\r\n            function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\r\n\r\n            }\r\n\r\n            function zero_value_for_split_t_bool() -> ret {\r\n                ret := 0\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nInvalid IR generated:\r\nError: Identifier not found.\r\n\r\n\r\n\r\n[solidity::util::tag_comment*] = \r\nobject \"C_21\" {\r\n    code {\r\n        mstore(64, 128)\r\n        if callvalue() { revert(0, 0) }\r\n\r\n        constructor_C_21()\r\n\r\n        codecopy(0, dataoffset(\"C_21_deployed\"), datasize(\"C_21_deployed\"))\r\n\r\n        return(0, datasize(\"C_21_deployed\"))\r\n\r\n        function constructor_C_21() {\r\n\r\n        }\r\n\r\n    }\r\n    object \"C_21_deployed\" {\r\n        code {\r\n            mstore(64, 128)\r\n\r\n            if iszero(lt(calldatasize(), 4))\r\n            {\r\n                let selector := shift_right_224_unsigned(calldataload(0))\r\n                switch selector\r\n\r\n                case 0x26121ff0\r\n                {\r\n                    // f()\r\n\r\n                    if callvalue() { revert(0, 0) }\r\n                    abi_decode_tuple_(4, calldatasize())\r\n                    let ret_0 :=  fun_f_20()\r\n                    let memPos := allocate_memory(0)\r\n                    let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos , ret_0)\r\n                    return(memPos, sub(memEnd, memPos))\r\n                }\r\n\r\n                default {}\r\n            }\r\n            if iszero(calldatasize()) {  }\r\n            revert(0, 0)\r\n\r\n            function abi_decode_tuple_(headStart, dataEnd)   {\r\n                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }\r\n\r\n            }\r\n\r\n            function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\r\n                mstore(pos, cleanup_t_bool(value))\r\n            }\r\n\r\n            function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\r\n                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\r\n                store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\r\n                end := add(pos, 0)\r\n            }\r\n\r\n            function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack(pos ) -> end {\r\n\r\n                pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\r\n\r\n                end := pos\r\n            }\r\n\r\n            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart , value0) -> tail {\r\n                tail := add(headStart, 32)\r\n\r\n                abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\r\n\r\n            }\r\n\r\n            function allocate_memory(size) -> memPtr {\r\n                memPtr := allocate_unbounded()\r\n                finalize_allocation(memPtr, size)\r\n            }\r\n\r\n            function allocate_unbounded() -> memPtr {\r\n                memPtr := mload(64)\r\n            }\r\n\r\n            function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\r\n                updated_pos := pos\r\n            }\r\n\r\n            function cleanup_t_bool(value) -> cleaned {\r\n                cleaned := iszero(iszero(value))\r\n            }\r\n\r\n            function cleanup_t_uint160(value) -> cleaned {\r\n                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\r\n            }\r\n\r\n            function cleanup_t_uint256(value) -> cleaned {\r\n                cleaned := value\r\n            }\r\n\r\n            function convert_t_bool_to_t_bool(value) -> converted {\r\n                converted := cleanup_t_bool(value)\r\n            }\r\n\r\n            function convert_t_rational_0_by_1_to_t_address(value) -> converted {\r\n                converted := convert_t_rational_0_by_1_to_t_uint160(value)\r\n            }\r\n\r\n            function convert_t_rational_0_by_1_to_t_uint160(value) -> converted {\r\n                converted := cleanup_t_uint160(value)\r\n            }\r\n\r\n            function convert_t_rational_30_by_1_to_t_uint256(value) -> converted {\r\n                converted := cleanup_t_uint256(value)\r\n            }\r\n\r\n            function convert_t_tuple$_t_bool_$_t_inaccessible_$_to_t_tuple$_t_bool_$__$(value0, value1) -> converted0 {\r\n                converted0 := convert_t_bool_to_t_bool(value0)\r\n\r\n            }\r\n\r\n            function finalize_allocation(memPtr, size) {\r\n                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\r\n                // protect against overflow\r\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\r\n                mstore(64, newFreePtr)\r\n            }\r\n\r\n            function fun_f_20() -> vloc_success_3 {\r\n                let zero_value_for_type_t_bool_1 := zero_value_for_split_t_bool()\r\n                vloc_success_3 := zero_value_for_type_t_bool_1\r\n\r\n                let expr_9 := 0x00\r\n                let expr_10 := convert_t_rational_0_by_1_to_t_address(expr_9)\r\n                let expr_11 := expr_10\r\n                let expr_12_address := expr_11\r\n                let expr_13 := 0x1e\r\n                let expr_14_address := expr_12_address\r\n                let expr_14_value := convert_t_rational_30_by_1_to_t_uint256(expr_13)\r\n\r\n                let _2 := allocate_unbounded()\r\n                let _3 := sub(abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack(_2  ), _2)\r\n\r\n                let expr_16_component_1 := call(gas(), expr_14_address,  expr_14_value,  _2, _3, 0, 0)\r\n\r\n                let _4_component_1 := convert_t_tuple$_t_bool_$_t_inaccessible_$_to_t_tuple$_t_bool_$__$(expr_16_component_1, expr_16_component_2)\r\n                vloc_success_3 := _4_component_1\r\n\r\n            }\r\n\r\n            function panic_error_0x41() {\r\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\r\n                mstore(4, 0x41)\r\n                revert(0, 0x24)\r\n            }\r\n\r\n            function round_up_to_mul_of_32(value) -> result {\r\n                result := and(add(value, 31), not(31))\r\n            }\r\n\r\n            function shift_right_224_unsigned(value) -> newValue {\r\n                newValue :=\r\n\r\n                div(value, 0x0100000000000000000000000000000000000000000000000000000000)\r\n\r\n            }\r\n\r\n            function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\r\n\r\n            }\r\n\r\n            function zero_value_for_split_t_bool() -> ret {\r\n                ret := 0\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nInvalid IR generated:\r\nError: Identifier not found.\r\n```",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/10919/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/10919/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775880823",
    "html_url": "https://github.com/ethereum/solidity/issues/10919#issuecomment-775880823",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10919",
    "id": 775880823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTg4MDgyMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-09T11:46:59Z",
    "updated_at": "2021-02-09T11:46:59Z",
    "author_association": "MEMBER",
    "body": "```\r\n                let expr_16_component_1 := call(gas(), expr_14_address,  expr_14_value,  _2, _3, 0, 0)\r\n\r\n                let _4_component_1 := convert_t_tuple$_t_bool_$_t_inaccessible_$_to_t_tuple$_t_bool_$__$(expr_16_component_1, expr_16_component_2)\r\n```\r\n\r\nLike #10920, here the tuple is incomplete too. Probably the same error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/775880823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776127125",
    "html_url": "https://github.com/ethereum/solidity/issues/10919#issuecomment-776127125",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10919",
    "id": 776127125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjEyNzEyNQ==",
    "user": {
      "login": "agroce",
      "id": 967816,
      "node_id": "MDQ6VXNlcjk2NzgxNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agroce",
      "html_url": "https://github.com/agroce",
      "followers_url": "https://api.github.com/users/agroce/followers",
      "following_url": "https://api.github.com/users/agroce/following{/other_user}",
      "gists_url": "https://api.github.com/users/agroce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agroce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
      "organizations_url": "https://api.github.com/users/agroce/orgs",
      "repos_url": "https://api.github.com/users/agroce/repos",
      "events_url": "https://api.github.com/users/agroce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agroce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-09T17:59:40Z",
    "updated_at": "2021-02-09T17:59:40Z",
    "author_association": "NONE",
    "body": "@bshastry --  is solfuzzer going to automatically try spuriousDragon gen now, or do I need to manually get some fuzzers on this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776127125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776753092",
    "html_url": "https://github.com/ethereum/solidity/issues/10919#issuecomment-776753092",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10919",
    "id": 776753092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3Njc1MzA5Mg==",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-10T14:40:36Z",
    "updated_at": "2021-02-10T14:40:36Z",
    "author_association": "MEMBER",
    "body": "> @bshastry -- is solfuzzer going to automatically try spuriousDragon gen now, or do I need to manually get some fuzzers on this?\r\n\r\niiuc, you may have to do this manually.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/776753092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777037578",
    "html_url": "https://github.com/ethereum/solidity/issues/10919#issuecomment-777037578",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10919",
    "id": 777037578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzAzNzU3OA==",
    "user": {
      "login": "agroce",
      "id": 967816,
      "node_id": "MDQ6VXNlcjk2NzgxNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agroce",
      "html_url": "https://github.com/agroce",
      "followers_url": "https://api.github.com/users/agroce/followers",
      "following_url": "https://api.github.com/users/agroce/following{/other_user}",
      "gists_url": "https://api.github.com/users/agroce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agroce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
      "organizations_url": "https://api.github.com/users/agroce/orgs",
      "repos_url": "https://api.github.com/users/agroce/repos",
      "events_url": "https://api.github.com/users/agroce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agroce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-10T21:08:45Z",
    "updated_at": "2021-02-10T21:08:45Z",
    "author_association": "NONE",
    "body": "ok, I'll start up a run on this.  are homestead and spuriousDragon sufficiently different targets I should fuzz both?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777037578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777079237",
    "html_url": "https://github.com/ethereum/solidity/issues/10919#issuecomment-777079237",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10919",
    "id": 777079237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzA3OTIzNw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-10T22:30:37Z",
    "updated_at": "2021-02-10T22:33:30Z",
    "author_association": "MEMBER",
    "body": "I would expect the following versions to have significant differences:\r\n- <tangerinewhistle does not have the 63/64th rule\r\n- <byzantium lacks support for returndata and staticcall\r\n- <constantinople lacks bitwise shifting, create2, extcodehash\r\n- <istanbul lacks chainid and selfbalance\r\n\r\nOther hardforks only had repricings or precompiles, but those new precompiles do not have language level support anyway.\r\n\r\nBased on this I think the following versions should be fuzzed (eventually):\r\n- homestead,\r\n- tangerinewhistle or spuriousdragon,\r\n- byzantium,\r\n- constantinople or petersburg,\r\n- istanbul\r\n\r\nAnd I would say the most relevant ones are istanbul/petersburg/byzantium.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777079237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777139342",
    "html_url": "https://github.com/ethereum/solidity/issues/10919#issuecomment-777139342",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/10919",
    "id": 777139342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzEzOTM0Mg==",
    "user": {
      "login": "agroce",
      "id": 967816,
      "node_id": "MDQ6VXNlcjk2NzgxNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/967816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agroce",
      "html_url": "https://github.com/agroce",
      "followers_url": "https://api.github.com/users/agroce/followers",
      "following_url": "https://api.github.com/users/agroce/following{/other_user}",
      "gists_url": "https://api.github.com/users/agroce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agroce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agroce/subscriptions",
      "organizations_url": "https://api.github.com/users/agroce/orgs",
      "repos_url": "https://api.github.com/users/agroce/repos",
      "events_url": "https://api.github.com/users/agroce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agroce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-11T00:48:37Z",
    "updated_at": "2021-02-11T00:48:37Z",
    "author_association": "NONE",
    "body": "@axic sounds good, I'll start up some runs targeting those.  I have a spuriousDragon running, nothing interesting yet but it usually takes a few days",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777139342/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
