{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/12880",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/12880/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/12880/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/12880/events",
  "html_url": "https://github.com/ethereum/solidity/issues/12880",
  "id": 1187170144,
  "node_id": "I_kwDOAm_5kc5Gwsdg",
  "number": 12880,
  "title": "Bug in ABI encoding empty storage array",
  "user": {
    "login": "hrkrshnn",
    "id": 13174375,
    "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
    "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hrkrshnn",
    "html_url": "https://github.com/hrkrshnn",
    "followers_url": "https://api.github.com/users/hrkrshnn/followers",
    "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
    "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
    "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
    "repos_url": "https://api.github.com/users/hrkrshnn/repos",
    "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    },
    {
      "id": 2376132438,
      "node_id": "MDU6TGFiZWwyMzc2MTMyNDM4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/codegen%20error",
      "name": "codegen error",
      "color": "000000",
      "default": false,
      "description": "Compiler generates invalid code. Critical."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-03-30T23:41:46Z",
  "updated_at": "2022-05-23T08:56:30Z",
  "closed_at": "2022-05-23T08:56:30Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The following function does ABI encoding of strings in storage. However, this has a bug when the string in storage is empty. If the string is short, it will still have an empty data that's part of the ABI. But that is not how empty strings are encoded in ABI.\r\n\r\nhttps://github.com/ethereum/solidity/blob/c4909e99c1015233d6937d229058cde52615f246/libsolidity/codegen/ABIFunctions.cpp#L699-L703\r\n\r\nFor reference, the ABI encoder v1 version correctly encodes the data.\r\n```solidity\r\n// pragma abicoder v1;\r\ncontract C {\r\n    string message;\r\n    event Message(string);\r\n    function emitMessage() external {\r\n        emit Message(message);\r\n    }\r\n}\r\n```\r\n---\r\nFound in https://github.com/gakonst/foundry/issues/1027#issuecomment-1079880060\r\n\r\nThe ABI encoding for the empty string should be  (48-bytes)\r\n```\r\n0000000000000000000000000000000000000000000000000000000000000020\r\n0000000000000000000000000000000000000000000000000000000000000000\r\n```\r\n\r\nbut ends up being\r\n\r\n```\r\n0000000000000000000000000000000000000000000000000000000000000020\r\n0000000000000000000000000000000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000000000000000000000000000\r\n```\r\n\r\n\r\n",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/12880/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/12880/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1084745650",
    "html_url": "https://github.com/ethereum/solidity/issues/12880#issuecomment-1084745650",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12880",
    "id": 1084745650,
    "node_id": "IC_kwDOAm_5kc5Ap-ey",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T15:26:13Z",
    "updated_at": "2022-03-31T15:26:13Z",
    "author_association": "MEMBER",
    "body": "Can reproduce this with the Solidity fuzzer. However, I recall @ekpyron  telling me that `pragma abicoder v1;` is a source of false positives since the encoding is known to be different between legacy and new (abi v2) coders. So, the design decision I took was to disable generation of the `pragma abicoder v1;` since the new codegen would anyway ignore the directive and use `v2` instead and thereby produce false positives.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1084745650/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1085051220",
    "html_url": "https://github.com/ethereum/solidity/issues/12880#issuecomment-1085051220",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12880",
    "id": 1085051220,
    "node_id": "IC_kwDOAm_5kc5ArJFU",
    "user": {
      "login": "bshastry",
      "id": 2388185,
      "node_id": "MDQ6VXNlcjIzODgxODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2388185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bshastry",
      "html_url": "https://github.com/bshastry",
      "followers_url": "https://api.github.com/users/bshastry/followers",
      "following_url": "https://api.github.com/users/bshastry/following{/other_user}",
      "gists_url": "https://api.github.com/users/bshastry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bshastry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bshastry/subscriptions",
      "organizations_url": "https://api.github.com/users/bshastry/orgs",
      "repos_url": "https://api.github.com/users/bshastry/repos",
      "events_url": "https://api.github.com/users/bshastry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bshastry/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-31T20:08:23Z",
    "updated_at": "2022-03-31T20:08:23Z",
    "author_association": "MEMBER",
    "body": "From chat with @hrkrshnn \r\n\r\n```\r\ncontract C {\r\n    string message;\r\n    event Message(string);\r\n    function emitMessage() external {\r\n        emit Message(message);\r\n        string memory tmp = message;\r\n        emit Message(tmp);\r\n    }\r\n}\r\n```\r\n\r\nThe problem seems to be that even abi coder v2 encodes the first emit call (`emit Message(message)`) and the second emit call (`emit Message(tmp)`) differently. The first encoding is longer one (see original post), the second encoding is shorter. However, both legacy and IR codegens produce the same set of encodings i.e., longer and shorter respectively.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1085051220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1122292315",
    "html_url": "https://github.com/ethereum/solidity/issues/12880#issuecomment-1122292315",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/12880",
    "id": 1122292315,
    "node_id": "IC_kwDOAm_5kc5C5NJb",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-10T11:55:59Z",
    "updated_at": "2022-05-10T11:55:59Z",
    "author_association": "MEMBER",
    "body": "I see two ways to fix this:\r\n1) add an `if` (or switch) inside the case 0 to check for zero length\r\n2) do the mstore in case 0 ever for zero length (it does not hurt) and compute the offset for `pos` using something like `mul(0x20, iszero(iszero(length))` - or a cheaper version that does not use `mul`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1122292315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
