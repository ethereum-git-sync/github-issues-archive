{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13095",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13095/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13095/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13095/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13095",
  "id": 1260148300,
  "node_id": "I_kwDOAm_5kc5LHFZM",
  "number": 13095,
  "title": "Interface inheritance does not seem to add functions to type(Interface) object",
  "user": {
    "login": "maurelian",
    "id": 23033765,
    "node_id": "MDQ6VXNlcjIzMDMzNzY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/maurelian",
    "html_url": "https://github.com/maurelian",
    "followers_url": "https://api.github.com/users/maurelian/followers",
    "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
    "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
    "organizations_url": "https://api.github.com/users/maurelian/orgs",
    "repos_url": "https://api.github.com/users/maurelian/repos",
    "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/maurelian/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2022-06-03T17:00:09Z",
  "updated_at": "2023-06-12T10:05:30Z",
  "closed_at": "2022-06-09T13:06:46Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\nI _think_ this is a bug, unless I'm reading the docs wrong for interface inheritance: \r\n\r\n> Interfaces can inherit from other interfaces. This has the same rules as normal inheritance.\r\n\r\nSource: [solidity/interfaces.rst at develop Â· ethereum/solidity](https://github.com/ethereum/solidity/blob/develop/docs/contracts/interfaces.rst)\r\n\r\n## Environment\r\n\r\n- Compiler version: 0.8.14\r\n- Target EVM version (as per compiler settings): default\r\n- Framework/IDE (e.g. Truffle or Remix): just using `solc` for this\r\n- EVM execution environment / backend / blockchain client: N/A\r\n- Operating system: macos\r\n\r\n## Steps to Reproduce\r\n\r\n([Runnable code here](https://github.com/maurelian/solidity-sandbox/blob/da1ec147fdce06080fc3c0ee764d6cb06dc62737/src/test/7_interfaceId.sol)).\r\n\r\nWhen I run the compiler on the following code, I get the error listed in the comments below:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface Foo {\r\n    function x() external;\r\n}\r\n\r\ninterface Bar is Foo {\r\n    function y() external;\r\n}\r\n\r\ncontract AccessBarX {\r\n    function test() public {\r\n      // This works\r\n      Bar.y.selector;\r\n\r\n      // This fails with \"Error: Member \"x\" not found or not visible after argument-dependent\r\n      // lookup in type(contract Bar).\"\r\n      Bar.x.selector;\r\n    }\r\n}\r\n```\r\n\r\nHowever if I comment out the problematic line, and run `solc --hashes` on the code, I see that\r\n`x()` is included in the the interface:\r\n\r\n```shell\r\n======= src/test/7_interfaceId.sol:Bar =======\r\nFunction signatures:\r\n0c55699c: x()\r\na56dfe4a: y()\r\n\r\n======= src/test/7_interfaceId.sol:Foo =======\r\nFunction signatures:\r\n0c55699c: x()\r\n```\r\n\r\nThis issue also seems to affect `interfaceId` generation, ie. using forge and DSTest with same code above, the `assertEq()` call fails\r\n\r\n```\r\ncontract Test_InterfaceId is DSTest {\r\n\r\n  function test_IdGeneration() public {\r\n    assertEq(\r\n      type(Bar).interfaceId,\r\n      Bar.x.selector ^ Bar.y.selector\r\n    );\r\n  }\r\n}\r\n```",
  "closed_by": {
    "login": "maurelian",
    "id": 23033765,
    "node_id": "MDQ6VXNlcjIzMDMzNzY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/maurelian",
    "html_url": "https://github.com/maurelian",
    "followers_url": "https://api.github.com/users/maurelian/followers",
    "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
    "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
    "organizations_url": "https://api.github.com/users/maurelian/orgs",
    "repos_url": "https://api.github.com/users/maurelian/repos",
    "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
    "received_events_url": "https://api.github.com/users/maurelian/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13095/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13095/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1147825964",
    "html_url": "https://github.com/ethereum/solidity/issues/13095#issuecomment-1147825964",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13095",
    "id": 1147825964,
    "node_id": "IC_kwDOAm_5kc5Eam8s",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-06T19:32:40Z",
    "updated_at": "2022-06-06T19:32:40Z",
    "author_association": "MEMBER",
    "body": "I think is partially by design, because this way ERC-165 support can be easily implemented -- otherwise having `is IERC165` on a contract would make it impossible to use `.interfaceId`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1147825964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1151096196",
    "html_url": "https://github.com/ethereum/solidity/issues/13095#issuecomment-1151096196",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13095",
    "id": 1151096196,
    "node_id": "IC_kwDOAm_5kc5EnFWE",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-09T13:06:28Z",
    "updated_at": "2022-06-09T13:06:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ahh, you're right and it is actually documented\r\n\r\n> A bytes4 value containing the [EIP-165](https://eips.ethereum.org/EIPS/eip-165) interface identifier of the given interface I. This identifier is defined as the XOR of all function selectors defined within the interface itself - excluding all inherited functions.\r\n\r\nhttps://docs.soliditylang.org/en/latest/units-and-global-variables.html#meta-type",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1151096196/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1587011332",
    "html_url": "https://github.com/ethereum/solidity/issues/13095#issuecomment-1587011332",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13095",
    "id": 1587011332,
    "node_id": "IC_kwDOAm_5kc5el98E",
    "user": {
      "login": "silasdavis",
      "id": 99715,
      "node_id": "MDQ6VXNlcjk5NzE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/99715?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/silasdavis",
      "html_url": "https://github.com/silasdavis",
      "followers_url": "https://api.github.com/users/silasdavis/followers",
      "following_url": "https://api.github.com/users/silasdavis/following{/other_user}",
      "gists_url": "https://api.github.com/users/silasdavis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/silasdavis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/silasdavis/subscriptions",
      "organizations_url": "https://api.github.com/users/silasdavis/orgs",
      "repos_url": "https://api.github.com/users/silasdavis/repos",
      "events_url": "https://api.github.com/users/silasdavis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/silasdavis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-12T10:05:29Z",
    "updated_at": "2023-06-12T10:05:29Z",
    "author_association": "NONE",
    "body": "This is dreadful footgun. It means you need to know/care about whether an interface definition uses inheritance if you refactor your code you will break ERC-165 support.\r\n\r\nThe ERC-165 interface is defined by the resultant set of functions in the ABI which has nothing to do with the inheritance structure.\r\n\r\n> otherwise having is IERC165 on a contract would make it impossible to use .interfaceId.\r\n\r\nDo you mean because you'd also mix in the `supportsInterface` function id into the hash? I know some interfaces are specced to exclude this so I see your point, but really it ought to be included anyway.\r\n\r\nAlso it's trivial to XOR out an interface you don't want since XOR is its own inverse.\r\n\r\nI really think this ought to be considered a bug, sadly changing the implementation would break backwards compatibility.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1587011332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
