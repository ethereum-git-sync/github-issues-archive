{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/13253",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/13253/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/13253/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/13253/events",
  "html_url": "https://github.com/ethereum/solidity/issues/13253",
  "id": 1296026971,
  "node_id": "I_kwDOAm_5kc5NP81b",
  "number": 13253,
  "title": "LSP: Allow disabling/enabling of individual features",
  "user": {
    "login": "Marenz",
    "id": 424752,
    "node_id": "MDQ6VXNlcjQyNDc1Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/424752?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Marenz",
    "html_url": "https://github.com/Marenz",
    "followers_url": "https://api.github.com/users/Marenz/followers",
    "following_url": "https://api.github.com/users/Marenz/following{/other_user}",
    "gists_url": "https://api.github.com/users/Marenz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Marenz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Marenz/subscriptions",
    "organizations_url": "https://api.github.com/users/Marenz/orgs",
    "repos_url": "https://api.github.com/users/Marenz/repos",
    "events_url": "https://api.github.com/users/Marenz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Marenz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3784569283,
      "node_id": "LA_kwDOAm_5kc7hk_HD",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20server",
      "name": "language server",
      "color": "FEF2C0",
      "default": false,
      "description": ""
    },
    {
      "id": 4372329032,
      "node_id": "LA_kwDOAm_5kc8AAAABBJxySA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/selected-for-development",
      "name": "selected-for-development",
      "color": "ff8e00",
      "default": false,
      "description": "It's on our short-term development"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2022-07-06T15:42:48Z",
  "updated_at": "2022-10-21T17:01:29Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This is a request by [vscode-solidity](vscode-solidity) author @juanfranblanco to make integration easier as it allows to use only the implemented and working features of our lsp.\r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/13253/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/13253/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1185493762",
    "html_url": "https://github.com/ethereum/solidity/issues/13253#issuecomment-1185493762",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13253",
    "id": 1185493762,
    "node_id": "IC_kwDOAm_5kc5GqTMC",
    "user": {
      "login": "christianparpart",
      "id": 56763,
      "node_id": "MDQ6VXNlcjU2NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/56763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianparpart",
      "html_url": "https://github.com/christianparpart",
      "followers_url": "https://api.github.com/users/christianparpart/followers",
      "following_url": "https://api.github.com/users/christianparpart/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianparpart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianparpart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianparpart/subscriptions",
      "organizations_url": "https://api.github.com/users/christianparpart/orgs",
      "repos_url": "https://api.github.com/users/christianparpart/repos",
      "events_url": "https://api.github.com/users/christianparpart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianparpart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T12:24:08Z",
    "updated_at": "2022-07-15T12:24:34Z",
    "author_association": "MEMBER",
    "body": "Hey @joshuahannan !\r\n\r\nDo you have any preferred way of providing that information?\r\nIMHO we could receive that information as part of the LSP handshake. Thanksfully the client initiates the initialize call and there one could simply say what it supports (or in other words(!): what it wants us to support), using the capabilities field. If the client only advertises semanticTokens, for example, we could respone the initialize handshake with a capabilities field that also only advertises semantic tokens support - effectively making sure that all the other features are in fact responding with \"Method not supported\" (forgot the actual code naming, but you get the point).\r\n\r\nWhat do you think?\r\n\r\nEDIT: Forgot to ask how that can help you on the vscode-solidity side. I am curious :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1185493762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1185690531",
    "html_url": "https://github.com/ethereum/solidity/issues/13253#issuecomment-1185690531",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13253",
    "id": 1185690531,
    "node_id": "IC_kwDOAm_5kc5GrDOj",
    "user": {
      "login": "juanfranblanco",
      "id": 562371,
      "node_id": "MDQ6VXNlcjU2MjM3MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/562371?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juanfranblanco",
      "html_url": "https://github.com/juanfranblanco",
      "followers_url": "https://api.github.com/users/juanfranblanco/followers",
      "following_url": "https://api.github.com/users/juanfranblanco/following{/other_user}",
      "gists_url": "https://api.github.com/users/juanfranblanco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juanfranblanco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juanfranblanco/subscriptions",
      "organizations_url": "https://api.github.com/users/juanfranblanco/orgs",
      "repos_url": "https://api.github.com/users/juanfranblanco/repos",
      "events_url": "https://api.github.com/users/juanfranblanco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juanfranblanco/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-15T16:10:58Z",
    "updated_at": "2022-07-15T16:10:58Z",
    "author_association": "NONE",
    "body": "Hey @christianparpart,\r\n\r\nSomehow I am guessing you meant to tag me!! Yeah.. that is mainly it. It helps so features that might not be working or in progress then can be disabled, also easier to experiment. Although the end, end goal, remember is to load the solcjs and proxy the calls depending on the compiler version, and what is supported.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1185690531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1186948848",
    "html_url": "https://github.com/ethereum/solidity/issues/13253#issuecomment-1186948848",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13253",
    "id": 1186948848,
    "node_id": "IC_kwDOAm_5kc5Gv2bw",
    "user": {
      "login": "christianparpart",
      "id": 56763,
      "node_id": "MDQ6VXNlcjU2NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/56763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianparpart",
      "html_url": "https://github.com/christianparpart",
      "followers_url": "https://api.github.com/users/christianparpart/followers",
      "following_url": "https://api.github.com/users/christianparpart/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianparpart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianparpart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianparpart/subscriptions",
      "organizations_url": "https://api.github.com/users/christianparpart/orgs",
      "repos_url": "https://api.github.com/users/christianparpart/repos",
      "events_url": "https://api.github.com/users/christianparpart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianparpart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-18T09:05:02Z",
    "updated_at": "2022-07-18T09:05:02Z",
    "author_association": "MEMBER",
    "body": "> to load the solcjs and proxy the calls depending on the compiler version, and what is supported.\r\n\r\nAgreed. If we get the native passing through first, I'd highly like that, and then I hope we can focus on solcjs again. Having solcjs exposing LSP is pretty high on the table. I just hope I'll find someone knowledgeable here to pair with me on that in one way or another. :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1186948848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1234237389",
    "html_url": "https://github.com/ethereum/solidity/issues/13253#issuecomment-1234237389",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13253",
    "id": 1234237389,
    "node_id": "IC_kwDOAm_5kc5JkPfN",
    "user": {
      "login": "christianparpart",
      "id": 56763,
      "node_id": "MDQ6VXNlcjU2NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/56763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianparpart",
      "html_url": "https://github.com/christianparpart",
      "followers_url": "https://api.github.com/users/christianparpart/followers",
      "following_url": "https://api.github.com/users/christianparpart/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianparpart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianparpart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianparpart/subscriptions",
      "organizations_url": "https://api.github.com/users/christianparpart/orgs",
      "repos_url": "https://api.github.com/users/christianparpart/repos",
      "events_url": "https://api.github.com/users/christianparpart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianparpart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-01T12:52:03Z",
    "updated_at": "2022-09-01T12:52:03Z",
    "author_association": "MEMBER",
    "body": "@juanfranblanco Would it be sufficient to simply obey to what the client is advertising as feature? Say the client supports feature set (A, B), but the server supports (B, C), then only (C) is being enabled? Would this suffer [vscode-solidity](https://github.com/juanfranblanco/vscode-solidity)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1234237389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1239590423",
    "html_url": "https://github.com/ethereum/solidity/issues/13253#issuecomment-1239590423",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13253",
    "id": 1239590423,
    "node_id": "IC_kwDOAm_5kc5J4qYX",
    "user": {
      "login": "christianparpart",
      "id": 56763,
      "node_id": "MDQ6VXNlcjU2NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/56763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianparpart",
      "html_url": "https://github.com/christianparpart",
      "followers_url": "https://api.github.com/users/christianparpart/followers",
      "following_url": "https://api.github.com/users/christianparpart/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianparpart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianparpart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianparpart/subscriptions",
      "organizations_url": "https://api.github.com/users/christianparpart/orgs",
      "repos_url": "https://api.github.com/users/christianparpart/repos",
      "events_url": "https://api.github.com/users/christianparpart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianparpart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-07T16:03:04Z",
    "updated_at": "2022-09-07T16:03:04Z",
    "author_association": "MEMBER",
    "body": "For reference for myself. This is an example init payload for its client capabilities\r\n\r\n```json\r\n    \"capabilities\":\r\n    {\r\n      \"textDocument\": {\r\n          \"callHierarchy\": { \"dynamicRegistration\": true },\r\n          \"codeAction\": { \"codeActionLiteralSupport\": { \"codeActionKind\": { \"valueSet\": [ \"\", \"quickfix\", \"refactor\", \"refactor.extract\", \"refactor.inline\", \"refactor.rewrite\", \"source\", \"source.organizeImports\" ] } }, \"dataSupport\": true, \"disabledSupport\": true, \"dynamicRegistration\": true, \"honorsChangeAnnotations\": false, \"isPreferredSupport\": true, \"resolveSupport\": { \"properties\": [ \"edit\" ] } },\r\n          \"codeLens\": { \"dynamicRegistration\": true },\r\n          \"colorProvider\": { \"dynamicRegistration\": true },\r\n          \"completion\": { \"completionItem\": { \"commitCharactersSupport\": true, \"deprecatedSupport\": true, \"documentationFormat\": [ \"markdown\", \"plaintext\" ], \"insertReplaceSupport\": true, \"insertTextModeSupport\": { \"valueSet\": [ 1, 2 ] }, \"labelDetailsSupport\": true, \"preselectSupport\": true, \"resolveSupport\": { \"properties\": [ \"documentation\", \"detail\", \"additionalTextEdits\" ] }, \"snippetSupport\": true, \"tagSupport\": { \"valueSet\": [ 1 ] } }, \"completionItemKind\": { \"valueSet\": [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ] }, \"completionList\": { \"itemDefaults\": [ \"commitCharacters\", \"editRange\", \"insertTextFormat\", \"insertTextMode\" ] }, \"contextSupport\": true, \"dynamicRegistration\": true, \"insertTextMode\": 2 },\r\n          \"declaration\": { \"dynamicRegistration\": true, \"linkSupport\": true },\r\n          \"definition\": { \"dynamicRegistration\": true, \"linkSupport\": true },\r\n          \"diagnostic\": { \"dynamicRegistration\": true, \"relatedDocumentSupport\": true },\r\n          \"documentHighlight\": { \"dynamicRegistration\": true },\r\n          \"documentLink\": { \"dynamicRegistration\": true, \"tooltipSupport\": true },\r\n          \"documentSymbol\": { \"dynamicRegistration\": true, \"hierarchicalDocumentSymbolSupport\": true, \"labelSupport\": true, \"symbolKind\": { \"valueSet\": [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 ] }, \"tagSupport\": { \"valueSet\": [ 1 ] } },\r\n          \"foldingRange\": { \"dynamicRegistration\": true, \"foldingRange\": { \"collapsedText\": false }, \"foldingRangeKind\": { \"valueSet\": [ \"comment\", \"imports\", \"region\" ] }, \"lineFoldingOnly\": true, \"rangeLimit\": 5000 },\r\n          \"formatting\": { \"dynamicRegistration\": true },\r\n          \"hover\": { \"contentFormat\": [ \"markdown\", \"plaintext\" ], \"dynamicRegistration\": true },\r\n          \"implementation\": { \"dynamicRegistration\": true, \"linkSupport\": true },\r\n          \"inlayHint\": { \"dynamicRegistration\": true, \"resolveSupport\": { \"properties\": [ \"tooltip\", \"textEdits\", \"label.tooltip\", \"label.location\", \"label.command\" ] } },\r\n          \"inlineValue\": { \"dynamicRegistration\": true },\r\n          \"linkedEditingRange\": { \"dynamicRegistration\": true },\r\n          \"onTypeFormatting\": { \"dynamicRegistration\": true },\r\n          \"publishDiagnostics\": { \"codeDescriptionSupport\": true, \"dataSupport\": true, \"relatedInformation\": true, \"tagSupport\": { \"valueSet\": [ 1, 2 ] }, \"versionSupport\": true },\r\n          \"rangeFormatting\": { \"dynamicRegistration\": true },\r\n          \"references\": { \"dynamicRegistration\": true },\r\n          \"rename\": { \"dynamicRegistration\": true, \"honorsChangeAnnotations\": true, \"prepareSupport\": true, \"prepareSupportDefaultBehavior\": 1 },\r\n          \"selectionRange\": { \"dynamicRegistration\": true },\r\n          \"semanticTokens\": { \"augmentsSyntaxTokens\": true, \"dynamicRegistration\": true, \"formats\": [ \"relative\" ], \"multilineTokenSupport\": false, \"overlappingTokenSupport\": false, \"requests\": { \"full\": { \"delta\": true }, \"range\": true }, \"serverCancelSupport\": true, \"tokenModifiers\": [ \"declaration\", \"definition\", \"readonly\", \"static\", \"deprecated\", \"abstract\", \"async\", \"modification\", \"documentation\", \"defaultLibrary\" ], \"tokenTypes\": [ \"namespace\", \"type\", \"class\", \"enum\", \"interface\", \"struct\", \"typeParameter\", \"parameter\", \"variable\", \"property\", \"enumMember\", \"event\", \"function\", \"method\", \"macro\", \"keyword\", \"modifier\", \"comment\", \"string\", \"number\", \"regexp\", \"decorator\", \"operator\" ] },\r\n          \"signatureHelp\": { \"contextSupport\": true, \"dynamicRegistration\": true, \"signatureInformation\": { \"activeParameterSupport\": true, \"documentationFormat\": [ \"markdown\", \"plaintext\" ], \"parameterInformation\": { \"labelOffsetSupport\": true } } },\r\n          \"synchronization\": { \"didSave\": true, \"dynamicRegistration\": true, \"willSave\": true, \"willSaveWaitUntil\": true },\r\n          \"typeDefinition\": { \"dynamicRegistration\": true, \"linkSupport\": true },\r\n          \"typeHierarchy\": { \"dynamicRegistration\": true }\r\n      },\r\n      \"window\": { \"showDocument\": { \"support\": true }, \"showMessage\": { \"messageActionItem\": { \"additionalPropertiesSupport\": true } }, \"workDoneProgress\": true },\r\n      \"general\":\r\n      {\r\n        \"markdown\": { \"parser\": \"marked\", \"version\": \"4.0.10\" },\r\n        \"positionEncodings\": [ \"utf-16\" ],\r\n        \"regularExpressions\": { \"engine\": \"ECMAScript\", \"version\": \"ES2020\" },\r\n        \"staleRequestSupport\": { \"cancel\": true, \"retryOnContentModified\": [ \"textDocument/semanticTokens/full\", \"textDocument/semanticTokens/range\", \"textDocument/semanticTokens/full/delta\" ] }\r\n      },\r\n      \"workspace\":\r\n      {\r\n        \"applyEdit\": true,\r\n        \"codeLens\": { \"refreshSupport\": true },\r\n        \"configuration\": true,\r\n        \"diagnostics\": { \"refreshSupport\": true },\r\n        \"didChangeConfiguration\": { \"dynamicRegistration\": true },\r\n        \"didChangeWatchedFiles\": { \"dynamicRegistration\": true, \"relativePatternSupport\": true },\r\n        \"executeCommand\": { \"dynamicRegistration\": true },\r\n        \"fileOperations\": { \"didCreate\": true, \"didDelete\": true, \"didRename\": true, \"dynamicRegistration\": true, \"willCreate\": true, \"willDelete\": true, \"willRename\": true },\r\n        \"inlayHint\": { \"refreshSupport\": true },\r\n        \"inlineValue\": { \"refreshSupport\": true },\r\n        \"semanticTokens\": { \"refreshSupport\": true },\r\n        \"symbol\":\r\n        {\r\n          \"dynamicRegistration\": true,\r\n          \"resolveSupport\": { \"properties\": [ \"location.range\" ] },\r\n          \"symbolKind\": { \"valueSet\": [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 ] },\r\n          \"tagSupport\": { \"valueSet\": [ 1 ] }\r\n        },\r\n        \"workspaceEdit\":\r\n        {\r\n          \"changeAnnotationSupport\": { \"groupsOnLabel\": false },\r\n          \"documentChanges\": true,\r\n          \"failureHandling\": \"undo\",\r\n          \"normalizesLineEndings\": true,\r\n          \"resourceOperations\": [ \"create\", \"rename\", \"delete\" ]\r\n        },\r\n        \"workspaceFolders\": true\r\n      }\r\n    },\r\n```\r\n\r\nOn the CLI args pattern matter. we could allow a whitelist of enabled features by fully qualifying their JSON base path, such as `textDocument.definition` or `textDocument.publishDiagnostics` and have these values passed as comma separated list via CLI, such as `--lsp-enable-only=....` or similar.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1239590423/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1287222187",
    "html_url": "https://github.com/ethereum/solidity/issues/13253#issuecomment-1287222187",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/13253",
    "id": 1287222187,
    "node_id": "IC_kwDOAm_5kc5MuXOr",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-21T17:01:08Z",
    "updated_at": "2022-10-21T17:01:29Z",
    "author_association": "MEMBER",
    "body": "Why not just use [`ServerCapabilities::experimental`](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#serverCapabilities) for advertising features that are, well, experimental? Wouldn't that be much simpler and avoid this weird dynamic capability negotiation?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1287222187/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
