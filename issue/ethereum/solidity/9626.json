{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/9626",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/9626/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/9626/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/9626/events",
  "html_url": "https://github.com/ethereum/solidity/issues/9626",
  "id": 679120039,
  "node_id": "MDU6SXNzdWU2NzkxMjAwMzk=",
  "number": 9626,
  "title": "Yul Optimiser: Consider to take stack height into account in CSE",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1282209978,
      "node_id": "MDU6TGFiZWwxMjgyMjA5OTc4",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/optimizer",
      "name": "optimizer",
      "color": "d4c5f9",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2020-08-14T12:20:04Z",
  "updated_at": "2021-12-11T01:12:06Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Came up in the discussion in https://github.com/ethereum/solidity/issues/9622\r\n\r\nThat issue has quite a specific context, but this can be an issue in general. I don't think this can be done perfectly, but in a situation like\r\n```\r\n{\r\n  let x := 0\r\n  // a lot of variables\r\n  let _1 := 0x20\r\n  sstore(0, mload(_1))\r\n  // last use of the lot of variables - so they could be popped if not for ``_1``\r\n  sstore(2, x) // x may be unreachable because of this.\r\n  sstore(1, mload(_1))\r\n}\r\n```\r\n\r\nIt would be much better not to have CSE unify ``_1`` and keep it at\r\n\r\n```\r\n{\r\n  let x := 0\r\n  // a lot of variables\r\n  sstore(0, mload(0x20))\r\n  // last use of the lot of variables - so they *will* be popped afterwards\r\n  sstore(2, x) // x is now reachable\r\n  sstore(1, mload(0x20))\r\n}\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/9626/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/9626/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
