{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/6934",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/6934/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/6934/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/6934/events",
  "html_url": "https://github.com/ethereum/solidity/issues/6934",
  "id": 455519910,
  "node_id": "MDU6SXNzdWU0NTU1MTk5MTA=",
  "number": 6934,
  "title": "`if` statements in Jul are broken/fubar",
  "user": {
    "login": "HarryR",
    "id": 303926,
    "node_id": "MDQ6VXNlcjMwMzkyNg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/303926?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/HarryR",
    "html_url": "https://github.com/HarryR",
    "followers_url": "https://api.github.com/users/HarryR/followers",
    "following_url": "https://api.github.com/users/HarryR/following{/other_user}",
    "gists_url": "https://api.github.com/users/HarryR/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/HarryR/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/HarryR/subscriptions",
    "organizations_url": "https://api.github.com/users/HarryR/orgs",
    "repos_url": "https://api.github.com/users/HarryR/repos",
    "events_url": "https://api.github.com/users/HarryR/events{/privacy}",
    "received_events_url": "https://api.github.com/users/HarryR/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2019-06-13T03:38:07Z",
  "updated_at": "2019-06-13T16:21:16Z",
  "closed_at": "2019-06-13T16:04:12Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\n\r\n`if` statements in Jul are broken\r\n\r\n## Environment\r\n\r\n - https://remix.ethereum.org/#optimize=false&version=soljson-v0.5.10-nightly.2019.6.12+commit.502d22a2.js\r\n\r\n## Steps to Reproduce\r\n\r\n```solidity\r\npragma solidity ^0.5.0;\r\n\r\ncontract BugTestCase {\r\n    function Example ()\r\n        public pure returns (uint256, uint256)\r\n    {\r\n        uint256 branch_taken_asm = 0;\r\n        uint256 branch_taken_sol = 0;\r\n        uint256 value = 1234;\r\n        assembly {\r\n            if not(iszero(mod(value, 2))) {\r\n                branch_taken_asm := 1\r\n            }\r\n        }\r\n        if( (value % 2) != 0 ) {\r\n            branch_taken_sol = 1;\r\n        }\r\n        return (branch_taken_asm, branch_taken_sol);\r\n    }\r\n}\r\n```\r\n\r\nGets compiled to:\r\n```\r\nv---- setup variable 1234\r\n094 PUSH1 00  <--- useless\r\n096 PUSH2 04d2\r\n099 SWAP1     <-- useless\r\n100 POP       <-- useless\r\n\r\n101 PUSH1 02\r\n103 DUP2\r\n104 MOD       <-- 1234 % 2\r\n105 ISZERO    <-- == 0\r\n106 NOT       <-- (1234 % 2) != 0\r\n\r\nv--- compiler\r\n107 ISZERO    <--- WHY......... ..... ... \r\n108 PUSH1 73 (115)\r\n110 JUMPI\r\n^--- compiler\r\n\r\n111 PUSH1 01\r\n113 SWAP3    <-- set `branch_taken_sol = 1`\r\n114 POP\r\n\r\n115 JUMPDEST\r\n116 PUSH1 00\r\n118 PUSH1 02\r\n120 DUP3\r\n121 DUP2\r\n\r\nv--- compiler 'is argument zero check'\r\n122 PUSH1 7e (126)\r\n124 JUMPI\r\n125 INVALID\r\n126 JUMPDEST\r\n^--- compiler 'is argument zero check'\r\n\r\nv--- optimised version of '(a % b) != 0'\r\n127 MOD\r\n128 EQ\r\n129 PUSH1 88 (136)\r\n131 JUMPI\r\n^--- optimised version of '(a % b) != 0'\r\n\r\n132 PUSH1 01   \r\n134 SWAP2    <-- set `branch_taken_sol = 1`\r\n135 POP\r\n\r\n136 JUMPDEST\r\n```\r\n\r\nSo, the compiler is inserting an additional `ISZERO`, which negates whether or not the branch should be executed for the Jul code:\r\n\r\n```solidity\r\n        assembly {\r\n            if not(iszero(mod(value, 2))) {\r\n                branch_taken_asm := 1\r\n            }\r\n        }\r\n```\r\n\r\nThe code generator which inserts the extra `ISZERO` is: https://github.com/ethereum/solidity/blob/4f3b7b232b375dc4d8134eabc839c30b981adf8d/libyul/backends/evm/EVMCodeTransform.cpp#L414\r\n\r\nI think - ok, I can just remove the `not` command, and the jump will be taken and (correctly) avoid the piece of code which sets `branch_taken_asm := 1`... right?\r\n\r\n**No, that's why it's a compiler bug**, if I remove the `not`, so it's just `iszero(mod(value, 2))`, the emitted code for that branch is (again, compiled without optimisations):\r\n\r\n```\r\n094 PUSH1 00\r\n096 PUSH2 04d2\r\n099 SWAP1\r\n100 POP\r\n101 PUSH1 02\r\n103 DUP2\r\n104 MOD\r\n105 PUSH1 70\r\n107 JUMPI\r\n```\r\n\r\nIt's now removing my `ISZERO` instruction, which is OK because `a%b !=0` is equivalent to `iszero(mod(value, 2))` when used as the condition argument to `JUMPI`, so the chunk of code isn't skipped.\r\n\r\nThe two ISZERO statements are removed by this peephole optimizer: https://github.com/ethereum/solidity/blob/30da62aa2c16fd4a8592fd0c01f17cfa715e333c/libevmasm/PeepholeOptimiser.cpp#L208\r\n\r\nLets try something which is a more literal translation:\r\n\r\n```solidity\r\n     assembly {\r\n            if not(eq(mod(value, 2), 0)) {\r\n```\r\n\r\nThis gets compiled to:\r\n```\r\n094 PUSH1 00\r\n096 PUSH2 04d2\r\n099 SWAP1\r\n100 POP\r\n101 PUSH1 00\r\n103 PUSH1 02\r\n105 DUP3\r\n106 MOD\r\n107 EQ\r\n108 NOT\r\n109 ISZERO\r\n110 PUSH1 75\r\n112 JUMPI\r\n```\r\n\r\nThe extra `ISZERO` opcode the compiler inserts inverts the condition, meaning the jump isn't taken when it should be. If you added another `NOT` before the `ISZERO` is inserted, or just removed the `NOT` opcode from my statement, then the compiled code would work as intended - when `a%b == 0` the piece of code is skipped.\r\n\r\nIf I change the condition to:\r\n\r\n```solidity\r\nassembly {\r\n            if gt(mod(value, 2), 0) {\r\n```\r\n\r\nThen the branch is correctly taken, subsequently skipping the piece of code which should only be executed if `value` is odd.\r\n\r\n```\r\n101 PUSH1 00\r\n103 PUSH1 02\r\n105 DUP3\r\n106 MOD\r\n107 GT\r\n108 ISZERO\r\n109 PUSH1 74\r\n```\r\n\r\nThe compiler is still bugged though, it seems that always inserting `ISZERO` after a jump condition has unintended consequences at: \r\n\r\nhttps://github.com/ethereum/solidity/blob/4f3b7b232b375dc4d8134eabc839c30b981adf8d/libyul/backends/evm/EVMCodeTransform.cpp#L414\r\n\r\nGiven that we're compiling Jul code, I'd have thought that the arguments to my `if` statement would be passed directly as the conditional flag to `JUMPI`, after negating it so the inverse of whatever my statement is causes the jump to happen.\r\n\r\nIn this case `NOT ISZERO` or even just `NOT` can be used to replace `ISZERO`, which will fix the bugs in the code above.\r\n\r\n--------\r\n\r\nWith optimisations enabled, even more weird stuff happens, it removes conditions which can be analysed as being true at runtime (e.g. that 1234 is even) and emits code accordingly - however, all of this stuff is happening to the compiler *before* it's optimised, so the optimiser then goes ahead and does its job correctly - and gets the same result - but the wrong one because the code generator before it fubar'd it up",
  "closed_by": {
    "login": "HarryR",
    "id": 303926,
    "node_id": "MDQ6VXNlcjMwMzkyNg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/303926?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/HarryR",
    "html_url": "https://github.com/HarryR",
    "followers_url": "https://api.github.com/users/HarryR/followers",
    "following_url": "https://api.github.com/users/HarryR/following{/other_user}",
    "gists_url": "https://api.github.com/users/HarryR/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/HarryR/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/HarryR/subscriptions",
    "organizations_url": "https://api.github.com/users/HarryR/orgs",
    "repos_url": "https://api.github.com/users/HarryR/repos",
    "events_url": "https://api.github.com/users/HarryR/events{/privacy}",
    "received_events_url": "https://api.github.com/users/HarryR/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/6934/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/6934/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501662361",
    "html_url": "https://github.com/ethereum/solidity/issues/6934#issuecomment-501662361",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6934",
    "id": 501662361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTY2MjM2MQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T11:24:16Z",
    "updated_at": "2019-06-13T11:24:51Z",
    "author_association": "MEMBER",
    "body": "Regarding:\r\n```\r\nv--- compiler\r\n107 ISZERO    <--- WHY......... ..... ... \r\n108 PUSH1 73 (115)\r\n110 JUMPI\r\n^--- compiler\r\n```\r\nThat ``ISZERO`` checks whether the condition in the ``if`` is *false* and in that case jumps over the body of the *if* - that seems correct to me. Note that ``JUMPI`` jumps if the argument is != 0.\r\n\r\nI think one of your actual problem is that you use ``not`` in the ``if`` condition, while you actually want to use ``iszero``. Note that ``not`` is *bitwise* negation, whereas ``iszero`` is *logical* negation.\r\n\r\nSo looking at the following:\r\n\r\n```\r\n101 PUSH1 02\r\n103 DUP2\r\n104 MOD       <-- 1234 % 2\r\n105 ISZERO    <-- == 0\r\n106 NOT       <-- (1234 % 2) != 0\r\n```\r\n\r\nThe last comment is incorrect - this won't be ``(1234 % 2) != 0``, but:\r\n  -  ``~0`` (i.e. all bits set) in case ``(1234 % 2) != 0``\r\n  - ``~1`` (i.e. all bits except the least significant bit set) in case ``(1234 % 2) == 0``\r\n\r\nIn any case, on a first glance to me what the compiler does looks correct in all cases - it has to (and correctly does) invert the condition in the ``if`` to decide when to jump *over* the ``if`` body.\r\n\r\nDo you agree with that given the fact that the jump is *over* the ``if`` body, not *to* the ``if`` body? If not, then let me know and I'll have another more detailed look.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501662361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501740346",
    "html_url": "https://github.com/ethereum/solidity/issues/6934#issuecomment-501740346",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6934",
    "id": 501740346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTc0MDM0Ng==",
    "user": {
      "login": "HarryR",
      "id": 303926,
      "node_id": "MDQ6VXNlcjMwMzkyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/303926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HarryR",
      "html_url": "https://github.com/HarryR",
      "followers_url": "https://api.github.com/users/HarryR/followers",
      "following_url": "https://api.github.com/users/HarryR/following{/other_user}",
      "gists_url": "https://api.github.com/users/HarryR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HarryR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HarryR/subscriptions",
      "organizations_url": "https://api.github.com/users/HarryR/orgs",
      "repos_url": "https://api.github.com/users/HarryR/repos",
      "events_url": "https://api.github.com/users/HarryR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HarryR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T14:59:00Z",
    "updated_at": "2019-06-13T15:17:46Z",
    "author_association": "NONE",
    "body": "Apologies for the long dump of text.\r\n\r\nYes, it is trying to jump over the loop, to avoid executing the piece of code.\r\n\r\nDo you agree that the following statements are equivalent, when `value=1234` ?\r\n\r\n* `if not(iszero(mod(value, 2))) {`\r\n* `if not(eq(mod(value, 2), 0)) {`\r\n* `if gt(mod(value, 2), 0) {`\r\n\r\nTo this Solidity:\r\n\r\n * `if( (value % 2) != 0 ) {`\r\n\r\nThe documentation for the `JUMPI` instruction is: `jump to label if cond is nonzero`\r\n\r\nThe result needs inverting to skip the body of the `if` statement, which the compiler appears to be trying to do, however the body of the if statement is still being executed in two out of three times.\r\n\r\nIf I construct the branch manually to avoid the piece of code, removing the `not` from the first two, and adding a `not` to the third (using `gt`) it works as expected.\r\n\r\n * `NOT(NOT(0))` is `0`\r\n * `NOT(0)` is non-zero\r\n * `ISZERO(0)` is `1`\r\n * `NOT(ISZERO(0))` is zero\r\n\r\nSee:\r\n * https://github.com/ethereum/go-ethereum/blob/7504dbd6eb3f62371f86b06b03ffd665690951f2/core/vm/instructions.go#L253\r\n * https://github.com/ethereum/go-ethereum/blob/7504dbd6eb3f62371f86b06b03ffd665690951f2/core/vm/instructions.go#L166\r\n\r\nWhereas `ISZERO` uses the sign-bit to determine if it's non-zero, so `-1` is zero, and `1` is not zero:\r\n\r\n * https://github.com/ethereum/go-ethereum/blob/7504dbd6eb3f62371f86b06b03ffd665690951f2/core/vm/instructions.go#L255\r\n\r\nAnd `JUMPI` checks the sign-bit is non-zero:\r\n\r\n * https://github.com/ethereum/go-ethereum/blob/7504dbd6eb3f62371f86b06b03ffd665690951f2/core/vm/instructions.go#L658\r\n\r\nThe problem is the compiler.\r\n\r\n `ISZERO(NOT(0))` will be considered `FALSE`, because `ISZERO` checks if `.Sign() > 0`.\r\n\r\nWhereas `JUMPI` checks that `.Sign() != 0`\r\n\r\nMeaning code that works with plain EVM, is broken by the semantics of the compilers choice of `ISZERO` rather than `NOT` to invert the result of a conditional - which goes *against* what the spec says Jumps should be doing.\r\n\r\nUsing `ISZERO`, and subsequently verifying that `.Sign() > 0` is different to *every other programming language I can think of* which treat -1 and 1 as both being True for a conditional.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501740346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501749249",
    "html_url": "https://github.com/ethereum/solidity/issues/6934#issuecomment-501749249",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6934",
    "id": 501749249,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTc0OTI0OQ==",
    "user": {
      "login": "leonardoalt",
      "id": 504195,
      "node_id": "MDQ6VXNlcjUwNDE5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/504195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardoalt",
      "html_url": "https://github.com/leonardoalt",
      "followers_url": "https://api.github.com/users/leonardoalt/followers",
      "following_url": "https://api.github.com/users/leonardoalt/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardoalt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardoalt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardoalt/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardoalt/orgs",
      "repos_url": "https://api.github.com/users/leonardoalt/repos",
      "events_url": "https://api.github.com/users/leonardoalt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardoalt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T15:19:58Z",
    "updated_at": "2019-06-13T15:21:16Z",
    "author_association": "MEMBER",
    "body": "`which goes against what the spec says Jumps should be doing.`\r\nWhich spec are you talking about? Geth?\r\n\r\nThe yellow paper states the following:\r\n```\r\nJUMPI\r\nConditionally alter the program counter.\r\nJ_JUMPI(μ) ≡ {\r\n    μ_s[0]  if  μ_s[1] != 0\r\n    μ_pc+ 1    otherwise\r\n}\r\n```\r\nThus, the compiler behavior looks correct to me as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501749249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501765995",
    "html_url": "https://github.com/ethereum/solidity/issues/6934#issuecomment-501765995",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6934",
    "id": 501765995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTc2NTk5NQ==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T16:00:05Z",
    "updated_at": "2019-06-13T16:00:05Z",
    "author_association": "MEMBER",
    "body": "I think the main misunderstanding is still the semantics of ``NOT`` and ``ISZERO`` (see the yellowpaper https://ethereum.github.io/yellowpaper/paper.pdf page 29 for reference).\r\n\r\nI'm not sure where you get the idea that either ``ISZERO`` or ``JUMPI`` check something like ``.Sign() != 0``. The semantics for both are clearly specified in the yellow paper as \"jumping if the argument is not zero\" for ``JUMPI`` (as @leonardoalt pointed out), and for ``ISZERO(x)`` as ``ISZERO(0) = 1`` and ``ISZERO(x) = 0``, if ``x != 0``.\r\n\r\nSo *logical negation* is in fact ``ISZERO`` and **not** ``NOT``.\r\n\r\nOn the other hand ``NOT`` is *bitwise negation*, i.e. it will flip every one of the 256 bits in its input. That's of course *not* the same as logical negation.\r\n\r\nSo ``NOT(ISZERO(0))`` *correctly* is **not** 0. ``ISZERO(0)`` is ``1`` and ``NOT(1)`` is the *bitwise negation* of 1, i.e. ``0xfffff....fffffe``. What you probably **meant** was in fact ``ISZERO(ISZERO(0))`` and *not* ``NOT(ISZERO(0))``.\r\n\r\nSo in your examples, your usage of ``NOT`` assumes an incorrect semantics for ``NOT``.\r\n\r\nGiven the specification in the yellowpaper, can we agree on that part :-)? If we are clear on this issue, then the rest should fall into place and it should become clear that e.g.\r\n```\r\nnot(iszero(mod(value, 2)))\r\n```\r\nis rightfully **not** equivalent to\r\n```\r\n(value % 2) != 0\r\n```\r\n.\r\n\r\nSo the issue is rather that it might have been better to call the ``NOT`` opcode ``BITNOT`` instead to avoid this kind of confusion - but as far as I can see, the compiler behavior is still correct with respect to the specified semantics of the EVM.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501765995/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501767687",
    "html_url": "https://github.com/ethereum/solidity/issues/6934#issuecomment-501767687",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6934",
    "id": 501767687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTc2NzY4Nw==",
    "user": {
      "login": "HarryR",
      "id": 303926,
      "node_id": "MDQ6VXNlcjMwMzkyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/303926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HarryR",
      "html_url": "https://github.com/HarryR",
      "followers_url": "https://api.github.com/users/HarryR/followers",
      "following_url": "https://api.github.com/users/HarryR/following{/other_user}",
      "gists_url": "https://api.github.com/users/HarryR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HarryR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HarryR/subscriptions",
      "organizations_url": "https://api.github.com/users/HarryR/orgs",
      "repos_url": "https://api.github.com/users/HarryR/repos",
      "events_url": "https://api.github.com/users/HarryR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HarryR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T16:04:12Z",
    "updated_at": "2019-06-13T16:04:12Z",
    "author_association": "NONE",
    "body": "*major facepalm*",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501767687/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501774333",
    "html_url": "https://github.com/ethereum/solidity/issues/6934#issuecomment-501774333",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6934",
    "id": 501774333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTc3NDMzMw==",
    "user": {
      "login": "ekpyron",
      "id": 1347491,
      "node_id": "MDQ6VXNlcjEzNDc0OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ekpyron",
      "html_url": "https://github.com/ekpyron",
      "followers_url": "https://api.github.com/users/ekpyron/followers",
      "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
      "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
      "organizations_url": "https://api.github.com/users/ekpyron/orgs",
      "repos_url": "https://api.github.com/users/ekpyron/repos",
      "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ekpyron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T16:21:15Z",
    "updated_at": "2019-06-13T16:21:15Z",
    "author_association": "MEMBER",
    "body": "I'm just looking at https://github.com/ethereum/go-ethereum/blob/7504dbd6eb3f62371f86b06b03ffd665690951f2/core/vm/instructions.go#L255 - that is in fact written in a quite confusing way and it really looks like it checks the sign bit :-). But since in ``go``'s ``math/big``, ``Sign`` is specified like this here: https://golang.org/pkg/math/big/#Int.Sign and ``x`` is an unsigned integer, ``x.Sign() > 0`` is in fact ``x != 0``... and consequently, as expected, geth follows the same EVM semantics as we do ;-).\r\n\r\nBut yeah, I can understand that this is confusing and it took some getting used to ``ISZERO`` being logical negation for myself as well :-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/501774333/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
