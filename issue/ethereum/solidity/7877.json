{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/7877/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/7877/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/7877/events",
  "html_url": "https://github.com/ethereum/solidity/issues/7877",
  "id": 531870134,
  "node_id": "MDU6SXNzdWU1MzE4NzAxMzQ=",
  "number": 7877,
  "title": "Typed errors / exceptions",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 785717317,
      "node_id": "MDU6TGFiZWw3ODU3MTczMTc=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/language%20design%20:rage4:",
      "name": "language design :rage4:",
      "color": "9d76d3",
      "default": false,
      "description": "Any changes to the language, e.g. new features"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "christianparpart",
    "id": 56763,
    "node_id": "MDQ6VXNlcjU2NzYz",
    "avatar_url": "https://avatars.githubusercontent.com/u/56763?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/christianparpart",
    "html_url": "https://github.com/christianparpart",
    "followers_url": "https://api.github.com/users/christianparpart/followers",
    "following_url": "https://api.github.com/users/christianparpart/following{/other_user}",
    "gists_url": "https://api.github.com/users/christianparpart/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/christianparpart/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/christianparpart/subscriptions",
    "organizations_url": "https://api.github.com/users/christianparpart/orgs",
    "repos_url": "https://api.github.com/users/christianparpart/repos",
    "events_url": "https://api.github.com/users/christianparpart/events{/privacy}",
    "received_events_url": "https://api.github.com/users/christianparpart/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "christianparpart",
      "id": 56763,
      "node_id": "MDQ6VXNlcjU2NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/56763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianparpart",
      "html_url": "https://github.com/christianparpart",
      "followers_url": "https://api.github.com/users/christianparpart/followers",
      "following_url": "https://api.github.com/users/christianparpart/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianparpart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianparpart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianparpart/subscriptions",
      "organizations_url": "https://api.github.com/users/christianparpart/orgs",
      "repos_url": "https://api.github.com/users/christianparpart/repos",
      "events_url": "https://api.github.com/users/christianparpart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianparpart/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 40,
  "created_at": "2019-12-03T10:10:50Z",
  "updated_at": "2022-08-17T13:50:38Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Add the `error` keyword to specify error / exception types in the same way as events. These errors can then be thrown using `throw` and they can be used inside `revert` and `require` causing the 4-byte selector of its type being used for the revert data. The matching `catch` clause destructures them.\r\n\r\nNote: For now, we implicitly use the error type `Error(string memory)` and encode its 4-byte selector in the revert data.\r\n\r\nTODO:\r\n - [x] disallow the following selectors: all zeros, all ones, selector of Panic and of Error\r\n - [ ] add `.selector` and `.signature` member for errors?\r\n - [ ] catch errors https://github.com/ethereum/solidity/issues/11278",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/7877/reactions",
    "total_count": 3,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/7877/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/624587400",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-624587400",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 624587400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDU4NzQwMA==",
    "user": {
      "login": "christianparpart",
      "id": 56763,
      "node_id": "MDQ6VXNlcjU2NzYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/56763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianparpart",
      "html_url": "https://github.com/christianparpart",
      "followers_url": "https://api.github.com/users/christianparpart/followers",
      "following_url": "https://api.github.com/users/christianparpart/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianparpart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianparpart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianparpart/subscriptions",
      "organizations_url": "https://api.github.com/users/christianparpart/orgs",
      "repos_url": "https://api.github.com/users/christianparpart/repos",
      "events_url": "https://api.github.com/users/christianparpart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianparpart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-06T11:13:29Z",
    "updated_at": "2020-05-06T11:13:29Z",
    "author_association": "MEMBER",
    "body": "As previously suggested, I've moved the textual changes to a Gist page, that is now to be treated as technical document (not as a blog post), so I can leave in syntax/sema/codegen paragraphs.\r\n\r\nhttps://gist.github.com/christianparpart/8dbfafca45306d102eb115485aa48fe3\r\n\r\n/cc @chriseth ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/624587400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634135319",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-634135319",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 634135319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDEzNTMxOQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-26T16:31:43Z",
    "updated_at": "2020-05-26T16:31:43Z",
    "author_association": "MEMBER",
    "body": "@franzihei can you create a blog post out of the gist for the category \"feature proposals\"?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634135319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634166816",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-634166816",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 634166816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDE2NjgxNg==",
    "user": {
      "login": "franzihei",
      "id": 41991517,
      "node_id": "MDQ6VXNlcjQxOTkxNTE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/41991517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franzihei",
      "html_url": "https://github.com/franzihei",
      "followers_url": "https://api.github.com/users/franzihei/followers",
      "following_url": "https://api.github.com/users/franzihei/following{/other_user}",
      "gists_url": "https://api.github.com/users/franzihei/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franzihei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franzihei/subscriptions",
      "organizations_url": "https://api.github.com/users/franzihei/orgs",
      "repos_url": "https://api.github.com/users/franzihei/repos",
      "events_url": "https://api.github.com/users/franzihei/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franzihei/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-26T17:29:41Z",
    "updated_at": "2020-05-26T17:29:41Z",
    "author_association": "MEMBER",
    "body": "We don't have such a category on the blog. We only have: \r\n- Announcements\r\n- Explainers\r\n- Releases\r\n- Security Alerts\r\n\r\nMaybe \"Explainers\"? \r\nAnd yes, I can make a blog post out of this. : )",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634166816/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634167827",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-634167827",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 634167827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDE2NzgyNw==",
    "user": {
      "login": "franzihei",
      "id": 41991517,
      "node_id": "MDQ6VXNlcjQxOTkxNTE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/41991517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/franzihei",
      "html_url": "https://github.com/franzihei",
      "followers_url": "https://api.github.com/users/franzihei/followers",
      "following_url": "https://api.github.com/users/franzihei/following{/other_user}",
      "gists_url": "https://api.github.com/users/franzihei/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/franzihei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/franzihei/subscriptions",
      "organizations_url": "https://api.github.com/users/franzihei/orgs",
      "repos_url": "https://api.github.com/users/franzihei/repos",
      "events_url": "https://api.github.com/users/franzihei/events{/privacy}",
      "received_events_url": "https://api.github.com/users/franzihei/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-26T17:31:42Z",
    "updated_at": "2020-05-26T17:31:42Z",
    "author_association": "MEMBER",
    "body": "Or do you mean we should make it a series, just like with the `Solidity 0.6.x feaures`? We could embed it in the title like `Solidity feature proposals: Error types`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634167827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634475907",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-634475907",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 634475907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDQ3NTkwNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-27T07:17:00Z",
    "updated_at": "2020-05-27T07:17:00Z",
    "author_association": "MEMBER",
    "body": "Let's discuss in the meeting if we actually want a blog post pre-release about this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/634475907/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/697505515",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-697505515",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 697505515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NzUwNTUxNQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-23T15:05:08Z",
    "updated_at": "2020-09-23T15:05:08Z",
    "author_association": "MEMBER",
    "body": "Made another writeup: https://hackmd.io/b0vr4MFrSkCLlBEacnds0Q",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/697505515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/701616450",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-701616450",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 701616450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTYxNjQ1MA==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-30T20:07:01Z",
    "updated_at": "2020-09-30T20:07:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is an interesting proposal!  I have a few questions on reading this:\r\n\r\n1. Will errors be able to be free-standing, or will they require to be defined in contracts?  (Also I'm assuming they'll be heritable?)  If they're free-standing it's harder to say what ABI they should go in.  OTOH, unlike events, errors are *necessarily* an anything-can-come-from-anywhere scenario, so maybe there's nothing wrong with taking the \"effective ABI\" approach for errors in the ABI, unlike with events?  But it could still complicate looking up extra information in the AST for those who want to decode enums and such.  Blech.  This will need to be figured out.\r\n2. What will happen to messageless `revert()` and `require(bool)`?  Will these continue to produce no return data at all, or will they have some new error type attached to them?  (Like `Error()`, as opposed to `Error(string)`?)\r\n3. If you go with the more traditional ABI approach instead of the \"effective ABI\" approach for putting these in the ABI, I'm guessing `Error(string)` and `Panic(uint)` (and possibly `Error()`, if that's the answer to question 2) will just be built-in error types that won't go in the ABI as they're well-known builtins that don't need to be specified?  Or how will this be handled?\r\n4. To what extent will selectors be checked for collisions?  Like, since you're only using the first four bytes of the hash, collisions will definitely be possible.  Now currently when compiling a contract, function selectors are checked for collisions, but that comparison only needs to be carried out between functions within each contract separately.  However errors are an \"anything can come from anywhere\" sort of thing... is there going to have to be cross-contract selector collision checking?  Or is this just not worth handling?\r\n\r\nHere's the sort of nasty scenario I'm imagining... imagine two contracts that both define an error with signature `MyError(uint8)`, except that those `uint8`s in the ABI are actually `enum`s in the original contracts, and they're different enums, with different numbers of possibilities.  Again -- maybe this sort of thing is not worth handling, and we just have to accept that errors can be ambiguous, much as we already have to accept this for other things and it isn't a big problem.  Honestly I think that's probably fine from my angle as a decoder writer, but it might be less OK from more of a Solidity language user angle.  (Imagine that you try to catch an error, but the catch block panics when it notices that the enum it has received is out of bounds.)  Or maybe that's not a big problem either, I dunno.  So I wanted to point out the issue at least.\r\n\r\nAlso, I'm guessing `revert(string)` and `require(bool,string)` will be kept for compatibility?\r\n\r\nBut yeah while it maybe has some minor kinks to work out on the whole this seems pretty nice! :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/701616450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/701644004",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-701644004",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 701644004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTY0NDAwNA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-30T21:02:30Z",
    "updated_at": "2020-09-30T21:02:30Z",
    "author_association": "MEMBER",
    "body": ">     1. Will errors be able to be free-standing, ...\r\n\r\nThey can be defined both in contracts and on the file level. The plan is, as with events, to include in the ABI all errors that can possibly be thrown by the contract, regardless of where they are defined.\r\n\r\n>     2. What will happen to messageless `revert()` and `require(bool)`? \r\n\r\nI did not plan to change this, so still no error message. This also means that no error message is a \"regular\" error, not a panic.\r\n\r\n>     3. [put built-in errors in the ABI?]\r\n\r\nThat's not clear yet. It might be better to just always put them in the ABI, so that it is also compatible with other languages that choose to have different built-in errors.\r\n\r\n>     4. [selector collisions]\r\n\r\nIndeed, collisions are a problem. We can warn if two errors with the same signature occur in the same \"translation unit\" (or even try/catch block), but we cannot detect if an externally-called contract (to which we do not have the source) uses an error with the same signature as one that we have defined.\r\n\r\nMy main question is if there is a big use-case for distinguishing between different errors at the code-level at all, or if this will be mainly used as a user-interface convenience that is much cheaper than error strings.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/701644004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/701871762",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-701871762",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 701871762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTg3MTc2Mg==",
    "user": {
      "login": "haltman-at",
      "id": 35589221,
      "node_id": "MDQ6VXNlcjM1NTg5MjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35589221?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haltman-at",
      "html_url": "https://github.com/haltman-at",
      "followers_url": "https://api.github.com/users/haltman-at/followers",
      "following_url": "https://api.github.com/users/haltman-at/following{/other_user}",
      "gists_url": "https://api.github.com/users/haltman-at/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haltman-at/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haltman-at/subscriptions",
      "organizations_url": "https://api.github.com/users/haltman-at/orgs",
      "repos_url": "https://api.github.com/users/haltman-at/repos",
      "events_url": "https://api.github.com/users/haltman-at/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haltman-at/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-01T04:12:06Z",
    "updated_at": "2020-10-01T04:12:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The plan is, as with events, to include in the ABI all errors that can possibly be thrown by the contract, regardless of where they are defined.\r\n\r\nHm, *is* that the plan for events, or is the plan for events to have a separate `effectiveABI` or whatever...?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/701871762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/768908233",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-768908233",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 768908233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODkwODIzMw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-28T09:05:41Z",
    "updated_at": "2021-01-28T09:05:41Z",
    "author_association": "MEMBER",
    "body": "One still open problem is how to deal with side-effects of the construction of an error:\r\n```\r\nrequire(condition, MyError(f()));\r\n```\r\nThis should be syntactically valid and I would assume that side-effects of `f` take effect regardless of the value of ``condition`` since ``require`` is \"just another function\" and this is explicitly not equivalent to `if (condition) { revert(MyError(f())); }`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/768908233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777654880",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-777654880",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 777654880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzY1NDg4MA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-11T17:19:10Z",
    "updated_at": "2021-02-11T17:19:10Z",
    "author_association": "MEMBER",
    "body": "Moved from #10922:\r\n\r\nThese are the require statements in the ERC777 implementation of OZ (removed duplicates messages):\r\n\r\n```\r\nrequire(_msgSender() != operator, \"ERC777: authorizing self as operator\");\r\nrequire(operator != _msgSender(), \"ERC777: revoking self as operator\");\r\nrequire(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\r\nrequire(recipient != address(0), \"ERC777: transfer to the zero address\");\r\nrequire(holder != address(0), \"ERC777: transfer from the zero address\");\r\nrequire(account != address(0), \"ERC777: mint to the zero address\");\r\nrequire(from != address(0), \"ERC777: burn from the zero address\");\r\nrequire(from != address(0), \"ERC777: send from the zero address\");\r\nrequire(to != address(0), \"ERC777: send to the zero address\");\r\nrequire(spender != address(0), \"ERC777: approve to the zero address\");\r\nrequire(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\r\n```\r\n\r\nWith the current syntax, one could create the following errors:\r\n\r\n```\r\nerror AuthorizingSelfAsOperator();\r\nerror RevokingSelfAsOperator();\r\nerror CallerNotAnOperator();\r\nerror TransferToZero();\r\nerror TransferFromZero();\r\nerror MintFromZero();\r\nerror BurnFromZero();\r\nerror SendFromZero();\r\nerror SendToZero();\r\nerror ApproveToZero();\r\nerror NoImplementForRecipient();\r\n```\r\n\r\nIs there any other option they could do with the current syntax?\r\n\r\nIf we consider having enum datatypes, then we could replace these with:\r\n```\r\nenum ERC777ErrorEnum {\r\n    AuthorizingSelfAsOperator,\r\n    …\r\n}\r\n\r\nerror ERC777Error(ERC777ErrorEnum);\r\n```\r\n\r\nWe could go further and say that errors are actually enum datatypes:\r\n```\r\nerror ERC777Error {\r\n    AuthorizingSelfAsOperator,\r\n    …\r\n}\r\n```\r\n\r\nThis would generate a function signature of `ERC777Error(enum)` and then following the encoding rules of the enum.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/777654880/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779264805",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779264805",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779264805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTI2NDgwNQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T14:41:37Z",
    "updated_at": "2021-02-15T14:41:37Z",
    "author_association": "MEMBER",
    "body": "The enum has the disadvantage that you cannot easily have a natspec string for each error. I would really love to see these natspec strings being used.\r\n\r\nAbout syntax:\r\nIf we want to distinguish this from function calls, we probably need a keyword.\r\n\r\nBrainstorming:\r\n - require(c, error X(1, 2));\r\n - require(c) error X(1, 2);\r\n - require(c) throw X(1, 2);\r\n - revert() error X(1, 2);\r\n - revert() with X(1, 2);\r\n - require(c) with X(1, 2);",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779264805/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779335548",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779335548",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779335548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTMzNTU0OA==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T16:37:55Z",
    "updated_at": "2021-02-15T16:42:49Z",
    "author_association": "MEMBER",
    "body": "If we're thinking about things like `require(c) throw X(1, 2);` then why not just `if (!c) throw X(1, 2);`? As a side effect, the fact that the error gets evaluated only when the condition is satisfied would be much more apparent.\r\n\r\nWe could also make `revert` a statement :)\r\n- `revert \"Error: something went wrong\";`\r\n- `revert X(1, 2);`\r\n- `if (!c) revert X(1, 2);`\r\n\r\nWe could also allow condition at the end, though I think having it in the front is better for readability:\r\n- `revert X(1, 2) if (!c);`\r\n\r\nEDIT: more concrete names to see how it would work in practice:\r\n- ```solidity\r\n    revert \"Insufficient funds\";\r\n    ```\r\n- ```solidity\r\n    revert InsufficientFunds(minimumAmount);\r\n    ```\r\n- ```solidity\r\n    if (balance < 42)\r\n        revert InsufficientFunds(42);\r\n    ```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779335548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779342917",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779342917",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779342917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM0MjkxNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T16:50:46Z",
    "updated_at": "2021-02-15T16:50:46Z",
    "author_association": "MEMBER",
    "body": "Oh wow, you are right, making `revert` a keyword actually sounds like the obvious solution!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779342917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779344006",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779344006",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779344006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM0NDAwNg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T16:52:09Z",
    "updated_at": "2021-02-15T16:52:09Z",
    "author_association": "MEMBER",
    "body": "The main problem with that is it is a bit more verbose than `require(c >= 42, InsufficientFuds(42))`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779344006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779345313",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779345313",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779345313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM0NTMxMw==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T16:54:31Z",
    "updated_at": "2021-02-15T16:54:31Z",
    "author_association": "MEMBER",
    "body": "Well, you could do `if (balance < 42) revert InsufficientFunds(42);` which is about the same readability-wise. It just goes against our ingrained instinct to put the condition on a separate line :)\r\n\r\nBTW, making it a keyword would be a breaking change, right?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779345313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779346095",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779346095",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779346095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM0NjA5NQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T16:55:55Z",
    "updated_at": "2021-02-15T16:55:55Z",
    "author_association": "MEMBER",
    "body": "What I like about the require statement is also that you do not have to negate the condition. Yes, it would be a breaking change, but we can introduce it in a \"softfork\" manner.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779346095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779347831",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779347831",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779347831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM0NzgzMQ==",
    "user": {
      "login": "cameel",
      "id": 137030,
      "node_id": "MDQ6VXNlcjEzNzAzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/137030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cameel",
      "html_url": "https://github.com/cameel",
      "followers_url": "https://api.github.com/users/cameel/followers",
      "following_url": "https://api.github.com/users/cameel/following{/other_user}",
      "gists_url": "https://api.github.com/users/cameel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cameel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cameel/subscriptions",
      "organizations_url": "https://api.github.com/users/cameel/orgs",
      "repos_url": "https://api.github.com/users/cameel/repos",
      "events_url": "https://api.github.com/users/cameel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cameel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T16:58:57Z",
    "updated_at": "2021-02-15T16:59:31Z",
    "author_association": "MEMBER",
    "body": "Then how about `unless (balance >= 42) revert InsufficientFunds(42);`? :)\r\n\r\nThough to be honest Ruby has both `if` and `unless` and I never got used to the latter. It was always giving me a pause and I had to stop to negate the condition back :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779347831/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779914185",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779914185",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779914185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTkxNDE4NQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-16T15:32:12Z",
    "updated_at": "2021-02-16T15:32:12Z",
    "author_association": "MEMBER",
    "body": "During a call we have discussed ABI encoding and concluded the following:\r\n1. We should use the same ABI encoding without any deviation. The main question was how to encode enums. We anticipate that enum datatypes which will have a different signature, and once they are in the language we could seek to deprecate \"old enums\".\r\n\r\n2. We want to reserve some selectors for future expansion. We decided to reserve `0x00000000` and `0xffffffff`. If an error evaluates to these selectors, it is disallowed. (Note there are [some signatures for `0x00000000`](https://www.4byte.directory/signatures/?bytes4_signature=0x00000000), but they seem to be part of a [collision discussion](https://github.com/ethereum/web3.py/issues/775)).\r\n\r\n3. We want to reserve some signatures. We decided to reserve the names `Error` and `Panic`.\r\n\r\nNote about errors with enums: since they have a signature including `uint8`, it is possible to catch them as enum or as uint8. It is disallowed to have both of those clauses in a single try/catch statement.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779914185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779915513",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779915513",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779915513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTkxNTUxMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-16T15:34:11Z",
    "updated_at": "2021-02-16T15:34:11Z",
    "author_association": "MEMBER",
    "body": "In #3252 I propose that events are data structures and we should follow the syntax of structs at declaration site. I also propose we should have a different syntax for the construction site to make them not look like function calls.\r\n\r\nI think the same applies to errors. If we agree to change the syntax of event declaration in the long term, I would say we should have that struct-like syntax for errors now. If we are strongly against that syntax for events, then errors should match the syntax of events.\r\n\r\nAt the construction site I am not 100% sure what is the best direction, but still not fully convinced by the function call syntax.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779915513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779925056",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779925056",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779925056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTkyNTA1Ng==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-16T15:48:40Z",
    "updated_at": "2021-02-16T16:11:57Z",
    "author_association": "MEMBER",
    "body": "Assessing the proposed ones:\r\n\r\n1. `revert(E(a, b));` and `require(c, E(a, b))` -- simplest option, the risk we feel is that E looks like a function\r\n\r\n2. `revert(error E(a, b));` and `require(c, error E(a, b));` -- makes it clear they are errors, but this is not consistent with how events and the `emit` keyword works.\r\n\r\n3. `revert(E { a, b});` and `require(c, E { a, b });` (or perhaps the fields need to be named, ie. `a_name: a`) -- this is based on the #3252 suggestion, but looks like a big syntactical change\r\n\r\n4. `revert E(a, b);` and `require(c) E(a, b);` -- these are more consistent with how the `emit` keyword works, but the require part is a novel syntax\r\n\r\n5. `revert E(a, b);` and `require(c) else E(a, b);` (or some other keyword or symbol after the reqire)\r\n\r\n6. `revert() with E(a, b);` and `require(c) with E(1, b);` -- while with looks nice, it is a new keyword, and it looks confusing on require\r\n\r\n7. `require(c) revert E(a, b);`\r\n\r\n8. `require(c) else revert E(a, b);`\r\n\r\n9. `require(c)? revert E(a, b);`\r\n\r\n10. `require(c): E(a, b);`\r\n\r\n7. `if (!c) revert E(a, b);`\r\n\r\n8. `unless (c) revert E(a, b);`\r\n\r\n9. `(c) || revert E(a, b);`\r\n\r\n10. `validate(c) or revert E(a, b);`\r\n\r\n11. `require c else E(a, b);`\r\n\r\n12. `revert E(a, b) if (!c);`\r\n\r\n13. `revert E(a, b) unless (!c);`\r\n\r\n14. `revert E(a, b);` and `require(c) or E(a, b);`\r\n\r\nA common risk with having errors as arguments is the lack of clarity of what happens to side effects (i.e. some arguments to errors). Are they evaluated before or after `c`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779925056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779938163",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-779938163",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 779938163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTkzODE2Mw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-16T16:07:51Z",
    "updated_at": "2021-02-16T16:07:51Z",
    "author_association": "MEMBER",
    "body": "Regarding Option 5 (and the others which use require as part of a larger statement): I think if we decide for such a syntax then we should strive to remove the `require(c, <string>)` variant and have the builtin error type exposed. Such as\r\n`revert Error(\"string\")` and `require(c) else Error(\"string\")`. This `Error` could be implicitly available in the contract namespace or explicitly imported via `import Error from std;`.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/779938163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780538808",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-780538808",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 780538808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDUzODgwOA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T12:58:01Z",
    "updated_at": "2021-02-17T12:58:01Z",
    "author_association": "MEMBER",
    "body": "Two late additions after reading up some other languages and our constructs:\r\n1. `require(c) throws Error()` or `require(c) throw Error()`\r\n2. `require(c) emits Error()` or `require(c) emit Error()`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780538808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780542488",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-780542488",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 780542488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDU0MjQ4OA==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T13:04:27Z",
    "updated_at": "2021-02-17T13:04:27Z",
    "author_association": "MEMBER",
    "body": "In these proposals like `require(c) throws Error()`, will something like `if (c) { throws Error() }` be also valid? Or is it only relevant in the context of `require`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780542488/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780547979",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-780547979",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 780547979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDU0Nzk3OQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T13:14:42Z",
    "updated_at": "2021-02-17T13:14:42Z",
    "author_association": "MEMBER",
    "body": "If we go with something like `throw Error()` or `revert Error()` that should be valid syntax on its own.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780547979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780589820",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-780589820",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 780589820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDU4OTgyMA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T14:23:13Z",
    "updated_at": "2021-02-17T14:23:13Z",
    "author_association": "MEMBER",
    "body": "I came around to think that the `unless (c) revert E(a, b)` construct is the best, as long as we consider `unless` as an inverted if, and we consider `unless (c)` and `revert E(a, b)` valid constructs in their own. That means we do not introduce some specific syntax here, rather make use of two valid constructs.\r\n\r\nBasically `unless (c)` is an alias to `if (!c)` and can be used interchangeably in the language.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780589820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780596626",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-780596626",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 780596626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDU5NjYyNg==",
    "user": {
      "login": "hrkrshnn",
      "id": 13174375,
      "node_id": "MDQ6VXNlcjEzMTc0Mzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13174375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrkrshnn",
      "html_url": "https://github.com/hrkrshnn",
      "followers_url": "https://api.github.com/users/hrkrshnn/followers",
      "following_url": "https://api.github.com/users/hrkrshnn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrkrshnn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrkrshnn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrkrshnn/subscriptions",
      "organizations_url": "https://api.github.com/users/hrkrshnn/orgs",
      "repos_url": "https://api.github.com/users/hrkrshnn/repos",
      "events_url": "https://api.github.com/users/hrkrshnn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrkrshnn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T14:33:46Z",
    "updated_at": "2021-02-17T14:36:30Z",
    "author_association": "MEMBER",
    "body": "> Basically unless (c) is an alias to if (!c) and can be used interchangeably in the language.\r\n\r\nI feel that having both `if` and `unless` in the same code is slightly confusing. I would prefer if the `unless` statement was always followed by a revert or an error.\r\n\r\nAlso, solidity doesn't normally have syntactic sugars, like this `unless` proposal.  So not sure if this is the right direction.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780596626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780597825",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-780597825",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 780597825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDU5NzgyNQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T14:35:37Z",
    "updated_at": "2021-02-17T14:35:37Z",
    "author_association": "MEMBER",
    "body": "Since we weren't fully convinced with `unless` as a keyword, [thesaurus](https://www.thesaurus.com/browse/unless?s=t) offers two alternatives: `except` and `without`.\r\n\r\n`without (signature.length == 65) revert Error(\"invalid length\");`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780597825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780598691",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-780598691",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 780598691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDU5ODY5MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T14:36:57Z",
    "updated_at": "2021-02-17T14:36:57Z",
    "author_association": "MEMBER",
    "body": "We more or less came to the conclusion that `revert CustomError(arg1, arg2);`  is a good syntax for using revert with a custom error because of its alignment to the way events are emitted (`emit EventName(arg1, arg2);`).\r\n\r\nWhat is still open is how to properly deal with `require`. Of course, `require` is optional, since `if (!c) revert CustomError(arg1, arg2);` can be used instead of it. On the other hand, its declarative way to express preconditions is very handy and intuitive.\r\n\r\nThe first idea was to use `require(c, CustomError(arg1, arg2))`. This has the big downside that it is not clear if side-effects of the construction of the error take effect if `c` is true.\r\n\r\nOne way to make this clearer and also have the syntax for `require` more closely follow the one of `revert` is to use something from the following list:\r\n\r\n- require(c) else CustomError(arg1, arg2);\r\n- require(c): CustomError(arg1, arg2);\r\n- require(c) or CustomError(arg1, arg2);\r\n- require(c) or revert CustomError(arg1, arg2);\r\n- require(c) else revert CustomError(arg1, arg2);\r\n\r\nAn different approach is to avoid the use of the `require` keyword, but instead remove the negation in `if (!c) revert CustomError(arg1, arg2);`: This is by introducing an `unless` statement:\r\n\r\n - unless (c) revert CustomError(arg1, arg2)\r\n\r\n`unless (c) ...` is equivalent to `if (!c) ...` and it can also be used without `revert`.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780598691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780707650",
    "html_url": "https://github.com/ethereum/solidity/issues/7877#issuecomment-780707650",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/7877",
    "id": 780707650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDcwNzY1MA==",
    "user": {
      "login": "daejunpark",
      "id": 5491770,
      "node_id": "MDQ6VXNlcjU0OTE3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5491770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daejunpark",
      "html_url": "https://github.com/daejunpark",
      "followers_url": "https://api.github.com/users/daejunpark/followers",
      "following_url": "https://api.github.com/users/daejunpark/following{/other_user}",
      "gists_url": "https://api.github.com/users/daejunpark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daejunpark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daejunpark/subscriptions",
      "organizations_url": "https://api.github.com/users/daejunpark/orgs",
      "repos_url": "https://api.github.com/users/daejunpark/repos",
      "events_url": "https://api.github.com/users/daejunpark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daejunpark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T17:10:03Z",
    "updated_at": "2021-02-17T17:10:03Z",
    "author_association": "NONE",
    "body": "[Thoughts from someone who prefers restrictions over convenience for security.]\r\n\r\nI vote for `require(c) or revert CustomError(arg1, arg2);`.  It is clear and least confusing.  The only downside I can think of is that it is slightly verbose, but considering the importance of input validation for security, I think such inconvenience(?) is worth taking.\r\n\r\nBTW, in general, I'm concerned about introducing `unless` (or `without` etc.) that is the negation of `if`.  It seems quite confusing and easy to make a mistake especially when both `if` and `unless` are used together at the same place.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/780707650/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
