{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/2180",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/2180/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/2180/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/2180/events",
  "html_url": "https://github.com/ethereum/solidity/issues/2180",
  "id": 224525253,
  "node_id": "MDU6SXNzdWUyMjQ1MjUyNTM=",
  "number": 2180,
  "title": "doc: add the very first introduction of Solidity",
  "user": {
    "login": "pirapira",
    "id": 44281,
    "node_id": "MDQ6VXNlcjQ0Mjgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pirapira",
    "html_url": "https://github.com/pirapira",
    "followers_url": "https://api.github.com/users/pirapira/followers",
    "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
    "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
    "organizations_url": "https://api.github.com/users/pirapira/orgs",
    "repos_url": "https://api.github.com/users/pirapira/repos",
    "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pirapira/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 275027668,
      "node_id": "MDU6TGFiZWwyNzUwMjc2Njg=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/documentation%20:book:",
      "name": "documentation :book:",
      "color": "006b75",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "ChrisChinchilla",
    "id": 42080,
    "node_id": "MDQ6VXNlcjQyMDgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/42080?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ChrisChinchilla",
    "html_url": "https://github.com/ChrisChinchilla",
    "followers_url": "https://api.github.com/users/ChrisChinchilla/followers",
    "following_url": "https://api.github.com/users/ChrisChinchilla/following{/other_user}",
    "gists_url": "https://api.github.com/users/ChrisChinchilla/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ChrisChinchilla/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ChrisChinchilla/subscriptions",
    "organizations_url": "https://api.github.com/users/ChrisChinchilla/orgs",
    "repos_url": "https://api.github.com/users/ChrisChinchilla/repos",
    "events_url": "https://api.github.com/users/ChrisChinchilla/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ChrisChinchilla/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "ChrisChinchilla",
      "id": 42080,
      "node_id": "MDQ6VXNlcjQyMDgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/42080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChrisChinchilla",
      "html_url": "https://github.com/ChrisChinchilla",
      "followers_url": "https://api.github.com/users/ChrisChinchilla/followers",
      "following_url": "https://api.github.com/users/ChrisChinchilla/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChrisChinchilla/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChrisChinchilla/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChrisChinchilla/subscriptions",
      "organizations_url": "https://api.github.com/users/ChrisChinchilla/orgs",
      "repos_url": "https://api.github.com/users/ChrisChinchilla/repos",
      "events_url": "https://api.github.com/users/ChrisChinchilla/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChrisChinchilla/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2017-04-26T16:22:26Z",
  "updated_at": "2018-09-26T14:36:20Z",
  "closed_at": "2018-09-26T14:36:20Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "The Wiki page [The Solidity Programming Language](https://github.com/ethereum/wiki/wiki/The-Solidity-Programming-Language) contained the following description of Solidity.  This was nice because it described the language with the most general way, and it proceeded to demonstrate some very simple code in Solidity.\r\n\r\nThis kind of introduction is missing from the documentation in this repository.\r\n\r\n> # Foreword\r\n> \r\n> **Yoichi: no foreword of this detail can be found in the official documentation.**\r\n> \r\n> Solidity is roughly speaking, an object-oriented language designed for writing contracts in Ethereum. Contracts are (typically) small programs which govern the behaviour of accounts within the Ethereum state. These programs operate within the context of the Ethereum environment. Such accounts are able to pass messages between themselves as well as doing practically Turing complete computation.\r\n> \r\n> Solidity is perhaps the first example of a *contract-oriented* programming language; a slight tweak on the notion of object-orientation. While closely related to object-oriented languages, this is a language designed specifically to help express agreements that must encode ideas and relationships relevant to Real Life, or some formal model thereof. As such we see notions such as ownership, identity, protections and restrictions forming a core part of the vocabulary and idiomatic grammar.\r\n> \r\n> We see language grammar actually tieing in with many of the aspects of this: the `event` primitives along with the `indexed` keyword explicitly address the logging environment which Ethereum provides. The variadic return values mimic the fact that output data of Ethereum's calling mechanism is, like the input data, an arbitrary byte array.\r\n> \r\n> # Basic Contract Anatomy\r\n> \r\n> ## Hello, World!\r\n> \r\n> **Yoichi: this example is missing from the official documentation**\r\n> \r\n> No language would be complete without a Hello World program. Operating within the Ethereum environment, Solidity has no obvious way of \"outputting\" a string. The closest we can do is to use a log event to place a string into the blockchain:\r\n> \r\n> ```\r\n> contract HelloWorld {\r\n>   event Print(string out);\r\n>   function() { Print(\"Hello, World!\"); }\r\n> }\r\n> ```\r\n> \r\n> This contract, if placed on the blockchain and called, would create a log entry on the blockchain of type `Print` with a parameter `\"Hello, World!\"`. Easy, eh?\r\n> \r\n> ## The Contract\r\n> \r\n> **Yoichi: This example is missing from the official documentation**\r\n> \r\n> The contract is the basic structure of Solidity. It is a prototype of an object which lives on the blockchain. A contract may be instantiated into a contract-account (or 'object', or sometimes just 'account') at which point it gets a uniquely identifying address with which it may be called. The address here is similar to a reference or pointer in C-like languages, or just a plain old object in Javascript. Like plain objects in many object-oriented languages, contracts can never run themselves - they may only be called, or, put another way, they can only react to the receipt of a message; they can never be proactive.\r\n> \r\n> We denote a contract with the `contract` keyword and a name, followed by its definition enclosed in braces (`{` & `}`). Here is the most basic contract:\r\n> \r\n> ```\r\n> contract MostBasicContract {\r\n> }\r\n> ```\r\n> \r\n> It doesn't do anything. To make it do something when it receives a message, we can introduce a function. The function you've already seen is the so-called default function. Why this is default will be properly explained later, but for now, suffice it to say that it is simply the function that gets called when this contract (well, an instantiation of it, anyway) receives a message from the Ethereum Environment.\r\n> \r\n> The syntax of a function is similar to Javascript: it begins with the `function` keyword, then has a parenthesised parameter list, and finally has a braced expression block.\r\n> \r\n> ```\r\n> contract MostBasicContract {\r\n> \tfunction() {\r\n> \t\t// executed when a message is received.\r\n> \t}\r\n> }\r\n> ```\r\n> \r\n> This expression block is very similar to other C-like languages including Javascript. Within our expression block, we are able to do arbitrary computation; for instance, we might try to determine what the sum of 1 and 1 is and place it into a variable called `two`:\r\n> \r\n> ```\r\n> contract Simple {\r\n> \tfunction() {\r\n> \t\tvar two = 1 + 1;\r\n> \t}\r\n> }\r\n> ```\r\n> \r\n> Unlike in Javascript, all variables must be declared prior to use and typed. However, for convenience, `var` is provided as a way to automatically determine the type through the expression it is initialised to. In this case, the type is `uint`, but more on the types later.\r\n> \r\n> ## Simple Types\r\n> \r\n> **Yoichi: this kind of list of types is missing from the official documentation.**\r\n> \r\n> The type system in Solidity revolves largely around the 256-bit word size of the EVM. To this end, there are 4 major types, each of which are specifically 256-bits wide:\r\n> \r\n> - `uint`: 256-bit unsigned integer, operable with bitwise and unsigned arithmetic operations.\r\n> - `int`: 256-bit signed integer, operable with bitwise and signed arithmetic operations.\r\n> - `real`: 256-bit signed fixed-point quantity, 127-bit left of the point, 128-bit right.\r\n> - `bytes32`: sequence of 32 bytes (256 bit in total).\r\n> \r\n> In addition to these, there is the intrinsic `address` type used for identifying specific accounts and a bool type for representing true and false:\r\n> \r\n> - `address`: account identifier, 160-bits.\r\n> - `bool`: two-state value.\r\n> \r\n> Most of the time, we'll tend to use `uint` and `bytes32`; the former if we intend to do arithmetic, the latter when we need to identify or refer to pieces of data, events, &c.\r\n> \r\n> So to declare a variable it is very similar to the C-like languages: we simply place the type, followed by the variable name and finish the expression with a `;`. For example to declare a uint named `x` we would write:\r\n> \r\n> ```\r\n> uint x;\r\n> ```\r\n> \r\n> If we then wanted to assign `69` to it, we'd use the assignment operator, `=` (not forgetting to place the trailing `;`:\r\n> \r\n> ```\r\n> uint x;\r\n> x = 69;\r\n> ```\r\n> \r\n> There is a shorthand to declaring and assigning; those two statements may be collapsed over the `x` into:\r\n> \r\n> ```\r\n> uint x = 69;\r\n> ```\r\n> \r\n> In this situation, where we are simultaneously declaring and initialising the variable, we are able to substitute the type with the keyword `var`. If we do this, the type will be determined through the type of the expression we are assigning:\r\n> \r\n> ```\r\n> var x = 69;\r\n> ```\r\n> \r\n> If we were to assign a decimal, `var` would become equivalent to a real:\r\n> \r\n> ```\r\n> var x = 69;\t\t// here, \"var\" is equivalent to \"uint\".\r\n> var y = 69.42;\t// here, \"var\" is equivalent to \"real\".\r\n> ```\r\n> ",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/2180/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/2180/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/422016932",
    "html_url": "https://github.com/ethereum/solidity/issues/2180#issuecomment-422016932",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/2180",
    "id": 422016932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjAxNjkzMg==",
    "user": {
      "login": "ChrisChinchilla",
      "id": 42080,
      "node_id": "MDQ6VXNlcjQyMDgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/42080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChrisChinchilla",
      "html_url": "https://github.com/ChrisChinchilla",
      "followers_url": "https://api.github.com/users/ChrisChinchilla/followers",
      "following_url": "https://api.github.com/users/ChrisChinchilla/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChrisChinchilla/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChrisChinchilla/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChrisChinchilla/subscriptions",
      "organizations_url": "https://api.github.com/users/ChrisChinchilla/orgs",
      "repos_url": "https://api.github.com/users/ChrisChinchilla/repos",
      "events_url": "https://api.github.com/users/ChrisChinchilla/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChrisChinchilla/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-17T13:31:12Z",
    "updated_at": "2018-09-17T13:31:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pirapira Took a pass at this here - https://github.com/ethereum/solidity/issues/2180\r\n\r\nRead further comments on that PR",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/422016932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
