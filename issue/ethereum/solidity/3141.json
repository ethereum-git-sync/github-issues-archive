{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/3141",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/3141/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/3141/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/3141/events",
  "html_url": "https://github.com/ethereum/solidity/issues/3141",
  "id": 269294479,
  "node_id": "MDU6SXNzdWUyNjkyOTQ0Nzk=",
  "number": 3141,
  "title": "LLL: the bitwise shift macros after EIP-145 is implemented",
  "user": {
    "login": "benjaminion",
    "id": 20796281,
    "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
    "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/benjaminion",
    "html_url": "https://github.com/benjaminion",
    "followers_url": "https://api.github.com/users/benjaminion/followers",
    "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
    "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
    "organizations_url": "https://api.github.com/users/benjaminion/orgs",
    "repos_url": "https://api.github.com/users/benjaminion/repos",
    "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
    "received_events_url": "https://api.github.com/users/benjaminion/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2017-10-28T07:51:42Z",
  "updated_at": "2020-01-15T14:18:50Z",
  "closed_at": "2020-01-15T14:18:50Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "@axic @zigguratt \r\n\r\nJust kicking off a discussion about this ahead of time. [EIP-145](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-145.md) will introduce native `shl` and `shr` EVM opcodes, which is long overdue. This is slated for the Constantinople fork.\r\n\r\nThe issue for LLL is that there currently exist compiler macros for `shl` and `shr` introduced in #2394.  Unfortunately, the order of the operands to the LLL macros is inverted with respect to order of the operands in EIP-145.\r\n\r\nI think there are a couple of options for handling this in LLL.\r\n\r\n1. Remove the compiler macros entirely. This will allow LLL to recognise the new `shl` and `shr` EVM operators natively.\r\n    - Pro: clean, intuitive.\r\n    - Con: may break a proportion of existing LLL  code.\r\n\r\n2. The current macros will take precedence over the EVM opcodes, so update the macro bodies to invert the operands before passing them to the native EVM versions of `shl`, `shr`. E.g. `(def 'shl (val shift) (shl shift val))`.\r\n    - Pro: doesn't break existing code; no performance penalty.\r\n    - Con: confuses anyone who is unaware of this inversion and believes they are using the native opcodes in their code.\r\n\r\nGiven that the amount of LLL code created between the introduction of these macros and the deployment of this EIP is likely to be relatively small, I'd slightly favour option 1.  Historically, breaking changes to LLL have not been uncommon. It's possible that I am the only person who has used these macros :-)\r\n\r\nAnyway, opening for discussion.",
  "closed_by": {
    "login": "axic",
    "id": 20340,
    "node_id": "MDQ6VXNlcjIwMzQw",
    "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/axic",
    "html_url": "https://github.com/axic",
    "followers_url": "https://api.github.com/users/axic/followers",
    "following_url": "https://api.github.com/users/axic/following{/other_user}",
    "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
    "organizations_url": "https://api.github.com/users/axic/orgs",
    "repos_url": "https://api.github.com/users/axic/repos",
    "events_url": "https://api.github.com/users/axic/events{/privacy}",
    "received_events_url": "https://api.github.com/users/axic/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/3141/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/3141/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/340225691",
    "html_url": "https://github.com/ethereum/solidity/issues/3141#issuecomment-340225691",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3141",
    "id": 340225691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIyNTY5MQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-28T23:07:46Z",
    "updated_at": "2017-10-28T23:07:46Z",
    "author_association": "MEMBER",
    "body": "Removing them or swapping the operands are both breaking changes, though we haven't so far paid much attention to breaking changes, partially due to the fact LLL has no releases :)\r\n\r\nI don't particularly like that people are using builtin functions and inline assembly interchangeably. A good actual step forward could be defining builtin functions (aka functions exposing underlying opcodes). In that case `shl` as it is could remain, because in a higher level language the operand order `val, shift amount` seems more logical.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/340225691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/341045915",
    "html_url": "https://github.com/ethereum/solidity/issues/3141#issuecomment-341045915",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/3141",
    "id": 341045915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTA0NTkxNQ==",
    "user": {
      "login": "benjaminion",
      "id": 20796281,
      "node_id": "MDQ6VXNlcjIwNzk2Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20796281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benjaminion",
      "html_url": "https://github.com/benjaminion",
      "followers_url": "https://api.github.com/users/benjaminion/followers",
      "following_url": "https://api.github.com/users/benjaminion/following{/other_user}",
      "gists_url": "https://api.github.com/users/benjaminion/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benjaminion/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benjaminion/subscriptions",
      "organizations_url": "https://api.github.com/users/benjaminion/orgs",
      "repos_url": "https://api.github.com/users/benjaminion/repos",
      "events_url": "https://api.github.com/users/benjaminion/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benjaminion/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-01T09:13:22Z",
    "updated_at": "2017-11-01T09:13:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> A good actual step forward could be defining builtin functions (aka functions exposing underlying opcodes).\r\n\r\nActually, I like this. For example, opcode expressions could be required to be capitalised: `SHL` vs. `shl`. The parser is already case-sensitive, so the following results in neither `0` nor `10`, but `3`:\r\n\r\n    (returnlll (seq (def 'add (a b) 0) (return (+ (ADD 1 2) (add 3 4)))))  => 3\r\n\r\nI think this would be easy to implement, maybe just one change in *CodeFragment.cpp*, `validAssemblyInstruction()`.\r\n\r\nIt would, however, be **very** breaking. I'm completely OK with that, but it might mess up, say, the exisiting body of Ethereum client tests.\r\n\r\nPerhaps a compiler flag:\r\n  * default: EVM opcodes must be capitalised when used in LLL.\r\n  * with flag: the compiler behaves as now, either by relaxing the new check in `validAssemblyInstruction()` or by automatically including a set of macros `(def 'add (a b) (ADD a b))` etc.\r\n\r\n@zigguratt  - any thoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/341045915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
