{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14114",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14114/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14114/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14114/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14114",
  "id": 1664870441,
  "node_id": "I_kwDOAm_5kc5jO-gp",
  "number": 14114,
  "title": "Unexpected results are produced when fetching Struct across contracts",
  "user": {
    "login": "nishuzumi",
    "id": 13927203,
    "node_id": "MDQ6VXNlcjEzOTI3MjAz",
    "avatar_url": "https://avatars.githubusercontent.com/u/13927203?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nishuzumi",
    "html_url": "https://github.com/nishuzumi",
    "followers_url": "https://api.github.com/users/nishuzumi/followers",
    "following_url": "https://api.github.com/users/nishuzumi/following{/other_user}",
    "gists_url": "https://api.github.com/users/nishuzumi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nishuzumi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nishuzumi/subscriptions",
    "organizations_url": "https://api.github.com/users/nishuzumi/orgs",
    "repos_url": "https://api.github.com/users/nishuzumi/repos",
    "events_url": "https://api.github.com/users/nishuzumi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nishuzumi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2023-04-12T16:23:08Z",
  "updated_at": "2023-04-13T14:19:43Z",
  "closed_at": "2023-04-13T11:57:22Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\nI encountered a very strange problem, unexpected results are produced when fetching Struct across contracts\r\n## Environment\r\n\r\n- Compiler version: 0.8.18\r\n- Target EVM version (as per compiler settings):0.8.18+commit.87f61d96\r\n- Framework/IDE (e.g. Truffle or Remix):Remix\r\n- EVM execution environment / backend / blockchain client:Remix\r\n- Operating system:Remix\r\n\r\n## Steps to Reproduce\r\n\r\n```\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStorage{\r\n    struct Filed{\r\n        uint id;\r\n        string name;\r\n    }\r\n}\r\n\r\ncontract Storage is IStorage {\r\n    mapping(uint256 => Filed) public store;\r\n\r\n    constructor(){\r\n        store[1] = Filed(1,\"Bot\");\r\n        store[0] = Filed(0,\"Gun\");\r\n        store[2] = Filed(3,\"Love\");\r\n    }\r\n}\r\n\r\ninterface IStorageExtra is IStorage{\r\n    function store(uint id) external view returns(Filed memory);\r\n}\r\n\r\ncontract Query {\r\n    IStorageExtra public storageContract;\r\n    constructor(){\r\n        storageContract = IStorageExtra(address(new Storage()));\r\n    }\r\n\r\n    function query() public view returns(Storage.Filed[] memory){\r\n        uint max = 2;\r\n        Storage.Filed[] memory data = new Storage.Filed[](max);\r\n        for(uint i = 0; i < max ;i++){\r\n            data[i] = storageContract.store(i);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    function query2() public view returns(Storage.Filed[] memory){\r\n        Storage.Filed[] memory data = new Storage.Filed[](1);\r\n        data[0] = storageContract.store(2);\r\n        return data;\r\n    }\r\n\r\n    function query3() public view returns(Storage.Filed memory){\r\n        Storage.Filed memory data = storageContract.store(2);\r\n        return data;\r\n    }\r\n\r\n\r\n    function query4OK() public view returns(Storage.Filed memory){\r\n        Storage.Filed memory data = storageContract.store(0);\r\n        return data;\r\n    }\r\n\r\n    function query5OK() public view returns(Storage.Filed[] memory){\r\n        uint max = 1;\r\n        Storage.Filed[] memory data = new Storage.Filed[](max);\r\n        for(uint i = 0; i < max ;i++){\r\n            data[i] = storageContract.store(i);\r\n        }\r\n        return data;\r\n    }\r\n}\r\n```\r\nI can deploy this code to run on Remix. When I execute the query method in Query, this line of code will give an error, where `query`, `query2`, `query3` will all give an error, while `query4`, `query5` will not give an error.\r\n",
  "closed_by": {
    "login": "r0qs",
    "id": 457348,
    "node_id": "MDQ6VXNlcjQ1NzM0OA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/457348?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/r0qs",
    "html_url": "https://github.com/r0qs",
    "followers_url": "https://api.github.com/users/r0qs/followers",
    "following_url": "https://api.github.com/users/r0qs/following{/other_user}",
    "gists_url": "https://api.github.com/users/r0qs/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/r0qs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/r0qs/subscriptions",
    "organizations_url": "https://api.github.com/users/r0qs/orgs",
    "repos_url": "https://api.github.com/users/r0qs/repos",
    "events_url": "https://api.github.com/users/r0qs/events{/privacy}",
    "received_events_url": "https://api.github.com/users/r0qs/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14114/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14114/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1506226071",
    "html_url": "https://github.com/ethereum/solidity/issues/14114#issuecomment-1506226071",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14114",
    "id": 1506226071,
    "node_id": "IC_kwDOAm_5kc5Zxy-X",
    "user": {
      "login": "0xAWM",
      "id": 29773064,
      "node_id": "MDQ6VXNlcjI5NzczMDY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/29773064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xAWM",
      "html_url": "https://github.com/0xAWM",
      "followers_url": "https://api.github.com/users/0xAWM/followers",
      "following_url": "https://api.github.com/users/0xAWM/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xAWM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xAWM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xAWM/subscriptions",
      "organizations_url": "https://api.github.com/users/0xAWM/orgs",
      "repos_url": "https://api.github.com/users/0xAWM/repos",
      "events_url": "https://api.github.com/users/0xAWM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xAWM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-13T02:11:31Z",
    "updated_at": "2023-04-13T02:32:20Z",
    "author_association": "NONE",
    "body": "``` solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\ncontract Storage {\r\n    struct Filed {\r\n        uint256 id;\r\n        string name;\r\n    }\r\n\r\n    mapping(uint256 => Filed) public store;\r\n\r\n    function storeOK(uint256 _id) external view returns (Filed memory) {\r\n        return store[_id];\r\n    }\r\n}\r\n\r\ncontract Query {\r\n    Storage public storageContract;\r\n\r\n    constructor() {\r\n        storageContract = new Storage();\r\n    }\r\n\r\n    function query() public view {\r\n        Storage.Filed memory errData = storageContract.store(0); // It will trigger an error from the compiler.\r\n        Storage.Filed memory data = storageContract.storeOK(0); // fine\r\n    }\r\n}\r\n\r\n```\r\n\r\n```\r\nTypeError: Different number of components on the left hand side (1) than on the right hand side (2).\r\n  --> box.sol:25:9:\r\n   |\r\n25 |         Storage.Filed memory errData = storageContract.store(0);\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nTypeError: Type uint256 is not implicitly convertible to expected type struct Storage.Filed memory.\r\n  --> box.sol:25:9:\r\n   |\r\n25 |         Storage.Filed memory errData = storageContract.store(0);\r\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1506226071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1506236057",
    "html_url": "https://github.com/ethereum/solidity/issues/14114#issuecomment-1506236057",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14114",
    "id": 1506236057,
    "node_id": "IC_kwDOAm_5kc5Zx1aZ",
    "user": {
      "login": "tonyke-bot",
      "id": 14999583,
      "node_id": "MDQ6VXNlcjE0OTk5NTgz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14999583?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tonyke-bot",
      "html_url": "https://github.com/tonyke-bot",
      "followers_url": "https://api.github.com/users/tonyke-bot/followers",
      "following_url": "https://api.github.com/users/tonyke-bot/following{/other_user}",
      "gists_url": "https://api.github.com/users/tonyke-bot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tonyke-bot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tonyke-bot/subscriptions",
      "organizations_url": "https://api.github.com/users/tonyke-bot/orgs",
      "repos_url": "https://api.github.com/users/tonyke-bot/repos",
      "events_url": "https://api.github.com/users/tonyke-bot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tonyke-bot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-13T02:26:45Z",
    "updated_at": "2023-04-13T02:26:45Z",
    "author_association": "NONE",
    "body": "Seems like solc just flattens the Field returns from auto-generated storage getter. \r\n\r\nThis works with @0xAWM 's min-repro.\r\n```solidity\r\n(uint256 id, string memory name) = storageContract.store(0); // This works\r\n```\r\n\r\nI noticed this behavior some time ago but thought it's a feature instead of a bug 😄",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1506236057/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1506296058",
    "html_url": "https://github.com/ethereum/solidity/issues/14114#issuecomment-1506296058",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14114",
    "id": 1506296058,
    "node_id": "IC_kwDOAm_5kc5ZyED6",
    "user": {
      "login": "nishuzumi",
      "id": 13927203,
      "node_id": "MDQ6VXNlcjEzOTI3MjAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/13927203?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nishuzumi",
      "html_url": "https://github.com/nishuzumi",
      "followers_url": "https://api.github.com/users/nishuzumi/followers",
      "following_url": "https://api.github.com/users/nishuzumi/following{/other_user}",
      "gists_url": "https://api.github.com/users/nishuzumi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nishuzumi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nishuzumi/subscriptions",
      "organizations_url": "https://api.github.com/users/nishuzumi/orgs",
      "repos_url": "https://api.github.com/users/nishuzumi/repos",
      "events_url": "https://api.github.com/users/nishuzumi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nishuzumi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-13T03:47:59Z",
    "updated_at": "2023-04-13T03:50:03Z",
    "author_association": "NONE",
    "body": "> ```solidity\r\n> // SPDX-License-Identifier: UNLICENSED\r\n> pragma solidity ^0.8.13;\r\n> \r\n> contract Storage {\r\n>     struct Filed {\r\n>         uint256 id;\r\n>         string name;\r\n>     }\r\n> \r\n>     mapping(uint256 => Filed) public store;\r\n> \r\n>     function storeOK(uint256 _id) external view returns (Filed memory) {\r\n>         return store[_id];\r\n>     }\r\n> }\r\n> \r\n> contract Query {\r\n>     Storage public storageContract;\r\n> \r\n>     constructor() {\r\n>         storageContract = new Storage();\r\n>     }\r\n> \r\n>     function query() public view {\r\n>         Storage.Filed memory errData = storageContract.store(0); // It will trigger an error from the compiler.\r\n>         Storage.Filed memory data = storageContract.storeOK(0); // fine\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> ```\r\n> TypeError: Different number of components on the left hand side (1) than on the right hand side (2).\r\n>   --> box.sol:25:9:\r\n>    |\r\n> 25 |         Storage.Filed memory errData = storageContract.store(0);\r\n>    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n> \r\n> TypeError: Type uint256 is not implicitly convertible to expected type struct Storage.Filed memory.\r\n>   --> box.sol:25:9:\r\n>    |\r\n> 25 |         Storage.Filed memory errData = storageContract.store(0);\r\n>    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n> ```\r\n\r\nAny best practice code tells us not to directly import contracts but to interface.\r\nSecond, this code works fine in a new case.\r\n```\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStorage{\r\n    struct Filed{\r\n        uint id;\r\n        uint name;\r\n    }\r\n}\r\n\r\ncontract Storage is IStorage {\r\n    mapping(uint256 => Filed) public store;\r\n\r\n    constructor(){\r\n        store[1] = Filed(1,1);\r\n        store[0] = Filed(0,2);\r\n        store[2] = Filed(3,4);\r\n    }\r\n}\r\n\r\ninterface IStorageExtra is IStorage{\r\n    function store(uint id) external view returns(Filed memory);\r\n}\r\n\r\ncontract Query {\r\n    IStorageExtra public storageContract;\r\n    constructor(){\r\n        storageContract = IStorageExtra(address(new Storage()));\r\n    }\r\n\r\n    function query() public view returns(Storage.Filed[] memory){\r\n        uint max = 2;\r\n        Storage.Filed[] memory data = new Storage.Filed[](max);\r\n        for(uint i = 0; i < max ;i++){\r\n            data[i] = storageContract.store(i);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    function query2() public view returns(Storage.Filed[] memory){\r\n        Storage.Filed[] memory data = new Storage.Filed[](1);\r\n        data[0] = storageContract.store(2);\r\n        return data;\r\n    }\r\n\r\n    function query3() public view returns(Storage.Filed memory){\r\n        Storage.Filed memory data = storageContract.store(2);\r\n        return data;\r\n    }\r\n\r\n\r\n    function query4OK() public view returns(Storage.Filed memory){\r\n        Storage.Filed memory data = storageContract.store(0);\r\n        return data;\r\n    }\r\n\r\n    function query5OK() public view returns(Storage.Filed[] memory){\r\n        uint max = 1;\r\n        Storage.Filed[] memory data = new Storage.Filed[](max);\r\n        for(uint i = 0; i < max ;i++){\r\n            data[i] = storageContract.store(i);\r\n        }\r\n        return data;\r\n    }\r\n}\r\n```\r\nNow, all query is working well. @THaGKI9 @0xAWM ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1506296058/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1506840013",
    "html_url": "https://github.com/ethereum/solidity/issues/14114#issuecomment-1506840013",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/14114",
    "id": 1506840013,
    "node_id": "IC_kwDOAm_5kc5Z0I3N",
    "user": {
      "login": "r0qs",
      "id": 457348,
      "node_id": "MDQ6VXNlcjQ1NzM0OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/457348?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/r0qs",
      "html_url": "https://github.com/r0qs",
      "followers_url": "https://api.github.com/users/r0qs/followers",
      "following_url": "https://api.github.com/users/r0qs/following{/other_user}",
      "gists_url": "https://api.github.com/users/r0qs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/r0qs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/r0qs/subscriptions",
      "organizations_url": "https://api.github.com/users/r0qs/orgs",
      "repos_url": "https://api.github.com/users/r0qs/repos",
      "events_url": "https://api.github.com/users/r0qs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/r0qs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-04-13T11:57:22Z",
    "updated_at": "2023-04-13T14:19:43Z",
    "author_association": "MEMBER",
    "body": "Hi @nishuzumi if I get correctly the main issue here, the problem is that the generated public getter returns the members of the struct as tuple instead of returning the struct itself. This is a know long-standing issue that is currently kept for compatibility reasons. Please see these comments here: https://github.com/ethereum/solidity/issues/6337#issuecomment-475170052 and https://github.com/ethereum/solidity/issues/14106#issuecomment-1503060644 for more information.\r\n\r\nWe don't have concrete plans to add support to it though. But we may consider it for the `0.9.0` release: https://github.com/ethereum/solidity/issues/6337#issuecomment-1140000320\r\n\r\nIn case you need to return the struct for your use case, you will need to define your own getter for `store` as in the example posted by @0xAWM: https://github.com/ethereum/solidity/issues/14114#issuecomment-1506226071.\r\n\r\nSo for now, I'm closing this issue. Please, feel free to reopen in case I misunderstood the problem and there is anything else to add.\r\n\r\nAlso, thanks @THaGKI9 and @0xAWM for the constructive discussions and examples :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/1506840013/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
