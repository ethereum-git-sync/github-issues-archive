{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/6231",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/6231/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/6231/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/6231/events",
  "html_url": "https://github.com/ethereum/solidity/issues/6231",
  "id": 418691029,
  "node_id": "MDU6SXNzdWU0MTg2OTEwMjk=",
  "number": 6231,
  "title": "Stack too deep with --optimize-yul + array of dynamic struct",
  "user": {
    "login": "AtkinsChang",
    "id": 5193600,
    "node_id": "MDQ6VXNlcjUxOTM2MDA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5193600?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AtkinsChang",
    "html_url": "https://github.com/AtkinsChang",
    "followers_url": "https://api.github.com/users/AtkinsChang/followers",
    "following_url": "https://api.github.com/users/AtkinsChang/following{/other_user}",
    "gists_url": "https://api.github.com/users/AtkinsChang/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AtkinsChang/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AtkinsChang/subscriptions",
    "organizations_url": "https://api.github.com/users/AtkinsChang/orgs",
    "repos_url": "https://api.github.com/users/AtkinsChang/repos",
    "events_url": "https://api.github.com/users/AtkinsChang/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AtkinsChang/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 249074435,
      "node_id": "MDU6TGFiZWwyNDkwNzQ0MzU=",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/bug%20:bug:",
      "name": "bug :bug:",
      "color": "fc1313",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-03-08T08:51:28Z",
  "updated_at": "2019-03-20T15:06:20Z",
  "closed_at": "2019-03-20T15:06:20Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Description\r\nfunction with only one array of dynamic struct (struct with dynamic type)  is fine\r\nbut with array of dynamic struct and extra parameter is unable to be compiled with `--optimize-yul`.\r\n \r\n## Environment\r\n\r\n- Compiler version: `0.5.5+commit.47a71e8f.Linux.clang`\r\n- Target EVM version: `petersburg`\r\n- Operating system: `Linux`\r\n\r\n## Steps to Reproduce\r\n### Code `test.sol`\r\n```\r\npragma solidity ^0.5.5;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Reproduce {\r\n  struct Struct {\r\n    bytes _any_dynamic_type;\r\n  }\r\n\r\n  // this is ok\r\n  // function foo(Struct[] memory a) public {}\r\n\r\n  // error\r\n  function bar(Struct[] memory a, address b) public {}\r\n}\r\n```\r\n### Compile Procedure\r\n```\r\nsolc --optimize-yul test.sol\r\n```\r\n### Output\r\n```\r\nInternal compiler error during compilation:\r\n/tmp/nix-build-solc-0.5.5.drv-0/source/libyul/backends/evm/AsmCodeGen.cpp(208): Throw in function static void yul::CodeGenerator::assemble(const yul::Block &, yul::AsmAnalysisInfo &, eth::Assembly &, langutil::EVMVersion, const yul::ExternalIdentifierAccess &, bool, bool)\r\nDynamic exception type: boost::wrapexcept<langutil::InternalCompilerError>\r\nstd::exception::what: Stack too deep when compiling inline assembly: Variable dataEnd is 1 slot(s) too deep inside the stack.\r\n[dev::tag_comment*] = Stack too deep when compiling inline assembly: Variable dataEnd is 1 slot(s) too deep inside the stack.\r\n```",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/6231/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/6231/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472265381",
    "html_url": "https://github.com/ethereum/solidity/issues/6231#issuecomment-472265381",
    "issue_url": "https://api.github.com/repos/ethereum/solidity/issues/6231",
    "id": 472265381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjI2NTM4MQ==",
    "user": {
      "login": "AtkinsChang",
      "id": 5193600,
      "node_id": "MDQ6VXNlcjUxOTM2MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5193600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AtkinsChang",
      "html_url": "https://github.com/AtkinsChang",
      "followers_url": "https://api.github.com/users/AtkinsChang/followers",
      "following_url": "https://api.github.com/users/AtkinsChang/following{/other_user}",
      "gists_url": "https://api.github.com/users/AtkinsChang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AtkinsChang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AtkinsChang/subscriptions",
      "organizations_url": "https://api.github.com/users/AtkinsChang/orgs",
      "repos_url": "https://api.github.com/users/AtkinsChang/repos",
      "events_url": "https://api.github.com/users/AtkinsChang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AtkinsChang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T03:27:34Z",
    "updated_at": "2019-03-13T03:28:03Z",
    "author_association": "NONE",
    "body": "### ASM Output\r\n```\r\n{\r\n    function abi_decode_t_address(offset, end) -> value\r\n    {\r\n        value := cleanup_revert_t_address(calldataload(offset))\r\n    }\r\n    function abi_decode_t_array$_t_struct$_Struct_$5_memory_$dyn_memory_ptr(offset, end) -> array\r\n    {\r\n        if iszero(slt(add(offset, 0x1f), end))\r\n        {\r\n            revert(0, 0)\r\n        }\r\n        let length := calldataload(offset)\r\n        array := allocateMemory(array_allocation_size_t_array$_t_struct$_Struct_$5_memory_$dyn_memory_ptr(length))\r\n        let dst := array\r\n        mstore(array, length)\r\n        offset := add(offset, 0x20)\r\n        dst := add(dst, 0x20)\r\n        let src := offset\r\n        for {\r\n            let i := 0\r\n        }\r\n        lt(i, length)\r\n        {\r\n            i := add(i, 1)\r\n        }\r\n        {\r\n            let elementPos := add(offset, calldataload(src))\r\n            mstore(dst, abi_decode_t_struct$_Struct_$5_memory(elementPos, end))\r\n            dst := add(dst, 0x20)\r\n            src := add(src, 0x20)\r\n        }\r\n    }\r\n    function abi_decode_t_bytes_memory(offset, end) -> array\r\n    {\r\n        if iszero(slt(add(offset, 0x1f), end))\r\n        {\r\n            revert(0, 0)\r\n        }\r\n        let length := calldataload(offset)\r\n        array := allocateMemory(array_allocation_size_t_bytes_memory(length))\r\n        mstore(array, length)\r\n        let src := add(offset, 0x20)\r\n        let dst := add(array, 0x20)\r\n        if gt(add(src, length), end)\r\n        {\r\n            revert(0, 0)\r\n        }\r\n        copy_calldata_to_memory(src, dst, length)\r\n    }\r\n    function abi_decode_t_struct$_Struct_$5_memory(headStart, end) -> value\r\n    {\r\n        if slt(sub(end, headStart), 0x20)\r\n        {\r\n            revert(0, 0)\r\n        }\r\n        value := allocateMemory(0x20)\r\n        {\r\n            let offset := calldataload(add(headStart, 0))\r\n            if gt(offset, 0xffffffffffffffff)\r\n            {\r\n                revert(0, 0)\r\n            }\r\n            mstore(add(value, 0x0), abi_decode_t_bytes_memory(add(headStart, offset), end))\r\n        }\r\n    }\r\n    function abi_decode_tuple_t_array$_t_struct$_Struct_$5_memory_$dyn_memory_ptrt_address(headStart, dataEnd) -> value0, value1\r\n    {\r\n        if slt(sub(dataEnd, headStart), 64)\r\n        {\r\n            revert(0, 0)\r\n        }\r\n        {\r\n            let offset := calldataload(add(headStart, 0))\r\n            if gt(offset, 0xffffffffffffffff)\r\n            {\r\n                revert(0, 0)\r\n            }\r\n            value0 := abi_decode_t_array$_t_struct$_Struct_$5_memory_$dyn_memory_ptr(add(headStart, offset), dataEnd)\r\n        }\r\n        {\r\n            let offset := 32\r\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\r\n        }\r\n    }\r\n    function allocateMemory(size) -> memPtr\r\n    {\r\n        memPtr := mload(64)\r\n        let newFreePtr := add(memPtr, size)\r\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\r\n        {\r\n            revert(0, 0)\r\n        }\r\n        mstore(64, newFreePtr)\r\n    }\r\n    function array_allocation_size_t_array$_t_struct$_Struct_$5_memory_$dyn_memory_ptr(length) -> size\r\n    {\r\n        if gt(length, 0xffffffffffffffff)\r\n        {\r\n            revert(0, 0)\r\n        }\r\n        size := mul(length, 0x20)\r\n        size := add(size, 0x20)\r\n    }\r\n    function array_allocation_size_t_bytes_memory(length) -> size\r\n    {\r\n        if gt(length, 0xffffffffffffffff)\r\n        {\r\n            revert(0, 0)\r\n        }\r\n        size := and(add(length, 0x1f), not(0x1f))\r\n        size := add(size, 0x20)\r\n    }\r\n    function cleanup_revert_t_address(value) -> cleaned\r\n    {\r\n        cleaned := cleanup_revert_t_uint160(value)\r\n    }\r\n    function cleanup_revert_t_uint160(value) -> cleaned\r\n    {\r\n        cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n    }\r\n    function copy_calldata_to_memory(src, dst, length)\r\n    {\r\n        calldatacopy(dst, src, length)\r\n        mstore(add(dst, length), 0)\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/solidity/issues/comments/472265381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
