{
  "url": "https://api.github.com/repos/ethereum/solidity/issues/14237",
  "repository_url": "https://api.github.com/repos/ethereum/solidity",
  "labels_url": "https://api.github.com/repos/ethereum/solidity/issues/14237/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/solidity/issues/14237/comments",
  "events_url": "https://api.github.com/repos/ethereum/solidity/issues/14237/events",
  "html_url": "https://github.com/ethereum/solidity/issues/14237",
  "id": 1713585051,
  "node_id": "I_kwDOAm_5kc5mIzub",
  "number": 14237,
  "title": "[experimental] Postfix types.",
  "user": {
    "login": "ekpyron",
    "id": 1347491,
    "node_id": "MDQ6VXNlcjEzNDc0OTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1347491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ekpyron",
    "html_url": "https://github.com/ekpyron",
    "followers_url": "https://api.github.com/users/ekpyron/followers",
    "following_url": "https://api.github.com/users/ekpyron/following{/other_user}",
    "gists_url": "https://api.github.com/users/ekpyron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ekpyron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ekpyron/subscriptions",
    "organizations_url": "https://api.github.com/users/ekpyron/orgs",
    "repos_url": "https://api.github.com/users/ekpyron/repos",
    "events_url": "https://api.github.com/users/ekpyron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ekpyron/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4372329032,
      "node_id": "LA_kwDOAm_5kc8AAAABBJxySA",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/selected%20for%20development",
      "name": "selected for development",
      "color": "ff8e00",
      "default": false,
      "description": "It's on our short-term development"
    },
    {
      "id": 5513089130,
      "node_id": "LA_kwDOAm_5kc8AAAABSJsQag",
      "url": "https://api.github.com/repos/ethereum/solidity/labels/experimental",
      "name": "experimental",
      "color": "E8A072",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2023-05-17T10:21:36Z",
  "updated_at": "2023-06-06T16:40:25Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Enable postfix typing under ``pragma experimental solidity``.\r\n\r\nTasks:\r\n\r\n- [ ] Allow variable declarations of the form ``let x : Type`` and ``let x : Type = Expression`` in experimental mode:\r\n       - Store the fact that the declaration is postfix in the VariableDeclaration AST node\r\n       - Type checking should so far be fully unaffected.\r\n       - Add a new section of syntax tests for experimental solidity and introduce a minimal (!) set of tests for this (proper testing we can introduce when things stabilize - we *will* get rid of most of the builtin types in experimental solidity, so it does *not* make sense to cover more than a single example case for each kind of expression).\r\n\r\nNote: in the first step *always require a type* (that way we can leave type checking unchanged for now) and still retain parsing prefix types. Try to keep a nice separation between experimental and non-experimental modes where possible, but don't go overboard with it.\r\n\r\n- [ ] Allow declarations of function arguments and return values as ``function f(x : a) returns (y : a)``\r\n- [ ] Disallow parsing prefix types (i.e. ``uint x;`` will become invalid);\r\n- [ ] always parse index-access-paths as expressions, never as types.\r\n       - currently ``S[1][2][3];`` cannot be disambiguated between an index access to an array variable called ``S`` and an array type of a struct named ``S`` - which choice is correct is context-dependant (i.e. is it ``struct S {...}`` or ``uint[][][] S;``). With postfix typing, an expression like this can *always* directly be parsed as nested index access, since statements cannot start with types anymore.\r\n\r\nAs a subsequent step:\r\n- [ ] Allow omitting types (plain ``let x;``) - we will only do this while or after we switch out the type checker, since the current one won't be able to deal with untyped variables.\r\n\r\nNote: this is a task for experimental solidity, so coarse reviews, fast merging. Do the tasks step-wise and merge in small steps.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/solidity/issues/14237/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/solidity/issues/14237/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[

]
