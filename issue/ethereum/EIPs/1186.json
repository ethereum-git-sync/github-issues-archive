{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1186",
  "id": 336652213,
  "node_id": "MDU6SXNzdWUzMzY2NTIyMTM=",
  "number": 1186,
  "title": "EIP-1186: RPC-Method to get Merkle Proofs - eth_getProof ",
  "user": {
    "login": "simon-jentzsch",
    "id": 10868622,
    "node_id": "MDQ6VXNlcjEwODY4NjIy",
    "avatar_url": "https://avatars.githubusercontent.com/u/10868622?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simon-jentzsch",
    "html_url": "https://github.com/simon-jentzsch",
    "followers_url": "https://api.github.com/users/simon-jentzsch/followers",
    "following_url": "https://api.github.com/users/simon-jentzsch/following{/other_user}",
    "gists_url": "https://api.github.com/users/simon-jentzsch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simon-jentzsch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simon-jentzsch/subscriptions",
    "organizations_url": "https://api.github.com/users/simon-jentzsch/orgs",
    "repos_url": "https://api.github.com/users/simon-jentzsch/repos",
    "events_url": "https://api.github.com/users/simon-jentzsch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simon-jentzsch/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 32,
  "created_at": "2018-06-28T14:43:44Z",
  "updated_at": "2021-11-30T12:10:14Z",
  "closed_at": "2021-11-22T05:56:05Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\neip: 1186\r\ntitle: eth_getProof \r\nauthor: Simon Jentzsch <simon.jentzsch@slock.it>, Christoph Jentzsch <christoph.jentzsch@slock.it>\r\ndiscussions-to: simon.jentzsch@slock.it\r\nstatus: Draft\r\ntype: Standards Track (Core, Networking, Interface, ERC)\r\ncategory : Interface\r\ncreated: 2018-06-24\r\n---\r\n\r\n<!--You can leave these HTML comments in your merged EIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new EIPs. Note that an EIP number will be assigned by an editor. When opening a pull request to submit your EIP, please use an abbreviated title in the filename, `eip-draft_title_abbrev.md`. The title should be 44 characters or less.-->\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\n\r\nOne of the great features of Ethereum is the fact, that you can verify all data of the state. But in order to allow verification of accounts outside the client, we need an additional function delivering us the required proof. These proofs are important to secure Layer2-Technologies.\r\n\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\n\r\nEthereum uses MerkleTrees to store the state of accounts and their storage. This allows verification of each value by simply creating a MerkleProof. But currently, the eth-Module in the RPC-Interface does not give you access to these proofs. This EIP suggests an additional RPC-Method, which creates MerkleProofs for Accounts and Storage-Values. \r\n\r\nCombined with a stateRoot (from the blockheader) it enables offline verification of any account or storage-value. This allows especially IOT-Devices or even mobile apps which are not able to run a light client to verify responses from an untrusted source only given a trusted blockhash.\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\n\r\nIn order to create a MerkleProof access to the full state db is required. The current RPC-Methods allow an application to access single values (`eth_getBalance`,`eth_getTransactionCount`,`eth_getStorageAt`,`eth_getCode`), but it is impossible to read the data needed for a  MerkleProof through the standard RPC-Interface. (There are implementations using leveldb and accessing the data via filesystems, but this can not be used for production systems since it requires the client to be stopped first - See https://github.com/zmitton/eth-proof) \r\n\r\nToday MerkleProofs are already used internally. For example, the [Light Client Protocol](https://github.com/zsfelfoldi/go-ethereum/wiki/Light-Ethereum-Subprotocol-%28LES%29#on-demand-data-retrieval) supports a function creating MerkleProof, which is used in order to verify the requested account or storage-data.\r\n\r\nOffering these already existing function through the RPC-Interface as well would enable Applications to store and send these proofs to devices which are not directly connected to the p2p-network and still are able to verify the data. This could be used to verify data in mobile applications or IOT-devices, which are currently only using a remote client.\r\n\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\n\r\nAs Part of the eth-Module, an additional Method called `eth_getProof` should be defined as follows:\r\n\r\n#### eth_getProof\r\n\r\nReturns the account- and storage-values of the specified account including the Merkle-proof.  \r\n\r\n##### Parameters\r\n\r\n1. `DATA`, 20 Bytes - address of the account.\r\n2. `ARRAY`, 32 Bytes - array of storage-keys which should be proofed and included. See [`eth_getStorageAt`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getstorageat)  \r\n3. `QUANTITY|TAG` - integer block number, or the string `\"latest\"` or `\"earliest\"`, see the [default block parameter](https://github.com/ethereum/wiki/wiki/JSON-RPC#the-default-block-parameter)\r\n\r\n##### Returns\r\n\r\n`Object` - A account object:\r\n\r\n  - `balance`: `QUANTITY` - the balance of the account. See [`eth_getBalance`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getbalance) \r\n  - `codeHash`: `DATA`, 32 Bytes - hash of the code of the account. For a simple Account without code it will return `\"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\"` \r\n  - `nonce`: `QUANTITY`, - nonce of the account. See [`eth_getTransactionCount`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gettransactioncount) \r\n  - `storageHash`: `DATA`, 32 Bytes - SHA3 of the StorageRoot. All storage will deliver a MerkleProof starting with this rootHash.\r\n  - `accountProof`: `ARRAY` - Array of rlp-serialized MerkleTree-Nodes, starting with the stateRoot-Node, following the path of the SHA3 (address) as key. \r\n  - `storageProof`: `ARRAY` - Array of storage-entries as requested. Each entry is a object with these properties:\r\n  \r\n      - `key`: `QUANTITY` - the requested storage key\r\n      - `value`: `QUANTITY` - the storage value\r\n      - `proof`: `ARRAY` - Array of rlp-serialized MerkleTree-Nodes, starting with the storageHash-Node, following the path of the SHA3 (key) as path. \r\n      \r\n\r\n##### Example\r\n\r\n\r\n```json\r\n{\r\n  \"id\": 1,\r\n  \"jsonrpc\": \"2.0\",\r\n  \"method\": \"eth_getProof\",\r\n  \"params\": [\r\n    \"0x7F0d15C7FAae65896648C8273B6d7E43f58Fa842\",\r\n    [  \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\" ],\r\n    \"latest\"\r\n  ]\r\n}\r\n```\r\n\r\nThe result will look like this:\r\n\r\n```json\r\n{\r\n  \"id\": 1,\r\n  \"jsonrpc\": \"2.0\",\r\n  \"result\": {\r\n    \"accountProof\": [\r\n      \"0xf90211a...0701bc80\",\r\n      \"0xf90211a...0d832380\",\r\n      \"0xf90211a...5fb20c80\",\r\n      \"0xf90211a...0675b80\",\r\n      \"0xf90151a0...ca08080\"\r\n    ],\r\n    \"balance\": \"0x0\",\r\n    \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\r\n    \"nonce\": \"0x0\",\r\n    \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n    \"storageProof\": [\r\n      {\r\n        \"key\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n        \"proof\": [\r\n          \"0xf90211a...0701bc80\",\r\n          \"0xf90211a...0d832380\"\r\n        ],\r\n        \"value\": \"0x1\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\n\r\nThis one Method actually returns 3 different important data points:\r\n\r\n1. The 4 fields of an account-object as specified in the yellow paper `[nonce, balance, storageHash, codeHash ]`, which allows storing a hash of the account-object in order to keep track of changes.\r\n2. The MerkleProof for the account starting with a stateRoot from the specified block.\r\n3. The MerkleProof for each requested storage entry starting with a storageHash from the account.\r\n\r\nCombining these in one Method allows the client to work very efficient since the required data are already fetched from the db.\r\n\r\n### Proofs for non existant values\r\n\r\nIn case an address or storage-value does not exist, the proof needs to provide enough data to verify this fact. This means the client needs to follow the path from the root node and deliver until the last matching node. If the last matching node is a branch, the proof value in the node must be an empty one. In case of leaf-type, it must be pointing to a different relative-path in order to proof that the requested path does not exist.\r\n\r\n### possible Changes to be discussed:\r\n\r\n- instead of providing the blocknumber maybe the blockhash would be better since it would allow proofs of uncles-states.\r\n- in order to reduce data, the account-object may only provide the `accountProof` and `storageProof`. The Fields `balance`, `nonce`, `storageHash` and `codeHash` could be taken from the last Node in the proof by deserializing it. \r\n\r\n## Backwards Compatibility\r\n<!--All EIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EIP must explain how the author proposes to deal with these incompatibilities. EIP submissions without a sufficient backwards compatibility treatise may be rejected outright.-->\r\n\r\nSince this only adds a new Method there are no issues with Backwards Compatibility.\r\n\r\n## Test Cases\r\n<!--Test cases for an implementation are mandatory for EIPs that are affecting consensus changes. Other EIPs can choose to include links to test cases if applicable.-->\r\n\r\n<TODO>Tests still need to be implemented, but the core function creating the proof already exists inside the clients and are well tested.\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\n\r\nWe implemented this function for:\r\n\r\n- [x] [parity](https://github.com/paritytech/parity/pull/9001) (Status: pending pull request) - [Docker](https://hub.docker.com/r/slockit/parity-in3/tags/)\r\n- [x] [geth](https://github.com/ethereum/go-ethereum/pull/17737) (Status: pending pull request) - [Docker](https://hub.docker.com/r/slockit/geth-in3/tags/)\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1186/reactions",
    "total_count": 16,
    "+1": 15,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401068099",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-401068099",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 401068099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTA2ODA5OQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T15:08:19Z",
    "updated_at": "2018-06-28T15:08:19Z",
    "author_association": "MEMBER",
    "body": "It feels like this should be paired with an `eth_verifyProof` method.  Getting a proof with no _easy_ way to verify it feels significantly less useful.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401068099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401161169",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-401161169",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 401161169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTE2MTE2OQ==",
    "user": {
      "login": "simon-jentzsch",
      "id": 10868622,
      "node_id": "MDQ6VXNlcjEwODY4NjIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10868622?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simon-jentzsch",
      "html_url": "https://github.com/simon-jentzsch",
      "followers_url": "https://api.github.com/users/simon-jentzsch/followers",
      "following_url": "https://api.github.com/users/simon-jentzsch/following{/other_user}",
      "gists_url": "https://api.github.com/users/simon-jentzsch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simon-jentzsch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simon-jentzsch/subscriptions",
      "organizations_url": "https://api.github.com/users/simon-jentzsch/orgs",
      "repos_url": "https://api.github.com/users/simon-jentzsch/repos",
      "events_url": "https://api.github.com/users/simon-jentzsch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simon-jentzsch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T20:21:42Z",
    "updated_at": "2018-06-28T21:15:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "a `eth_verifyProof` might be helpful, but not required since you can easily verify this inside you dapp. (or even outside).  , you just call `eth_getBlockBy...` and take the `stateRoot`. and then verify the proof.\r\n```js\r\nimport * as Trie from 'merkle-patricia-tree'\r\nimport * as util from 'ethereumjs-util'\r\n\r\nconst [block, account ] = await Promise.all([\r\n   // we need the blockheader to get the stateRoot \r\n  web3.eth.getBlockByNumber('latest',false),\r\n\r\n  // and we need the proof\r\n  web3.eth.getProof(address,[],'latest')\r\n])\r\n\r\n// this function simply verifies the proof by starting with the stateRoot from the header and hopefully end with the leaf-node containing the rlp-serialized value of the account\r\nTrie.verifyProof( block.stateRoot, util.sha3 ( address ), account.accountProof, (err, value) => {\r\n   if (err || !value.equals(util.rlp.encode(account.nonce,account.balance,account.storageHash, account.codeHash)))\r\n       console.log('proof failed :',err)\r\n   else \r\n       console.log('verified!')\r\n})\r\n```\r\n\r\nBut I think it would be a good idea to offer a function in the web3-library like:\r\n\r\n```js\r\nweb3.eth.verify.account( account,  blockHash )\r\nweb3.eth.verify.storage( account.storageProof, account.stateRoot )\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401161169/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401787172",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-401787172",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 401787172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTc4NzE3Mg==",
    "user": {
      "login": "5chdn",
      "id": 15729797,
      "node_id": "MDQ6VXNlcjE1NzI5Nzk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/15729797?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/5chdn",
      "html_url": "https://github.com/5chdn",
      "followers_url": "https://api.github.com/users/5chdn/followers",
      "following_url": "https://api.github.com/users/5chdn/following{/other_user}",
      "gists_url": "https://api.github.com/users/5chdn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/5chdn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/5chdn/subscriptions",
      "organizations_url": "https://api.github.com/users/5chdn/orgs",
      "repos_url": "https://api.github.com/users/5chdn/repos",
      "events_url": "https://api.github.com/users/5chdn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/5chdn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-02T12:25:28Z",
    "updated_at": "2018-07-02T12:25:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please create PR, not an issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401787172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423506997",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-423506997",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 423506997,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzUwNjk5Nw==",
    "user": {
      "login": "simon-jentzsch",
      "id": 10868622,
      "node_id": "MDQ6VXNlcjEwODY4NjIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10868622?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simon-jentzsch",
      "html_url": "https://github.com/simon-jentzsch",
      "followers_url": "https://api.github.com/users/simon-jentzsch/followers",
      "following_url": "https://api.github.com/users/simon-jentzsch/following{/other_user}",
      "gists_url": "https://api.github.com/users/simon-jentzsch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simon-jentzsch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simon-jentzsch/subscriptions",
      "organizations_url": "https://api.github.com/users/simon-jentzsch/orgs",
      "repos_url": "https://api.github.com/users/simon-jentzsch/repos",
      "events_url": "https://api.github.com/users/simon-jentzsch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simon-jentzsch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-21T11:57:32Z",
    "updated_at": "2018-09-21T11:57:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks, just created the PR",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423506997/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423721607",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-423721607",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 423721607,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzcyMTYwNw==",
    "user": {
      "login": "simon-jentzsch",
      "id": 10868622,
      "node_id": "MDQ6VXNlcjEwODY4NjIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10868622?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simon-jentzsch",
      "html_url": "https://github.com/simon-jentzsch",
      "followers_url": "https://api.github.com/users/simon-jentzsch/followers",
      "following_url": "https://api.github.com/users/simon-jentzsch/following{/other_user}",
      "gists_url": "https://api.github.com/users/simon-jentzsch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simon-jentzsch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simon-jentzsch/subscriptions",
      "organizations_url": "https://api.github.com/users/simon-jentzsch/orgs",
      "repos_url": "https://api.github.com/users/simon-jentzsch/repos",
      "events_url": "https://api.github.com/users/simon-jentzsch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simon-jentzsch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-22T06:43:12Z",
    "updated_at": "2018-09-22T06:43:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I also created an Reference-Implementation for geth now:\r\n\r\nPR:https://github.com/ethereum/go-ethereum/pull/17737 (Status: pending ) \r\nDocker: https://hub.docker.com/r/slockit/geth-in3/tags/\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423721607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/440403289",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-440403289",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 440403289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDQwMzI4OQ==",
    "user": {
      "login": "zmitton",
      "id": 6954889,
      "node_id": "MDQ6VXNlcjY5NTQ4ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6954889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmitton",
      "html_url": "https://github.com/zmitton",
      "followers_url": "https://api.github.com/users/zmitton/followers",
      "following_url": "https://api.github.com/users/zmitton/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmitton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmitton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmitton/subscriptions",
      "organizations_url": "https://api.github.com/users/zmitton/orgs",
      "repos_url": "https://api.github.com/users/zmitton/repos",
      "events_url": "https://api.github.com/users/zmitton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmitton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T19:36:25Z",
    "updated_at": "2018-11-20T19:36:25Z",
    "author_association": "NONE",
    "body": "@simon-jentzsch is it (inconveniently) true that the intermediary nodes to the other trees (i.e. transactions & receipts) are not stored in levelDB (geth/parity)? In my library I currently do multiple RPC calls for all the transactions of the particular block and re-create the tree locally.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/440403289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442525090",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-442525090",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 442525090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjUyNTA5MA==",
    "user": {
      "login": "zmitton",
      "id": 6954889,
      "node_id": "MDQ6VXNlcjY5NTQ4ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6954889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmitton",
      "html_url": "https://github.com/zmitton",
      "followers_url": "https://api.github.com/users/zmitton/followers",
      "following_url": "https://api.github.com/users/zmitton/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmitton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmitton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmitton/subscriptions",
      "organizations_url": "https://api.github.com/users/zmitton/orgs",
      "repos_url": "https://api.github.com/users/zmitton/repos",
      "events_url": "https://api.github.com/users/zmitton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmitton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T17:05:30Z",
    "updated_at": "2018-11-28T17:05:30Z",
    "author_association": "NONE",
    "body": "Seems like this is the case, so my library is still useful in building those proofs (and of course checking them).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442525090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/443101523",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-443101523",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 443101523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzEwMTUyMw==",
    "user": {
      "login": "simon-jentzsch",
      "id": 10868622,
      "node_id": "MDQ6VXNlcjEwODY4NjIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10868622?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/simon-jentzsch",
      "html_url": "https://github.com/simon-jentzsch",
      "followers_url": "https://api.github.com/users/simon-jentzsch/followers",
      "following_url": "https://api.github.com/users/simon-jentzsch/following{/other_user}",
      "gists_url": "https://api.github.com/users/simon-jentzsch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/simon-jentzsch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/simon-jentzsch/subscriptions",
      "organizations_url": "https://api.github.com/users/simon-jentzsch/orgs",
      "repos_url": "https://api.github.com/users/simon-jentzsch/repos",
      "events_url": "https://api.github.com/users/simon-jentzsch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/simon-jentzsch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T06:06:09Z",
    "updated_at": "2018-11-30T06:06:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@zmitton yes, the other tries like transactions and receipts are only created temporarly since all data are available in the block, but I agree this means getting a merkle proof for a transactrionReceipt means running at least a bulk-request to get each receipt and construct the tree.  (like here https://github.com/slockit/in3-server/blob/master/src/chains/proof.ts#L205 )\r\nBut at least these information are available. (I'm also thinking about caching these trees to optimize performance)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/443101523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/443990746",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-443990746",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 443990746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzk5MDc0Ng==",
    "user": {
      "login": "juan794",
      "id": 5441052,
      "node_id": "MDQ6VXNlcjU0NDEwNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5441052?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juan794",
      "html_url": "https://github.com/juan794",
      "followers_url": "https://api.github.com/users/juan794/followers",
      "following_url": "https://api.github.com/users/juan794/following{/other_user}",
      "gists_url": "https://api.github.com/users/juan794/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juan794/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juan794/subscriptions",
      "organizations_url": "https://api.github.com/users/juan794/orgs",
      "repos_url": "https://api.github.com/users/juan794/repos",
      "events_url": "https://api.github.com/users/juan794/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juan794/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T06:48:26Z",
    "updated_at": "2018-12-04T09:52:11Z",
    "author_association": "NONE",
    "body": "> a `eth_verifyProof` might be helpful, but not required since you can easily verify this inside you dapp. (or even outside). , you just call `eth_getBlockBy...` and take the `stateRoot`. and then verify the proof.\r\n> \r\n> ```js\r\n> import * as Trie from 'merkle-patricia-tree'\r\n> import * as util from 'ethereumjs-util'\r\n> \r\n> const [block, account ] = await Promise.all([\r\n>    // we need the blockheader to get the stateRoot \r\n>   web3.eth.getBlockByNumber('latest',false),\r\n> \r\n>   // and we need the proof\r\n>   web3.eth.getProof(address,[],'latest')\r\n> ])\r\n> \r\n> // this function simply verifies the proof by starting with the stateRoot from the header and hopefully end with the leaf-node containing the rlp-serialized value of the account\r\n> Trie.verifyProof( block.stateRoot, util.sha3 ( address ), account.accountProof, (err, value) => {\r\n>    if (err || !value.equals(util.rlp.encode(account.nonce,account.balance,account.storageHash, account.codeHash)))\r\n>        console.log('proof failed :',err)\r\n>    else \r\n>        console.log('verified!')\r\n> })\r\n> ```\r\n> \r\n> But I think it would be a good idea to offer a function in the web3-library like:\r\n> \r\n> ```js\r\n> web3.eth.verify.account( account,  blockHash )\r\n> web3.eth.verify.storage( account.storageProof, account.stateRoot )\r\n> ```\r\n\r\nI am not sure if it is an error or I am the only one experience it, but I think it is better to comment on it. \r\n\r\nI am testing an implementation that requires offline existence verification of accounts. RLP decoding of the *value* in **Trie.verifyProof**, following the example above, takes account's balance (smart contract's in this case) as a string data type when the value is 0x0 which makes the verification fail. When I deposit some Ethers, the smart contract's balance is taken as an integer data type and the verification works ok. I am using Geth 1.18, NodeJS 8.10, and Rinkeby testnet.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/443990746/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/444181000",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-444181000",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 444181000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDE4MTAwMA==",
    "user": {
      "login": "zmitton",
      "id": 6954889,
      "node_id": "MDQ6VXNlcjY5NTQ4ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6954889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmitton",
      "html_url": "https://github.com/zmitton",
      "followers_url": "https://api.github.com/users/zmitton/followers",
      "following_url": "https://api.github.com/users/zmitton/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmitton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmitton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmitton/subscriptions",
      "organizations_url": "https://api.github.com/users/zmitton/orgs",
      "repos_url": "https://api.github.com/users/zmitton/repos",
      "events_url": "https://api.github.com/users/zmitton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmitton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T17:15:58Z",
    "updated_at": "2018-12-04T17:16:17Z",
    "author_association": "NONE",
    "body": "@juan794  this doesn't sound like an issue with the EIP. From the above code I dont see RLP needing to be decoded but you might want to bring this up with the rlp repo or 'merkle-patricia-tree' (depending on your code which i havent seen)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/444181000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/444240075",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-444240075",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 444240075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDI0MDA3NQ==",
    "user": {
      "login": "juan794",
      "id": 5441052,
      "node_id": "MDQ6VXNlcjU0NDEwNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5441052?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juan794",
      "html_url": "https://github.com/juan794",
      "followers_url": "https://api.github.com/users/juan794/followers",
      "following_url": "https://api.github.com/users/juan794/following{/other_user}",
      "gists_url": "https://api.github.com/users/juan794/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juan794/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juan794/subscriptions",
      "organizations_url": "https://api.github.com/users/juan794/orgs",
      "repos_url": "https://api.github.com/users/juan794/repos",
      "events_url": "https://api.github.com/users/juan794/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juan794/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T20:09:15Z",
    "updated_at": "2018-12-04T20:10:46Z",
    "author_association": "NONE",
    "body": "Thanks @zmitton. I used RLP to understand why the verification was not working. I thought it is liked to this EIP because it is the contract's balance which makes the verification works straightforwardly as the example above, but you are right, it is closer to an RLP problem itself.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/444240075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/444587080",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-444587080",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 444587080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDU4NzA4MA==",
    "user": {
      "login": "zmitton",
      "id": 6954889,
      "node_id": "MDQ6VXNlcjY5NTQ4ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6954889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmitton",
      "html_url": "https://github.com/zmitton",
      "followers_url": "https://api.github.com/users/zmitton/followers",
      "following_url": "https://api.github.com/users/zmitton/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmitton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmitton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmitton/subscriptions",
      "organizations_url": "https://api.github.com/users/zmitton/orgs",
      "repos_url": "https://api.github.com/users/zmitton/repos",
      "events_url": "https://api.github.com/users/zmitton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmitton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-05T18:15:40Z",
    "updated_at": "2018-12-05T19:02:03Z",
    "author_association": "NONE",
    "body": "@juan794 I've seen this issue before. the problem is that the number `0` is represented in ethereum as `bytes<>` *not* `bytes<00>` so the RLP of it becomes `bytes<80>` and *not* `bytes<00>` (which would be the rlp of `bytes<00>` because rlp of anything single byte under 80 is itself). \r\n\r\nSo find out find out where the software could use updating but I bet you its not here. the return value of 0 or empty from RPC is generally been string \"0x0\" I believe and so it should probably keep this behavior. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/444587080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/473080755",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-473080755",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 473080755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzA4MDc1NQ==",
    "user": {
      "login": "davidmurdoch",
      "id": 187813,
      "node_id": "MDQ6VXNlcjE4NzgxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/187813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidmurdoch",
      "html_url": "https://github.com/davidmurdoch",
      "followers_url": "https://api.github.com/users/davidmurdoch/followers",
      "following_url": "https://api.github.com/users/davidmurdoch/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidmurdoch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidmurdoch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidmurdoch/subscriptions",
      "organizations_url": "https://api.github.com/users/davidmurdoch/orgs",
      "repos_url": "https://api.github.com/users/davidmurdoch/repos",
      "events_url": "https://api.github.com/users/davidmurdoch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidmurdoch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-14T21:56:25Z",
    "updated_at": "2019-03-14T21:56:25Z",
    "author_association": "NONE",
    "body": "> So find out find out where the software could use updating but I bet you its not here. the return value of 0 or empty from RPC is generally been string \"0x0\" I believe and so it should probably keep this behavior.\r\n\r\nIt depends on the data type returned by the RPC for the field in question. `0x0` is _always_ a _QUANTITY_ type and represents the number `0`. `0x00` is an invalid QUANTITY. The _DATA_ type allows for `0x` which represents an empty set, `bytes<>`. `0x00` is `bytes<00>`, an array with a single byte: `0`. `0x0000` is valid and different than `0x00` would represents `bytes<00, 00>`, an array of two bytes: `00` and `00`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/473080755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/605547639",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-605547639",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 605547639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTU0NzYzOQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-29T02:18:11Z",
    "updated_at": "2020-03-29T02:18:11Z",
    "author_association": "MEMBER",
    "body": "Any reason not to move this to final?  It is implemented in Geth, Parity, and Nethermind but Geth is currently behind `--jsonrpc-experimental` flag. Conversation has been dead for quite some time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/605547639/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/605548760",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-605548760",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 605548760,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTU0ODc2MA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-29T02:29:35Z",
    "updated_at": "2020-03-29T02:29:35Z",
    "author_association": "MEMBER",
    "body": "> \r\n> \r\n> a `eth_verifyProof` might be helpful, but not required since you can easily verify this inside you dapp. (or even outside). , you just call `eth_getBlockBy...` and take the `stateRoot`. and then verify the proof.\r\n> \r\n> ```js\r\n> import * as Trie from 'merkle-patricia-tree'\r\n> import * as util from 'ethereumjs-util'\r\n> \r\n> const [block, account ] = await Promise.all([\r\n>    // we need the blockheader to get the stateRoot \r\n>   web3.eth.getBlockByNumber('latest',false),\r\n> \r\n>   // and we need the proof\r\n>   web3.eth.getProof(address,[],'latest')\r\n> ])\r\n> \r\n> // this function simply verifies the proof by starting with the stateRoot from the header and hopefully end with the leaf-node containing the rlp-serialized value of the account\r\n> Trie.verifyProof( block.stateRoot, util.sha3 ( address ), account.accountProof, (err, value) => {\r\n>    if (err || !value.equals(util.rlp.encode(account.nonce,account.balance,account.storageHash, account.codeHash)))\r\n>        console.log('proof failed :',err)\r\n>    else \r\n>        console.log('verified!')\r\n> })\r\n> ```\r\n> \r\n> But I think it would be a good idea to offer a function in the web3-library like:\r\n> \r\n> ```js\r\n> web3.eth.verify.account( account,  blockHash )\r\n> web3.eth.verify.storage( account.storageProof, account.stateRoot )\r\n> ```\r\n\r\nI just realized that this \"simple example\" requires library for merkle proof validation that may not be readily available in all environments.  This example also doesn't appear to validate an actual storage proof, only the account proof.\r\n\r\nSo, I would like to re-assert my request that there be a JSON-RPC method for validating account and storage proofs.  I don't think it should hold up this from becoming final.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/605548760/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/607927551",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-607927551",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 607927551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzkyNzU1MQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-02T15:47:28Z",
    "updated_at": "2020-04-02T15:47:28Z",
    "author_association": "MEMBER",
    "body": "When trying to actually use this, I found it was missing a couple piece of information: the state root hash and the block number/hash.  If I run a query with `latest`, I am not provided with enough information to actually validate a proof against Ethereum, and because a block number is not returned I cannot lookup the block to get that data.\r\n\r\nWhile I *could* guess-and-check and probably get the data pretty quickly, this process is error prone (uncles) and unnecessary work since that information *is* available to the node at the time of generating the proof.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/607927551/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/718070994",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-718070994",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 718070994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODA3MDk5NA==",
    "user": {
      "login": "p4u",
      "id": 1075446,
      "node_id": "MDQ6VXNlcjEwNzU0NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1075446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p4u",
      "html_url": "https://github.com/p4u",
      "followers_url": "https://api.github.com/users/p4u/followers",
      "following_url": "https://api.github.com/users/p4u/following{/other_user}",
      "gists_url": "https://api.github.com/users/p4u/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p4u/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p4u/subscriptions",
      "organizations_url": "https://api.github.com/users/p4u/orgs",
      "repos_url": "https://api.github.com/users/p4u/repos",
      "events_url": "https://api.github.com/users/p4u/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p4u/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-28T16:56:29Z",
    "updated_at": "2020-10-28T16:57:44Z",
    "author_association": "NONE",
    "body": "Just in case someone needs to use EIP1186, we have implemented a Golang library for creating and verifying EIP1186 proofs: https://github.com/vocdoni/eth-storage-proof\r\n\r\nThanks @simon-jentzsch and everyone else for you work, this is an amazing technology that open the door for many offchain use cases of Ethereum.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/718070994/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/810997483",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-810997483",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 810997483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMDk5NzQ4Mw==",
    "user": {
      "login": "jochem-brouwer",
      "id": 29359032,
      "node_id": "MDQ6VXNlcjI5MzU5MDMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29359032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jochem-brouwer",
      "html_url": "https://github.com/jochem-brouwer",
      "followers_url": "https://api.github.com/users/jochem-brouwer/followers",
      "following_url": "https://api.github.com/users/jochem-brouwer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jochem-brouwer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jochem-brouwer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jochem-brouwer/subscriptions",
      "organizations_url": "https://api.github.com/users/jochem-brouwer/orgs",
      "repos_url": "https://api.github.com/users/jochem-brouwer/repos",
      "events_url": "https://api.github.com/users/jochem-brouwer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jochem-brouwer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-31T11:40:00Z",
    "updated_at": "2021-03-31T11:40:00Z",
    "author_association": "MEMBER",
    "body": "Just to verify here; the proof array always starts with the root hash. So it is not possible to create a proof where the proof has 0 items. (Except maybe if the trie is empty).\r\n\r\nWhat happens if I try to create a proof on an empty trie?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/810997483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814007602",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-814007602",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 814007602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDAwNzYwMg==",
    "user": {
      "login": "saurik",
      "id": 36743,
      "node_id": "MDQ6VXNlcjM2NzQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saurik",
      "html_url": "https://github.com/saurik",
      "followers_url": "https://api.github.com/users/saurik/followers",
      "following_url": "https://api.github.com/users/saurik/following{/other_user}",
      "gists_url": "https://api.github.com/users/saurik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saurik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saurik/subscriptions",
      "organizations_url": "https://api.github.com/users/saurik/orgs",
      "repos_url": "https://api.github.com/users/saurik/repos",
      "events_url": "https://api.github.com/users/saurik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saurik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-06T10:21:34Z",
    "updated_at": "2021-04-06T10:21:34Z",
    "author_association": "NONE",
    "body": "@jochem-brouwer If you create a proof of an empty trie--which is easy to do if you create a new contract and have it not store anything and then ask for a proof of anything in that storage--what you seem to get back is an empty proof array. For the algorithm I use to verify the proofs, this is actually very natural: I maintain the current hash being proved and then walk through each proof, replacing the hash being proved with the hash of the node I was provided in the proof. If I run out of path on a proof, then I can return the value stored at that entry. If I am forced down an incompatible path, I return 0. If I run out of proofs--which can happen at the root of the trie, or anywhere below--I verify that the hash is the hash of an empty trie node--an RLP encoded vector of length 0--and return 0.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814007602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814011476",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-814011476",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 814011476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDAxMTQ3Ng==",
    "user": {
      "login": "saurik",
      "id": 36743,
      "node_id": "MDQ6VXNlcjM2NzQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saurik",
      "html_url": "https://github.com/saurik",
      "followers_url": "https://api.github.com/users/saurik/followers",
      "following_url": "https://api.github.com/users/saurik/following{/other_user}",
      "gists_url": "https://api.github.com/users/saurik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saurik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saurik/subscriptions",
      "organizations_url": "https://api.github.com/users/saurik/orgs",
      "repos_url": "https://api.github.com/users/saurik/repos",
      "events_url": "https://api.github.com/users/saurik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saurik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-06T10:28:37Z",
    "updated_at": "2021-04-06T10:30:51Z",
    "author_association": "NONE",
    "body": "So, it isn't clear to me what the argument of \"storage keys\" is actually supposed to _be_: DATA, or QUANTITY? The document says \"32 byte\" (which maybe feels a bit like an implicit shout out to DATA); but then says \"see eth_getStorageAt\", which defines this argument as QUANTITY. The values in the reference implementation are passed to common.HexToHash, which doesn't particularly care. Sadly, _I_ care, because I'm seeing implementations in the wild that have opinions narrower than what geth is accepting, and it would be nice to have something definitive with respect to the intended format of the argument. Should other treat that as a true \"reference implementation\", or was that just some loose wording and that was merely an \"example implementation\" that happens to be liberal in what it accepts?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814011476/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814723067",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-814723067",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 814723067,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDcyMzA2Nw==",
    "user": {
      "login": "p4u",
      "id": 1075446,
      "node_id": "MDQ6VXNlcjEwNzU0NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1075446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p4u",
      "html_url": "https://github.com/p4u",
      "followers_url": "https://api.github.com/users/p4u/followers",
      "following_url": "https://api.github.com/users/p4u/following{/other_user}",
      "gists_url": "https://api.github.com/users/p4u/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p4u/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p4u/subscriptions",
      "organizations_url": "https://api.github.com/users/p4u/orgs",
      "repos_url": "https://api.github.com/users/p4u/repos",
      "events_url": "https://api.github.com/users/p4u/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p4u/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T08:38:33Z",
    "updated_at": "2021-04-07T08:38:33Z",
    "author_association": "NONE",
    "body": "Hey @saurik, not sure if I can help you but let me try.\r\n\r\nEach Contract have its own Merkle Tree. The \"storage key\" is the index/key where the DATA (value/leaf) is stored inside this Merkle Tree. It is a Keccack256 hash (so 32 bytes) and depends on the Solidity compiler. For a Map of balances (of an ERC20 smart contract) the position in the Trie is equal to Keccack256(holderAddress, indexSlot). Index slot (or position slot) usually depends on the position where the Map is declared on the ERC20 smart contract solidity source code. \r\n\r\nHere you can see an example on how the Storage Key is computed for a ERC20 like balance Map: https://github.com/vocdoni/storage-proofs-eth-go/blob/master/token/helpers.go#L15\r\n\r\nMaybe you might find this document interesting too (go to \"Storage Proofs\" section) https://www.notion.so/aragonorg/Introducing-Vocdoni-Bridge-cf7e73d38c4a45788358e9a1497cdf19\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814723067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814840715",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-814840715",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 814840715,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDg0MDcxNQ==",
    "user": {
      "login": "saurik",
      "id": 36743,
      "node_id": "MDQ6VXNlcjM2NzQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saurik",
      "html_url": "https://github.com/saurik",
      "followers_url": "https://api.github.com/users/saurik/followers",
      "following_url": "https://api.github.com/users/saurik/following{/other_user}",
      "gists_url": "https://api.github.com/users/saurik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saurik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saurik/subscriptions",
      "organizations_url": "https://api.github.com/users/saurik/orgs",
      "repos_url": "https://api.github.com/users/saurik/repos",
      "events_url": "https://api.github.com/users/saurik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saurik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T11:33:54Z",
    "updated_at": "2021-04-07T11:43:33Z",
    "author_association": "NONE",
    "body": "@p4u So, I understood all of that. I'm asking a question about how the API expects these arguments to be encoded. Let's say, for example, that I want to access the value that is at storage slot 0; this is the slot you would be accessing if you have a contract with a single field of type uint256 and then like, SSTORE into it. Is the argument supposed to be \"0x0\", or \"0x0000000000000000000000000000000000000000000000000000000000000000\", or even simply \"0\"? Ethereum JSON/RPC APIs typically are defined to have arguments that are of either type QUANTITY or DATA. This API is not really specifying the format... it is just \"ARRAY (of ?!?!?)\", and I'm running into discrepancies with third-party implementations from groups like xDai. What it says here is \"ARRAY 32-byte\"... is that implying ARRAY of _DATA_ 32-byte? It says, though, \"see eth_getStorageAt\", which firmly defines a storage key to be of type QUANTITY, _NOT DATA_. If it is type DATA (as maybe implied by the \"32-byte\"), then it would be \"0x0000000000000000000000000000000000000000000000000000000000000000\", but if it is type QUANTITY (as defined by eth_getStorageAt) then it would be \"0x0\". The \"reference implementation\" (a term which may have been thrown around loosely, but carries weight; the current implementation in geth is essentially identical) takes this string and passes it to common.HexToHash, which (near as I can tell, by implication of \"what works\") accepts _all three of these formats_, including \"0\". Is the intention that other third-party implementations accept all three of these formats? xDai's implementation only works correctly if you pass the DATA format; if you pass the QUANTITY format, it sometimes (as they have different versions--and I think even fundamentally different implementations--of their service behind a load balancer) rejects the value with \"invalid length 1, expected a 0x-prefixed hex string with length of 64\"... and it sometimes (this is \"epic\" ;P) succeeds but _returns a proof of the wrong storage slot_! So, I'm trying to figure out what the intention of the format for this argument was to be, so I can determine things like whether xDai's implementation--or that of any other chain I end up running into (RSK for example has their own implementation of a lot of these APIs in Java)--is compliant and what I should be making sure to generate when calling the API.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814840715/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814846067",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-814846067",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 814846067,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDg0NjA2Nw==",
    "user": {
      "login": "p4u",
      "id": 1075446,
      "node_id": "MDQ6VXNlcjEwNzU0NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1075446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p4u",
      "html_url": "https://github.com/p4u",
      "followers_url": "https://api.github.com/users/p4u/followers",
      "following_url": "https://api.github.com/users/p4u/following{/other_user}",
      "gists_url": "https://api.github.com/users/p4u/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p4u/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p4u/subscriptions",
      "organizations_url": "https://api.github.com/users/p4u/orgs",
      "repos_url": "https://api.github.com/users/p4u/repos",
      "events_url": "https://api.github.com/users/p4u/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p4u/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T11:42:12Z",
    "updated_at": "2021-04-07T11:42:12Z",
    "author_association": "NONE",
    "body": "`ARRAY, 32 Bytes - array of storage-keys which should be proofed and included. See eth_getStorageAt'`\r\n\r\nI would say that ARRAY expects a list of SHA256 keys, since they are Indexes of the Storage Merkle Patricia Tree. So it should be `0x0000000000000000000000000000000000000000000000000000000000000000` not `0x0` (which is NULL on RLP)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814846067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814852878",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-814852878",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 814852878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDg1Mjg3OA==",
    "user": {
      "login": "saurik",
      "id": 36743,
      "node_id": "MDQ6VXNlcjM2NzQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36743?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saurik",
      "html_url": "https://github.com/saurik",
      "followers_url": "https://api.github.com/users/saurik/followers",
      "following_url": "https://api.github.com/users/saurik/following{/other_user}",
      "gists_url": "https://api.github.com/users/saurik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saurik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saurik/subscriptions",
      "organizations_url": "https://api.github.com/users/saurik/orgs",
      "repos_url": "https://api.github.com/users/saurik/repos",
      "events_url": "https://api.github.com/users/saurik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saurik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T11:54:22Z",
    "updated_at": "2021-04-07T11:57:04Z",
    "author_association": "NONE",
    "body": "@p4u OK, and just to like, 100% verify: this is then _unlike_ eth_getStorageAt, which (of course) also takes \"indexes of the storage merkle patricia trie\" but is firmly defined--in both [EIP1474](https://eips.ethereum.org/EIPS/eip-1474) and on [eth.wiki](https://eth.wiki/json-rpc/API)--to take an argument of type \"quantity\"... which, in turn, \"MUST be expressed using the fewest possible hex digits per byte\", thereby making 0x000000... \"invalid\" when used with that API (at least by a compliant implementation: geth once again notably accepts this argument to eth_getStorageAt if passed in any format ;P).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814852878/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814906930",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-814906930",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 814906930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDkwNjkzMA==",
    "user": {
      "login": "p4u",
      "id": 1075446,
      "node_id": "MDQ6VXNlcjEwNzU0NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1075446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p4u",
      "html_url": "https://github.com/p4u",
      "followers_url": "https://api.github.com/users/p4u/followers",
      "following_url": "https://api.github.com/users/p4u/following{/other_user}",
      "gists_url": "https://api.github.com/users/p4u/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p4u/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p4u/subscriptions",
      "organizations_url": "https://api.github.com/users/p4u/orgs",
      "repos_url": "https://api.github.com/users/p4u/repos",
      "events_url": "https://api.github.com/users/p4u/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p4u/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T13:17:25Z",
    "updated_at": "2021-04-07T13:17:25Z",
    "author_association": "NONE",
    "body": "I cannot 100% verify, but I'm talking from my experience using `eth_getProof` and web3.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814906930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814947252",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-814947252",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 814947252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDk0NzI1Mg==",
    "user": {
      "login": "jochem-brouwer",
      "id": 29359032,
      "node_id": "MDQ6VXNlcjI5MzU5MDMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29359032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jochem-brouwer",
      "html_url": "https://github.com/jochem-brouwer",
      "followers_url": "https://api.github.com/users/jochem-brouwer/followers",
      "following_url": "https://api.github.com/users/jochem-brouwer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jochem-brouwer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jochem-brouwer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jochem-brouwer/subscriptions",
      "organizations_url": "https://api.github.com/users/jochem-brouwer/orgs",
      "repos_url": "https://api.github.com/users/jochem-brouwer/repos",
      "events_url": "https://api.github.com/users/jochem-brouwer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jochem-brouwer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-07T14:10:58Z",
    "updated_at": "2021-04-07T14:10:58Z",
    "author_association": "MEMBER",
    "body": "We might want to create a general EIP where we define these data types, and let other EIPs reference to this EIP so all EIPs point to the same terminology. (Same idea as the RFC which explains what MUST/SHOULD etc. means)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/814947252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/852435184",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-852435184",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 852435184,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjQzNTE4NA==",
    "user": {
      "login": "fedejinich",
      "id": 11727247,
      "node_id": "MDQ6VXNlcjExNzI3MjQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/11727247?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fedejinich",
      "html_url": "https://github.com/fedejinich",
      "followers_url": "https://api.github.com/users/fedejinich/followers",
      "following_url": "https://api.github.com/users/fedejinich/following{/other_user}",
      "gists_url": "https://api.github.com/users/fedejinich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fedejinich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fedejinich/subscriptions",
      "organizations_url": "https://api.github.com/users/fedejinich/orgs",
      "repos_url": "https://api.github.com/users/fedejinich/repos",
      "events_url": "https://api.github.com/users/fedejinich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fedejinich/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-01T20:48:33Z",
    "updated_at": "2021-06-01T20:48:33Z",
    "author_association": "NONE",
    "body": "> > a `eth_verifyProof` might be helpful, but not required since you can easily verify this inside you dapp. (or even outside). , you just call `eth_getBlockBy...` and take the `stateRoot`. and then verify the proof.\r\n> > ```js\r\n> > import * as Trie from 'merkle-patricia-tree'\r\n> > import * as util from 'ethereumjs-util'\r\n> > \r\n> > const [block, account ] = await Promise.all([\r\n> >    // we need the blockheader to get the stateRoot \r\n> >   web3.eth.getBlockByNumber('latest',false),\r\n> > \r\n> >   // and we need the proof\r\n> >   web3.eth.getProof(address,[],'latest')\r\n> > ])\r\n> > \r\n> > // this function simply verifies the proof by starting with the stateRoot from the header and hopefully end with the leaf-node containing the rlp-serialized value of the account\r\n> > Trie.verifyProof( block.stateRoot, util.sha3 ( address ), account.accountProof, (err, value) => {\r\n> >    if (err || !value.equals(util.rlp.encode(account.nonce,account.balance,account.storageHash, account.codeHash)))\r\n> >        console.log('proof failed :',err)\r\n> >    else \r\n> >        console.log('verified!')\r\n> > })\r\n> > ```\r\n> > \r\n> > \r\n> > But I think it would be a good idea to offer a function in the web3-library like:\r\n> > ```js\r\n> > web3.eth.verify.account( account,  blockHash )\r\n> > web3.eth.verify.storage( account.storageProof, account.stateRoot )\r\n> > ```\r\n> \r\n> I just realized that this \"simple example\" requires library for merkle proof validation that may not be readily available in all environments. This example also doesn't appear to validate an actual storage proof, only the account proof.\r\n> \r\n> So, I would like to re-assert my request that there be a JSON-RPC method for validating account and storage proofs. I don't think it should hold up this from becoming final.\r\n\r\nDon't you think thats kind of controversial? I mean, there might be some cases where you are using `eth_getProof` because you don't trust the source, so why would you trust the response of `eth_verifyProof`? Maybe I'm missing something",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/852435184/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/872473867",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-872473867",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 872473867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjQ3Mzg2Nw==",
    "user": {
      "login": "p4u",
      "id": 1075446,
      "node_id": "MDQ6VXNlcjEwNzU0NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1075446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p4u",
      "html_url": "https://github.com/p4u",
      "followers_url": "https://api.github.com/users/p4u/followers",
      "following_url": "https://api.github.com/users/p4u/following{/other_user}",
      "gists_url": "https://api.github.com/users/p4u/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p4u/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p4u/subscriptions",
      "organizations_url": "https://api.github.com/users/p4u/orgs",
      "repos_url": "https://api.github.com/users/p4u/repos",
      "events_url": "https://api.github.com/users/p4u/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p4u/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-01T18:51:29Z",
    "updated_at": "2021-07-01T18:51:29Z",
    "author_association": "NONE",
    "body": "I'm trying to add support for proofs of non existence in our implementation here: https://github.com/vocdoni/storage-proofs-eth-go/blob/master/ethstorageproof/ethstorageproof.go\r\n\r\nAccording the original text from @simon-jentzsch \r\n\r\n>Proofs for non existant values\r\nIn case an address or storage-value does not exist, the proof needs to provide enough data to verify this fact. This means the client needs to follow the path from the root node and deliver until the last matching node. If the last matching node is a branch, the proof value in the node must be an empty one. In case of leaf-type, it must be pointing to a different relative-path in order to proof that the requested path does not exist.\r\n\r\nThere are two possibilities. The first one (branch) is clear, I added it here: https://github.com/vocdoni/storage-proofs-eth-go/blob/master/ethstorageproof/ethstorageproof.go#L150\r\n\r\nBut I don't understand the leaf-type case, can someone help?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/872473867/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/975150095",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-975150095",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 975150095,
    "node_id": "IC_kwDOAq426M46H5wP",
    "user": {
      "login": "plasticalligator",
      "id": 16845709,
      "node_id": "MDQ6VXNlcjE2ODQ1NzA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16845709?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plasticalligator",
      "html_url": "https://github.com/plasticalligator",
      "followers_url": "https://api.github.com/users/plasticalligator/followers",
      "following_url": "https://api.github.com/users/plasticalligator/following{/other_user}",
      "gists_url": "https://api.github.com/users/plasticalligator/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plasticalligator/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plasticalligator/subscriptions",
      "organizations_url": "https://api.github.com/users/plasticalligator/orgs",
      "repos_url": "https://api.github.com/users/plasticalligator/repos",
      "events_url": "https://api.github.com/users/plasticalligator/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plasticalligator/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T05:50:38Z",
    "updated_at": "2021-11-22T05:50:38Z",
    "author_association": "NONE",
    "body": "This is still \"todo\"? Ethereum has had so many years to get it's act together that I can't comprehend why people are putting any money into a team that can't even cover the most basic functionality needed to develop anything meaningfully useful.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/975150095/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/975152292",
    "html_url": "https://github.com/ethereum/EIPs/issues/1186#issuecomment-975152292",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1186",
    "id": 975152292,
    "node_id": "IC_kwDOAq426M46H6Sk",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T05:56:05Z",
    "updated_at": "2021-11-22T05:56:05Z",
    "author_association": "MEMBER",
    "body": "API specs are now maintained at https://github.com/ethereum/execution-apis, not in the EIPs repository.  I believe all clients have implemented `eth_getProof`, but it doesn't appear anyone has added it to the API spec yet.  It would be great for someone to do so!\r\n\r\nI'm going to close this issue since this repository isn't the right place for it anymore.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/975152292/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
