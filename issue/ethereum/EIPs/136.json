{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/136/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/136/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/136/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/136",
  "id": 167347799,
  "node_id": "MDU6SXNzdWUxNjczNDc3OTk=",
  "number": 136,
  "title": "EIP RPC errors",
  "user": {
    "login": "bas-vk",
    "id": 4280775,
    "node_id": "MDQ6VXNlcjQyODA3NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4280775?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bas-vk",
    "html_url": "https://github.com/bas-vk",
    "followers_url": "https://api.github.com/users/bas-vk/followers",
    "following_url": "https://api.github.com/users/bas-vk/following{/other_user}",
    "gists_url": "https://api.github.com/users/bas-vk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bas-vk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bas-vk/subscriptions",
    "organizations_url": "https://api.github.com/users/bas-vk/orgs",
    "repos_url": "https://api.github.com/users/bas-vk/repos",
    "events_url": "https://api.github.com/users/bas-vk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bas-vk/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2016-07-25T11:48:52Z",
  "updated_at": "2019-03-07T13:48:50Z",
  "closed_at": "2019-03-07T13:48:50Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Problem\n\nThe [RPC specification](https://github.com/ethereum/wiki/wiki/JSON-RPC) implements a subset of the [JSON-RPC](http://www.jsonrpc.org/specification) specification. It defines the available RPC methods together with in- and outputs and serialisation format. It however doesn't specify anything about the errors these methods can return. As a result implementations return different errors which makes it hard for DApp developers to act appropriately. Another problem is that currently there are no well defined errors codes. This causes some clients (e.g. Mist) to do string matching to determine what happened. This is brittle and not generic.\n# Proposal\n\nDefine a standard for Ethereum JSON-RPC errors. One of the problems is finding the correct balans between informing a DApp what happend and being not too specific. Being too specific will make it hard to become fully complient with the specification and would make DApp's more complicated. Being too generic DApps' won't be able to determine what happened.\n\nThis problem is tackled by introducing the concept of an error category and allow a node to supply optional extra information about an error. This allows a DApp to get a general understanding what went wrong by looking at the category error code. It also allow a node to provide additional information about an error which the DApp can decide to use.\n\nThis proposal contains 2 parts. First it describes how the errors are defined. The second part describes a list with standardized error categories and detailed error messages.\n## Error structure\n\nJSON-RPC 2.0 has a [section](http://www.jsonrpc.org/specification#error_object) dedicated how errors are defined. The `code` field will be used for an error category. This field is mandatory and used by DApp's to get a general understanding what happend. Together with the `code` field the `message` field is filled with a brief description about the category. See for more information about available categories and their description the next section.\n\nThe `data` field is an optional field. Nodes can decide to supply additonal information through this field. If a node provides detailed information the data field must be an array of objects with the following fields:\n\n| field | type | mandatory |\n| --- | --- | --- |\n| code | integer | yes |\n| description | string | no |\n\nBy using this approach DApp's can get a general understanding what happend through the `code` field. In most cases this is sufficient. It also allow nodes to supply additional information when available.\n### Error categories\n\nThe JSON-RPC 2.0 specification defines the range -32000 to -32099 for application specific errors.\n\n| code | category | meaning |\n| --- | --- | --- |\n| -32000 | INVALID_VALUE | parameter contains invalid value |\n| -32001 | NOT_FOUND | requested resource not found |\n| -32002 | UNAVAILABLE | resource not available |\n| -32003 | TX_REJECTED | transaction rejected |\n| -32099 | MISC | error, allow nodes to send custom errors |\n## Error details\n\nIf a node wants to send additional information about an error it can use the `data` field.\n\n| category | code | meaning |\n| :-: | :-: | --- |\n| INVALID_VALUE | 0 | invalid input, e.g. missing mandatory input |\n|  |  |  |\n| TX_REJECTED | 0 | invalid nonce |\n| TX_REJECTED | 1 | unable to sign transaction |\n| TX_REJECTED | 2 | transaction already in tx pool |\n| TX_REJECTED | 3 | transaction gas price too low for acceptance |\n| TX_REJECTED | 4 | sender account doesn't exists |\n| TX_REJECTED | 5 | gas limit exceeds block gas limit |\n| TX_REJECTED | 6 | insufficient funds |\n| TX_REJECTED | 7 | insufficient intrinsic gas |\n| TX_REJECTED | 8 | from account is locked |\n| * | 99 | implementation specific field |\n\nIt is worth noting that `99` is a general code that can be used in any of the categories. It allows a node to provide non-standarised information to a DApp. Also this table doesn't specify the `description` field. Nodes are free to choose what they put into the `description` field, it is allowed to omit the `description` field.\n### Example\n\nValue transaction from an account with a balance of 0. The node determines this transaction will always fail and rejects the transaction. The returned error would look like:\n\n```\n{\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32003, \"message\": \"transaction rejected\", \"data\":[{\"code\": 6, \"description\": \"insufficient funds\"}]}, \"id\": 1234}\n```\n\nThe node doesn't uses the account management most implementations provides but forwards a transaction to an external signing service. When this service could not be reached the node can return the following error:\n\n```\n{\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32003, \"message\": \"transaction rejected\", \"data\":[{\"code\": 1, \"description\": \"unable to sign transaction\"},{\"code\": 99, \"description\": \"signing service not available\"}]}, \"id\": null}\n```\n## Required changes\n- the [rpc-test suite](https://github.com/ethereum/rpc-tests) needs to be updated\n- implementations must be updated\n",
  "closed_by": {
    "login": "nicksavers",
    "id": 7483198,
    "node_id": "MDQ6VXNlcjc0ODMxOTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7483198?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nicksavers",
    "html_url": "https://github.com/nicksavers",
    "followers_url": "https://api.github.com/users/nicksavers/followers",
    "following_url": "https://api.github.com/users/nicksavers/following{/other_user}",
    "gists_url": "https://api.github.com/users/nicksavers/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nicksavers/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nicksavers/subscriptions",
    "organizations_url": "https://api.github.com/users/nicksavers/orgs",
    "repos_url": "https://api.github.com/users/nicksavers/repos",
    "events_url": "https://api.github.com/users/nicksavers/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nicksavers/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/136/reactions",
    "total_count": 7,
    "+1": 7,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/136/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/234981929",
    "html_url": "https://github.com/ethereum/EIPs/issues/136#issuecomment-234981929",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
    "id": 234981929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDk4MTkyOQ==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-25T15:09:01Z",
    "updated_at": "2016-07-25T15:09:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "I love this, and think it will make error handling much easier for developers.\n\nI'd also like to see a tx_rejected error code for when the user rejects the transaction.\n\n> On Jul 25, 2016, at 4:48 AM, bas-vk notifications@github.com wrote:\n> \n> Problem\n> \n> The RPC specification implements a subset of the JSON-RPC specification. It defines the available RPC methods together with in- and outputs and serialisation format. It however doesn't specify anything about the errors these methods can return. As a result implementations return different errors which makes it hard for DApp developers to act appropriately. Another problem is that currently there are no well defined errors codes. This causes some clients (e.g. Mist) to do string matching to determine what happened. This is brittle and not generic.\n> \n> Proposal\n> \n> Define a standard for Ethereum JSON-RPC errors. One of the problems is finding the correct balans between informing a DApp what happend and being not too specific. Being too specific will make it hard to become fully complient with the specification and would make DApp's more complicated. Being too generic DApps' won't be able to determine what happened.\n> \n> This problem is tackled by introducing the concept of an error category and allow a node to supply optional extra information about an error. This allows a DApp to get a general understanding what went wrong by looking at the category error code. It also allow a node to provide additional information about an error which the DApp can decide to use.\n> \n> This proposal contains 2 parts. First it describes how the errors are defined. The second part describes a list with standardized error categories and detailed error messages.\n> \n> Error structure\n> \n> JSON-RPC 2.0 has a section dedicated how errors are defined. The code field will be used for an error category. This field is mandatory and used by DApp's to get a general understanding what happend. Together with the code field the message field is filled with a brief description about the category. See for more information about available categories and their description the next section.\n> \n> The data field is an optional field. Nodes can decide to supply additonal information through this field. If a node provides detailed information the data field must be an array of objects with the following fields:\n> \n> field type    mandatory\n> code  integer yes\n> description   string  no\n> By using this approach DApp's can get a general understanding what happend through the code field. In most cases this is sufficient. It also allow nodes to supply additional information when available.\n> \n> Error categories\n> \n> The JSON-RPC 2.0 specification defines the range -32000 to -32099 for application specific errors.\n> \n> code  description meaning\n> -32000    INVALID_VALUE   parameter contains invalid value\n> -32001    NOT_FOUND   requested resource not found\n> -32002    UNAVAILABLE resource not available\n> -32003    TX_REJECTED transaction rejected\n> -32099    MISC    error, allow nodes to send custom errors\n> Error details\n> \n> If a node wants to send additional information about an error it can use the data field.\n> \n> category  code    meaning\n> INVALID_VALUE 0   invalid input, e.g. missing mandatory input\n> TX_REJECTED   0   invalid nonce\n> TX_REJECTED   1   unable to sign transaction\n> TX_REJECTED   2   transaction already in tx pool\n> TX_REJECTED   3   transaction gas price too low for acceptance\n> TX_REJECTED   4   sender account doesn't exists\n> TX_REJECTED   5   gas limit exceeds block gas limit\n> TX_REJECTED   6   insufficient funds\n> TX_REJECTED   7   insufficient intrinsic gas\n> TX_REJECTED   8   from account is locked\n> - 99  implementation specific field\n>   It is worth noting that 99 is a general code that can be used in any of the categories. It allows a node to provide non-standarised information to a DApp. Also this table doesn't specify the description field. Nodes are free to choose what they put into the description field, it is allowed to omit the description field.\n> \n> Example\n> \n> Value transaction from an account with a balance of 0. The node determines this transaction will always fail and rejects the transaction. The returned error would look like:\n> \n> {\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32003, \"message\": \"transaction rejected\", \"data\":[{\"code\": 6, \"description\": \"insufficient funds\"}]}, \"id\": 1234}\n> The node doesn't uses the account management most implementations provides but forwards a transaction to an external signing service. When this service could not be reached the node can return the following error:\n> \n> {\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32003, \"message\": \"transaction rejected\", \"data\":[{\"code\": 1, \"description\": \"unable to sign transaction\"},{\"code\": 99, \"description\": \"signing service not available\"}]}, \"id\": null}\n> Required changes\n> \n> the rpc-test suite needs to be updated\n> implementations must be updated\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/234981929/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/235015441",
    "html_url": "https://github.com/ethereum/EIPs/issues/136#issuecomment-235015441",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
    "id": 235015441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTAxNTQ0MQ==",
    "user": {
      "login": "fjl",
      "id": 6915,
      "node_id": "MDQ6VXNlcjY5MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjl",
      "html_url": "https://github.com/fjl",
      "followers_url": "https://api.github.com/users/fjl/followers",
      "following_url": "https://api.github.com/users/fjl/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
      "organizations_url": "https://api.github.com/users/fjl/orgs",
      "repos_url": "https://api.github.com/users/fjl/repos",
      "events_url": "https://api.github.com/users/fjl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-25T17:02:07Z",
    "updated_at": "2016-07-25T17:05:43Z",
    "author_association": "MEMBER",
    "body": "> The JSON-RPC 2.0 specification defines the range -32000 to -32099 for application specific errors.\n\nThis is not entirely correct. The -32000..-32099 range is meant to be used for _server errors_, i.e. RPC protocol violations that are not covered by the spec. Codes from this range could be used for \"invalid hex\" and similar errors. Application errors can use any error code, positive numbers are acceptable too.\n\nSince the available integer range is so big, it would be much simpler to ignore categories and define a separate error code number for each specific condition, e.g. (100: invalid transaction nonce, 101: unable to sign transaction, 102: insufficient funds, 103: gas price too low, 104: no such account, ...). \nIf a category is desired, you can use the magnitude of the number (e.g. 100..199: transaction rejected)\nto indicate it.\n\nOne important question is the definitive list of errors that must be detected by every compliant implementation of the web3 API. The list you have covers errors for eth_sendTransaction. Are there any other errors that should be included for the initial version of this spec?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/235015441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/255492384",
    "html_url": "https://github.com/ethereum/EIPs/issues/136#issuecomment-255492384",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
    "id": 255492384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQ5MjM4NA==",
    "user": {
      "login": "tymat",
      "id": 849457,
      "node_id": "MDQ6VXNlcjg0OTQ1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/849457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tymat",
      "html_url": "https://github.com/tymat",
      "followers_url": "https://api.github.com/users/tymat/followers",
      "following_url": "https://api.github.com/users/tymat/following{/other_user}",
      "gists_url": "https://api.github.com/users/tymat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tymat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tymat/subscriptions",
      "organizations_url": "https://api.github.com/users/tymat/orgs",
      "repos_url": "https://api.github.com/users/tymat/repos",
      "events_url": "https://api.github.com/users/tymat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tymat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-22T00:02:58Z",
    "updated_at": "2016-10-22T00:02:58Z",
    "author_association": "NONE",
    "body": "I would like to add \"Unsupported\" error code which would be a good way for Metamask style sub-providers to tell the client to use a different provider.  Not sure if NOT FOUND can be used in this instance...\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/255492384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375265710",
    "html_url": "https://github.com/ethereum/EIPs/issues/136#issuecomment-375265710",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
    "id": 375265710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTI2NTcxMA==",
    "user": {
      "login": "flexsingit",
      "id": 25687998,
      "node_id": "MDQ6VXNlcjI1Njg3OTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/25687998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flexsingit",
      "html_url": "https://github.com/flexsingit",
      "followers_url": "https://api.github.com/users/flexsingit/followers",
      "following_url": "https://api.github.com/users/flexsingit/following{/other_user}",
      "gists_url": "https://api.github.com/users/flexsingit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flexsingit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flexsingit/subscriptions",
      "organizations_url": "https://api.github.com/users/flexsingit/orgs",
      "repos_url": "https://api.github.com/users/flexsingit/repos",
      "events_url": "https://api.github.com/users/flexsingit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flexsingit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T11:05:55Z",
    "updated_at": "2018-03-22T11:05:55Z",
    "author_association": "NONE",
    "body": "Can anyone let me know that what is the meaning of Error: known transaction ?Please\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375265710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/397158918",
    "html_url": "https://github.com/ethereum/EIPs/issues/136#issuecomment-397158918",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
    "id": 397158918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzE1ODkxOA==",
    "user": {
      "login": "RobertoC27",
      "id": 8262009,
      "node_id": "MDQ6VXNlcjgyNjIwMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8262009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RobertoC27",
      "html_url": "https://github.com/RobertoC27",
      "followers_url": "https://api.github.com/users/RobertoC27/followers",
      "following_url": "https://api.github.com/users/RobertoC27/following{/other_user}",
      "gists_url": "https://api.github.com/users/RobertoC27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RobertoC27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RobertoC27/subscriptions",
      "organizations_url": "https://api.github.com/users/RobertoC27/orgs",
      "repos_url": "https://api.github.com/users/RobertoC27/repos",
      "events_url": "https://api.github.com/users/RobertoC27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RobertoC27/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-14T03:29:03Z",
    "updated_at": "2018-06-14T03:29:03Z",
    "author_association": "NONE",
    "body": "can anyone tell how far along is this? or this has already been implemented, thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/397158918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/397268756",
    "html_url": "https://github.com/ethereum/EIPs/issues/136#issuecomment-397268756",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
    "id": 397268756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzI2ODc1Ng==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-14T11:57:39Z",
    "updated_at": "2018-06-14T11:57:39Z",
    "author_association": "MEMBER",
    "body": "I haven't really thought through this yet, but in my experience there is value in classifying errors broadly into \"retriable\" or not.  That is, is it possible that if the app were to try again that the transaction will succeed or will the transaction definitely not succeed no matter how many times it is tried.\r\n\r\nUser rejected or gas too low, for example, is a retryable error while a malformed transaction is a non-retryable error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/397268756/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426830297",
    "html_url": "https://github.com/ethereum/EIPs/issues/136#issuecomment-426830297",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
    "id": 426830297,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjgzMDI5Nw==",
    "user": {
      "login": "bitpshr",
      "id": 334586,
      "node_id": "MDQ6VXNlcjMzNDU4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/334586?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitpshr",
      "html_url": "https://github.com/bitpshr",
      "followers_url": "https://api.github.com/users/bitpshr/followers",
      "following_url": "https://api.github.com/users/bitpshr/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitpshr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitpshr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitpshr/subscriptions",
      "organizations_url": "https://api.github.com/users/bitpshr/orgs",
      "repos_url": "https://api.github.com/users/bitpshr/repos",
      "events_url": "https://api.github.com/users/bitpshr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitpshr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T22:54:53Z",
    "updated_at": "2018-10-03T22:54:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @bas-vk. Do you plan to formalize this proposal into an EIP and submit a pull request?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426830297/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426830824",
    "html_url": "https://github.com/ethereum/EIPs/issues/136#issuecomment-426830824",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
    "id": 426830824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjgzMDgyNA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T22:57:38Z",
    "updated_at": "2018-10-03T22:57:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think @bas-Vlad is not very active anymore. Somebody needs to overtake that. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426830824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426833752",
    "html_url": "https://github.com/ethereum/EIPs/issues/136#issuecomment-426833752",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/136",
    "id": 426833752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjgzMzc1Mg==",
    "user": {
      "login": "bitpshr",
      "id": 334586,
      "node_id": "MDQ6VXNlcjMzNDU4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/334586?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitpshr",
      "html_url": "https://github.com/bitpshr",
      "followers_url": "https://api.github.com/users/bitpshr/followers",
      "following_url": "https://api.github.com/users/bitpshr/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitpshr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitpshr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitpshr/subscriptions",
      "organizations_url": "https://api.github.com/users/bitpshr/orgs",
      "repos_url": "https://api.github.com/users/bitpshr/repos",
      "events_url": "https://api.github.com/users/bitpshr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitpshr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T23:13:14Z",
    "updated_at": "2018-10-03T23:13:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @frozeman. I'm finishing an EIP to formalize the current RPC specification so it doesn't only exist in a wiki. I'll either roll this error handling into that RPC EIP, or submit this as a separate EIP soon after.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426833752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
