{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1261",
  "id": 344959190,
  "node_id": "MDU6SXNzdWUzNDQ5NTkxOTA=",
  "number": 1261,
  "title": "ERC 1261:Membership Verification Token",
  "user": {
    "login": "chaitanyapotti",
    "id": 1688380,
    "node_id": "MDQ6VXNlcjE2ODgzODA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1688380?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chaitanyapotti",
    "html_url": "https://github.com/chaitanyapotti",
    "followers_url": "https://api.github.com/users/chaitanyapotti/followers",
    "following_url": "https://api.github.com/users/chaitanyapotti/following{/other_user}",
    "gists_url": "https://api.github.com/users/chaitanyapotti/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chaitanyapotti/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chaitanyapotti/subscriptions",
    "organizations_url": "https://api.github.com/users/chaitanyapotti/orgs",
    "repos_url": "https://api.github.com/users/chaitanyapotti/repos",
    "events_url": "https://api.github.com/users/chaitanyapotti/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chaitanyapotti/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2018-07-26T18:37:55Z",
  "updated_at": "2021-12-18T21:12:12Z",
  "closed_at": "2021-12-18T21:12:12Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\neip: 1261\r\ntitle: Membership Verification Token (MVT)\r\nauthor: Chaitanya Potti (@chaitanyapotti), Partha Bhattacharya (@pb25193)\r\ntype: Standards Track\r\ncategory: ERC\r\nstatus: Draft\r\ncreated: 2018-07-14\r\nrequires: 165, 173\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/1261\r\n---\r\n\r\n## Simple Summary\r\n\r\nA standard interface for Membership Verification Token(MVT).\r\n\r\n## Abstract\r\n\r\nThe following standard allows for the implementation of a standard API for Membership Verification Token within smart contracts(called entities). This standard provides basic functionality to track membership of individuals in certain on-chain ‘organizations’. This allows for several use cases like automated compliance, and several forms of governance and membership structures.\r\n\r\nWe considered use cases of MVTs being assigned to individuals which are non-transferable and revocable by the owner. MVTs can represent proof of recognition, proof of membership, proof of right-to-vote and several such otherwise abstract concepts on the blockchain. The following are some examples of those use cases, and it is possible to come up with several others:\r\n\r\n- Voting: Voting is inherently supposed to be a permissioned activity. So far, onchain voting systems are only able to carry out voting with coin balance based polls. This can now change and take various shapes and forms.\r\n- Passport issuance, social benefit distribution, Travel permit issuance, Drivers licence issuance are all applications which can be abstracted into membership, that is belonging of an individual to a small set, recognized by some authority as having certain entitlements, without needing any individual specific information(right to welfare, freedom of movement, authorization to operate vehicles, immigration)\r\n- Investor permissioning: Making regulatory compliance a simple on chain process. Tokenization of securities, that are streamlined to flow only to accredited addresses, tracing and certifying on chain addresses for AML purposes.\r\n- Software licencing: Software companies like game developers can use the protocol to authorize certain hardware units(consoles) to download and use specific software(games)\r\n\r\nIn general, an individual can have different memberships in his day to day life. The protocol allows for the creation of software that puts everything all at one place. His identity can be verified instantly. Imagine a world where you don't need to carry a wallet full of identity cards (Passport, gym membership, SSN, Company ID etc) and organizations can easily keep track of all its members. Organizations can easily identify and disallow fake identities.\r\n\r\nAttributes are a huge part of ERC-1261 which help to store identifiable information regarding its members. Polls can make use of attributes to calculate the voterbase.\r\nE.g: Users should belong to USA entity and not belong to Washington state attribute to be a part of a poll.\r\n\r\nThere will exist a mapping table that maps attribute headers to an array of all possible attributes. This is done in order to subdivide entities into subgroups which are exclusive and exhaustive. For example,\r\nheader: blood group alphabet\r\nArray: [ o, a, b, ab ]\r\nheader: blood group sign\r\nArray: [ +, - ]\r\n\r\nNOT an example of exclusive exhaustive:\r\nHeader: video subscription\r\nArray: [ Netflix, HBO, Amazon ]\r\nBecause a person is not necessitated to have EXACTLY one of the elements. He or she may have none or more than one.\r\n\r\n## Motivation\r\n\r\nA standard interface allows any user,applications to work with any MVT on Ethereum. We provide for simple ERC-1261 smart contracts. Additional applications are discussed below.\r\n\r\nThis standard is inspired from the fact that voting on the blockchain is done with token balance weights. This has been greatly detrimental to the formation of flexible governance systems on the blockchain, despite the tremendous governance potential that blockchains offer. The idea was to create a permissioning system that allows organizations to vet people once into the organization on the blockchain, and then gain immense flexibility in the kind of governance that can be carried out.\r\n\r\nWe have also reviewed other Membership EIPs including EIP-725/735 Claim Registry. A significant difference between #735 claims and #1261 MVTs is information ownership. In #735 the Claim Holder owns any claims made about themselves. The problem with this is that there is no way for a Claim Issuer to revoke or alter a claim once it has been issued. While #735 does specify a removeClaim method, a malicious implementation could simply ignore that method call, because they own the claim.\r\n\r\nImagine that SafeEmploy™, a background checking company, issues a claim about Timmy. The claim states that Timmy has never been convicted of any felonies. Timmy makes some bad decisions, and now that claim is no longer true. SafeEmploy™ executes removeClaim, but Timmy's #735 contract just ignores it, because Timmy wants to stay employed (and is crypto-clever). #1261 MVTs do not have this problem. Ownership of a badge/claim is entirely determined by the contract issuing the badges, not the one receiving them. The issuer is free to remove or change those badges as they see fit.\r\n\r\n**Trade-off between trustlessness and usability:**\r\nTo truly understand the value of the protocol, it is important to understand the trade-off we are treading on. The MVT contract allows the creator to revoke the token, and essentially confiscate the membership of the member in question. To some, this might seem like an unacceptable flaw, however this is a design choice, and not a flaw.\r\nThe choice may seem to place a great amount of trust in the individuals who are managing the entity contract(entity owners). If the interests of the entity owner conflict with the interests of the members, the owner may resort to addition of fake addresses(to dominate consensus) or evicting members(to censor unfavourable decisions). At first glance this appears to be a major shortcomings, because the blockchain space is used to absolute removal of authority in most cases. Even the official definition of a dapp requires the absence of any party that manages the services provided by the application. However, the trust in entity owners is not misplaced, if it can be ensured that the interests of entity owners are aligned with the interests of members.\r\nAnother criticism of such a system would be that the standard edge of blockchain intermediation - “you cannot bribe the system if you don’t know who to bribe” - no longer holds. It is possible to bribe an entity owner into submission, and get them to censor or fake votes. There are several ways to respond to this argument. First of all, all activities, such as addition of members, and removal of members can be tracked on the blockchain and traces of such activity cannot be removed. It is not difficult to build analytics tools to detect malicious activity(adding 100 fake members suddenly who vote in the direction/sudden removal of a number of members voting in a certain direction). Secondly, the entity owners’ power is limited to the addition and removal of members. This means that they cannot tamper any votes. They can only alter the counting system to include fake voters or remove real voters. Any sensible auditor can identify the malicious/victim addresses and create an open source audit tool to find out the correct results. The biggest loser in this attack will be the entity owner, who has a reputation to lose.\r\nFinally, one must understand why we are taking a step away from trustlessness in this trade-off. The answer is usability. Introducing a permissioning system expands the scope of products and services that can be delivered through the blockchain, while leveraging other aspects of the blockchain(cheap, immutable, no red-tape, secure). Consider the example of the driver licence issuing agency using the ERC-1300 standard. This is a service that simply cannot be deployed in a completely trustless environment. The introduction of permissioned systems expanded the scope of services on the blockchain to cover this particular service. Sure, they have the power to revoke a person’s licence for no reason. But will they? Who stands to lose the most, if the agency acts erratically? The agency itself. Now consider the alternative, the way licences(not necessarily only drivers licence, but say shareholder certificates and so on) are issued, the amount of time consumed, the complete lack of transparency. One could argue that if the legacy systems providing these services really wanted to carry out corruption and nepotism in the execution of these services, the present systems make it much easier to do so. Also, they are not transparent, meaning that there is no way to even detect if they act maliciously.\r\nAll that being said, we are very excited to share our proposal with the community and open up to suggestions in this space.\r\n\r\n## Specification\r\n\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.\r\n\r\n**Every ERC-1261 compliant contract must implement the `ERC1261`, `ERC173` and `ERC165` interfaces** (subject to \"caveats\" below):\r\n\r\n```solidity\r\n/// @title ERC-1261 MVT Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1261.md\r\n///  The constructor should define the attribute set for this MVT.\r\n///  Note: the ERC-165 identifier for this interface is 0x1d8362cf.\r\ninterface IERC1261 {/* is ERC173, ERC165 */\r\n    /// @dev This emits when a token is assigned to a member.\r\n    event Assigned(address indexed to, uint[] attributeIndexes);\r\n\r\n    /// @dev This emits when a membership is revoked.\r\n    event Revoked(address indexed to);\r\n\r\n    /// @dev This emits when a membership request is accepted\r\n    event ApprovedMembership(address indexed to);\r\n\r\n    /// @dev This emits when a membership is requested by an user\r\n    event RequestedMembership(address indexed to);\r\n\r\n    /// @dev This emits when data of a member is modified.\r\n    ///  Doesn't emit when a new membership is created and data is assigned.\r\n    event ModifiedAttributes(address indexed to, bytes32 attributeName, uint attributeIndex);\r\n\r\n    /// @notice Adds a new attribute (key, value) pair to the set of pre-existing attributes.\r\n    /// @dev Adds a new attribute at the end of the array of attributes and maps it to `values`.\r\n    ///  Contract can set a max number of attributes and throw if limit is reached.\r\n    /// @param _name Name of the attribute which is to be added.\r\n    /// @param values List of values of the specified attribute.\r\n    function addAttributeSet(bytes32 _name, bytes32[] values) external;\r\n\r\n    /// @notice Modifies the attribute value of a specific attribute for a given `_to` address.\r\n    /// @dev Use appropriate checks for whether a user/admin can modify the data.\r\n    ///  Best practice is to use onlyOwner modifier from ERC173.\r\n    /// @param _to The address whose attribute is being modified.\r\n    /// @param _attributeName The attribute name which is being modified.\r\n    /// @param _modifiedValueIndex The index of the new value which is being assigned to the user attribute.\r\n    function modifyAttributeByName(address _to, bytes32 _attributeName, uint _modifiedValueIndex) external;\r\n\r\n    /// @notice Requests membership from any address.\r\n    /// @dev Throws if the `msg.sender` already has the token.\r\n    ///  The individual `msg.sender` can request for a membership if some exisiting criteria are satisfied.\r\n    ///  When a membership is requested, this function emits the RequestedMembership event.\r\n    ///  dev can store the membership request and use `approveRequest` to assign memebership later\r\n    ///  dev can also oraclize the request to assign membership later\r\n    /// @param _attributeIndexes the attribute data associated with the member.\r\n    ///  This is an array which contains indexes of attributes.\r\n    function requestMembership(uint[] _attributeIndexes) external payable;\r\n\r\n    /// @notice User can forfeit his membership.\r\n    /// @dev Throws if the `msg.sender` already doesn't have the token.\r\n    ///  The individual `msg.sender` can revoke his/her membership.\r\n    ///  When the token is revoked, this function emits the Revoked event.\r\n    function forfeitMembership() external payable;\r\n\r\n    /// @notice Owner approves membership from any address.\r\n    /// @dev Throws if the `_user` doesn't have a pending request.\r\n    ///  Throws if the `msg.sender` is not an owner.\r\n    ///  Approves the pending request\r\n    ///  Make oraclize callback call this function\r\n    ///  When the token is assigned, this function emits the `ApprovedMembership` and `Assigned` events.\r\n    /// @param _user the user whose membership request will be approved.\r\n    function approveRequest(address _user) external;\r\n\r\n    /// @notice Owner discards membership from any address.\r\n    /// @dev Throws if the `_user` doesn't have a pending request.\r\n    ///  Throws if the `msg.sender` is not an owner.\r\n    ///  Discards the pending request\r\n    ///  Make oraclize callback call this function if criteria are not satisfied\r\n    /// @param _user the user whose membership request will be discarded.\r\n    function discardRequest(address _user) external;\r\n\r\n    /// @notice Assigns membership of an MVT from owner address to another address.\r\n    /// @dev Throws if the member already has the token.\r\n    ///  Throws if `_to` is the zero address.\r\n    ///  Throws if the `msg.sender` is not an owner.\r\n    ///  The entity assigns the membership to each individual.\r\n    ///  When the token is assigned, this function emits the Assigned event.\r\n    /// @param _to The address to which the token is assigned.\r\n    /// @param data The attribute data associated with the member.\r\n    ///  This is an array which contains indexes of attributes.\r\n    function assignTo(address _to, uint[] data) external;\r\n\r\n    /// @notice Only Owner can revoke the membership.\r\n    /// @dev This removes the membership of the user.\r\n    ///  Throws if the `_from` is not an owner of the token.\r\n    ///  Throws if the `msg.sender` is not an owner.\r\n    ///  Throws if `_from` is the zero address.\r\n    ///  When transaction is complete, this function emits the Revoked event.\r\n    /// @param _from The current owner of the MVT.\r\n    function revokeFrom(address _from) external;\r\n\r\n    /// @notice Queries whether a member is a current member of the organization.\r\n    /// @dev MVT's assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _to An address for whom to query the membership.\r\n    /// @return Whether the member owns the token.\r\n    function isCurrentMember(address _to) external view returns (bool);\r\n\r\n    /// @notice Returns the list of all past and present members.\r\n    /// @dev Use this function along with isCurrentMember to find wasMemberOf() in Js.\r\n    ///  It can be calculated as present in getAllMembers() and !isCurrentMember().\r\n    /// @return List of addresses who have owned the token and currently own the token.\r\n    function getAllMembers() external view returns (address[]);\r\n\r\n    /// @notice Returns the count of all current members.\r\n    /// @dev Use this function in polls as denominator to get percentage of members voted.\r\n    /// @return Count of current Members.\r\n    function getCurrentMemberCount() external view returns (uint);\r\n\r\n    /// @notice Returns the list of all attribute names.\r\n    /// @dev Returns the names of attributes as a bytes32 array.\r\n    ///  AttributeNames are stored in a bytes32 Array.\r\n    ///  Possible values for each attributeName are stored in a mapping(attributeName => attributeValues).\r\n    ///  AttributeName is bytes32 and attributeValues is bytes32[].\r\n    ///  Attributes of a particular user are stored in bytes32[].\r\n    ///  Which has a single attributeValue for each attributeName in an array.\r\n    ///  Use web3.toAscii(data[0]).replace(/\\u0000/g, \"\") to convert to string in JS.\r\n    /// @return The names of attributes.\r\n    function getAttributeNames() external view returns (bytes32[]);\r\n\r\n    /// @notice Returns the attributes of `_to` address.\r\n    /// @dev Throws if `_to` is the zero address.\r\n    ///  Use web3.toAscii(data[0]).replace(/\\u0000/g, \"\") to convert to string in JS.\r\n    /// @param _to The address whose current attributes are to be returned.\r\n    /// @return The attributes associated with `_to` address.\r\n    function getAttributes(address _to) external view returns (bytes32[]);\r\n\r\n    /// @notice Returns the `attribute` stored against `_to` address.\r\n    /// @dev Finds the index of the `attribute`.\r\n    ///  Throws if the attribute is not present in the predefined attributes.\r\n    ///  Returns the attributeValue for the specified `attribute`.\r\n    /// @param _to The address whose attribute is requested.\r\n    /// @param attribute The attribute name which is required.\r\n    /// @return The attribute value at the specified name.\r\n    function getAttributeByName(address _to, bytes32 attribute) external view returns (bytes32);\r\n}\r\n\r\ninterface ERC173 /* is ERC165 */ {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return The address of the owner.\r\n    function owner() view external;\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @param _newOwner The address of the new owner of the contract\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n```\r\n\r\nThe **metadata extension** is OPTIONAL for ERC-1261 smart contracts (see \"caveats\", below). This allows your smart contract to be interrogated for its name and for details about the organization which your MV tokens represent.\r\n\r\n```solidity\r\n/// @title ERC-1261 MVT Standard, optional metadata extension\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1261.md\r\ninterface ERC1261Metadata /* is ERC1261 */ {\r\n    /// @notice A descriptive name for a collection of MVTs in this contract\r\n    function name() external view returns (string _name);\r\n\r\n    /// @notice An abbreviated name for MVTs in this contract\r\n    function symbol() external view returns (string _symbol);\r\n}\r\n```\r\n\r\nThis is the \"ERC1261 Metadata JSON Schema\" referenced above.\r\n\r\n```json\r\n{\r\n  \"title\": \"Organization Metadata\",\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\",\r\n      \"description\": \"Identifies the organization to which this MVT represents\"\r\n    },\r\n    \"description\": {\r\n      \"type\": \"string\",\r\n      \"description\": \"Describes the organization to which this MVT represents\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Caveats\r\n\r\nThe 0.4.24 Solidity interface grammar is not expressive enough to document the ERC-1261 standard. A contract which complies with ERC-1261 MUST also abide by the following:\r\n\r\n- Solidity issue #3412: The above interfaces include explicit mutability guarantees for each function. Mutability guarantees are, in order weak to strong: `payable`, implicit nonpayable, `view`, and `pure`. Your implementation MUST meet the mutability guarantee in this interface and you MAY meet a stronger guarantee. For example, a `payable` function in this interface may be implemented as nonpayble (no state mutability specified) in your contract. We expect a later Solidity release will allow your stricter contract to inherit from this interface, but a workaround for version 0.4.24 is that you can edit this interface to add stricter mutability before inheriting from your contract.\r\n- Solidity issue #3419: A contract that implements `ERC1261Metadata` SHALL also implement `ERC1261`.\r\n- Solidity issue #2330: If a function is shown in this specification as `external` then a contract will be compliant if it uses `public` visibility. As a workaround for version 0.4.24, you can edit this interface to switch to `public` before inheriting from your contract.\r\n- Solidity issues #3494, #3544: Use of `this.*.selector` is marked as a warning by Solidity, a future version of Solidity will not mark this as an error.\r\n\r\n_If a newer version of Solidity allows the caveats to be expressed in code, then this EIP MAY be updated and the caveats removed, such will be equivalent to the original specification._\r\n\r\n## Rationale\r\n\r\nThere are many potential uses of Ethereum smart contracts that depend on tracking membership. Examples of existing or planned MVT systems are Vault, a DAICO platform, and Stream, a security token framework. Future uses include the implementation of direct democracy, in-game memberships and badges, licence and travel document issuance, electronic voting machine trails, software licencing and many more.\r\n\r\n**MVT Word Choice:**\r\n\r\nSince the tokens are non transferable and revocable, they function like membership cards. Hence the word membership verification token.\r\n\r\n**Transfer Mechanism**\r\n\r\nMVTs can't be transferred. This is a design choice, and one of the features that distinguishes this protocol.\r\nAny member can always ask the issuer to revoke the token from an existing address and assign to a new address.\r\nOne can think of the set of MVTs as identifying a user, and you cannot split the user into parts and have it be the same user, but you can transfer a user to a new private key.\r\n\r\n**Assign and Revoke mechanism**\r\n\r\nThe assign and revoke functions' documentation only specify conditions when the transaction MUST throw. Your implementation MAY also throw in other situations. This allows implementations to achieve interesting results:\r\n\r\n- **Disallow additional memberships after a condition is met** — Sample contract available on Github\r\n- **Blacklist certain address from receiving MV tokens** — Sample contract available on Github\r\n- **Disallow additional memberships after a certain time is reached** — Sample contract available on Github\r\n- **Charge a fee to user of a transaction** — require payment when calling `assign` and `revoke` so that condition checks from external sources can be made\r\n\r\n**ERC-173 Interface**\r\n\r\nWe chose Standard Interface for Ownership (ERC-173) to manage the ownership of a ERC-1261 contract.\r\n\r\nA future EIP/ Zeppelin may create a multi-ownable implementation for ownership. We strongly support such an EIP and it would allow your ERC-1261 implementation to implement `ERC1261Metadata`, or other interfaces by delegating to a separate contract.\r\n\r\n**ERC-165 Interface**\r\n\r\nWe chose Standard Interface Detection (ERC-165) to expose the interfaces that a ERC-1261 smart contract supports.\r\n\r\nA future EIP may create a global registry of interfaces for contracts. We strongly support such an EIP and it would allow your ERC-1261 implementation to implement `ERC1261Metadata`, or other interfaces by delegating to a separate contract.\r\n\r\n**Gas and Complexity** (regarding the enumeration extension)\r\n\r\nThis specification contemplates implementations that manage a few and _arbitrarily large_ numbers of MVTs. If your application is able to grow then avoid using for/while loops in your code. These indicate your contract may be unable to scale and gas costs will rise over time without bound\r\n\r\n**Privacy**\r\n\r\nPersonal information: The protocol does not put any personal information on to the blockchain, so there is no compromise of privacy in that respect.\r\nMembership privacy: The protocol by design, makes it public which addresses are/aren’t members. Without making that information public, it would not be possible to independently audit governance activity or track admin(entity owner) activity.\r\n\r\n**Metadata Choices** (metadata extension)\r\n\r\nWe have required `name` and `symbol` functions in the metadata extension. Every token EIP and draft we reviewed (ERC-20, ERC-223, ERC-677, ERC-777, ERC-827) included these functions.\r\n\r\nWe remind implementation authors that the empty string is a valid response to `name` and `symbol` if you protest to the usage of this mechanism. We also remind everyone that any smart contract can use the same name and symbol as _your_ contract. How a client may determine which ERC-1261 smart contracts are well-known (canonical) is outside the scope of this standard.\r\n\r\nA mechanism is provided to associate MVTs with URIs. We expect that many implementations will take advantage of this to provide metadata for each MVT system. The URI MAY be mutable (i.e. it changes from time to time). We considered an MVT representing membership of a place, in this case metadata about the organization can naturally change.\r\n\r\nMetadata is returned as a string value. Currently this is only usable as calling from `web3`, not from other contracts. This is acceptable because we have not considered a use case where an on-blockchain application would query such information.\r\n\r\n_Alternatives considered: put all metadata for each asset on the blockchain (too expensive), use URL templates to query metadata parts (URL templates do not work with all URL schemes, especially P2P URLs), multiaddr network address (not mature enough)_\r\n\r\n**Community Consensus**\r\n\r\nWe have been very inclusive in this process and invite anyone with questions or contributions into our discussion. However, this standard is written only to support the identified use cases which are listed herein.\r\n\r\n## Backwards Compatibility\r\n\r\nWe have adopted `name` and `symbol` semantics from the ERC-20 specification.\r\n\r\nExample MVT implementations as of July 2018:\r\n\r\n- Membership Verification Token(https://github.com/chaitanyapotti/MembershipVerificationToken)\r\n\r\n## Test Cases\r\n\r\nMembership Verification Token ERC-1261 Token includes test cases written using Truffle.\r\n\r\n## Implementations\r\n\r\nMembership Verification Token ERC1261 -- a reference implementation\r\n\r\n- MIT licensed, so you can freely use it for your projects\r\n- Includes test cases\r\n- Also available as a npm package - npm i membershipverificationtoken\r\n\r\n## References\r\n\r\n**Standards**\r\n\r\n1. ERC-20 Token Standard. https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n1. ERC-165 Standard Interface Detection. https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n1. ERC-725/735 Claim Registry https://github.com/ethereum/EIPs/blob/master/EIPS/eip-725.md\r\n1. ERC-173 Owned Standard. https://github.com/ethereum/EIPs/issues/173\r\n1. JSON Schema. http://json-schema.org/\r\n1. Multiaddr. https://github.com/multiformats/multiaddr\r\n1. RFC 2119 Key words for use in RFCs to Indicate Requirement Levels. https://www.ietf.org/rfc/rfc2119.txt\r\n\r\n**Issues**\r\n\r\n1. The Original ERC-1261 Issue. https://github.com/ethereum/eips/issues/1261\r\n1. Solidity Issue \\#2330 -- Interface Functions are Axternal. https://github.com/ethereum/solidity/issues/2330\r\n1. Solidity Issue \\#3412 -- Implement Interface: Allow Stricter Mutability. https://github.com/ethereum/solidity/issues/3412\r\n1. Solidity Issue \\#3419 -- Interfaces Can't Inherit. https://github.com/ethereum/solidity/issues/3419\r\n\r\n**Discussions**\r\n\r\n1. Gitter #EIPs (announcement of first live discussion). https://gitter.im/ethereum/EIPs?at=5b5a1733d2f0934551d37642\r\n1. ERC-1261 (announcement of first live discussion). https://github.com/ethereum/eips/issues/1261\r\n\r\n**MVT Implementations and Other Projects**\r\n\r\n1. Membership Verification Token ERC-1261 Token. https://github.com/chaitanyapotti/MembershipVerificationToken\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1261/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408558761",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-408558761",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 408558761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODU1ODc2MQ==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T22:57:36Z",
    "updated_at": "2018-07-27T22:57:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Question in terms of logic and terminology ; \r\n\r\n+ How is this different from a \"whitelist\"? \r\n\r\n+ Why does this need to be standardized if third parties can't really do anything with the contract (if I understand correctly)? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408558761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/409253438",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-409253438",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 409253438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTI1MzQzOA==",
    "user": {
      "login": "chaitanyapotti",
      "id": 1688380,
      "node_id": "MDQ6VXNlcjE2ODgzODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1688380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chaitanyapotti",
      "html_url": "https://github.com/chaitanyapotti",
      "followers_url": "https://api.github.com/users/chaitanyapotti/followers",
      "following_url": "https://api.github.com/users/chaitanyapotti/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaitanyapotti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chaitanyapotti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaitanyapotti/subscriptions",
      "organizations_url": "https://api.github.com/users/chaitanyapotti/orgs",
      "repos_url": "https://api.github.com/users/chaitanyapotti/repos",
      "events_url": "https://api.github.com/users/chaitanyapotti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chaitanyapotti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-31T15:02:34Z",
    "updated_at": "2018-07-31T15:02:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "How is it different from whitelist:\r\n\r\nWhitelist is not necessarily transparent, and changes on whitelists are not logged on to  immutable ledger. So this is a lot more reliable that a whitelist in the sense that censorship is a lot more difficult to hide. \r\n\r\nAlso this 'whitelist' is on the blockchain, meaning that you can program smart contracts to act upon certain logic based on membership, voting systems can automatically filter out member votes from spam votes, and so on.\r\n\r\nSecond question:\r\n\r\nThird parties can request membership and participate in governance systems that require such membership. Standardization will help different memberships be browsable from a standard client(we will be developing a react based UI to interact with the interface. Please visit https://electus.network for more details)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/409253438/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/409809512",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-409809512",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 409809512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTgwOTUxMg==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-02T05:24:18Z",
    "updated_at": "2018-08-02T05:24:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Whitelist is not necessarily transparent, and changes on whitelists are not logged on to immutable ledger. \r\n\r\nThey can be, and that's the case for 95% of ICOs I've seen. See the [Whitelist.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/access/Whitelist.sol) contract by Zeppelin for example (there are many more). \r\n\r\n> Also this 'whitelist' is on the blockchain, meaning that you can program smart contracts to act upon certain logic based on membership, voting systems can automatically filter out member votes from spam votes, and so on.\r\n\r\nThis is the case for almost all the whitelists that have been used in the last 2 years or so. See previous comment for example.\r\n\r\nFor example, comparing Zeppelin code with the interface you propose here, it seems to me like \r\n\r\n`checkRole(_operator, ROLE_WHITELISTED)` serves the exact same purpose as `isCurrentMember(_to)`. \r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/409809512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/409898775",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-409898775",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 409898775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTg5ODc3NQ==",
    "user": {
      "login": "chaitanyapotti",
      "id": 1688380,
      "node_id": "MDQ6VXNlcjE2ODgzODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1688380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chaitanyapotti",
      "html_url": "https://github.com/chaitanyapotti",
      "followers_url": "https://api.github.com/users/chaitanyapotti/followers",
      "following_url": "https://api.github.com/users/chaitanyapotti/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaitanyapotti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chaitanyapotti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaitanyapotti/subscriptions",
      "organizations_url": "https://api.github.com/users/chaitanyapotti/orgs",
      "repos_url": "https://api.github.com/users/chaitanyapotti/repos",
      "events_url": "https://api.github.com/users/chaitanyapotti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chaitanyapotti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-02T11:45:18Z",
    "updated_at": "2018-08-02T11:45:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd say it's easier for an organization to track the list of members, based on the way we have implemented it. This is necessary when you want to track censorship and conduct analytics. \r\n\r\nIf a malicious owner is removing certain number of people periodically, it is not simple on whitelist.sol to track the removed members, reconstruct the original plausible uncensored group, and audit the uncensored result of the governance in question. \r\nWhitelisting is definitely one thing that can be accomplished by the Electus protocol, but we are looking to tackle a number of other issues where the sensitivity of results is high.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/409898775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/409913212",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-409913212",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 409913212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTkxMzIxMg==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-02T12:44:38Z",
    "updated_at": "2018-08-02T12:44:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I'd say it's easier for an organization to track the list of members, based on the way we have implemented it. \r\n\r\nCould you explain to me how so? It's not obvious to me",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/409913212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/410145065",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-410145065",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 410145065,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDE0NTA2NQ==",
    "user": {
      "login": "chaitanyapotti",
      "id": 1688380,
      "node_id": "MDQ6VXNlcjE2ODgzODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1688380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chaitanyapotti",
      "html_url": "https://github.com/chaitanyapotti",
      "followers_url": "https://api.github.com/users/chaitanyapotti/followers",
      "following_url": "https://api.github.com/users/chaitanyapotti/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaitanyapotti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chaitanyapotti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaitanyapotti/subscriptions",
      "organizations_url": "https://api.github.com/users/chaitanyapotti/orgs",
      "repos_url": "https://api.github.com/users/chaitanyapotti/repos",
      "events_url": "https://api.github.com/users/chaitanyapotti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chaitanyapotti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-03T05:01:26Z",
    "updated_at": "2018-08-03T05:01:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "[Here](https://github.com/chaitanyapotti/ElectusProtocol/blob/master/Vault/VaultToken.sol) is a sample implementation which has the \"indexers\" property which allows organization to query the list of all members using web3. \r\n\r\nit also stores the list of previous members. (wasMemberOf can be implemented in JS easily and methods can be implemented to identify when members were removed)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/410145065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435636172",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-435636172",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 435636172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTYzNjE3Mg==",
    "user": {
      "login": "bitcoinbrisbane",
      "id": 8411406,
      "node_id": "MDQ6VXNlcjg0MTE0MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8411406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoinbrisbane",
      "html_url": "https://github.com/bitcoinbrisbane",
      "followers_url": "https://api.github.com/users/bitcoinbrisbane/followers",
      "following_url": "https://api.github.com/users/bitcoinbrisbane/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitcoinbrisbane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitcoinbrisbane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitcoinbrisbane/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoinbrisbane/orgs",
      "repos_url": "https://api.github.com/users/bitcoinbrisbane/repos",
      "events_url": "https://api.github.com/users/bitcoinbrisbane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitcoinbrisbane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-04T02:11:46Z",
    "updated_at": "2018-11-04T02:11:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Its a great start.  Id like to see an interface without the meta data, and as you mentioned a \"name\" property.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435636172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435698423",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-435698423",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 435698423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTY5ODQyMw==",
    "user": {
      "login": "chaitanyapotti",
      "id": 1688380,
      "node_id": "MDQ6VXNlcjE2ODgzODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1688380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chaitanyapotti",
      "html_url": "https://github.com/chaitanyapotti",
      "followers_url": "https://api.github.com/users/chaitanyapotti/followers",
      "following_url": "https://api.github.com/users/chaitanyapotti/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaitanyapotti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chaitanyapotti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaitanyapotti/subscriptions",
      "organizations_url": "https://api.github.com/users/chaitanyapotti/orgs",
      "repos_url": "https://api.github.com/users/chaitanyapotti/repos",
      "events_url": "https://api.github.com/users/chaitanyapotti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chaitanyapotti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-04T19:32:16Z",
    "updated_at": "2018-11-04T19:32:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bitcoinbrisbane  there is an updated version available in the EIP section ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435698423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435705924",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-435705924",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 435705924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTcwNTkyNA==",
    "user": {
      "login": "bitcoinbrisbane",
      "id": 8411406,
      "node_id": "MDQ6VXNlcjg0MTE0MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8411406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoinbrisbane",
      "html_url": "https://github.com/bitcoinbrisbane",
      "followers_url": "https://api.github.com/users/bitcoinbrisbane/followers",
      "following_url": "https://api.github.com/users/bitcoinbrisbane/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitcoinbrisbane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitcoinbrisbane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitcoinbrisbane/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoinbrisbane/orgs",
      "repos_url": "https://api.github.com/users/bitcoinbrisbane/repos",
      "events_url": "https://api.github.com/users/bitcoinbrisbane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitcoinbrisbane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-04T21:05:03Z",
    "updated_at": "2018-11-04T21:05:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @bitcoinbrisbane there is an updated version available in the EIP section\r\n\r\nWhere about?  FYI BlockchainAustralia.org will be rolling this out for our members.  Im looking at writing an EIP that includes this one.  The EIP will be Organisation contract, with levels of MVT.  Members can be promoted or demoted etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435705924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435766289",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-435766289",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 435766289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTc2NjI4OQ==",
    "user": {
      "login": "chaitanyapotti",
      "id": 1688380,
      "node_id": "MDQ6VXNlcjE2ODgzODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1688380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chaitanyapotti",
      "html_url": "https://github.com/chaitanyapotti",
      "followers_url": "https://api.github.com/users/chaitanyapotti/followers",
      "following_url": "https://api.github.com/users/chaitanyapotti/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaitanyapotti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chaitanyapotti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaitanyapotti/subscriptions",
      "organizations_url": "https://api.github.com/users/chaitanyapotti/orgs",
      "repos_url": "https://api.github.com/users/chaitanyapotti/repos",
      "events_url": "https://api.github.com/users/chaitanyapotti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chaitanyapotti/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T06:17:58Z",
    "updated_at": "2018-11-05T06:17:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bitcoinbrisbane I've updated this issue to reflect the latest version of the interface. Please review it now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435766289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435767025",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-435767025",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 435767025,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTc2NzAyNQ==",
    "user": {
      "login": "pb25193",
      "id": 42832605,
      "node_id": "MDQ6VXNlcjQyODMyNjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/42832605?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pb25193",
      "html_url": "https://github.com/pb25193",
      "followers_url": "https://api.github.com/users/pb25193/followers",
      "following_url": "https://api.github.com/users/pb25193/following{/other_user}",
      "gists_url": "https://api.github.com/users/pb25193/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pb25193/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pb25193/subscriptions",
      "organizations_url": "https://api.github.com/users/pb25193/orgs",
      "repos_url": "https://api.github.com/users/pb25193/repos",
      "events_url": "https://api.github.com/users/pb25193/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pb25193/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T06:22:46Z",
    "updated_at": "2018-11-05T06:22:46Z",
    "author_association": "NONE",
    "body": "> Its a great start. Id like to see an interface without the meta data, and as you mentioned a \"name\" property.\r\n\r\n@bitcoinbrisbane \r\nim wondering how it would benefit to remove the metadata? Let me provide the justification why we have kept metadata:\r\nThese contracts(1261) will represent organizational units on the blockchain. The meta data allows for identification of the smart contract without having to maintain a separate server to label them. In order to automatically pull and display the metadata, and attributes in a neat fashion. If you wish, we can get in touch so that i can show you some mock screens of what we are planning to do. \r\n\r\nAbout multi level organizations: Its amazing that you are planning that. It was somewhere down our roadmap as well. Would love if we could discuss with you - if you feel it would help. Also, your organizations would be compatible with the infrastructure(client and scanner) that we are currently building, so it would help us build it better if we stayed in communication.\r\n\r\nFeel free to send an introduction at:\r\npartha@electus.network",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435767025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436018966",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-436018966",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 436018966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjAxODk2Ng==",
    "user": {
      "login": "bitcoinbrisbane",
      "id": 8411406,
      "node_id": "MDQ6VXNlcjg0MTE0MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8411406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoinbrisbane",
      "html_url": "https://github.com/bitcoinbrisbane",
      "followers_url": "https://api.github.com/users/bitcoinbrisbane/followers",
      "following_url": "https://api.github.com/users/bitcoinbrisbane/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitcoinbrisbane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitcoinbrisbane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitcoinbrisbane/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoinbrisbane/orgs",
      "repos_url": "https://api.github.com/users/bitcoinbrisbane/repos",
      "events_url": "https://api.github.com/users/bitcoinbrisbane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitcoinbrisbane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T20:13:45Z",
    "updated_at": "2018-11-05T20:13:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok.  I was just trying to keep the interface smaller.  Ill send you an email about the org contract.  FYI Ill be making a PR for Trust Wallet to be MVT compatible too.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436018966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439588335",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-439588335",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 439588335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU4ODMzNQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T04:54:50Z",
    "updated_at": "2018-11-17T04:54:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ignoring terminology, this entire concept can be implemented using the existing ERC-721. Additionally, the benefit will be that it will be compatible with 99% percent of existing applications.\r\n\r\nHow do it:\r\n\r\n* Use 0xcert \"Abilities\" contract extension (call me, this is not public yet)\r\n* Use convention: token ID = owner address\r\n* Disable transfers other than to the zero address\r\n* Grant mint and burn privileges to owner\r\n* For abilities, use 0xcert Assets\r\n\r\nIn general, I recommend AGAINST creating application-specific EIPS. This is because they have limited utility and nobody will implement them (so they are not actually \"standards\").\r\n\r\nThis is not a thorough review of this EIP and I will have more feedback if making a thorough review.\r\n\r\nIf you have a strong use case definition and are interested in getting it out the door, I can help get it done using existing, battle-tested technology. Just hit me up.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439588335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/500648963",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-500648963",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 500648963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDY0ODk2Mw==",
    "user": {
      "login": "bitcoinbrisbane",
      "id": 8411406,
      "node_id": "MDQ6VXNlcjg0MTE0MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8411406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoinbrisbane",
      "html_url": "https://github.com/bitcoinbrisbane",
      "followers_url": "https://api.github.com/users/bitcoinbrisbane/followers",
      "following_url": "https://api.github.com/users/bitcoinbrisbane/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitcoinbrisbane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitcoinbrisbane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitcoinbrisbane/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoinbrisbane/orgs",
      "repos_url": "https://api.github.com/users/bitcoinbrisbane/repos",
      "events_url": "https://api.github.com/users/bitcoinbrisbane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitcoinbrisbane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-11T01:17:08Z",
    "updated_at": "2019-06-11T01:17:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> \r\n> \r\n> Ignoring terminology, this entire concept can be implemented using the existing ERC-721. Additionally, the benefit will be that it will be compatible with 99% percent of existing applications.\r\n> \r\n> How do it:\r\n> \r\n>     * Use 0xcert \"Abilities\" contract extension (call me, this is not public yet)\r\n> \r\n>     * Use convention: token ID = owner address\r\n> \r\n>     * Disable transfers other than to the zero address\r\n> \r\n>     * Grant mint and burn privileges to owner\r\n> \r\n>     * For abilities, use 0xcert Assets\r\n> \r\n> \r\n> In general, I recommend AGAINST creating application-specific EIPS. This is because they have limited utility and nobody will implement them (so they are not actually \"standards\").\r\n> \r\n> This is not a thorough review of this EIP and I will have more feedback if making a thorough review.\r\n> \r\n> If you have a strong use case definition and are interested in getting it out the door, I can help get it done using existing, battle-tested technology. Just hit me up.\r\n\r\nI disagree.  Creating clean intefaces that are domain specific is a better approach than using a sledge hammer to hit every nail.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/500648963/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/500670773",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-500670773",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 500670773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDY3MDc3Mw==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-11T03:14:18Z",
    "updated_at": "2019-06-11T03:14:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "You are correct, everything should have a clean interface if it will interface with other things.\r\n\r\nIf an interface will be a standard (in scope for publishing an EIP) then it should have widespread use. I don't see that here yet.\r\n\r\nAlso, when designing things, additional complexity over existing solutions should be justified. If you want a way to type all the letters A-Y and numbers 0-9, just buy a (US-version) keyboard which has letters A-Z, don't design your own input method just because domain specific is better.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/500670773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/500674748",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-500674748",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 500674748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDY3NDc0OA==",
    "user": {
      "login": "bitcoinbrisbane",
      "id": 8411406,
      "node_id": "MDQ6VXNlcjg0MTE0MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8411406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoinbrisbane",
      "html_url": "https://github.com/bitcoinbrisbane",
      "followers_url": "https://api.github.com/users/bitcoinbrisbane/followers",
      "following_url": "https://api.github.com/users/bitcoinbrisbane/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitcoinbrisbane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitcoinbrisbane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitcoinbrisbane/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoinbrisbane/orgs",
      "repos_url": "https://api.github.com/users/bitcoinbrisbane/repos",
      "events_url": "https://api.github.com/users/bitcoinbrisbane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitcoinbrisbane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-11T03:40:10Z",
    "updated_at": "2019-06-11T03:40:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> \r\n\r\n> \r\n> \r\n> You are correct, everything should have a clean interface if it will interface with other things.\r\n> \r\n> If an interface will be a standard (in scope for publishing an EIP) then it should have widespread use. I don't see that here yet.\r\n> \r\n> Also, when designing things, additional complexity over existing solutions should be justified. If you want a way to type all the letters A-Y and numbers 0-9, just buy a (US-version) keyboard which has letters A-Z, don't design your own input method just because domain specific is better.\r\n\r\nThats a bit of a strawman argument.  But to use your annalogy, we are discussing the interface, not the implementation.   If I need a Euro sign on my keyboard, ill use a Europen interface.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/500674748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/500913107",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-500913107",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 500913107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDkxMzEwNw==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-11T16:11:16Z",
    "updated_at": "2019-06-11T16:11:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "These analogies are not necessary nor are they providing enough fidelity versus the issue at hand.\r\n\r\nA specific review of the identified requirements of ERC-1261 and how they can be met with existing interfaces and conventions [has been provided above](https://github.com/ethereum/EIPs/issues/1261#issuecomment-439588335). A concrete discussion of those points, and a rebuttal there, would be the best justification for promulgating a new *standard* to address the identified use cases.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/500913107/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093498",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-986093498",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 986093498,
    "node_id": "IC_kwDOAq426M46xpe6",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:11:45Z",
    "updated_at": "2021-12-04T21:11:45Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285370",
    "html_url": "https://github.com/ethereum/EIPs/issues/1261#issuecomment-997285370",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1261",
    "id": 997285370,
    "node_id": "IC_kwDOAq426M47cV36",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T21:12:11Z",
    "updated_at": "2021-12-18T21:12:11Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
