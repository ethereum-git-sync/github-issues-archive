{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/122",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/122/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/122/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/122/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/122",
  "id": 162301721,
  "node_id": "MDU6SXNzdWUxNjIzMDE3MjE=",
  "number": 122,
  "title": "New secondary function visibility modifier 'critical' ",
  "user": {
    "login": "samlavery",
    "id": 717772,
    "node_id": "MDQ6VXNlcjcxNzc3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/717772?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/samlavery",
    "html_url": "https://github.com/samlavery",
    "followers_url": "https://api.github.com/users/samlavery/followers",
    "following_url": "https://api.github.com/users/samlavery/following{/other_user}",
    "gists_url": "https://api.github.com/users/samlavery/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/samlavery/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/samlavery/subscriptions",
    "organizations_url": "https://api.github.com/users/samlavery/orgs",
    "repos_url": "https://api.github.com/users/samlavery/repos",
    "events_url": "https://api.github.com/users/samlavery/events{/privacy}",
    "received_events_url": "https://api.github.com/users/samlavery/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2016-06-25T22:05:23Z",
  "updated_at": "2022-01-30T02:24:08Z",
  "closed_at": "2022-01-30T02:24:08Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I'm proposing adding an additional optional visibility modifier to the current set of 'private, internal, public, external' called 'critical'.  This visibility modifier is enforced at the EVM level, as the others are.  The control logic implied by making a function 'critical' in metadata is simply that more than one instance of the function selector cannot be appended to the callstack at runtime.  Any form of CALL applied to a function selector marked critical that already exists on the stack will result in an instant error throw back to the caller and treated the same as an out of gas exception(CALL returns false).  No additional contract functionality on the callee will be executed, most importantly, not the the fallback function.\n\nI don't know the EVM internal data structures well enough to recommend keeping a separate stack for critical function selectors or to simply iterate over the normal callstack prior to function entrance.  I suspect it's probably more performant to keep a separate callstack, at the expense of a little memory.  No 'busy wait' type blocking algorithm should be considered as a near term feature, due to the sheer amount of complexity it would introduce.  This proposal does not need to make any modification to the existing exception handling, but of course any additional exception type exacerbates the limitations of the current system.  That discussion should be deferred in the interest of getting runtime safety into the vm as soon as possible. \n\nThe whole purpose of this proposal is simply to allow strong guarantees that a function isn't reentrant which can then be the basis for higher level atomic functions without increasing gas costs as an interpreted function modifier based solution would do.  A nice side benefit is that contract authors may begin to check and handle false return values, as they should be doing anyway.  No existing contract code will be impacted and will work as it does today.  \n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/122/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/122/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228624772",
    "html_url": "https://github.com/ethereum/EIPs/issues/122#issuecomment-228624772",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/122",
    "id": 228624772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYyNDc3Mg==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-26T21:43:05Z",
    "updated_at": "2016-06-26T21:43:05Z",
    "author_association": "NONE",
    "body": "I think this is basically possible with normal solidity. Example off the top of my head.\n\n```\nbool lock;\n\nmodifier critical() {\n    if(lock) throw;\n    lock = true;\n    _\n    lock = false;\n}\n```\n\nAdmittedly, this would lock all functions with critical if even one is running, but that's simple enough to fix.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228624772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228632735",
    "html_url": "https://github.com/ethereum/EIPs/issues/122#issuecomment-228632735",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/122",
    "id": 228632735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODYzMjczNQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-27T00:29:23Z",
    "updated_at": "2016-06-27T00:29:33Z",
    "author_association": "MEMBER",
    "body": "@Smithgift that might not deal with re-entrancy attacks where A.f() calls B.g() calls A.h() where h != f; so locking **all** non-constant functions when a critical function is called may in fact be the right thing to do.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228632735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228753747",
    "html_url": "https://github.com/ethereum/EIPs/issues/122#issuecomment-228753747",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/122",
    "id": 228753747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODc1Mzc0Nw==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-27T14:00:06Z",
    "updated_at": "2016-06-27T14:00:06Z",
    "author_association": "NONE",
    "body": "I could see that. However, if a critical function normally calls inside the contract, and those functions are non-constant, things could get painful. There's probably some assembly-level hack to do real reentry detection for the whole contract, by setting some flag before the dispatcher executes.\n\nIt seems that much of the current security issues have to do with the lack of standard (verified?) implementations for common features. (In those days there was no standard library in Ethereum: every coder wrote what was right in his own eyes...) Most of the time, there's no reason to do any specific alterations to a ERC20 token, so why reimplement it again and again?\n\nIn a way, this is happening because for the first time, random people off the Series of Tubes can easily write money-handling code. And most programming is not that dangerous. Just yesterday I implemented A*/Djikstra pathfinding for what may be the third time in my life. It's complex code, and I could probably have found something off npm, but there's no harm in doing it myself. If it finds a slightly suboptimal path, whatevs, But a simple money handling contract that has a recursive send somewhere in it? Ouch.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228753747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/238078257",
    "html_url": "https://github.com/ethereum/EIPs/issues/122#issuecomment-238078257",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/122",
    "id": 238078257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzODA3ODI1Nw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-07T11:53:49Z",
    "updated_at": "2016-08-07T11:53:49Z",
    "author_association": "MEMBER",
    "body": "> I'm proposing adding an additional optional visibility modifier to the current set of 'private, internal, public, external' called 'critical'. This visibility modifier is enforced at the EVM level, as the others are.\n\n@samlavery `private`, `internal`, `public`, `external` are modifiers internal to Solidity. They do not even exist at the JSON ABI level. And the EVM doesn't enforce any of these.\n\n(Read more about the modifiers here: http://solidity.readthedocs.io/en/latest/control-structures.html#function-calls)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/238078257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013794838",
    "html_url": "https://github.com/ethereum/EIPs/issues/122#issuecomment-1013794838",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/122",
    "id": 1013794838,
    "node_id": "IC_kwDOAq426M48bUgW",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-16T02:06:36Z",
    "updated_at": "2022-01-16T02:06:36Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013794838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025053088",
    "html_url": "https://github.com/ethereum/EIPs/issues/122#issuecomment-1025053088",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/122",
    "id": 1025053088,
    "node_id": "IC_kwDOAq426M49GRGg",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-30T02:24:07Z",
    "updated_at": "2022-01-30T02:24:07Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025053088/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
