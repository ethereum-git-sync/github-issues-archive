{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/235/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/235/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/235/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/235",
  "id": 216991539,
  "node_id": "MDU6SXNzdWUyMTY5OTE1Mzk=",
  "number": 235,
  "title": "Inclusion of network ID in consensus and exposure as Opcode allows hard-fork voting with economic commitment",
  "user": {
    "login": "barryWhiteHat",
    "id": 22997678,
    "node_id": "MDQ6VXNlcjIyOTk3Njc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/22997678?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barryWhiteHat",
    "html_url": "https://github.com/barryWhiteHat",
    "followers_url": "https://api.github.com/users/barryWhiteHat/followers",
    "following_url": "https://api.github.com/users/barryWhiteHat/following{/other_user}",
    "gists_url": "https://api.github.com/users/barryWhiteHat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barryWhiteHat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barryWhiteHat/subscriptions",
    "organizations_url": "https://api.github.com/users/barryWhiteHat/orgs",
    "repos_url": "https://api.github.com/users/barryWhiteHat/repos",
    "events_url": "https://api.github.com/users/barryWhiteHat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barryWhiteHat/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2017-03-25T17:55:06Z",
  "updated_at": "2022-01-04T12:19:07Z",
  "closed_at": "2022-01-04T12:17:07Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Preamble\r\n    EIP: <to be assigned>\r\n    Title: <Inclusion of network ID in consensus and exposure as Opcode allows hard-fork voting with economic commitment>\r\n    Author: <barryWhiteHat>\r\n    Type: <Standard Track | Informational | Meta>\r\n    Category (*only required for Standard Track): <Core | Networking | Interface | ERC> \r\n    Status: Draft\r\n    Created: <date created on, in ISO 8601 (2017-03-23) format>\r\n    Requires (*optional): <EIP number(s)>\r\n    Replaces (*optional): <EIP number(s)>\r\n\r\n## Simple Summary\r\nThe replay protection introduced `CHAIN\\_ID` as part of the transaction format to prevent transaction replay across chains.\r\n\r\nBy including `CHAIN\\_ID` in consensus and exposing it in byte code we can build better systems to manage contentious hard forks.\r\n\r\nWhere people sell their tokens on one side of a fork to buy tokens on the other side of the fork.\r\n\r\nWe do all this before the hard fork occurs and propose leveraging this mechanism to vote for hard fork activation in a way where a vote for one side of the chain sells your token on the other chain for tokens on the chain you voted for. \r\n\r\nThis allows the market to settle on a price before a hard-fork. We note that so far hash rate has followed price. If we define the price of both chains before a hard-fork the hash rate should respond to that. \r\n \r\n## Abstract\r\nContentious Hard forks are difficult. Currently we rely in imperfect voting systems. Including the `CHAIN\\_ID` variable in consensus and exposing it to smart contracts will allow us to build smart contracts that can trade tokens on future forks before the fork happens. Using this we can develop better governance that will allow stake holders to come to consensus before a hard fork happens.\r\n\r\n## Motivation\r\nCurrently we use: \r\n1. Carbon voting (where actors vote proportional to amount of ETH they hold), \r\n2. Node voting (where actors vote proportional to number node they control),\r\n3. Miner voting (where actors vote proportional to their hash power). \r\n\r\n\r\nA current proposal is user voting, a token is made by burning a percent of each TX and assigning that as the total that users burns as that users weight. This token is then used in voting. \r\n\r\nCarbon voting is flawed because someone can vote for a hard fork and then sell all their coins on the chain that they voted for. Also it over represents whales, effectively 10 keys control 25.86% of ether. \r\n\r\nNode voting has sybil problems. Miner voting is flawed because it over represents the stake holders that have access to cheap electricity. Also as we mentioned above hash power tends to follow price, miners have nothing at stake here. If a hard fork results in reduction in the price of Ether they will just start mining something else.\r\n\r\nEach of the 4 methods mentioned above is effectively a token weighted vote, however some of the \"tokens\" do not exists on the ethereum block chain (Miner vote, Node voting). But a token could be implemented for these. \r\n\r\nIn the future we may want to use other tokens to decide how a split will occurs. If someone builds a better ethereum based user token we will want to be able to decide hard forks based upon that. For example we would be very interested to see reddit karma or github commit token holders views on a contentious fork.\r\n\r\nThus it is important that we develop a method to use staked voting to active hard forks which includes token abstraction and economic commitment when voting. Including of the `network_id` in consensus and exposure to opcodes will allow this.\r\n\r\n## Specification\r\nWhen block.number >= FORK\\_BLKNUM, include `network_id` in consensus and expose it as EVM opcode `netID`\r\n\r\n## Rationale\r\nWe propose the inclusion of the networkID in the EVM and consensus methods as well as its exposure to a new opcode `netID`. This will allow smart contracts to be developed that follows the flow:\r\n\r\n1. Proponents of ether side of the hard fork call `deposit(id)` where `id` is the id of the network they want to move their funds to. \r\n2. After the hard fork each user can withdraw (call `withdraw()`) their coins only on that chain. They also get a share of the coins that the other side of the hard fork deposited on that chain, proportaional to the number of coins they deposited. \r\n\r\n\r\nThey basically trade coins on the forked and unforked chain with each other. \r\n\r\nThis way everyone has more coins on the chain they support. And no coins on the chain they don't support. The precise mechanism of how these contracts will work is outside the scope of this EIP. But a simple solution is described below:\r\n\r\n```\r\ndef deposit(uint id) {\r\n    dep[owner].owner = msg.sender;\r\n    dep[owner].value += msg.value;\r\n    dep[owner].id = id;\r\n    chainTotal[id] += msg.value;\r\n    total += msg.value;\r\n}\r\n\r\ndef withdraw(uint id) {\r\n    uint withdraw = (dep[owner].value +  (total - chainTotal[id])\r\n                     * (dep[owner].value/chainTotal[id]);\r\n    if (now < hardFork) throw;\r\n    if this.netID != dep[owner].netID throw;\r\n    dep[msg.sender].send(withdraw));\r\n}\r\n```\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "barryWhiteHat",
    "id": 22997678,
    "node_id": "MDQ6VXNlcjIyOTk3Njc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/22997678?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barryWhiteHat",
    "html_url": "https://github.com/barryWhiteHat",
    "followers_url": "https://api.github.com/users/barryWhiteHat/followers",
    "following_url": "https://api.github.com/users/barryWhiteHat/following{/other_user}",
    "gists_url": "https://api.github.com/users/barryWhiteHat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barryWhiteHat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barryWhiteHat/subscriptions",
    "organizations_url": "https://api.github.com/users/barryWhiteHat/orgs",
    "repos_url": "https://api.github.com/users/barryWhiteHat/repos",
    "events_url": "https://api.github.com/users/barryWhiteHat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barryWhiteHat/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/235/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/235/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289232410",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-289232410",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 289232410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTIzMjQxMA==",
    "user": {
      "login": "tawaren",
      "id": 22982658,
      "node_id": "MDQ6VXNlcjIyOTgyNjU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/22982658?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tawaren",
      "html_url": "https://github.com/tawaren",
      "followers_url": "https://api.github.com/users/tawaren/followers",
      "following_url": "https://api.github.com/users/tawaren/following{/other_user}",
      "gists_url": "https://api.github.com/users/tawaren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tawaren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tawaren/subscriptions",
      "organizations_url": "https://api.github.com/users/tawaren/orgs",
      "repos_url": "https://api.github.com/users/tawaren/repos",
      "events_url": "https://api.github.com/users/tawaren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tawaren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-25T19:04:18Z",
    "updated_at": "2017-03-25T19:04:18Z",
    "author_association": "NONE",
    "body": "Their is a flaw in your deposit function. If its called twice with different networkId's then the second call will transfer the deposited ether from the first call to the networkId from the second call, but the old deposit is still recorded under `chainTotal[id]` with the old networkId.\r\nAs an example: `deposite(0)` with `5 wei` followed by a `deposite(1)` with `0 wei` leads to a situation where `chainTotal[0] == 5` and `chainTotal[1] == 0` but `dep[owner].value == 5` and `dep[owner].id == 1`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289232410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289232501",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-289232501",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 289232501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTIzMjUwMQ==",
    "user": {
      "login": "barryWhiteHat",
      "id": 22997678,
      "node_id": "MDQ6VXNlcjIyOTk3Njc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/22997678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barryWhiteHat",
      "html_url": "https://github.com/barryWhiteHat",
      "followers_url": "https://api.github.com/users/barryWhiteHat/followers",
      "following_url": "https://api.github.com/users/barryWhiteHat/following{/other_user}",
      "gists_url": "https://api.github.com/users/barryWhiteHat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barryWhiteHat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barryWhiteHat/subscriptions",
      "organizations_url": "https://api.github.com/users/barryWhiteHat/orgs",
      "repos_url": "https://api.github.com/users/barryWhiteHat/repos",
      "events_url": "https://api.github.com/users/barryWhiteHat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barryWhiteHat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-25T19:05:55Z",
    "updated_at": "2017-03-25T19:05:55Z",
    "author_association": "NONE",
    "body": "This is sudo code to explain the idea. I did not write it to be secure, or test it. I just wrote it to help explaining. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289232501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289248520",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-289248520",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 289248520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTI0ODUyMA==",
    "user": {
      "login": "KenKappler",
      "id": 7942699,
      "node_id": "MDQ6VXNlcjc5NDI2OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7942699?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KenKappler",
      "html_url": "https://github.com/KenKappler",
      "followers_url": "https://api.github.com/users/KenKappler/followers",
      "following_url": "https://api.github.com/users/KenKappler/following{/other_user}",
      "gists_url": "https://api.github.com/users/KenKappler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KenKappler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KenKappler/subscriptions",
      "organizations_url": "https://api.github.com/users/KenKappler/orgs",
      "repos_url": "https://api.github.com/users/KenKappler/repos",
      "events_url": "https://api.github.com/users/KenKappler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KenKappler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-26T00:08:38Z",
    "updated_at": "2017-03-26T00:40:30Z",
    "author_association": "MEMBER",
    "body": "I am not sure this requires an op code - hard forks will usually have some change in behaviour of the network which is detectable by a smart contract. \r\n\r\nThe dao hard fork had a very large balance moved and different code at an address, the bloat hard fork had new behaviour and gas prices for certain op codes etc...\r\n\r\nHere is an implementation of a fork coin contract I built for the DAO fork:\r\n\r\nhttps://github.com/KenKappler/fork-coins/blob/master/ForkCoin.sol\r\n\r\nEdit: as someone pointed out the dao fork didnt change code at an address so the above would have needed to check a balance not code at.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289248520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289251617",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-289251617",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 289251617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTI1MTYxNw==",
    "user": {
      "login": "barryWhiteHat",
      "id": 22997678,
      "node_id": "MDQ6VXNlcjIyOTk3Njc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/22997678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barryWhiteHat",
      "html_url": "https://github.com/barryWhiteHat",
      "followers_url": "https://api.github.com/users/barryWhiteHat/followers",
      "following_url": "https://api.github.com/users/barryWhiteHat/following{/other_user}",
      "gists_url": "https://api.github.com/users/barryWhiteHat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barryWhiteHat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barryWhiteHat/subscriptions",
      "organizations_url": "https://api.github.com/users/barryWhiteHat/orgs",
      "repos_url": "https://api.github.com/users/barryWhiteHat/repos",
      "events_url": "https://api.github.com/users/barryWhiteHat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barryWhiteHat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-26T01:32:29Z",
    "updated_at": "2017-03-26T01:32:29Z",
    "author_association": "NONE",
    "body": "I don't think the bloat HF or the gas price hard fork could have been detected from inside the EVM. Can you think of a way? \r\n\r\nI am proposing a method to allow all hard forks to be voted upon by the community. Currently the opcode is the only method that will allow 100% coverage.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289251617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289252250",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-289252250",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 289252250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTI1MjI1MA==",
    "user": {
      "login": "alex-miller-0",
      "id": 7378490,
      "node_id": "MDQ6VXNlcjczNzg0OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7378490?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-miller-0",
      "html_url": "https://github.com/alex-miller-0",
      "followers_url": "https://api.github.com/users/alex-miller-0/followers",
      "following_url": "https://api.github.com/users/alex-miller-0/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-miller-0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-miller-0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-miller-0/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-miller-0/orgs",
      "repos_url": "https://api.github.com/users/alex-miller-0/repos",
      "events_url": "https://api.github.com/users/alex-miller-0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-miller-0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-26T01:50:49Z",
    "updated_at": "2017-03-26T01:50:49Z",
    "author_association": "NONE",
    "body": "Interesting, but does this require all ether holders to deposit ahead of the fork? That sounds like a nightmare. Also, who calculates the redistribution? That sounds expensive.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289252250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289280840",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-289280840",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 289280840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTI4MDg0MA==",
    "user": {
      "login": "barryWhiteHat",
      "id": 22997678,
      "node_id": "MDQ6VXNlcjIyOTk3Njc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/22997678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barryWhiteHat",
      "html_url": "https://github.com/barryWhiteHat",
      "followers_url": "https://api.github.com/users/barryWhiteHat/followers",
      "following_url": "https://api.github.com/users/barryWhiteHat/following{/other_user}",
      "gists_url": "https://api.github.com/users/barryWhiteHat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barryWhiteHat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barryWhiteHat/subscriptions",
      "organizations_url": "https://api.github.com/users/barryWhiteHat/orgs",
      "repos_url": "https://api.github.com/users/barryWhiteHat/repos",
      "events_url": "https://api.github.com/users/barryWhiteHat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barryWhiteHat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-26T12:44:46Z",
    "updated_at": "2017-03-26T12:44:46Z",
    "author_association": "NONE",
    "body": "It only requires those who want to buy or sell before the hardfork to deposit. If someone does not want to do that they can just keep eth in their wallet and be able to sell on both networks after the fact. \r\n\r\nThe redistribution calculation is out of the scope of this proposal. In the example (which is just a place holder) the redistribution was proportional to the amount you deposited on your preferred chain. From a game theory point of view it may be required to add a first mover benefit to encourage this action. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289280840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289300259",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-289300259",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 289300259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTMwMDI1OQ==",
    "user": {
      "login": "alex-miller-0",
      "id": 7378490,
      "node_id": "MDQ6VXNlcjczNzg0OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7378490?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-miller-0",
      "html_url": "https://github.com/alex-miller-0",
      "followers_url": "https://api.github.com/users/alex-miller-0/followers",
      "following_url": "https://api.github.com/users/alex-miller-0/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-miller-0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-miller-0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-miller-0/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-miller-0/orgs",
      "repos_url": "https://api.github.com/users/alex-miller-0/repos",
      "events_url": "https://api.github.com/users/alex-miller-0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-miller-0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-26T17:25:00Z",
    "updated_at": "2017-03-26T17:26:08Z",
    "author_association": "NONE",
    "body": "Cool. That makes more sense.\r\n\r\n> The redistribution calculation is out of the scope of this proposal\r\n\r\nThe algorithm may be out of scope, but the mechanism of the calculation should not be.\r\n\r\nPerhaps something like this:\r\n\r\n```\r\nuint chain_a_sum;\r\nuint chain_b_sum;\r\nuint chain_a_deposits = mapping(address => uint);\r\nuint chain_b_deposits = mapping(address => uint);\r\n\r\nfunction deposit(bool chainA) {\r\n  if (chainA == true && chain_a_deposits[msg.sender] == 0) {\r\n    chain_a_sum += msg.value;\r\n  } else {\r\n    chain_b_sum += msg.value;\r\n  }\r\n}\r\n\r\nfunction withdrawA() {\r\n  if (block.number > FORK_BLOCK_NUM) {\r\n    uint deposit = chain_a_deposits[msg.sender]; \r\n    chain_a_deposits[msg.sender] = 0;\r\n    uint extra = (deposit * chain_b_sum) / chain_a_sum;\r\n    msg.sender.send(deposit + extra);\r\n  }\r\n}\r\n```\r\n\r\nOf course this would probably run into some floating point problems, but we could hack something together that works.\r\n\r\nThe point is that the logic would need to be contained in the smart contract and paid for by users.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289300259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289304136",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-289304136",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 289304136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTMwNDEzNg==",
    "user": {
      "login": "josojo",
      "id": 7348154,
      "node_id": "MDQ6VXNlcjczNDgxNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7348154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josojo",
      "html_url": "https://github.com/josojo",
      "followers_url": "https://api.github.com/users/josojo/followers",
      "following_url": "https://api.github.com/users/josojo/following{/other_user}",
      "gists_url": "https://api.github.com/users/josojo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josojo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josojo/subscriptions",
      "organizations_url": "https://api.github.com/users/josojo/orgs",
      "repos_url": "https://api.github.com/users/josojo/repos",
      "events_url": "https://api.github.com/users/josojo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josojo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-26T18:24:15Z",
    "updated_at": "2017-03-26T18:24:15Z",
    "author_association": "NONE",
    "body": "Do I get it right, that there will be  link between network chain_ID and some logic(e.g. transaction processing and max block size)  in all clients run by miners/stakers?\r\nIf so, who guaranties that no malicious \"CORE developer\" changes the link/assignment of the chain_ID to the logic in the client?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289304136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289316885",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-289316885",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 289316885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTMxNjg4NQ==",
    "user": {
      "login": "barryWhiteHat",
      "id": 22997678,
      "node_id": "MDQ6VXNlcjIyOTk3Njc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/22997678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barryWhiteHat",
      "html_url": "https://github.com/barryWhiteHat",
      "followers_url": "https://api.github.com/users/barryWhiteHat/followers",
      "following_url": "https://api.github.com/users/barryWhiteHat/following{/other_user}",
      "gists_url": "https://api.github.com/users/barryWhiteHat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barryWhiteHat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barryWhiteHat/subscriptions",
      "organizations_url": "https://api.github.com/users/barryWhiteHat/orgs",
      "repos_url": "https://api.github.com/users/barryWhiteHat/repos",
      "events_url": "https://api.github.com/users/barryWhiteHat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barryWhiteHat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-26T21:17:08Z",
    "updated_at": "2017-03-26T21:17:08Z",
    "author_association": "NONE",
    "body": "@alex-miller-0 that is pretty much what I had in mind when thinking about this. But there may be a requirement to give some advantage to first movers. Also after this is implemented I hope to see multiple competing mechanisms. \r\n\r\n@josojo right now if someone did that the transactions would never get mined due to the [replay protection EIP155](https://github.com/ethereum/EIPs/issues/155) using the chain_ID in the transaction format. \r\n\r\nIf after this proposal is implemented someone edited a client to use another chain_ID that client would hard fork and not. If someone did this maliciously just before a hard fork. Their chain would get over taken due to larger hash rate and get ignored by all other clients.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289316885/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/323088482",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-323088482",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 323088482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzA4ODQ4Mg==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-17T14:21:55Z",
    "updated_at": "2017-08-17T14:21:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "related to #182 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/323088482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/365881137",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-365881137",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 365881137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTg4MTEzNw==",
    "user": {
      "login": "jamesray1",
      "id": 16969914,
      "node_id": "MDQ6VXNlcjE2OTY5OTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16969914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesray1",
      "html_url": "https://github.com/jamesray1",
      "followers_url": "https://api.github.com/users/jamesray1/followers",
      "following_url": "https://api.github.com/users/jamesray1/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesray1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesray1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesray1/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesray1/orgs",
      "repos_url": "https://api.github.com/users/jamesray1/repos",
      "events_url": "https://api.github.com/users/jamesray1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesray1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T10:10:12Z",
    "updated_at": "2018-02-15T10:10:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hard fork voting seems like a good idea. Personally I've come to lean towards disapproving of non-trivial technical hard forks that return lost or stuck funds when there's no proof of who owns the funds and how the funds were lost/stuck. But that's a sub-issue of hard forks, it would also apply for other potentially contentious forks e.g. the transition to PoS.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/365881137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/365882020",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-365882020",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 365882020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTg4MjAyMA==",
    "user": {
      "login": "jamesray1",
      "id": 16969914,
      "node_id": "MDQ6VXNlcjE2OTY5OTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16969914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesray1",
      "html_url": "https://github.com/jamesray1",
      "followers_url": "https://api.github.com/users/jamesray1/followers",
      "following_url": "https://api.github.com/users/jamesray1/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesray1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesray1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesray1/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesray1/orgs",
      "repos_url": "https://api.github.com/users/jamesray1/repos",
      "events_url": "https://api.github.com/users/jamesray1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesray1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T10:13:36Z",
    "updated_at": "2018-02-15T10:13:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like user based voting, although I suggest that tokens are generated with a relatively fixed amount per transaction, similar to gas fees. (If you send 1000 ETH the gas fee isn't 1000x as expensive as sending 1 ETH.) I also like identity based voting as it creates a UBI of votes for everyone, which is truly democratic, providing liquidity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/365882020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/365882716",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-365882716",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 365882716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTg4MjcxNg==",
    "user": {
      "login": "jamesray1",
      "id": 16969914,
      "node_id": "MDQ6VXNlcjE2OTY5OTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16969914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesray1",
      "html_url": "https://github.com/jamesray1",
      "followers_url": "https://api.github.com/users/jamesray1/followers",
      "following_url": "https://api.github.com/users/jamesray1/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesray1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesray1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesray1/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesray1/orgs",
      "repos_url": "https://api.github.com/users/jamesray1/repos",
      "events_url": "https://api.github.com/users/jamesray1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesray1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T10:16:09Z",
    "updated_at": "2018-02-15T10:17:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tokens for niche users would also have benefits, although users that participate more in commits, on Reddit, etc., are more likely to get delegated more votes (e.g. in an identity based vote token).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/365882716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003685301",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-1003685301",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 1003685301,
    "node_id": "IC_kwDOAq426M470wW1",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T09:11:04Z",
    "updated_at": "2022-01-02T09:11:04Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003685301/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1004760992",
    "html_url": "https://github.com/ethereum/EIPs/issues/235#issuecomment-1004760992",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/235",
    "id": 1004760992,
    "node_id": "IC_kwDOAq426M4742-g",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-04T12:19:07Z",
    "updated_at": "2022-01-04T12:19:07Z",
    "author_association": "MEMBER",
    "body": "This was in the end solved by [EIP-1344](https://eips.ethereum.org/EIPS/eip-1344).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1004760992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
