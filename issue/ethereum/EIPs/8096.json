{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/8096",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/8096",
  "id": 2070708602,
  "node_id": "I_kwDOAq426M57bIF6",
  "number": 8096,
  "title": "Change of owner of the dividend contract",
  "user": {
    "login": "Lordymine",
    "id": 91433493,
    "node_id": "MDQ6VXNlcjkxNDMzNDkz",
    "avatar_url": "https://avatars.githubusercontent.com/u/91433493?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Lordymine",
    "html_url": "https://github.com/Lordymine",
    "followers_url": "https://api.github.com/users/Lordymine/followers",
    "following_url": "https://api.github.com/users/Lordymine/following{/other_user}",
    "gists_url": "https://api.github.com/users/Lordymine/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Lordymine/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Lordymine/subscriptions",
    "organizations_url": "https://api.github.com/users/Lordymine/orgs",
    "repos_url": "https://api.github.com/users/Lordymine/repos",
    "events_url": "https://api.github.com/users/Lordymine/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Lordymine/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 4455553162,
      "node_id": "LA_kwDOAq426M8AAAABCZJYig",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/bug",
      "name": "bug",
      "color": "CA3515",
      "default": true,
      "description": "If this is a PR, this PR fixes a bug. If this is an issue, this issue reports a bug."
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2024-01-08T15:38:19Z",
  "updated_at": "2024-01-09T17:07:07Z",
  "closed_at": "2024-01-09T17:04:40Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "### Pull Request\n\n_No response_\n\n### What happened?\n\nI have a client who forked this dividend contract, but he did something that prevents him from changing the owner of this contract. I would like to know if you could help me change the owner of the dividend contract. My client has 560 BNBs stuck in the contract and he needs to redeem it, as the contract will be exchanged for another\n\n### Relevant log output\n\n_No response_",
  "closed_by": {
    "login": "Pandapip1",
    "id": 45835846,
    "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
    "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Pandapip1",
    "html_url": "https://github.com/Pandapip1",
    "followers_url": "https://api.github.com/users/Pandapip1/followers",
    "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
    "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
    "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
    "repos_url": "https://api.github.com/users/Pandapip1/repos",
    "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/8096/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883426149",
    "html_url": "https://github.com/ethereum/EIPs/issues/8096#issuecomment-1883426149",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096",
    "id": 1883426149,
    "node_id": "IC_kwDOAq426M5wQs1l",
    "user": {
      "login": "Coretaker101",
      "id": 127451438,
      "node_id": "U_kgDOB5jBLg",
      "avatar_url": "https://avatars.githubusercontent.com/u/127451438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Coretaker101",
      "html_url": "https://github.com/Coretaker101",
      "followers_url": "https://api.github.com/users/Coretaker101/followers",
      "following_url": "https://api.github.com/users/Coretaker101/following{/other_user}",
      "gists_url": "https://api.github.com/users/Coretaker101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Coretaker101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Coretaker101/subscriptions",
      "organizations_url": "https://api.github.com/users/Coretaker101/orgs",
      "repos_url": "https://api.github.com/users/Coretaker101/repos",
      "events_url": "https://api.github.com/users/Coretaker101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Coretaker101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-09T16:55:44Z",
    "updated_at": "2024-01-09T16:55:44Z",
    "author_association": "NONE",
    "body": "Hmmmm",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883426149/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883440339",
    "html_url": "https://github.com/ethereum/EIPs/issues/8096#issuecomment-1883440339",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096",
    "id": 1883440339,
    "node_id": "IC_kwDOAq426M5wQwTT",
    "user": {
      "login": "Lordymine",
      "id": 91433493,
      "node_id": "MDQ6VXNlcjkxNDMzNDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/91433493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lordymine",
      "html_url": "https://github.com/Lordymine",
      "followers_url": "https://api.github.com/users/Lordymine/followers",
      "following_url": "https://api.github.com/users/Lordymine/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lordymine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lordymine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lordymine/subscriptions",
      "organizations_url": "https://api.github.com/users/Lordymine/orgs",
      "repos_url": "https://api.github.com/users/Lordymine/repos",
      "events_url": "https://api.github.com/users/Lordymine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lordymine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-09T17:03:06Z",
    "updated_at": "2024-01-09T17:03:06Z",
    "author_association": "NONE",
    "body": "The source code of the contract `// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./SafeMathUint.sol\";\r\nimport \"./SafeMathInt.sol\";\r\nimport \"./DividendPayingTokenInterface.sol\";\r\nimport \"./DividendPayingTokenOptionalInterface.sol\";\r\n\r\n\r\n/// @title Dividend-Paying Token\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\r\n///  to token holders as dividends and allows token holders to withdraw their dividends.\r\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\r\ncontract DividendPayingToken is ERC20, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n  using SafeMath for uint256;\r\n  using SafeMathUint for uint256;\r\n  using SafeMathInt for int256;\r\n\r\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n  // For more discussion about choosing the value of `magnitude`,\r\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n  uint256 constant internal magnitude = 2**128;\r\n\r\n  uint256 internal magnifiedDividendPerShare;\r\n\r\n  // About dividendCorrection:\r\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n  //   `dividendOf(_user)` should not be changed,\r\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n\r\n  uint256 public totalDividendsDistributed;\r\n\r\n  constructor(string memory _name, string memory _symbol) public ERC20(_name, _symbol) {\r\n\r\n  }\r\n\r\n  /// @dev Distributes dividends whenever ether is paid to this contract.\r\n  receive() external payable {\r\n    distributeDividends();\r\n  }\r\n\r\n  /// @notice Distributes ether to token holders as dividends.\r\n  /// @dev It reverts if the total supply of tokens is 0.\r\n  /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\r\n  /// About undistributed ether:\r\n  ///   In each distribution, there is a small amount of ether not distributed,\r\n  ///     the magnified amount of which is\r\n  ///     `(msg.value * magnitude) % totalSupply()`.\r\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\r\n  ///     (de-magnified) in a distribution can be less than 1 wei.\r\n  ///   We can actually keep track of the undistributed ether in a distribution\r\n  ///     and try to distribute it in the next distribution,\r\n  ///     but keeping track of such data on-chain costs much more than\r\n  ///     the saved ether, so we don't do that.\r\n  function distributeDividends() public override payable {\r\n    require(totalSupply() > 0);\r\n\r\n    if (msg.value > 0) {\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n        (msg.value).mul(magnitude) / totalSupply()\r\n      );\r\n      emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n    }\r\n  }\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n  function withdrawDividend() public virtual override {\r\n    _withdrawDividendOfUser(msg.sender);\r\n  }\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n    if (_withdrawableDividend > 0) {\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n      (bool success,) = user.call{value: _withdrawableDividend, gas: 3000}(\"\");\r\n\r\n      if(!success) {\r\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n        return 0;\r\n      }\r\n\r\n      return _withdrawableDividend;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n\r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function dividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawableDividendOf(_owner);\r\n  }\r\n\r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n  }\r\n\r\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawnDividends[_owner];\r\n  }\r\n\r\n\r\n  /// @notice View the amount of dividend in wei that an address has earned in total.\r\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n  }\r\n\r\n  /// @dev Internal function that transfer tokens from one address to another.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param from The address to transfer from.\r\n  /// @param to The address to transfer to.\r\n  /// @param value The amount to be transferred.\r\n  function _transfer(address from, address to, uint256 value) internal virtual override {\r\n    require(false);\r\n\r\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n  }\r\n\r\n  /// @dev Internal function that mints tokens to an account.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param account The account that will receive the created tokens.\r\n  /// @param value The amount that will be created.\r\n  function _mint(address account, uint256 value) internal override {\r\n    super._mint(account, value);\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n\r\n  /// @dev Internal function that burns an amount of the token of a given account.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param account The account whose tokens will be burnt.\r\n  /// @param value The amount that will be burnt.\r\n  function _burn(address account, uint256 value) internal override {\r\n    super._burn(account, value);\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n\r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n    uint256 currentBalance = balanceOf(account);\r\n\r\n    if(newBalance > currentBalance) {\r\n      uint256 mintAmount = newBalance.sub(currentBalance);\r\n      _mint(account, mintAmount);\r\n    } else if(newBalance < currentBalance) {\r\n      uint256 burnAmount = currentBalance.sub(newBalance);\r\n      _burn(account, burnAmount);\r\n    }\r\n  }\r\n}`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883440339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883442753",
    "html_url": "https://github.com/ethereum/EIPs/issues/8096#issuecomment-1883442753",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096",
    "id": 1883442753,
    "node_id": "IC_kwDOAq426M5wQw5B",
    "user": {
      "login": "Lordymine",
      "id": 91433493,
      "node_id": "MDQ6VXNlcjkxNDMzNDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/91433493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lordymine",
      "html_url": "https://github.com/Lordymine",
      "followers_url": "https://api.github.com/users/Lordymine/followers",
      "following_url": "https://api.github.com/users/Lordymine/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lordymine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lordymine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lordymine/subscriptions",
      "organizations_url": "https://api.github.com/users/Lordymine/orgs",
      "repos_url": "https://api.github.com/users/Lordymine/repos",
      "events_url": "https://api.github.com/users/Lordymine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lordymine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-09T17:04:26Z",
    "updated_at": "2024-01-09T17:04:26Z",
    "author_association": "NONE",
    "body": "@Coretaker101 my client removed the dividend contract from within the functions of the owner contract, the contro owner still remains the owner, but we are not able to withdraw the funds in bnb from this dividend contract to be able to send it to another contract",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883442753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883443221",
    "html_url": "https://github.com/ethereum/EIPs/issues/8096#issuecomment-1883443221",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096",
    "id": 1883443221,
    "node_id": "IC_kwDOAq426M5wQxAV",
    "user": {
      "login": "Pandapip1",
      "id": 45835846,
      "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pandapip1",
      "html_url": "https://github.com/Pandapip1",
      "followers_url": "https://api.github.com/users/Pandapip1/followers",
      "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
      "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
      "repos_url": "https://api.github.com/users/Pandapip1/repos",
      "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-09T17:04:40Z",
    "updated_at": "2024-01-09T17:04:40Z",
    "author_association": "MEMBER",
    "body": "This is not the correct place to discuss this. It is unlikely that your client's funds are recoverable.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883443221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883445953",
    "html_url": "https://github.com/ethereum/EIPs/issues/8096#issuecomment-1883445953",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096",
    "id": 1883445953,
    "node_id": "IC_kwDOAq426M5wQxrB",
    "user": {
      "login": "Lordymine",
      "id": 91433493,
      "node_id": "MDQ6VXNlcjkxNDMzNDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/91433493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lordymine",
      "html_url": "https://github.com/Lordymine",
      "followers_url": "https://api.github.com/users/Lordymine/followers",
      "following_url": "https://api.github.com/users/Lordymine/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lordymine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lordymine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lordymine/subscriptions",
      "organizations_url": "https://api.github.com/users/Lordymine/orgs",
      "repos_url": "https://api.github.com/users/Lordymine/repos",
      "events_url": "https://api.github.com/users/Lordymine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lordymine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-09T17:05:55Z",
    "updated_at": "2024-01-09T17:05:55Z",
    "author_association": "NONE",
    "body": "@Pandapip1 ok thx, sorry for this",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883445953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883448972",
    "html_url": "https://github.com/ethereum/EIPs/issues/8096#issuecomment-1883448972",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/8096",
    "id": 1883448972,
    "node_id": "IC_kwDOAq426M5wQyaM",
    "user": {
      "login": "Lordymine",
      "id": 91433493,
      "node_id": "MDQ6VXNlcjkxNDMzNDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/91433493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lordymine",
      "html_url": "https://github.com/Lordymine",
      "followers_url": "https://api.github.com/users/Lordymine/followers",
      "following_url": "https://api.github.com/users/Lordymine/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lordymine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lordymine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lordymine/subscriptions",
      "organizations_url": "https://api.github.com/users/Lordymine/orgs",
      "repos_url": "https://api.github.com/users/Lordymine/repos",
      "events_url": "https://api.github.com/users/Lordymine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lordymine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2024-01-09T17:07:06Z",
    "updated_at": "2024-01-09T17:07:06Z",
    "author_association": "NONE",
    "body": "I was just looking for help from people more experienced than me, I don't want to steal the funds from the contract, my client owns the company that holds this contract, but he made a mistake when exchanging contracts, invalidating the dividend contract",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1883448972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
