{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1503",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1503",
  "id": 371198182,
  "node_id": "MDU6SXNzdWUzNzExOTgxODI=",
  "number": 1503,
  "title": "ERC-54 Upgradable Smart Contract (USC)",
  "user": {
    "login": "swordsoul646",
    "id": 11941939,
    "node_id": "MDQ6VXNlcjExOTQxOTM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/11941939?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/swordsoul646",
    "html_url": "https://github.com/swordsoul646",
    "followers_url": "https://api.github.com/users/swordsoul646/followers",
    "following_url": "https://api.github.com/users/swordsoul646/following{/other_user}",
    "gists_url": "https://api.github.com/users/swordsoul646/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/swordsoul646/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/swordsoul646/subscriptions",
    "organizations_url": "https://api.github.com/users/swordsoul646/orgs",
    "repos_url": "https://api.github.com/users/swordsoul646/repos",
    "events_url": "https://api.github.com/users/swordsoul646/events{/privacy}",
    "received_events_url": "https://api.github.com/users/swordsoul646/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2018-10-17T17:57:14Z",
  "updated_at": "2021-12-18T21:11:19Z",
  "closed_at": "2021-12-18T21:11:19Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "***\r\neip: 1504\r\ntitle: ERC-1504 Upgradable Smart Contract\r\nauthor: Kaidong Wu <wukd94@pku.edu.cn>, Chuqiao Ren <cr025@bucknell.edu>, Ruthia He <rujiahe@gmail.com>, Yun Ma <mayun@pku.edu.cn>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/1503\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-10-17\r\n***\r\n\r\n## Simple Summary\r\n\r\nA standard interface/guideline that makes a smart contract upgradable. \r\n\r\n## Abstract\r\n\r\nEthereum smart contracts have suffered a number of security issues in the past few years. The cost of fixing such a bug in smart contract is significant; for example, the consequences of The DAO attack in June 2016 caused tremendous financial loss and the hard fork of Ethereum blockchain.\r\n\r\nThe following standard makes it possible to upgrade a standard API within smart contracts. This standard provides basic functionalities to upgrade the operations of the contract without data migration. To ensure the decentralization/community interests, it also contains a voting mechanism to control the upgrading process. \r\n\r\n## Motivation\r\n\r\nSmart contract is immutable after deployment. If any security risk is identified or program bug is detected, developers always have to destruct the old contract, deploy a new one and potentially migrate the data (hard fork) to the new contract. In some cases, deploying a smart contract with bugs and potential security vulnerabilities can cause a significant amount of financial loss.  \r\n\r\nWe propose this upgradable contract to fix the current situation. With the upgradable contract, developers can deploy a new version of smart contract after previous deployment and retain the data at the same time. \r\n\r\nFor example, after an ERC20-compliant token contract is deployed, the users exploit a vulnerability in the source code.  Without the support of upgradable contract, developers have to fix this issue by deploy a new, secured contract otherwise the attackers would take advantage of the security hole, which may cause a tremendous financial loss. A challenge is how to migrate data from the old contract to a new one. With the upgradable contract below, this will become relatively easy as developers only have to upgrade the Handler contract to fix bugs while the Data contract will remain the same.\r\n\r\n## Specification\r\n\r\nThe upgradable contract consists of three parts:\r\n\r\n- **Handler contract** (implements **Handler interface**) defines operations and provides services. This contract can be upgraded;\r\n- **Data contract** keeps the resources (data) and is controlled by the Handler contract;\r\n- **Upgrader contract (optional)** deals with the voting mechanism and upgrades the Handler contract. The voters are pre-defined by the contract owner. \r\n\r\n> The following codes are exact copies of the [ERC-1504 Upgradable Smart Contract.](https://gist.github.com/swordghost/969648793ed54fdf027cb6df1b894b75)\r\n\r\n### Handler contract and Handler interface\r\n\r\nFunctions of the Handler contract vary with requirements, so developers would better design interfaces for Handler contracts to limit them and make sure external applications are always supported.\r\n\r\nBelow is the specification of Handler interface. In the Handler interface we define the following actions:\r\n\r\n- Initialize the Data contract;\r\n- Register the Upgrader contract address;\r\n- Destruct the Handler contract after upgrading is done;\r\n- Verify the current Handler is the working one → it should always return true.\r\n\r\nDevelopers have to define their business-related functions as well.\r\n\r\n\r\n```\r\n/// Handler interface.\r\n/// Handler defines business-elated functions.\r\n/// Use the interface to ensure that your external services are always supported.\r\n/// Because of function live(), we design IHandler as an abstract contract rather than a true interface.\r\ncontract IHandler {\r\n\r\n    /// Initialize the data contarct.\r\n    /// @param  _str    value of exmStr of Data contract.\r\n    /// @param  _int    value of exmInt of Data contract.\r\n    /// @param  _array  value of exmArray of Data contract.\r\n    function initialize (string _str, uint256 _int, uint16 [] _array) public;\r\n\r\n    /// Register Upgrader contract address.\r\n    /// @param  _upgraderAddr   address of the Upgrader contract.\r\n    function registerUpgrader (address _upgraderAddr) external;\r\n\r\n    /// Upgrader contract calls this to check if it is registered.\r\n    /// @return if the Upgrader contract is registered.\r\n    function isUpgraderRegistered () external view returns(bool);\r\n\r\n    /// Handler has been upgraded so the original one has to self-destruct.\r\n    function done() external;\r\n\r\n    /// Check if the Handler contract is a working Handler contract.\r\n    /// It is used to prove the contract is a Handler contract.\r\n    /// @return always true.\r\n    function live() external pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    /** Functions - define functions here */\r\n\r\n    /** Events - add events here */\r\n}\r\n```\r\n\r\n\r\nThe process of deploying a Handler contract:\r\n\r\n1. Deploy Data contract;\r\n2. Deploy a Handler contract at a given address specified in the Data contract;\r\n3. Register the Handler contract address by calling setHandler() in the Data contract, or use an Upgrader contract to switch the Handler contract, which requires that Data contract is initialized;\r\n4. Initialize Data contract if haven’t done it already.\r\n\r\n### Data Contract\r\n\r\nBelow is the specification of Data contract. There are three parts in the Data contract:\r\n\r\n- **Administrator Data**: owner’s address, Handler contract’s address and a boolean indicating whether the contract is initialized or not;\r\n- **Upgrader Data**: Upgrader contract’s address, upgrade proposal’s submission timestamp and proposal’s time period;\r\n- **Resource Data**: all other resources that the contract needs to keep and manage.\r\n\r\n\r\n```\r\n/// Data Contract\r\ncontract DataContract {\r\n\r\n    /** Management data */\r\n    /// Owner and Handler contract\r\n    address private owner;\r\n    address private handlerAddr;\r\n\r\n    /// Ready?\r\n    bool private valid;\r\n\r\n    /** Upgrader data */\r\n    address private upgraderAddr;\r\n    uint256 private proposalBlockNumber;\r\n    uint256 private proposalPeriod;\r\n    /// Upgrading status of the Handler contract\r\n    enum UpgradingStatus {\r\n        /// Can be upgraded\r\n        Done,\r\n        /// In upgrading\r\n        InProgress,\r\n        /// Another proposal is in progress\r\n        Blocked,\r\n        /// Expired\r\n        Expired,\r\n        /// Original Handler contract error\r\n        Error\r\n    }\r\n\r\n    /** Data resources - define variables here */\r\n\r\n    /** Modifiers */\r\n\r\n    /// Check if msg.sender is the Handler contract. It is used for setters.\r\n    /// If fail, throw PermissionException.\r\n    modifier onlyHandler;\r\n\r\n    /// Check if msg.sender is not permitted to call getters. It is used for getters (if necessary).\r\n    /// If fail, throw GetterPermissionException.\r\n    modifier allowedAddress;\r\n\r\n    /// Check if the contract is working.\r\n    /// It is used for all functions providing services after initialization.\r\n    /// If fail, throw UninitializationException.\r\n    modifier ready;\r\n\r\n    /** Management functions */\r\n\r\n    /// Initializer. Just the Handler contract can call it. \r\n    /// @param  _str    default value of this.exmStr.\r\n    /// @param  _int    default value of this.exmInt.\r\n    /// @param  _array  default value of this.exmArray.\r\n    /// exception   PermissionException msg.sender is not the Handler contract.\r\n    /// exception   ReInitializationException   contract has been initialized.\r\n    /// @return if the initialization succeeds.\r\n    function initialize (string _str, uint256 _int, uint16 [] _array) external onlyHandler returns(bool);\r\n\r\n    /// Set Handler contract for the contract. Owner must set one to initialize the Data contract.\r\n    /// Handler can be set by owner or Upgrader contract.\r\n    /// @param  _handlerAddr    address of a deployed Handler contract.\r\n    /// @param  _originalHandlerAddr    address of the original Handler contract, only used when an Upgrader contract want to set the Handler contract.\r\n    /// exception   PermissionException msg.sender is not the owner nor a registered Upgrader contract.\r\n    /// exception   UpgraderException   Upgrader contract does not provide a right address of the original Handler contract.\r\n    /// @return if Handler contract is successfully set.\r\n    function setHandler (address _handlerAddr, address _originalHandlerAddr) external returns(bool);\r\n\r\n    /** Upgrader contract functions */\r\n\r\n    /// Register an Upgrader contract in the contract.\r\n    /// If a proposal has not been accepted until proposalBlockNumber + proposalPeriod, it can be replaced by a new one.\r\n    /// @param  _upgraderAddr  address of a deployed Upgrader contract.\r\n    /// exception   PermissionException msg.sender is not the owner.\r\n    /// exception   UpgraderConflictException   Another Upgrader contract is working.\r\n    /// @return if Upgrader contract is successfully registed.\r\n    function startUpgrading (address _upgraderAddr) public returns(bool);\r\n\r\n    /// Getter of proposalPeriod.\r\n    /// exception   UninitializationException   uninitialized contract.\r\n    /// exception   GetterPermissionException   msg.sender is not permitted to call the getter.\r\n    /// @return this.proposalPeriod.\r\n    function getProposalPeriod () public view isReady allowedAddress returns(uint256);\r\n\r\n    /// Setter of proposalPeriod.\r\n    /// @param  _proposalPeriod new value of this.proposalPeriod.\r\n    /// exception   UninitializationException   uninitialized contract.\r\n    /// exception   PermissionException msg.sender is not the owner.\r\n    /// @return if this.proposalPeriod is successfully set.\r\n    function setProposalPeriod (uint256 _proposalPeriod) public isReady returns(bool);\r\n\r\n    /// Return upgrading status for Upgrader contracts.\r\n    /// @param  _originalHandlerAddr    address of the original Handler contract.\r\n    /// exception   UninitializationException   uninitialized contract.\r\n    /// @return Handler contract's upgrading status.\r\n    function canBeUpgraded (address _originalHandlerAddr) external view isReady returns(UpgradingStatus);\r\n\r\n    /// Check if the contract has been initialized.\r\n    /// @return if the contract has been initialized.\r\n    function live () external view returns(bool);\r\n\r\n    /** Getters and setters of data resources: define functions here */\r\n}\r\n```\r\n\r\n\r\n### Upgrader Contract (Optional)\r\n\r\nHandler contract can be upgraded by calling setHandler() of Data contract. If the owner wants to collect ideas from users, an Upgrader contract will help him/her manage voting and upgrading.\r\n\r\nBelow is the specification of Upgrader contract:\r\n\r\n- The Upgrader contract has the ability to take votes from the registered voters.\r\n  - The contract owner is able to add voters any time before the proposal expires;\r\n  - Voter can check the current status of the proposal (succeed or expired).\r\n- Developers are able to delete this Upgrader contract by calling done() any time after deployment.\r\n\r\nThe Upgrader contract works as follows:\r\n\r\n1. Verify the Data contract, its corresponding Handler contract and the new Handler contract have all been deployed;\r\n2. Deploy an Upgrader contract using Data contract address, previous Handler contract address and new Handler contract address;\r\n3. Register upgrader address in the new Handler contract first, then the original hander and finally the Data contract;\r\n4. Call startProposal() to start the voting process;\r\n5. Call getResolution() before the expiration;\r\n6. Upgrading succeed or proposal is expired.\r\n\r\nNote:\r\n\r\n- Function done() can be called at any time to let upgrader destruct itself.\r\n- Function status() can be called at any time to show caller status of the upgrader.\r\n\r\n\r\n```\r\n/// Handler upgrader\r\ncontract Upgrader {\r\n    // Data contract\r\n    DataContract public data;\r\n    // Original Handler contract\r\n    IHandler public originalHandler;\r\n    // New Handler contract\r\n    address public newHandlerAddr;\r\n\r\n    /** Marker */\r\n    enum UpgraderStatus {\r\n        Preparing,\r\n        Voting,\r\n        Success,\r\n        Expired,\r\n        End\r\n    }\r\n    UpgraderStatus public status;\r\n\r\n    /// Check if the proposal is expired.\r\n    /// If so, contract would be marked as expired.\r\n    /// exception   PreparingUpgraderException  proposal has not been started.\r\n    /// exception   ReupgradingException    upgrading has been done.\r\n    /// exception   ExpirationException proposal is expired.\r\n    modifier notExpired {\r\n        require(status != UpgraderStatus.Preparing, \"Invalid proposal!\");\r\n        require(status != UpgraderStatus.Success, \"Upgrading has been done!\");\r\n        require(status != UpgraderStatus.Expired, \"Proposal is expired!\");\r\n        if (data.canBeUpgraded(address(originalHandler)) != DataContract.UpgradingStatus.InProgress) {\r\n            status = UpgraderStatus.Expired;\r\n            require(false, \"Proposal is expired!\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// Start voting.\r\n    /// Upgrader must do upgrading check, namely checking if Data contract and 2 Handler contracts are ok.\r\n    /// exception   RestartingException proposal has been already started.\r\n    /// exception   PermissionException msg.sender is not the owner.\r\n    /// exception   UpgraderConflictException   another upgrader is working.\r\n    /// exception   NoPreparationException  original or new Handler contract is not prepared.\r\n    function startProposal () external;\r\n\r\n    /// Anyone can try to get resolution.\r\n    /// If voters get consensus, upgrade the Handler contract.\r\n    /// If expired, self-destruct.\r\n    /// Otherwise, do nothing.\r\n    /// exception   PreparingUpgraderException  proposal has not been started.\r\n    /// exception   ExpirationException proposal is expired.\r\n    /// @return     status of proposal.\r\n    function getResolution() external returns(UpgraderStatus);\r\n\r\n    /// Destruct itself.\r\n    /// exception   PermissionException msg.sender is not the owner.\r\n    function done() external;\r\n\r\n    /** Other voting mechnism related variables and functions */\r\n}\r\n```\r\n\r\n\r\n### Caveats\r\nSince the Upgrader contract in [ERC-1504](https://gist.github.com/swordghost/969648793ed54fdf027cb6df1b894b75) has a simple voting mechanism, it is prone to all the limitations that the voting contract is facing:\r\n\r\n- The administrator can only be the owner of data and Handler contracts. Furthermore, only the administrator has the power to add voters and start a proposal. \r\n- It requires voters to be constantly active, informative and attentive to make an upgrader succeed.\r\n- The voting will only be valid in a given time period. If in a given time period the contract cannot collect enough “yes” to proceed, the proposal will be marked expired. \r\n\r\n## Rationale\r\n\r\n### Data Contract and Handler Contract\r\n\r\nA smart contract is actually a kind of software, which provides some kind of services. From the perspective of software engineering, a service consists of **resources** that abstract the data and **operations** that abstract the process logic on the data. The requirement of upgrading is mostly on the logic part. Therefore, in order to make a smart contract upgradable, we divide it into two parts:\r\n\r\n1. Data contract keeps the resources;\r\n2. Handler contract contains operations.\r\n\r\nThe Handler contract can be upgraded in the future while the Data contract is permanent. Handler contract can manipulate the variables in Data contract through the getter and setter functions provided by Data contract.\r\n\r\n### Upgrader Contract and Voting Mechanism\r\n\r\nIn order to prevent centralization and protect the interests of the community and stakeholders, we also design a voting mechanism in the Upgrader contract. Upgrader contract contains addresses of Data contract and two Handler contracts, and collects votes from pre-defined voters to upgrade the Handler contract when the pre-set condition is fulfilled.\r\n\r\nFor simplicity, the upgradable contract comes with a very minimal version of the voting mechanism. If the contract owner wants to implement a more complex voting mechanism, he/she can modify the existing voting mechanism to incorporate upgradability. The expiration mechanism (see modifier notExpried in Upgrader contract and related functions in Data contract) and upgrading check (see function startProposal() in Upgrader contract) to the contract are mandatory.\r\n\r\n### Gas and Complexity (regarding the enumeration extension)\r\n\r\nUsing an upgrader will cost some gas. If the Handler contract is upgraded by the owner, it just costs gas that a contract call will cost, which is usually significantly lower than creating and deploying a new contract.  \r\n\r\nAlthough upgrading contract may take some efforts and gas, it is a much less painful than deprecating the insecure contract/creating a new contract or hard fork (e.g. DAO attack). Contract creation requires a significant amount of effort and gas. One of the advantages of upgradable contracts is that the contract owners don’t have to create new contracts; instead, they only need to upgrade parts of contract that cause issues, which is less expensive compared to data loss and blockchain inconsistency. In other words, upgradable contracts make Data contract more scalable and flexible. \r\n\r\n### Community Consensus\r\n\r\nThank you to those who helped on review and revise the proposal:\r\n\r\n- [@lsankar4033](https://github.com/lsankar4033) from MIT\r\n- more\r\n\r\nThe proposal is initiated and developed by the team Renaissnace and the Research Group of Blockchain System @ Center for Operating System at Peking University.\r\n\r\nWe have been very inclusive in this process and invite anyone with questions or contributions into our discussion. However, this standard is written only to support the identified use cases which are listed herein.\r\n\r\n## Implementations\r\n1. [Renaissance](https://www.renaissance.app) - a protocol that connect creators and fans financially\r\n2. [ERC-1504](https://gist.github.com/swordghost/969648793ed54fdf027cb6df1b894b75) - a reference implementation\r\n\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1503/reactions",
    "total_count": 5,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 2,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/430753832",
    "html_url": "https://github.com/ethereum/EIPs/issues/1503#issuecomment-430753832",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503",
    "id": 430753832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc1MzgzMg==",
    "user": {
      "login": "OFRBG",
      "id": 8671781,
      "node_id": "MDQ6VXNlcjg2NzE3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8671781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OFRBG",
      "html_url": "https://github.com/OFRBG",
      "followers_url": "https://api.github.com/users/OFRBG/followers",
      "following_url": "https://api.github.com/users/OFRBG/following{/other_user}",
      "gists_url": "https://api.github.com/users/OFRBG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OFRBG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OFRBG/subscriptions",
      "organizations_url": "https://api.github.com/users/OFRBG/orgs",
      "repos_url": "https://api.github.com/users/OFRBG/repos",
      "events_url": "https://api.github.com/users/OFRBG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OFRBG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T19:14:52Z",
    "updated_at": "2018-10-17T19:14:52Z",
    "author_association": "NONE",
    "body": "I've seen many discussions about this on other platforms and the reception seems to be quite negative, even when using pseudo-consensus such as voting. Perhaps this is a decent patch until we are able to fork contracts. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/430753832/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435119683",
    "html_url": "https://github.com/ethereum/EIPs/issues/1503#issuecomment-435119683",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503",
    "id": 435119683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTExOTY4Mw==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T17:30:49Z",
    "updated_at": "2018-11-01T17:31:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The process of deploying a Handler contract:\r\n>\r\n> 1. Deploy Data contract;\r\n> 2. Deploy a Handler contract at a given address specified in the Data contract;\r\n\r\nWhere in the Data contract is the Handler contract address specified?  I looked in the reference implementation and did not see this.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435119683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439290329",
    "html_url": "https://github.com/ethereum/EIPs/issues/1503#issuecomment-439290329",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503",
    "id": 439290329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTI5MDMyOQ==",
    "user": {
      "login": "jieek",
      "id": 37888876,
      "node_id": "MDQ6VXNlcjM3ODg4ODc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/37888876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jieek",
      "html_url": "https://github.com/jieek",
      "followers_url": "https://api.github.com/users/jieek/followers",
      "following_url": "https://api.github.com/users/jieek/following{/other_user}",
      "gists_url": "https://api.github.com/users/jieek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jieek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jieek/subscriptions",
      "organizations_url": "https://api.github.com/users/jieek/orgs",
      "repos_url": "https://api.github.com/users/jieek/repos",
      "events_url": "https://api.github.com/users/jieek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jieek/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T05:55:13Z",
    "updated_at": "2018-11-16T05:55:13Z",
    "author_association": "NONE",
    "body": "The idea of separating data into a contract is great. When the contract is upgraded, only contract authorization is required.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439290329/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442341659",
    "html_url": "https://github.com/ethereum/EIPs/issues/1503#issuecomment-442341659",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503",
    "id": 442341659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjM0MTY1OQ==",
    "user": {
      "login": "renchuqiao",
      "id": 6487514,
      "node_id": "MDQ6VXNlcjY0ODc1MTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6487514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/renchuqiao",
      "html_url": "https://github.com/renchuqiao",
      "followers_url": "https://api.github.com/users/renchuqiao/followers",
      "following_url": "https://api.github.com/users/renchuqiao/following{/other_user}",
      "gists_url": "https://api.github.com/users/renchuqiao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/renchuqiao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/renchuqiao/subscriptions",
      "organizations_url": "https://api.github.com/users/renchuqiao/orgs",
      "repos_url": "https://api.github.com/users/renchuqiao/repos",
      "events_url": "https://api.github.com/users/renchuqiao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/renchuqiao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T07:03:27Z",
    "updated_at": "2018-11-28T07:03:27Z",
    "author_association": "NONE",
    "body": "> I've seen many discussions about this on other platforms and the reception seems to be quite negative, even when using pseudo-consensus such as voting. Perhaps this is a decent patch until we are able to fork contracts.\r\n\r\nWhat kind of negative comments/feedbacks are they? Can you plz share some?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442341659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442342795",
    "html_url": "https://github.com/ethereum/EIPs/issues/1503#issuecomment-442342795",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503",
    "id": 442342795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjM0Mjc5NQ==",
    "user": {
      "login": "renchuqiao",
      "id": 6487514,
      "node_id": "MDQ6VXNlcjY0ODc1MTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6487514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/renchuqiao",
      "html_url": "https://github.com/renchuqiao",
      "followers_url": "https://api.github.com/users/renchuqiao/followers",
      "following_url": "https://api.github.com/users/renchuqiao/following{/other_user}",
      "gists_url": "https://api.github.com/users/renchuqiao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/renchuqiao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/renchuqiao/subscriptions",
      "organizations_url": "https://api.github.com/users/renchuqiao/orgs",
      "repos_url": "https://api.github.com/users/renchuqiao/repos",
      "events_url": "https://api.github.com/users/renchuqiao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/renchuqiao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T07:08:57Z",
    "updated_at": "2018-11-28T07:08:57Z",
    "author_association": "NONE",
    "body": "> > The process of deploying a Handler contract:\r\n> > \r\n> > 1. Deploy Data contract;\r\n> > 2. Deploy a Handler contract at a given address specified in the Data contract;\r\n> \r\n> Where in the Data contract is the Handler contract address specified? I looked in the reference implementation and did not see this.\r\n\r\nIt is specified in the management data section in data contract: \r\n\r\n/** Management data */\r\n    /// Owner and Handler contract\r\n    address private owner;\r\n    address private handlerAddr;\r\n\r\nIt is also in the reference ERC-54 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442342795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/775734815",
    "html_url": "https://github.com/ethereum/EIPs/issues/1503#issuecomment-775734815",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503",
    "id": 775734815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTczNDgxNQ==",
    "user": {
      "login": "mikgross",
      "id": 36456237,
      "node_id": "MDQ6VXNlcjM2NDU2MjM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/36456237?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikgross",
      "html_url": "https://github.com/mikgross",
      "followers_url": "https://api.github.com/users/mikgross/followers",
      "following_url": "https://api.github.com/users/mikgross/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikgross/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikgross/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikgross/subscriptions",
      "organizations_url": "https://api.github.com/users/mikgross/orgs",
      "repos_url": "https://api.github.com/users/mikgross/repos",
      "events_url": "https://api.github.com/users/mikgross/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikgross/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-09T07:33:06Z",
    "updated_at": "2021-02-09T07:33:06Z",
    "author_association": "NONE",
    "body": "Maybe the concern has already been voiced.\r\nThis structure of separating Data Storage and Data Logic is great, and we already implemented it around 2017 in some of our prototypes and gave a basic understanding of how to implement such a structure here (ex: https://stackoverflow.com/questions/50428516/upgrading-smart-contract-in-ethereum/50701953#50701953). I also remember having read about it in several articles back in the day.\r\n\r\nHowever, this should not be, in my opinion, an EIP/ERC/whatever fixed protocol, but a general architectural best practice. For example, some if its principles could be applied in a ERC20, but structuring it in a EIP/ERC makes no sense imo.\r\n\r\n(Is it in draft since 2018???)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/775734815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093243",
    "html_url": "https://github.com/ethereum/EIPs/issues/1503#issuecomment-986093243",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503",
    "id": 986093243,
    "node_id": "IC_kwDOAq426M46xpa7",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:10:14Z",
    "updated_at": "2021-12-04T21:10:14Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285246",
    "html_url": "https://github.com/ethereum/EIPs/issues/1503#issuecomment-997285246",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1503",
    "id": 997285246,
    "node_id": "IC_kwDOAq426M47cV1-",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T21:11:19Z",
    "updated_at": "2021-12-18T21:11:19Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
