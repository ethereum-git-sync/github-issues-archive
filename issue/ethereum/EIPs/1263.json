{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1263",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1263",
  "id": 344997004,
  "node_id": "MDU6SXNzdWUzNDQ5OTcwMDQ=",
  "number": 1263,
  "title": "ERC-1263: NFT Index Proposal",
  "user": {
    "login": "e11io",
    "id": 31971211,
    "node_id": "MDQ6VXNlcjMxOTcxMjEx",
    "avatar_url": "https://avatars.githubusercontent.com/u/31971211?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/e11io",
    "html_url": "https://github.com/e11io",
    "followers_url": "https://api.github.com/users/e11io/followers",
    "following_url": "https://api.github.com/users/e11io/following{/other_user}",
    "gists_url": "https://api.github.com/users/e11io/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/e11io/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/e11io/subscriptions",
    "organizations_url": "https://api.github.com/users/e11io/orgs",
    "repos_url": "https://api.github.com/users/e11io/repos",
    "events_url": "https://api.github.com/users/e11io/events{/privacy}",
    "received_events_url": "https://api.github.com/users/e11io/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-07-26T20:39:02Z",
  "updated_at": "2021-12-18T21:12:10Z",
  "closed_at": "2021-12-18T21:12:10Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "---\r\neip: 1263\r\ntitle: ERC-1263 NFT Index Proposal\r\nauthor: Luciano Bertenasco <luciano@e11.io>, Alejo Amiras <alejo@e11.io>, Francisco Diaz <francisco@e11.io>\r\ndiscussions-to: luciano@e11.io\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-06-27\r\nrequires: 173, 721\r\n---\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\n\r\nA standard set of contracts for globally defining and tracking non-fungible tokens.\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\n\r\nThe following standard allows for the interoperability of non-fungible tokens. This standard provides basic functionality to track, identify, and get information about different implementations of non-fungible tokens across different NFTs Managers.\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\n\r\nA standard interface allows game/wallet/broker/auction applications to work with any NFT Manager & NFT on Ethereum. We think this will allow much more contributions and co-operability between different teams & applications through out the crypto space. Furthermore it will expand the use of current deployed and owned NFTs, adding more value and creating new ways of using and interacting with them.\r\n\r\nWe find interoperability as being one of the key components that still needs to be explored, and a set of standard contracts will help achieve this.\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\nThis is a versatile implementation, we tried the best to not impose ways of working with the data types (see \"rationale/design decisions\", below). We propose one shared contract *NFTIndexer* , and one standard contract *NFTManager* designed to be **extendable**.\r\n\r\n### NFTIndexer\r\nWe will talk about *NFTIndexer* since it's the one that will hold information about the *NFTManagers*.\r\n\r\nKeeps track of Standard NFT Contracts & their Token types, which allows NFT Managers to add their specific URI implementations to them.\r\nIt also has a record of which NFT Manager corresponds to which Standard NFT Token. This is used to translate an NFT hash to it's type definition to be searched on the index.\r\ni.e. Take for example CryptoWars and CryptoKitties.\r\nLet's assume that the Standard NFT CryptoKitties Contract is on 0xKitties, and the CryptoWars's NFT Manager Contract is on 0xWarsManager.\r\nAnd we want to implement our awesome skin of a gen0 kittie 0xGen0Kittie001 on the CryptoWars game.\r\nWhat we would do is the following:\r\n1) Get the typeId of 0xGen0Kittie001 from the CryptoKitties NFT Manager 0xKittieManager, which will return 0xGen0Kittie.\r\n2) Execute CryptoWarsNFTManager.AddNFTIndex(0xKitties, 0xGen0Kittie, URI)\r\nWhere 0xKitties is the address of the contract in charge of managing 0xGen0Kittie001, and URI can be an IPFS url with the desired implementation of the asset (i.e. a picture of a warrior holding a kitty balloon)\r\n\r\n#### Methods\r\n##### isNFTIndexer\r\n```solidity\r\nfunction isNFTIndexer() external pure returns (bool)\r\n```\r\nMakes the contract verifiable.\r\n\r\n##### setNFTManager\r\n```solidity\r\nfunction setNFTManager(Ownable _nftContract, IndexableNFTManager _nftManager) external\r\n```\r\nWill set what NFTManager handles the NFTContract, this will be used in the *NFTManager* when asking for a default type of a token (see \"TypeableNFTManager\", below).\r\nOnly one manager will be the **owner of an NFTContract**.\r\n\r\nFor the successful execution of `setNFTManager()`:\r\n* It MUST be called by the owner of the NFTContract.\r\n* The NFTManager provided as a parameter MUST have *this* (NFTIndexer) as their NFTIndexer.\r\n* The NFTManager provided as a parameter MUST be an IndexableNFTManager.\r\n\r\n##### setNFTUri\r\n```solidity\r\nfunction setNFTUri(address _nftContract, bytes32 _nftType, string _uri) external onlyNFTManager\r\n```\r\nWill set an URI for a certain NFT type within an NFTContract.\r\n\r\nFor the successful execution of `setNFTUri()`:\r\n* It MUST be called from an *NFTManager* (that's why there is a proxy call from NFTManager, see \"IndexableNFTManager\" below).\r\n* The URI parameter should not be an empty string.\r\n\r\n#### Events\r\n##### NewNFTManager\r\nThis event MUST be triggered on any successful call `setNFTManager(Ownable _nftContract, IndexableNFTManager _nftManager)`.  \r\nSee the documentation for the `setNFTManager()` method above for further detail.\r\n```solidity\r\nevent NewNFTManager(address indexed nftContract, address indexed manager);\r\n```\r\n\r\n##### NewNFTTypeURI\r\nThis event MUST be triggered on any successful call `setNFTUri(address _nftContract, bytes32 _nftType, string _uri)`.  \r\nSee the documentation for the `setNFTUri()` method above for further detail.\r\n```solidity\r\nevent NewNFTTypeURI(address indexed nftContract, bytes32 nftType, string uri);\r\n```\r\n\r\n### NFTManager\r\nAn NFTManager can be as simple as inheriting the *IndexableNFTManager* contract, or it can *also* gain some additional logic, as demonstrated via *TypeableNFTManager*, *TokenableNFTManager* and since it's expandable, we expect further development from the community.\r\n\r\n#### IndexableNFTManager\r\nIndexableNFTManager is the core of the NFTManager design. It will make the contract verifiable from the NFTIndexer, and it will have our proxy call to **setNFTUri** on the desired *NFTIndexer*.\r\n\r\n##### Methods\r\n###### isNFTManager\r\n```solidity\r\nfunction isNFTManager() external pure returns (bool)\r\n```\r\nMakes the contract verifiable.\r\n\r\n###### setNFTIndexer\r\n```solidity\r\nfunction setNFTIndexer(NFTIndexer _nftIndexer) external onlyOwner\r\n```\r\n\r\nFor the successful execution of `setNFTIndexer()`:\r\n* It MUST be called by the owner of the *NFTManager* contract.\r\n* The *NFTIndexer* parameter should be a verifiable *NFTIndexer* contract.\r\n\r\n###### setNFTUri\r\n```solidity\r\nfunction setNFTUri(address _nftContract, bytes32 _nftType, string _uri) external onlyOwner\r\n```\r\n\r\nFor the successful execution of `setNFTUri()`:\r\n* It MUST be called by the owner of the *NFTManager* contract.\r\n* The URI parameter should not be an empty string.\r\n\r\n#### TypeableNFTManager\r\nTypeableNFTManager will be an extended IndexableNFTManager, as it was explained above, it will add some additional logic to the *NFTManager*.\r\nThis module will help manage the NFT types via bit shifting (and other bit operations).\r\n\r\n##### Methods\r\n###### setNFTTypeMask\r\n```solidity\r\nfunction setNFTTypeMask(address _nftContract, uint8 _quantityMask) external onlyOwner\r\n```\r\n`setNFTTypeMask()` will set the amount of bytes that will be shifted from a tokenId, in order to get it's type. For example:\r\n```solidity\r\nnftType = tokenId >> _quantityMask * 8;\r\n```\r\n\r\nFor the successful execution of `setNFTTypeMask()`:\r\n* It MUST be called by the owner of the *NFTManager* contract.\r\n* The parameter quantity mask must be less than 32. This parameter will represent the amount of bytes that will be shifted from the token id, to get an NFT type.\r\n\r\n###### getNFTTypeId\r\n```solidity\r\nfunction getNFTTypeId(Ownable _nftContract, uint256 _token) external view returns(bytes32 normalizedToken)\r\n```\r\n\r\n`getNFTTypeId()` will return the token type of a given token and a given *NFTContract*.\r\nIn case there is no token type defined for that contract within this manager, it will ask the *NFTIndexer* to get that token type from the *NFTManager* that owns that *NFTContract*.\r\nIn case there is none defined, it will return the token id without any change.\r\n\r\n#### TokenableNFTManager\r\nTokenableNFTManager will be an extended IndexableNFTManager, as it was explained above, it will add some additional logic to the *NFTManager*.\r\nThis module will help manage active NFTs. (i.e. NFTs being used by a user in a game)\r\n\r\n##### Methods\r\n###### setNFTActive\r\n```solidity\r\nfunction setNFTActive(ERC721 _nftContract, uint256 _token) external\r\n```\r\nWill set as active a certain token on a certain *NFTContract*.\r\n\r\nFor the successful execution of `setNFTActive()`:\r\n* It MUST be called by the token current owner.\r\n* The token MUST NOT be already active.\r\n\r\n###### removeActiveNFT\r\n```solidity\r\nfunction removeActiveNFT(ERC721 _nftContract, uint256 _token) external\r\n```\r\nWill remove a certain NFT from the active NFT mapping on a certain *NFTContract*\r\n\r\nFor the successful execution of `removeActiveNFT()`:\r\n* The token MUST be active.\r\n\r\n###### isTokenActive\r\n```solidity\r\nfunction isTokenActive(address _owner, ERC721 _nftContract, uint256 _token) external view returns(bool active)\r\n```\r\nWill return token active status.\r\n\r\n##### Events\r\n###### AddedActiveNFT\r\nThis event MUST be triggered on any successful call `setNFTActive(ERC721 _nftContract, uint256 _token)`.  \r\nSee the documentation for the `setNFTActive()` method above for further detail.\r\n\r\n```solidity\r\nevent AddedActiveNFT(address indexed user, address indexed nftContract, uint256 indexed nft)\r\n````\r\n\r\n###### RemovedActiveNFT\r\nThis event MUST be triggered on any successful call `removeActiveNFT(ERC721 _nftContract, uint256 _token)`.  \r\nSee the documentation for the `removeActiveNFT()` method above for further detail.\r\n\r\n```solidity\r\nevent RemovedActiveNFT(address indexed user, address indexed nftContract, uint256 indexed nft)\r\n```\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\n### Design decision making\r\n* NFTIndexer existence: Previous iterations of the design did not have an NFTIndexer.\r\nEvery NFTManager had, for example, their own mappings `nftContract => nftType`, basically, every NFTManager was an Indexer too.  \r\nThis design brought some issues to light:\r\n1. No easy way of knowing from an *NFTManager* who owned which *NFTContract*, therefore there was no easy way of asking the *NFTContract* for a specific NFT type.\r\n2. There was also the issue of having to re-deploy duplicated code on every manager, wasting precious storage & gas.\r\n\r\n* Data Types: One of our main concerns was not to make the design too opinionated, specially on the NFT Types system.\r\nThat's why we divided the design on TokenableNFTManager, TypeableNFTManager and IndexableNFTManager.\r\n\r\nThere might still be some caveats that we did not notice, so please, comment freely on how to improve the design.\r\nWe want it to be as useful as it can be, and adaptable as it can be, so everyone in the community can easily use it.\r\n\r\n### Utility\r\nSee example on **NFTIndexer** description.\r\n\r\n<!--## Backwards Compatibility-->\r\n<!--All EIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EIP must explain how the author proposes to deal with these incompatibilities. EIP submissions without a sufficient backwards compatibility treatise may be rejected outright.-->\r\n\r\n## Test Cases\r\n<!--Test cases for an implementation are mandatory for EIPs that are affecting consensus changes. Other EIPs can choose to include links to test cases if applicable.-->\r\n[e11 NFT Index Proposal](https://github.com/e11-io/e11-nft-index) repository includes various test cases using Truffle.\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\ne11 NFT Index Proposal -- a reference implementation\r\n* MIT licensed, so you can freely use it for your projects\r\n* Includes unit tests and full code coverage\r\n* Includes test cases and further code documentation\r\n\r\n## References\r\n### Implementation\r\n1. [e11 NFT Index Proposal](https://github.com/e11-io/e11-nft-index)\r\n\r\n### Standards\r\n1. [ERC-173 Ownable Standard.](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md)\r\n2. [ERC-721 Non-Fungible Token Standard.](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md)\r\n\r\n### Issues\r\n### Discussions\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1263/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408469000",
    "html_url": "https://github.com/ethereum/EIPs/issues/1263#issuecomment-408469000",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263",
    "id": 408469000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODQ2OTAwMA==",
    "user": {
      "login": "adibas03",
      "id": 6083241,
      "node_id": "MDQ6VXNlcjYwODMyNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6083241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adibas03",
      "html_url": "https://github.com/adibas03",
      "followers_url": "https://api.github.com/users/adibas03/followers",
      "following_url": "https://api.github.com/users/adibas03/following{/other_user}",
      "gists_url": "https://api.github.com/users/adibas03/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adibas03/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adibas03/subscriptions",
      "organizations_url": "https://api.github.com/users/adibas03/orgs",
      "repos_url": "https://api.github.com/users/adibas03/repos",
      "events_url": "https://api.github.com/users/adibas03/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adibas03/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T16:22:13Z",
    "updated_at": "2018-07-27T16:24:03Z",
    "author_association": "NONE",
    "body": "Just a comment on the `Created` date.\r\nshouldn't that be 2018-07-27 ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408469000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408509812",
    "html_url": "https://github.com/ethereum/EIPs/issues/1263#issuecomment-408509812",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263",
    "id": 408509812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODUwOTgxMg==",
    "user": {
      "login": "e11io",
      "id": 31971211,
      "node_id": "MDQ6VXNlcjMxOTcxMjEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/31971211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e11io",
      "html_url": "https://github.com/e11io",
      "followers_url": "https://api.github.com/users/e11io/followers",
      "following_url": "https://api.github.com/users/e11io/following{/other_user}",
      "gists_url": "https://api.github.com/users/e11io/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e11io/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e11io/subscriptions",
      "organizations_url": "https://api.github.com/users/e11io/orgs",
      "repos_url": "https://api.github.com/users/e11io/repos",
      "events_url": "https://api.github.com/users/e11io/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e11io/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T18:57:41Z",
    "updated_at": "2018-07-27T18:57:41Z",
    "author_association": "NONE",
    "body": "Hi @adibas03 !\r\nIt's not a typo, the draft is a month old. _(stealth mode)_\r\nNot sure what's the correct way to set the date here:\r\n- creation of issue\r\n- creation of first draft\r\n\r\nWe are fully open to change it :)\r\nWDTY?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408509812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408572639",
    "html_url": "https://github.com/ethereum/EIPs/issues/1263#issuecomment-408572639",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263",
    "id": 408572639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODU3MjYzOQ==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-28T01:20:53Z",
    "updated_at": "2018-07-28T01:20:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cool idea! Why does this need to be a standard however? Why can't there be different \"token registries\"? Or is this a proposal for what NFT token registries should include in their interface?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408572639/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408870707",
    "html_url": "https://github.com/ethereum/EIPs/issues/1263#issuecomment-408870707",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263",
    "id": 408870707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODg3MDcwNw==",
    "user": {
      "login": "e11io",
      "id": 31971211,
      "node_id": "MDQ6VXNlcjMxOTcxMjEx",
      "avatar_url": "https://avatars.githubusercontent.com/u/31971211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/e11io",
      "html_url": "https://github.com/e11io",
      "followers_url": "https://api.github.com/users/e11io/followers",
      "following_url": "https://api.github.com/users/e11io/following{/other_user}",
      "gists_url": "https://api.github.com/users/e11io/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/e11io/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/e11io/subscriptions",
      "organizations_url": "https://api.github.com/users/e11io/orgs",
      "repos_url": "https://api.github.com/users/e11io/repos",
      "events_url": "https://api.github.com/users/e11io/events{/privacy}",
      "received_events_url": "https://api.github.com/users/e11io/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-30T13:52:12Z",
    "updated_at": "2018-07-30T13:52:12Z",
    "author_association": "NONE",
    "body": "Hi @PhABC !\r\nIndeed is a proposal for what NFT Indexes should include in their interface.\r\nAs well as the Managers that are required to be able to filter typeIds.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408870707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093493",
    "html_url": "https://github.com/ethereum/EIPs/issues/1263#issuecomment-986093493",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263",
    "id": 986093493,
    "node_id": "IC_kwDOAq426M46xpe1",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:11:43Z",
    "updated_at": "2021-12-04T21:11:43Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285363",
    "html_url": "https://github.com/ethereum/EIPs/issues/1263#issuecomment-997285363",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1263",
    "id": 997285363,
    "node_id": "IC_kwDOAq426M47cV3z",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T21:12:10Z",
    "updated_at": "2021-12-18T21:12:10Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
