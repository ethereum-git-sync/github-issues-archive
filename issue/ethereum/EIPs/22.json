{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/22/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/22/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/22/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/22",
  "id": 117789289,
  "node_id": "MDU6SXNzdWUxMTc3ODkyODk=",
  "number": 22,
  "title": "ERC: Token Registries",
  "user": {
    "login": "frozeman",
    "id": 232662,
    "node_id": "MDQ6VXNlcjIzMjY2Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frozeman",
    "html_url": "https://github.com/frozeman",
    "followers_url": "https://api.github.com/users/frozeman/followers",
    "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
    "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
    "organizations_url": "https://api.github.com/users/frozeman/orgs",
    "repos_url": "https://api.github.com/users/frozeman/repos",
    "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frozeman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 27,
  "created_at": "2015-11-19T10:57:14Z",
  "updated_at": "2022-02-02T05:10:07Z",
  "closed_at": "2022-02-02T05:10:07Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\nERC: 22\nTitle: Token standard\nStatus: Draft\nType: Informational\nCreated: 19-11.2015\nResolution: https://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs\n```\n# Abstract\n\nRegistries allow listing and searching of tokens and can serve as connector between tokens.\n# Specification\n## Token Registries\n\nToken registries contain information about tokens. There is at least one global registry (though other may create more like the global Registry) to which you can add your token. Adding your token to it would increase the experience of the user that the GUI Client can use or not.\n#### symbol\n\n``` js\nfunction setSymbol(string _s)\nfunction symbol(address _token) constant returns (string)\n```\n\nSets or returns a short sequence of letters that are used to represent the unit of the coin. When setting, it assumes the `msg.sender` is the token. Solidity string is on UTF-8 format so this should support any character supported by UTF-8. Symbols are chosen by the contract and it's up to the client to decide how to handle different currencies with similar or identical symbols.\n\nExamples or symbols: `USDX`, `BOB$`, `Éƒ`, `% of shares`.\n#### name\n\n``` js\nfunction setName(string _s)\nfunction name(address _token) constant returns (string)\n```\n\nSets or returns the name of a token. Solidity string is on UTF-8 format so this should support any character supported by UTF-8. Names are chosen by the contract and it's up to the client to decide how to handle different currencies with similar or identical names.\n\nExamples of names: `e-Dollar`, `BobToken`, `Bitcoin-Eth`.\n#### baseUnit\n\n``` js\nfunction setBaseUnit(uint _s)\nfunction baseUnit(address _token) constant returns (uint256)\n```\n\nSets or returns the base unit of a token. Although most tokens are displayed to the final user as containing decimal points, token values are unsigned integers counting in the smallest possible unit. The client should always display the total units divided by `baseUnit`. Base units can be any integer but we suggest only using powers of 10. At the moment there is no support for multiple sub-units.\n\nExample: Bob has a balance of 100000 BobTokens, whose base unit is 100. His balance will be displayed on the client as **BOB$100.00**\n\nAlso see https://github.com/ethereum/EIPs/issues/20\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/22/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/22/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158115113",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-158115113",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 158115113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODExNTExMw==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-19T16:48:05Z",
    "updated_at": "2015-11-19T16:56:43Z",
    "author_association": "NONE",
    "body": "As I've voiced that concern before I'm vehemently against using `baseUnit` and instead think we should use `decimals`. For these reasons:\n- Decimals allow to use a lower bytes variable: uint8 will allow up to 255 decimal places. As a reference, if a unit of 1 represents the size of the observable universe, then in order to count the size of a planck length (smallest possible size physics allows) then you would need about 80 decimal places.\n- Having a division unit that is not a power of 10 would create confusion to the user. For example a baseUnit of 7 means that you can only send values that are multiples of 0.142857.. The purpose of client is to make transactions clearer to the user and representing a token transfer of 10 units as 1.42857.. is simply a misrepresentation of reality.\n- Also `baseUnit` is ambiguous with the base of the number representation (base 10, binary etc). Having a base unit of 16 does not means that a token is supposed to be represented as a hexadecimal,  just that the smallest possible divisible unit is 0.0625. The wallet would still represent it using the decimal system (while no user ever asked that, the wallet could display all numbers in binary, hexadecimal or base58 but even if did that would it make sense to do that per coin??)\n- It's how users communicate. \"Bitcoin is divisible by 8 decimal points\" is a more common and easily understandable comment than \"Bitcoin is divisible by 10000000\". Actually how many 0s did I just type? Can you tell the difference without counting the 0s in your head?\n- Contracts should never deal with either as it's just for display purposes but If for some reason a contract needs to have a conversion from baseUnit to decimals, then it's a single simple solidity command: `10**decimals`. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158115113/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158122327",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-158122327",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 158122327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODEyMjMyNw==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-19T17:11:12Z",
    "updated_at": "2015-11-19T17:11:52Z",
    "author_association": "NONE",
    "body": "I have one counter argument to my own point for weirder units: 12 pence per shillings, 24 hours per day, 7 days per week, 3 foot per yard etc. In that case I would argue that the representation of baseUnit and Symbol is also insufficient as what would actually be required would be a full array of multiples denominations.\n\nIn that case the best would be to have a named array on the registry:\n\n   { 1: 'second',\n      60: 'minute',\n      360: 'hour',\n      86400: 'day' } \n\netc..\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158122327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/167355240",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-167355240",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 167355240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzM1NTI0MA==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-26T19:15:29Z",
    "updated_at": "2015-12-26T19:15:29Z",
    "author_association": "NONE",
    "body": "Bump. This ERC is critical for most token-related dapps.\nI agree with avsa, decimals makes more sense than baseunit. Though I do disagree with one argument:\n\n> Contracts should never deal with either\n\nI think you need to deal with it when dealing with prices/ratios. Ideally a consumer should not need to know the baseunit of tokens hidden inside your system, they should just say \"I want to trade 2.5 units of this for one unit of that\", where \"2.5\" is expressed with a consistent fixed-point representation.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/167355240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/169927786",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-169927786",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 169927786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTkyNzc4Ng==",
    "user": {
      "login": "tgerring",
      "id": 731472,
      "node_id": "MDQ6VXNlcjczMTQ3Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/731472?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgerring",
      "html_url": "https://github.com/tgerring",
      "followers_url": "https://api.github.com/users/tgerring/followers",
      "following_url": "https://api.github.com/users/tgerring/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgerring/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgerring/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgerring/subscriptions",
      "organizations_url": "https://api.github.com/users/tgerring/orgs",
      "repos_url": "https://api.github.com/users/tgerring/repos",
      "events_url": "https://api.github.com/users/tgerring/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgerring/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-08T08:08:22Z",
    "updated_at": "2016-01-08T08:08:22Z",
    "author_association": "NONE",
    "body": "Very nice arguments for decimals, @alexvandesande. Beyond your own are there other counterpoints for baseUnit that would make it \"better\" in some use cases? Perhaps @frozeman can provide some rationale as to the reason for going with baseUnit in the initial proposal to make sure we don't miss some important historical reasoning.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/169927786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/170163901",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-170163901",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 170163901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDE2MzkwMQ==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-09T00:13:46Z",
    "updated_at": "2016-01-09T00:13:46Z",
    "author_association": "NONE",
    "body": "I'm wondering why the setters should be part of the spec. They seem very much like an \"admin\" function. End users likely never call them. No such functions were public for the token standard. I can think of registries whose setting rules would make these setters dummies anyway.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/170163901/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171040493",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171040493",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171040493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTA0MDQ5Mw==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-12T20:13:56Z",
    "updated_at": "2016-01-12T20:13:56Z",
    "author_association": "NONE",
    "body": "Another concern, contracts can't yet read arbitrary-length return values like `string`s! There are some dirty hacks you can do if you can ensure the strings are under one word size, but it's a band-aid until we get new Serenity opcodes.\n\nFor now I propose using `bytes32` for symbols and names in the actual spec. It should require little refactoring unless you're using push or iteration or something.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171040493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171153707",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171153707",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171153707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTE1MzcwNw==",
    "user": {
      "login": "caktux",
      "id": 13692,
      "node_id": "MDQ6VXNlcjEzNjky",
      "avatar_url": "https://avatars.githubusercontent.com/u/13692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caktux",
      "html_url": "https://github.com/caktux",
      "followers_url": "https://api.github.com/users/caktux/followers",
      "following_url": "https://api.github.com/users/caktux/following{/other_user}",
      "gists_url": "https://api.github.com/users/caktux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caktux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caktux/subscriptions",
      "organizations_url": "https://api.github.com/users/caktux/orgs",
      "repos_url": "https://api.github.com/users/caktux/repos",
      "events_url": "https://api.github.com/users/caktux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caktux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T03:49:17Z",
    "updated_at": "2016-01-13T03:49:17Z",
    "author_association": "NONE",
    "body": "I'm glad to agree with @alexvandesande with those arguments. I was surprised to see baseUnit instead of the already much discussed decimals. Since this is for tokens and not yards, I think it would be much better to stick to decimals, so even in the case of an eShillings, it would be easy enough to present the decimals in their imperial glory. Same goes for time units but without the sarcasm.\n\nI think setters are very important for this standard, so contracts that register themselves don't have to implement and know which registry implements which method. Most methods in the token standard were implicitly setters (`approve()` is most obvious, but so are `transfer()` and `transferFrom()`; they all alter the state [when successful].)\n\nI also agree that both symbols and names should be `bytes32`, especially if there are issues with strings when returning values between contracts. Having a hard limit on the length of those (and using a single storage slot) also seem more sound.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171153707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171163678",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171163678",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171163678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTE2MzY3OA==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T04:38:43Z",
    "updated_at": "2016-01-13T04:38:49Z",
    "author_association": "NONE",
    "body": "@frozeman \n\n> When setting, it assumes the msg.sender is the token.\n\nSo token contracts need to support setter functions for setting their name etc in registries? And it would be up to the implementation of the token contract itself to supply the proper authentication methods for who is allowed to set the name etc?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171163678/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171165295",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171165295",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171165295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTE2NTI5NQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T04:43:34Z",
    "updated_at": "2016-01-13T04:43:34Z",
    "author_association": "NONE",
    "body": "I think the most important thing about this, and the hardest to get right is the economics of how to properly allocate the names and symbols for the tokens, i.e. name squatting. The moment the first registry launches people are immediately going to register (Dollar, $), (Euro, â‚¬), (Bitcoin, Éƒ) etc. So I fear that even if we have a good standard here this will still remain a problem.\n\nI guess for private and semi-private registries with access control to only approved tokens this standard will still be valuable. So the above might be out of scope for this discussion and can be deferred to when more public registries launch.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171165295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171173869",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171173869",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171173869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTE3Mzg2OQ==",
    "user": {
      "login": "caktux",
      "id": 13692,
      "node_id": "MDQ6VXNlcjEzNjky",
      "avatar_url": "https://avatars.githubusercontent.com/u/13692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caktux",
      "html_url": "https://github.com/caktux",
      "followers_url": "https://api.github.com/users/caktux/followers",
      "following_url": "https://api.github.com/users/caktux/following{/other_user}",
      "gists_url": "https://api.github.com/users/caktux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caktux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caktux/subscriptions",
      "organizations_url": "https://api.github.com/users/caktux/orgs",
      "repos_url": "https://api.github.com/users/caktux/repos",
      "events_url": "https://api.github.com/users/caktux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caktux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T05:26:12Z",
    "updated_at": "2016-01-13T05:26:12Z",
    "author_association": "NONE",
    "body": "Also thought about msg.sender being the token but forgot to mention. Not only would contracts have to implement support for the registry standard, but it would mean we can't really use the Token standard until this one is also finalized...\n\nHaving to set each property separately also seems inefficient. Setting all of those in a single transaction would make a lot more sense, while allowing to pass a contract address to solve the msg.sender issue. Otherwise each setter would also need a contract parameter. In any case, setters should take a contract address and not just use `msg.sender`.\n\nProposed single-method setter:\n\n``` js\nsetToken(address _contract, bytes32 _symbol, bytes32 _name, uint256 _decimals) returns (bool success)\n```\n\nIf we do stick with separate setters, inputs should probably be more descriptive than `_s`\n\nI think there should also be methods for getting the contract address by name and symbol:\n\n``` js\ntokenByName(bytes32 _name) constant returns (address)\ntokenBySymbol(bytes32 _symbol) constant returns (address)\n```\n\n@christianlundkvist has a very good point about the economics, especially for global registries. If we agree that this standard is ok as a first-come-first-serve basis then fine, but it might not be the best standard to use for any global registry.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171173869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171285729",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171285729",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171285729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTI4NTcyOQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T13:10:41Z",
    "updated_at": "2016-01-13T13:10:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with all of this. besides i would like to keep names `string` type, as we will improve this type in solidly in the future. Also should token names not be too long, we can add a max to the standard.\n\nI agree that registering a token should be done from the token contract itself. Ideally this is done in the constructor function of the token contract.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171285729/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171327770",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171327770",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171327770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTMyNzc3MA==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T15:22:20Z",
    "updated_at": "2016-01-13T15:22:20Z",
    "author_association": "NONE",
    "body": "I still don't see why we should care how registry entries are set. Each system has its own logic to decide which tokens to allow or not. End users do not call those functions often, do you expect a registry writer to care about supporting GUI setters? The difference between this and the \"setters\" in the token standard is that here there is a clear \"user\" vs \"admin\" feature distinction.\n\nThat said, @caktux setter makes the most sense so far, if we are to include one.\n\n> as we will improve this type in solidly in the future\n\nIt's not just solidity, you need a VM change to use strings properly. Does this standard really need to wait until Serenity? Or do you mean there should be a sort of \"try get string return value with length N\" in Solidity?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171327770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171329622",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171329622",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171329622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTMyOTYyMg==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T15:25:19Z",
    "updated_at": "2016-01-13T15:25:19Z",
    "author_association": "NONE",
    "body": "> I agree that registering a token should be done from the token contract itself. Ideally this is done in the constructor function of the token contract.\n\nI don't see anything to gain from this (any contract can pretend to be a token so you must curate them anyway), but plenty to lose: you can't register tokens into registries if the token was made with no knowledge of the registry standard and with no generic \"exec\" capabilities. Again supporting @caktux's setter if we must use one at all.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171329622/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171349967",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171349967",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171349967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTM0OTk2Nw==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T16:26:02Z",
    "updated_at": "2016-01-13T16:26:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chriseth can you comment on string support in solidity?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171349967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171429865",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171429865",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171429865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTQyOTg2NQ==",
    "user": {
      "login": "caktux",
      "id": 13692,
      "node_id": "MDQ6VXNlcjEzNjky",
      "avatar_url": "https://avatars.githubusercontent.com/u/13692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caktux",
      "html_url": "https://github.com/caktux",
      "followers_url": "https://api.github.com/users/caktux/followers",
      "following_url": "https://api.github.com/users/caktux/following{/other_user}",
      "gists_url": "https://api.github.com/users/caktux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caktux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caktux/subscriptions",
      "organizations_url": "https://api.github.com/users/caktux/orgs",
      "repos_url": "https://api.github.com/users/caktux/repos",
      "events_url": "https://api.github.com/users/caktux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caktux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-13T20:56:29Z",
    "updated_at": "2016-01-15T09:35:42Z",
    "author_association": "NONE",
    "body": "@frozeman we do not agree about where this should be called from; the token creator should be able to call `setToken` and **not** have to implement it in the token's constructor.\n\n@nmushegian has a really good point about VM limitations, and `bytes32` seems plenty of characters for both a token name and its symbol.\n\nPushing the single-method setter idea, I think a single-method getter would also be better:\n\n``` js\ntoken(address _contract) returns (bytes32 _symbol, bytes32 _name, uint256 _decimals)\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171429865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171590471",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171590471",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171590471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTU5MDQ3MQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T09:51:01Z",
    "updated_at": "2016-01-14T09:51:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "So the `setToken`, uses msg.sender to determine that the contract itself is trying to set its registry, right?\nOr how would you prevent anybody from registering anything? (Or overwriting)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171590471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171642532",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171642532",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171642532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTY0MjUzMg==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-14T13:20:45Z",
    "updated_at": "2016-01-14T13:24:24Z",
    "author_association": "NONE",
    "body": "- Tokens do not have a unique registry, I bet any token DAO will curate its own registries and point to existing tokens\n- Tokens might not want to be part of a registry when written, but later decide they do\n- There is no mention of any \"hidden behavior\" your token needs to have in ERC20\n\nMy proposed alternative is to leave the behavior up to the user. Any authorization pattern (have an `owner` or a DOUG-like or `Authority`) will do the trick. Up to you. It doesn't affect the signature. That's almost the same as saying its undefined, which makes me want to argue we should drop the setters again.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171642532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171916430",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-171916430",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 171916430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTkxNjQzMA==",
    "user": {
      "login": "caktux",
      "id": 13692,
      "node_id": "MDQ6VXNlcjEzNjky",
      "avatar_url": "https://avatars.githubusercontent.com/u/13692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caktux",
      "html_url": "https://github.com/caktux",
      "followers_url": "https://api.github.com/users/caktux/followers",
      "following_url": "https://api.github.com/users/caktux/following{/other_user}",
      "gists_url": "https://api.github.com/users/caktux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caktux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caktux/subscriptions",
      "organizations_url": "https://api.github.com/users/caktux/orgs",
      "repos_url": "https://api.github.com/users/caktux/repos",
      "events_url": "https://api.github.com/users/caktux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caktux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-15T09:53:33Z",
    "updated_at": "2016-01-15T09:56:20Z",
    "author_association": "NONE",
    "body": "@frozeman No, that's what I keep saying. It's already too late to require tokens to implement this. Digix is live, the Token Standard is now set in stone and existing contracts simply can't register themselves to a global registry. Not only that, but passing a contract address doesn't change anything as to who or what can register names and symbols; you'd only prevent legitimate existing tokens from getting registered. What you're pointing out is the issue @christianlundkvist mentioned. If we want to allow changes to a registry entry, you just check `if (msg.sender == entry.contract || msg.sender == entry.creator)` where `entry.creator` was set from the initial `msg.sender`.\n\nI see your point about setters @nmushegian but I still think it should be part of the standard, so that developers won't have to call a different method for every registry they might need to use. \"Is that a Standard Token Registry? Yes, but here's the setter method for this one...\"\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/171916430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/189822179",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-189822179",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 189822179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4OTgyMjE3OQ==",
    "user": {
      "login": "larspensjo",
      "id": 2412342,
      "node_id": "MDQ6VXNlcjI0MTIzNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2412342?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/larspensjo",
      "html_url": "https://github.com/larspensjo",
      "followers_url": "https://api.github.com/users/larspensjo/followers",
      "following_url": "https://api.github.com/users/larspensjo/following{/other_user}",
      "gists_url": "https://api.github.com/users/larspensjo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/larspensjo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/larspensjo/subscriptions",
      "organizations_url": "https://api.github.com/users/larspensjo/orgs",
      "repos_url": "https://api.github.com/users/larspensjo/repos",
      "events_url": "https://api.github.com/users/larspensjo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/larspensjo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-28T08:46:43Z",
    "updated_at": "2016-02-28T08:46:43Z",
    "author_association": "NONE",
    "body": "I think it is problematic to create an official registry of tokens, mostly because of the economics. It can be assumed that there is no model of economics that is perfect. Instead, we should expect there to be many registries, all based on their own economics. E.g. some may simply be \"first grab\", while other have intricate ways of managing fees.\n\nIf so, it means that creators of tokens will have to decide where they want to register, which can be more than one place. There will most probably be a network effect, with preferred solutions. This can be problematic from the user point of view. They will have to manage what registries they trust.Ultimately, this should be supported in a user friendly way by the UI. The same goes for exchanges.\n\nThis way would mean management of registries is completely decentralized, except for the protocol. Maybe this was already obvious to everyone except me...\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/189822179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/199528820",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-199528820",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 199528820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTUyODgyMA==",
    "user": {
      "login": "juanfranblanco",
      "id": 562371,
      "node_id": "MDQ6VXNlcjU2MjM3MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/562371?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juanfranblanco",
      "html_url": "https://github.com/juanfranblanco",
      "followers_url": "https://api.github.com/users/juanfranblanco/followers",
      "following_url": "https://api.github.com/users/juanfranblanco/following{/other_user}",
      "gists_url": "https://api.github.com/users/juanfranblanco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juanfranblanco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juanfranblanco/subscriptions",
      "organizations_url": "https://api.github.com/users/juanfranblanco/orgs",
      "repos_url": "https://api.github.com/users/juanfranblanco/repos",
      "events_url": "https://api.github.com/users/juanfranblanco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juanfranblanco/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-21T23:12:34Z",
    "updated_at": "2016-03-21T23:12:45Z",
    "author_association": "NONE",
    "body": "Bumping this, it will be ideal together with the token standard as it would allow any contract to use any asset as opposed to a single one. It will also simplify the creation of apis as they only need to worry about the token names as opposed the contract addresses.\n\nI agreed that there can be many registries, as a registry can be part of a wider application.  IE specific \"wallet\" for a dapp.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/199528820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/267320345",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-267320345",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 267320345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzMyMDM0NQ==",
    "user": {
      "login": "clowestab",
      "id": 4473177,
      "node_id": "MDQ6VXNlcjQ0NzMxNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4473177?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clowestab",
      "html_url": "https://github.com/clowestab",
      "followers_url": "https://api.github.com/users/clowestab/followers",
      "following_url": "https://api.github.com/users/clowestab/following{/other_user}",
      "gists_url": "https://api.github.com/users/clowestab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clowestab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clowestab/subscriptions",
      "organizations_url": "https://api.github.com/users/clowestab/orgs",
      "repos_url": "https://api.github.com/users/clowestab/repos",
      "events_url": "https://api.github.com/users/clowestab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clowestab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-15T12:52:34Z",
    "updated_at": "2016-12-15T12:52:34Z",
    "author_association": "NONE",
    "body": "Is there any updated insight to be shared on this?\r\n\r\nGiven the progress of the ENS ([EIP 162](https://github.com/ethereum/EIPs/issues/162)) can we not ignore the Economics of token naming here and rather consider it from the ENS.\r\n\r\nTo clarify. A token registers a 'token-name.token' name which points to a contract implementing EIP 20. The Economics/allocation issues are handled within the name registration functionality. You can name your token whatever you like - it is essentially a 'Display name'. As such multiple tokens might be called 'Bitcoin' or 'USD', yet only one will be referred to by 'usd.token'.\r\n\r\nMy point being to attempt to focus our 'Economics brain power' to the development of a perfect ENS - abstract all the Economics to the ENS.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/267320345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/267852992",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-267852992",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 267852992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Nzg1Mjk5Mg==",
    "user": {
      "login": "realcodywburns",
      "id": 13103499,
      "node_id": "MDQ6VXNlcjEzMTAzNDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13103499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realcodywburns",
      "html_url": "https://github.com/realcodywburns",
      "followers_url": "https://api.github.com/users/realcodywburns/followers",
      "following_url": "https://api.github.com/users/realcodywburns/following{/other_user}",
      "gists_url": "https://api.github.com/users/realcodywburns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realcodywburns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realcodywburns/subscriptions",
      "organizations_url": "https://api.github.com/users/realcodywburns/orgs",
      "repos_url": "https://api.github.com/users/realcodywburns/repos",
      "events_url": "https://api.github.com/users/realcodywburns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realcodywburns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-18T22:50:09Z",
    "updated_at": "2016-12-18T22:50:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that it would be beneficial for common contract types to be able to reliably register and be found via the ens system. For the tokens specifically, assuming they are EIP 20 compliant, the ability to find locate and us a token would only require knowing its name.   ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/267852992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285785075",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-285785075",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 285785075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTc4NTA3NQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T21:08:33Z",
    "updated_at": "2017-03-10T21:08:33Z",
    "author_association": "MEMBER",
    "body": "@frozeman I'm confused by this example, it doesn't seem to align with the description above it:\r\n> Bob has a balance of 100000 BobTokens, whose base unit is 100. His balance will be displayed on the client as BOB$100.00\r\n\r\n`100000 / 100 = 1000`\r\n\r\nThe description above states:\r\n> The client should always display the total units divided by baseUnit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285785075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314120001",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-314120001",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 314120001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDEyMDAwMQ==",
    "user": {
      "login": "jooray",
      "id": 1028688,
      "node_id": "MDQ6VXNlcjEwMjg2ODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1028688?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jooray",
      "html_url": "https://github.com/jooray",
      "followers_url": "https://api.github.com/users/jooray/followers",
      "following_url": "https://api.github.com/users/jooray/following{/other_user}",
      "gists_url": "https://api.github.com/users/jooray/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jooray/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jooray/subscriptions",
      "organizations_url": "https://api.github.com/users/jooray/orgs",
      "repos_url": "https://api.github.com/users/jooray/repos",
      "events_url": "https://api.github.com/users/jooray/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jooray/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-10T14:19:31Z",
    "updated_at": "2017-07-10T14:19:31Z",
    "author_association": "NONE",
    "body": "@realcodywburns This is still not good enough for wallets that want to display all standard tokens that the user owns. You need an easy way to iterate through all the tokens. Also a lookup by address is very useful. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314120001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314121124",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-314121124",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 314121124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDEyMTEyNA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-10T14:23:14Z",
    "updated_at": "2017-07-10T14:23:14Z",
    "author_association": "MEMBER",
    "body": "It's possible to iterate over all the subdomains of a domain using the events emitted by the ENS registry. I expect in the long run that the complete list of tokens will be so long as to make enumerating them all for each user impractical, however.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314121124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1016087552",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-1016087552",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 1016087552,
    "node_id": "IC_kwDOAq426M48kEQA",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-19T05:10:00Z",
    "updated_at": "2022-01-19T05:10:00Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1016087552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1027588485",
    "html_url": "https://github.com/ethereum/EIPs/issues/22#issuecomment-1027588485",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/22",
    "id": 1027588485,
    "node_id": "IC_kwDOAq426M49P8GF",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-02-02T05:10:07Z",
    "updated_at": "2022-02-02T05:10:07Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1027588485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
