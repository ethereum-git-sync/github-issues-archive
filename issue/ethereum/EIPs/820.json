{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/820/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/820/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/820/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/820",
  "id": 286266121,
  "node_id": "MDU6SXNzdWUyODYyNjYxMjE=",
  "number": 820,
  "title": "EIP 820: Pseudo-introspection using a registry contract.",
  "user": {
    "login": "jbaylina",
    "id": 4180156,
    "node_id": "MDQ6VXNlcjQxODAxNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbaylina",
    "html_url": "https://github.com/jbaylina",
    "followers_url": "https://api.github.com/users/jbaylina/followers",
    "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
    "organizations_url": "https://api.github.com/users/jbaylina/orgs",
    "repos_url": "https://api.github.com/users/jbaylina/repos",
    "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbaylina/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 82,
  "created_at": "2018-01-05T11:41:49Z",
  "updated_at": "2022-01-02T08:13:42Z",
  "closed_at": "2022-01-02T08:13:42Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Please, see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-820.md for further discussion.\r\n\r\n----\r\n## Preamble\r\n\r\n    EIP: 820\r\n    Title: Pseudo-introspection using a registry contract.\r\n    Author: Jordi Baylina <jordi@baylina.cat>\r\n    Type: StandardTrack\r\n    Category: ERC\r\n    Status: Draft\r\n    Created: 2018-01-05\r\n\r\n## Simple Summary\r\n\r\nThis standard defines a universal registry smart contract where any address (contract or regular account) can register which interface it implements and which smart contract is responsible for its implementation.\r\n\r\nThis standard keeps backwards compatibility with [EIP-165](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)\r\n\r\n## Abstract\r\n\r\nThis standard attempts to define a registry where smart contracts and regular accounts can publish which functionalities they implement.\r\n\r\nThe rest of the world can query this registry to ask if a specific address implements a given interface and which smart contract handles its implementation.\r\n\r\nThis registry can be deployed on any chain and will share the exact same address.\r\n\r\nInterfaces where the last 28 bytes are `0` are considered [EIP-165](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md) interfaces, and this registry\r\nwill forward the call to the contract to see if they implement that interface.\r\n\r\nThis contract will act also as an [EIP-165](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md) cache in order to safe gas.\r\n\r\n## Motivation\r\n\r\nThere has been different approaches to define pseudo-introspection in the Ethereum. The first is [EIP-165](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md) which has the problem that it is not available for regular accounts to use. The second approach is EIP-672 which uses reverseENS. Using reverseENS, has two issues. First, it is unnecessarily complex, and second, ENS is still a centralized contract controlled by a multisig.  This multisig, theoretically would be able to modify the system.\r\n\r\nThis standard is much simpler than [EIP-672](https://github.com/ethereum/EIPs/issues/672) and it is absolutely decentralized.\r\n\r\nThis standard also solves the problem of having different addresses for different chains.\r\n\r\n## Specification\r\n\r\n### The smart contract\r\n\r\n```solidity\r\npragma solidity 0.4.20;\r\n\r\ninterface ERC820ImplementerInterface {\r\n    /// @notice Contracts that implement an interferce in behalf of another contract must return true\r\n    /// @param addr Address that the contract woll implement the interface in behalf of\r\n    /// @param interfaceHash keccak256 of the name of the interface\r\n    /// @return ERC820_ACCEPT_MAGIC if the contract can implement the interface represented by\r\n    ///  `Ã¬nterfaceHash` in behalf of `addr`\r\n    function canImplementInterfaceForAddress(address addr, bytes32 interfaceHash) view public returns(bytes32);\r\n}\r\n\r\ncontract ERC820Registry {\r\n    bytes4 constant InvalidID = 0xffffffff;\r\n    bytes4 constant ERC165ID = 0x01ffc9a7;\r\n    bytes32 constant ERC820_ACCEPT_MAGIC = keccak256(\"ERC820_ACCEPT_MAGIC\");\r\n\r\n\r\n    mapping (address => mapping(bytes32 => address)) interfaces;\r\n    mapping (address => address) managers;\r\n    mapping (address => mapping(bytes4 => bool)) erc165Cache;\r\n\r\n    modifier canManage(address addr) {\r\n        require(getManager(addr) == msg.sender);\r\n        _;\r\n    }\r\n\r\n\r\n    event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);\r\n    event ManagerChanged(address indexed addr, address indexed newManager);\r\n\r\n    /// @notice Query the hash of an interface given a name\r\n    /// @param interfaceName Name of the interfce\r\n    function interfaceHash(string interfaceName) public pure returns(bytes32) {\r\n        return keccak256(interfaceName);\r\n    }\r\n\r\n    /// @notice GetManager\r\n    function getManager(address addr) public view returns(address) {\r\n        // By default the manager of an address is the same address\r\n        if (managers[addr] == 0) {\r\n            return addr;\r\n        } else {\r\n            return managers[addr];\r\n        }\r\n    }\r\n\r\n    /// @notice Sets an external `manager` that will be able to call `setInterfaceImplementer()`\r\n    ///  on behalf of the address.\r\n    /// @param addr Address that you are defining the manager for.\r\n    /// @param newManager The address of the manager for the `addr` that will replace\r\n    ///  the old one.  Set to 0x0 if you want to remove the manager.\r\n    function setManager(address addr, address newManager) public canManage(addr) {\r\n        managers[addr] = newManager == addr ? 0 : newManager;\r\n        ManagerChanged(addr, newManager);\r\n    }\r\n\r\n    /// @notice Query if an address implements an interface and thru which contract\r\n    /// @param addr Address that is being queried for the implementation of an interface\r\n    /// @param iHash SHA3 of the name of the interface as a string\r\n    ///  Example `web3.utils.sha3('ERC777Token`')`\r\n    /// @return The address of the contract that implements a specific interface\r\n    ///  or 0x0 if `addr` does not implement this interface\r\n    function getInterfaceImplementer(address addr, bytes32 iHash) constant public returns (address) {\r\n        if (isERC165Interface(iHash)) {\r\n            bytes4 i165Hash = bytes4(iHash);\r\n            return erc165InterfaceSupported(addr, i165Hash) ? addr : 0;\r\n        }\r\n        return interfaces[addr][iHash];\r\n    }\r\n\r\n    /// @notice Sets the contract that will handle a specific interface; only\r\n    ///  the address itself or a `manager` defined for that address can set it\r\n    /// @param addr Address that you want to define the interface for\r\n    /// @param iHash SHA3 of the name of the interface as a string\r\n    ///  For example `web3.utils.sha3('Ierc777')` for the Ierc777\r\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public canManage(addr)  {\r\n        require(!isERC165Interface(iHash));\r\n        if ((implementer != 0) && (implementer!=msg.sender)) {\r\n            require(ERC820ImplementerInterface(implementer).canImplementInterfaceForAddress(addr, iHash)\r\n                        == ERC820_ACCEPT_MAGIC);\r\n        }\r\n        interfaces[addr][iHash] = implementer;\r\n        InterfaceImplementerSet(addr, iHash, implementer);\r\n    }\r\n\r\n\r\n/// ERC165 Specific\r\n\r\n    function isERC165Interface(bytes32 iHash) internal pure returns (bool) {\r\n        return iHash & 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0;\r\n    }\r\n\r\n    function erc165InterfaceSupported(address _contract, bytes4 _interfaceId) constant public returns (bool) {\r\n        if (!erc165Cache[_contract][_interfaceId]) {\r\n            erc165UpdateCache(_contract, _interfaceId);\r\n        }\r\n        return interfaces[_contract][_interfaceId] != 0;\r\n    }\r\n\r\n    function erc165UpdateCache(address _contract, bytes4 _interfaceId) public {\r\n        interfaces[_contract][_interfaceId] =\r\n            erc165InterfaceSupported_NoCache(_contract, _interfaceId) ? _contract : 0;\r\n        erc165Cache[_contract][_interfaceId] = true;\r\n    }\r\n\r\n    function erc165InterfaceSupported_NoCache(address _contract, bytes4 _interfaceId) public constant returns (bool) {\r\n        uint256 success;\r\n        uint256 result;\r\n\r\n        (success, result) = noThrowCall(_contract, ERC165ID);\r\n        if ((success==0)||(result==0)) {\r\n            return false;\r\n        }\r\n\r\n        (success, result) = noThrowCall(_contract, InvalidID);\r\n        if ((success==0)||(result!=0)) {\r\n            return false;\r\n        }\r\n\r\n        (success, result) = noThrowCall(_contract, _interfaceId);\r\n        if ((success==1)&&(result==1)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function noThrowCall(address _contract, bytes4 _interfaceId) constant internal returns (uint256 success, uint256 result) {\r\n        bytes4 erc165ID = ERC165ID;\r\n\r\n        assembly {\r\n                let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\r\n                mstore(x, erc165ID)                // Place signature at begining of empty storage\r\n                mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\r\n\r\n                success := staticcall(\r\n                                    30000,         // 30k gas\r\n                                    _contract,     // To addr\r\n                                    x,             // Inputs are stored at location x\r\n                                    0x08,          // Inputs are 8 bytes long\r\n                                    x,             // Store output over input (saves space)\r\n                                    0x20)          // Outputs are 32 bytes long\r\n\r\n                result := mload(x)                 // Load the result\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Raw transaction for deploying the smart contract on any chain\r\n\r\n```\r\n0xf908778085174876e800830c35008080b908246060604052341561000f57600080fd5b6108068061001e6000396000f30060606040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166329965a1d81146100925780633d584063146100bd578063571a1f66146100f85780635df8122f1461012457806365ba36c11461014957806390e47957146101ac578063aabbb8ca146101ec578063ddc23ddd1461020e575b600080fd5b341561009d57600080fd5b6100bb600160a060020a03600435811690602435906044351661023a565b005b34156100c857600080fd5b6100dc600160a060020a03600435166103ec565b604051600160a060020a03909116815260200160405180910390f35b341561010357600080fd5b6100bb600160a060020a0360043516600160e060020a031960243516610438565b341561012f57600080fd5b6100bb600160a060020a03600435811690602435166104c2565b341561015457600080fd5b61019a60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061057d95505050505050565b60405190815260200160405180910390f35b34156101b757600080fd5b6101d8600160a060020a0360043516600160e060020a0319602435166105e2565b604051901515815260200160405180910390f35b34156101f757600080fd5b6100dc600160a060020a0360043516602435610658565b341561021957600080fd5b6101d8600160a060020a0360043516600160e060020a0319602435166106b7565b8233600160a060020a031661024e826103ec565b600160a060020a03161461026157600080fd5b61026a8361076e565b1561027457600080fd5b600160a060020a0382161580159061029e575033600160a060020a031682600160a060020a031614155b15610373576040517f4552433832305f4143434550545f4d41474943000000000000000000000000008152601301604051908190039020600160a060020a03831663f008325086866000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561034b57600080fd5b6102c65a03f1151561035c57600080fd5b505050604051805191909114905061037357600080fd5b600160a060020a0384811660008181526020818152604080832088845290915290819020805473ffffffffffffffffffffffffffffffffffffffff191693861693841790558591907f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153905160405180910390a450505050565b600160a060020a038082166000908152600160205260408120549091161515610416575080610433565b50600160a060020a03808216600090815260016020526040902054165b919050565b61044282826106b7565b61044d57600061044f565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b8133600160a060020a03166104d6826103ec565b600160a060020a0316146104e957600080fd5b82600160a060020a031682600160a060020a031614610508578161050b565b60005b600160a060020a0384811660008181526001602052604090819020805473ffffffffffffffffffffffffffffffffffffffff191694841694909417909355908416917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a4350905160405180910390a3505050565b6000816040518082805190602001908083835b602083106105af5780518252601f199092019160209182019101610590565b6001836020036101000a038019825116818451161790925250505091909101925060409150505180910390209050919050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff161515610623576106238383610438565b50600160a060020a03918216600090815260208181526040808320600160e060020a0319949094168352929052205416151590565b6000806106648361076e565b1561068957508161067584826105e2565b610680576000610682565b835b91506106b0565b600160a060020a038085166000908152602081815260408083208784529091529020541691505b5092915050565b600080806106e5857f01ffc9a700000000000000000000000000000000000000000000000000000000610790565b90925090508115806106f5575080155b156107035760009250610766565b61071585600160e060020a0319610790565b909250905081158061072657508015155b156107345760009250610766565b61073e8585610790565b90925090506001821480156107535750806001145b156107615760019250610766565b600092505b505092915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6000807f01ffc9a70000000000000000000000000000000000000000000000000000000060405181815284600482015260208160088389617530fa935080519250505092509290505600a165627a7a72305820b424185958879a1eef1cb7235bfd8ed607a7402b46853860e5343340925f028e00291ba079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798a00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n```\r\n\r\nYou can see the string of `a`s at the end of the transaction. This is the `s` of the signature, meaning that its a deterministic by hand forced signature.\r\n\r\n### Deployment method\r\n\r\nThis contract is going to be deployed using the Nick's Method.\r\n\r\nThis method works as follows:\r\n\r\n1. Generate a transaction that deploys the contract from a new random account. This transaction must not use [EIP-155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md) so it can work on any chain. This transaction needs to also have a relatively high gas price in order to be deployed in any chain. In this case, it's going to be 100Gwei.\r\n2. Set the `v`, `r`,  `s` of the transaction signature to the following values:\r\n`\r\n    v: 27`\r\n`\r\n    r: 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798`\r\n`\r\n    s: 0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`\r\nThis nice `s` value is a random number generated deterministically by a human.\r\n3. We recover the sender of this transaction. We will have an account that can broadcast that transaction, but we also have the waranty that nobody knows the private key of that account.\r\n4. Send Ether to this deployment account.\r\n5. Broadcast the transaction.\r\n\r\nThis operation can be done in any chain, guaranteed that the contract address is going to always be the same and nobody will be able to mess up that address with a different contract.\r\n\r\n\r\n### Special registry deployment account\r\n\r\n```\r\n0x91c2b265ece9442ed28e3c4283652b1894dcdabb\r\n```\r\n\r\nThis account is generated by reverse engineering it from it's signature for the transaction, in this way no one knows the private key, but it is known that it's the valid signer of the deployment transaction.\r\n\r\n### Deployed contract\r\n\r\n```\r\n0x991a1bcb077599290d7305493c9a630c20f8b798\r\n```\r\n\r\nThe contract will have this address for every chain it is deployed to.\r\n\r\n### Interface name\r\n\r\nYour interface name is hashed and sent to `getInterfaceImplementer()`. If you are writing a standard, it is best practice to explicitly state the interface name and link to this published EIP-820 so that other people don't have to come here to look up these rules.\r\n\r\n#### If it's an approved EIP\r\n\r\nThe interface is named like `ERC###XXXXX`. The meaning of this interface is defined in the EIP specified. And XXX should be the name of the interface camelCase.\r\n\r\nExamples:\r\n\r\n`sha3(\"ERC20Token\")`\r\n`sha3(\"ERC777Token\")`\r\n`sha3(\"ERC777TokensReceiver\")`\r\n`sha3(\"ERC777TokensSender\")`\r\n\r\n#### [EIP-165](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md) compatible interfaces\r\n\r\nInterfaces where the last 28bytes are 0, then this will be considered an [EIP-165](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md) interface.\r\n\r\n#### Private user defined interface\r\n\r\nThis scheme is extensible. If you want to make up your own interface name and raise awareness to get other people to implement it and then check for those implementations, great! Have fun, but please do not conflict with the reserved designations above.\r\n\r\n## Backwards Compatibility\r\n\r\nThis standard is backwards compatible with [EIP-165](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md), as both methods can be implemented without conflicting one each other.\r\n\r\n## Test Cases\r\n\r\nPlease, check the repository https://github.com/jbaylina/eip820 for the full test suit.\r\n\r\n## Implementation\r\n\r\nThe implementation can be found in this repo: https://github.com/jbaylina/eip820\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/820/reactions",
    "total_count": 32,
    "+1": 17,
    "-1": 0,
    "laugh": 1,
    "hooray": 2,
    "confused": 0,
    "heart": 12,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/820/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/357651859",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-357651859",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 357651859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY1MTg1OQ==",
    "user": {
      "login": "stevenh512",
      "id": 110500,
      "node_id": "MDQ6VXNlcjExMDUwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/110500?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevenh512",
      "html_url": "https://github.com/stevenh512",
      "followers_url": "https://api.github.com/users/stevenh512/followers",
      "following_url": "https://api.github.com/users/stevenh512/following{/other_user}",
      "gists_url": "https://api.github.com/users/stevenh512/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stevenh512/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stevenh512/subscriptions",
      "organizations_url": "https://api.github.com/users/stevenh512/orgs",
      "repos_url": "https://api.github.com/users/stevenh512/repos",
      "events_url": "https://api.github.com/users/stevenh512/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stevenh512/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-15T11:06:35Z",
    "updated_at": "2018-01-15T11:09:46Z",
    "author_association": "NONE",
    "body": "I was a fan of EIP-672 (with the minor changes I made to preserve normal reverse resolution), but I really like this, it's a lot simpler.\r\n\r\nI wonder if `managers` really needs to be its own mapping. I realized with EIP-672 that the same mechanism can be used to assign roles in situations where you want to enforce one address per role (think CryptoKitties, their contract has `CEO`, `COO`, and `CFO` roles). Instead of a separate mapping, an app could just use `setInterfaceImplementation(\"role_manager\", newManager)` and the registry could use `interfaces[addr][keccak256(\"role_manager\")]` to look it up. (The prefix \"role_\" was used to prevent collision in case a contract wants to register an interface called \"manager\", realistically any prefix could be used as long as it's unlikely to be confused with an interface name).\r\n\r\nThe above (at least for the manager role) could be abstracted away into the registry, so that `managers(addr)` returns `interfaces[addr][keccak256(\"role_manager\")]` and `changeManager(addr, newManager)` sets `interfaces[addr][keccak256(\"role_manager\"}] = newManager`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/357651859/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/358277065",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-358277065",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 358277065,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODI3NzA2NQ==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-17T11:29:13Z",
    "updated_at": "2018-01-17T11:29:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Should there be a standard, or at least a recommendation, for interface names?  The example interface name `Ierc777` requires people to remember the capitalisation and also confuses ERC with EIP.  It also starts with 'I', which is implied by the definition of what the registry provides.\r\n\r\nStating that interface names should be lower-case, and those that come from an EIP should be of the format eipx e.g. `eip777` might reduce confusion when attempting to check interfaces.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/358277065/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361475096",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361475096",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361475096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQ3NTA5Ng==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T04:39:24Z",
    "updated_at": "2018-01-30T04:39:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am working on the competing ERC-165. We are suffering from one very specific problem: how to deal with these crazy DELEGATECALL contracts that may implement an interface today and stop implementing tomorrow. This EIP certainly is a solution to that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361475096/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361475923",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361475923",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361475923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQ3NTkyMw==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T04:46:07Z",
    "updated_at": "2018-01-30T04:46:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't understand your deployment strategy to a specified address. Is this already documented, could you please link to that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361475923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361477483",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361477483",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361477483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQ3NzQ4Mw==",
    "user": {
      "login": "hyperfekt",
      "id": 9434715,
      "node_id": "MDQ6VXNlcjk0MzQ3MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9434715?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hyperfekt",
      "html_url": "https://github.com/hyperfekt",
      "followers_url": "https://api.github.com/users/hyperfekt/followers",
      "following_url": "https://api.github.com/users/hyperfekt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hyperfekt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hyperfekt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hyperfekt/subscriptions",
      "organizations_url": "https://api.github.com/users/hyperfekt/orgs",
      "repos_url": "https://api.github.com/users/hyperfekt/repos",
      "events_url": "https://api.github.com/users/hyperfekt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hyperfekt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T04:58:15Z",
    "updated_at": "2018-01-30T04:58:15Z",
    "author_association": "NONE",
    "body": "@fulldecent There's some source code linked here:\r\nhttps://github.com/ethereum/EIPs/issues/777#issuecomment-356103528",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361477483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361477548",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361477548",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361477548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQ3NzU0OA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T04:58:46Z",
    "updated_at": "2018-01-30T05:07:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is no need to choose a special name for the manager's interface. Simply set the hash directly.\r\n\r\n```solidity\r\nfunction managerHash() public pure returns(bytes32) {\r\n    return 0xffffffff;\r\n}\r\n```\r\n\r\nHere is an implementation passing all test cases: https://github.com/jbaylina/eip820/pull/3\r\n\r\n(MY FORK DOES NOT UPDATE THE README AND NEW CONTRACT HASH, IMPORTANT STEPS INDEED.)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361477548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361479479",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361479479",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361479479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQ3OTQ3OQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T05:13:29Z",
    "updated_at": "2018-01-30T05:13:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Now here's a crazy idea.\r\n\r\nWhat if 165 did the same thing is this but just removed the `[addr]` part?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361479479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361616020",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361616020",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361616020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTYxNjAyMA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T14:49:49Z",
    "updated_at": "2018-01-30T14:49:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hyperfekt Thank you, and is there anything more that explains the calculations?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361616020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361637486",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361637486",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361637486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTYzNzQ4Ng==",
    "user": {
      "login": "hyperfekt",
      "id": 9434715,
      "node_id": "MDQ6VXNlcjk0MzQ3MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9434715?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hyperfekt",
      "html_url": "https://github.com/hyperfekt",
      "followers_url": "https://api.github.com/users/hyperfekt/followers",
      "following_url": "https://api.github.com/users/hyperfekt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hyperfekt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hyperfekt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hyperfekt/subscriptions",
      "organizations_url": "https://api.github.com/users/hyperfekt/orgs",
      "repos_url": "https://api.github.com/users/hyperfekt/repos",
      "events_url": "https://api.github.com/users/hyperfekt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hyperfekt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T15:53:10Z",
    "updated_at": "2018-01-30T15:53:10Z",
    "author_association": "NONE",
    "body": "> is there anything more that explains the calculations?\r\n\r\nPinging @Arachnid, since he came up with that technique.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361637486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361810898",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361810898",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361810898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTgxMDg5OA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T03:16:49Z",
    "updated_at": "2018-01-31T03:18:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mcdee \r\n\r\nProposal for naming interfaces. \r\n\r\n\r\n# Interface name\r\n\r\nYour interface name is hashed and sent to `getInterfaceImplementer()`. If you are writing a standard, it is best practice to explicitly state the interface name and link to this published EIP 820 so that other people don't have to come here to look up these rules.\r\n\r\n## If it's an approved EIP\r\n\r\nThe interface is named like `erc20`. The meaning of this interface is defined in the EIP specified.\r\n\r\n## If it's part of an approved EIP\r\n\r\nThe interface is named like `erc721-ERC721Enumerable `. The meaning of this interface is defined in the EIP specified. The interface name is defined in the standard.\r\n\r\n## If it's a draft EIP / on standards track\r\n\r\nThe interface is named `erc20-e48d3ef` where `e48d3ef` is a git commit hash in a pull request against https://github.com/ethereum/EIPs that includes sufficient details to implement the interface.\r\n\r\nPart of a draft? `erc721-1ca7dfb-ERC721Enumerable`\r\n\r\n## Somebody posted a draft interface in a GitHub comment\r\n\r\nRemember, comments are editable (retaining the same URL) and history is not retained. To be clear, EIP-820 doesn't help you much, you're really just playing around at this point.\r\n\r\nName it like `erc20-https://github.com/ethereum/EIPs/issues/820#issue-286266121` based on the comment URL which describes your interface.\r\n\r\nPart of a comment? `erc20-https://github.com/ethereum/EIPs/issues/820#issue-286266121-ERC20Detailed`\r\n\r\n## A function\r\n\r\nYou want to advertise support for an external Solidity function, but the details of the function are unspecified.\r\n\r\nThe interface is named like `bob(bytes4)` where `bob` is the function name and the function parameters are included in order (canonicalized, like `int` => `int32`) and separated by commas.\r\n\r\n## Something else\r\n\r\nThis scheme is extensible. If you want to make up your own interface name and raise awareness to get other people to implement it and then check for those implementations, great! Have fun, but please do not conflict with the reserved designations above.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361810898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361847390",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361847390",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361847390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTg0NzM5MA==",
    "user": {
      "login": "recmo",
      "id": 4532328,
      "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/recmo",
      "html_url": "https://github.com/recmo",
      "followers_url": "https://api.github.com/users/recmo/followers",
      "following_url": "https://api.github.com/users/recmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
      "organizations_url": "https://api.github.com/users/recmo/orgs",
      "repos_url": "https://api.github.com/users/recmo/repos",
      "events_url": "https://api.github.com/users/recmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/recmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T07:30:07Z",
    "updated_at": "2018-01-31T07:30:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "What happens if I make a token contract, and then maliciously set the erc20 implementer to the Golem token contract. Will contracts using my token now unexpectedly call `transfer` on the Golem token?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361847390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361907661",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361907661",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361907661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTkwNzY2MQ==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T11:41:27Z",
    "updated_at": "2018-01-31T11:47:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fulldecent \r\nI would remove the drafts part. You will break the compatibility when the standard is defined.\r\n\r\nRegarding the name, i like the interfaces to have readable names:\r\n\r\nerc20-Token\r\nerc777-Token\r\nerc777-TokenHolder\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361907661/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361909509",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361909509",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361909509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTkwOTUwOQ==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T11:49:50Z",
    "updated_at": "2018-01-31T11:49:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fulldecent Updated the proposal with your proposed changes without the drafts...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361909509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361910057",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361910057",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361910057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTkxMDA1Nw==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T11:52:20Z",
    "updated_at": "2018-01-31T11:52:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Recmo  The manager of the golemContract would be the only one to change the implementation for his address.  And in the case of the token interface, this does not apply.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361910057/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361952844",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-361952844",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 361952844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTk1Mjg0NA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T14:43:45Z",
    "updated_at": "2018-01-31T14:43:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "The issue regarding drafts is, for example with 721, there are now 7+ unversioned and incompatible interfaces for ERC-721. If cryptokitties launched with \"I support 721\" then somebody using 721 interefaces will be disappointed when CK doesn't do it the way that is standardized.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361952844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362049573",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-362049573",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 362049573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjA0OTU3Mw==",
    "user": {
      "login": "recmo",
      "id": 4532328,
      "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/recmo",
      "html_url": "https://github.com/recmo",
      "followers_url": "https://api.github.com/users/recmo/followers",
      "following_url": "https://api.github.com/users/recmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
      "organizations_url": "https://api.github.com/users/recmo/orgs",
      "repos_url": "https://api.github.com/users/recmo/repos",
      "events_url": "https://api.github.com/users/recmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/recmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T19:49:59Z",
    "updated_at": "2018-01-31T21:00:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbaylina Let me illustrate the security issue with a more explicit example. Consider the following hypothetical exchange that ~implements~ uses [EIP820.sol](https://github.com/jbaylina/eip820/blob/2f668e235acc662d272b8ec31875858685ad5e12/contracts/EIP820.sol) to access the [InterfaceImplementationRegistry](https://github.com/jbaylina/eip820/blob/2f668e235acc662d272b8ec31875858685ad5e12/contracts/InterfaceImplementationRegistry.sol):\r\n\r\n```js\r\ncontract SomeExchange is EIP820 {\r\n    \r\n    function settleTokens(address token, address from, address to, uint amount)\r\n        internal\r\n    {\r\n        ERC20 erc20 = ERC20(interfaceAddr(token, \"erc20-Token\"));\r\n        erc20.transferFrom(from, to, ammount);\r\n    }\r\n}\r\n```\r\nThis is how EIP820 is intended to be used, correct?\r\n\r\nWe will attack this exchange. First, I deploy a reasonable token contract that implements EIP820:\r\n\r\n```js\r\ncontract ReasonableToken is Ownable, ERC20, EIP820 {\r\n    \r\n    function ReasonableToken()\r\n        public\r\n    {\r\n        setInterfaceImplementation(\"erc20-Token\", this);\r\n        delegateManagement(owner());\r\n    }\r\n    \r\n    // ...\r\n}\r\n```\r\n\r\nLooks reasonable, right?\r\n\r\nNow I get people to trade this token on the exchange. When the conditions are right, I make the following transaction (pseudo-code):\r\n\r\n```js\r\nconst reasonableToken = ReasonableToken(0x0123.....);\r\nconst zrxToken = ERC20(0xe41d2489571d322189246dafa5ebde1f4699f498);\r\nconst iir = InterfaceImplementationRegistry(0xa80366843213DFBE44307c7c4Ce4BcfC7A6437E5);\r\n\r\niir.setInterfaceImplementer(reasonableToken, keccak256(\"erc20-Token\"), zrxToken);\r\n```\r\n\r\nThis transaction succeed, because I'm a manager of the ReasonableToken interfaces.\r\n\r\nAfter this, all settlements that where supposed to be made in ReasonableToken, are now made in ZRXToken! I set things up right, and now receive valuable ZRX token from people thinking they are selling me cheaper ReasonableToken. The use of ERC20 is just an example, this would work on any interface.\r\n\r\nThis works, because in `setInterfaceImplementer` I only need to manage the origin (`canManage(addr)`) contract, I don't need the manager role on the target `implementer` contract.\r\n\r\nNote that my use of delegation/manager was only to obscure the attack a bit more. A similar attack can be done without it.\r\n\r\n**How to fix it**: `setInterFaceImplementer` needs to verify that `implementer` is intended to be the implementer for `addr`:\r\n\r\n```js\r\ncontract EIP820Implementer {\r\n    function implementsFor() public returns (address);\r\n}\r\n```\r\n\r\n```js\r\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public canManage(addr)  {\r\n        require(EIP820Implementer(implementer).implementsFor() == addr);\r\n        interfaces[addr][iHash] = implementer;\r\n        InterfaceImplementerSet(addr, iHash, implementer);\r\n    }\r\n```\r\n\r\nFor extra safety it should also verify that it intends to implement the requested interface.\r\n\r\n**Alternative**: `canManage(addr) canManage(implementer)` would also work.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362049573/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362053801",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-362053801",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 362053801,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjA1MzgwMQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T20:03:56Z",
    "updated_at": "2018-01-31T20:03:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah... no. There is no contract that needs to inherit from ERC-820. ERC-820 is not an interface. It is just a specific contract on the blockchain.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362053801/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362054392",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-362054392",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 362054392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjA1NDM5Mg==",
    "user": {
      "login": "recmo",
      "id": 4532328,
      "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/recmo",
      "html_url": "https://github.com/recmo",
      "followers_url": "https://api.github.com/users/recmo/followers",
      "following_url": "https://api.github.com/users/recmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
      "organizations_url": "https://api.github.com/users/recmo/orgs",
      "repos_url": "https://api.github.com/users/recmo/repos",
      "events_url": "https://api.github.com/users/recmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/recmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-31T20:06:06Z",
    "updated_at": "2018-01-31T20:11:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fulldecent I'm using [EIP820.sol](https://github.com/jbaylina/eip820/blob/master/contracts/EIP820.sol), which to me looks like it's intended to be inherited from. (I think you might confuse it with [InterfaceImplementationRegistry.sol](https://github.com/jbaylina/eip820/blob/master/contracts/InterfaceImplementationRegistry.sol), which is the singleton registery that has its address hardcoded in the EIP820.sol. The naming is a bit unfortunate.).\r\n\r\nI can rewrite the attack to work without inheritance, if you like. (I also updated my previous comment to be a bit more clear about this).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362054392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362122802",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-362122802",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 362122802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjEyMjgwMg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-01T00:58:07Z",
    "updated_at": "2018-02-01T00:58:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, the attack is valid. Good fix.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362122802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362158650",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-362158650",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 362158650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjE1ODY1MA==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-01T04:56:55Z",
    "updated_at": "2018-02-01T04:56:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Recmo @fulldecent Updated the proposal with your suggestion.  Please review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362158650/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/367193135",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-367193135",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 367193135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzE5MzEzNQ==",
    "user": {
      "login": "rstormsf",
      "id": 9360827,
      "node_id": "MDQ6VXNlcjkzNjA4Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9360827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rstormsf",
      "html_url": "https://github.com/rstormsf",
      "followers_url": "https://api.github.com/users/rstormsf/followers",
      "following_url": "https://api.github.com/users/rstormsf/following{/other_user}",
      "gists_url": "https://api.github.com/users/rstormsf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rstormsf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rstormsf/subscriptions",
      "organizations_url": "https://api.github.com/users/rstormsf/orgs",
      "repos_url": "https://api.github.com/users/rstormsf/repos",
      "events_url": "https://api.github.com/users/rstormsf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rstormsf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T02:27:23Z",
    "updated_at": "2018-02-21T02:27:23Z",
    "author_association": "NONE",
    "body": "https://github.com/jbaylina/eip820/issues/5\r\n\r\nhttps://github.com/jbaylina/eip820/blob/master/contracts/ExampleImplementer.sol#L5\r\n```\r\npragma solidity ^0.4.18;\r\n\r\ncontract ExampleImplementer {\r\n    function canImplementInterfaceForAddress(address addr, bytes32 interfaceHash) view public returns(bool) {\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\nIf I unlock the fallback function and provide some default behavior, then it would break those checks because of strange behavior by design in solidity if a method does not exist it will instead execute the fallback function, and if the fallback function does not raise an exception it will return 1 causing the check to pass.\r\n\r\n\r\nThe only solution that comes to my mind is to use some magic numbers.  Maybe we should return uint which should be more than 0.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/367193135/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368054753",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-368054753",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 368054753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODA1NDc1Mw==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T16:10:16Z",
    "updated_at": "2018-02-23T16:10:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rstormsf I have heard this before too, but do you know of the canonical source which explains this further. I would just like to double check before we go thinking we solved the problem.\r\n\r\n```solidity\r\ncontract ExampleImplementer {\r\n    function canImplementInterfaceForAddress(address addr, bytes32 interfaceHash) view public returns(uint8) {\r\n        return 42;\r\n    }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368054753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368209677",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-368209677",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 368209677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODIwOTY3Nw==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-24T08:04:08Z",
    "updated_at": "2018-02-24T08:04:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fulldecent @rstormsf  Just added compatibility with EIP165 and the magic return.\r\n\r\nPlease review. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368209677/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368244239",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-368244239",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 368244239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODI0NDIzOQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-24T17:24:22Z",
    "updated_at": "2018-02-24T17:24:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "This magic value is much better than 42. Because the function signature may collide with other functions and 42 will collide with other people that choose 42.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368244239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368794707",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-368794707",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 368794707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODc5NDcwNw==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-27T09:00:30Z",
    "updated_at": "2018-02-27T09:00:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just open the PR https://github.com/ethereum/EIPs/pull/906 to be merged/approved.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368794707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/372680359",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-372680359",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 372680359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjY4MDM1OQ==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-13T14:16:58Z",
    "updated_at": "2018-03-13T14:16:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "The problem of using an external dependence, so things like \"address of contract\" and \"trustfulness of its contents\" are a problem, but from what I understood, ERC820Registry address will be derived from the code of contract, which is a brilliant way of solving this problem.\r\n\r\nHaving the external dependency trust solved this can be incorporated into Solidity or other high level ethereum programming languages, where the compiler can deploy this libraries when they are needed (not yet deployed).\r\n\r\nI think that if ERC820 is implemented by solidity, than #777 would be a really good interface. \r\nI need to learn more about the \"pseudo implementation\" of TokenReceiver and TokenSender, which seems to make solidity more abstract-able in terms of objective programming.  This all would be powerful for interface abstraction, and ERC777 would help as showing first use case of it. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/372680359/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379513762",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-379513762",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 379513762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTUxMzc2Mg==",
    "user": {
      "login": "jaycenhorton",
      "id": 18407013,
      "node_id": "MDQ6VXNlcjE4NDA3MDEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/18407013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaycenhorton",
      "html_url": "https://github.com/jaycenhorton",
      "followers_url": "https://api.github.com/users/jaycenhorton/followers",
      "following_url": "https://api.github.com/users/jaycenhorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaycenhorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaycenhorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaycenhorton/subscriptions",
      "organizations_url": "https://api.github.com/users/jaycenhorton/orgs",
      "repos_url": "https://api.github.com/users/jaycenhorton/repos",
      "events_url": "https://api.github.com/users/jaycenhorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaycenhorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-08T02:18:27Z",
    "updated_at": "2018-04-08T02:18:27Z",
    "author_association": "NONE",
    "body": "I'm quite confused by the `Deployment Method` above. What is the point of this? Is the point to create the registry with an account that no one holds the associated private key for? If so, it would be good to clearly define why that is needed.\r\n\r\nIf that's not the case, using \r\n```solidity\r\ncontract ERC820Implementer {\r\n    ...\r\n    IERC820Registry eip820Registry;\r\n    function ERC820Implementer (address _erc820RegistryAddr)  {\r\n        erc820Registry = IERC820Registry(_erc820RegistryAddr);\r\n        ...\r\n    }\r\n    ...\r\n}\r\ncontract ERC820ImplementerExample {\r\n    ...\r\n    function ERC820ImplementerExample(address _erc820RegistryAddr) ERC820Implementer (_erc820RegistryAddr) {\r\n         ...\r\n    }\r\n    ...\r\n}\r\n\r\n```\r\nalong with:\r\n```javascript\r\nawait deployer.deploy(ERC820Registry);\r\nawait deployer.deploy(ERC820ImplementerExample, ERC820Registry.address);\r\n```\r\nthis appears to be enough to accomplish the *functionality* described in this erc, but maybe not the features.\r\n\r\nI imagine it's not the case that it's a good idea to deploy this with an address with a known key pair. But if that's the case, can we expand on why?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379513762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381431282",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-381431282",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 381431282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTQzMTI4Mg==",
    "user": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-15T19:24:02Z",
    "updated_at": "2018-04-15T19:24:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbaylina the EIP-165 compatibility is problematic, in that the caching causes `constant` functions to write data when updating the cache.\r\n\r\nDoes the EIP-165 lookup need a cache?  Given that a non-caching version would be truly `constant` I don't see the benefit of having a cache in this situation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381431282/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386457388",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-386457388",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 386457388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQ1NzM4OA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T22:35:19Z",
    "updated_at": "2018-05-03T22:35:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "The example shows: \r\n\r\nsha3(\"ERC777Token\")\r\nsha3(\"ERC777TokensReceiver\")\r\nsha3(\"ERC777TokensSender\")\r\n\r\nBut interfaces with those names don't exist. (Thank you Stephane Gosselin.)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386457388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389987487",
    "html_url": "https://github.com/ethereum/EIPs/issues/820#issuecomment-389987487",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/820",
    "id": 389987487,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTk4NzQ4Nw==",
    "user": {
      "login": "jaycenhorton",
      "id": 18407013,
      "node_id": "MDQ6VXNlcjE4NDA3MDEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/18407013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaycenhorton",
      "html_url": "https://github.com/jaycenhorton",
      "followers_url": "https://api.github.com/users/jaycenhorton/followers",
      "following_url": "https://api.github.com/users/jaycenhorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaycenhorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaycenhorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaycenhorton/subscriptions",
      "organizations_url": "https://api.github.com/users/jaycenhorton/orgs",
      "repos_url": "https://api.github.com/users/jaycenhorton/repos",
      "events_url": "https://api.github.com/users/jaycenhorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaycenhorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-17T19:48:53Z",
    "updated_at": "2018-05-17T19:48:53Z",
    "author_association": "NONE",
    "body": "Has anyone taken a stab at using 820 for external storage akin to https://medium.com/cardstack/upgradable-contracts-in-solidity-d5af87f0f913",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389987487/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
