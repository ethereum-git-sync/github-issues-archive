{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1257",
  "id": 344450095,
  "node_id": "MDU6SXNzdWUzNDQ0NTAwOTU=",
  "number": 1257,
  "title": "ERC 1257: Proof of Payment by smart contracts",
  "user": {
    "login": "yaronvel",
    "id": 19823963,
    "node_id": "MDQ6VXNlcjE5ODIzOTYz",
    "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yaronvel",
    "html_url": "https://github.com/yaronvel",
    "followers_url": "https://api.github.com/users/yaronvel/followers",
    "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
    "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
    "organizations_url": "https://api.github.com/users/yaronvel/orgs",
    "repos_url": "https://api.github.com/users/yaronvel/repos",
    "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yaronvel/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 24,
  "created_at": "2018-07-25T13:45:10Z",
  "updated_at": "2022-06-11T07:09:03Z",
  "closed_at": "2022-06-11T07:09:03Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "---\r\neip: ERC 1257\r\ntitle: Proof of Payment (POP) Standard \r\nauthor: Victor Tran, and Yaron Velner (and future others)\r\nstatus: Draft\r\ntype: ERC\r\ncategory ERC\r\ncreated: 2018-07-25\r\n---\r\n\r\n# Proof of Payment\r\n\r\n## Simple Summary\r\nProof of Payment (POP) is an event (evm log) that provide a record of successful payment. Either via Ether or ERC20 token.\r\n\r\n## Abstract\r\nCurrently merchants and vendors in online stores are using transaction hash (tx hash) as a method to track user payment and provide a form of payment receipt.\r\nThis approach stemmed from bitcoin payment methods, where the main form of payment is done by a human agent with a dedicated user interface.\r\nHowever, this approach cannot scale to payments that are done directly by smart contracts. E.g., multisig wallets, decentralized autonomous organizations (DAO), and exchange services.\r\nThe root source is the difficulty to trace and parse payments done by so called \"internal transactions\".\r\nIn this ERC, we propose a standard and generic way to provide a proof of payment with an evm log.\r\n\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\nOnline merchants and vendors who provide physical goods in return to crypto payments have to be able to monitor payments done by their users, and users should also be able to provide a proof to the merchants about their payments (in the case of a dispute).\r\nClassical approaches are using the tx hash as a witness to a performed payment. In this approach the merchant's website generates a payment tx, and record the connection between the payment and the good to be delivered in an internal database.\r\n\r\nThe current approach, while being simple and elegant, will fail to scale to the case where the payment is done by a smart contract.\r\nA payment that is done by a smart contract is hard to detect and parse. A notable example is the [coinbase deposit bug](https://gizmodo.com/coinbase-bug-allowed-users-to-give-themselves-unlimited-1823951499) which allowed users to give themselves unlimited ether deposit balance.\r\nOn the other hand, logging the payment as solidity event is easy to monitor with standard [web3 tools](https://web3js.readthedocs.io/en/1.0/web3-eth-subscribe.html#web3-eth-subscribe).\r\n\r\nThe motivation to support payment by smart contracts is two-fold, namely, payment by online conversion services, and payment by autonomous organizations.\r\n\r\n### Online conversion services\r\nDecentralized applications such as  [Kyber Network](https://kyber.network/), [Bancor](https://www.bancor.network/), [AirSwap](https://www.airswap.io/), [0x](https://0xproject.com/) and [Etherdelta](https://etherdelta.com/), make it possible for a merchant to accept payment in any ERC20 token and convert it to a currency of his choice (e.g, Ether).\r\nAn important feature of such conversion service is that the conversion is done in the same transaction of the payment. Hence, the final payment should eventually be performed by a smart contract that does the conversion and send the output to the merchant's contract.\r\n\r\n### Decentralized autonomous organizations\r\nThe rise of DAO applications, such as [DAOStack](https://daostack.io/), [Aragon](https://aragon.org/), [Gnosis](https://gnosis.pm/), [Harbour](https://www.harbourproject.io/) and [Colony](https://colony.io/), makes it imperative to allow non-human agent to pay on behalf of the organization.\r\nIn the most simple setting, payment by a multisig wallet is already hard to capture under the classical tx hash monitoring scheme.\r\nIn the more advance setting, an autonomous organization might want to buy physical goods in an online stores for his members, but only provided a formal decision of the organization. \r\n\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\n\r\nWe introduce a standard to log payments that are done by smart contracts:\r\n```\r\nevent ProofOfPayment(address indexed _payer, address indexed _payee, address _token, uint _amount, bytes _data);\r\n```\r\nwhere:\r\n1. `_payer` denotes the agent who is paying for the product. We note that it need not be `msg.sender`.\r\n2. `_payee` denotes the agent who is receiving the payment.\r\n3. `_token` denotes the address of the token (e.g., ERC20, but could also be of other types) that is used for the payment. As a convention, we propose to denote Ether with `0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee`.\r\n4. `_amount` denotes the amount paid, in basic token units (e.g., wei).\r\n5. `_data` denotes application specific auxiliary data. Usually in the form of the hash of multiple application specific parameters.\r\n\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\nMaking a community standard will help providing standard software libraries to allow crypto payments for merchants.\r\n\r\nIn this document, we assume the agent is paying to a contract it is familiar with, \r\nand typical token payment will be with the `approve` and `transferFrom` scheme.\r\nUnder this assumption the proof of payment is guaranteed to be logged on the blockchain.\r\nWe note that such proof does not guarantee the delivery of the product in any way.\r\nHowever, in the case of a dispute it could be used by both parties to make their claims, either in a court of law, or in a call with customer support center.\r\n\r\nWe decided to explicitly log the beneficiary address in order to allow conversion services to pay on behalf of the original tx sender.\r\nThe `_data` field is intended to encode a compact 32 bytes proof for application specific parameters that are relevant in the payment process.\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\nAs a tribute to the famous [pizza purchase](http://uk.businessinsider.com/bitcoin-pizza-10000-100-million-2017-11), we provide a [sample implementation](https://gist.github.com/yaronvel/b4b071de79ab279a35ca3a7517df60b4) of a pizza store contract.\r\nThe contract implement a proof of payment for payment either in Ether or Pizza token.\r\nIn both cases the `_data` field is a witness to the number of ordered pizza slices and the beneficiary home address.\r\n\r\n\r\nUPDATE: a first mainnet implementation can be found [here](https://etherscan.io/address/0xFa71B63935cF9878E009ba6595Da08f6d75C4Aa1) \r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1257/reactions",
    "total_count": 5,
    "+1": 5,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407765382",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-407765382",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 407765382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzc2NTM4Mg==",
    "user": {
      "login": "mickys",
      "id": 200507,
      "node_id": "MDQ6VXNlcjIwMDUwNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/200507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mickys",
      "html_url": "https://github.com/mickys",
      "followers_url": "https://api.github.com/users/mickys/followers",
      "following_url": "https://api.github.com/users/mickys/following{/other_user}",
      "gists_url": "https://api.github.com/users/mickys/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mickys/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mickys/subscriptions",
      "organizations_url": "https://api.github.com/users/mickys/orgs",
      "repos_url": "https://api.github.com/users/mickys/repos",
      "events_url": "https://api.github.com/users/mickys/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mickys/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T14:04:09Z",
    "updated_at": "2018-07-25T14:04:09Z",
    "author_association": "NONE",
    "body": "Your assumption about DAOs is a bit problematic, because they are not actually able to read events emitted in contracts. Only external listeners do that. ( Please correct me if this has been changed recently ).\r\n\r\nWhile DAO's should already have an internal state that is updated upon successful payment execution.\r\n\r\nI do see value in standardising the payment interface and being able to roll out a generic event listener.\r\n\r\nI would love to see some use cases that you're thinking of.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407765382/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407790924",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-407790924",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 407790924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzc5MDkyNA==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T15:16:02Z",
    "updated_at": "2018-07-25T15:16:02Z",
    "author_association": "NONE",
    "body": "@mickys they idea is that external listener will do it in behalf of the DAO.\r\nNote that this event does not guarantee the delivery of the product. On gives a proof for the payment.\r\nSo in case of a dispute, an human agent will have to act on behalf of the DAO.\r\n\r\nAdding @leviadam from dao stack to the discussion to give more insights on DAO needs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407790924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407794795",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-407794795",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 407794795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzc5NDc5NQ==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T15:27:01Z",
    "updated_at": "2018-07-25T15:27:01Z",
    "author_association": "NONE",
    "body": "@mickys regarding internal DAO state. It is a proof for the dao members at best. One cannot expect merchant customer support to read the DAO code and understand the proof.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407794795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407853649",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-407853649",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 407853649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzg1MzY0OQ==",
    "user": {
      "login": "leviadam",
      "id": 25464576,
      "node_id": "MDQ6VXNlcjI1NDY0NTc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/25464576?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leviadam",
      "html_url": "https://github.com/leviadam",
      "followers_url": "https://api.github.com/users/leviadam/followers",
      "following_url": "https://api.github.com/users/leviadam/following{/other_user}",
      "gists_url": "https://api.github.com/users/leviadam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leviadam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leviadam/subscriptions",
      "organizations_url": "https://api.github.com/users/leviadam/orgs",
      "repos_url": "https://api.github.com/users/leviadam/repos",
      "events_url": "https://api.github.com/users/leviadam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leviadam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T18:36:23Z",
    "updated_at": "2018-07-25T18:36:23Z",
    "author_association": "NONE",
    "body": "I think it is a good idea that transfers will have an identifier.\r\nIt is important for example for UIs of DAOs referencing transfers.\r\n\r\nI might advise to also standard the way data is constructed. Like a hash of a counter+contract address. This cannot be enforced, but can still be useful. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407853649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407945793",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-407945793",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 407945793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzk0NTc5Mw==",
    "user": {
      "login": "xinbenlv",
      "id": 640325,
      "node_id": "MDQ6VXNlcjY0MDMyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/640325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinbenlv",
      "html_url": "https://github.com/xinbenlv",
      "followers_url": "https://api.github.com/users/xinbenlv/followers",
      "following_url": "https://api.github.com/users/xinbenlv/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinbenlv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinbenlv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinbenlv/subscriptions",
      "organizations_url": "https://api.github.com/users/xinbenlv/orgs",
      "repos_url": "https://api.github.com/users/xinbenlv/repos",
      "events_url": "https://api.github.com/users/xinbenlv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinbenlv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-26T01:21:09Z",
    "updated_at": "2018-07-26T01:22:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interesting idea. One brainstorm input: how will a `return` / `cancel of payment` look like in this ERC?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407945793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408010237",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-408010237",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 408010237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODAxMDIzNw==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-26T07:55:25Z",
    "updated_at": "2018-07-26T07:55:25Z",
    "author_association": "NONE",
    "body": "@leviadam contract address is already embedded in the event topic.\r\nAs for standardizing the rest, would be happy to hear suggestions. If we had ideas on what should be there we could add specific fields.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408010237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408011214",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-408011214",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 408011214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODAxMTIxNA==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-26T07:59:08Z",
    "updated_at": "2018-07-26T07:59:08Z",
    "author_association": "NONE",
    "body": "@xinbenlv interesting question. It give rise to a lot of questions like whether returning the payment in delay should be allowed and what is the actual value of delayed payment.\r\n\r\nOn a practical level though, at least on first stage, the needed software stack is on the merchant side. We cannot expect the consumer to run its on client for that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408011214/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439955955",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-439955955",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 439955955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTk1NTk1NQ==",
    "user": {
      "login": "yudilevi",
      "id": 1134236,
      "node_id": "MDQ6VXNlcjExMzQyMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1134236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yudilevi",
      "html_url": "https://github.com/yudilevi",
      "followers_url": "https://api.github.com/users/yudilevi/followers",
      "following_url": "https://api.github.com/users/yudilevi/following{/other_user}",
      "gists_url": "https://api.github.com/users/yudilevi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yudilevi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yudilevi/subscriptions",
      "organizations_url": "https://api.github.com/users/yudilevi/orgs",
      "repos_url": "https://api.github.com/users/yudilevi/repos",
      "events_url": "https://api.github.com/users/yudilevi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yudilevi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T16:32:42Z",
    "updated_at": "2018-11-19T16:32:42Z",
    "author_association": "NONE",
    "body": "Interesting idea.\r\n\r\nI agree with @xinbenlv - I think that in order to have a complete solution that allows 3rd parties to track payments, the solution should also include cancellations/refunds etc., especially if 3rd parties are creating their own flows based on these proofs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439955955/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442427932",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442427932",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442427932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjQyNzkzMg==",
    "user": {
      "login": "Alexintosh",
      "id": 776519,
      "node_id": "MDQ6VXNlcjc3NjUxOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/776519?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Alexintosh",
      "html_url": "https://github.com/Alexintosh",
      "followers_url": "https://api.github.com/users/Alexintosh/followers",
      "following_url": "https://api.github.com/users/Alexintosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Alexintosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Alexintosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Alexintosh/subscriptions",
      "organizations_url": "https://api.github.com/users/Alexintosh/orgs",
      "repos_url": "https://api.github.com/users/Alexintosh/repos",
      "events_url": "https://api.github.com/users/Alexintosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Alexintosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T12:20:23Z",
    "updated_at": "2018-11-28T12:20:23Z",
    "author_association": "NONE",
    "body": "Great proposal @yaronvel !\r\n\r\n@mickys has a good point since the external listener introduces a point of centralization and increases friction. I assume to consume that information some kind of relay should be involved to update the DAO of the payment execution.\r\n\r\nIn the attempt to standardize the payment interface it could be useful to include a callback function besides the emission of an event.\r\n\r\nSomething like:\r\n```javascript\r\nfunction paymentCallback(address indexed _payer, address _token, uint _amount, bytes _data)\r\n```\r\n\r\nIn the context of the PizzaStore, it could look like this.\r\n\r\n```javascript\r\n    function buyPizzaWithEther(uint _slices, address _beneficiary, string _homeAddress) public payable {\r\n        require(msg.value == _slices * SLICE_PRICE_IN_ETH);\r\n\r\n        bytes32 data = keccak256(abi.encodePacked(_slices,_homeAddress));\r\n        \r\n        emit ProofOfPayment(_beneficiary,0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,msg.value,data);\r\n        if (isContract(_beneficiary)) {\r\n            ContractReceiver rx = ContractReceiver( _beneficiary );\r\n            require(\r\n                address(rx).call.value(0)(\r\n                    bytes4(keccak256(\"paymentCallback\")),\r\n                   0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\r\n                   msg.value,\r\n                   data\r\n                )\r\n            );\r\n        }\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442427932/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442636982",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442636982",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442636982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjYzNjk4Mg==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T22:55:03Z",
    "updated_at": "2018-11-28T23:01:14Z",
    "author_association": "NONE",
    "body": "@yudilevi maybe this can be solved in application level.\r\nThere is no really payment cancellation, but rather transferring back ETH (or token).\r\nThe vendor can use same event to record the payment refund to the user and the `_data` will contain relevant tag that denotes the cancellation. \r\n\r\nI guess we can add as a convention that last byte in the data denotes whether it is payment or refund.\r\nBut it can also be reasoned by the `_payer` and `_payee` addresses.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442636982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442640624",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442640624",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442640624,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjY0MDYyNA==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T23:08:27Z",
    "updated_at": "2018-11-28T23:08:27Z",
    "author_association": "NONE",
    "body": "@Alexintosh what you suggest will not be compatible with most existing deployed contracts.\r\nAnd the payment will just revert.\r\nFor example if the payment is done from a gnosis multisig.\r\n\r\nYour idea does make sense, but I am not sure why standards for all DAOs is needed here rather than dao-specific implementation.\r\n\r\nNote that this standard is proposed only for the purpose of making it easier to build standard `off-chain` tools to track payments.\r\nFor on-chain tracking, I am not sure standardization is needed.\r\nEvery dapp can implement the recording logic along with the execution logic (if needed).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442640624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442775017",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442775017",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442775017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc3NTAxNw==",
    "user": {
      "login": "yudilevi",
      "id": 1134236,
      "node_id": "MDQ6VXNlcjExMzQyMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1134236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yudilevi",
      "html_url": "https://github.com/yudilevi",
      "followers_url": "https://api.github.com/users/yudilevi/followers",
      "following_url": "https://api.github.com/users/yudilevi/following{/other_user}",
      "gists_url": "https://api.github.com/users/yudilevi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yudilevi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yudilevi/subscriptions",
      "organizations_url": "https://api.github.com/users/yudilevi/orgs",
      "repos_url": "https://api.github.com/users/yudilevi/repos",
      "events_url": "https://api.github.com/users/yudilevi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yudilevi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T10:00:03Z",
    "updated_at": "2018-11-29T10:00:03Z",
    "author_association": "NONE",
    "body": "@yaronvel I prefer an explicit argument over trying to figure it out by the `_payer`/`_payee` arguments. I think it will also keep it more generic.\r\nFor example, if 2 different entities have payments for each other, we would like to know whether a payment is a refund or not etc.\r\nThere might also be other different types of transfers that we might want to support later on.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442775017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442793909",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442793909",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442793909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc5MzkwOQ==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T11:03:19Z",
    "updated_at": "2018-11-29T11:03:19Z",
    "author_association": "NONE",
    "body": "@yudilevi can you propose argument type? should it be boolean? uint?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442793909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442798849",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442798849",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442798849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc5ODg0OQ==",
    "user": {
      "login": "yudilevi",
      "id": 1134236,
      "node_id": "MDQ6VXNlcjExMzQyMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1134236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yudilevi",
      "html_url": "https://github.com/yudilevi",
      "followers_url": "https://api.github.com/users/yudilevi/followers",
      "following_url": "https://api.github.com/users/yudilevi/following{/other_user}",
      "gists_url": "https://api.github.com/users/yudilevi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yudilevi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yudilevi/subscriptions",
      "organizations_url": "https://api.github.com/users/yudilevi/orgs",
      "repos_url": "https://api.github.com/users/yudilevi/repos",
      "events_url": "https://api.github.com/users/yudilevi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yudilevi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T11:22:14Z",
    "updated_at": "2018-11-29T11:22:14Z",
    "author_association": "NONE",
    "body": "@yaronvel `uint8 _type`? uint8 should suffice I think.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442798849/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442799662",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442799662",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442799662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc5OTY2Mg==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T11:25:35Z",
    "updated_at": "2018-11-29T11:25:35Z",
    "author_association": "NONE",
    "body": "@yudilevi ok, I see. Sure, we are fine with adding it, but can you please offer a spec for the different values?\r\n0 is payment. 1 is refund? other values are also defined?\r\nPlease advise.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442799662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442804155",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442804155",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442804155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjgwNDE1NQ==",
    "user": {
      "login": "yudilevi",
      "id": 1134236,
      "node_id": "MDQ6VXNlcjExMzQyMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1134236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yudilevi",
      "html_url": "https://github.com/yudilevi",
      "followers_url": "https://api.github.com/users/yudilevi/followers",
      "following_url": "https://api.github.com/users/yudilevi/following{/other_user}",
      "gists_url": "https://api.github.com/users/yudilevi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yudilevi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yudilevi/subscriptions",
      "organizations_url": "https://api.github.com/users/yudilevi/orgs",
      "repos_url": "https://api.github.com/users/yudilevi/repos",
      "events_url": "https://api.github.com/users/yudilevi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yudilevi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T11:43:20Z",
    "updated_at": "2018-11-29T11:43:20Z",
    "author_association": "NONE",
    "body": "@yaronvel what do you think about defining it as bytes32, declaring some pre-defined values like \"payment\" and \"refund\" and allowing custom values? I can see values like \"fee\" or \"subscription\" in the future but I wouldn't want to limit apps to these as they might be a bit too narrow for some.\r\n\r\nThe handler can decide ignore the values and payment providers can declare application specific values? Do you think that it gives too much flexibility (and possibly lead to non standard implementations)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442804155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442812527",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442812527",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442812527,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjgxMjUyNw==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T12:15:15Z",
    "updated_at": "2018-11-29T12:15:15Z",
    "author_association": "NONE",
    "body": "@yudilevi can live with it, though maybe `uint256` is better, because comparison is easier. unless you aim to hold `sha3` of a string?\r\nI am fine with both. Just does not like `bytes32` much because how solidity treats it.\r\nI mean it will force you to do:\r\n`bytes32 constant REFUND = bytes32(0)`.\r\nAlso at the backend level it give rise to confusing endianess. Meaning the order of bytes.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442812527/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442873649",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442873649",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442873649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjg3MzY0OQ==",
    "user": {
      "login": "yudilevi",
      "id": 1134236,
      "node_id": "MDQ6VXNlcjExMzQyMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1134236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yudilevi",
      "html_url": "https://github.com/yudilevi",
      "followers_url": "https://api.github.com/users/yudilevi/followers",
      "following_url": "https://api.github.com/users/yudilevi/following{/other_user}",
      "gists_url": "https://api.github.com/users/yudilevi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yudilevi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yudilevi/subscriptions",
      "organizations_url": "https://api.github.com/users/yudilevi/orgs",
      "repos_url": "https://api.github.com/users/yudilevi/repos",
      "events_url": "https://api.github.com/users/yudilevi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yudilevi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T15:24:45Z",
    "updated_at": "2018-11-29T15:24:45Z",
    "author_association": "NONE",
    "body": "@yaronvel I agree, it might be too much of a hassle.\r\nSo uint256 with some predefined values, reserved range and application specific custom values? :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442873649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442879259",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-442879259",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 442879259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjg3OTI1OQ==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T15:39:32Z",
    "updated_at": "2018-11-29T15:39:32Z",
    "author_association": "NONE",
    "body": "@yudilevi sure, want to take the lead on the predefined value and ranges spec? can add you to the EIP. PR is welcomed (though not sure if possible), or just write something here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/442879259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093501",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-986093501",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 986093501,
    "node_id": "IC_kwDOAq426M46xpe9",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:11:48Z",
    "updated_at": "2021-12-04T21:11:48Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986096597",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-986096597",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 986096597,
    "node_id": "IC_kwDOAq426M46xqPV",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:37:13Z",
    "updated_at": "2021-12-04T21:37:13Z",
    "author_association": "NONE",
    "body": "This is ready for review",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986096597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986240374",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-986240374",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 986240374,
    "node_id": "IC_kwDOAq426M46yNV2",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-05T14:30:27Z",
    "updated_at": "2021-12-05T14:30:27Z",
    "author_association": "MEMBER",
    "body": "@yaronvel The first step in creating an EIP is to create a Draft EIP by submitting a pull request to this repository.  Follow the instructions in [EIP-1](https://eips.ethereum.org/EIPS/eip-1) and you can use the [Template](https://raw.githubusercontent.com/ethereum/EIPs/master/eip-template.md) for formatting (some things have changed since this idea was proposed years ago).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986240374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1146053255",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-1146053255",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 1146053255,
    "node_id": "IC_kwDOAq426M5ET2KH",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-06-03T15:03:00Z",
    "updated_at": "2022-06-03T15:03:00Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1146053255/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1152871592",
    "html_url": "https://github.com/ethereum/EIPs/issues/1257#issuecomment-1152871592",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1257",
    "id": 1152871592,
    "node_id": "IC_kwDOAq426M5Et2yo",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-11T07:09:03Z",
    "updated_at": "2022-06-11T07:09:03Z",
    "author_association": "MEMBER",
    "body": "Closing this issue for housekeeping purposes. People are welcome to continue discussing in this thread, but for additional visibility an EIP should be created or the conversation should be migrated to https://ethereum-magicians.org/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1152871592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
