{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1620",
  "id": 383989214,
  "node_id": "MDU6SXNzdWUzODM5ODkyMTQ=",
  "number": 1620,
  "title": "ERC-1620: Money Streaming",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 39,
  "created_at": "2018-11-24T13:21:11Z",
  "updated_at": "2023-03-28T14:01:35Z",
  "closed_at": "2021-12-05T05:10:46Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\neip: 1620\r\ntitle: ERC-1620 Money Streaming\r\nauthor: Paul Razvan Berg (@PaulRBerg) <paul@sablier.finance>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/1620\r\nstatus: Final\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-11-24\r\nrequires: 20\r\n```\r\n\r\nThis proposal has been accepted and merged as a draft standard. Please read up the thread below for discussions leading up to the final version.\r\n\r\n<details>\r\n<summary>Original Draft (Nov 24, 2018)</summary\r\n<!--You can leave these HTML comments in your merged EIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new EIPs. Note that an EIP number will be assigned by an editor. When opening a pull request to submit your EIP, please use an abbreviated title in the filename, `eip-draft_title_abbrev.md`. The title should be 44 characters or less.-->\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\nMoney streaming represents the idea of continuous payments over a finite period of time. Block numbers are used as a proxy of time to continuously update balances.\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\nThe following describes a standard whereby time is measured using block numbers and streams are mappings in a master contract.\r\n\r\n1. A provider sets up a money streaming contract.\r\n2. A prospective payer can interact with the contract and start the stream right away by depositing the funds required for the chosen period.\r\n3. The payee is able to withdraw money from the contract based on its ongoing solvency. That is: `payment rate * (current block height - starting block height)`\r\n4. The stream terms (payment rate, length, metadata) can be updated at any time if both parties pledge their signatures.\r\n5. The stream can be stopped at any point in time by any party without on-chain consensus.\r\n6. If the stream period ended and it was not previously stopped by any party, the payee is entitled to withdraw all the deposited funds.\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\nThis standardised interface aims to change the way we think about long-term financial commitments. Thanks to blockchains, payments need not be sent in chunks (e.g. monthly salaries), as there is much less overhead in paying-as-you-go. Money as a function of time would better align incentives in a host of scenarios.\r\n\r\n### Use Cases\r\n\r\nThis is just a preliminary list of use cases. There are other interesting ideas left to explore, such as time-dependent disincetivisation, but, for brevity, we have not included them here.\r\n\r\n- Salaries\r\n- Subscriptions\r\n- Consultancies\r\n- Rent\r\n- Parking\r\n- CDPs\r\n\r\n### Crowdsales\r\n[RICOs](https://github.com/lukso-network/rico), or Reversible ICOs, were introduced at Devcon4 by @frozeman. The idea is to endow investors with more power and safety guarantees by allowing them to \"reverse\" the investment based on the evolution of the project. We previously discussed a similar concept called SICOs, or Streamable ICOs, in this research [thread](https://ethresear.ch/t/chronos-a-quirky-application-proposal-for-plasma/2928/14?u=paulrberg).\r\n\r\nInstead of investing a lump sum and giving the money away to the project developers, funds are held in a smart contract which allocates money based on the passage of time. Project developers can withdraw funds as the stream stays active, while investors have the power to get back a significant percentage of their initial commitment if the project halts.\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\n\r\n### Structs\r\n\r\nThe structure of a `stream` should be as follows:\r\n\r\n- `stream`\r\n    - `sender`: the `address` of the entity funding the stream\r\n    - `recipient`: the `address` where the money is being delivered to\r\n    - `tokenAddress`: the `address` of the ERC20 token used as payment asset\r\n    - `timeframe`: as defined below\r\n    - `rate`: as defined below\r\n    - `balance`: the total funds left in the stream\r\n\r\n```solidity\r\n  struct Stream {\r\n    address sender;\r\n    address recipient;\r\n    address tokenAddress;\r\n    Timeframe timeframe;\r\n    Rate rate;\r\n    uint256 balance;\r\n  }\r\n```\r\n\r\n- `timeframe`\r\n    - `start`: the starting block number of the stream\r\n    - `stop`: the stopping block number of the stream\r\n\r\n```solidity\r\nstruct Timeframe {\r\n    uint256 start;\r\n    uint256 stop;\r\n}\r\n```\r\n\r\n- `rate`\r\n    - `payment`: how much money moves from `sender` to `recipient`\r\n    - `interval`: how often `payment` moves from `sender` to `recipient`\r\n\r\n```solidity\r\nstruct Rate {\r\n  uint256 payment;\r\n  uint256 interval;\r\n}\r\n```\r\n\r\n---\r\n\r\n### Methods\r\n\r\n#### balanceOf\r\n\r\nReturns available funds for the given stream id and address.\r\n\r\n```solidity\r\nfunction balanceOf(uint256 _streamId, address _addr)\r\n```\r\n\r\n#### getStream\r\n\r\nReturns the full stream data, if the id points to a valid stream.\r\n\r\n```solidity\r\nfunction getStream(uint256 _streamId) returns (address sender, address recipient, address tokenAddress, uint256 balance, uint256 startBlock, uint256 stopBlock, uint256 payment, uint256 interval)\r\n```\r\n\r\n#### createStream\r\n\r\nCreates a new stream between `msg.sender` and `_recipient`.\r\n\r\nMUST allow senders to create multiple streams in parallel. SHOULD not accept Ether and only use ERC20-compatible tokens.\r\n\r\n**Triggers Event**: [CreateStream](#create-stream)\r\n\r\n```solidity\r\nfunction createStream(address _sender, address _recipient, address _tokenAddress, uint256 _startBlock, uint256 _stopBlock, uint256 _payment, uint256 _interval)\r\n```\r\n\r\n#### withdrawFromStream\r\n\r\nWithdraws all or a fraction of the available funds.\r\n\r\nMUST allow only the recipient to perform this action.\r\n\r\n**Triggers Event**: [WithdrawFromStream](#withdraw-from-stream)\r\n\r\n```solidity\r\nfunction withdrawFromStream(uint256 _streamId, uint256 _funds)\r\n```\r\n\r\n#### redeemStream\r\n\r\nRedeems the stream by distributing the funds to the sender and the recipient.\r\n\r\nSHOULD allow any party to redeem the stream.\r\n\r\n**Triggers Event**: [RedeemStream](#redeem-stream)\r\n\r\n```solidity\r\nfunction redeemStream(uint256 _streamId)\r\n```\r\n\r\n#### confirmUpdate\r\n\r\nSignals one party's willingness to update the stream\r\n\r\nSHOULD allow any party to do this but MUST NOT be executed without consent from all involved parties.\r\n\r\n**Triggers Event**: [ConfirmUpdate](#confirm-update)\r\n\r\n**Triggers Event**: [ExecuteUpdate](#execute-update) when the last involved party calls this function\r\n\r\n```solidity\r\nfunction confirmUpdate(uint256 _streamId, address _tokenAddress, uint256 _stopBlock, uint256 _payment, uint256 _interval)\r\n```\r\n\r\n#### revokeUpdate\r\n\r\nRevokes an update proposed by one of the involved parties. \r\n\r\nMUST allow any party to do this.\r\n\r\n**Triggers Event**: [RevokeUpdate](#revoke-update)\r\n\r\n```solidity\r\nfunction revokeUpdate(uint256 _streamId, address _tokenAddress, uint256 _stopBlock, uint256 _payment, uint256 _interval)\r\n```\r\n\r\n---\r\n\r\n### Events\r\n\r\n#### CreateStream\r\n\r\nMUST be triggered when `create` is successfully called.\r\n\r\n```solidity\r\nevent CreateStream(uint256 indexed streamId, address indexed sender, address indexed recipient, address tokenAddress, uint256 startBlock, uint256 stopBlock, uint256 payment, uint256 interval)\r\n```\r\n\r\n#### WithdrawFromStream\r\n\r\nMUST be triggered when `withdraw` is successfully called.\r\n\r\n```solidity\r\nevent WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount)\r\n```\r\n\r\n#### RedeemStream\r\n\r\nMUST be triggered when `redeem` is successfully called.\r\n\r\n```solidity\r\nevent RedeemStream(uint256 indexed streamId, address indexed sender, address indexed recipient, uint256 senderAmount, uint256 recipientAmount)\r\n```\r\n\r\n#### ConfirmUpdate\r\n\r\nMUST be triggered when `confirmUpdate` is successfully called.\r\n\r\n```solidity\r\nevent ConfirmUpdate(uint256 indexed streamId, address indexed confirmer, address newTokenAddress, uint256 newStopBlock, uint256 newPayment, uint256 newInterval);\r\n```\r\n\r\n#### RevokeUpdate\r\n\r\nMUST be triggered when `revokeUpdate` is successfully called.\r\n\r\n```solidity\r\nevent RevokeUpdate(uint256 indexed streamId, address indexed revoker, address newTokenAddress, uint256 newStopBlock, uint256 newPayment, uint256 newInterval)\r\n```\r\n\r\n#### ExecuteUpdate\r\n\r\nMUST be triggered when an update is approved by all involved parties.\r\n\r\n```solidity\r\nevent ExecuteUpdate(uint256 indexed streamId, address indexed sender, address indexed recipient, address newTokenAddress, uint256 newStopBlock, uint256 newPayment, uint256 newInterval)\r\n```\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\n\r\nThis specification was designed to serve as an entry point to the quirky concept of money as a function of time and it is definitely not set in stone. Several other designs, including payment channels and Plasma chains were also considered, but they were eventually deemed dense in assumptions unnecessary for an initial version.\r\n\r\n<!--\r\n- Block times and oracles for time calculation\r\n    - GCD\r\n    - Miners\r\n- Sidechain-compatible (and preferable)\r\n- The `update` function\r\n- Multi-hop streams\r\n-->\r\n\r\nBlock times are a reasonable, trustless proxy for time on the blockchain. Between 2016 and 2018, the Ethereum block time average value [hovered](https://etherscan.io/chart/blocktime) around 14 seconds, excluding the last two quarters of 2017. Mathematically speaking, it would be ideal to have a standard deviation as close to 0 as possible, but that is not how things work in the real world. This has huge implications on the feasibility of this ERC which we shall investigate below.\r\n\r\n### GCD\r\nWhen setting up a stream, a payer and a payee may want to make the total streaming duration a multiple of the \"greatest common denominator\" (GCD) of the chain they operate on; that is, the average block time. This is not imperative in the smart contracts per se, but there needs to be an off-chain process to map streams to real-world time units in order to create a sound and fair payment mechanism.\r\n\r\n### Block Times\r\nBecause there is uncertainty regarding block times, streams may not be settled on the blockchain as initially planned. Let `$d` be the total streaming duration measured in seconds, `$t` the average block time before the stream started and `$t'` the actual average block time over `$d` after the stream started. We distinguish two undesirable scenarios:\r\n\r\n1. `$t` < `$t'`: the payee will get their funds *later* than expected\r\n\r\n2. `$t` > `$t'`: the payee will get their funds *sooner* than expected\r\n\r\nIf the combined error delta is smaller than the payment rate (fifth parameter of the `create` method, measured in wei), there is no problem at all. Conversely, we stumble upon trust issues because real-world time frames do not correspond to the stream terms. For instance, if an employee is normally entitled to withdraw all the funds from the stream at the end of the month, but block times cause case 1 from above to occur, the employee is in a financial disadvantage because their continuous effort is not compensated as promised.\r\n\r\nLimiting the problem scope only to Ethereum, we propose two remedies:\r\n\r\n1. Consensus on calling the `update` function to correct the stream terms. This might sound preposterous, but in most cases the stakes are low and stream participants are involved in long-term financial commitments. There is a high disincentive to refuse to cooperate.\r\n\r\n2. Autonomously fix significant error deltas. In theory, we could achieve this using previous blocks' timestamps, \"checkpointing\" the stream once in a predefined number of blocks. This is still an area of active research because of potentially high overheads in gas costs.\r\n\r\nNonetheless, it is important to note that this is still a major improvement on the traditional model where absolute trust is required.\r\n\r\n### Sidechains\r\n\r\nIt could be more efficient to implement this standard on independent sidechains like [POA Network](https://poa.network) or [xDai](https://medium.com/poa-network/poa-network-partners-with-makerdao-on-xdai-chain-the-first-ever-usd-stable-blockchain-65a078c41e6a) - thanks to their rather predictable nature. Admittedly, security is traded for scalability, but proper crypto-economic stakes could alleviate potential problems.\r\n\r\nFurthermore, it is intriguing to explore the prospect of stream-specific sidechains.\r\n\r\n### Oracles\r\n\r\nThe proposed specification uses block numbers to proxy time, but this need not be the only method. Albeit it would imply different trust assumptions, oracles could be used to provide a feed of timestamps. Coupled with the aforementioned idea of stream-specific sidechains, oracles could efficiently solve the problems outlined in [Block Times](#block-times).\r\n\r\n### Multi-Hop Streams\r\n\r\nFuture or upgraded versions of this standard may describe \"multi-hop\" streams. If:\r\n\r\n1. There is a stream between A and B\r\n2. There is another stream between B and C\r\n\r\nThere could be a way to avoid running two different streams in parallel. That is, a fraction or all of the funds being streamed from A to B could be automatically wired to C. An interesting use case for this is taxes. Instead of manually moving money around, proactively calculating how much you owe and then transfer it, a stream could atomically perform those operations for you.\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\n\r\n- [Sablier Monorepo](https://github.com/SablierApp/sablier)\r\n\r\n## Additional References\r\n- [Sablier Launch Thread](https://twitter.com/PaulRBerg/status/1134773451888238592)\r\n- [Chronos Protocol Ethresear.ch Plasma Proposal](https://ethresear.ch/t/chronos-a-quirky-application-proposal-for-plasma/2928?u=paulrberg)\r\n- [Flipper: Streaming Salaries @ CryptoLife Hackathon](https://devpost.com/software/flipper-3gvl4b)\r\n- [SICOs or Streamed ICOs](https://ethresear.ch/t/chronos-a-quirky-application-proposal-for-plasma/2928/14?u=paulrberg)\r\n- [RICOs or Reversible ICOs](https://twitter.com/feindura/status/1058057076306518017)\r\n- [Andreas Antonopoulos' Keynote on Bitcoin, Lightning and Money Streaming](https://www.youtube.com/watch?v=gF_ZQ_eijPs)\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n</details>\r\n\r\n<details>\r\n<summary>Second Draft (Sep 27, 2019)</summary>\r\n\r\n## Simple Summary\r\n\r\nWe define money streaming as continuous payments over a finite period of time. Block timestamps are used as an on-chain proxy for time.\r\n\r\n## Abstract\r\n\r\nThe following describes a standard whereby time is measured using block timestamps and streams are mappings in a master contract.\r\n\r\n1. Developer sets up a money streaming contract.\r\n2. A payer, henceforth referred to as sender, can create a stream by depositing funds in the contract and choosing a streaming duration.\r\n3. A payee, henceforth referred to as recipient, can withdraw money from the stream based on its continuous solvency. That is, `payment * (current block timestamp - starting block timestamp)`.\r\n4. The stream can be terminated by either the sender or the recipient.\r\n5. If the stream ended and has not been terminated, the recipient is entitled to withdraw all the remaining balance.\r\n\r\n## Motivation\r\n\r\nThis standardised interface takes a stab at changing the way we think about trust in financial contracts. Thanks to blockchains, payments need not be sent in lumps (as with monthly salaries), as there is less overhead in pay-as-you-go. Money as a function of time would better align incentives in a host of scenarios.\r\n\r\n### Use Cases\r\n\r\nThis is just a preliminary list of use cases. There are other interesting ideas left to explore, such as time-dependent disincetivisation, but, for brevity, we have not included them here.\r\n\r\n- Salaries\r\n- Insurance\r\n- Subscriptions\r\n- Consultancies\r\n- Rent\r\n- Parking\r\n- Lending\r\n\r\n[Sablier](https://sablier.finance) is a champion project for this ERC. It is what we call the protocol for real-time finance.\r\n\r\n## Specification\r\n\r\n### Structs\r\n\r\nThe structure of a stream should be as follows:\r\n\r\n    - `Stream`\r\n    - `deposit`: the amount of money to be streamed\r\n    - `ratePerSecond`: the number of tokens allocated each second to the recipient\r\n    - `remainingBalance`: the left in the stream\r\n    - `startTime`: the unix timestamp for when the stream starts\r\n    - `stopTime`: the unix timestamp for when the stream stops\r\n    - `recipient`: the address towards which the money is streamed\r\n    - `sender`: the address of the party funding the stream\r\n    - `tokenAddress`: the ERC20 token to use as streaming currency\r\n    - `isEntity`: indicates whether the stream exists or not\r\n\r\n```solidity\r\nstruct Stream {\r\n    uint256 deposit;\r\n    uint256 ratePerSecond;\r\n    uint256 remainingBalance;\r\n    uint256 startTime;\r\n    uint256 stopTime;\r\n    address recipient;\r\n    address sender;\r\n    address tokenAddress;\r\n    bool isEntity;\r\n}\r\n```\r\n\r\n---\r\n\r\n### Methods\r\n\r\n#### getStream\r\n\r\nReturns the stream object with all its properties.\r\n\r\n```solidity\r\nfunction getStream(uint256 streamId) view returns (address sender, address recipient, uint256 deposit, address token, uint256 startTime, uint256 stopTime, uint256 remainingBalance, uint256 ratePerSecond)\r\n```\r\n\r\n#### balanceOf\r\n\r\nReturns the real-time balance of the account with address `who`.\r\n\r\n```solidity\r\nfunction balanceOf(uint256 streamId, address who) view returns (uint256 balance)\r\n```\r\n\r\n#### createStream\r\n\r\nCreates a new stream funded by `msg.sender` and paid towards `recipient`. MUST throw if `recipient` is the zero address, the contract itself or the caller themselves. MUST throw if `startTime` is before the current block timestamp. MUST throw if `stopTime` is before `startTime`. MUST throw if `deposit` is not a multiple of the time delta. MUST throw if the contract is not allowed to transfer enough tokens.\r\n\r\n**Triggers Event**: [CreateStream](#createstream)\r\n\r\n```solidity\r\nfunction createStream(address recipient, address deposit, address tokenAddress, uint256 startTime, uint256 stopTime) returns (uint256 streamId)\r\n```\r\n\r\n#### withdrawFromStream\r\n\r\nWithdraws from the contract to the recipient's account.\r\n\r\nMUST throw if the caller is not the sender or the recipient. MUST throw if `amount` exceeds the available balance.\r\n\r\n**Triggers Event**: [WithdrawFromStream](#withdrawfromstream)\r\n\r\n```solidity\r\nfunction withdrawFromStream(uint256 streamId, uint256 amount) returns (bool success)\r\n```\r\n\r\n#### cancelStream\r\n\r\nCancels the stream and transfers the tokens back on a pro rata basis.\r\n\r\nMUST throw if the caller is not the sender or the recipient.\r\n\r\n**Triggers Event**: [CancelStream](#cancelstream)\r\n\r\n```solidity\r\nfunction cancelStream(uint256 streamId) returns (bool success)\r\n```\r\n\r\n---\r\n\r\n### Events\r\n\r\n#### CreateStream\r\n\r\nMUST be triggered when `createStream` is successfully called.\r\n\r\n```solidity\r\nevent CreateStream(uint256 indexed streamId, address indexed sender, address indexed recipient, uint256 deposit, address tokenAddress, uint256 startTime, uint256 stopTime);\r\n```\r\n\r\n#### WithdrawFromStream\r\n\r\nMUST be triggered when `withdrawFromStream` is successfully called.\r\n\r\n```solidity\r\nevent WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\r\n```\r\n\r\n#### CancelStream\r\n\r\nMUST be triggered when `cancelStream` is successfully called.\r\n\r\n```solidity\r\nevent CancelStream(uint256 indexed streamId, address indexed sender, address indexed recipient, uint256 senderBalance, uint256 recipientBalance);\r\n```\r\n\r\n## Rationale\r\n\r\nThis specification is designed to serve as an entry point to the quirky concept of money as a function of time. Several other designs, including payment channels have been considered, but they were deemed dense in assumptions unnecessary for an initial draft.\r\n\r\n### Timestamps\r\n\r\nBlock timestamps are a reasonably secure proxy for time on the blockchain. Although miners handle them, there are game-theoretical incentives to not provide malicious timestamps. [Read this thread](https://ethereum.stackexchange.com/questions/413/can-a-contract-safely-rely-on-block-timestamp) on StackExchange for more details.\r\n\r\nThe only dangerous scenario we can think of is when ERC-1620 derived implementations end up making up a significant share of the volume of money transferred on Ethereum. It is possible, although unlikely, that some stream recipients will have an incentive to coax miners in bumping the block timestamps for them to profit. But we posit the payoff (a few seconds or minutes times the payment rate) will not be high enough for this kind of attack to be worth it.\r\n\r\n## Implementation\r\n\r\n- [Sablier](https://github.com/sablierhq/sablier/)\r\n\r\n## Additional References\r\n\r\n- [Sablier Launch Thread](https://twitter.com/SablierHQ/status/1205533344886411264)\r\n- [Introducing Sablier: Continuous Salaries on Ethereum](https://medium.com/sablier/introducing-sablier-continuous-payments-on-ethereum-c2bf04446d31)\r\n- [Chronos Protocol Ethresear.ch Plasma Proposal](https://ethresear.ch/t/chronos-a-quirky-application-proposal-for-plasma/2928?u=paulrberg)\r\n- [Flipper: Streaming Salaries @ CryptoLife Hackathon](https://devpost.com/software/flipper-3gvl4b)\r\n- [SICOs or Streamed ICOs](https://ethresear.ch/t/chronos-a-quirky-application-proposal-for-plasma/2928/14?u=paulrberg)\r\n- [RICOs or Reversible ICOs](https://twitter.com/feindura/status/1058057076306518017)\r\n- [Andreas Antonopoulos' Keynote on Bitcoin, Lightning and Money Streaming](https://www.youtube.com/watch?v=gF_ZQ_eijPs)\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n\r\n</details>",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1620/reactions",
    "total_count": 41,
    "+1": 27,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 14,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441368518",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-441368518",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 441368518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTM2ODUxOA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-24T13:38:00Z",
    "updated_at": "2018-11-24T13:38:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for this. Very interesting concept. \r\nWhy only allowing ERC20 tokens and not ether?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441368518/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441369921",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-441369921",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 441369921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTM2OTkyMQ==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-24T14:00:31Z",
    "updated_at": "2018-11-24T14:00:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you! The feedback we got so far is that people would love to use this with stablecoins like DAI, TrueUSD etc. Indeed, in the case of ICOs, Ether is the main currency used but a lot of people have been implementing WETH lately. The rationale is to avoid writing duplicate logic and I said to make the ERC strict because of that. Nevertheless, on a second thought, it doesn't hurt to just make it a little bit looser and accept empty `_tokenAddress` params.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441369921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441370400",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-441370400",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 441370400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTM3MDQwMA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-24T14:07:37Z",
    "updated_at": "2018-11-24T14:08:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the RICO model this streaming of money is based on ETH. \r\n\r\nIn your idea the way to map streamer with the committed funds is through a streaming ID and an address, correct?\r\n\r\nIn the RICO idea you get a token back. The advantage is that the token can be transferred and so the commitment transferred and also only part of the commitment can be withdrawn rather than everything.  \r\nAlso investing in a RICO van happens from any ether wallet and withdrawing your funds as well, by simply sending back the commit tokens. \r\nThough your idea works probably better for subscriptions etc. \r\nthe disadvantage of the token is that you either have to have a locked balance if you already refunded (for the part if the tone. That is not refundable anymore), or two tokens: one refundable and one not. \r\nEither token can layer be swapped for whatever was bought in the RICO. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441370400/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441378291",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-441378291",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 441378291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTM3ODI5MQ==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-24T16:13:47Z",
    "updated_at": "2018-11-24T16:18:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In your idea the way to map streamer with the committed funds is through a streaming ID and an address, correct?\r\n\r\nExactly, just an uint256 id incremented whenever a new stream is added. Each struct contains the addresses of both the payer and the payee.\r\n\r\n> In the RICO idea you get a token back.\r\n\r\nI found this ERC and RICOs at least tangential, hence why I added a reference in the first place. Of course, the RICO proposal has more crowdsale-specific details insofar there is an extra set of instructions needed to be executed (i.e. receiving the ICO tokens), rather than just depositing the money and calculating balances based upon block heights.\r\n\r\nI'd love to keep exploring refundable crowdsales because I think they're a massive improvement on the previous iterations - and it's one of the things which inspired me to continue with this ERC.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441378291/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441378493",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-441378493",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 441378493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTM3ODQ5Mw==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-24T16:16:59Z",
    "updated_at": "2018-11-24T16:16:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes it’s a great idea.\r\nI have not yet planned to make an ERC for the RICO, we first will try it out with our project LUKSO and then see if it makes sense to standardize. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441378493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441416929",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-441416929",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 441416929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQxNjkyOQ==",
    "user": {
      "login": "cupOJoseph",
      "id": 9449596,
      "node_id": "MDQ6VXNlcjk0NDk1OTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9449596?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cupOJoseph",
      "html_url": "https://github.com/cupOJoseph",
      "followers_url": "https://api.github.com/users/cupOJoseph/followers",
      "following_url": "https://api.github.com/users/cupOJoseph/following{/other_user}",
      "gists_url": "https://api.github.com/users/cupOJoseph/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cupOJoseph/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cupOJoseph/subscriptions",
      "organizations_url": "https://api.github.com/users/cupOJoseph/orgs",
      "repos_url": "https://api.github.com/users/cupOJoseph/repos",
      "events_url": "https://api.github.com/users/cupOJoseph/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cupOJoseph/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-25T05:37:47Z",
    "updated_at": "2018-11-25T05:38:08Z",
    "author_association": "NONE",
    "body": "Seems pretty well thought out.  Popular current time tracking programs systematically commit wage theft against the working class. I find it inevitable that we eventually get to paying people as the work for the exact amount of time they work. It's an idea a lot of folks have talked about, but it's nice to see the first technical spec for something that would enable this. Potentially take some thoughts from #1337 on subscriptions? Awesome job on this!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441416929/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441433855",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-441433855",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 441433855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQzMzg1NQ==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-25T11:34:07Z",
    "updated_at": "2018-11-25T11:34:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @jschiarizzi interesting points, wasn't aware there's that much unfairness. I totally love #1337, what the @gitcoinco and @8x-protocol teams are doing and the cool thing is that the \"subscriptions\" EIP can be used in coalition with money streaming.\r\n\r\nThe current spec requires people to deposit funds beforehand, hence for longer periods it may not work for everyone due to liquidity problems. But fear not, because you can run a subscription layer and schedule to pay \"streaming deposits\" every month.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441433855/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/446189095",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-446189095",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 446189095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjE4OTA5NQ==",
    "user": {
      "login": "ipetrovic11",
      "id": 3995534,
      "node_id": "MDQ6VXNlcjM5OTU1MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3995534?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ipetrovic11",
      "html_url": "https://github.com/ipetrovic11",
      "followers_url": "https://api.github.com/users/ipetrovic11/followers",
      "following_url": "https://api.github.com/users/ipetrovic11/following{/other_user}",
      "gists_url": "https://api.github.com/users/ipetrovic11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ipetrovic11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ipetrovic11/subscriptions",
      "organizations_url": "https://api.github.com/users/ipetrovic11/orgs",
      "repos_url": "https://api.github.com/users/ipetrovic11/repos",
      "events_url": "https://api.github.com/users/ipetrovic11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ipetrovic11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-11T12:42:11Z",
    "updated_at": "2018-12-11T12:42:11Z",
    "author_association": "NONE",
    "body": "@PaulRBerg Awesome to see this, you can take a look at Technical Paper that we wrote a while back making Streaming Money for salaries case:\r\nhttps://drive.google.com/file/d/1o34Cbm6tAPNHNvjxR9IuWVlQCmeshHNL/view\r\n\r\nOur wallet has already implemented this.\r\n\r\nWould be great to have a live chat and discuss how we can bring this further to life, you can contact me at: ivan@workchain.io",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/446189095/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/448051868",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-448051868",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 448051868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODA1MTg2OA==",
    "user": {
      "login": "jtremback",
      "id": 1335122,
      "node_id": "MDQ6VXNlcjEzMzUxMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1335122?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtremback",
      "html_url": "https://github.com/jtremback",
      "followers_url": "https://api.github.com/users/jtremback/followers",
      "following_url": "https://api.github.com/users/jtremback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtremback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtremback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtremback/subscriptions",
      "organizations_url": "https://api.github.com/users/jtremback/orgs",
      "repos_url": "https://api.github.com/users/jtremback/repos",
      "events_url": "https://api.github.com/users/jtremback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtremback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-18T00:34:20Z",
    "updated_at": "2018-12-18T00:34:20Z",
    "author_association": "NONE",
    "body": "We've implemented something like this proposal here: https://github.com/althea-mesh/aragon-node-list/blob/master/contracts/Althea.sol#L86\r\n\r\n```\r\n  function addBill() public payable {\r\n    require(msg.value > perBlockFee, \"Message value not enough\");\r\n\r\n    if (billMapping[msg.sender].lastUpdated == 0) {\r\n      billMapping[msg.sender] = Bill(msg.value, perBlockFee, block.number);\r\n      emit NewBill(msg.sender, vault);\r\n    } else {\r\n      billMapping[msg.sender].balance = billMapping[msg.sender].balance.add(msg.value);\r\n      emit BillUpdated(msg.sender);\r\n    }\r\n  }\r\n\r\n  function collectBills() external {\r\n    uint transferValue = 0;\r\n    for (uint i = 0; i < subnetSubscribers.length; i++) {\r\n      transferValue = transferValue.add(\r\n        processBills(userMapping[subnetSubscribers[i]].ethAddr)\r\n      );\r\n    }\r\n    vault.deposit.value(transferValue)(ETH, transferValue);\r\n  }\r\n\r\n  function payMyBills() public {\r\n    uint amount = processBills(msg.sender);\r\n    vault.deposit.value(amount)(ETH, amount);\r\n  }\r\n\r\n  function withdrawFromBill() external {\r\n    payMyBills();\r\n    uint amount = billMapping[msg.sender].balance;\r\n    require(amount > 0, \"Amount to payout is no more than zero, aborting\");\r\n    billMapping[msg.sender].balance = 0;\r\n    address(msg.sender).transfer(amount);\r\n    emit BillUpdated(msg.sender);\r\n  }\r\n\r\n  function processBills(address _subscriber) internal returns(uint) {\r\n    uint transferValue;\r\n    Bill memory bill = billMapping[_subscriber];\r\n    uint amountOwed = block.number.sub(bill.lastUpdated).mul(bill.perBlock);\r\n\r\n    if (amountOwed <= bill.balance) {\r\n      billMapping[_subscriber].balance= bill.balance.sub(amountOwed);\r\n      transferValue = amountOwed;\r\n    } else {\r\n      transferValue = bill.balance;\r\n      billMapping[_subscriber].balance = 0;\r\n    }\r\n    billMapping[_subscriber].lastUpdated = block.number;\r\n    emit BillUpdated(_subscriber);\r\n    return transferValue;\r\n  }\r\n```\r\n\r\nCan you see any benefits that this proposal has over our system? Or is it just a standardization of this concept?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/448051868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/449018744",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-449018744",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 449018744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTAxODc0NA==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-20T14:34:54Z",
    "updated_at": "2018-12-20T15:46:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @jtremback, good stuff. Imho, standardisation is a very powerful tool: there would've been no ICO craze without ERC20. \r\n\r\nFor one, accounting software working with Ethereum may expect the function names defined in this spec when integrating continuous payments, ergo they could have a hard time working with different functions like `processBills`.\r\n\r\nExcluding coordination benefits, ERC1620 may not be helpful for specific apps where complex behaviour is not necessary (e.g. the ability to make an update to the streaming terms). If you know you'll not make significant updates in the future using something like ZeppelinOS, go without it. Otherwise, feel free to ping me on Twitter or email if you have any enquiries :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/449018744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/498059141",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-498059141",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 498059141,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODA1OTE0MQ==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-02T19:36:26Z",
    "updated_at": "2023-03-28T14:01:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Happy to announce that now there's a dApp built on top of ERC-1620! It's called Sablier and you can check it out at http://sablier.finance\r\n\r\nFor more information, check out this Twitter [thread](https://twitter.com/PaulRBerg/status/1134773451888238592).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/498059141/reactions",
      "total_count": 3,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/502616704",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-502616704",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 502616704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjYxNjcwNA==",
    "user": {
      "login": "marsrobertson",
      "id": 44369284,
      "node_id": "MDQ6VXNlcjQ0MzY5Mjg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/44369284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marsrobertson",
      "html_url": "https://github.com/marsrobertson",
      "followers_url": "https://api.github.com/users/marsrobertson/followers",
      "following_url": "https://api.github.com/users/marsrobertson/following{/other_user}",
      "gists_url": "https://api.github.com/users/marsrobertson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marsrobertson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marsrobertson/subscriptions",
      "organizations_url": "https://api.github.com/users/marsrobertson/orgs",
      "repos_url": "https://api.github.com/users/marsrobertson/repos",
      "events_url": "https://api.github.com/users/marsrobertson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marsrobertson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-17T09:55:03Z",
    "updated_at": "2019-06-17T09:59:31Z",
    "author_association": "NONE",
    "body": "## 1.\r\nWhy block height not `now`?\r\n\r\n> Because there is uncertainty regarding block times, streams may not be settled on the blockchain as initially planned. \r\n\r\nThe rationale suggests that block times are uncertain, why not use human readable form?\r\n\r\n## 2.\r\n```\r\nstruct Rate {\r\n  uint256 payment;\r\n  uint256 interval;\r\n}\r\n```\r\n\r\nRename  `payment` ➡️ `amount`. Calling thing a `payment` suggests it’s another struct, a `payment` can contain the amount, time, description, comment, receipt, timestamp. In this instance it is the amount only. \r\n\r\n## 3.\r\nCreating structs for 2 fields such as `start` and `stop` and calling it `Timeframe`? Needlessly complicated, `start` and `stop` (or `beginning` and `end`) are simple enough.\r\n\r\nSimilar comment regarding `Rate`, no need to create a Struct for two fields only, both `amount` (or `amountPerInterval`, not `payment`) and `interval` can live directly as a member of `Stream`.\r\n\r\n## 4.\r\n100% supporting first comment - https://github.com/ethereum/EIPs/issues/1620#issuecomment-441368518 - ETH is the native currency of the Ethereum, using tokens only seem weird. But yeah... Market research, stablecoins, can alwasy use WETH.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/502616704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/502618914",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-502618914",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 502618914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjYxODkxNA==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-17T10:01:58Z",
    "updated_at": "2019-06-17T10:08:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @marsrobertson many thanks for your feedback.\r\n\r\n1. I found it easier to handle block numbers instead of timestamps. I guess it's also a tiny bit more gas efficient.\r\n2. Good idea, many people found `payment` a bit counter-intuitive.\r\n3. I don't disagree with you that it seems to be \"needlessly complicated\", but I guess I liked the brevity.\r\n4. By only accepting ERC20, I simplified the implementation. And yes, you can use WETH if you want to pay with Ether.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/502618914/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536119559",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-536119559",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 536119559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjExOTU1OQ==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-27T22:49:03Z",
    "updated_at": "2019-09-27T23:17:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "In preparation for migrating [Sablier](https://sablier.app)'s to mainnet, I updated this draft to match the latest implementation.\r\n\r\nChangelog:\r\n\r\n- Impossible to update the terms (payment rate, start and stop time) after creating a stream\r\n- Timestamps instead of block numbers\r\n- Many functions and variables renamed (e.g. `redeemStream` is now `cancelStream`)\r\n\r\nWith these changes, I seeked to minimise the complexity of the standard.\r\n\r\nERC-1620 is now in \"Last Call\" status.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536119559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536685245",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-536685245",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 536685245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjY4NTI0NQ==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T18:15:44Z",
    "updated_at": "2019-09-30T18:15:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, sorry for joining the discussion that late. I was not aware of it before.\r\nFor transit pension plan (https://devpost.com/software/transit-pension-plan) we are planning to give out pension as a stream and would thus be interested in a standard for wallet to follow.\r\n\r\nThrowing out quick comments right now but will hopefully find some time to get more specific later:\r\n\r\nI think the standard as it stands is too specific:\r\n- The standard should not define how stream are created. Similar to minting tokens, each type of stream creation will have their own logic, requiring different parameters. We can still have an event though\r\n- The standard should not prescribe that a end time is specified (for our pension, there is no pre-determined end-time)\r\n - The standard should not prescribe that a specific deposit is backing it up. (for our pension, the pool is shared among participants)\r\n\r\nFew notes regarding some of the stream's fields :\r\n- `uint256 deposit;` This should not be required as it might be unknown / shared among multiple streams (for our pension, the pool of fund is shared among the participants)\r\n- `uint256 remainingBalance;` is that the remainingBalance available to withdraw (a dynamic value) ? or is that simple what is left of the deposit, regardless of time ?\r\nif it is the former I would call it differently and would make it its own function that accept a timestamp as parameter, if it is the latter, the comment for `deposit` applies too.\r\n- `address sender;` this should not be a required parameter, there might no specific sender. (for our pension, there is no specific sender)\r\n- `uint256 stopTime;` This should not be required (for our pension, there is no pre-determined stopTime)\r\n \r\nRegarding the amount available to withdraw, as mentioned above, I would make it a separate method\r\n\r\nmaybe ```amountAvailableToWithdraw(uint256 streamId, uint256 timestamp)```\r\nthat MUST throw if no stream exist with that id\r\nthat MUST return the amount that can be given knowing how much time has passed, considering startTime and endTime (if any)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536685245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/538227838",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-538227838",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 538227838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzODIyNzgzOA==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-04T04:32:51Z",
    "updated_at": "2019-10-04T04:32:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @wighawag apologies for the delay, just woke up after a long journey getting to Devcon!\r\n\r\nGenerally, my take is that I wrote ERC-1620 particularly for streams funded by specific senders and paid to specific recipients. Are you familiar with @d10r's [ERC-2100](https://github.com/ethereum/EIPs/issues/2100)? I feel that's more aligned with your use case.\r\n\r\n> The standard should not prescribe that a end time is specified (for our pension, there is no pre-determined end-time)\r\n\r\nDoesn't this mean you'll have to have other mechanism for whitelisting and discarding payees?\r\n\r\n> The standard should not prescribe that a specific deposit is backing it up. (for our pension, the pool is shared among participants)\r\n\r\nThis would mean different users can't choose their own payment rate.\r\n\r\nBut interestingly enough, we did consider this and think to normalise the payment rate/ second so we can create an sDai (Sablier DAI) token. Unfortunately it didn't fit our current business model, but it's something to keep in mind as a skunk work type of thing.\r\n\r\n> is that the remainingBalance available to withdraw (a dynamic value) ? or is that simple what is left of the deposit, regardless of time ?\r\n\r\nThe latter. Say the initial deposit is 3600 tokens and the payment rate is 1 token/ second. After 100 seconds, you can withdraw up to 100 tokens. Say you withdraw all of it. The `remainingBalance` is now `3600 - 100 = 3500`.\r\n\r\n> Regarding the amount available to withdraw, as mentioned above, I would make it a separate method\r\n\r\nGood point. The word \"balance\" is used to denote two rather different things. In `balanceOf`, it is the amount of money allocated to each party, but in the `stream` struct, it is the balance allocated to the stream itself.\r\n\r\n`amountAvailableToWithdraw` sounds descriptive enough. I'll have a think about it and propose this as a change after we wrap our audit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/538227838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/567732869",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-567732869",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 567732869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzczMjg2OQ==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-20T00:13:31Z",
    "updated_at": "2019-12-20T00:13:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "We just moved this to the \"Final\" state 🥳\r\n\r\nThere are some things that could've been better, some features that could've been added, but we like it as it is now. It's simple and [it works in production in Sablier](https://sablier.finance).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/567732869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/567736972",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-567736972",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 567736972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzczNjk3Mg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-20T00:31:04Z",
    "updated_at": "2019-12-20T00:31:04Z",
    "author_association": "MEMBER",
    "body": "This issue shouldn't be closed as it is the discussion URL of the EIP.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/567736972/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974757144",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-974757144",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 974757144,
    "node_id": "IC_kwDOAq426M46GZ0Y",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-21T05:10:04Z",
    "updated_at": "2021-11-21T05:10:04Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974757144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986168213",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-986168213",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 986168213,
    "node_id": "IC_kwDOAq426M46x7uV",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-05T05:10:45Z",
    "updated_at": "2021-12-05T05:10:45Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986168213/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1226073937",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1226073937",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1226073937,
    "node_id": "IC_kwDOAq426M5JFGdR",
    "user": {
      "login": "Arch0125",
      "id": 72722967,
      "node_id": "MDQ6VXNlcjcyNzIyOTY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/72722967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arch0125",
      "html_url": "https://github.com/Arch0125",
      "followers_url": "https://api.github.com/users/Arch0125/followers",
      "following_url": "https://api.github.com/users/Arch0125/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arch0125/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arch0125/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arch0125/subscriptions",
      "organizations_url": "https://api.github.com/users/Arch0125/orgs",
      "repos_url": "https://api.github.com/users/Arch0125/repos",
      "events_url": "https://api.github.com/users/Arch0125/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arch0125/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-24T18:18:05Z",
    "updated_at": "2022-08-24T18:19:39Z",
    "author_association": "NONE",
    "body": "Hey! I'm working on the implementation of EIP-1620 for payment streaming with the following upgrades\r\n\r\n- Receiver can now transfer token directly from the stream to other addresses, with the stream rate changed as required by the contract\r\n- Receiver can now withdraw a part of the stream at any point of time\r\n- Also, I've found a way to let the user borrow against future streams where the borrowers doesn't have to pay any collateral upfront, the stream is redirected to the lender/pool for repayment\r\n\r\nHere's link to my project docs : [Salaried Docs](https://archisman-das.gitbook.io/salaried3-docs/)\r\nGitHub Repo : [Salaried3](https://github.com/Arch0125/salariedxyz)\r\nProduction on testnet (Polygon Mumbai) : [Website](https://salaried3.xyz)\r\n\r\nI would really like to contribute to this standard and improve it's functionality",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1226073937/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1226943290",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1226943290",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1226943290,
    "node_id": "IC_kwDOAq426M5JIas6",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-25T08:25:47Z",
    "updated_at": "2022-08-25T08:25:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @Arch0125, I'm glad to see someone take up ERC-1620 and improve upon it. However, as per the latest discussions in the [PR](https://twitter.com/PaulRBerg/status/1205648485686677504), this EIP ended up being marked as \"Stagnant\". A better place to talk about your project and your ideas about money streaming would be the [Sablier Discord](https://discord.gg/bSwRCwWRsT) feel free to even DM me directly once you join the server. I would love to have a chat.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1226943290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1232614240",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1232614240",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1232614240,
    "node_id": "IC_kwDOAq426M5JeDNg",
    "user": {
      "login": "Arch0125",
      "id": 72722967,
      "node_id": "MDQ6VXNlcjcyNzIyOTY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/72722967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arch0125",
      "html_url": "https://github.com/Arch0125",
      "followers_url": "https://api.github.com/users/Arch0125/followers",
      "following_url": "https://api.github.com/users/Arch0125/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arch0125/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arch0125/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arch0125/subscriptions",
      "organizations_url": "https://api.github.com/users/Arch0125/orgs",
      "repos_url": "https://api.github.com/users/Arch0125/repos",
      "events_url": "https://api.github.com/users/Arch0125/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arch0125/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-31T08:15:14Z",
    "updated_at": "2022-08-31T08:15:14Z",
    "author_association": "NONE",
    "body": "> Hey @Arch0125, I'm glad to see someone take up ERC-1620 and improve upon it. However, as per the latest discussions in the [PR](https://twitter.com/PaulRBerg/status/1205648485686677504), this EIP ended up being marked as \"Stagnant\". A better place to talk about your project and your ideas about money streaming would be the [Sablier Discord](https://discord.gg/bSwRCwWRsT) feel free to even DM me directly once you join the server. I would love to have a chat.\r\n\r\nHey I reached out to you in Sablier Discord, let's have a talk there about the improvement! My Discord ID is Archisman Das#9013. Also how to become the co-author if the EIP-1620 since I'm looking forward to contribute to the proposal",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1232614240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1232849169",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1232849169",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1232849169,
    "node_id": "IC_kwDOAq426M5Je8kR",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-31T12:06:42Z",
    "updated_at": "2022-08-31T12:06:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Arch0125 you cannot become a co-author because, as I said above, this EIP is now marked as \"Stagnant\". It doesn't accept any further revisions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1232849169/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1242979756",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1242979756",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1242979756,
    "node_id": "IC_kwDOAq426M5KFl2s",
    "user": {
      "login": "Arch0125",
      "id": 72722967,
      "node_id": "MDQ6VXNlcjcyNzIyOTY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/72722967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arch0125",
      "html_url": "https://github.com/Arch0125",
      "followers_url": "https://api.github.com/users/Arch0125/followers",
      "following_url": "https://api.github.com/users/Arch0125/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arch0125/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arch0125/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arch0125/subscriptions",
      "organizations_url": "https://api.github.com/users/Arch0125/orgs",
      "repos_url": "https://api.github.com/users/Arch0125/repos",
      "events_url": "https://api.github.com/users/Arch0125/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arch0125/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-11T14:43:05Z",
    "updated_at": "2022-09-11T14:43:05Z",
    "author_association": "NONE",
    "body": "@paulrberg I had a talk with Moderators from Ethereum Cat Herders and they are open to move the status of this EIP from \"Stagnant\" after reviewing the improvements I made on the current standard. So, are you open to the proposal to make further changes on the EIP-1620 itself or should I create a separate EIP and work on it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1242979756/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1243681324",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1243681324",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1243681324,
    "node_id": "IC_kwDOAq426M5KIRIs",
    "user": {
      "login": "Pandapip1",
      "id": 45835846,
      "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pandapip1",
      "html_url": "https://github.com/Pandapip1",
      "followers_url": "https://api.github.com/users/Pandapip1/followers",
      "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
      "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
      "repos_url": "https://api.github.com/users/Pandapip1/repos",
      "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-12T12:39:18Z",
    "updated_at": "2022-09-12T12:39:18Z",
    "author_association": "MEMBER",
    "body": "> @Arch0125 you cannot become a co-author because, as I said above, this EIP is now marked as \"Stagnant\". It doesn't accept any further revisions.\r\n\r\nThis isn't necessarily true. Stagnant EIPs can be brought back to draft.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1243681324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1250226086",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1250226086",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1250226086,
    "node_id": "IC_kwDOAq426M5KhO-m",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-18T09:06:38Z",
    "updated_at": "2022-09-18T09:06:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> are you open to the proposal to make further changes on the EIP-1620 itself\r\n\r\nLet me think about that, @Arch0125.\r\n\r\n> Stagnant EIPs can be brought back to draft.\r\n\r\nI didn't know this, thanks for explaining @Pandapip1.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1250226086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1250233343",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1250233343",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1250233343,
    "node_id": "IC_kwDOAq426M5KhQv_",
    "user": {
      "login": "Arch0125",
      "id": 72722967,
      "node_id": "MDQ6VXNlcjcyNzIyOTY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/72722967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arch0125",
      "html_url": "https://github.com/Arch0125",
      "followers_url": "https://api.github.com/users/Arch0125/followers",
      "following_url": "https://api.github.com/users/Arch0125/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arch0125/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arch0125/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arch0125/subscriptions",
      "organizations_url": "https://api.github.com/users/Arch0125/orgs",
      "repos_url": "https://api.github.com/users/Arch0125/repos",
      "events_url": "https://api.github.com/users/Arch0125/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arch0125/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-18T09:54:27Z",
    "updated_at": "2022-09-18T09:54:27Z",
    "author_association": "NONE",
    "body": "> > are you open to the proposal to make further changes on the EIP-1620 itself\n> \n> \n> \n> Let me think about that, @Arch0125.\n> \n> \n> \n\nMaybe I can create a new EIP having the new changes and give reference to 1620 when interfaces are used from the same.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1250233343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1250235061",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1250235061",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1250235061,
    "node_id": "IC_kwDOAq426M5KhRK1",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-18T10:05:27Z",
    "updated_at": "2022-09-18T10:05:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Arch0125 I'm open to reboot EIP-1620, but I am not able to review your proposed changes today. If you give me a few weeks, I will be able to.\r\n\r\nOf course, if you're in a rush with this and you just can't afford to wait after me, please do go ahead with making a new EIP.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1250235061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1250236940",
    "html_url": "https://github.com/ethereum/EIPs/issues/1620#issuecomment-1250236940",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1620",
    "id": 1250236940,
    "node_id": "IC_kwDOAq426M5KhRoM",
    "user": {
      "login": "hellwolf",
      "id": 186660,
      "node_id": "MDQ6VXNlcjE4NjY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/186660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hellwolf",
      "html_url": "https://github.com/hellwolf",
      "followers_url": "https://api.github.com/users/hellwolf/followers",
      "following_url": "https://api.github.com/users/hellwolf/following{/other_user}",
      "gists_url": "https://api.github.com/users/hellwolf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hellwolf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hellwolf/subscriptions",
      "organizations_url": "https://api.github.com/users/hellwolf/orgs",
      "repos_url": "https://api.github.com/users/hellwolf/repos",
      "events_url": "https://api.github.com/users/hellwolf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hellwolf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-18T10:16:14Z",
    "updated_at": "2022-09-18T10:17:14Z",
    "author_association": "NONE",
    "body": "HI all @Arch0125 @paulrberg,\r\n\r\nI am happy to see people continuing to explore the money streaming space. @Arch0125 have you looked into how Superfluid (https://github.com/superfluid-finance/protocol-monorepo/, docs.superfluid.finance/) has been approaching this the generalized money semantics including continuous money flows?\r\n\r\nI am also preparing some EIPs for a more inclusive and unifying approach to these new money semantics. Would you be all be a discussion together some day?\r\n\r\nP.S.: fwiw, my colleague at Superfluid also proposed https://github.com/ethereum/EIPs/issues/2100 a while ago.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1250236940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
