{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2255",
  "id": 486108912,
  "node_id": "MDU6SXNzdWU0ODYxMDg5MTI=",
  "number": 2255,
  "title": "EIP-2255: Web3 Wallet Permissions",
  "user": {
    "login": "danfinlay",
    "id": 542863,
    "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danfinlay",
    "html_url": "https://github.com/danfinlay",
    "followers_url": "https://api.github.com/users/danfinlay/followers",
    "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
    "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
    "organizations_url": "https://api.github.com/users/danfinlay/orgs",
    "repos_url": "https://api.github.com/users/danfinlay/repos",
    "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danfinlay/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 17,
  "created_at": "2019-08-28T01:12:30Z",
  "updated_at": "2022-05-28T05:16:37Z",
  "closed_at": "2022-05-28T05:16:37Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Opening an issue for discussing, for [Web3 Wallet Permissions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2255.md).\r\n\r\nDiscussion has started at [ethereum magicians](https://ethereum-magicians.org/t/web3-login-permissions/3583)\r\n\r\nReposting the body here:\r\n\r\n---\r\neip: TBD\r\ntitle: Wallet Permissions System\r\nauthor: Dan Finlay (@danfinlay), Erik Marks (@rekmarks)\r\ndiscussions-to: https://ethereum-magicians.org/t/web3-login-permissions/3583\r\nstatus: Work in progress (WIP)\r\ntype: Standard Track\r\ncategory: Interface\r\ncreated: 2019-08-22\r\nrequires: 1474\r\n---\r\n\r\n![f7b2f29144e062e330125526167bc3fa359cd7aa_2_1380x474](https://user-images.githubusercontent.com/542863/63818705-2aad7980-c8f7-11e9-8d54-d46647eb5bfb.png)\r\n<!--You can leave these HTML comments in your merged EIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new EIPs. Note that an EIP number will be assigned by an editor. When opening a pull request to submit your EIP, please use an abbreviated title in the filename, `eip-draft_title_abbrev.md`. The title should be 44 characters or less.-->\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\nA proposed standard interface for restricting and permitting access to security-sensitive methods within a restricted web3 context like a website or \"dapp\".\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\nWeb3 JavaScript wallet browsers may implement `wallet_getPermissions` and `wallet_requestPermissions`. This provides a standard interface for requesting permissions and checking a domain's current permissions status.\r\n\r\n## Motivation\r\nWeb3 Wallets are built around the responsibility of mediating the interactions between untrusted applications and a user's keys on their computer, getting appropriate consent from the user.\r\n\r\nToday web3 browsers like MetaMask always prompt on a per-action basis. This provides security at the cost of substantial user friction. We believe that a single permissions request can achieve the same level of security with vastly improved UX.\r\n\r\nThe pattern of permissions requests is common around the web, from login with Facebook, Twitter, Github, and even Apple, making it a very familiar pattern.\r\n\r\n![facebook permissions](https://proxy.duckduckgo.com/iu/?u=https%3A%2F%2Fi.stack.imgur.com%2FG7dRV.png&f=1)\r\n\r\n![log in with apple](https://forum.level1techs.com/uploads/default/original/3X/e/0/e0d20c0faec92acec3e591c957612fd482d9d01a.jpeg)\r\n\r\nMany web3 applications today begin their sessions with a series of repetitive requests:\r\n\r\n- Reveal your wallet address to this site.\r\n- Switch to a preferred network.\r\n- Sign a cryptographic challenge.\r\n- Grant a token allowance to our contract.\r\n- Send a transaction to our contract.\r\n\r\nMany of these (and possibly all), and many more (like decryption), could be generalized into a set of human-readable permissions prompts on the original sign-in screen, and additional permissions could be requested only as needed.\r\n\r\nOn the user's end, each of these permissions could be individually rejected (unchecked), or even _attenuated_, or adjusted to meet the user's terms (for example, a sign-in request could have a user-added expiration date, and a token allowance could be adjusted by the user when it is requested), making the web3 login a sort of user-revisable terms of use.\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\nThis proposal adds two new methods to a wallet's web3 provider API:\r\n\r\n- `wallet_getPermissions`\r\n- `wallet_requestPermissions`\r\n\r\nThe `wallet_getPermissions` method is used for getting an array of current permissions (empty by default), while the `wallet_requestPermissions` method is used for an application to request additional permissions.\r\n\r\nThese two methods are used to restrict a few hypothetical \"restricted methods\". The first such method we would suggest should be included as part of the standard is `eth_accounts`.\r\n\r\nIn this framework, the permission for a user to reveal their accounts would look like this:\r\n\r\n```javascript\r\nconst response = await provider.send({\r\n  method: 'wallet_requestPermissions',\r\n  params: [{\r\n    'eth_accounts': {},\r\n  }]\r\n})\r\n```\r\n\r\nIf this request was rejected, it would throw an error with a `code` value equal to `4001`, per [EIP 1193 errors](https://eips.ethereum.org/EIPS/eip-1193), which the MetaMask team has canonized in a module [eth-json-rpc-errors](https://github.com/metamask/eth-json-rpc-errors).\r\n\r\nIf the request is accepted by the user, then subsequent requests to `eth_accounts` will succeed, and return an accounts array as usual.\r\n\r\nA call to `wallet_getPermissions` will then return a permissions schema object that describes the current permission.\r\n\r\n```javascript\r\nconst response = await provider.send({\r\n  method: 'wallet_getPermissions'\r\n})\r\n```\r\nWould return a value something like this:\r\n\r\n```\r\n[\r\n  {\r\n    invoker: 'ens://your-site.eth',\r\n    parentCapability: 'eth_accounts',\r\n    caveats: [\r\n      {\r\n        type: 'filterResponse',\r\n        value: [\"0x0c54fccd2e384b4bb6f2e405bf5cbc15a017aafb\"]\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\nWhere `invoker` is a unique domain string used to identify the source of the current dapp. To start, this may include only `https` prefixes, but `ens`, `swarm`, `ipfs`, and others may all be valid sources in the future.\r\n\r\nThe term `parentCapability` comes from the [ocap-ld spec](https://w3c-ccg.github.io/ocap-ld/), which these permissions objects are based on, and refers to the method that is being permitted.\r\n\r\nThe `caveats` array represents the specific restrictions applied to the permitted method.\r\n\r\nYou can see above how internally the user-selected account is transformed into a [`caveat`](https://github.com/MetaMask/json-rpc-capabilities-middleware/blob/master/src/%40types/ocap-ld.d.ts#L28-L33), which is a restriction on the response values, in this case ensuring the page can only be notified of approved accounts. This also means this permissions system is forward-extensible to support logging into a page with multiple accounts.\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\nWhile the current model of getting user consent on a per-action basis has high security, there are huge usability gains to be had bo getting more general user consent which can cover broad categories of usage, which can be expressed in a more human-readable way. This pattern has a variety of benefits to offer different functions within a web3 wallet.\r\n\r\nThe `eth_sendTransaction` method itself could be a restricted method (requested by default with the `provider.enable()` method), and the user could at sign-in time decide whether they wanted to require confirmations, approve all transactions, or only approve transactions to a certain contract, or up to a certain token limit, for example. By restricting this method by default, wallets could prevent sites from spamming the user with popups.\r\n\r\nIf `eth_call` were a restricted method, then random websites would not be able to drain a user's subscription to a hosted provider, making it easier to protect services like Infura against DDoS attacks.\r\n\r\nOn-chain actions could be represented as a permission under this model, for example, the permission to send an allowance-setting transaction to a specific token address is virtually equialent to the approval of that transaction, except the site could choose to only invoke the transaction when it was needed. This could allow a standard interface for applications to request permissions which may require different actions depending on different types of accounts (hot wallets, hardware wallets, cold wallets, contract accounts).\r\n\r\nThe `requestPermissions` method could be expanded to include other options related to the requested permissions, for example, sites could request accounts with specific abilities. For example, a website like an exchange that requires `signTypedData_v3` (which is not supported by some hardware wallets), might want to specify that requirement, maybe like this:\r\n\r\n```javascript\r\nprovider.send({\r\n  method: 'requestPermissions',\r\n  params: [\r\n    {\r\n      'eth_accounts': {\r\n        requiredMethods: ['signTypedData_v3']\r\n      }\r\n    }\r\n  ]\r\n})\r\n```\r\nThat type of API will also be up for discussion on [The MetaMask repository](https://github.com/MetaMask/metamask-extension/issues/6994).\r\n\r\nThis would allow the wallet to limit the user's options to valid ones, and allows dapps to ensure selected accounts are compatible with their service, while preserving the user's privacy regarding how they are storing their keys.\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\nWe have [a branch of MetaMask available now](https://github.com/MetaMask/metamask-extension/tree/LoginPerSite) which adds these methods via an [rpc-engine](https://github.com/MetaMask/json-rpc-engine) middleware called [json-rpc-capabilities-middleware](https://github.com/MetaMask/json-rpc-capabilities-middleware) (or often `RpcCap` internally, for short).\r\n\r\nThe latest build of this branch of MetaMask can be downloaded from [the draft pull request](https://github.com/MetaMask/metamask-extension/pull/7004) (look for the latest post by `@MetaMaskBot`). A guide to adding a custom build of MetaMask to Chrome can be found [here](https://github.com/MetaMask/metamask-extension/blob/develop/docs/add-to-chrome.md).\r\n\r\nThis branch of MetaMask can be used with [this sample site](https://metamask.github.io/permissions-adventure/) ([source](https://github.com/metamask/permissions-adventure)), which uses a couple sample permissions for demonstration purposes:\r\n\r\n- `readYourProfile`: We have bundled this build with an imaginary concept of a local \"profile\", a simple [POJO](https://en.wikipedia.org/wiki/Plain_old_Java_object). Eventually this could be extended to instead expose the user's [3box profile](https://3box.io/).\r\n- `writeToYourProfile`: This permission allows the requesting app to freely update/edit the user's profile.\r\n- `sendEther`: A permission allowing the sending of transactions.\r\n\r\n![sample dapp](https://miro.medium.com/max/1400/0*JE9gDZR7fqo2Ewfw.gif)\r\n\r\nIt is notable that this branch is the first version of MetaMask that allows you to be connected to each site with a different account, which persists on that site, along with any other permissions granted to the site.\r\n\r\nYou can get more detailed API and type information [on the RpcCap repository's readme](https://github.com/MetaMask/json-rpc-capabilities-middleware#rpc-methods).\r\n\r\nNew hypothetical and proposed permissions can be easily added to [the `restrictedMethods` hash in the MetaMask permissions controller](https://github.com/MetaMask/metamask-extension/blob/774d931cb9f16a8f2df8c6deee1dd553b40d5ad5/app/scripts/controllers/permissions.js#L187) or proposed for discussion on the [MetaMask/wallet-permissions-spec](https://github.com/MetaMask/wallet-permissions-spec) repository.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2255/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/525581145",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-525581145",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 525581145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTU4MTE0NQ==",
    "user": {
      "login": "raymonddurk",
      "id": 8037263,
      "node_id": "MDQ6VXNlcjgwMzcyNjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8037263?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raymonddurk",
      "html_url": "https://github.com/raymonddurk",
      "followers_url": "https://api.github.com/users/raymonddurk/followers",
      "following_url": "https://api.github.com/users/raymonddurk/following{/other_user}",
      "gists_url": "https://api.github.com/users/raymonddurk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raymonddurk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raymonddurk/subscriptions",
      "organizations_url": "https://api.github.com/users/raymonddurk/orgs",
      "repos_url": "https://api.github.com/users/raymonddurk/repos",
      "events_url": "https://api.github.com/users/raymonddurk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raymonddurk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-28T04:40:41Z",
    "updated_at": "2019-08-28T04:40:41Z",
    "author_association": "NONE",
    "body": "Thanks for tackling this! Are you thinking this should be approved every time you interact with the dapp? That is very pro user security and privacy but could lead to a poor UX. I am not sure how many dapps would require a persistent need to interact with your wallet but wouldn't want to say never.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/525581145/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/525588886",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-525588886",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 525588886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTU4ODg4Ng==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-28T05:22:07Z",
    "updated_at": "2019-08-28T05:22:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Are you thinking this should be approved every time you interact with the dapp?\r\n\r\nNo, I think this could take the place of the login prompt. It would be up to the wallet and user to choose and enforce a logout policy that made sense for that user’s security preference.\r\n\r\nFor example, an expiration timeout is a type of caveat we are sure to propose, because it can be so useful for security.\r\n\r\nHowever, unlike traditional web 2.0, where the logout options and policy are provided by the grace of the site, web3 wallets can enforce the preferences of the user across any compatible site.\r\n\r\nThis could mean any site’s login prompt includes a list of permissions, and a “log me out after X inactivity” at the bottom.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/525588886/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/528863992",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-528863992",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 528863992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODg2Mzk5Mg==",
    "user": {
      "login": "serapath",
      "id": 1771897,
      "node_id": "MDQ6VXNlcjE3NzE4OTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1771897?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/serapath",
      "html_url": "https://github.com/serapath",
      "followers_url": "https://api.github.com/users/serapath/followers",
      "following_url": "https://api.github.com/users/serapath/following{/other_user}",
      "gists_url": "https://api.github.com/users/serapath/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/serapath/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/serapath/subscriptions",
      "organizations_url": "https://api.github.com/users/serapath/orgs",
      "repos_url": "https://api.github.com/users/serapath/repos",
      "events_url": "https://api.github.com/users/serapath/events{/privacy}",
      "received_events_url": "https://api.github.com/users/serapath/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-06T13:54:09Z",
    "updated_at": "2019-09-06T13:54:09Z",
    "author_association": "NONE",
    "body": "there is a broken link to https://w3c-ccg.github.io/ocap-ld/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/528863992/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/528873944",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-528873944",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 528873944,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODg3Mzk0NA==",
    "user": {
      "login": "serapath",
      "id": 1771897,
      "node_id": "MDQ6VXNlcjE3NzE4OTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1771897?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/serapath",
      "html_url": "https://github.com/serapath",
      "followers_url": "https://api.github.com/users/serapath/followers",
      "following_url": "https://api.github.com/users/serapath/following{/other_user}",
      "gists_url": "https://api.github.com/users/serapath/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/serapath/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/serapath/subscriptions",
      "organizations_url": "https://api.github.com/users/serapath/orgs",
      "repos_url": "https://api.github.com/users/serapath/repos",
      "events_url": "https://api.github.com/users/serapath/events{/privacy}",
      "received_events_url": "https://api.github.com/users/serapath/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-06T14:20:28Z",
    "updated_at": "2019-09-06T14:20:28Z",
    "author_association": "NONE",
    "body": "It would be cool if a dapp can request features which metamask does not support and then offer users alternative wallets or solutions for the kind of feature the user needs to be used in addition to metamask to solve the requirements of the dapp :-)\r\n\r\nI responded in the above linked issues, because even though it's strongly related, it's more about \"feature requests\" than \"permission requests\".\r\n\r\nDid you think of such a scenario?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/528873944/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/528980043",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-528980043",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 528980043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODk4MDA0Mw==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-06T19:14:19Z",
    "updated_at": "2019-09-06T19:14:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> there is a broken link to https://w3c-ccg.github.io/ocap-ld/\r\n\r\nThey apparently just recently renamed it to [zcap-ld](https://w3c-ccg.github.io/zcap-ld/), thanks for the catch!\r\n\r\n> It would be cool if a dapp can request features which metamask does not support and then offer users alternative wallets or solutions for the kind of feature the user needs to be used in addition to metamask to solve the requirements of the dapp :-)\r\n\r\nI think it makes sense that different wallets would support different methods/permissions, and so maybe we can add to this spec to define an error of \"method not supported by wallet\", which a dapp developer could use to trigger an alternative-wallet suggestion flow. We probably just need to standardize an error code for that and we could add it. Could submit the error code as a PR here:\r\nhttps://github.com/MetaMask/eth-json-rpc-errors",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/528980043/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536688165",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-536688165",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 536688165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjY4ODE2NQ==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-30T18:23:07Z",
    "updated_at": "2019-09-30T18:23:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've opened a PR for this proposal: https://github.com/ethereum/EIPs/pull/2302",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536688165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/549129705",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-549129705",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 549129705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTEyOTcwNQ==",
    "user": {
      "login": "hiddentao",
      "id": 266594,
      "node_id": "MDQ6VXNlcjI2NjU5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266594?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hiddentao",
      "html_url": "https://github.com/hiddentao",
      "followers_url": "https://api.github.com/users/hiddentao/followers",
      "following_url": "https://api.github.com/users/hiddentao/following{/other_user}",
      "gists_url": "https://api.github.com/users/hiddentao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hiddentao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hiddentao/subscriptions",
      "organizations_url": "https://api.github.com/users/hiddentao/orgs",
      "repos_url": "https://api.github.com/users/hiddentao/repos",
      "events_url": "https://api.github.com/users/hiddentao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hiddentao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-03T12:01:33Z",
    "updated_at": "2019-11-03T12:03:19Z",
    "author_association": "NONE",
    "body": "> the user could at sign-in time decide whether they wanted to require confirmations, approve all transactions\r\n\r\nA note that if connecting via a hardware wallet then the dapp-facing \"wallet\" needs to be smart enough to not display this option (i.e. _auto-approve tx_) in the first place otherwise the user may get confused later on.\r\n\r\nAlso, an admin UI of sorts through which users can administer permissions previously set for Dapps is crucial.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/549129705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/550045892",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-550045892",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 550045892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MDA0NTg5Mg==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-05T22:11:44Z",
    "updated_at": "2019-11-05T22:11:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> A note that if connecting via a hardware wallet then the dapp-facing \"wallet\" needs to be smart enough to not display this option (i.e. auto-approve tx) in the first place otherwise the user may get confused later on.\r\n\r\nThis is true. We may completely avoid auto-signing permissions and instead prefer delegated keys, which have intrinsic signing power.\r\n\r\n> Also, an admin UI of sorts through which users can administer permissions previously set for Dapps is crucial.\r\n\r\nAgreed, and at MetaMask we are implementing exactly this. It will allow redaction and attenuation of active permissions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/550045892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/633506068",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-633506068",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 633506068,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzUwNjA2OA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-25T10:35:52Z",
    "updated_at": "2020-05-25T10:35:52Z",
    "author_association": "MEMBER",
    "body": "In the `specification` section it reads (emphasis mine):\r\n> The wallet_getPermissions method is used for getting an array of current permissions **(empty by default)**, while the wallet_requestPermissions method is used for an application to request additional permissions.\r\n\r\nI recommend removing the `empty by default` wording as the default permission set is something that should be up to the tool to decide on.  Some users may want to give away some \"public\" account by default to all websites and for them the initial set of `wallet_getPermissions` for a given dapp would include `eth_accounts`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/633506068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/633508280",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-633508280",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 633508280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzUwODI4MA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-25T10:41:28Z",
    "updated_at": "2020-05-25T10:41:28Z",
    "author_association": "MEMBER",
    "body": "Would every method have a permission associated with it, or only certain ones?  If only certain ones, how does one get a list of the methods from the provider that are gated by this system?\r\n\r\nI don't see caveats specified anywhere in here, without standardization they are going to be nearly useless to dapps since we will not be able to write logic that switches on them.  Also, it is unclear to me why dapps need to know the limits that the user may or may not have put on the system?  Why does the dapp need to know that the accounts it is seeing are filtered down to a subset?  That feels like an information leakage.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/633508280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/664049449",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-664049449",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 664049449,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDA0OTQ0OQ==",
    "user": {
      "login": "om26er",
      "id": 6350837,
      "node_id": "MDQ6VXNlcjYzNTA4Mzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6350837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/om26er",
      "html_url": "https://github.com/om26er",
      "followers_url": "https://api.github.com/users/om26er/followers",
      "following_url": "https://api.github.com/users/om26er/following{/other_user}",
      "gists_url": "https://api.github.com/users/om26er/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/om26er/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/om26er/subscriptions",
      "organizations_url": "https://api.github.com/users/om26er/orgs",
      "repos_url": "https://api.github.com/users/om26er/repos",
      "events_url": "https://api.github.com/users/om26er/events{/privacy}",
      "received_events_url": "https://api.github.com/users/om26er/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-26T22:41:13Z",
    "updated_at": "2020-07-26T22:41:13Z",
    "author_association": "NONE",
    "body": "I am trying to use Wallet Permissions to get permission from the user to \"sign\" any EIP712 data, that seems not to be possible. Or am I expecting EIP2255 wrongly for my use case ? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/664049449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/664238525",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-664238525",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 664238525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDIzODUyNQ==",
    "user": {
      "login": "om26er",
      "id": 6350837,
      "node_id": "MDQ6VXNlcjYzNTA4Mzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6350837?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/om26er",
      "html_url": "https://github.com/om26er",
      "followers_url": "https://api.github.com/users/om26er/followers",
      "following_url": "https://api.github.com/users/om26er/following{/other_user}",
      "gists_url": "https://api.github.com/users/om26er/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/om26er/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/om26er/subscriptions",
      "organizations_url": "https://api.github.com/users/om26er/orgs",
      "repos_url": "https://api.github.com/users/om26er/repos",
      "events_url": "https://api.github.com/users/om26er/events{/privacy}",
      "received_events_url": "https://api.github.com/users/om26er/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T09:31:41Z",
    "updated_at": "2020-07-27T09:31:41Z",
    "author_association": "NONE",
    "body": "What I am looking for is for my website to be able to get \"permissions\" from the user only once to be able to sign EIP712 transaction on its behalf. Is that possible with current implementation of things ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/664238525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/971926546",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-971926546",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 971926546,
    "node_id": "IC_kwDOAq426M457mwS",
    "user": {
      "login": "A13k2",
      "id": 18004529,
      "node_id": "MDQ6VXNlcjE4MDA0NTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/18004529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/A13k2",
      "html_url": "https://github.com/A13k2",
      "followers_url": "https://api.github.com/users/A13k2/followers",
      "following_url": "https://api.github.com/users/A13k2/following{/other_user}",
      "gists_url": "https://api.github.com/users/A13k2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/A13k2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/A13k2/subscriptions",
      "organizations_url": "https://api.github.com/users/A13k2/orgs",
      "repos_url": "https://api.github.com/users/A13k2/repos",
      "events_url": "https://api.github.com/users/A13k2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/A13k2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-17T20:00:51Z",
    "updated_at": "2021-11-17T20:00:51Z",
    "author_association": "NONE",
    "body": "any updates on this?\r\nthis issue is already older than 2 years (1000 years in crypto time)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/971926546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/972499884",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-972499884",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 972499884,
    "node_id": "IC_kwDOAq426M459yus",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-18T03:55:45Z",
    "updated_at": "2021-11-18T03:55:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi there, checking in here, sorry for the infrequency.\r\n\r\n> Would every method have a permission associated with it, or only certain ones? If only certain ones, how does one get a list of the methods from the provider that are gated by this system?\r\n\r\nRestricted methods would be up to the wallet/provider.\r\n\r\n> I am trying to use Wallet Permissions to get permission from the user to \"sign\" any EIP712 data, that seems not to be possible. Or am I expecting EIP2255 wrongly for my use case ?\r\n\r\nYes these are not a way to get an EIP-712 signature from the user. At some later point these permissions could be extended to include a signature in the `proof` field of the returned data.\r\n\r\n> any updates on this?\r\n\r\nI guess we should open the PR for this interface. This interface is easy to add to any RPC-API provider using [rpc-cap](https://github.com/MetaMask/rpc-cap/), which has been in production at MetaMask for >2 years now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/972499884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/972501015",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-972501015",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 972501015,
    "node_id": "IC_kwDOAq426M459zAX",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-18T03:58:59Z",
    "updated_at": "2021-11-18T03:58:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh, this was merged, it's just been in a \"draft\" state:\r\nhttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-2255.md",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/972501015/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1128388826",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-1128388826",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 1128388826,
    "node_id": "IC_kwDOAq426M5DQdja",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-05-17T04:11:43Z",
    "updated_at": "2022-05-17T04:11:43Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1128388826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140176677",
    "html_url": "https://github.com/ethereum/EIPs/issues/2255#issuecomment-1140176677",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2255",
    "id": 1140176677,
    "node_id": "IC_kwDOAq426M5D9bcl",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-28T05:16:37Z",
    "updated_at": "2022-05-28T05:16:37Z",
    "author_association": "MEMBER",
    "body": "Closing this for housekeeping purposes. Feel free to continue using this issue for discussion about EIP-2255.\r\n\r\nNote: If 2255 is pulled out of stagnant, the discussions-to link should be moved to a thread on Ethereum Magicians.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140176677/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
