{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/616",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/616/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/616/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/616/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/616",
  "id": 224851402,
  "node_id": "MDU6SXNzdWUyMjQ4NTE0MDI=",
  "number": 616,
  "title": "EIP-616: SIMD Operations for the EVM",
  "user": {
    "login": "gcolvin",
    "id": 16827129,
    "node_id": "MDQ6VXNlcjE2ODI3MTI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gcolvin",
    "html_url": "https://github.com/gcolvin",
    "followers_url": "https://api.github.com/users/gcolvin/followers",
    "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
    "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
    "organizations_url": "https://api.github.com/users/gcolvin/orgs",
    "repos_url": "https://api.github.com/users/gcolvin/repos",
    "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gcolvin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "gcolvin",
    "id": 16827129,
    "node_id": "MDQ6VXNlcjE2ODI3MTI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gcolvin",
    "html_url": "https://github.com/gcolvin",
    "followers_url": "https://api.github.com/users/gcolvin/followers",
    "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
    "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
    "organizations_url": "https://api.github.com/users/gcolvin/orgs",
    "repos_url": "https://api.github.com/users/gcolvin/repos",
    "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gcolvin/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2017-04-27T17:05:24Z",
  "updated_at": "2022-01-16T09:11:15Z",
  "closed_at": "2022-01-16T09:11:15Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "#Current PR: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-616.md\r\nWorking draft:\r\n```\r\nEIP: 616\r\nTitle: SIMD Operations for the EVM\r\nAuthor: Greg Colvin, greg@colvin.org\r\nType: Standard Track\r\nCategory: Core\r\nStatus: Deferred\r\nCreated: 2017-04-25\r\n```\r\n\r\n## ABSTRACT\r\n\r\nA proposal to provide Single Instruction Multiple Data types and operations for the Ethereum Virtual Machine, making full use of the 256-bit wide EVM stack items, and offering substantial performance gains for vector operations.  Since a vector of one element is a scalar, the performance of native scalars for 64-bit and smaller quantities is also provided.\r\n\r\n## MOTIVATION\r\n\r\nMost all modern CPUs include SIMD hardware that operates on wide registers of data, applying a Single Instruction to Multiple Data lanes in parallel, where lanes divide a register into a vector of scalar elements of equal size.  This model is an excellent fit for the wide stack items of the EVM, offering substantial performance boosts for operations that can be expressed as parallel operations on vectors of scalars.  For some examples, a brief literature search finds SIMD speedups of\r\n* up to 7X for [SHA-512](http://keccak.noekeon.org/sw_performance.html)\r\n* 4X for [elliptic curve scalar multiplication](http://link.springer.com/chapter/10.1007/3-540-45439-X_16)\r\n* 3X to 4X for [BLAKE2b](http://github.com/minio/blake2b-simd)\r\n* up to 3X for [OpenSSL](https://software.intel.com/en-us/articles/improving-openssl-performance)\r\n* 2X to 3X for [elliptic curve modular multiplication](http://ieee-hpec.org/2013/index_htm_files/24-Simd-acceleration-Pabbuleti-2886999.pdf)\r\n* 1.7X to 1.9X for [SHA-256](https://github.com/minio/sha256-simd)\r\n* 1.3X for [RSA encryption](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.738.1218&rep=rep1&type=pdf)\r\n\r\n## SPECIFICATION\r\n\r\n### Opcodes\r\n\r\nWe define the following extended SIMD versions of the EVM's arithmetic, logic, and comparison operations, as well as a set of operations needed for working with SIMD vectors as data.  As with the normal versions, they consume their arguments from the stack and place their results on the stack, except that their arguments are vectors rather than scalars. \r\n\r\nlo\\hi |\tC       | D            | E\r\n-|-|-|-\r\n0|                     | XLT         | XPUSH\r\n1| XADD           | XGT        | XMLOAD\r\n2| XMUL          | XSLT       | XMSTORE\r\n3| XSUB           | XSGT      | XPOP\r\n4| XDIV            | XEQ         | XSLOAD\r\n5| XSDIV          | XISZERO | XSTORE\r\n6| XMOD          | XAND      | XDUP\r\n7| XSMOD        | XOR         | XSWAP\r\n8|                      | XXOR      | XGETLOCAL\r\n9|                      | XNOT      | XPUTLOCAL\r\nA|                      |                 | XGETVEC\r\nB|                      | XSHL       | XPUTVEC\r\nC|                      | XSHR       | XSWIZZLE\r\nD|                       | XSAR      | XSHUFFLE\r\nE| XVECTOW   | XROL      | XSCATTER\r\nF| XWTOVEC   | XROR      | XGATHER\r\n\r\n### Encoding\r\n\r\nWe propose a simple encoding of SIMD operations as extended two-byte codes.  The first byte is the opcode, and the second byte is the SIMD type: scalar type, lane count, and lane width. \r\n\r\n N bits | Field\r\n-|-\r\n8 | opcode\r\n1 |reserved: 0\r\n1 | reserved: 0\r\n2 | lane width: log base 2 of the number of bytes, as an MSB first integer\r\n1 | reserved: 0\r\n3 | lane count: log base 2 of the number of lanes, as an MSB first integer\r\n\r\nThus in 256-bit vectors, we can specify SIMD types with unsigned integer lanes from 8 to 64 bits wide in vectors of 32 to 2 lanes, respectively.  Using all the reserved bits the encoding allows for 256-Kbit vectors.\r\n\r\n_Note that when the lane count is one the operation is on one scalar, so this specification also provides for native operations on single scalars._\r\n\r\n####  Wide integers, SIMD vectors, and bitstrings.\r\n\r\nWide integer values on the stack, in storage, and in memory, are stored (conceptually) as MSB-first bitstrings. SIMD vectors, to the contrary, are stored to match most SIMD hardware - as LSB-first bitstrings, starting with the least significant bit of the lowest-indexed element of the vector and proceeding upwards.   But this may yield a surprise: when vectors are first converted to a wide integer, and the wide integer then placed on memory or storage, the vector, like the wide integer, will be stored MSB first.  However, if the wide integer is converted back to a vector the correct value results.\r\n\r\n### Semantics\r\n\r\n#### Notation and Vector Types\r\n\r\nIn the pseudo-assembly below we will denote the lane type, lane width, and number of lanes using Solidity's syntax, so the following says to push two SIMD vectors of 4 unsigned 32-bit ints on the stack, and then add two vectors of that type together.\r\n```\r\nXPUSH [uint32(1), 2, 3, 4]\r\nXPUSH [uint32(5), 6, 7, 8]\r\nXADD uint32[4]\r\n```\r\nCurrently, `uint8`, `uint16`, `uint32`, and `uint64` are the only supported lane types and widths, with available lane counts to support the following types: \r\n* `uint8`, `uint8[2]`, `uint8[4]`,`uint8[8]`,`uint8[16]`, `uint8[32]`\r\n* `uint16`, `uint16[2]`, `uint16[4]`,`uint16[8]`,`uint16[16]`\r\n* `uint32`, `uint32[2]`, `uint32[4]`,`uint32[8]`\r\n* `uint64`, `uint64[2]`, `uint64[4]`\r\n\r\n#### Arithmetic, logic, and bitwise operations\r\n\r\nThe extended operations from codes B0 through CF have the same semantics as the corresponding operations for codes 00 through 1F, except that the modulus varies by scalar type and the operations are applied pair-wise to the elements of the source operands to compute the destination elements, as above.  E.g.\r\n\r\n* `XADD  type`\r\nTakes two `type` vectors on the stack, and leaves on the stack their pair-wise sum.\r\n> E.g.\r\n> ```\r\n> XPUSH [1, 2, 3, 4]\r\n> XPUSH [4, 5, 6, 7]\r\n> XADD uint8[3]\r\n> ```\r\n> leaves\r\n> ```\r\n> [5, 7, 9, 11]\r\n> ```\r\n> on the stack\r\n\r\nAnd so on for most of the twenty-three remaining operations in columns B and C.\r\n\r\nThere are exceptions:\r\n\r\n* `XLT type`\r\n`XGT type`\r\n`XSLT type`\r\n`XSGT type`\r\n`XEQ type`\r\n`XISZERO type`\r\nThe comparison operations return 1 for true and 0 for false.\r\n> E.g.\r\n> ```\r\n> XPUSH [1, 5, 3, 7]\r\n> XPUSH [4, 2, 6, 4]\r\n> XLT uint8[4]\r\n> ```\r\n> leaves\r\n> ```\r\n> [0, 1, 0, 1]\r\n> ```\r\n> on the stack\r\n\r\n* `XNOT type`\r\nApplies the one's complement operation to a single vector on the stack.\r\n* `XVECTOW type`\r\nReplaces the bits of a vector on the stack with a 256-bit wide integer.  The bits of the vector are taken LSB-first - starting with the least significant bit of the lowest-indexed element of the vector and proceeding upwards - and copied to the wide integer LSB first.  Missing bits are zero-filled.\r\n* `XWTOVEC type`\r\nReplaces the bits of a 256-bit wide integer on the stack with a vector.  The bits of the wide integer are taken LSB first and copied to the vector LSB first - starting with the least significant bit of the lowest-indexed element of the vector and proceeding upwards. Extra bits are discarded.\r\n\r\n#### Data motion operations\r\n\r\nThe operations from D0 through DF are for moving data in and out of vectors and moving vectors around storage, memory, and stack.\r\n\r\n* `XPUSH  type, inline_data`\r\nTakes its inline data to be the MSB-first representation of the bits of the specified vector, and pushes a vector formed from those bits on the stack. Only as many elements as needed to store the vector are stored inline.  Missing elements are zero-filled on the stack.\r\n\r\n* `XPOP type`\r\nRemoves the topmost vector from the stack.\r\n\r\n* `XDUP type, n`\r\nCopies the `SP[n]` vector to the top of the stack.\r\n\r\n* `XSWAP type, n`\r\nExchanges the `SP[0]` and `SP[n]` stack items.\r\n\r\n* `XMLOAD type`\r\nLike `MLOAD`, takes one vector on the stack: a vector containing the memory address to load from as its first, 64-bit element.  That vector is replaced by the addressed data.\r\n\r\n* `XMSTORE type`\r\nLike `MSTORE`, takes two vectors on the stack:  a vector containing a memory address as its first, 64-bit element, and a vector to store to memory at that address.  Only as many elements are stored as are in a `type` vector.\r\n\r\n* `XSLOAD type`\r\nLike `SLOAD`, takes one wide integer on the stack, containing the storage address to load from.  That item is replaced by the stored data, converted to a `type` vector.\r\n\r\n* `XSSTORE type`\r\nLike `SSTORE`, takes two items on the stack:  a vector containing a storage address as a wide integer, and a vector to place in storage at that address.  The vector is converted to a wide integer before being stored.\r\n\r\n* `XGETVEC  type, index_type`\r\nThis operation takes two vectors on the stack: an index vector and a source vector.  It leaves on the stack the source vector, and the indexed elements of the source vector in the index vector - that is, each element in the index vector is the index of the source element with which to replace it.  The indexes are taken modulo the number of lanes in the vector, so the result is deterministic and cannot overflow.  If the element type of the source type and index differ values are taken modulo the size of the index type.\r\n\r\n> E.g.\r\n> ```\r\n> XPUSH [4, 5, 6, 0]    // source\r\n> XPUSH [3, 2]       // indexes\r\n> XGETVEC uint8[3] uint8[5]\r\n> ```\r\n> leaves the source and the modified index vector on the stack:\r\n> ```\r\n> [4, 5, 6, 0] \r\n> [0, 6]\r\n> ```\r\n\r\n* `XPUTVEC  type, index_type`\r\nTakes three vectors on the stack:   an index vector, a source vector, and a destination vector.  Leaves on the stack the modified destination vector - each element in the index vector is the index of the destination element to replace with the corresponding source element.  The indexes are taken modulo the number of lanes in the vector, so the result is deterministic and cannot overflow.  The index vector and the source vector have the same type.  If the element types of the source and destination vectors differ values are taken modulo the size of the destination type.\r\n\r\n> E.g.\r\n> ```\r\n> XPUSH [4, 5, 6, 0] // destination\r\n> XPUSH [7, 8]       // replacements\r\n> XPUSH [0, 3]       // indexes\r\n> XGETVEC uint8[3] uint8[2]\r\n> ```\r\n> leaves the modified source vector on the stack.\r\n> ```\r\n>  [7, 5, 6, 8] \r\n> ```\r\n\r\n* `XSWIZZLE  type`\r\nTakes two vectors on the stack:  a permutation mask and a source vector to permute.  Leaves on the stack the source vector and a permutation of the source vector in the mask vector - each element in the mask is the index of the source element with which to replace it.  The permutation indexes are taken modulo the number of lanes in the vector, so the result is deterministic and cannot overflow.\r\n\r\n> E.g.\r\n> ```\r\n> XPUSH [4, 5, 6, 0]  // source\r\n> XPUSH [0, 1, 3, 0]  // mask\r\n> XSWIZZLE uint8[4]\r\n> ```\r\n> leaves the source and the modified mask vector on the stack.\r\n> ```\r\n> [4, 5, 6, 0]\r\n> [4, 5, 0, 4]\r\n> ```\r\n\r\n* `XSHUFFLE  type`\r\nTakes three vectors on the stack:  a permutation mask and two source vectors to permute.  Leaves on the stack a permutation of the source vectors in the mask vector.  Each element in the mask is the index of the element with which to replace it.  If the index is less than the number of lanes `n` in the source vectors the replacement is taken from the first source vector, if larger, from the second source vector at `((index - n) % n)`.   Again, the modulo computation assures deterministic results.\r\n> E.g.\r\n> ```\r\n> XPUSH [0, 0, 0, 0]    // source 2\r\n> XPUSH [4, 5, 6, 7]    // source 1\r\n> XPUSH [0, 1,  2, 35]  // mask\r\n> XSHUFFLE uint8[4]\r\n> ```\r\n> leaves the sources and the modified mask vector on the stack.\r\n> ```\r\n> [0, 0, 0, 0]\r\n> [4, 5, 6, 7]\r\n> [4, 5, 6, 0]\r\n> ```\r\n\r\n#### Notes\r\n\r\n_Only the SIMD operations are valid on SIMD vectors - **this must be validated at contract creation time.**_\r\n\r\n _All SIMD operands must have the size, type and number of lanes specified by the operator - **this must be validated at contract creation time.**_\r\n\r\n### Subroutines\r\n\r\nFollowing [EIP #615](https://github.com/ethereum/EIPs/issues/615), a type-safe syntax for declaring subroutines taking vector arguments will be needed.\r\n\r\n* `BEGINSUBX n_args, arg_types... n_results, result_types...`\r\nmarks the **single** entry to a subroutine.  The bytecode for a subroutine ends at the next `BEGINSUB`, `BEGINSUBX` or `BEGINDATA` instruction or at the end of the bytecode.  `n_args` items of `arg_types` types are taken off of the stack at entry to, and `n_results` items of `results_types`types are placed on the stack at return from the subroutine. `n_args`, `n_results`, and the types are given as one immediate byte each.  For the purposes of specifying argument types, a type of _0x80_ - the encoding for a single lane, 32 bytes wide - is taken to be a 256-bit wide integer.\r\n\r\n#### Notes\r\n\r\n_The `arg_types` and `result_types` are given in the same encoding as the second byte of the SIMD opcodes, and must match the values on the stack - **this must be validated at contract creation time.**_\r\n\r\n## RATIONALE\r\n\r\nCurrently, the lowest common denominator for SIMD hardware (e.g. Intel SSE2 and ARM Neon) is 16-byte registers supporting integer lanes of 1, 2, 4, and 8 bytes, and floating point lanes of 4 and 8 bytes.  More recent SIMD hardware (e.g. Intel AVX) supports 32-byte registers, and EVM stack items are also 32 bytes wide.  The limits above derive from these numbers, assuring that EVM code is within the bounds of available hardware - and the reserved bits provide room for growth. \r\n\r\nFor most modern languages (including Rust, Python, Go, Java, and C++) compilers can do a good job of generating SIMD code for parallelizable loops, and/or there are intrinsics or libraries available for explicit access to SIMD hardware.  So a portable software implementation will likely provide good use of the hardware on most platforms, and intrinsics or libraries can be used as available and needed.  Thus we can expect these operations to take about the same (or for 256-bit vectors on 128-bit hardware up to twice) the time to execute regardless of element size or number of elements.\r\n\r\n### Gas\r\n\r\nOne motivation for these operations, besides taking full advantage of the hardware, is assigning lower gas costs for operations on smaller scalars.\r\n\r\n[Measurements of three of the major clients](https://github.com/ethereum/cpp-ethereum/issues/4073) shed some light on appropriate gas costs. For the C++ interpreter\r\n* a no-op `JUMDEST` costs 1 gas and takes about 20 cycles\r\n* an `ADD` or `SUB` costs 3 gas and can take over 140 cycles\r\n* a `MUL` or `DIV` costs 5 gas and can take from over 220 to over 640 cycles.\r\n\r\nSo `JUMPDEST` is overpriced, `DIV` is underpriced, `ADD`, `SUB`and `MUL` are about right. and taking a unit of gas as worth about 40 cycles of computation in the C++ interpreter is reasonable.\r\n\r\nSome relevant generalities on computation costs...\r\n* For arithmetic on quantities up to 64 bits CPU cores can do the job in 1 or 2 cycles or less, (except for division), plus a few cycles to marshal data between stack memory and the ALU if that hasn already happened. So they barely cost enough to charge any gas beyond the overhead charged to `JUMPDEST`.  The best we can do is charge 1 gas until a particle scheme or a general gas repricing lets us value these operations (and `JUMPDEST`) more accurately.\r\n* For SIMD units 1 or 2 cycles per vector operation are needed, but with a few low-level operations sometimes needed for one opcode, and up to 10-30 cycles to marshal data between stack memory and the ALU and SIMD units. And most units can only operate on 128 bits at once.\r\n\r\nSo measurement will tell, but to a first approximation, on the C++ interpreter:\r\n* operations on up to 64 bits should take about 20-30 cycles and cost 1 gas\r\n* operations on up to 128 bits should take about 30-80 cycles and cost 2 gas\r\n* operations on up to 256 bits should take about 40-140 cycles and cost 3 gas.\r\n\r\nThere are some exceptions to these estimates.\r\n\r\n* `XDIV`\r\n`XMOD`\r\nSIMD units often have no or only partial support for integer division, so these will usually need to be done with a sequence of scalar operations.  Even on CPUs division is expensive, so a price of at least 3 units of gas per element of the operand vectors will probably be needed.\r\n\r\n* `XSLOAD`\r\n`XSSTORE`\r\nThese are no more difficult than`SLOAD` and `SSTORE` - and no less - so `XSLOAD` is assigned the same 200 gas as `SLOAD`, and `XSLOAD` the same gas cost function as `SSTORE`.\r\n\r\n*  `XSWIZZLE`\r\n`XSHUFFLE`\r\nThese can usually be helped by SIMD hardware, but not completely, and not in all cases, so a full or partial sequence of scalar operations will often be needed.  But the individual operations per element are not that expensive, so a price of 2 units of gas per element of the mask vector seems fair.\r\n\r\n### High Level Languages\r\n\r\nThis new facility will be of limited use if not exposed to programmers in higher-level languages than EVM code.  To demonstrate at least one workable approach, here is a possible extension to Solidity.\r\n\r\nA SIMD vector type could simply require an explicit annotation to array declarations, which limits arrays to the element types and number of elements supported by the SIMD facility, so that\r\n```\r\nuint64_t[4] simd example; // would be OK\r\nuint32_t[9] simd example; // would not be OK\r\n```\r\nThe arithmetic, logic, and comparison SIMD operations of the EVM would be mirrored by corresponding Solidity operations that operate element-wise on pairs of simd arrays.\r\nFor example, given\r\n```\r\nuint8_t[4] simd a = [1, 2, 3];\r\nuint8_t[4] simd b = [5, 6, 7];\r\n```\r\nthis statement\r\n```\r\nuint8_t[4]  simd c = a + b;\r\n```\r\nis evaluated as\r\n```\r\nc = [a[0] + b[0], a[1] + b[1],  a[2] + b[2]]\r\n```\r\nand `c` becomes\r\n```\r\n[6, 8, 10]\r\n```\r\nComparison operations produce arrays of `true=1` and `false=0` values.  So\r\n```\r\nuint8_t[3] simd d = a < b;\r\n```\r\nis evaluated as\r\n```\r\nd = [a[0] < b[0], a[1] < b[1],  a[2] < b[2]] \r\n```\r\nand `d` becomes\r\n```\r\n[1, 1, 1]\r\n```\r\nAnd of course other operations would need to be defined, like element access.  For SIMD operations without corresponding language operators, named functions would be needed.  E,g `simd.swizzle(), and simd.shuffle()`.\r\n\r\nAs an added bonus, `uint` variables of sizes <= 64 bits can be compiled to single-element vectors, which an implementation can map to native scalars.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/616/reactions",
    "total_count": 9,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 3,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/616/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309951615",
    "html_url": "https://github.com/ethereum/EIPs/issues/616#issuecomment-309951615",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/616",
    "id": 309951615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTk1MTYxNQ==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-21T03:19:14Z",
    "updated_at": "2017-06-21T03:30:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry for hijacking this EIP, but any plan to include this in the \"near\" future? This would definitely allow more computational complexity in contracts and I must admit I am really excited for this feature.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309951615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309960204",
    "html_url": "https://github.com/ethereum/EIPs/issues/616#issuecomment-309960204",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/616",
    "id": 309960204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTk2MDIwNA==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-21T04:32:56Z",
    "updated_at": "2017-06-21T04:32:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not hijacking at all.  It won't happen before Serenity, however \"near\" that is.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309960204/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314083481",
    "html_url": "https://github.com/ethereum/EIPs/issues/616#issuecomment-314083481",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/616",
    "id": 314083481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDA4MzQ4MQ==",
    "user": {
      "login": "gumb0",
      "id": 1863135,
      "node_id": "MDQ6VXNlcjE4NjMxMzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1863135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gumb0",
      "html_url": "https://github.com/gumb0",
      "followers_url": "https://api.github.com/users/gumb0/followers",
      "following_url": "https://api.github.com/users/gumb0/following{/other_user}",
      "gists_url": "https://api.github.com/users/gumb0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gumb0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gumb0/subscriptions",
      "organizations_url": "https://api.github.com/users/gumb0/orgs",
      "repos_url": "https://api.github.com/users/gumb0/repos",
      "events_url": "https://api.github.com/users/gumb0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gumb0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-10T11:51:34Z",
    "updated_at": "2017-07-10T11:51:34Z",
    "author_association": "MEMBER",
    "body": "> `XGET type, get_type`\r\n\r\nSo XGET gets 2 types as input, but actually there are three vectors to consider in its implementation - source vector, index vector and result vector. The specification should either clarify what's the type of result vector or maybe have 3 distinct types as input for the most general solution.\r\n\r\n> `XPUT type, put_type`\r\n\r\nFor XPUT there are really 4 vectors - source, replacement, replacement indices, result. Also we need to specify whether the type of replacement vector is the same as source and what is the type of result",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314083481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314139850",
    "html_url": "https://github.com/ethereum/EIPs/issues/616#issuecomment-314139850",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/616",
    "id": 314139850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDEzOTg1MA==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-10T15:22:24Z",
    "updated_at": "2017-07-10T15:22:24Z",
    "author_association": "CONTRIBUTOR",
    "body": " XGET takes only 2 vectors - it's like the get vector sucks data out of the source vector and is modified in the process.  The get vector can have a different type than the source vector. \r\n\r\nXPUT takes 3 vectors, replacements, put indexes, and source.  The source is misnamed, it's really the destination.  I should be more clear on that, and on the replacements vector having the same type as the destination.  It could have a different type if we want the generality, but that I think that would quadruple the size of the implementation.\r\n\r\n(I need a more clear scheme for describing the parameters and results throughout.) ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314139850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314142062",
    "html_url": "https://github.com/ethereum/EIPs/issues/616#issuecomment-314142062",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/616",
    "id": 314142062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDE0MjA2Mg==",
    "user": {
      "login": "gumb0",
      "id": 1863135,
      "node_id": "MDQ6VXNlcjE4NjMxMzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1863135?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gumb0",
      "html_url": "https://github.com/gumb0",
      "followers_url": "https://api.github.com/users/gumb0/followers",
      "following_url": "https://api.github.com/users/gumb0/following{/other_user}",
      "gists_url": "https://api.github.com/users/gumb0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gumb0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gumb0/subscriptions",
      "organizations_url": "https://api.github.com/users/gumb0/orgs",
      "repos_url": "https://api.github.com/users/gumb0/repos",
      "events_url": "https://api.github.com/users/gumb0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gumb0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-10T15:29:24Z",
    "updated_at": "2017-07-10T15:29:24Z",
    "author_association": "MEMBER",
    "body": "I see now, XGET replaces the indices in the get vector with the values...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314142062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/495398916",
    "html_url": "https://github.com/ethereum/EIPs/issues/616#issuecomment-495398916",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/616",
    "id": 495398916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTM5ODkxNg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-23T21:54:07Z",
    "updated_at": "2019-05-23T21:54:07Z",
    "author_association": "MEMBER",
    "body": "@gcolvin this EIP doesn't have a copyright statement. Can you please add one? EIP-1 suggests CC0 - see the `eip-x.md` template.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/495398916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003685292",
    "html_url": "https://github.com/ethereum/EIPs/issues/616#issuecomment-1003685292",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/616",
    "id": 1003685292,
    "node_id": "IC_kwDOAq426M470wWs",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T09:11:00Z",
    "updated_at": "2022-01-02T09:11:00Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003685292/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013838138",
    "html_url": "https://github.com/ethereum/EIPs/issues/616#issuecomment-1013838138",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/616",
    "id": 1013838138,
    "node_id": "IC_kwDOAq426M48bfE6",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-16T09:11:15Z",
    "updated_at": "2022-01-16T09:11:15Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013838138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
