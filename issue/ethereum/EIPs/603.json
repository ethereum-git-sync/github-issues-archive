{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/603/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/603/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/603/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/603",
  "id": 221846986,
  "node_id": "MDU6SXNzdWUyMjE4NDY5ODY=",
  "number": 603,
  "title": "Add ECADD and ECMUL precompiles for secp256k1",
  "user": {
    "login": "mattdf",
    "id": 11067114,
    "node_id": "MDQ6VXNlcjExMDY3MTE0",
    "avatar_url": "https://avatars.githubusercontent.com/u/11067114?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattdf",
    "html_url": "https://github.com/mattdf",
    "followers_url": "https://api.github.com/users/mattdf/followers",
    "following_url": "https://api.github.com/users/mattdf/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattdf/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattdf/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattdf/subscriptions",
    "organizations_url": "https://api.github.com/users/mattdf/orgs",
    "repos_url": "https://api.github.com/users/mattdf/repos",
    "events_url": "https://api.github.com/users/mattdf/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattdf/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2017-04-14T16:56:55Z",
  "updated_at": "2022-09-28T09:51:05Z",
  "closed_at": "2022-05-03T18:07:37Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Summary\r\nAdd ECADD and ECMUL precompiles for secp256k1\r\n\r\n# Motivation\r\nCurrently the accepted EIP for metropolis only supports addition and multiplication precompiles for alt_bn128. Being a pairings curve with 2 subgroups, the implementation of many smart contracts prototypes (the ones that use solidity secp lib) that assumed secp256k1 ops would be added do not work, and there remains a question whether or not trivial rewrites of those contracts to use the ADD/MUL of alt_bn128 would be safe if DDH isn't hard on that curve. \"Safe\" use of secp256k1 doesn't have surprises, and is much easier to implement / more performant for contracts that don't require pairings ops.\r\n\r\nFurthermore, the community and ecosystem has many libraries and tooling that support reading, verifying and creating secp256k1 signatures, but the same cannot be said for alt_bn128. There is no alt_bn128-js, no user-friendly tools to create those signatures, etc. \r\n\r\nThere are already existing contracts (such as ring signature contracts) that could immediately benefit from the secp256k1 precompiles being added, by just swapping the solidity library with the precompiles - and would then be performant enough to actually execute within a single block.\r\n\r\nOne of the largest benefits is also the ability to manipulate the curve points of default ethereum signatures/addresses - which is again not possible with alt_bn128 since it's a different curve.\r\n\r\n# Specification\r\n\r\nAdd precompiled contracts for point addition (ECADD) and scalar multiplication (ECMUL) on the elliptic curve \"secp256k1\".\r\n\r\nAddress of ECADD: 0x8\r\nAddress for ECMUL: 0x9\r\n\r\nThe curve is the same as the one used for ethereum signatures, hence all clients already support it by default. Addition of the precompile is trivial.\r\n\r\n# Encoding\r\n\r\nField elements are encoded as 32 byte big-endian numbers. Curve points are encoded as two field elements (x, y), where the point at infinity is encoded as (0, 0).\r\n\r\nFor both precompiled contracts, if the input is shorter than expected, it is padded with zeros at the end.\r\n\r\nThe length of the returned data is always as specified (i.e. it is not \"unpadded\").\r\n\r\n# Exact semantics\r\n\r\nInvalid input: For both contracts, if any input point does not lie on the curve or any of the field elements (point coordinates or scalar) is equal or larger than the field modulus p, the contract fails.\r\n\r\nECADD: Input: two curve points (x, y). Fail on invalid input. Otherwise, return the curve point x + y where + is point addition on the elliptic curve secp256k1 specified above.\r\n\r\nECMUL: Input: curve point and scalar (x, s). Fail on invalid input. Otherwise, return the cureve point x * s, where * is the scalar multiplication on the elliptic curve secp256k1 specified above.\r\n\r\n# Gas costs\r\n\r\nTo be determined.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/603/reactions",
    "total_count": 34,
    "+1": 15,
    "-1": 0,
    "laugh": 0,
    "hooray": 4,
    "confused": 0,
    "heart": 15,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/603/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/331474338",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-331474338",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 331474338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQ3NDMzOA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-22T15:09:35Z",
    "updated_at": "2017-09-22T15:09:35Z",
    "author_association": "MEMBER",
    "body": "It was too late to bring this up for the BN curve precompiles (https://github.com/ethereum/EIPs/pull/213#issuecomment-328116442), but I think it would still make sense for this PR.\r\n\r\nThe proposal is to have a single precompile which accepts ABI encoded data:\r\n- `ecadd(bytes32, bytes32) -> bytes32`\r\n- `ecmul(bytes32, uint256) -> bytes32`\r\n\r\nBenefit:\r\n- no special bindings are needed in most programming languages, a simple interface definition can be used (in Solidity it would be usable as `ECPrecompile(0x8).ecmul(a, b)`)\r\n- when we get to the point (i.e. eWASM) to implement precompiles as actual code, there wouldn't be a lot of code duplication since shared pieces of code wouldn't need to be scattered in two accounts (0x8, 0x9)\r\n\r\nDownside:\r\n- incompatible API with BN-curve precompiles\r\n- potentially can be considered more complex (since there is a function selector), but such complexity is already proposed in the blockhash contract and the blake2 precompile\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/331474338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/338836938",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-338836938",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 338836938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODgzNjkzOA==",
    "user": {
      "login": "bbuenz",
      "id": 1804397,
      "node_id": "MDQ6VXNlcjE4MDQzOTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1804397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbuenz",
      "html_url": "https://github.com/bbuenz",
      "followers_url": "https://api.github.com/users/bbuenz/followers",
      "following_url": "https://api.github.com/users/bbuenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbuenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbuenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbuenz/subscriptions",
      "organizations_url": "https://api.github.com/users/bbuenz/orgs",
      "repos_url": "https://api.github.com/users/bbuenz/repos",
      "events_url": "https://api.github.com/users/bbuenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbuenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-24T00:42:45Z",
    "updated_at": "2017-10-24T00:42:45Z",
    "author_association": "NONE",
    "body": "If this is added we should use the compressed form for ECPoints, i.e. just x and 1 bit for the sign. y can be inferred from these information (by computing the square root). Space is more important than computation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/338836938/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/367479104",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-367479104",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 367479104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzQ3OTEwNA==",
    "user": {
      "login": "shamatar",
      "id": 6467575,
      "node_id": "MDQ6VXNlcjY0Njc1NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shamatar",
      "html_url": "https://github.com/shamatar",
      "followers_url": "https://api.github.com/users/shamatar/followers",
      "following_url": "https://api.github.com/users/shamatar/following{/other_user}",
      "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
      "organizations_url": "https://api.github.com/users/shamatar/orgs",
      "repos_url": "https://api.github.com/users/shamatar/repos",
      "events_url": "https://api.github.com/users/shamatar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shamatar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-21T21:30:03Z",
    "updated_at": "2018-02-21T21:30:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mattdf \r\n\r\nThanks for bringing this. Secp256k1 is heavily optimized and can potentially have much more much more affordable scalar multiplication and point addition prices. Also use of the compatible curve will allow users of various hardware wallets to use it. We can finally see confidential transactions and ring signatures on chain.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/367479104/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389809479",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-389809479",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 389809479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTgwOTQ3OQ==",
    "user": {
      "login": "darioAnongba",
      "id": 11042697,
      "node_id": "MDQ6VXNlcjExMDQyNjk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/11042697?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darioAnongba",
      "html_url": "https://github.com/darioAnongba",
      "followers_url": "https://api.github.com/users/darioAnongba/followers",
      "following_url": "https://api.github.com/users/darioAnongba/following{/other_user}",
      "gists_url": "https://api.github.com/users/darioAnongba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darioAnongba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darioAnongba/subscriptions",
      "organizations_url": "https://api.github.com/users/darioAnongba/orgs",
      "repos_url": "https://api.github.com/users/darioAnongba/repos",
      "events_url": "https://api.github.com/users/darioAnongba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darioAnongba/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-17T09:44:53Z",
    "updated_at": "2018-05-17T09:44:53Z",
    "author_association": "NONE",
    "body": "I'm currently facing the exact same issues that @mattdf and @shamatar signaled.\r\n\r\nI am creating a token with Confidential transactions and I'm using alt_bn_128 but I have problems with libraries as there is no JS library for alt_bn_128. I am struggling with the web app and mobile app implementation. The solution is trying to use WebAssembly or other hacks with the Rust and C++ libraries but I didn't manage to make it work.\r\n\r\nMost libraries like [elliptic](https://github.com/indutny/elliptic) support secp256k1.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389809479/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389829673",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-389829673",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 389829673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTgyOTY3Mw==",
    "user": {
      "login": "shamatar",
      "id": 6467575,
      "node_id": "MDQ6VXNlcjY0Njc1NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shamatar",
      "html_url": "https://github.com/shamatar",
      "followers_url": "https://api.github.com/users/shamatar/followers",
      "following_url": "https://api.github.com/users/shamatar/following{/other_user}",
      "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions",
      "organizations_url": "https://api.github.com/users/shamatar/orgs",
      "repos_url": "https://api.github.com/users/shamatar/repos",
      "events_url": "https://api.github.com/users/shamatar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shamatar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-17T11:06:47Z",
    "updated_at": "2018-05-17T11:06:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello @darioAnongba \r\n\r\nI have a confidential transactions service ready, but to have an appropriate user experience I’d like to have at least 96 bits of range proof fitting into transaction. To have a reasonable gas cost it’s necessary to reduce a cost of ADD and MUL operations 20-fold. Latest optimizations from 1.8.x Geth version achieve even better performance improvement of precompile, so I was hoping for a cost reduction in the next fork. Should definitely file a EIP, thank you @mattdf   \r\n\r\nSincerely, Alex",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389829673/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/434806330",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-434806330",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 434806330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDgwNjMzMA==",
    "user": {
      "login": "debasish-raychawdhuri",
      "id": 6039343,
      "node_id": "MDQ6VXNlcjYwMzkzNDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6039343?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/debasish-raychawdhuri",
      "html_url": "https://github.com/debasish-raychawdhuri",
      "followers_url": "https://api.github.com/users/debasish-raychawdhuri/followers",
      "following_url": "https://api.github.com/users/debasish-raychawdhuri/following{/other_user}",
      "gists_url": "https://api.github.com/users/debasish-raychawdhuri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/debasish-raychawdhuri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/debasish-raychawdhuri/subscriptions",
      "organizations_url": "https://api.github.com/users/debasish-raychawdhuri/orgs",
      "repos_url": "https://api.github.com/users/debasish-raychawdhuri/repos",
      "events_url": "https://api.github.com/users/debasish-raychawdhuri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/debasish-raychawdhuri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T18:54:48Z",
    "updated_at": "2018-10-31T18:54:48Z",
    "author_association": "NONE",
    "body": "Unique ring signatures (as described in Cryptonote) cannot be used with a curve where DDH is easy. I am trying to implement a unique ring signature for my contracts, it would most certainly be nice to have it on secp256k1. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/434806330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/434831245",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-434831245",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 434831245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDgzMTI0NQ==",
    "user": {
      "login": "bbuenz",
      "id": 1804397,
      "node_id": "MDQ6VXNlcjE4MDQzOTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1804397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbuenz",
      "html_url": "https://github.com/bbuenz",
      "followers_url": "https://api.github.com/users/bbuenz/followers",
      "following_url": "https://api.github.com/users/bbuenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbuenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbuenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbuenz/subscriptions",
      "organizations_url": "https://api.github.com/users/bbuenz/orgs",
      "repos_url": "https://api.github.com/users/bbuenz/repos",
      "events_url": "https://api.github.com/users/bbuenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbuenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T20:12:54Z",
    "updated_at": "2018-10-31T20:12:54Z",
    "author_association": "NONE",
    "body": "The ddh assumption is believed to hold in both subgroups of the BN curve. It’s called the xddh assumption.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/434831245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/434949044",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-434949044",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 434949044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDk0OTA0NA==",
    "user": {
      "login": "debasish-raychawdhuri",
      "id": 6039343,
      "node_id": "MDQ6VXNlcjYwMzkzNDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6039343?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/debasish-raychawdhuri",
      "html_url": "https://github.com/debasish-raychawdhuri",
      "followers_url": "https://api.github.com/users/debasish-raychawdhuri/followers",
      "following_url": "https://api.github.com/users/debasish-raychawdhuri/following{/other_user}",
      "gists_url": "https://api.github.com/users/debasish-raychawdhuri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/debasish-raychawdhuri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/debasish-raychawdhuri/subscriptions",
      "organizations_url": "https://api.github.com/users/debasish-raychawdhuri/orgs",
      "repos_url": "https://api.github.com/users/debasish-raychawdhuri/repos",
      "events_url": "https://api.github.com/users/debasish-raychawdhuri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/debasish-raychawdhuri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T06:51:23Z",
    "updated_at": "2018-11-01T06:51:23Z",
    "author_association": "NONE",
    "body": "DDH does not hold in BN curve as the equality of the pairing function will answer the DDH question trivially.  xDDH is not the same thing (with x at least 3). To the best of my knowledge, there is no construction for unique ring signature available that would work without the basic DDH assumption. Specifically, the unique ring signature allows and adhoc ring signature that guarantees that the same private key cannot be used to create two different signatures for the same tag (hence the unique part). The pairing function will trivially give up the identity of the signer. Even if there is one, it would probably way more multiplications than the one with that uses DDH. All of that extra processing just to avoid having the ECADD and ECMUL operations available.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/434949044/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/434974764",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-434974764",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 434974764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDk3NDc2NA==",
    "user": {
      "login": "bbuenz",
      "id": 1804397,
      "node_id": "MDQ6VXNlcjE4MDQzOTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1804397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbuenz",
      "html_url": "https://github.com/bbuenz",
      "followers_url": "https://api.github.com/users/bbuenz/followers",
      "following_url": "https://api.github.com/users/bbuenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbuenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbuenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbuenz/subscriptions",
      "organizations_url": "https://api.github.com/users/bbuenz/orgs",
      "repos_url": "https://api.github.com/users/bbuenz/repos",
      "events_url": "https://api.github.com/users/bbuenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbuenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-01T08:52:42Z",
    "updated_at": "2018-11-01T08:52:42Z",
    "author_association": "NONE",
    "body": "The DDH assumption may hold in G_1 even though there is a pairing: See page 32 (http://www.ecrypt.eu.org/ecrypt2/documents/D.MAYA.6.pdf).\r\nAlso there are ring signatures from many assumptions (https://www.shoup.net/papers/subring.pdf). I am all in favor of adding support for secp256k1 but you can still build ring signature schemes using the BN curve.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/434974764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/440095368",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-440095368",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 440095368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDA5NTM2OA==",
    "user": {
      "login": "npip99",
      "id": 8939474,
      "node_id": "MDQ6VXNlcjg5Mzk0NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8939474?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/npip99",
      "html_url": "https://github.com/npip99",
      "followers_url": "https://api.github.com/users/npip99/followers",
      "following_url": "https://api.github.com/users/npip99/following{/other_user}",
      "gists_url": "https://api.github.com/users/npip99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/npip99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/npip99/subscriptions",
      "organizations_url": "https://api.github.com/users/npip99/orgs",
      "repos_url": "https://api.github.com/users/npip99/repos",
      "events_url": "https://api.github.com/users/npip99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/npip99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T00:48:13Z",
    "updated_at": "2018-12-05T00:29:56Z",
    "author_association": "NONE",
    "body": "This should probably be closed; there is a misunderstanding here. Embedding degree is 12 on alt_bn128, which remains safe against DDH assumption on G_1, since the only known attack on small embedding degrees is the MOV attack on discrete logarithms (which would only work with embedding degree < 4). To quote,\r\n\r\n> If the group G is equipped with a pairing e : G×G → G_t, then applying e componentwise defines a pairing on G = G^n. However, such a “symmetric” pairing (which only exists on supersingular\r\n> elliptic curves) can be used to solve DDH in G, so in this case our DDH-based construction is\r\n> not secure. To get around this problem we use the fact that on ordinary elliptic curves there\r\n> are two distinguished subgroups, denoted G_1 and G_2, in which DDH is believed to be infeasible\r\n> for sufficiently large group orders. We can thus apply our construction twice to produce groups G = G^n_1, H = G^n_2, Gt = G^m_t (for some m), and an “asymmetric” pairing e : G × H → G_t. If the DDH assumption holds in G1 and G2, then the subgroup decision assumption holds in G and H.\r\n\r\nWhich gives us the final conclusion:\r\n\r\n> If E is ordinary (i.e., #E(Fq) != q + 1), then there is no known efficient algorithm for solving\r\n> the DDH problem in either G1 or G2. In particular, the Weil and Tate pairings are trivial when\r\n> restricted to either G1 or G2 [16, Lemma IX.16], so we cannot use the pairing to solve DDH in either\r\n> group.\r\n\r\nWhich was taken from page 25 of [this paper](http://theory.stanford.edu/~dfreeman/papers/subgroups.pdf). Of course, the curve being used here is not supersingular, which would already negate security, so no pairing can be made with G1 = G2.\r\n\r\nCurrently, any secp256k1 application can be written in the EVM using the current ECADD/ECMUL. According to the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf) it is a Type 3 pairing, so [DDH is hard on G_2 too](https://crypto.stackexchange.com/questions/15928/in-bilinear-pairings-what-is-the-difference-between-type-2-and-type-3).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/440095368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/470095650",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-470095650",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 470095650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDA5NTY1MA==",
    "user": {
      "login": "recmo",
      "id": 4532328,
      "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/recmo",
      "html_url": "https://github.com/recmo",
      "followers_url": "https://api.github.com/users/recmo/followers",
      "following_url": "https://api.github.com/users/recmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
      "organizations_url": "https://api.github.com/users/recmo/orgs",
      "repos_url": "https://api.github.com/users/recmo/repos",
      "events_url": "https://api.github.com/users/recmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/recmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-06T12:51:38Z",
    "updated_at": "2019-03-06T12:51:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can this be closed in favour of https://github.com/ethereum/EIPs/pull/1829 ? I believe all that is proposed here is covered there.\r\n\r\nFurther, having `ECADD` and `ECMUL` primitives is inefficient for ECDSA signature verification, it's much faster to compute a linear combination. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/470095650/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/948872382",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-948872382",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 948872382,
    "node_id": "IC_kwDOAq426M44jqS-",
    "user": {
      "login": "Mikerah",
      "id": 4249799,
      "node_id": "MDQ6VXNlcjQyNDk3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4249799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mikerah",
      "html_url": "https://github.com/Mikerah",
      "followers_url": "https://api.github.com/users/Mikerah/followers",
      "following_url": "https://api.github.com/users/Mikerah/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mikerah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mikerah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mikerah/subscriptions",
      "organizations_url": "https://api.github.com/users/Mikerah/orgs",
      "repos_url": "https://api.github.com/users/Mikerah/repos",
      "events_url": "https://api.github.com/users/Mikerah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mikerah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-21T18:01:38Z",
    "updated_at": "2021-10-21T18:01:38Z",
    "author_association": "NONE",
    "body": "What is the status of this EIP?\r\n\r\nIs there a steward for it? If not, I wouldn't mind being the steward for making this EIP happen.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/948872382/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1102939907",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-1102939907",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 1102939907,
    "node_id": "IC_kwDOAq426M5BvYcD",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-04-19T18:07:23Z",
    "updated_at": "2022-04-19T18:07:23Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1102939907/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1116395355",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-1116395355",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 1116395355,
    "node_id": "IC_kwDOAq426M5Citdb",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-05-03T18:07:36Z",
    "updated_at": "2022-05-03T18:07:36Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1116395355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1260665028",
    "html_url": "https://github.com/ethereum/EIPs/issues/603#issuecomment-1260665028",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/603",
    "id": 1260665028,
    "node_id": "IC_kwDOAq426M5LJDjE",
    "user": {
      "login": "SwaroopReddyBasireddy",
      "id": 43106755,
      "node_id": "MDQ6VXNlcjQzMTA2NzU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/43106755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SwaroopReddyBasireddy",
      "html_url": "https://github.com/SwaroopReddyBasireddy",
      "followers_url": "https://api.github.com/users/SwaroopReddyBasireddy/followers",
      "following_url": "https://api.github.com/users/SwaroopReddyBasireddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/SwaroopReddyBasireddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SwaroopReddyBasireddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SwaroopReddyBasireddy/subscriptions",
      "organizations_url": "https://api.github.com/users/SwaroopReddyBasireddy/orgs",
      "repos_url": "https://api.github.com/users/SwaroopReddyBasireddy/repos",
      "events_url": "https://api.github.com/users/SwaroopReddyBasireddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SwaroopReddyBasireddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-09-28T09:51:05Z",
    "updated_at": "2022-09-28T09:51:05Z",
    "author_association": "NONE",
    "body": "Can anyone suggest solidity precompiles or any library which can be used for scalar multiplications on subgroup G2 of the BN254 elliptic curve?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1260665028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
