{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2125",
  "id": 457972090,
  "node_id": "MDU6SXNzdWU0NTc5NzIwOTA=",
  "number": 2125,
  "title": "EIP-2124: Fork identifier for chain compatibility checks",
  "user": {
    "login": "karalabe",
    "id": 129561,
    "node_id": "MDQ6VXNlcjEyOTU2MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/karalabe",
    "html_url": "https://github.com/karalabe",
    "followers_url": "https://api.github.com/users/karalabe/followers",
    "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
    "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
    "organizations_url": "https://api.github.com/users/karalabe/orgs",
    "repos_url": "https://api.github.com/users/karalabe/repos",
    "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/karalabe/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3539577331,
      "node_id": "LA_kwDOAq426M7S-anz",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/discussions-to",
      "name": "discussions-to",
      "color": "20DFB1",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": true,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2019-06-19T12:01:21Z",
  "updated_at": "2023-02-24T18:41:52Z",
  "closed_at": "2022-05-28T05:12:48Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Discussion thread for https://github.com/ethereum/EIPs/pull/2124.\r\n\r\n## Abstract\r\n\r\nThere are many public and private Ethereum networks, but the discovery protocol doesn't differentiate between them. The only way to check if a peer is good or bad (same chain or not), is to establish a TCP/IP connection, wrap it with RLPx cryptography, then execute an `eth` handshake. This is an extreme cost to bear if it turns out that the remote peer is on a different network and it's not even precise enough to differentiate Ethereum and Ethereum Classic. This cost is magnified for small networks, where a lot more trial and errors are needed to find good nodes.\r\n\r\nEven if the peer **is** on the same chain, during non-controversial consensus upgrades, not everybody updates their nodes in time (developer nodes, leftovers, etc). These stale nodes put a meaningless burden on the peer-to-peer network, since they just latch on to good nodes, but don't accept upgraded blocks. This causes valuable peer slots and bandwidth to be lost until the stale nodes finally update. This is a serious issue for test networks, where leftovers can linger for months.\r\n\r\nThis EIP proposes a new identity scheme to both precisely and concisely summarize the chain's current status (genesis and all applied forks). The conciseness is particularly important to make the identity useful across datagram protocols too. The EIP solves a number of issues:\r\n\r\n * If two nodes are on different networks, they should never even consider connecting.\r\n * If a hard fork passes, upgraded nodes should reject non-upgraded ones, but **NOT** before.\r\n * If two chains share the same genesis, but not forks (ETH / ETC), they should reject each other.\r\n\r\nThis EIP does not attempt to solve the clean separation of 3-way-forks! If at the same future block number, the network splits into three (non-fork, fork-A and fork-B), separating the forkers from each another will need case-by-case special handling. Not handling this keeps the proposal pragmatic, simple and also avoids making it too easy to fork off mainnet.\r\n\r\nTo keep the scope limited, this EIP only defines the identity scheme and validation rules. The same scheme and algorithm can be embedded into various networking protocols, allowing both the `eth/6x` handshake to be more precise (Ethereum vs. Ethereum Classic); as well as the discovery to be more useful (reject surely peers without ever connecting).",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2125/reactions",
    "total_count": 3,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 3,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/538700967",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-538700967",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 538700967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzODcwMDk2Nw==",
    "user": {
      "login": "ritzdorf",
      "id": 10403309,
      "node_id": "MDQ6VXNlcjEwNDAzMzA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10403309?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ritzdorf",
      "html_url": "https://github.com/ritzdorf",
      "followers_url": "https://api.github.com/users/ritzdorf/followers",
      "following_url": "https://api.github.com/users/ritzdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ritzdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ritzdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ritzdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/ritzdorf/orgs",
      "repos_url": "https://api.github.com/users/ritzdorf/repos",
      "events_url": "https://api.github.com/users/ritzdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ritzdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-06T00:37:05Z",
    "updated_at": "2019-10-06T00:37:05Z",
    "author_association": "NONE",
    "body": "Hi @karalabe ,\r\n\r\nvery interesting proposal. I had a look after it was mentioned in the allcoredevs call.\r\n\r\nI have a question:\r\nAssuming that a fork is happening at block 100, when is this fork considered for the FORK_HASH?\r\n- After the local block number is >= 100\r\nor\r\n- After the local block number is >= 99?\r\n\r\nI assume that you intended the first case. Then, it seems to me that the edge case of Istanbul-Ropsten case is not properly covered. At block B-1 the situation would be:\r\n\r\nUpdated nodes would have:\r\nPast Forks: A\r\nFuture Forks: B\r\n\r\nStale Nodes would have:\r\nFORK_HASH: A\r\nFORK_NEXT:\r\n\r\n- The mining power of the updated nodes is very weak, hence they stall at B-1.\r\n- The stale nodes proceed and hence reach B, B+1, B+2...\r\n- All the updated nodes will still connect to the stale nodes.\r\n\r\nI see two possible solutions X and Y:\r\n\r\n**X**: Considering the fork for the FORK_HASH on the block before.\r\nIn the Istanbul-Ropsten case this would mean at block B-1:\r\nUpdated nodes would have:\r\nPast Forks: A,B\r\nFuture Forks:\r\nand hence would no longer connect to stale nodes.\r\n\r\n**Y**: Instead of sending FORK_NEXT, the current block number (BLOCK_NUM) is sent. As FORK_NEXT is used to tell \"whether a remote node is out of sync or whether its software is stale.\", this seems easier to do with a block number. New decision tree:\r\n\r\nFORK_HASH matches local past forks:\r\n - No local future fork\r\n   - connect\r\n - Local future fork > remote BLOCK_NUM\r\n   - connect\r\n - Local future fork <= remote BLOCK_NUM\r\n   - don't connect (this is the improvement over your proposal, it detects remote stale nodes on a fork with mining power)\r\nFORK_HASH is subset of local post forks:\r\n  - remote BLOCK_NUM >= last local past fork\r\n   - don't connect\r\n  - remote BLOCK_NUM < last local past fork\r\n   - connect (here it potentially doesn't detect stale nodes on a fork with 0 mining power)\r\nFORK_HASH is a superset of local past forks:\r\n  - (local past forks + subset S of local future forks) matches FORK_HASH:\r\n    - Local future fork not in S > remote BLOCK_NUM:\r\n      - don't connect (Example: a freshly started ropsten node connecting to a stale ropsten node)\r\n    - else\r\n      - connect\r\n  - (local past forks + subset of local future forks) never matches FORK_HASH:\r\n    - don't connect\r\nElse: (e.g. different genesis)\r\n  - don't connect\r\n\r\n\r\n\r\nI can also transform it into a table if you prefer that. There are a few cases that are different.\r\n\r\nSee you in Osaka\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/538700967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/542188956",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-542188956",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 542188956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MjE4ODk1Ng==",
    "user": {
      "login": "ritzdorf",
      "id": 10403309,
      "node_id": "MDQ6VXNlcjEwNDAzMzA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10403309?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ritzdorf",
      "html_url": "https://github.com/ritzdorf",
      "followers_url": "https://api.github.com/users/ritzdorf/followers",
      "following_url": "https://api.github.com/users/ritzdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ritzdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ritzdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ritzdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/ritzdorf/orgs",
      "repos_url": "https://api.github.com/users/ritzdorf/repos",
      "events_url": "https://api.github.com/users/ritzdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ritzdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-15T12:34:40Z",
    "updated_at": "2019-10-15T12:34:40Z",
    "author_association": "NONE",
    "body": "Hi @karalabe,\r\n\r\nas discussed in Osaka BLOCK_NUM might not be ideal. So disregard my proposal from above.\r\n\r\n### Quick Question\r\n\r\nHence, I still have the following question:\r\nAssuming that a fork is happening at block 100, when is this fork considered for the FORK_HASH?\r\n\r\n-    After the local block number is >= 100\r\n    or\r\n-    After the local block number is >= 99?\r\n\r\nI assume that you intended the first case. Then, it seems to me that the edge case of Istanbul-Ropsten case is not properly covered. At block B-1 the situation would be:\r\n\r\nUpdated nodes would have:\r\nPast Forks: A\r\nFuture Forks: B\r\n\r\nStale Nodes would have:\r\nFORK_HASH: A\r\nFORK_NEXT:\r\n\r\n-    The mining power of the updated nodes is very weak, hence they stall at B-1.\r\n-    The stale nodes proceed and hence reach B, B+1, B+2...\r\n-    All the updated nodes will still connect to the stale nodes.\r\n\r\nOf course, as soon as the updated nodes find a single block (and manage to distribute this block), the issue is resolved. Is this sufficient from your point of view?\r\n\r\n\r\n\r\n### Comments on the Table\r\n\r\nI found the following entries missing inside the table, even though they are probably clear.\r\n\r\nPast forks \t|Future forks| \tRemote FORK_HASH| \tRemote FORK_NEXT| \tConnect| \tReason\r\n------------ | ------------- | ------------- | ------------- | ------------- | -------------\r\nA|       B,C1|    A+B|     C2|      Yes|     Local out of sync, differing future forks, but those are uncertain.\r\nA|       B,C|     A|       B|       Yes|     Possibly out of sync. Possibly stale.\r\nA|       B|       A+B|     C|       Yes| Local out of sync.\r\nA|       B1|      A+B2|       |     No|      Someone needs software update.\r\nA|       |        B|        |         No|      Different genesis blocks\r\n\r\n\r\nHere are the cases that are not clear to me, they are taken from your table:\r\n\r\nPast forks \t|Future forks| \tRemote FORK_HASH| \tRemote FORK_NEXT| \tConnect| \tReason\r\n------------ | ------------- | ------------- | ------------- | ------------- | -------------\r\nA|      |     A|       B|       Yes?|     What if B < local block number. Then, we know that one client is stale.\r\nA|       B1|    A|     B2|      Yes?|    What if B2 < local block number. Then, we know that one client is stale.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/542188956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543049010",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-543049010",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 543049010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MzA0OTAxMA==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-17T07:40:46Z",
    "updated_at": "2019-10-17T07:40:46Z",
    "author_association": "MEMBER",
    "body": "@ritzdorf This is a very nice corner case indeed, thank you!\r\n\r\nIn your expanded example with Ropsten Istanbul, getting stuck on `fork-1` block indeed is nasty and does have the side effect of not detecting the split until the forked chain passes that barrier too. Your solution of marking `fork-1` as \"already forked\" and including it in `FORK_HASH` would potentially solve it, but I find it a bit odd. It also doesn't address your second 2 valid questions.\r\n\r\nWrt the second two cases you brought up, I think both are valid corner cases. If we would have the first special case of your table handled correctly, that would also solve the Ropsten Istanbul splitting correctly, because non-updaters would have split off from not-yet-forked Istanbul nodes, even though the Istanbul ones would not detect the issue. This case however cannot be solved by the more complex FORK_HASH modification.\r\n\r\nPerhaps a better alternative solution would be to extend the validation code a bit. The fork ID fields would remain the same as is now, but the validator would also take into consideration the local chain head. Then:\r\n\r\n * Your extended issue would become equivalent to the first special case from the table. The non-forking nodes would detect that they are past the Istanbul FORK_NEXT, and thus reject Istanbul peers. It's a one way street (i.e. Istanbul peers wouldn't reject non-Istanbul ones), but this special case should exist for only a single-block window, so I think it's not **that**bad. At least as long as the non-forking chain also progresses (interesting issue for Clique, ha, need to consider this too).\r\n * The second special case is also covered by the local head comparison the same way.\r\n\r\nDoes this make sense to you? (still need to figure out Clique, might need that initial solution too after all)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543049010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543628556",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-543628556",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 543628556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MzYyODU1Ng==",
    "user": {
      "login": "ritzdorf",
      "id": 10403309,
      "node_id": "MDQ6VXNlcjEwNDAzMzA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10403309?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ritzdorf",
      "html_url": "https://github.com/ritzdorf",
      "followers_url": "https://api.github.com/users/ritzdorf/followers",
      "following_url": "https://api.github.com/users/ritzdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ritzdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ritzdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ritzdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/ritzdorf/orgs",
      "repos_url": "https://api.github.com/users/ritzdorf/repos",
      "events_url": "https://api.github.com/users/ritzdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ritzdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-18T09:27:52Z",
    "updated_at": "2019-10-18T09:27:52Z",
    "author_association": "NONE",
    "body": "Thanks for your feedback @karalabe.\r\n\r\n>  Your solution of marking fork-1 as \"already forked\" and including it in FORK_HASH would potentially solve it, but I find it a bit odd.\r\n\r\nI agree that it is odd. It was more like a brainstormed suggestion.\r\n\r\n> Does this make sense to you? (still need to figure out Clique, might need that initial solution too after all)\r\n\r\nYes. Thank you. That is roughly what I had in mind. Sorry for not writing it more clearly.\r\n\r\n> (still need to figure out Clique)\r\n\r\nWith Clique do you mean a set of non-forking nodes that are isolated from the non-forking miners? \r\n1. Wouldn't they eventually find the non-forking miners and thereby resolve this?\r\n2. As soon as the forking nodes pass the `fork` block they anyway wouldn't connect to the Clique any longer, so it is a case that only exists for a single-block window, right?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543628556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584394384",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-584394384",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 584394384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDM5NDM4NA==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-10T22:42:56Z",
    "updated_at": "2020-02-10T22:42:56Z",
    "author_association": "MEMBER",
    "body": "> taking the first 4 bytes of a Keccak256 hash (seems odd)\r\n\r\nCan you explain a bit more why this \"seems odd\"?\r\n\r\nTaking a slice of bytes from a cryptographic hash function is a safe and reasonable way to get well-distributed bytes on some domain.\r\n\r\nAgreed `CRC32` is fine for the task, but avoiding additional dependencies is nice.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584394384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584543252",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-584543252",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 584543252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDU0MzI1Mg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T09:26:04Z",
    "updated_at": "2020-02-11T09:26:04Z",
    "author_association": "MEMBER",
    "body": "This ship sailed long ago :)\r\n\r\nThat said, I wrote that it seems odd because we're discarding part of the checksum vs. crc32 would keep all the entropy.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584543252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/586022853",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-586022853",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 586022853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NjAyMjg1Mw==",
    "user": {
      "login": "djrtwo",
      "id": 1433595,
      "node_id": "MDQ6VXNlcjE0MzM1OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1433595?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrtwo",
      "html_url": "https://github.com/djrtwo",
      "followers_url": "https://api.github.com/users/djrtwo/followers",
      "following_url": "https://api.github.com/users/djrtwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrtwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrtwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrtwo/subscriptions",
      "organizations_url": "https://api.github.com/users/djrtwo/orgs",
      "repos_url": "https://api.github.com/users/djrtwo/repos",
      "events_url": "https://api.github.com/users/djrtwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrtwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-13T23:29:02Z",
    "updated_at": "2020-02-13T23:29:02Z",
    "author_association": "MEMBER",
    "body": "> This ship sailed long ago :)\r\n\r\nNo worries! Just chiming in while going over the specs ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/586022853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/813419827",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-813419827",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 813419827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzQxOTgyNw==",
    "user": {
      "login": "poojaranjan",
      "id": 29681685,
      "node_id": "MDQ6VXNlcjI5NjgxNjg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/29681685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/poojaranjan",
      "html_url": "https://github.com/poojaranjan",
      "followers_url": "https://api.github.com/users/poojaranjan/followers",
      "following_url": "https://api.github.com/users/poojaranjan/following{/other_user}",
      "gists_url": "https://api.github.com/users/poojaranjan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/poojaranjan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/poojaranjan/subscriptions",
      "organizations_url": "https://api.github.com/users/poojaranjan/orgs",
      "repos_url": "https://api.github.com/users/poojaranjan/repos",
      "events_url": "https://api.github.com/users/poojaranjan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/poojaranjan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-05T14:24:47Z",
    "updated_at": "2021-04-05T14:24:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Watch an overview of the 'fork identifier', its purpose, and usage for the Ethereum chain in syncing nodes by @fjl\r\nhttps://www.youtube.com/watch?v=2Yg-MX0ubJQ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/813419827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841468035",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-841468035",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 841468035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTQ2ODAzNQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-14T19:52:54Z",
    "updated_at": "2021-05-14T19:52:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "* Can this please be implemented in two or more competing implementations before this is published as final status?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841468035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841482172",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-841482172",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 841482172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTQ4MjE3Mg==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-14T20:24:02Z",
    "updated_at": "2021-05-14T20:24:02Z",
    "author_association": "MEMBER",
    "body": "It's implemented by all clients.\n\nOn Fri, May 14, 2021, 22:53 William Entriken ***@***.***>\nwrote:\n\n>\n>    - Can this please be implemented in two or more competing\n>    implementations before this is published as final status?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/2125#issuecomment-841468035>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAA7UGMMKJGCWPCMZMFEB6TTNV5STANCNFSM4HZI3O2Q>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841482172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841483462",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-841483462",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 841483462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTQ4MzQ2Mg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-14T20:26:54Z",
    "updated_at": "2021-05-14T20:27:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you. Can specific clients (at least some) please be noted in the EIP text?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841483462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841613981",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-841613981",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 841613981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTYxMzk4MQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-15T07:14:14Z",
    "updated_at": "2021-05-15T07:14:14Z",
    "author_association": "MEMBER",
    "body": "EIPs should not be linking out to client implementations.  See the template at https://raw.githubusercontent.com/ethereum/EIPs/master/eip-template.md and note that there is no longer an Implementations section, there is now only a reference implementation section which is intended to contain an inline implementation and it is optional.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841613981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841757958",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-841757958",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 841757958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTc1Nzk1OA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-16T02:57:27Z",
    "updated_at": "2021-05-16T02:57:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is okay that EIP reviews (which are unpaid, I'm assuming) do not accept a responsibility of verifying technical aspects of EIPs.\r\n\r\nBut if EIPs are to be anything other than a pastebin, then any interop specifications (i.e. all EIPs) should include multiple reference implementation. And they should be verified by the community (e.g. the Last Call process).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841757958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841778257",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-841778257",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 841778257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTc3ODI1Nw==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-16T06:59:19Z",
    "updated_at": "2021-05-16T06:59:19Z",
    "author_association": "MEMBER",
    "body": "Specifications almost never say how to implement something, only what to\nimplement. Reference code is a courtesy in the spec world, not a\nrequirement. Would you expect the yellow paper to include multiple\nimplementations of the entire Ethereum EVM?\n\nOn Sun, May 16, 2021, 05:57 William Entriken ***@***.***>\nwrote:\n\n> It is okay that EIP reviews (which are unpaid, I'm assuming) do not accept\n> a responsibility of verifying technical aspects of EIPs.\n>\n> But if EIPs are to be anything other than a pastebin, then any interop\n> specifications (i.e. all EIPs) should include multiple reference\n> implementation. And they should be verified by the community (e.g. the Last\n> Call process).\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/2125#issuecomment-841757958>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAA7UGJI4EWSYMKBMQZMI5TTN4YCJANCNFSM4HZI3O2Q>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841778257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140176257",
    "html_url": "https://github.com/ethereum/EIPs/issues/2125#issuecomment-1140176257",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2125",
    "id": 1140176257,
    "node_id": "IC_kwDOAq426M5D9bWB",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-28T05:12:48Z",
    "updated_at": "2022-05-28T05:12:48Z",
    "author_association": "MEMBER",
    "body": "Closing this for housekeeping purposes. Feel free to continue using this issue for discussion about EIP-2124.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140176257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
