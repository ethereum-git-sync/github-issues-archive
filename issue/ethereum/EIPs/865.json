{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/865/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/865/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/865/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/865",
  "id": 293602001,
  "node_id": "MDU6SXNzdWUyOTM2MDIwMDE=",
  "number": 865,
  "title": "ERC865: Pay transfers in tokens instead of gas, in one transaction",
  "user": {
    "login": "lgalabru",
    "id": 87777,
    "node_id": "MDQ6VXNlcjg3Nzc3",
    "avatar_url": "https://avatars.githubusercontent.com/u/87777?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lgalabru",
    "html_url": "https://github.com/lgalabru",
    "followers_url": "https://api.github.com/users/lgalabru/followers",
    "following_url": "https://api.github.com/users/lgalabru/following{/other_user}",
    "gists_url": "https://api.github.com/users/lgalabru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lgalabru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lgalabru/subscriptions",
    "organizations_url": "https://api.github.com/users/lgalabru/orgs",
    "repos_url": "https://api.github.com/users/lgalabru/repos",
    "events_url": "https://api.github.com/users/lgalabru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lgalabru/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 102,
  "created_at": "2018-02-01T16:45:33Z",
  "updated_at": "2024-01-01T20:47:27Z",
  "closed_at": "2022-05-28T05:18:38Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n\tEIP: <to be assigned>\r\n\tTitle: Token standard\r\n\tAuthor: Ludovic Galabru\r\n\tType: Informational\r\n\tCategory: ERC\r\n\tStatus: Draft\r\n\tCreated: 2018-01-30\r\n\tRequires: EIP20\r\n\r\n## Simple Summary\r\nAbility for token holders to pay transfer transactions in tokens instead of gas, in one transaction.\r\n\r\n## Abstract\r\nThe following describes one standard function a token contract can implement to allow a user to delegate transfer of tokens to a third party. The third party pays for the gas, and takes a fee in tokens.\r\n\r\n## Motivation\r\nWhen it comes to using tokens as utility tokens, we need to strive for a good UX. Introducing wallets and transactions to end users is a challenge, and having to explain that token holders needs ETH to send tokens is adding some friction to the process. The goal of this EIP is to abstract the gas for the end user, by introducing a fee paid in tokens. A third party can then bring the transaction on-chain, pay for the gas of that given transaction and get tokens from that user.\r\n\r\n## Specification\r\n- A: Sender of the payment\r\n- B: Recipient of the payment\r\n- D: Delegate, doing the transaction for A, and paying for the gas.\r\n- X: Amount of Token T sent from A to B\r\n- Y: Fee paid in Token T, from A to D for the transaction\r\n- T: Token to send\r\n- N: Nonce\r\n\r\n### Process\r\n\r\nThe user **A** gets a quote from the delegate **D** for the value of the fee **Y** for 1 transaction (depending on gas price + value of token in ETH).\r\n\r\nWith their private key, the user generates **{V,R,S}** for the **sha3** of the payload **P** {N,A,B,D,X,Y,T}.\r\n\r\nThe user sends **{V,R,S}** and **P** (unhashed, unsigned) to the delegate.\r\n\r\nThe delegate verifies that **Y** and **D** have not been altered. \r\n\r\nThe delegate proceeds to submit the transaction from his account **D**:\r\n\r\n    T.delegatedTransfer(N,A,B,X,Y,V,R,S)\r\n\r\nThe *delegatedTransfer* method reconstructs the sha3 **H** of the payload **P** (where **T** is the address of the current contract and **D** is the *msg.sender*).\r\n\r\nWe can then call *ecrecover(H, V, R, S)*, make sure that the result matches **A**, and if that’s the case, safely move **X** tokens from **A** to **B** and **Y** tokens from **A** to **D**.\r\n\r\nThe challenge mainly resides in imitating the *Non-standard Packed Mode* on the client side, and obtaining the exact same sha3 as the one generated on-chain.\r\n\r\n### Methods\r\n\r\n**delegatedTransfer**\r\n\r\n    function transferPreSigned(\r\n        bytes _signature,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool);\r\n\r\n\r\nIs called by the delegate, and performs the transfer.\r\n\r\n\r\n### Events\r\n\r\n**TransferPreSigned**\r\n\r\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\r\n\r\nIs triggered whenever delegatedTransfer is successfully called.\r\n\r\n## Implementation proposal\r\n\r\nAssuming a StandardToken and SafeMath available, one could come up with the following implementation.\r\n\r\n#### On-chain operation (solidity)\r\n\r\n```solidity\r\n    /**\r\n     * @notice Submit a presigned transfer\r\n     * @param _signature bytes The signature, issued by the owner.\r\n     * @param _to address The address which you want to transfer to.\r\n     * @param _value uint256 The amount of tokens to be transferred.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number. Should be unique, per user.\r\n     */\r\n    function transferPreSigned(\r\n        bytes _signature,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n\r\n        bytes32 hashedParams = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\r\n        address from = recover(hashedParams, _signature);\r\n        require(from != address(0));\r\n\r\n        bytes32 hashedTx = keccak256(from, hashedParams);\r\n        require(hashedTxs[hashedTx] == false);\r\n\r\n        balances[from] = balances[from].sub(_value).sub(_fee);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n        hashedTxs[hashedTx] = true;\r\n\r\n        Transfer(from, _to, _value);\r\n        Transfer(from, msg.sender, _fee);\r\n        TransferPreSigned(from, _to, msg.sender, _value, _fee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Hash (keccak256) of the payload used by transferPreSigned\r\n     * @param _token address The address of the token.\r\n     * @param _to address The address which you want to transfer to.\r\n     * @param _value uint256 The amount of tokens to be transferred.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function transferPreSignedHashing(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        /* \"48664c16\": transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\r\n        return keccak256(bytes4(0x48664c16), _token, _to, _value, _fee, _nonce);\r\n    }\r\n\r\n```\r\n\r\n#### Off-chain usage (js)\r\n\r\n```javascript\r\n\r\n    describe(`if Charlie performs a transaction T, transfering 100 tokens from Alice to Bob (fee=10)`, () => {\r\n      beforeEach(async () => {\r\n        const nonce = 32;\r\n        const from = alice;\r\n        const to = bob;\r\n        const delegate = charlie;\r\n        const fee = 10;\r\n        const amount = 100;\r\n        const alicePrivateKey = Buffer.from('c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3', 'hex');\r\n\r\n        const components = [\r\n          Buffer.from('48664c16', 'hex'),\r\n          formattedAddress(this.token.address),\r\n          formattedAddress(to),\r\n          formattedInt(amount),\r\n          formattedInt(fee),\r\n          formattedInt(nonce)\r\n        ];\r\n        const vrs = ethUtil.ecsign(hashedTightPacked(components), alicePrivateKey);\r\n        const sig = ethUtil.toRpcSig(vrs.v, vrs.r, vrs.s);\r\n        await this.token.transferPreSigned(\r\n          sig,\r\n          to,\r\n          amount,\r\n          fee,\r\n          nonce\r\n          , {from: charlie}).should.be.fulfilled;\r\n      });\r\n\r\n```\r\n\r\n\r\n## Full implementation available\r\nOpenZeppelin/zeppelin-solidity#741\r\n\r\n## Additional documentation\r\n[Transfer Ethereum tokens without Ether — An ERC20 Improvement to Seriously Consider](https://medium.com/@adilharis/transfer-ethereum-tokens-without-ether-an-erc20-improvement-to-seriously-consider-90bebd447bb)\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/865/reactions",
    "total_count": 129,
    "+1": 101,
    "-1": 3,
    "laugh": 0,
    "hooray": 5,
    "confused": 3,
    "heart": 14,
    "rocket": 0,
    "eyes": 3
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/865/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362545444",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362545444",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362545444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjU0NTQ0NA==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T10:16:20Z",
    "updated_at": "2018-02-02T10:17:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm working on something simmilar for about a week now, but I've come with a different implementation.\r\nI've realized this idea while writing this comment https://ethresear.ch/t/pos-and-economic-abstraction-stakers-would-be-able-to-accept-gas-price-in-any-erc20-token/721/7?u=3esmit as I was told it was probably not going to happen I came up with this solution https://github.com/status-im/ideas/issues/73\r\nA first version was deployed here: https://ropsten.etherscan.io/address/0x9787564e1bd7da95ee9dcdf17cc57a7225084632\r\nAnd the latest version is available here https://github.com/status-im/contracts/blob/presigned-token/contracts/token/MiniMeTokenPreSigned.sol\r\nAn example of gas paid in Token transfer: https://ropsten.etherscan.io/tx/0x52a886755876e7f88fed90cae3f58ee8e00cdcaa2dac24382202d0e37ed14059",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362545444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362605742",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362605742",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362605742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjYwNTc0Mg==",
    "user": {
      "login": "ptrwtts",
      "id": 497330,
      "node_id": "MDQ6VXNlcjQ5NzMzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/497330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptrwtts",
      "html_url": "https://github.com/ptrwtts",
      "followers_url": "https://api.github.com/users/ptrwtts/followers",
      "following_url": "https://api.github.com/users/ptrwtts/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptrwtts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptrwtts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptrwtts/subscriptions",
      "organizations_url": "https://api.github.com/users/ptrwtts/orgs",
      "repos_url": "https://api.github.com/users/ptrwtts/repos",
      "events_url": "https://api.github.com/users/ptrwtts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptrwtts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T14:46:35Z",
    "updated_at": "2018-02-02T14:46:35Z",
    "author_association": "NONE",
    "body": "Nice work @3esmit. Do you have any comments on the pros / cons of this implementation vs yours?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362605742/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362609538",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362609538",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362609538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjYwOTUzOA==",
    "user": {
      "login": "lgalabru",
      "id": 87777,
      "node_id": "MDQ6VXNlcjg3Nzc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/87777?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgalabru",
      "html_url": "https://github.com/lgalabru",
      "followers_url": "https://api.github.com/users/lgalabru/followers",
      "following_url": "https://api.github.com/users/lgalabru/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgalabru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgalabru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgalabru/subscriptions",
      "organizations_url": "https://api.github.com/users/lgalabru/orgs",
      "repos_url": "https://api.github.com/users/lgalabru/repos",
      "events_url": "https://api.github.com/users/lgalabru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgalabru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T15:00:25Z",
    "updated_at": "2018-02-02T17:10:55Z",
    "author_association": "NONE",
    "body": "3esmit pretty cool! I really like your approach on having a separate method for generating the keccak, that can be re-used with web3 for simplifying the keccak generation off-chain.\r\nFor the off chain side, my initial approach was the following:\r\n\r\n```javascript\r\n      const fee = 10;\r\n      const amount = 100;\r\n      const token = this.token.address;\r\n      const from = alice;\r\n      const to = bob;\r\n      const delegate = charlie;\r\n      const nonce = 32;\r\n\r\n      const bufferedAddress = (address) => {\r\n        return  Buffer.from(ethUtil.stripHexPrefix(address), 'hex');\r\n      };\r\n      const bufferedInt = (int) => {\r\n        return ethUtil.setLengthLeft(int, 32);\r\n      };\r\n      const formattedByte32 = (bytes) => {\r\n        return ethUtil.addHexPrefix(bytes.toString('hex'));\r\n      };\r\n\r\n      const components = [\r\n        bufferedAddress(delegate),\r\n        bufferedAddress(token),\r\n        bufferedInt(nonce),\r\n        bufferedAddress(from),\r\n        bufferedAddress(to),\r\n        bufferedInt(amount),\r\n        bufferedInt(fee)\r\n      ];\r\n\r\n      const tightPack = Buffer.concat(components);\r\n\r\n      const hashedTightPack = ethUtil.sha3(tightPack);\r\n\r\n      const alicePrivateKey = Buffer.from('c88b703fb08cbea894b6aeff5a544fb92e78a18e19814cd85da83b71f772aa6c', 'hex');\r\n\r\n      const sig = ethUtil.ecsign(hashedTightPack, alicePrivateKey)\r\n\r\n      const pubkey = ethUtil.ecrecover(hashedTightPack, sig.v, sig.r, sig.s)\r\n      const address = ethUtil.publicToAddress(pubkey)\r\n\r\n      const tx = await this.token.delegatedTransfer(\r\n        nonce,\r\n        from,\r\n        to,\r\n        amount,\r\n        fee,\r\n        sig.v,\r\n        formattedByte32(sig.r),\r\n        formattedByte32(sig.s), {from: charlie});\r\n\r\n```\r\n\r\nPretty verbose and error prone.\r\nNow, if we change your implementation from \r\n```solidity\r\n    function getTransferHash(\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _gasPrice,\r\n        uint256 _nonce\r\n    )\r\n        constant\r\n        public\r\n        returns(bytes32 txHash)\r\n    {\r\n        //\"edde766e\": \"transferPreSigned(uint8,bytes32,bytes32,address,uint256,uint256,uint256)\",\r\n        txHash = keccak256(address(this), bytes4(0xedde766e), _to, _value, _gasPrice, _nonce);\r\n    }\r\n```\r\n\r\nto \r\n```solidity\r\n    function getTransferHash(\r\n        address _contract\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _gasPrice,\r\n        uint256 _nonce\r\n    )\r\n        constant\r\n        public\r\n        returns(bytes32 txHash)\r\n    {\r\n        //\"12345678\": \"getTransferHash(address,address,uint256,uint256,uint256)\",\r\n        txHash = keccak256(bytes4(0x12345678), _contract,  _to, _value, _gasPrice, _nonce);\r\n    }\r\n```\r\n\r\nWe now have a reliable way to build the exact same keccak on chain and off chain, by simply using the ABI of the contract and directly hashing the data coming from:\r\n\r\n```javascript\r\ntoken.getTransferHash.request(_contract,  _to, _value, _gasPrice, _nonce)\r\n```\r\n\r\nWhat do you think?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362609538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362642721",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362642721",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362642721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY0MjcyMQ==",
    "user": {
      "login": "bokkypoobah",
      "id": 17121975,
      "node_id": "MDQ6VXNlcjE3MTIxOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17121975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bokkypoobah",
      "html_url": "https://github.com/bokkypoobah",
      "followers_url": "https://api.github.com/users/bokkypoobah/followers",
      "following_url": "https://api.github.com/users/bokkypoobah/following{/other_user}",
      "gists_url": "https://api.github.com/users/bokkypoobah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bokkypoobah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bokkypoobah/subscriptions",
      "organizations_url": "https://api.github.com/users/bokkypoobah/orgs",
      "repos_url": "https://api.github.com/users/bokkypoobah/repos",
      "events_url": "https://api.github.com/users/bokkypoobah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bokkypoobah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T16:58:50Z",
    "updated_at": "2018-02-18T14:51:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's an implementation that is live - https://github.com/bokkypoobah/BokkyPooBahsTokenTeleportationServiceSmartContract/blob/master/contracts/BTTSTokenFactory.sol#L365-L395\r\n\r\nSee https://github.com/bokkypoobah/BokkyPooBahsTokenTeleportationServiceSmartContract#how-it-works",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362642721/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362655278",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362655278",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362655278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY1NTI3OA==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T17:47:39Z",
    "updated_at": "2018-02-02T17:51:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ptrwtts My approch support arbitrary contract executions in SNT network, so we can even create a new contract and pay the gas relayed by SNT \"gas\". Aswell don't need quotes from delegates, the system works simillar way ETH gasPrice market works, but instead of being backed by USD value is by ETH value.\r\n\r\n@lgalabru I'm not sure why supporting any contract address for building the txHash, initially I did so and used `address(this)` at it's calling, and should not be a problem. If you prefer that, I suggest setting function as pure. \r\n\r\n@bokkypoobah live in which network? Mainnet? \r\nI deployed an example of SNTPreSigned at Ropsten, check it out https://ropsten.etherscan.io/address/0xb473fd6c1206655bf2385013b23589f713fe3213",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362655278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362656802",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362656802",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362656802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY1NjgwMg==",
    "user": {
      "login": "bokkypoobah",
      "id": 17121975,
      "node_id": "MDQ6VXNlcjE3MTIxOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17121975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bokkypoobah",
      "html_url": "https://github.com/bokkypoobah",
      "followers_url": "https://api.github.com/users/bokkypoobah/followers",
      "following_url": "https://api.github.com/users/bokkypoobah/following{/other_user}",
      "gists_url": "https://api.github.com/users/bokkypoobah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bokkypoobah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bokkypoobah/subscriptions",
      "organizations_url": "https://api.github.com/users/bokkypoobah/orgs",
      "repos_url": "https://api.github.com/users/bokkypoobah/repos",
      "events_url": "https://api.github.com/users/bokkypoobah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bokkypoobah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T17:53:24Z",
    "updated_at": "2018-02-18T14:52:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@3esmit BTTSTokenFactory on mainnet - https://etherscan.io/address/0x14aabc5ade82240330e5be05d8ef350661aebb8a#code and a token - https://etherscan.io/address/0x4ac00f287f36a6aad655281fe1ca6798c9cb727b#code .\r\n\r\nAnd while developing it, I was getting an out of stack space for variables problem in Solidity when using r,s and v, so switched to using sig.\r\n\r\nI also added *Check functions so the service provider is able to confirm that the transaction has not already been executed. And to get the exact error before executing the transaction, if the transaction is expected to fail.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362656802/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362675910",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362675910",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362675910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY3NTkxMA==",
    "user": {
      "login": "lgalabru",
      "id": 87777,
      "node_id": "MDQ6VXNlcjg3Nzc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/87777?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgalabru",
      "html_url": "https://github.com/lgalabru",
      "followers_url": "https://api.github.com/users/lgalabru/followers",
      "following_url": "https://api.github.com/users/lgalabru/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgalabru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgalabru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgalabru/subscriptions",
      "organizations_url": "https://api.github.com/users/lgalabru/orgs",
      "repos_url": "https://api.github.com/users/lgalabru/repos",
      "events_url": "https://api.github.com/users/lgalabru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgalabru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T19:04:40Z",
    "updated_at": "2018-02-02T19:07:39Z",
    "author_association": "NONE",
    "body": "@3esmit the idea was to use the same method (indeed, pure), on-chain and off chain. \r\nFrom the smart contract, you could have use:\r\n```solidity\r\n bytes32 hash = getTransferHash(\r\n        address(this)\r\n        _to,\r\n        _value,\r\n        _gasPrice,\r\n        _nonce\r\n    )\r\n```\r\n\r\nAnd off-chain, you could have use:\r\n```javascript\r\nconst payload = await token.getTransferHash.request(token.address,  _to, _value, _gasPrice, _nonce);\r\nconst data = payload.params[0].data;\r\nconst hash = ethUtil.sha3(data);\r\n```\r\n\r\nAfter testing this approach, the problem is that off chain, when building data, all the arguments are padded vs being tightly-packed on chain.\r\nInstead of hashing:\r\n```\r\nd1d4e623d10f9fba5db95830f7d3839406c6af22932b7a2355d6fecc4b5c0b6bd44cc31df247a2e\r\n```\r\nyou're hashing:\r\n```\r\n0000000000000000000000000d1d4e623d10f9fba5db95830f7d3839406c6af20000000000000000000000002932b7a2355d6fecc4b5c0b6bd44cc31df247a2e\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362675910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362678394",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362678394",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362678394,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY3ODM5NA==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T19:13:54Z",
    "updated_at": "2018-02-02T19:13:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fundamentally to process the contract call you need to be synced with state, the only difference is that you can call that function `pure` then, there is no other benefict, I would stay with being processed internally because this is a known common header of signature and to benefict of a simplier function signature. \r\nMaybe if gets cheaper in gas by using the pure function, then would be interesting, but I don't think this will make a difference overall.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362678394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362688437",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362688437",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362688437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY4ODQzNw==",
    "user": {
      "login": "sponnet",
      "id": 596726,
      "node_id": "MDQ6VXNlcjU5NjcyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/596726?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sponnet",
      "html_url": "https://github.com/sponnet",
      "followers_url": "https://api.github.com/users/sponnet/followers",
      "following_url": "https://api.github.com/users/sponnet/following{/other_user}",
      "gists_url": "https://api.github.com/users/sponnet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sponnet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sponnet/subscriptions",
      "organizations_url": "https://api.github.com/users/sponnet/orgs",
      "repos_url": "https://api.github.com/users/sponnet/repos",
      "events_url": "https://api.github.com/users/sponnet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sponnet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T19:50:40Z",
    "updated_at": "2018-02-02T19:50:40Z",
    "author_association": "NONE",
    "body": "https://github.com/swarmcity/SCLabs-gasstation-service and https://github.com/swarmcity/SCLabs-gasstation-client",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362688437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362719982",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362719982",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362719982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjcxOTk4Mg==",
    "user": {
      "login": "seweso",
      "id": 1255252,
      "node_id": "MDQ6VXNlcjEyNTUyNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1255252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seweso",
      "html_url": "https://github.com/seweso",
      "followers_url": "https://api.github.com/users/seweso/followers",
      "following_url": "https://api.github.com/users/seweso/following{/other_user}",
      "gists_url": "https://api.github.com/users/seweso/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seweso/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seweso/subscriptions",
      "organizations_url": "https://api.github.com/users/seweso/orgs",
      "repos_url": "https://api.github.com/users/seweso/repos",
      "events_url": "https://api.github.com/users/seweso/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seweso/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T21:59:27Z",
    "updated_at": "2018-02-02T21:59:27Z",
    "author_association": "NONE",
    "body": "Wouldn't a way simpler solution be to have contracts set gasprice & startgas  so miners are allowed to take gas from the contracts balance? \r\n\r\nThen nodes/miners would use limited gas per transaction to determine if these transactions are mineable at all (gas price is high enough) and warrant to be re-broadcast over the network. In other words, nodes/miners are executing the code of transactions (where the sender doesn't have enough funds themselves), and which contain 'gasprice & startgas'-opcodes. \r\n\r\nContracts can then convert tokens to gas themselves. Basically wallets would allow users to set gasprice & startgas in the used token, and the contract converts that to ETH. Or if the contract is rather predictable in gas usage make it even easier for users by allowing users to only set gasprice.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362719982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362724865",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362724865",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362724865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjcyNDg2NQ==",
    "user": {
      "login": "aakilfernandes",
      "id": 1577353,
      "node_id": "MDQ6VXNlcjE1NzczNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1577353?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aakilfernandes",
      "html_url": "https://github.com/aakilfernandes",
      "followers_url": "https://api.github.com/users/aakilfernandes/followers",
      "following_url": "https://api.github.com/users/aakilfernandes/following{/other_user}",
      "gists_url": "https://api.github.com/users/aakilfernandes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aakilfernandes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aakilfernandes/subscriptions",
      "organizations_url": "https://api.github.com/users/aakilfernandes/orgs",
      "repos_url": "https://api.github.com/users/aakilfernandes/repos",
      "events_url": "https://api.github.com/users/aakilfernandes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aakilfernandes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T22:20:10Z",
    "updated_at": "2018-02-02T22:22:08Z",
    "author_association": "NONE",
    "body": "Very cool. This would be extremely useful from a UX perspective (users don't have to hold multiple tokens).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362724865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362732688",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362732688",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362732688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjczMjY4OA==",
    "user": {
      "login": "lgalabru",
      "id": 87777,
      "node_id": "MDQ6VXNlcjg3Nzc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/87777?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgalabru",
      "html_url": "https://github.com/lgalabru",
      "followers_url": "https://api.github.com/users/lgalabru/followers",
      "following_url": "https://api.github.com/users/lgalabru/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgalabru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgalabru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgalabru/subscriptions",
      "organizations_url": "https://api.github.com/users/lgalabru/orgs",
      "repos_url": "https://api.github.com/users/lgalabru/repos",
      "events_url": "https://api.github.com/users/lgalabru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgalabru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T22:54:49Z",
    "updated_at": "2018-02-02T22:54:49Z",
    "author_association": "NONE",
    "body": "@seweso I think the change you're describing needs to happen on the EVM level (and is on the roadmap if my understanding is correct). \r\nThis is less trivial than just iterating on top of ERC20.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362732688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362733674",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362733674",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362733674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjczMzY3NA==",
    "user": {
      "login": "mattdf",
      "id": 11067114,
      "node_id": "MDQ6VXNlcjExMDY3MTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11067114?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattdf",
      "html_url": "https://github.com/mattdf",
      "followers_url": "https://api.github.com/users/mattdf/followers",
      "following_url": "https://api.github.com/users/mattdf/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattdf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattdf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattdf/subscriptions",
      "organizations_url": "https://api.github.com/users/mattdf/orgs",
      "repos_url": "https://api.github.com/users/mattdf/repos",
      "events_url": "https://api.github.com/users/mattdf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattdf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T22:59:26Z",
    "updated_at": "2018-02-02T22:59:26Z",
    "author_association": "MEMBER",
    "body": "It would be good to standardize this to cover delegated ETH transfers as well when token = 0x0, for things like withdrawing from ring signature mixers. As otherwise, you would have to \"pre-fund\" the withdrawing account, thereby linking your deposit and withdraw addresses.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362733674/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362735968",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362735968",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362735968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjczNTk2OA==",
    "user": {
      "login": "seweso",
      "id": 1255252,
      "node_id": "MDQ6VXNlcjEyNTUyNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1255252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seweso",
      "html_url": "https://github.com/seweso",
      "followers_url": "https://api.github.com/users/seweso/followers",
      "following_url": "https://api.github.com/users/seweso/following{/other_user}",
      "gists_url": "https://api.github.com/users/seweso/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seweso/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seweso/subscriptions",
      "organizations_url": "https://api.github.com/users/seweso/orgs",
      "repos_url": "https://api.github.com/users/seweso/repos",
      "events_url": "https://api.github.com/users/seweso/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seweso/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T23:10:32Z",
    "updated_at": "2018-02-02T23:10:32Z",
    "author_association": "NONE",
    "body": "@lgalabru Yes agreed. And it is a direction Ethereum needs to go into. \r\n\r\nDo you know how this is called on the roadmap? I couldn't find it. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362735968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362743519",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362743519",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362743519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc0MzUxOQ==",
    "user": {
      "login": "ojanssens",
      "id": 747733,
      "node_id": "MDQ6VXNlcjc0NzczMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/747733?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ojanssens",
      "html_url": "https://github.com/ojanssens",
      "followers_url": "https://api.github.com/users/ojanssens/followers",
      "following_url": "https://api.github.com/users/ojanssens/following{/other_user}",
      "gists_url": "https://api.github.com/users/ojanssens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ojanssens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ojanssens/subscriptions",
      "organizations_url": "https://api.github.com/users/ojanssens/orgs",
      "repos_url": "https://api.github.com/users/ojanssens/repos",
      "events_url": "https://api.github.com/users/ojanssens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ojanssens/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-02T23:47:52Z",
    "updated_at": "2018-02-02T23:47:52Z",
    "author_association": "NONE",
    "body": "I think this is a great idea and an answer to my problem I’ve been struggling with: https://forum.ethereum.org/discussion/16990/transaction-fees-for-an-erc20-currency\r\n\r\nI only have 1 concern though: Wouldn’t this make Ether itself redundant? If miners would be able to directly accept tokens as payment, the utility of Ether would become less relevant except for staking and securing the network (which is still extremely valuable of course).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362743519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362752451",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362752451",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362752451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc1MjQ1MQ==",
    "user": {
      "login": "Philipinho",
      "id": 16838612,
      "node_id": "MDQ6VXNlcjE2ODM4NjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/16838612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Philipinho",
      "html_url": "https://github.com/Philipinho",
      "followers_url": "https://api.github.com/users/Philipinho/followers",
      "following_url": "https://api.github.com/users/Philipinho/following{/other_user}",
      "gists_url": "https://api.github.com/users/Philipinho/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Philipinho/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Philipinho/subscriptions",
      "organizations_url": "https://api.github.com/users/Philipinho/orgs",
      "repos_url": "https://api.github.com/users/Philipinho/repos",
      "events_url": "https://api.github.com/users/Philipinho/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Philipinho/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T00:38:28Z",
    "updated_at": "2018-02-03T01:40:19Z",
    "author_association": "NONE",
    "body": "@bokkypoobah, i'm curious to ask. What happens if the tokens are worthless? How will BTTS pay for the gas in ether when the  token has no value? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362752451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362757392",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362757392",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362757392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc1NzM5Mg==",
    "user": {
      "login": "bokkypoobah",
      "id": 17121975,
      "node_id": "MDQ6VXNlcjE3MTIxOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17121975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bokkypoobah",
      "html_url": "https://github.com/bokkypoobah",
      "followers_url": "https://api.github.com/users/bokkypoobah/followers",
      "following_url": "https://api.github.com/users/bokkypoobah/following{/other_user}",
      "gists_url": "https://api.github.com/users/bokkypoobah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bokkypoobah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bokkypoobah/subscriptions",
      "organizations_url": "https://api.github.com/users/bokkypoobah/orgs",
      "repos_url": "https://api.github.com/users/bokkypoobah/repos",
      "events_url": "https://api.github.com/users/bokkypoobah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bokkypoobah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T01:07:37Z",
    "updated_at": "2018-02-03T01:07:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Philipinho I plan to provide a smart contract that the token contract owner has to top up with ETH, and this smart contract will buy tokens from the BTTS service provider at a specified rate.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362757392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362772505",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362772505",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362772505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc3MjUwNQ==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T03:07:02Z",
    "updated_at": "2018-02-03T04:45:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that defining a gasPrice instead a fee is more safe and dynamic, there is no reason for not doing this.\r\nIt's trivial to calculate the gas cost of an operation inside the smart contract. The global `msg.gas` returns the remaining gas, so simply read this value at bounds of operation (right after sending the gas). \r\n\r\nThis is really important for approveAndCallPreSigned, because this function can call arbritary execution in other contract that can be hard to be estimated, so we place the responsability of being safe to signer.\r\ngasLimit could be interesting to safety of both sides, but the limiting already exists in native gas. \r\n\r\n\r\nPlease review my work in [MiniMeTokenPreSigned.sol](https://github.com/status-im/contracts/blob/presigned-token/contracts/token/MiniMeTokenPreSigned.sol) and derive from it, it's the same GNU license followed by [MiniMeToken.sol](https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol) (I guess GPLv3, @jbaylina?). \r\n\r\nThe interface I suggest is the following:\r\n```solidity\r\npragma solidity ^0.4.17;\r\n\r\n/**\r\n   @notice Implements PreSigned ERC20Token operations (and approveAndCall(address,uint256,bytes);\r\n */\r\ncontract ERC865 {\r\n    /**\r\n     * @notice Include a presigned `\"a9059cbb\": \"transfer(address,uint256)\"`\r\n     * @param _signature Signed transfer \r\n     * @param _to The address of the recipient\r\n     * @param _value The value of tokens to be transferred\r\n     * @param _gasPrice How much tokens willing to pay per gas\r\n     * @param _nonce Presigned transaction number.\r\n     */\r\n    function transferPreSigned(bytes _signature, address _to, uint256 _value, uint256 _gasPrice, uint256 _nonce) public;\r\n\r\n    /**\r\n     * @notice Include a presigned `\"\"095ea7b3\": \"approve(address,uint256)\"`\r\n     * @param _signature Signed transfer \r\n     * @param _to The address of the recipient\r\n     * @param _value The value of tokens to be transferred\r\n     * @param _gasPrice How much tokens willing to pay per gas\r\n     * @param _nonce Presigned transaction number.\r\n     */    \r\n    function approvePreSigned(bytes _signature, address _to, uint256 _value, uint256 _gasPrice, uint256 _nonce) public;\r\n    \r\n    /**\r\n     * @notice Include a presigned `\"cae9ca51\": \"approveAndCall(address,uint256,bytes)\"`\r\n     * @param _signature Signed transfer \r\n     * @param _to The address of the recipient\r\n     * @param _value The value of tokens to be transferred\r\n     * @param _extraData option data to send to contract\r\n     * @param _gasPrice How much tokens willing to pay per gas\r\n     * @param _nonce Presigned transaction number.\r\n     */\r\n    function approveAndCallPreSigned(bytes _signature, address _to, uint256 _value, uint256 _extraData, uint256 _gasPrice, uint256 _nonce) public;\r\n    \r\n}\r\n```\r\nI'm not absolutely sure about the usage of `bytes _signature` instead of the offchain processed `uint8 v, bytes32 r, bytes32 s`. Maybe to save gas we should use it preprocessed?\r\n\r\nSupporting additional `approveAndCall` is important due 2 reasons: \r\n1. Push forward a real solution to ERC20 aproove + 1 custom call at contract`\r\n2. Makes possible executing arbtirary operations on other contracts (implementing ApproveAndCallFallBack.sol), even calls with value 0 in approveAndCall (pure data calls), extended even to creation of new contracts - all gas cost relayed through gasPrice offer in contract token.\r\n\r\nIncluding a fixed fee method in side of this 3 signatures would be an option, I'm not totally against it and don't see an actual problem in having this more option, or could be included as a parameter, however I think users will prefer including gasPriced transaction instead of fixedFee because its easier to calculate cost/risk (?).\r\n\r\nPreSigned contract calls (intended to relay native gas) should also be standarized, so we can have other types of tokens which can use different call methods and wallets would recognize it. \r\nI suggest some types of hashing we can agree on: \r\n```solidity\r\n//\"edde766e\": \"transfer(address,uint256)\",\r\ntxHash = keccak256(address(this), bytes4(0xedde766e), keccak256(_to, _value), _gasPrice, _nonce);\r\ntxHash = keccak256(address(this), keccak256(bytes4(0xedde766e), _to, _value), _gasPrice, _nonce);\r\ntxHash = keccak256(address(this), bytes4(0xedde766e), _to, _value, _gasPrice, _nonce); //seems to be better because cheaper and no reason to tie separatedly the elements.\r\n```\r\n\r\nThis way will be easier to understand what is being signed, specially for wallets that want give more details about where that hash came from.\r\n\r\nAlso the signatures should be directed towards https://github.com/ethereum/EIPs/issues/191 to motivate wallet developers in agreeing in the common signing method defined there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362772505/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362775657",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362775657",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362775657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc3NTY1Nw==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T03:39:20Z",
    "updated_at": "2018-02-03T03:39:20Z",
    "author_association": "MEMBER",
    "body": "Excellent idea! Why explicitly encode the sender when it's provided by ecrecover, though?\r\n\r\nAlso, why encode the delegate, instead of letting the first person to get a transaction in harvest the fee?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362775657/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362782196",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362782196",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362782196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc4MjE5Ng==",
    "user": {
      "login": "jdkanani",
      "id": 1692593,
      "node_id": "MDQ6VXNlcjE2OTI1OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1692593?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdkanani",
      "html_url": "https://github.com/jdkanani",
      "followers_url": "https://api.github.com/users/jdkanani/followers",
      "following_url": "https://api.github.com/users/jdkanani/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdkanani/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdkanani/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdkanani/subscriptions",
      "organizations_url": "https://api.github.com/users/jdkanani/orgs",
      "repos_url": "https://api.github.com/users/jdkanani/repos",
      "events_url": "https://api.github.com/users/jdkanani/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdkanani/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T05:39:46Z",
    "updated_at": "2018-02-03T05:40:48Z",
    "author_association": "NONE",
    "body": "Great. @lgalabru `nonce` wouldn't work this way.  Possible race condition - `require(_nonce > nonces[_from])` prevents older transactions to go through, even if `sig` is valid.\r\n\r\nCould use `mapping(delegateTxHash => bool)`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362782196/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362784341",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362784341",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362784341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc4NDM0MQ==",
    "user": {
      "login": "lgalabru",
      "id": 87777,
      "node_id": "MDQ6VXNlcjg3Nzc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/87777?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgalabru",
      "html_url": "https://github.com/lgalabru",
      "followers_url": "https://api.github.com/users/lgalabru/followers",
      "following_url": "https://api.github.com/users/lgalabru/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgalabru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgalabru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgalabru/subscriptions",
      "organizations_url": "https://api.github.com/users/lgalabru/orgs",
      "repos_url": "https://api.github.com/users/lgalabru/repos",
      "events_url": "https://api.github.com/users/lgalabru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgalabru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T06:23:06Z",
    "updated_at": "2018-02-03T06:23:20Z",
    "author_association": "NONE",
    "body": "@jdkanani \r\nAmazing, I had the race condition in my radar and was dubitative, thanks for your workaround!\r\n\r\n@Arachnid \r\nRight, we need to pass it, but it doesn't have to be encoded. Good catch\r\n> Letting the first person to get a transaction in harvest the fee\r\n\r\nGreat idea!\r\n\r\n@3esmit \r\nUsing msg.gas price makes sense, but we should probably come up with another name, since \"gas price\" is usually in wei. \r\nConcerning the naming of the methods, what would you think of prefixing the methods with \"delegated\", instead of suffixing with \"presign\", for insisting on the fact that someone else is bringing the transaction on chain? \r\nConcerning the direction, we probably want to open a pull request on Open Zeppelin (cc @spalladino). Would it work with the constraints of your licence?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362784341/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362797698",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362797698",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362797698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc5NzY5OA==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T10:53:09Z",
    "updated_at": "2018-02-03T10:53:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have been working on this idea for a side-project, the [pay-protocol](https://github.com/aragonlabs/pay-protocol/blob/master/contracts/PayProtocol.sol#L52). This feature is something that can be achieved in a **layer 2 protocol** rather than adding this functionality to every token contract. Which also has the ability that every token currently deployed could use it, just by having people that want to use this create a ERC20 allowance to the PayProtocol contract or setting it a ERC777 operator.\r\n\r\nIn any case, I think it would be super interesting to standardize the offchain part of this, which would allow people to run nodes looking for profitable token transfers and settle them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362797698/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362804104",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362804104",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362804104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjgwNDEwNA==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-03T12:54:18Z",
    "updated_at": "2018-02-03T12:54:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@lgalabru \"Delegated\" means that you transfered temporarily trust to other, is not the case here, so I think the naming transferPreSigned() or signedTransfer() are more correct, but `transferPreSigned` actually describe exacly what the function is (a transfer which been pre signed.)\r\n\r\nI don't think is bad to use `gasPrice` as the name, it also describe exactly what is this parameter for, and it works just like regular native ether gasPrice, however it is under the token you're interacting. \r\nJust like in native token, gasPrice is set in the minimum unit (wei), tokens that have decimals need to be aware of this. A good UX would handle this fine.\r\n\r\n@izqui I think your project is a little bit different because is not the token itself that is handeling the moving, seems like is a TokenController? but should work like the same.\r\nAbout the ethereum signed message, I see that you do this:\r\n`keccak256(SCHEMA_HASH, keccak256(this, token, from, to, value, expires, pull, push, keccak256(deps)));`\r\nMaybe we can have your opinion on why you did this and why we also should do something like this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362804104/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362880071",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362880071",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362880071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjg4MDA3MQ==",
    "user": {
      "login": "axcrest",
      "id": 31077522,
      "node_id": "MDQ6VXNlcjMxMDc3NTIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/31077522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axcrest",
      "html_url": "https://github.com/axcrest",
      "followers_url": "https://api.github.com/users/axcrest/followers",
      "following_url": "https://api.github.com/users/axcrest/following{/other_user}",
      "gists_url": "https://api.github.com/users/axcrest/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axcrest/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axcrest/subscriptions",
      "organizations_url": "https://api.github.com/users/axcrest/orgs",
      "repos_url": "https://api.github.com/users/axcrest/repos",
      "events_url": "https://api.github.com/users/axcrest/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axcrest/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-04T04:30:10Z",
    "updated_at": "2018-02-04T04:30:10Z",
    "author_association": "NONE",
    "body": "How do you handle the ERC-20 approve() requirement?  No one can withdraw funds from your token account without you first approving them, and that approve() step costs ETH.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362880071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362889271",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362889271",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362889271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjg4OTI3MQ==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-04T08:16:15Z",
    "updated_at": "2018-02-04T08:16:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@axcrest you are right that in pay protocol if you already have tokens you need to create an approval to the contract. But if you receive the tokens directly in your pay protocol account, then you never need ether to operate.\r\n\r\n@3esmit you are right the token isn't handling the moving and that's why it is very efficient, token transfers are only settled in the token contracts when tokens need to move in or out of the protocol. This allows to settle MiniMe transfers for ~15k gas (if using bulk transfers, ~36k otherwise) instead of +100k that takes if operating directly on the token.\r\n\r\nThe signed message conforms to the latest https://github.com/ethereum/EIPs/pull/712 spec. It allows for signing providers to show exactly what is going in the hash they are going to be signing.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362889271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362920866",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-362920866",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 362920866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjkyMDg2Ng==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-04T16:44:55Z",
    "updated_at": "2018-02-04T16:46:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@izqui Thanks for the information about signed message spec, I think the community should consensus in a default signed standard ASAP. \r\nI liked #712 and I think it should be a subtype (version) of #191. \r\nYou are right about pay-protocol being cheaper, and it's an interesting solution, and should be used together with `approveAndCallPreSigned`. \r\nThe first transaction from someone entering this network could be paid in the token itself directly. I think whats being discussed here and the network you showed us are different things and compliment each other. Users always want cheaper transactions, and also may want to not hold ether.\r\n\r\nThe main issue this EIP resolves is the need of an account to hold Ether in their balance to move their token. Even being more expansive, it might be cheaper then the process of transferring ether to that account and moving it. \r\n\r\nMiniMeTokenPresigned behaves differnt when gasPrice is zero, this can be used for an user which have 2 balances, 1 with ether and other with the token, so they can control this account using gas from other account. \r\n\r\nI can upgrade Raiden contracts to be able of accepting `approveAndCallPreSigned`  to open a channel, so users could participate in Raiden network without ever holding any ether. I think this is certainly an improvement for the token that reaches almost the same result as a true economic abstraction, with the restriction that contracts must be implemented `ApproveAndCallFallBack.sol` properly. \r\nI'll prepare examples in the week for StandardBounty contracts and fees being paid with `approveAndCallPresigned`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/362920866/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/363608488",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-363608488",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 363608488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzYwODQ4OA==",
    "user": {
      "login": "lgalabru",
      "id": 87777,
      "node_id": "MDQ6VXNlcjg3Nzc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/87777?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgalabru",
      "html_url": "https://github.com/lgalabru",
      "followers_url": "https://api.github.com/users/lgalabru/followers",
      "following_url": "https://api.github.com/users/lgalabru/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgalabru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgalabru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgalabru/subscriptions",
      "organizations_url": "https://api.github.com/users/lgalabru/orgs",
      "repos_url": "https://api.github.com/users/lgalabru/repos",
      "events_url": "https://api.github.com/users/lgalabru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgalabru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T00:02:06Z",
    "updated_at": "2018-02-07T00:02:06Z",
    "author_association": "NONE",
    "body": "A first implementation of this EIP is available here: https://github.com/PROPSProject/props-token-distribution/blob/master/contracts/token/ERC865Token.sol.\r\nI'll probably open a pull request on zeppelin after getting some feedbacks from you guys.\r\n\r\n@3esmit I'm not convinced by this idea of computing the gas cost on the fly because you're adding more complexity to the method, when you want to be really accurate.\r\n\r\nI skipped the approveAndCall, since it's not part of the ERC20 protocol + there is no clear settlement at this point (ERC223 vs ERC827).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/363608488/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/363838740",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-363838740",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 363838740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzgzODc0MA==",
    "user": {
      "login": "ptrwtts",
      "id": 497330,
      "node_id": "MDQ6VXNlcjQ5NzMzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/497330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptrwtts",
      "html_url": "https://github.com/ptrwtts",
      "followers_url": "https://api.github.com/users/ptrwtts/followers",
      "following_url": "https://api.github.com/users/ptrwtts/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptrwtts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptrwtts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptrwtts/subscriptions",
      "organizations_url": "https://api.github.com/users/ptrwtts/orgs",
      "repos_url": "https://api.github.com/users/ptrwtts/repos",
      "events_url": "https://api.github.com/users/ptrwtts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptrwtts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T17:06:41Z",
    "updated_at": "2018-02-07T17:06:41Z",
    "author_association": "NONE",
    "body": "@izqui I'm curious how you envisage a decentralized settlement system working for these sorts of transactions? \r\n\r\nWe realized that if you leave the transactions open for anyone to settle, then it's possible for someone to watch the mempool and front run them.\r\n\r\nYou can avoid it, but there needs to be some back and forth. First, the user broadcasts their intent to make a transaction. Then delegates provide quotes. Then the user picks a delegate, and signs the transaction with their address included, so that no one else can front run.\r\n\r\nIn both cases there is a compromise, so not sure which is best.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/363838740/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/363886418",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-363886418",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 363886418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mzg4NjQxOA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T19:40:46Z",
    "updated_at": "2018-02-07T19:40:46Z",
    "author_association": "MEMBER",
    "body": "I agree - being conformant with #191 makes much more sense to me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/363886418/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/364186180",
    "html_url": "https://github.com/ethereum/EIPs/issues/865#issuecomment-364186180",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/865",
    "id": 364186180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDE4NjE4MA==",
    "user": {
      "login": "lgalabru",
      "id": 87777,
      "node_id": "MDQ6VXNlcjg3Nzc3",
      "avatar_url": "https://avatars.githubusercontent.com/u/87777?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgalabru",
      "html_url": "https://github.com/lgalabru",
      "followers_url": "https://api.github.com/users/lgalabru/followers",
      "following_url": "https://api.github.com/users/lgalabru/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgalabru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgalabru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgalabru/subscriptions",
      "organizations_url": "https://api.github.com/users/lgalabru/orgs",
      "repos_url": "https://api.github.com/users/lgalabru/repos",
      "events_url": "https://api.github.com/users/lgalabru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgalabru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-08T17:26:33Z",
    "updated_at": "2018-02-08T17:26:33Z",
    "author_association": "NONE",
    "body": "@Arachnid what should I change on\r\nhttps://github.com/PROPSProject/props-token-distribution/blob/master/contracts/token/ERC865Token.sol\r\nif we want to conform to #191?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/364186180/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
