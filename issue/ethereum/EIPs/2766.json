{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2766",
  "id": 650769691,
  "node_id": "MDU6SXNzdWU2NTA3Njk2OTE=",
  "number": 2766,
  "title": "ERC: Contract Ownership Governance Standard",
  "user": {
    "login": "zemse",
    "id": 22412996,
    "node_id": "MDQ6VXNlcjIyNDEyOTk2",
    "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zemse",
    "html_url": "https://github.com/zemse",
    "followers_url": "https://api.github.com/users/zemse/followers",
    "following_url": "https://api.github.com/users/zemse/following{/other_user}",
    "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
    "organizations_url": "https://api.github.com/users/zemse/orgs",
    "repos_url": "https://api.github.com/users/zemse/repos",
    "events_url": "https://api.github.com/users/zemse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zemse/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 22,
  "created_at": "2020-07-03T21:19:31Z",
  "updated_at": "2022-03-31T11:07:22Z",
  "closed_at": "2022-03-31T11:07:22Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\n\r\nA standard for Governance contracts that holds the administrative ownership of other smart contracts with voting power distributed as `ERC-20` tokens.\r\n\r\n## Abstract\r\n\r\nThe following standard defines the implementation of a standard API for a Governance smart contract based on `ERC-20`. Existing `ERC-173` compatible contracts can upgrade from private key wallet ownership to a Governance smart contract. Adhering to a standard API enables general tools to populate governance information of various projects, thus increasing transparency.\r\n\r\n## Motivation\r\n\r\nTraditionally, many contracts that require that they be owned or controlled in some way use `ERC-173` which standardized the use of ownership in the smart contracts. For example to withdraw funds or perform administrative actions.\r\n\r\n```solidity\r\ncontract dApp {\r\n  function doSomethingAdministrative() external onlyOwner {\r\n    // admin logic that can be performed by a single wallet\r\n  }\r\n}\r\n```\r\n\r\nOften, such administrative rights for a contract are written for maintenance purpose but users need to trust the owner. Rescue operations by an owner have raised questions on decentralised nature of the projects. Also, there is a possibility of compromise of an owner's private key.\r\n\r\nAt present, many governance implementations by ambitious projects need users to visit a specific UI to see governance information about their project. Some examples of live implementations having different API that does the same thing are [Compound Governance](https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol#L27), [Uniswap Governance](https://github.com/Uniswap/governance/blob/master/contracts/GovernorAlpha.sol#L27) and [Sushiswap Governance](https://github.com/sushiswap/sushiswap/blob/master/contracts/GovernorAlpha.sol#L45). It's just like if the ERC-20 standard wasn't finalized, then token projects would have their own block explorer. Adhering to a standard API would enable general tools (like Etherscan) to populate governance information, thus increasing transparency to users. Using widely popular `ERC-20` token as a governance token, existing tools built to work with `ERC-20` can already display voters. This can result in a wide adoption for contract governance over private key based ownership.\r\n\r\n## Specification\r\n\r\nA Governance contract that is compliant with `ERC-2767` shall implement the following interfaces:\r\n\r\n```solidity\r\n/// @title ERC-2767 Governance\r\n/// @dev ERC-165 InterfaceID: 0xd8b04e0e\r\ninterface ERC2767 is ERC165 {\r\n    /// @notice Gets number votes required for achieving consensus\r\n    /// @dev Should cost less than 30000 gas\r\n    /// @return Required number of votes for achieving consensus\r\n    function quorumVotes() external view returns (uint256);\r\n\r\n    /// @notice The address of the Governance ERC20 token\r\n    function token() external view returns (address);\r\n}\r\n```\r\n\r\n### `ERC-20` Governance Token\r\n\r\nAn `ERC-2767` Governance Contract should reference an address through `token()` that implements `ERC-20` interface. `token()` is allowed to return self address (`address(this)`), if `ERC-20` functionalities are implemented in the same contract (one can consider checking out Diamond Standard [`ERC-2535`](https://eips.ethereum.org/EIPS/eip-2535) to optimise contract size).\r\n\r\nImplementations are allowed to have varying `ERC-20`'s `totalSupply()` (through any standard of minting or burning). But having a fixed `quorumVotes()` return value in this case would cause required votes consensus in `%` with respect to `totalSupply()` to change. To automatically account for this, any custom logic under `quorumVotes()` is allowed to return for e.g. `51%` of `totalSupply()`.\r\n\r\n### `ERC-165` Interface Identification\r\n\r\nAn `ERC-2767` Governance Contract should also implement `ERC-165`. This helps general tools to identify whether a contract is a `ERC-2767` Governance contract.\r\n\r\n```solidity\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n```\r\n\r\n## Rationale\r\n\r\nThe goals of this EIP have been the following:\r\n\r\n- Standardize API of Governance contracts to make it easy for analysis tools to be built.\r\n- Encourage use of `ERC-20` based weighted governance over existing multi-sig (_generally limited to 50 max owners_) for big projects.\r\n- Encourage existing `ERC-173` ownership smart contracts / projects to move to Governance based ownership by removing the effort needed to host custom UI for their project.\r\n- Encourage availability of publicly audited governance contracts, just like `ERC-20` which anyone can use.\r\n- Make it possible to utilize existing `ERC-20` tools for owners of governance token analysis.\r\n- Make future protocols possible that need to interact with governances of multiple projects.\r\n- Keep this EIP minimal and allow another EIPs to standardize any specific functionalities.\r\n\r\n## Backwards Compatibility\r\n\r\nSmart contracts that are `ERC-173` compliant can transfer their ownership to a Governance contract. This enables such contracts to become compatible with `ERC-2767` Governance.\r\n\r\nHowever, there are some existing projects with governance implementations and most of them have custom APIs ([Compound Governance](https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol#L27), [Uniswap Governance](https://github.com/Uniswap/governance/blob/master/contracts/GovernorAlpha.sol#L27) and [Sushiswap Governance](https://github.com/sushiswap/sushiswap/blob/master/contracts/GovernorAlpha.sol#L45)), since a standard did not exist. Not having an `ERC-2767` compatible governance contract means only that general tools might not be able to populate their governance information without including some special code for the project.\r\n\r\nFor existing governance contracts to get compatible with `ERC-2767`:\r\n\r\n1. Projects can deploy a new governance contract and transfer ownership to it to be `ERC-2767` compatible. This is suitable for those who use Multi-sig wallets for Governance.\r\n2. It is understood that redeploying governance contracts would be a troublesome task, and contracts who already have functionality similar to `ERC-20` based (weighted votes) have a bit advanced way to avoid it. Basically, they can create a forwarder contract implements `ERC-2767` and forwards all calls to the actual non-standard methods. Projects can list the forwarder contract to display the information project's governance info without requiring any custom code in analysys tool, but this might have certain limitations depending on the project's existing governance implementation. Specification of forwarder contract is out of scope for this EIP and it may be addressed in another EIP if required.\r\n\r\n<!-- ## Test Cases -->\r\n\r\n## Implementation\r\n\r\nThe reference implementations are available in this [repository](https://github.com/zemse/contract-ownership-governance). Publicly audited implementations will be included in future.\r\n\r\n## Security Considerations\r\n\r\nImplementers are free to choose between On-chain and Off-chain consensus. Exact specification is out of scope for this standard (open for other EIPs to standardize). However, this section mentions points that implementers can consider.\r\n\r\n#### On-chain\r\n\r\nIn such implementations, community can create transaction proposals and vote on it by sending on-chain transactions.\r\n\r\n- OpenZeppelin Snapshots can be used to prevent double voting.\r\n\r\n#### Off-chain\r\n\r\n- The signatures in off-chain governance implementation can follow recommendations of `ERC-191` or `ERC-712`.\r\n- To prevent replaying signatures, it'd be best if executer is required to sort the signatures based on increasing addresses.\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2766/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/653976108",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-653976108",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 653976108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mzk3NjEwOA==",
    "user": {
      "login": "zemse",
      "id": 22412996,
      "node_id": "MDQ6VXNlcjIyNDEyOTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zemse",
      "html_url": "https://github.com/zemse",
      "followers_url": "https://api.github.com/users/zemse/followers",
      "following_url": "https://api.github.com/users/zemse/following{/other_user}",
      "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
      "organizations_url": "https://api.github.com/users/zemse/orgs",
      "repos_url": "https://api.github.com/users/zemse/repos",
      "events_url": "https://api.github.com/users/zemse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zemse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T01:54:45Z",
    "updated_at": "2020-07-06T01:54:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Multi sig wallets do have the same functionality. My bad, closing it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/653976108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/654233126",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-654233126",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 654233126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDIzMzEyNg==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T13:20:52Z",
    "updated_at": "2020-07-07T13:58:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't understand why you closed this issue. So what if Multi sig wallets have the same functionality.   I think having a standard specifically for decentralizing the ownership of contracts is a good idea.\r\n\r\nI think this would be very useful for governance of [diamonds](https://github.com/ethereum/EIPs/issues/2535).  It would decentralize the ability to add new functions to diamonds.   ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/654233126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/654309116",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-654309116",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 654309116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDMwOTExNg==",
    "user": {
      "login": "zemse",
      "id": 22412996,
      "node_id": "MDQ6VXNlcjIyNDEyOTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zemse",
      "html_url": "https://github.com/zemse",
      "followers_url": "https://api.github.com/users/zemse/followers",
      "following_url": "https://api.github.com/users/zemse/following{/other_user}",
      "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
      "organizations_url": "https://api.github.com/users/zemse/orgs",
      "repos_url": "https://api.github.com/users/zemse/repos",
      "events_url": "https://api.github.com/users/zemse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zemse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T15:31:32Z",
    "updated_at": "2020-07-06T15:31:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for your response. This draft was focused on implementation and while I was going through 0xProject contracts, I found that they already implemented the idea [here](https://github.com/0xProject/0x-monorepo/blob/development/contracts/multisig/contracts/src/ZeroExGovernor.sol) kind of 2-3 years ago. Also, looks like they have on-chain governance, however the reference example I've included was based on off-chain governance.\r\n\r\n>  I think having a standard specifically for decentralizing the ownership of contracts is a good idea.\r\n\r\nNow I realise that this EIP should be more focused on a consistent interface. This would enable tools like EtherScan can display governance information about a dApp smart contract (like number of owners and required consensus). This can definitely update facets of a diamond proxy implementation with decentralized control. Including some community tested codes (with minimum to no change required) with the EIP will help more developers to easily implement this in their dApp projects requiring ownership functionality.\r\n\r\nReopening to do a rewrite of the current EIP draft.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/654309116/reactions",
      "total_count": 6,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 2,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/654877920",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-654877920",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 654877920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDg3NzkyMA==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-07T13:53:04Z",
    "updated_at": "2020-07-07T13:53:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @zemse,\r\n\r\nYes, this is great!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/654877920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/656952347",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-656952347",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 656952347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Njk1MjM0Nw==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-11T00:45:27Z",
    "updated_at": "2020-07-11T00:45:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like the latest version.  I like that there is an interface for on-chain voting and off-chain voting.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/656952347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657030551",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-657030551",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 657030551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzAzMDU1MQ==",
    "user": {
      "login": "zemse",
      "id": 22412996,
      "node_id": "MDQ6VXNlcjIyNDEyOTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zemse",
      "html_url": "https://github.com/zemse",
      "followers_url": "https://api.github.com/users/zemse/followers",
      "following_url": "https://api.github.com/users/zemse/following{/other_user}",
      "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
      "organizations_url": "https://api.github.com/users/zemse/orgs",
      "repos_url": "https://api.github.com/users/zemse/repos",
      "events_url": "https://api.github.com/users/zemse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zemse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-11T09:58:07Z",
    "updated_at": "2020-07-11T11:07:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mudgen Thanks for enhancing the proposal! The updated the description above. Would love any suggestions for making this better.\r\n\r\nTomorrow I'll try to update the reference implementation with the latest version of the interfaces.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657030551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657068444",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-657068444",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 657068444,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzA2ODQ0NA==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-11T14:06:50Z",
    "updated_at": "2020-07-11T14:07:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@zemse I think it makes sense to start contacting the developers of existing DAOs and people who may be interested in this standard and getting feedback from them. I can help with this and I'll start doing this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657068444/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657166432",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-657166432",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 657166432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzE2NjQzMg==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-12T02:54:49Z",
    "updated_at": "2020-07-12T02:54:49Z",
    "author_association": "MEMBER",
    "body": "Took a quick look, I think `required() -> (uint256, uint256)` could be simplified a bit logically if it where split into two functions, something like `threshold() -> uint256` (number of positive votes needed) and  `quorum() -> uint256` (number of total votes needed). You could further specify that `threshold <= quorum` in well-formed implementations.\r\n\r\nAn implementation should specify that a vote \"passes\" if `totalVotes >= quorum && positiveVotes >= threshold`. The implementation might also say a vote may be denied if `totalVotes >= quorum && negativeVotes >= threshold`. There might be further extensions for time periods, lack of quorum, etc. There are tons of ways you can implement alterations, but I think having `threshold` and `quorum` make the intent behind `required` much clearer than contextually parsing the denominator.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657166432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657200270",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-657200270",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 657200270,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzIwMDI3MA==",
    "user": {
      "login": "zemse",
      "id": 22412996,
      "node_id": "MDQ6VXNlcjIyNDEyOTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zemse",
      "html_url": "https://github.com/zemse",
      "followers_url": "https://api.github.com/users/zemse/followers",
      "following_url": "https://api.github.com/users/zemse/following{/other_user}",
      "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
      "organizations_url": "https://api.github.com/users/zemse/orgs",
      "repos_url": "https://api.github.com/users/zemse/repos",
      "events_url": "https://api.github.com/users/zemse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zemse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-12T09:58:19Z",
    "updated_at": "2020-07-12T10:00:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @fubuloubu, I think for the check `totalVotes >= quorum && positiveVotes >= threshold`, the contract needs a functionality for governor to able to vote negative (please correct me if I'm wrong). But most of the implementations that I have seen have their governors two options: either cast a vote (positive only) or ignore by doing nothing (considered negative by default). What do you think, governor ignoring works fine or does enabling negative votes significantly enhances a governance contract?\r\n\r\nAlso most implementations had a fixed `required` value (some of them: [0xproject](https://github.com/0xProject/0x-monorepo/blob/development/contracts/multisig/contracts/src/MultiSigWallet.sol#L34), [starkex](https://github.com/starkware-libs/starkex-contracts/blob/d6bde00ba6f5fa38c05e2e2222ddc6a2eaf2c562/scalable-dex/contracts/src/committee/Committee.sol#L11), [jointerinc](https://github.com/jointerinc/jointer-token/blob/90256da08d0e2248c4367df09eeb1b97e015da10/contracts/common/MultiSigGovernance.sol#L48), [qdao](https://github.com/platinum-engineering/qdao-smartcontract-qdao/blob/2b52adce88e54b0d009555baf042a0d7f50e4a03/contracts/Access/Multiownable.sol#L7), [melonproject](https://github.com/melonproject/melon/blob/master/contracts-old/MultiSigWallet.sol#L27)). But if more governors are added, the required number of votes still remains the same. There is no way in such implementations to instead have `50%+` or `66%+` consensus like ([posdao](https://github.com/poanetwork/posdao-contracts/blob/master/contracts/ValidatorSetAuRa.sol#L360)). I think it could be helpful if it's possible to have both, i.e. fixed votes as well as % votes and let governors to switch to % or back to fixed as desired during the course. Does this make sense?\r\n\r\nI agree that `required() -> (uint256, uint256)` can be simplified and a split into two methods could do that. For e.g. `required() => 2` and `base() => 3` means `66%+` consensus and if governors set `base` to `0` it means `required` is fixed. Any name suggestions or alternative ways of doing this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657200270/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657321648",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-657321648",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 657321648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzMyMTY0OA==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-13T02:10:30Z",
    "updated_at": "2020-07-13T02:10:30Z",
    "author_association": "MEMBER",
    "body": "Yes, depending on the implementation, you don't have to have negative voting. I was just using `postiveVotes` to make my point, it could just be `votes` (and it doesn't matter because it's an internal variable anyways).\r\n\r\nThe point of an ERC should be allow a standardized way of interacting with what could be multiple iterations of the same idea: simplified voting, timebound rejection, negative votes, etc. A successful ERC doesn't need to dictate behavior of what the implementation chooses to do with the result, only allows for a range of possibilities prescribed by the intent of the standard. To say it simply, the standard should describe what things mean and how to work with them, and leave some grey area for people to experiment with. Too loose, and the standard becomes brittle and hard to use. Too tight, and no one wants to use it because it's too specific.\r\n\r\nWe're mostly saying the same thing, I'm just hoping my reasoning can help you in thinking about designing your standard.\r\n\r\n---\r\n\r\nI don't think `base` is a very descriptive name, perhaps something like `minimum` would be more descriptive as to what you mean by returning a parameter that dictates what the minimum quorum is required for the vote to pass. Also, having `base` shift to 0 _depending_ on the use case I think will lead this standard to being poorly implemented. That's why I was trying to describe a simple invariant that is valid in all cases (`votesCast >= quorum && votesFor >= threshold`), which is something that is easier to ensure people implement correctly when they implement this standard. I mean, people still forget to implement the ERC20 return boolean sometimes, so being explicit and straightforward helps prevent this kind of misuse.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657321648/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657557661",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-657557661",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 657557661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzU1NzY2MQ==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-13T13:22:49Z",
    "updated_at": "2020-07-13T13:22:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fubuloubu @zemse I agree it is good to make things very clear and explicit in the standard.\r\n\r\nAnother important point concerning designing the standard is tooling. I agree that it is good for a standard to provide flexibility in its implementation, but it shouldn't be so flexible that it becomes less useful for tools.  Tools that can automate or fill in the boilerplate of a standard can be very useful, but the standard has to standardize enough specifics.  Specifically a standard should standardize the interfaces, which is what this standard is doing which is good. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657557661/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657912586",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-657912586",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 657912586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzkxMjU4Ng==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-14T01:25:58Z",
    "updated_at": "2020-07-14T01:26:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please add full text to issue and make a PR to put draft in the repo. This is the correct processes for EIPs.\r\n\r\nOther repos are ephemeral and non-authoritative.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/657912586/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/658293291",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-658293291",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 658293291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODI5MzI5MQ==",
    "user": {
      "login": "zemse",
      "id": 22412996,
      "node_id": "MDQ6VXNlcjIyNDEyOTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zemse",
      "html_url": "https://github.com/zemse",
      "followers_url": "https://api.github.com/users/zemse/followers",
      "following_url": "https://api.github.com/users/zemse/following{/other_user}",
      "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
      "organizations_url": "https://api.github.com/users/zemse/orgs",
      "repos_url": "https://api.github.com/users/zemse/repos",
      "events_url": "https://api.github.com/users/zemse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zemse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-14T16:53:15Z",
    "updated_at": "2020-07-14T16:53:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've updated the full text to this issue and opened the PR #2767. We've also made some changes to make methods explicit based on the feedback received.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/658293291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660702638",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-660702638",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 660702638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcwMjYzOA==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-19T20:20:08Z",
    "updated_at": "2020-07-19T20:20:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "There has been some feedback in the pull request which was merged: https://github.com/ethereum/EIPs/pull/2767",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660702638/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660714769",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-660714769",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 660714769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcxNDc2OQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-19T21:48:42Z",
    "updated_at": "2020-07-19T21:48:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Good luck with this, I have made a review\r\n\r\n# Review of current version\r\n\r\n## Style\r\n\r\n- Reference and use RFC 2119 at the top of the specification\r\n- Add Solidity versions inline to specification a la https://eips.ethereum.org/EIPS/eip-721#specification\r\n- Fix \"off chain\" -> \"off-chain\"\r\n- Refer to \"ERC-173\" as \"ERC-173 (DRAFT)\", it is not yet finalized\r\n\r\n## BC\r\n\r\n- Upgrade ERC-165 compliance from \"should\" to \"MUST\" in all cases\r\n\r\n- The features `GovernorPowerUpdated`, `powerOf`, `totalPower`, `setGovernor`, `GovernorPowerUpdated` are all entirely duplicative of ERC-20 and other subsequent tokens. Either replace these and simply make ERC-20 (or other) a dependency of this ERC or explain that this design consideration was considered and provide a strong reason why this backwards compatibility is abandoned.\r\n\r\n## Design\r\n\r\n- Reorder to save a storage slot: \r\n\r\n    ```solidity\r\n     struct Transaction {\r\n        uint256 votes;\r\n        bool executed; // This gets combined with address below\r\n        address destination;\r\n        uint256 value;\r\n        bytes data;\r\n    }\r\n    ```\r\n\r\n- `createTransaction` should not confirm. As is, utility of standard is limited to cases where governors will propose transactions. A more general, and better, approach is to allow implements to have anybody propose transactions.\r\n\r\n- Off-chain `executeTransaction` is missing `value` argument\r\n\r\n- NatSpec for off-chain `executeTransaction` signature format is underspecified\r\n\r\n- `Only Governance can call` on `executeTransaction` is over specified \r\n## Naming\r\n\r\n- Rename `TransactionCreated` -> `TransactionProposed`\r\n- `event TransactionConfirmed(uint256 indexed transactionId);` should include which governor\r\n- Rename `revokeConfirmation` -> `revokeTransaction`\r\n- Alternatively, consider: `voteForTransaction(uint256 _transactionId)` and `voteAgainstTransaction(uint256 _transactionId)` because this can be more clear\r\n\r\n## Security\r\n\r\n- As-is, implementations will require for-loops to implement `setGovernor`, `getTransaction`, `executeTransaction`, `confirmTransaction` and/or `revokeConfirmation`. This creates possibility for a denial of service. This is not explained or mitigated in the paper.\r\n\r\n## Related\r\n\r\n- In case you are interested, 0xcert has implemented something similar, you can see it at https://github.com/0xcert/framework/blob/4cfca4559e58c8bef08b82501757e75a37dc7a91/packages/0xcert-ethereum-gateway-contracts/src/contracts/actions-gateway.sol",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660714769/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660941360",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-660941360",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 660941360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDk0MTM2MA==",
    "user": {
      "login": "zemse",
      "id": 22412996,
      "node_id": "MDQ6VXNlcjIyNDEyOTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zemse",
      "html_url": "https://github.com/zemse",
      "followers_url": "https://api.github.com/users/zemse/followers",
      "following_url": "https://api.github.com/users/zemse/following{/other_user}",
      "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
      "organizations_url": "https://api.github.com/users/zemse/orgs",
      "repos_url": "https://api.github.com/users/zemse/repos",
      "events_url": "https://api.github.com/users/zemse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zemse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-20T10:21:12Z",
    "updated_at": "2020-07-20T10:21:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fulldecent Thank you for highlighting important points. Some names were inspired from [MultiSigWallet](https://github.com/ConsenSys/MultiSigWallet/blob/master/MultiSigWalletWithDailyLimit.sol#L362-L364) too with an attempt to keep familiar naming. Missed mentioning them, will do that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660941360/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/661098511",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-661098511",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 661098511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTA5ODUxMQ==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-20T15:08:16Z",
    "updated_at": "2020-07-20T15:08:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fulldecent Could a section be added to EIP-1 that contains the RFC 2119 mention and text.  And have it say that RFC 2119 applies to all EIPs?  That way every EIP doesn't have to include it.   ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/661098511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/661170247",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-661170247",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 661170247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTE3MDI0Nw==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-20T16:41:51Z",
    "updated_at": "2020-07-20T16:41:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "No, we cannot have EIPs reference EIP-1 because that means that EIPs will no longer be free standing. Plus it is a good reminder to standards authors that they need to use precise language when they have to copy the RFC 2119 boiler plate directly into their text.\r\n\r\n---\r\n\r\nBut separately, EIP-1 should be updated to recommend that all EIPs will reference on RFC 2119 (rather than me just bringing it up each time during review). This is just helpful because a lot of people here do not have experience with standards work and that is just a good idea.\r\n\r\nI have given up on proposing \"material\" changes to EIP-1 because there is no project scope on this repository, and therefore no mechanism to accept changes. And the only \"review\" is a bunch of random people that do not have commit access. I don't have time to join committees that are ineffectual.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/661170247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/661545511",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-661545511",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 661545511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTU0NTUxMQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-21T01:45:08Z",
    "updated_at": "2020-07-21T01:45:08Z",
    "author_association": "MEMBER",
    "body": "Someone could add the RFC 2119 to the EIP template.  That would probably go over smoother than trying to change EIP-1.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/661545511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/726314729",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-726314729",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 726314729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjMxNDcyOQ==",
    "user": {
      "login": "zemse",
      "id": 22412996,
      "node_id": "MDQ6VXNlcjIyNDEyOTk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22412996?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zemse",
      "html_url": "https://github.com/zemse",
      "followers_url": "https://api.github.com/users/zemse/followers",
      "following_url": "https://api.github.com/users/zemse/following{/other_user}",
      "gists_url": "https://api.github.com/users/zemse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zemse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zemse/subscriptions",
      "organizations_url": "https://api.github.com/users/zemse/orgs",
      "repos_url": "https://api.github.com/users/zemse/repos",
      "events_url": "https://api.github.com/users/zemse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zemse/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-12T20:12:07Z",
    "updated_at": "2020-11-12T20:15:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "The draft has been updated recently. As a changelog along with their reasons:\r\n\r\n- **Removed specification for Transaction execution**: This allows dev to follow any other onchain/offchain standard or custom implementation as per their needs. For e.g. negative voting https://github.com/ethereum/EIPs/issues/2766#issuecomment-657166432\r\n- **Use ERC-20 as a dependency**: As highlighted in https://github.com/ethereum/EIPs/issues/2766#issuecomment-660714769, The features GovernorPowerUpdated, powerOf, totalPower, setGovernor, GovernorPowerUpdated are all entirely duplicative of ERC-20 and other subsequent tokens. These features are removed from specification and allows the Governance contract to contain ERC-20 compatible code in itself or seperate out the token functionality in another contract like Compound's GovernerAlpha architecture.\r\n- **Changed `required() -> (uint256,uint256)` to `quorumVotes() -> uint256`**: The required() returning two numbers was a bit confusing method as highlighted in https://github.com/ethereum/EIPs/issues/2766#issuecomment-657166432. Now this allows devs to keep it simple or do some custom logic under it.\r\n\r\nThanks to @mudgen, @fubuloubu, @fulldecent, @MicahZoltu for taking time to review and highlighting problems and giving feedback for the initial draft.\r\n\r\nI've updated the new draft text in this issue's description. Requesting review for this. Also, the draft is much smaller than initial version. Looking to fix any problems in the specification, so that this standard becomes more clear and useful to developers for implementing.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/726314729/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1070797489",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-1070797489",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 1070797489,
    "node_id": "IC_kwDOAq426M4_0xKx",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-03-17T11:07:11Z",
    "updated_at": "2022-03-17T11:07:11Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1070797489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1084429597",
    "html_url": "https://github.com/ethereum/EIPs/issues/2766#issuecomment-1084429597",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2766",
    "id": 1084429597,
    "node_id": "IC_kwDOAq426M5AoxUd",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-03-31T11:07:21Z",
    "updated_at": "2022-03-31T11:07:21Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1084429597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
