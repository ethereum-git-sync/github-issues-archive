{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/86/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/86/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/86/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/86",
  "id": 145324865,
  "node_id": "MDU6SXNzdWUxNDUzMjQ4NjU=",
  "number": 86,
  "title": "Proposed initial abstraction changes for Metropolis",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 49,
  "created_at": "2016-04-02T02:01:47Z",
  "updated_at": "2022-12-26T21:36:15Z",
  "closed_at": "2022-02-07T10:16:20Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "**This document is outdated; see #208 for current details.**\r\n\r\n### Specification\r\n\r\nIf `block.number >= METROPOLIS_FORK_BLKNUM`, then:\r\n1. If the signature of a transaction is `(0, 0, 0)` (ie. `v = r = s = 0`), then treat it as valid and set the sender address to `2**160 - 1`\r\n2. Set the address of any contract created through a creation transaction to equal `sha3(0 + init code) % 2**160`, where `+` represents concatenation, replacing the earlier address formula of `sha3(rlp.encode([sender, nonce]))`\r\n3. Create a new opcode at `0xfb`, `CREATE_P2SH`, which sets the creation address to `sha3(sender + init code) % 2**160`. If a contract at that address already exists, fails and returns 0 as if the init code had run out of gas.\r\n\r\n### Rationale\r\n\r\nThe goal of these changes is to set the stage for abstraction of account security. Instead of having an in-protocol mechanism where ECDSA and the default nonce scheme are enshrined as the only \"standard\" way to secure an account, we take initial steps toward a model where in the long term all accounts are contracts, contracts can pay for gas, and users are free to define their own security model.\r\n\r\nUnder EIP 86, we can expect users to store their ether in contracts, whose code might look like the following (example in Serpent):\r\n\r\n```python\r\n# Get signature from tx data\r\nsig_v = ~calldataload(0)\r\nsig_r = ~calldataload(32)\r\nsig_s = ~calldataload(64)\r\n# Get tx arguments\r\ntx_nonce = ~calldataload(96)\r\ntx_to = ~calldataload(128)\r\ntx_value = ~calldataload(160)\r\ntx_gasprice = ~calldataload(192)\r\ntx_data = string(~calldatasize() - 224)\r\n~calldataload(tx_data, 224, ~calldatasize())\r\n# Get signing hash\r\nsigning_data = string(~calldatasize() - 64)\r\n~mstore(signing_data, tx.startgas)\r\n~calldataload(signing_data + 32, 96, ~calldatasize() - 96)\r\nsigning_hash = sha3(signing_data:str)\r\n# Perform usual checks\r\nprev_nonce = ~sload(-1)\r\nassert tx_nonce == prev_nonce + 1\r\nassert self.balance >= tx_value + tx_gasprice * tx.startgas\r\nassert ~ecrecover(signing_hash, sig_v, sig_r, sig_s) == <pubkey hash here>\r\n# Update nonce\r\n~sstore(-1, prev_nonce + 1)\r\n# Pay for gas\r\n~send(MINER_CONTRACT, tx_gasprice * tx.startgas)\r\n# Make the main call\r\n~call(msg.gas - 50000, tx_to, tx_value, tx_data, len(tx_data), 0, 0)\r\n# Get remaining gas payments back\r\n~call(20000, MINER_CONTRACT, 0, [msg.gas], 32, 0, 0)\r\n```\r\n\r\nThis can be thought of as a \"forwarding contract\". It accepts data from the \"entry point\" address 2**160 - 1 (an account that anyone can send transactions from), expecting that data to be in the format `[sig, nonce, to, value, gasprice, data]`. The forwarding contract verifies the signature, and if the signature is correct it sets up a payment to the miner and then sends a call to the desired address with the provided value and data.\r\n\r\nThe benefits that this provides lie in the most interesting cases:\r\n\r\n- **Multisig wallets**: currently, sending from a multisig wallet requires each operation to be ratified by the participants, and each ratification is a transaction. This could be simplified by having one ratification transaction include signatures from the other participants, but even still it introduces complexity because the participants' accounts all need to be stocked up with ETH. With this EIP, it will be possible to just have the contract store the ETH, send a transaction containing all signatures to the contract directly, and the contract can pay the fees.\r\n- **Ring signature mixers**: the way that ring signature mixers work is that N individuals send 1 coin into a contract, and then use a linkable ring signature to withdraw 1 coin later on. The linkable ring signature ensures that the withdrawal transaction cannot be linked to the deposit, but if someone attempts to withdraw twice then those two signatures can be linked and the second one prevented. However, currently there is a privacy risk: to withdraw, you need to have coins to pay for gas, and if these coins are not properly mixed then you risk compromising your privacy. With this EIP, you can pay for gas straight our of your withdrawn coins.\r\n- **Custom cryptography**: users can upgrade to ed25519 signatures, Lamport hash ladder signatures or whatever other scheme they want on their own terms; they do not need to stick with ECDSA.\r\n- **Non-cryptographic modifications**: users can require transactions to have expiry times (this being standard would allow old empty/dust accounts to be flushed from the state securely), use k-parallelizable nonces (a scheme that allows transactions to be confirmed slightly out-of-order, reducing inter-transaction dependence), or make other modifications.\r\n\r\n(2) and (3) introduce a feature similar to bitcoin's P2SH, allowing users to send funds to addresses that provably map to only one particular piece of code. Something like this is crucial in the long term because, in a world where all accounts are contracts, we need to preserve the ability to send to an account before that account exists on-chain, as that's a basic functionality that exists in all blockchain protocols today.\r\n\r\n### Miner strategy\r\n\r\nNote that miners would need to have a strategy for accepting these transactions. This strategy would need to be very discriminating, because otherwise they run the risk of accepting transactions that do not pay them any fees, and possibly even transactions that have no effect (eg. because the transaction was already included and so the nonce is no longer current). One simple approach is to have a whitelist  for the codehash of accounts that they accept transactions being sent to; approved code would include logic that pays miners transaction fees. However, this is arguably too restrictive; a looser but still effective strategy would be to accept any code that fits the same general format as the above, consuming only a limited amount of gas to perform nonce and signature checks and having a guarantee that transaction fees will be paid to the miner. Another strategy is to, alongside other approaches, try to process any transaction that asks for less than 250,000 gas, and include it only if the miner's balance is appropriately higher after executing the transaction than before it.\r\n\r\nSee https://www.reddit.com/r/ethereum/comments/5ab69v/metropolis_protocol_change_proposal_highlight_for/ for reddit discussion.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/86/reactions",
    "total_count": 14,
    "+1": 10,
    "-1": 0,
    "laugh": 0,
    "hooray": 4,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/86/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204682712",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-204682712",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 204682712,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDY4MjcxMg==",
    "user": {
      "login": "gavofyork",
      "id": 138296,
      "node_id": "MDQ6VXNlcjEzODI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavofyork",
      "html_url": "https://github.com/gavofyork",
      "followers_url": "https://api.github.com/users/gavofyork/followers",
      "following_url": "https://api.github.com/users/gavofyork/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavofyork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavofyork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavofyork/subscriptions",
      "organizations_url": "https://api.github.com/users/gavofyork/orgs",
      "repos_url": "https://api.github.com/users/gavofyork/repos",
      "events_url": "https://api.github.com/users/gavofyork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavofyork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T09:39:14Z",
    "updated_at": "2016-04-02T09:39:14Z",
    "author_association": "MEMBER",
    "body": "> mixhash and nonce are all substituted with the empty string\n\nunlike for the powhash where they are not present at all :-/\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204682712/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204682874",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-204682874",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 204682874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDY4Mjg3NA==",
    "user": {
      "login": "gavofyork",
      "id": 138296,
      "node_id": "MDQ6VXNlcjEzODI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavofyork",
      "html_url": "https://github.com/gavofyork",
      "followers_url": "https://api.github.com/users/gavofyork/followers",
      "following_url": "https://api.github.com/users/gavofyork/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavofyork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavofyork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavofyork/subscriptions",
      "organizations_url": "https://api.github.com/users/gavofyork/orgs",
      "repos_url": "https://api.github.com/users/gavofyork/repos",
      "events_url": "https://api.github.com/users/gavofyork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavofyork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T09:42:59Z",
    "updated_at": "2016-04-02T09:42:59Z",
    "author_association": "MEMBER",
    "body": "1/2/3 mean state trie will grow indefinitely large (so far there would be an additional ~50MB on it, a substantial increase on the pruned, compressed state db)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204682874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204682907",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-204682907",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 204682907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDY4MjkwNw==",
    "user": {
      "login": "gavofyork",
      "id": 138296,
      "node_id": "MDQ6VXNlcjEzODI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavofyork",
      "html_url": "https://github.com/gavofyork",
      "followers_url": "https://api.github.com/users/gavofyork/followers",
      "following_url": "https://api.github.com/users/gavofyork/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavofyork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavofyork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavofyork/subscriptions",
      "organizations_url": "https://api.github.com/users/gavofyork/orgs",
      "repos_url": "https://api.github.com/users/gavofyork/repos",
      "events_url": "https://api.github.com/users/gavofyork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavofyork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T09:44:10Z",
    "updated_at": "2016-04-02T09:44:10Z",
    "author_association": "MEMBER",
    "body": "`key`, `mstart`, `msz` -> `key`, `mstart`, `msize` or `ky`, `mst`, `msz`. don't mix naming conventions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204682907/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204682919",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-204682919",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 204682919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDY4MjkxOQ==",
    "user": {
      "login": "eth1au",
      "id": 1072408,
      "node_id": "MDQ6VXNlcjEwNzI0MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1072408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eth1au",
      "html_url": "https://github.com/eth1au",
      "followers_url": "https://api.github.com/users/eth1au/followers",
      "following_url": "https://api.github.com/users/eth1au/following{/other_user}",
      "gists_url": "https://api.github.com/users/eth1au/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eth1au/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eth1au/subscriptions",
      "organizations_url": "https://api.github.com/users/eth1au/orgs",
      "repos_url": "https://api.github.com/users/eth1au/repos",
      "events_url": "https://api.github.com/users/eth1au/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eth1au/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T09:44:20Z",
    "updated_at": "2016-04-02T09:44:20Z",
    "author_association": "NONE",
    "body": "Solid. V, can you show Gav the DK Gas email. JG\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204682919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204685042",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-204685042",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 204685042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDY4NTA0Mg==",
    "user": {
      "login": "gavofyork",
      "id": 138296,
      "node_id": "MDQ6VXNlcjEzODI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavofyork",
      "html_url": "https://github.com/gavofyork",
      "followers_url": "https://api.github.com/users/gavofyork/followers",
      "following_url": "https://api.github.com/users/gavofyork/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavofyork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavofyork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavofyork/subscriptions",
      "organizations_url": "https://api.github.com/users/gavofyork/orgs",
      "repos_url": "https://api.github.com/users/gavofyork/repos",
      "events_url": "https://api.github.com/users/gavofyork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavofyork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T09:58:52Z",
    "updated_at": "2016-04-02T09:58:52Z",
    "author_association": "MEMBER",
    "body": "for 9, what happens when there's a collision?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204685042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204685081",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-204685081",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 204685081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDY4NTA4MQ==",
    "user": {
      "login": "gavofyork",
      "id": 138296,
      "node_id": "MDQ6VXNlcjEzODI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavofyork",
      "html_url": "https://github.com/gavofyork",
      "followers_url": "https://api.github.com/users/gavofyork/followers",
      "following_url": "https://api.github.com/users/gavofyork/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavofyork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavofyork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavofyork/subscriptions",
      "organizations_url": "https://api.github.com/users/gavofyork/orgs",
      "repos_url": "https://api.github.com/users/gavofyork/repos",
      "events_url": "https://api.github.com/users/gavofyork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavofyork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T10:00:05Z",
    "updated_at": "2016-04-02T10:00:05Z",
    "author_association": "MEMBER",
    "body": "it should also be noted that (12) and (13) are _suggested_ miner alterations, but do not form part of the consensus protocol.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204685081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204686777",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-204686777",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 204686777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDY4Njc3Nw==",
    "user": {
      "login": "eth1au",
      "id": 1072408,
      "node_id": "MDQ6VXNlcjEwNzI0MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1072408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eth1au",
      "html_url": "https://github.com/eth1au",
      "followers_url": "https://api.github.com/users/eth1au/followers",
      "following_url": "https://api.github.com/users/eth1au/following{/other_user}",
      "gists_url": "https://api.github.com/users/eth1au/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eth1au/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eth1au/subscriptions",
      "organizations_url": "https://api.github.com/users/eth1au/orgs",
      "repos_url": "https://api.github.com/users/eth1au/repos",
      "events_url": "https://api.github.com/users/eth1au/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eth1au/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T10:08:19Z",
    "updated_at": "2016-04-02T10:08:19Z",
    "author_association": "NONE",
    "body": "Perhaps. Alas, essential weekend reading: http://www.mit.edu/~mrognlie/piketty_diminishing_returns.pdf\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204686777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204708548",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-204708548",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 204708548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDcwODU0OA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T12:48:58Z",
    "updated_at": "2016-04-02T12:48:58Z",
    "author_association": "MEMBER",
    "body": "Fixed the naming conventions for msz.\n\n> 1/2/3 mean state trie will grow indefinitely large (so far there would be an additional ~50MB on it, a substantial increase on the pruned, compressed state db)\n\nHowever, note that this growth is constant in tx load; right now, it's 20% of the state size, but in a future environment where we see 5-10 tx/sec, it will be much smaller, and we should optimize for that case. Additionally, if we are still uncomfortable with storing ALL state roots, then there is a compromise solution where we store the state roots at key `block.number % CYCLE_LENGTH` (eg. `CYCLE_LENGTH = 65536`), and in the STATEROOT and BLOCKHASH opcodes keep the condition that we return 0 if `block.number - target_height >= CYCLE_LENGTH`)\n\n> for 9, what happens when there's a collision?\n\nI would say failure (either do nothing and return zero, or exception). We could remove the issue entirely by adding a nonce back in to the formula, but I want to avoid this because one of my goals with EIP 101 is the desire to remove the notion of in-protocol sequence numbers entirely, moving all of that logic to the protocol level. So if you want to create multiple instances of the same contract, you can just append a nonce after the code, and maintain and increment the nonce yourself in storage; this can all be done with a few EVM operations, and simplifies the protocol further as we don't have to deal with the current logic around when nonces are and aren't incremented within consensus code.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204708548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204840430",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-204840430",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 204840430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDg0MDQzMA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-03T01:05:51Z",
    "updated_at": "2016-04-03T01:05:51Z",
    "author_association": "MEMBER",
    "body": "Changed the hash with state root/mixhash/nonce as empty strings into the standard PoW hash, but with the state root replaced with the empty string. Added rationale to post; here it is copied for convenience:\n\n> The state root needs to be set to the empty string because (2) is itself a state change, so the actual final state root is not known (and neither are the mixhash and nonce).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204840430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/205718871",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-205718871",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 205718871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTcxODg3MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-05T08:41:58Z",
    "updated_at": "2016-04-05T08:41:58Z",
    "author_association": "MEMBER",
    "body": "What happens if a slot is SLOAD'ed from that has been SSTOREBYTES'ed before?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/205718871/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/206138219",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-206138219",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 206138219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjEzODIxOQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T06:22:41Z",
    "updated_at": "2016-04-06T06:23:45Z",
    "author_association": "MEMBER",
    "body": "Last 32 bytes, left-zero-padded.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/206138219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/206316442",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-206316442",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 206316442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjMxNjQ0Mg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T11:14:57Z",
    "updated_at": "2016-04-06T11:14:57Z",
    "author_association": "MEMBER",
    "body": "@vbuterin Still many open questions regarding the variable-size slots. Is the general idea that `SSTORE` behaves identical to `SSTOREBYTES` with 32 bytes and `SLOAD` identical to `SLOADBYTES` plus padding? (I would prefer padding at the less-significant end, by the way).\n\nSo using `SSIZE` for not yet used slots returns zero, but it returns 32 for slots where we wrote `0`. This is still a bit inconsistent with how solidity uses storage, but it might work.\n\nFurthermore, I am not sure that the memory exceptions for `SLOADBYTES` are a good idea (different case than for CALL) because we do know the size.\n\nAlso it could be considered whether `SLOADBYTES` should zero-pad to multiples of 32 - that would be more consistent with our ABI.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/206316442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/207471374",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-207471374",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 207471374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzQ3MTM3NA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-08T15:09:17Z",
    "updated_at": "2016-04-08T15:20:06Z",
    "author_association": "MEMBER",
    "body": "> Is the general idea that SSTORE behaves identical to SSTOREBYTES with 32 bytes and SLOAD identical to SLOADBYTES plus padding?\n\nYes, with the exception that you can use SSTOREBYTES and not SSTORE to save 32 zero bytes, as you brought up.\n\n> Furthermore, I am not sure that the memory exceptions for SLOADBYTES are a good idea (different case than for CALL) because we do know the size.\n\nTrue. I'm fine either way. \n\n> Also it could be considered whether SLOADBYTES should zero-pad to multiples of 32 - that would be more consistent with our ABI.\n\nI would prefer no. It's not consistent with the ABI, but the ABI is a high-level construct. Return slices of CALL and the like are not zero-padded to multiples of 32, and it is consistent with that.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/207471374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/212301918",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-212301918",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 212301918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjMwMTkxOA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T07:40:43Z",
    "updated_at": "2016-04-20T07:40:43Z",
    "author_association": "MEMBER",
    "body": "12: I think we should still perform some static analysis on the target contract, it is easy to spam miners with a lot of txes with small startgas.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/212301918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/212302373",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-212302373",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 212302373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjMwMjM3Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T07:41:36Z",
    "updated_at": "2016-04-20T07:41:36Z",
    "author_association": "MEMBER",
    "body": "General concern: If we move nonce checking into the contract, to we still enforce the requirement that the chain should never include two transactions with the same hash?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/212302373/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/212304009",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-212304009",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 212304009,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjMwNDAwOQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-20T07:44:04Z",
    "updated_at": "2016-04-20T07:44:21Z",
    "author_association": "MEMBER",
    "body": "9: I would guess that none of the existing contracts relies on the actual way the new address is calculated in a `create`, so changing that is fine. What I'm worried about is that previously, two `create` calls with identical code from the same contract did not result in a collision but now they do, because existing code does not add a nonce to the init code.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/212304009/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/212980786",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-212980786",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 212980786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjk4MDc4Ng==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-21T15:47:10Z",
    "updated_at": "2016-04-21T15:47:32Z",
    "author_association": "MEMBER",
    "body": "> to we still enforce the requirement that the chain should never include two transactions with the same hash?\n\nI would say no. One of the key positive side effects of an eventual universal adoption of EIP 101 is that transaction _validity_ becomes statically evaluable, which means that blocks can be validated independently of having the prior state.\n\n> What I'm worried about is that previously, two create calls with identical code from the same contract did not result in a collision but now they do, because existing code does not add a nonce to the init code.\n\nTrue. If we decide that this is a problem, one simple solution would be that if the destination address contains code, we keep incrementing the address by 1 (wrapping around if needed) until it doesn't, and run the code at the first address we find that is empty.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/212980786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/216978880",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-216978880",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 216978880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjk3ODg4MA==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-04T19:40:39Z",
    "updated_at": "2016-05-04T19:40:39Z",
    "author_association": "NONE",
    "body": ":+1: on incrementing address on collision. In addition (ha) to all current contract-creating contracts continuing (ha ha) to function, it permanently resolves the question of two contracts accidentally having the same address.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/216978880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/236273160",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-236273160",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 236273160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjI3MzE2MA==",
    "user": {
      "login": "tromer",
      "id": 487720,
      "node_id": "MDQ6VXNlcjQ4NzcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/487720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tromer",
      "html_url": "https://github.com/tromer",
      "followers_url": "https://api.github.com/users/tromer/followers",
      "following_url": "https://api.github.com/users/tromer/following{/other_user}",
      "gists_url": "https://api.github.com/users/tromer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tromer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tromer/subscriptions",
      "organizations_url": "https://api.github.com/users/tromer/orgs",
      "repos_url": "https://api.github.com/users/tromer/repos",
      "events_url": "https://api.github.com/users/tromer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tromer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-29T19:32:46Z",
    "updated_at": "2016-07-29T19:32:46Z",
    "author_association": "NONE",
    "body": "Letting contracts pay fees is also needed by Zerocash over Ethereum (https://github.com/zcash/babyzoe/issues/1).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/236273160/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/275784648",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-275784648",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 275784648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTc4NDY0OA==",
    "user": {
      "login": "kumavis",
      "id": 1474978,
      "node_id": "MDQ6VXNlcjE0NzQ5Nzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1474978?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kumavis",
      "html_url": "https://github.com/kumavis",
      "followers_url": "https://api.github.com/users/kumavis/followers",
      "following_url": "https://api.github.com/users/kumavis/following{/other_user}",
      "gists_url": "https://api.github.com/users/kumavis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kumavis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kumavis/subscriptions",
      "organizations_url": "https://api.github.com/users/kumavis/orgs",
      "repos_url": "https://api.github.com/users/kumavis/repos",
      "events_url": "https://api.github.com/users/kumavis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kumavis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-27T21:50:53Z",
    "updated_at": "2017-01-27T21:51:09Z",
    "author_association": "MEMBER",
    "body": "here is a rough sketch of an alternate proposal for the tx verification abstraction\r\n\r\nIf block.number >= `METROPOLIS_FORK_BLKNUM`\r\nand\r\nIf the signature of a transaction is (0, 0, 0) (ie. v = r = s = 0)\r\n\r\nsend a message to the tx toAddress with sender address and origin as `2**160 - 1`\r\n\r\nAnd require that the tx toAddress emits a log with topic `ACCEPT_TX` within `TX_VERIFY_GASLIMIT` gas consumed. If the message exits early or the log is not emitted within the limit, it is invalid. If it is emitted, the tx should continue to be processed and all fees from start to finish are payed by the identity contract.\r\n\r\nThis proposal could be adjusted to use a different signaling mechanism than the log, but it seemed appropriate because verification code continues onto processing code, unifying the gas count for validating and processing the tx.\r\n\r\nI would appreciate some criticism @vbuterin @chriseth @gavofyork ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/275784648/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276880915",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-276880915",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 276880915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Njg4MDkxNQ==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T06:41:41Z",
    "updated_at": "2017-02-02T06:41:41Z",
    "author_association": "MEMBER",
    "body": "Would discussion be more organized if 2 (contracts are created at address `sha3(0 + init code) % 2**160`) and 3 (new opcode `CREATE_P2SH`) were opened as a separate EIP? The sub-proposals (2) and (3) have no bearing on the account abstraction proposal of (1).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276880915/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276885794",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-276885794",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 276885794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Njg4NTc5NA==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T07:20:28Z",
    "updated_at": "2017-02-02T07:20:28Z",
    "author_association": "MEMBER",
    "body": "> 1. If the signature of a transaction is `(0, 0, 0) (ie. v = r = s = 0)`, then treat it as valid and set the sender address to `2**160 - 1`\r\n\r\nWould the nonce for account `2**160 - 1` be incremented as done with regular accounts? Or would it have special behavior?\r\n\r\nAren't \"forwarding contracts\" currently possible without any changes to the transaction protocol? Senders can just use a gas price of zero, and since miner strategy is flexible and left unspecified, its up to miners to choose which zero gas price transactions to include by somehow screening for contracts that send a payment to `COINBASE`.\r\n\r\nThe only advantage I can see to a special `2**160 - 1` account is the possibility for flexible nonce schemes, but that can also be achieved by signing zero-gasprice zero-value transactions from random empty accounts (the empty account bloat that might result could be mitigated by specifying that transactions from empty accounts do not result in a nonce increment).\r\n\r\nIt seems that the miner strategy is the most important factor to realizing the intended functionality (that contracts can pay for gas). It is not clear how having special behavior for the `2**160 - 1` account would help miners discriminate zero-gasprice transactions for inclusion without opening up potential DoS/spam vectors.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276885794/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276924554",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-276924554",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 276924554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjkyNDU1NA==",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T10:45:04Z",
    "updated_at": "2017-02-02T10:45:04Z",
    "author_association": "MEMBER",
    "body": "@vbuterin Is it up-to-date EIP proposal in the first comment? There are some questions on it.\r\n1. How `(0,0,0)` transactions are supposed to be propagated by peers? Now a peer needs to validate tx and include it to the pending state before propagating it to other peers, how `(0,0,0)` could be validated? Is it propagated without validation? Couldn't the network be DoSed with those transactions for free in that case? \r\nIs https://github.com/ethereum/EIPs/issues/155 applicable to those transactions? \r\n2. Couldn't the same contract be deployed twice as it will obtain the same address? Should the init code be changed for this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276924554/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/277036208",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-277036208",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 277036208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzAzNjIwOA==",
    "user": {
      "login": "kumavis",
      "id": 1474978,
      "node_id": "MDQ6VXNlcjE0NzQ5Nzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1474978?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kumavis",
      "html_url": "https://github.com/kumavis",
      "followers_url": "https://api.github.com/users/kumavis/followers",
      "following_url": "https://api.github.com/users/kumavis/following{/other_user}",
      "gists_url": "https://api.github.com/users/kumavis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kumavis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kumavis/subscriptions",
      "organizations_url": "https://api.github.com/users/kumavis/orgs",
      "repos_url": "https://api.github.com/users/kumavis/repos",
      "events_url": "https://api.github.com/users/kumavis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kumavis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T18:11:45Z",
    "updated_at": "2017-02-02T18:11:45Z",
    "author_association": "MEMBER",
    "body": "@cdetrio one minor difference might be that `tx.origin` might be set to the proxy account",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/277036208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/277846993",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-277846993",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 277846993,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Nzg0Njk5Mw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-06T23:21:17Z",
    "updated_at": "2017-02-06T23:21:17Z",
    "author_association": "MEMBER",
    "body": "Here is an implementation of the standard account in Solidity (done a few months back, but forgot to post it here): https://gist.github.com/axic/528017d2d67801fa669fd75577c2093c",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/277846993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/277958390",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-277958390",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 277958390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Nzk1ODM5MA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T10:25:12Z",
    "updated_at": "2017-02-07T10:25:12Z",
    "author_association": "MEMBER",
    "body": "@Nashatyrev I guess the propagation rules are the same as the miner strategy. For now, nodes run a simple regular expression on the target contract code and propagate the tx if it matches (and there is enough ether in the contract to pay for the gas).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/277958390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278331824",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-278331824",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 278331824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODMzMTgyNA==",
    "user": {
      "login": "Nashatyrev",
      "id": 8173857,
      "node_id": "MDQ6VXNlcjgxNzM4NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8173857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nashatyrev",
      "html_url": "https://github.com/Nashatyrev",
      "followers_url": "https://api.github.com/users/Nashatyrev/followers",
      "following_url": "https://api.github.com/users/Nashatyrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nashatyrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nashatyrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nashatyrev/subscriptions",
      "organizations_url": "https://api.github.com/users/Nashatyrev/orgs",
      "repos_url": "https://api.github.com/users/Nashatyrev/repos",
      "events_url": "https://api.github.com/users/Nashatyrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nashatyrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T13:42:55Z",
    "updated_at": "2017-02-08T13:42:55Z",
    "author_association": "MEMBER",
    "body": "@chriseth Thanks for clarification! \r\nStill couldn't get how 'regexp' can determine if the concrete contract is going to pay for the concrete Tx? M.b. you can give some simple example?\r\nIn reddit discussion I saw the proposal to execute this Tx with some very limited gas to check if the contract would pay within this gas bound. This sounds more realistic to me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278331824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278365091",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-278365091",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 278365091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODM2NTA5MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T15:45:04Z",
    "updated_at": "2017-02-08T15:45:04Z",
    "author_association": "MEMBER",
    "body": "@Nashatyrev the EIP description contains an example contract. If you replace the address by a wildcard, you have the regular expression.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278365091/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278888327",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-278888327",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 278888327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODg4ODMyNw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-10T08:43:24Z",
    "updated_at": "2017-02-10T08:43:24Z",
    "author_association": "MEMBER",
    "body": "> How (0,0,0) transactions are supposed to be propagated by peers?\r\n\r\nBasically, peers would follow the same heuristics as miners. That is, they would have a set of whitelist rules and only propagate txs is they match at least one of them. Some whitelist rules might include:\r\n\r\n* Transactions whose to address fits a particular regexp, and whose data includes a sufficiently high fee\r\n* Transactions which consume less than 200000 gas, and which when executed pay a sufficiently large fee to a miner\r\n\r\nThe general rule is \"propagate the tx if you can make an argument that there is at least some probability p that it will be included in the next block and lead to the sender paying the miner a sufficiently high fee\".\r\n\r\n> Couldn't the same contract be deployed twice as it will obtain the same address? Should the init code be changed for this?\r\n\r\nIn general, *user contracts* should not be an issue because user contracts would include the user's public key somewhere in the code, and so be unique per user. Contracts could be prevented from being deployed twice; if you want to create multiple instances, then the recommendation is to add an incrementing nonce to the end of the code as a dummy variable.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278888327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278888760",
    "html_url": "https://github.com/ethereum/EIPs/issues/86#issuecomment-278888760",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/86",
    "id": 278888760,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODg4ODc2MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-10T08:45:53Z",
    "updated_at": "2017-02-10T08:45:53Z",
    "author_association": "MEMBER",
    "body": "> Would discussion be more organized if 2 (contracts are created at address sha3(0 + init code) % 2**160) and 3 (new opcode CREATE_P2SH) were opened as a separate EIP? The sub-proposals (2) and (3) have no bearing on the account abstraction proposal of (1).\r\n\r\n@cdetrio possible, though they are highly complementary. You can't easily use EIP 86 accounts if there is not a way to securely send money to them before they exist, which is what (2) and (3) do.\r\n\r\n> Would the nonce for account 2**160 - 1 be incremented as done with regular accounts? Or would it have special behavior?\r\n\r\nDon't increment it IMO.\r\n\r\n> Senders can just use a gas price of zero, and since miner strategy is flexible and left unspecified, its up to miners to choose which zero gas price transactions to include by somehow screening for contracts that send a payment to COINBASE.\r\n\r\nThe problem is that if you have a forwarding contract without EIP 86, then you are wasting 96 bytes and a signature recovery operation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278888760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
