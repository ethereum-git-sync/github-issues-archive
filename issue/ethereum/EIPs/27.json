{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/27/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/27/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/27/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/27",
  "id": 118166577,
  "node_id": "MDU6SXNzdWUxMTgxNjY1Nzc=",
  "number": 27,
  "title": "A binary format for EVM code",
  "user": {
    "login": "wanderer",
    "id": 158211,
    "node_id": "MDQ6VXNlcjE1ODIxMQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wanderer",
    "html_url": "https://github.com/wanderer",
    "followers_url": "https://api.github.com/users/wanderer/followers",
    "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
    "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
    "organizations_url": "https://api.github.com/users/wanderer/orgs",
    "repos_url": "https://api.github.com/users/wanderer/repos",
    "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wanderer/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2015-11-21T03:32:04Z",
  "updated_at": "2016-03-11T20:46:27Z",
  "closed_at": "2016-03-11T20:46:27Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "# Abstract\n\nThe EIP gives EVM code a semantic container that enables quick population of memory and smaller amounts of initialization code. Partly inspired by [ELF](http://wiki.osdev.org/ELF)\n# Motivation\n\nThis is low hanging VM optimization. Given defined sections in a binary VM implementers will be able to more efficiently allocate resources.\n# Specification\n\nThe format has four main segments header, code, init, data . None of the segments are required.  They are to be encoded as array. The order does not matter.\n## Prefixes\n\nEach segment should start with a single byte prefix identifying it.\n0x00 header\n0x01 code\n0x02 init\n0x03 data\n## header\n\nCurrently the header only holds information on where to load the data to. Head consists of an array of data segment headers. Data segments represent initialized data that is loaded directly from the binary into memory when the program starts.\n\nheader := [data segment headers]\nWhere each `data segment header` := [address, data offset, data, size]\n- address - is the address in memory of where to start loading the data\n- data offset - where the data starts in the `data` segment relative to the first byte in the data segment\n- data size - the number of bytes to load starting at the offset.\n\nIf a data segment head points to an indice that does not exist then the binary is invalid. \n## code\n\nThe code to be stored for the contract. The code is saved in the current way; it is hashed and stored at its hash. If the program has no data segment only the `init` should run and the account should not be saved.\n## init\n\nThe initialization code runs before the account creation is finalized. If the initialization code traps then the account should not be created.\n## data\n\nThe data segment is a single continuous segment. The header and data should be saved in account after the stateRoot field. \n## fees\n\nThe fee for placing code in the state would include the header, data and the code e.i. `codedeposit_fee` \\* (num_of_bytes(data + header + code))\n\nThe fee for loading the data section to memory is just the cost of memory expansion.\n# Rationale\n- The main rationale is to aid in optimizing the VM.  Batched preallocation of memory will be faster than runtime allocation. Also it make less incremental gas calculations then incremental allocation.  Lastly the number of opcodes used to allocate memory in runtime are reduced.\n- Encouraging the separation of data from logic should result in more reusable logic and make code deduplication easier.\n- Data - The rationale for the data section is that it should be used to save globals variables and other initialized data.\n- Initialization - Instead of forcing contracts to have creation code, it is now optional. This will save space by eliminating unnecessary setup code.\n# Backwards Compatibility\n\n Already initialized programs will work the same way. Txs that have the old format will become invalid.\n",
  "closed_by": {
    "login": "wanderer",
    "id": 158211,
    "node_id": "MDQ6VXNlcjE1ODIxMQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wanderer",
    "html_url": "https://github.com/wanderer",
    "followers_url": "https://api.github.com/users/wanderer/followers",
    "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
    "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
    "organizations_url": "https://api.github.com/users/wanderer/orgs",
    "repos_url": "https://api.github.com/users/wanderer/repos",
    "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wanderer/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/27/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/27/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158586471",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158586471",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158586471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODU4NjQ3MQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T04:17:30Z",
    "updated_at": "2015-11-21T04:20:23Z",
    "author_association": "MEMBER",
    "body": "As discussed on Gitter, I think some of the sections should be a bit more clear.\n\nSome notes:\n- Make it more clear that the _data_ sections represent mutable data loaded to the EVM memory every time the code is executed. The account is charged every time for memory expansion. Would it make sense to have some of these section loadable via special new opcodes?\n- Can any sections apart from _data_ be present multiple times?\n- If multiple _data_ sections are loaded non-continuously, the space between them must be also allocated (set to zeroes). The account should be charged for the total memory.\n- The init section will be executed before or after the data is loaded? Will that have access to the data section? The fees would also include the gas fees for the init code.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158586471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158587986",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158587986",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158587986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODU4Nzk4Ng==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T04:25:13Z",
    "updated_at": "2015-11-21T04:35:15Z",
    "author_association": "MEMBER",
    "body": "> Make it more clear that the data sections represent mutable data loaded to the EVM memory ever time the code is executed. The account is charged every time for memory expansion. Would it make sense to have some of these section loadable via special new opcodes?\n\ndata sections are **immutable** data loaded to the EVM memory every time the code is executed. its like `.data`\n\n> Can any sections apart from data be present multiple times?\n\nno. And there is only one data segment. There are multiple  `data segment headers` in the header. Each containing [address, data offset, data, size]\n\n> if multiple data sections are loaded non-continuously, the intermittent space must be allocated also with zeroes. The account should be charged for the total memory.\n\nYes that happens currently with memory expansion.\n\n> The init section will be executed before or after the data is loaded? Will that have access to the data section? The fees would also include the gas fees for the init code.\n\nThen init section only gets executed before the account is created. And it is not saved in the state.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158587986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158588752",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158588752",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158588752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODU4ODc1Mg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T04:31:54Z",
    "updated_at": "2015-11-21T04:33:42Z",
    "author_association": "MEMBER",
    "body": "> > Make it more clear that the data sections represent mutable data loaded to the EVM memory ever time\n> > the code is executed. The account is charged every time for memory expansion. Would it make sense to\n> > have some of these section loadable via special new opcodes?\n> \n> data sections are immutable data loaded to the EVM memory every time the code is executed.\n\nLet me clarify:\n- mutable from the perspective of the code, can be accessed/changed with MLOAD/MSTORE\n- immutable from the perspective of the ethereum state, the same data section will remain with the account\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158588752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158589232",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158589232",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158589232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODU4OTIzMg==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T04:33:54Z",
    "updated_at": "2015-11-21T04:33:54Z",
    "author_association": "MEMBER",
    "body": "> Let me clarify:\n> mutable from the perspective of the code, can be access/changed with MSTORE/MLOAD\n> immutable from the perspective of the ethereum state, the same data section will remain with account\n\nyep!\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158589232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158590479",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158590479",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158590479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODU5MDQ3OQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T04:51:03Z",
    "updated_at": "2015-11-21T04:51:03Z",
    "author_association": "MEMBER",
    "body": "Regarding the actual file structure I would suggest to consider something along the lines of the following. Assuming these files should have some tools in the future processing them (not only nodes and compilers, but decompilers, optimizers, etc).\n\nOption 1 (based on what you have suggested):\n- have a simple fixed header (magic, version)\n- have a simple TLV (tag-length-value) encoding: store the section type, followed by size, and content\n\n```\n- magic\n- version\n- 0x1\n- <header size>\n- <header>\n- 0x2\n- <code size>\n- <code>\n- 0x3\n- <init size>\n- <init>\n- 0x4\n- <data size>\n- <data>\n- 0x0 (end of file tag)\n```\n\nOption 2:\n- have a simple fixed header (magic, version)\n- size & offsets into the file where each of the sections are located (code, init, data)\n\nFor simplicity have all of them at 32 bits (or use more specific field widths, or even RLP):\n\n```\n- 32bit magic\n- 32bit version\n- 32bit code size\n- 32bit code offset\n- 32bit init size\n- 32bit init offset\n- 32bit data size\n- 32bit data offset\n```\n\nWhere size=0 means the section is absent.\n\nIn this case have your data section header at `<data offset>`.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158590479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158640506",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158640506",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158640506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODY0MDUwNg==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T13:30:14Z",
    "updated_at": "2015-11-21T13:30:30Z",
    "author_association": "MEMBER",
    "body": "@axic I made the assumption that it would be RLP encoded. With RLP does LV so we don't need our own LV... just T.  Although if we didn't use RLP this would be the way to go. It might be a bit lighter. One thing I might add would be to use LEB128 to encode the sizes if there is chance of overflowing 32bits.\n\n I think `version` is a good idea. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158640506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158657183",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158657183",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158657183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODY1NzE4Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T15:50:04Z",
    "updated_at": "2015-11-21T15:50:54Z",
    "author_association": "MEMBER",
    "body": "It would be great if you could give a bit more information about why this is beneficial. I don't see it as \"low hanging fruit\". Currently, immutable data is stored in code and copied to memory using CODECOPY upon request. The _upon request_ is important here: Different functions in the same contract may require different data in memory and thus initialise it differently.\n\nPlease also provide some use cases where immutable data is important. One use case I can think of that makes use of a lot of immutable data (and thus provides a reason to think about optimisation in the first place) is lookup-tables. But for lookup-tables, it is better _not_ to load them into memory completely - it is much better to only copy the parts we actually want to read.\n\nOne thing worth noting is that EVM code is different from traditional binaries: EVM code is loaded into memory / execution context each time a function is called and it is completely erased when the call is finished. Traditional binaries can stay in memory for weeks.\n\nMy opinion would be to keep the EVM itself as simple as possible and perform optimisations on the code itself. We can gladly talk about how compilers should generate the code so that it is easy to run for existing EVM implementations.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158657183/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158662098",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158662098",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158662098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODY2MjA5OA==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T16:59:12Z",
    "updated_at": "2015-11-21T16:59:12Z",
    "author_association": "MEMBER",
    "body": "> Different functions in the same contract may require different data in memory and thus initialise it differently.\n\nSure but there are often globals and statics that could take advantage of this. The idea is that there would be less operations (one big mem load at startup) then to load a static data word by word at runtime. `PUSH PUSH PUSH CODECOPY`\n\n> Please also provide some use cases where immutable data is important.\n\nLets look at some real world binaries  `objdump -s -j .rodata ./solc >` [dump.txt](https://github.com/ethereum/EIPs/files/40888/dump.txt)  also `objdump -s -j .data ./solc`.  Also [this article](https://en.wikipedia.org/wiki/Data_segment) give some good examples and history on `.data`\n\n> EVM code is loaded into memory / execution context each time a function is called and it is completely erased when the call is finished. Traditional binaries can stay in memory for weeks.\n\nYes EVM code is more ephemeral. Therefore it is more important to be able to quickly load EVM program. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158662098/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158668454",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158668454",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158668454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODY2ODQ1NA==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T18:17:18Z",
    "updated_at": "2015-11-21T18:17:18Z",
    "author_association": "MEMBER",
    "body": "@chriseth re: ephemeral; another way you can look at is that we mapping the VM's topology to a format. This should allow for fast loads times since it reduces code needed it initialize the environment.   \n\n> My opinion would be to keep the EVM itself as simple as possible\n\nIt doesn't add any functionality or complexity to the EVM itself; but it does demand more from the execution environment.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158668454/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158671557",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158671557",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158671557,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODY3MTU1Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T18:44:57Z",
    "updated_at": "2015-11-21T18:44:57Z",
    "author_association": "MEMBER",
    "body": "Sorry, but I still do not see the benefits. I do see the benefits of a data section for software running on actual machines where the memory is not completely erased after each function call.\n\nWe already have a place where data is stored and that is the code. It will be loaded into memory automatically by the runtime environment and can be accessed from the program in a much more efficient way than if some fixed data would be copied to memory for every single function call, even for trivial storage accessor calls.\n\nAs I wrote in my previous comment: If you want to optimize these kinds of things, we can talk about a marker in code that distinguishes between code and data.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158671557/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158671737",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158671737",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158671737,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODY3MTczNw==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T18:48:29Z",
    "updated_at": "2015-11-21T18:48:29Z",
    "author_association": "MEMBER",
    "body": "what would a `marker in code` look like?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158671737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158672153",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158672153",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158672153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODY3MjE1Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T18:53:49Z",
    "updated_at": "2015-11-21T18:53:49Z",
    "author_association": "MEMBER",
    "body": "The main problem this EIP wants to solve (or is there any?) seems to be that if you put data inside the code of a contract, a compiler might have a hard time because it is undecidable whether some portion of the code is reachable or not, so in the worst case, it would have to also compile the data.\nA good compiler will compile just in time and only compile the data blocks if they are jumped into. To make it easier for a compiler to detect early on which blocks are unlikely to be jumped into, we could add a magic string after which there is no real code to be executed. Of course, this can only be a recommendation.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158672153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158672848",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-158672848",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 158672848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODY3Mjg0OA==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-21T19:06:44Z",
    "updated_at": "2015-11-21T19:06:44Z",
    "author_association": "MEMBER",
    "body": "sure but then you get back to defining a binary format. Why not just put all the data in a .data section? Either way the execution environment is holding both code and all the data in memory at start. If you separate the code data from the code and put the data to VM memory the execution environment will not be using any more memory... its will cost execution environment nothing extra.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/158672848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/195544475",
    "html_url": "https://github.com/ethereum/EIPs/issues/27#issuecomment-195544475",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/27",
    "id": 195544475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTU0NDQ3NQ==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T20:46:27Z",
    "updated_at": "2016-03-11T20:46:27Z",
    "author_association": "MEMBER",
    "body": "discussion has moved here https://github.com/ethereum/evm2.0-design/  \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/195544475/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
