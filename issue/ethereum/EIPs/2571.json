{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2571",
  "id": 589731405,
  "node_id": "MDU6SXNzdWU1ODk3MzE0MDU=",
  "number": 2571,
  "title": "ERC-2571: Creators’ Royalty Token standard",
  "user": {
    "login": "mogya2",
    "id": 2200479,
    "node_id": "MDQ6VXNlcjIyMDA0Nzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2200479?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mogya2",
    "html_url": "https://github.com/mogya2",
    "followers_url": "https://api.github.com/users/mogya2/followers",
    "following_url": "https://api.github.com/users/mogya2/following{/other_user}",
    "gists_url": "https://api.github.com/users/mogya2/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mogya2/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mogya2/subscriptions",
    "organizations_url": "https://api.github.com/users/mogya2/orgs",
    "repos_url": "https://api.github.com/users/mogya2/repos",
    "events_url": "https://api.github.com/users/mogya2/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mogya2/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 16,
  "created_at": "2020-03-29T06:46:53Z",
  "updated_at": "2022-04-02T17:03:40Z",
  "closed_at": "2022-04-02T17:03:40Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\n---\r\neip: 2571\r\ntitle: Creators’ Royalty Token standard\r\nauthor: Nao Hanamura(@naomasabit),\r\n       Shoji Fukunaga(@mogya2) <s.fukunaga@conata.world>,\r\n       Wataru Shinohara(@wshino),\r\n       Shumpei Koike(@shunp), \r\n       Akira Tsuruoka(@akira-19)\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/2571\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2020-03-29\r\n---\r\n```\r\n## Simple Summary\r\nA standard interface for non-fungible tokens that enables artwork creators to receive a fee not only when their works are sold for the first time, but also their works are resold. \r\n## Abstract\r\nThis standard outlines a smart contract interface based on ERC-721, which is a standard for non-fungible tokens. The key issue of using it is that an original author who creates an item cannot receive any fees after giving or selling it to another.  Creators' Royalty Token enables creators to get a fee whenever the token is transferred, which has a function of the decentralized exchange. Hence, a partial amount of the transaction value will always be paid to the creator. \r\n## Motivation\r\nIt is predicted that a lot of creators who design a piece of artwork would associate their items with non-fungible tokens based on ERC-721.  The expected issue in this case is that the artwork would be resold on the secondary market, such as OpenSea, even though the artist cannot get any fees.  This problem often happens even in the real world, and that makes creators disappointed. \r\nThe new functionality is possible with the design of receiving a fee for the sale whenever non-fungible tokens are transferred. You do not need to embed any code but use this interface instead of ERC-721 so that artwork creators can receive a fee. Currently, we are developing a product called [Conata](https://conata.world/) and will implement the token based on this standard.​\r\n## Specification\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.\r\n​\r\n**Smart contracts implementing the ERC-2571 standard MUST implement all of the functions in the ERC-2571 interface.**\r\n​\r\n**Smart contracts implementing the ERC-2571 standard MUST implement the ERC-721.**\r\n\r\n```solidity\r\ncontract IERC2571 is ERC721Full, ERC721Mintable, Ownable {\r\n​\r\n    event ReadyForSale(\r\n        address buyer,\r\n        uint256 tokenId,\r\n        uint256 price,\r\n        uint256 expireBlockNumber);\r\n​\r\n    function getPublisherFeeRate() public view returns (uint256);\r\n​\r\n    function getCreator(uint256 tokenId) public view returns (address payable);\r\n​\r\n    function getCreatorFeeRate(uint256 tokenId) public view returns (uint256);\r\n​\r\n    function getTradeExpires(bytes32 tradeHash) public view returns (uint256);\r\n​\r\n    function getTradePrices(bytes32 tradeHash) public view returns (uint256);\r\n​\r\n    function setPublisherFeeRate(uint256 feeRate) external;\r\n​\r\n    function setCreator(uint256 tokenId, address payable creator) public;\r\n​\r\n    function setCreatorFeeRate(uint256 tokenId, uint256 feeRate) external;\r\n​\r\n    function readyForSale(address buyer, uint256 tokenId, uint256 price, uint256 expireBlockNumber) external;\r\n​\r\n    function cancelTradeOrder(address buyer, uint256 tokenId) external;\r\n​\r\n    function tradeAndDistributeFees(address payable seller, uint256 tokenId) external payable;\r\n}\r\n​\r\n```\r\nThe token contract MUST implement the above contract. The implementation MUST follow the specifications described below.​\r\n\r\n**Creators' Royalty Token Overview**​\r\n<img width=\"538\" alt=\"Screenshot 2020-04-01 02 26 09\" src=\"https://user-images.githubusercontent.com/2200479/78058154-d9042a80-73c2-11ea-9252-03346bfc49ca.png\">\r\n\r\n## Creators' Royalty Token\r\n**Buyer**\r\nEveryone can buy non-fungible tokens via Creators' Royalty Token contract. The buyer pays ETH as the token price. Paid ETH is distributed to Publisher and Creator as a trade fee.\r\n​\r\n**Seller** \r\nThe owner of a non-fungible token can sell it via Creators' Royalty Token contract. The seller sends the non-fungible token to a buyer.\r\n​\r\n**Creator**\r\nCreators produce artworks such as characters, music and digital arts. Their artworks are published as non-fungible tokens.\r\n​\r\n**Publisher**\r\nPublishers mint a Creators’ token instead of the creator. The role of them is to advertise artworks and enhance their brand images. The Creators' address should be set if there is no publisher. In this case, creators manage their token themselves.\r\n\r\n## View Functions\r\nThe view functions detailed below MUST be implemented.\r\n\r\n​**getPublisherFeeRate function**\r\n\r\n`function getPublisherFeeRate() public view returns (uint256)`\r\n\r\nGet the fee rate used on a publisher.\r\nreturns: Fee rate of the publisher\r\n​\r\n**getCreator function**\r\n\r\n`function getCreator(uint256 tokenId) public view returns \r\n(address payable)`\r\n​\r\nGet the creators' address.\r\nparams: tokenId: tokenID used on ERC721\r\nreturns: Address of the creator\r\n​\r\n**getCreatorFeeRate function**\r\n\r\n`function getCreatorFeeRate(uint32 tokenId) public view returns (uint256)`\r\n​\r\nGet the fee rate according to the tokenId.\r\nparams: tokenIdassetType: tokenID used on ERC721\r\nreturns: Fee rate of the asset type\r\n​\r\nNOTE: If the contract has a large number of tokenIDs, you can optionally set the classification as an asset type by token digits and link the classification to the creator instead of using the tokenID. In that case, the contract has to have a state valuable that plays a role as a filter.\r\n​\r\nNOTE: If the contract has a large number of tokenIDs, you can optionally set the classification as an asset type by token digits and link the classification to the creator instead of using the tokenID. In that case, the contract has to have a state valuable that plays a role as a filter.\r\n- The buyer argument MUST be the address of an account/contract that wants to buy the asset (is not the same as msg.sender, which is the publisher’s address)\r\n- The price argument MUST be more than zero.\r\n- The expireBlockNumber MUST be between more than zero and less than the number of the current block. \r\n- The keccak256 hash, which is calculated by msg.sender, buyer and tokenId,  is stored as state value to use in the TradeAndDistributionFees function.\r\n\r\n(implementation)\r\n```solidity\r\nfunction readyForSale(\r\n   address buyer,\r\n   uint256 tokenId,\r\n   uint256 price,\r\n   uint256 expireBlockNumber) external {\r\n        require(buyer != address(0), \"Buyer doesn't exist\");\r\n        require(price > 0, \"Price argument must be more than zero\");\r\n        require(expireBlockNumber > 0, \"ExpireBlockNumber must be more than zero\");\r\n        require(expireBlockNumber > block.number, \"ExpireBlockNumber is expired\");\r\n        bytes32 tradeHash = keccak256(abi.encodePacked(msg.sender, buyer, tokenId));\r\n        _setTradeExpires(tradeHash, expireBlockNumber);\r\n        _setTradePrices(tradeHash, price);\r\n        TradeOrders[tradeHash]._isCancelled = false;\r\n        emit ReadyForSale(buyer, tokenId, price, expireBlockNumber);\r\n    }\r\n```\r\nNOTE: This function emits the event named ReadyForSale.\r\n\r\n​**Trade and Distribution Fees**​\r\n\r\n`function tradeAndDistributeFees(address payable seller, uint256 tokenId) external payable`\r\n​\r\nCall this function to transfer the ownership of the artwork and distribute fees to the author. In this function, the two functions are invoked; _signAndPayTransfer and _changeTransfer.\r\n​\r\n- The seller argument MUST be the address of an account/contract that wants to sell the asset.\r\n- The block number, when being called, MUST NOT exceed the limit data that can be fetched by the getTradeExpires function. -- - The block number is associated with a hash value, which is created by the seller address, the msg.sender address and tokenId.\r\n- The msg.value MUST be more than the trade price, which is set through the _setTradePrices function.\r\n- The hash value, which is calculated from the seller, msg.sender and tokenId, is used for checking whether or not it matches the value that is created in the ReadyForSale function.\r\n- _tradeAndDistributeFees is a private function that distributes fees, which are computed in this function, to the creator, and the publisher. The code below is the implementation example.\r\n```solidity\r\nfunction _tradeAndDistributeFees(address payable seller, uint256 tokenId, uint256 price) internal {\r\n        uint256 creatorFeeRate = getCreatorFeeRate(tokenId);\r\n        uint256 creatorFee = _computeCreatorFee(price, creatorFeeRate);\r\n        uint256 publisherFee = _computePublisherFee(price);\r\n        uint256 payment = uint256(price.sub(creatorFee).sub(publisherFee));\r\n​\r\n        address payable creator = getCreator(tokenId);\r\n​\r\n        _transferFrom(seller, msg.sender, tokenId);\r\n        creator.transfer(creatorFee);\r\n        _publisher.transfer(publisherFee);\r\n        seller.transfer(payment);\r\n }\r\n​\r\n```\r\n`_changeTransfer` is a private function that returns ETH to the sender, which is the remaining number of the transaction. The code below is the implementation example.\r\n```solidity\r\nfunction _changeTransfer(uint256 tradePrice) internal {\r\n        if (msg.value > tradePrice) {\r\n            uint256 change = msg.value.sub(tradePrice);\r\n            msg.sender.transfer(change);\r\n        }\r\n}\r\n```\r\n\r\nNOTE: The Transfer event, which is defined on the ERC-721, is emitted by this function.\r\n​\r\nExample) Creators' Royalty Tokens related sequence flow on Conata Project.\r\n\r\n![conata (1)](https://user-images.githubusercontent.com/31416389/77844506-5cb2f100-71e2-11ea-93ea-6369a517fcbc.jpg)\r\n​\r\n**Cancel TradeOrder**\r\n\r\n`function cancelTradeOrder(address buyer, uint256 tokenId) external`\r\n\r\nCall this function so that the buyer could cancel the order of the trade.\r\n- The buyer argument MUST be the address of an account/contract that ordered the request for buying the token ID.\r\n- The tokenId argument MUST be the number that the buyer has chosen.\r\n\r\n**Setter Function**\r\n\r\n`function setPublisherFeeRate(uint256 feeRate) external`\r\n\r\nThe feeRate argument CAN be set as a publisher fee rate by the owner of the contract.\r\n\r\n​`function setCreator(uint256 tokenId, address payable creator) public`​\r\n\r\nThe creator argument MUST be the address of an account that created the artwork. The owner of the contract CAN map the tokenId and creator address.\r\n\r\n`function setCreatorFeeRate(uint256 tokenId, uint256 feeRate) external`​\r\n\r\nThe feeRate argument CAN be set as a creator fee rate by the owner of the contract.\r\n\r\n## Rationale\r\n**Based on ERC721**\r\n\r\nERC-721 is widely applied to many projects that use non-fungible tokens such as CryptoKitties. Since a creators' artwork is registered as non-fungible tokens, this standard inherits ERC-721. \r\n​\r\nEach artwork has a unique token ID. Also, the token will be transferred through ERC-721 _transferFrom function in tradeAndDistributeFee function, though there are some restrictions to transfer tokens as explained in the following section.\r\n​\r\n**Limited Transfer**\r\n\r\nThis standard doesn’t provide a general transfer function, by which non-fungible tokens holders can transfer their non-fungible tokens freely whenever they want. This is because creators can’t get royalties if it is possible. Transfer is executed with tradeAndDistributeFees function, and every time holders transfer their non-fungible tokens, the creators can get royalties through the function.\r\n\r\n**Decentralized Exchange Function**\r\n\r\nThis standard provides DEX through readyForSale function and tradeAndDistributeFee function. In order to allow a buyer to purchase a non-fungible token, the token’s holder (seller) passes a buyer’s address and a token ID as arguments to readyForSale function, and stores the hash value of the arguments with the seller’s own address. After that, the buyer calls tradeAndDistributeFee, which checks the hash value, and transfers the NFT and distributes the fees if the hash value is correct.​\r\n\r\n**Fee Distribution**\r\n\r\nIn this standard, not only creators but also publishers can get some fees. Furthermore, publishers can set the fee rate like OpenSea, which is one of the most famous non-fungible token secondary markets. A fee rate for publishers is set through setPublisherFeeRate and A fee rate for creators is set through setCreatorFeeRate.\r\n​\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2571/reactions",
    "total_count": 12,
    "+1": 12,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/609817308",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-609817308",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 609817308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTgxNzMwOA==",
    "user": {
      "login": "insiderq",
      "id": 8429372,
      "node_id": "MDQ6VXNlcjg0MjkzNzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8429372?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/insiderq",
      "html_url": "https://github.com/insiderq",
      "followers_url": "https://api.github.com/users/insiderq/followers",
      "following_url": "https://api.github.com/users/insiderq/following{/other_user}",
      "gists_url": "https://api.github.com/users/insiderq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/insiderq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/insiderq/subscriptions",
      "organizations_url": "https://api.github.com/users/insiderq/orgs",
      "repos_url": "https://api.github.com/users/insiderq/repos",
      "events_url": "https://api.github.com/users/insiderq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/insiderq/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-06T14:07:31Z",
    "updated_at": "2020-04-06T14:07:31Z",
    "author_association": "NONE",
    "body": "Hey there, \r\nIt's Alex from Rarible, we are working on implementing on-chain royalties on the platform right now. We'd like to participate in this EIP and adopt it if it's suitable for our platform. We also are working closely with OpenSea. \r\nSo i have several questions regarding the current proposal:\r\n1 - why there should be an additional call for making the token available for sale? From my. perspective it's enough to have the fee rate stated in a contract so that every platform can obtain this information and distribute royalties accordingly. \r\n2 - Can author change this fee rate after deployment? It would be unfair for the buyer who already purchased it. \r\n3 - We have a single collection for all of out authors and we want to let them choose their royalty fee level independently. How about we introduce fee rate on the token level that overrides fee level of a collection?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/609817308/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/612009305",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-612009305",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 612009305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjAwOTMwNQ==",
    "user": {
      "login": "akira-19",
      "id": 38364091,
      "node_id": "MDQ6VXNlcjM4MzY0MDkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/38364091?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akira-19",
      "html_url": "https://github.com/akira-19",
      "followers_url": "https://api.github.com/users/akira-19/followers",
      "following_url": "https://api.github.com/users/akira-19/following{/other_user}",
      "gists_url": "https://api.github.com/users/akira-19/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akira-19/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akira-19/subscriptions",
      "organizations_url": "https://api.github.com/users/akira-19/orgs",
      "repos_url": "https://api.github.com/users/akira-19/repos",
      "events_url": "https://api.github.com/users/akira-19/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akira-19/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-10T12:32:00Z",
    "updated_at": "2020-04-10T12:33:44Z",
    "author_association": "NONE",
    "body": "Hi @insiderq,\r\nIt's Akira, one of the authors.\r\nThank you for your great questions !\r\nHere is the answers.\r\n\r\n1. Because, without the function, someone could buy a token from the token owner even if the owner doesn’t want to sell it.\r\n2. Your concern is right. If the fee rate is raised after someone purchased the token, it is more difficult to sell the token for buyers than the time they bought. So it is better to put limits like creators and publishers can’t raise the original fee rate.\r\n3. Either a contract owner or a token owner could have authority to change the rate. In our case, a platform can set a fee rate in each token. What do you mean in a single collection? Can you give us an example?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/612009305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/632090070",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-632090070",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 632090070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjA5MDA3MA==",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T13:36:00Z",
    "updated_at": "2020-05-21T21:35:23Z",
    "author_association": "NONE",
    "body": "Hello. \r\n\r\nI really like where you guys are coming from, you are absolutely right when it come to the fact that promising second-hand remuneration to creators is what could make them switch from old world licensed creation to NFT backed creation.\r\n\r\nHowever, I feel like most of your functionalities listed could be left at the token publisher discretion instead of being part of the Standard.\r\n\r\nA Standard goal is to promote inter-operability by describing interaction channels and shared predicate/postulate contracts for each of those channels, not to describe what must happen \"inside the box\" of each implementation.  \r\n\r\n- You are suggesting that 11 (!) extra functions must be implemented in order to follow this standard.\r\nNone of them have clear predicate nor postulate. I feel what is being described is an implementation of the standard, not the standard itself.\r\ne.g : Why is `setCreatorFeeRate` listed if it is meant to not be called by parties outside of the publisher/creator ecosystem ?\r\n\r\n-  If a  token do not need some of those functions (for example, no creators, only a publisher), should these functions still be implemented ? What are the throw conditions ? What are the consequences on ERC-165 signature ?\r\n\r\n- This standard does not allow gasless listing and auctionning -unless i'm missing something-, which is a core feature of marketplaces  such as OpenSea. \r\n\r\nDo you feel that following the following standard would prevent you guys from implementing any of your desired features ?\r\nhttps://github.com/ethereum/EIPs/issues/2665\r\n\r\nAll of those can be implemented under the hood of the proposed `getTransferFee` function\r\n```solidity       \r\nfunction getPublisherFeeRate() public view returns (uint256);\r\nfunction getCreator(uint256 tokenId) public view returns (address payable);\r\nfunction getCreatorFeeRate(uint256 tokenId) public view returns (uint256);\r\nfunction getTradeExpires(bytes32 tradeHash) public view returns (uint256);\r\nfunction getTradePrices(bytes32 tradeHash) public view returns (uint256);\r\n​function setPublisherFeeRate(uint256 feeRate) external;\r\nfunction setCreator(uint256 tokenId, address payable creator) public;\r\nfunction setCreatorFeeRate(uint256 tokenId, uint256 feeRate) external;`\r\n```\r\n\r\nAnd the rest be implemented under the throw conditions and payable mutability of the Transfer/Approve functions, which are already part of the ERC-721 standard.\r\n\r\n```solidity   \r\nevent ReadyForSale(\r\n        address buyer,\r\n        uint256 tokenId,\r\n        uint256 price,\r\n        uint256 expireBlockNumber);\r\n​\r\nfunction readyForSale(address buyer, uint256 tokenId, uint256 price, uint256 expireBlockNumber) external;\r\nfunction cancelTradeOrder(address buyer, uint256 tokenId) external;\r\nfunction tradeAndDistributeFees(address payable seller, uint256 tokenId) external payable;\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/632090070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/640205803",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-640205803",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 640205803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDIwNTgwMw==",
    "user": {
      "login": "naomasabit",
      "id": 31416389,
      "node_id": "MDQ6VXNlcjMxNDE2Mzg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/31416389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naomasabit",
      "html_url": "https://github.com/naomasabit",
      "followers_url": "https://api.github.com/users/naomasabit/followers",
      "following_url": "https://api.github.com/users/naomasabit/following{/other_user}",
      "gists_url": "https://api.github.com/users/naomasabit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naomasabit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naomasabit/subscriptions",
      "organizations_url": "https://api.github.com/users/naomasabit/orgs",
      "repos_url": "https://api.github.com/users/naomasabit/repos",
      "events_url": "https://api.github.com/users/naomasabit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naomasabit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-07T11:51:24Z",
    "updated_at": "2020-06-07T11:51:24Z",
    "author_association": "NONE",
    "body": "@Nokhal \r\nThank you for your comment. It is right that there are some ambiguous points as a \"standard\" as your points, so it should be provided reference implementation later. In addition, it should be considered to implement the compatibility with ERC165 and remove publisher-related functions from MUST.\r\n\r\n> Do you feel that following the following standard would prevent you guys from implementing any of your desired features ?\r\n\r\nThis standard is to distribute fees as a percentage of the NFT sale, not as a fixed fee under this 2571 standard. It's pretty hard to know this in existing DEXs because we have to use price oracle or get them to support this to get sales price. That's why, we designed 2571 to be tightly coupled with DEX functions, unlike 2665. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/640205803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/754732797",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-754732797",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 754732797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NDczMjc5Nw==",
    "user": {
      "login": "wildlifechorus",
      "id": 3536846,
      "node_id": "MDQ6VXNlcjM1MzY4NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3536846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wildlifechorus",
      "html_url": "https://github.com/wildlifechorus",
      "followers_url": "https://api.github.com/users/wildlifechorus/followers",
      "following_url": "https://api.github.com/users/wildlifechorus/following{/other_user}",
      "gists_url": "https://api.github.com/users/wildlifechorus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wildlifechorus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wildlifechorus/subscriptions",
      "organizations_url": "https://api.github.com/users/wildlifechorus/orgs",
      "repos_url": "https://api.github.com/users/wildlifechorus/repos",
      "events_url": "https://api.github.com/users/wildlifechorus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wildlifechorus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-05T16:09:13Z",
    "updated_at": "2021-01-05T16:09:13Z",
    "author_association": "NONE",
    "body": "First of all. Great job! Are you guys still working on this? Are there any competing standards besides 2665?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/754732797/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 4
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/786075372",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-786075372",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 786075372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NjA3NTM3Mg==",
    "user": {
      "login": "netsparkle",
      "id": 30155664,
      "node_id": "MDQ6VXNlcjMwMTU1NjY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/30155664?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/netsparkle",
      "html_url": "https://github.com/netsparkle",
      "followers_url": "https://api.github.com/users/netsparkle/followers",
      "following_url": "https://api.github.com/users/netsparkle/following{/other_user}",
      "gists_url": "https://api.github.com/users/netsparkle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/netsparkle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/netsparkle/subscriptions",
      "organizations_url": "https://api.github.com/users/netsparkle/orgs",
      "repos_url": "https://api.github.com/users/netsparkle/repos",
      "events_url": "https://api.github.com/users/netsparkle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/netsparkle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-25T17:34:06Z",
    "updated_at": "2021-02-25T17:34:06Z",
    "author_association": "NONE",
    "body": "Within this standard, can an argument be used to define a minimum fee in order to prevent a sale for a minimal amount which would circumvent a fee, while still allowing for percentage where the percentage would be more than the minimum?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/786075372/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 5
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/817011142",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-817011142",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 817011142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzAxMTE0Mg==",
    "user": {
      "login": "claytantor",
      "id": 407854,
      "node_id": "MDQ6VXNlcjQwNzg1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/407854?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/claytantor",
      "html_url": "https://github.com/claytantor",
      "followers_url": "https://api.github.com/users/claytantor/followers",
      "following_url": "https://api.github.com/users/claytantor/following{/other_user}",
      "gists_url": "https://api.github.com/users/claytantor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/claytantor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/claytantor/subscriptions",
      "organizations_url": "https://api.github.com/users/claytantor/orgs",
      "repos_url": "https://api.github.com/users/claytantor/repos",
      "events_url": "https://api.github.com/users/claytantor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/claytantor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-09T22:43:45Z",
    "updated_at": "2021-04-09T22:43:45Z",
    "author_association": "NONE",
    "body": "Looove this standard. Is there any reason I can't just implement for my DAPP it and hope for the best?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/817011142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/817065274",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-817065274",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 817065274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzA2NTI3NA==",
    "user": {
      "login": "LongTheSnake",
      "id": 79592067,
      "node_id": "MDQ6VXNlcjc5NTkyMDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/79592067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LongTheSnake",
      "html_url": "https://github.com/LongTheSnake",
      "followers_url": "https://api.github.com/users/LongTheSnake/followers",
      "following_url": "https://api.github.com/users/LongTheSnake/following{/other_user}",
      "gists_url": "https://api.github.com/users/LongTheSnake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LongTheSnake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LongTheSnake/subscriptions",
      "organizations_url": "https://api.github.com/users/LongTheSnake/orgs",
      "repos_url": "https://api.github.com/users/LongTheSnake/repos",
      "events_url": "https://api.github.com/users/LongTheSnake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LongTheSnake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-10T02:33:41Z",
    "updated_at": "2021-04-10T02:33:41Z",
    "author_association": "NONE",
    "body": "You are free to go, it's [CC0 licensed](https://creativecommons.org/publicdomain/zero/1.0/), « You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permission. »\r\nYou might wanna take into account some comments from [Discussion for ERC-721 Royalties EIP](https://github.com/ethereum/EIPs/issues/2907#issuecomment-693419360)(the whole thread is nice reading😍) such as « Consider renaming creator to royaltyRecipient in the code for clarity. Royalty recipient should probably be transferable in most cases, and so creator isn't really accurate. »",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/817065274/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/830766645",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-830766645",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 830766645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDc2NjY0NQ==",
    "user": {
      "login": "NightRabbit",
      "id": 512524,
      "node_id": "MDQ6VXNlcjUxMjUyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NightRabbit",
      "html_url": "https://github.com/NightRabbit",
      "followers_url": "https://api.github.com/users/NightRabbit/followers",
      "following_url": "https://api.github.com/users/NightRabbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/NightRabbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NightRabbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NightRabbit/subscriptions",
      "organizations_url": "https://api.github.com/users/NightRabbit/orgs",
      "repos_url": "https://api.github.com/users/NightRabbit/repos",
      "events_url": "https://api.github.com/users/NightRabbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NightRabbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-02T07:47:36Z",
    "updated_at": "2021-05-02T07:47:36Z",
    "author_association": "NONE",
    "body": "Is this post still active?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/830766645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/834728097",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-834728097",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 834728097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDcyODA5Nw==",
    "user": {
      "login": "MorphBC",
      "id": 40269369,
      "node_id": "MDQ6VXNlcjQwMjY5MzY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/40269369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MorphBC",
      "html_url": "https://github.com/MorphBC",
      "followers_url": "https://api.github.com/users/MorphBC/followers",
      "following_url": "https://api.github.com/users/MorphBC/following{/other_user}",
      "gists_url": "https://api.github.com/users/MorphBC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MorphBC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MorphBC/subscriptions",
      "organizations_url": "https://api.github.com/users/MorphBC/orgs",
      "repos_url": "https://api.github.com/users/MorphBC/repos",
      "events_url": "https://api.github.com/users/MorphBC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MorphBC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-07T19:43:31Z",
    "updated_at": "2021-05-07T19:43:31Z",
    "author_association": "NONE",
    "body": "It seems Rarible and OpenSea implemented their own Royalty fees and activity on this EIP vanished",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/834728097/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841619953",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-841619953",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 841619953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTYxOTk1Mw==",
    "user": {
      "login": "MyEtherAuthority",
      "id": 43878603,
      "node_id": "MDQ6VXNlcjQzODc4NjAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/43878603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MyEtherAuthority",
      "html_url": "https://github.com/MyEtherAuthority",
      "followers_url": "https://api.github.com/users/MyEtherAuthority/followers",
      "following_url": "https://api.github.com/users/MyEtherAuthority/following{/other_user}",
      "gists_url": "https://api.github.com/users/MyEtherAuthority/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MyEtherAuthority/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MyEtherAuthority/subscriptions",
      "organizations_url": "https://api.github.com/users/MyEtherAuthority/orgs",
      "repos_url": "https://api.github.com/users/MyEtherAuthority/repos",
      "events_url": "https://api.github.com/users/MyEtherAuthority/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MyEtherAuthority/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-15T08:07:53Z",
    "updated_at": "2021-05-15T12:28:28Z",
    "author_association": "NONE",
    "body": "Hi, anyone has code sample implementation of ERC2571 with ERC721  ?\r\n\r\nThanks,",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841619953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841723773",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-841723773",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 841723773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTcyMzc3Mw==",
    "user": {
      "login": "mogya2",
      "id": 2200479,
      "node_id": "MDQ6VXNlcjIyMDA0Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2200479?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mogya2",
      "html_url": "https://github.com/mogya2",
      "followers_url": "https://api.github.com/users/mogya2/followers",
      "following_url": "https://api.github.com/users/mogya2/following{/other_user}",
      "gists_url": "https://api.github.com/users/mogya2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mogya2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mogya2/subscriptions",
      "organizations_url": "https://api.github.com/users/mogya2/orgs",
      "repos_url": "https://api.github.com/users/mogya2/repos",
      "events_url": "https://api.github.com/users/mogya2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mogya2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-15T20:53:26Z",
    "updated_at": "2021-05-15T20:54:56Z",
    "author_association": "NONE",
    "body": "We are currently implementing a sample project.\r\nWe are planning to update the specification because some parts are not in accordance with the current NFT specification from the beginning.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/841723773/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/871334086",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-871334086",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 871334086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTMzNDA4Ng==",
    "user": {
      "login": "andrewschreiber",
      "id": 1892071,
      "node_id": "MDQ6VXNlcjE4OTIwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1892071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewschreiber",
      "html_url": "https://github.com/andrewschreiber",
      "followers_url": "https://api.github.com/users/andrewschreiber/followers",
      "following_url": "https://api.github.com/users/andrewschreiber/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewschreiber/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewschreiber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewschreiber/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewschreiber/orgs",
      "repos_url": "https://api.github.com/users/andrewschreiber/repos",
      "events_url": "https://api.github.com/users/andrewschreiber/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewschreiber/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-30T11:47:35Z",
    "updated_at": "2021-06-30T11:47:35Z",
    "author_association": "NONE",
    "body": "Looks like the Royalty standard for 721s and 1155s will be EIP-2981. https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2981.md ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/871334086/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/923105911",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-923105911",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 923105911,
    "node_id": "IC_kwDOAq426M43BXp3",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-20T16:57:21Z",
    "updated_at": "2021-09-20T16:57:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "It will indeed be difficult for 2571 to gain adoption compared to 2981 unless 2571 is drastically simplified imo.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/923105911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1073044934",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-1073044934",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 1073044934,
    "node_id": "IC_kwDOAq426M4_9V3G",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-03-19T17:03:12Z",
    "updated_at": "2022-03-19T17:03:12Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1073044934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1086678717",
    "html_url": "https://github.com/ethereum/EIPs/issues/2571#issuecomment-1086678717",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2571",
    "id": 1086678717,
    "node_id": "IC_kwDOAq426M5AxWa9",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-04-02T17:03:39Z",
    "updated_at": "2022-04-02T17:03:39Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1086678717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
