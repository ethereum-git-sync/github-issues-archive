{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/860",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/860/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/860/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/860/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/860",
  "id": 292680920,
  "node_id": "MDU6SXNzdWUyOTI2ODA5MjA=",
  "number": 860,
  "title": "ERC860: Custodian-Client Contract Standard",
  "user": {
    "login": "yhuag",
    "id": 12862563,
    "node_id": "MDQ6VXNlcjEyODYyNTYz",
    "avatar_url": "https://avatars.githubusercontent.com/u/12862563?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yhuag",
    "html_url": "https://github.com/yhuag",
    "followers_url": "https://api.github.com/users/yhuag/followers",
    "following_url": "https://api.github.com/users/yhuag/following{/other_user}",
    "gists_url": "https://api.github.com/users/yhuag/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yhuag/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yhuag/subscriptions",
    "organizations_url": "https://api.github.com/users/yhuag/orgs",
    "repos_url": "https://api.github.com/users/yhuag/repos",
    "events_url": "https://api.github.com/users/yhuag/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yhuag/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-01-30T07:37:33Z",
  "updated_at": "2022-01-02T02:03:53Z",
  "closed_at": "2022-01-02T02:03:53Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "> _This standard is co-authored by @tina1998612_\r\n\r\n## Preamble\r\n\r\n    EIP: <to be assigned>\r\n    Title: Custodian-Client Contract Standard\r\n    Author: Lee Ting-Ting <tingtinglee.codingirl@gmail.com>, Hu Yao-Chieh <cs.yaochieh.hu@gmail.com>\r\n    Type: Standard\r\n    Category: ERC\r\n    Status: Draft\r\n    Created: 2018-01-30\r\n\r\n## Simple Summary\r\nA standard interface of custodian smart contracts that allows on-chain creating and tracking of client smart contract instances. A two-level smart contract hierarchy is therefore constructed. A typical use case is valuable asset management, ranging from digital coupons and concert tickets to high-value commodities such as diamond grading certificates.\r\n\r\nThe paper of this standard specification has been recognized and accepted by the 16th ACM International Conference on Mobile Systems, Applications, and Services - Cryptocurrencies and Blockchains for Distributed Systems. (Munich, Germany)\r\n\r\n> **ACM Reference Format:**\r\n> Yao-Chieh Hu, Ting-Ting Lee, Dimitris Chatzopoulos, and Pan Hui. 2018. Hierarchical interactions between Ethereum smart contracts across Testnets. In _Proceedings of MobiSysâ€™18_. ACM, New York, NY, USA, 6 pages. https: //doi.org/http://dx.doi.org/XXXX.XXXX (To be published)\r\n\r\n## Abstract\r\nThis standard allows for the implementation of a standard API for Custodian-Client Contracts (henceforth referred to as \"CCCs\") within smart contracts. This standard also proposes a two-level hierarchical architecture that is composed of two types of smart contracts: custodian and client. A custodian contract can deploy on-demand client contract, access their data and call their methods to perform specific updates. Furthermore, a framework is developed to allow client contracts to share common variables among all or partial group of the contracts, which may only be mutated by its creator, custodian contracts. Specifically, this standard provides basic functionality to establish associations between a custodian smart contract and multiple client smart contracts.\r\n\r\n<img width=\"732\" alt=\"custodian-client\" src=\"https://user-images.githubusercontent.com/12862563/39403195-490fc082-4ba7-11e8-9792-2903c5a68b81.png\">\r\n\r\n## Motivation\r\nCompared to ERC721, this standard creates the new entity as a smart contract instead of an instance of Struct in view of the following reasons: \r\n1. Provide flexible independence. Client contracts are independent from each other in terms of direct association, yet connected with shared states which are traceable by the custodian contract. \r\n2. Minimize loss when attacks take place. Since smart contracts are independent from each other once created, the stakes of attacks are restrained in one single contract rather than exposing the entire contract system as an attack interface. \r\n3. Least control and zero knowledge from upstream. Custodian contract can have no knowledge to any of the client contract except its deployed contract address while preserving sufficient controls and traceable records of it. \r\n4. Flexibility on the newly created entity. As new instances are created in the form of smart contracts, it can be made compatible with ERC20 or other standards without limitations.\r\n\r\nTo summarize, ERC860 can be viewed as an extended standard from ERC721 with a different implementation that preserves the specialty and independence of each token instance, improves the fraud resistance, and provides flexible compatibility with other standards in the meantime.\r\n\r\n## Use Case\r\nA representative example of smart contracts that interact in a hierarchical way is the one of a ticket selling contract. Each ticket is created automatically by the contract of the higher level. As shown in the following figure, whenever a customer buys a ticket, the ticket seller creates a new ticket and gives it to the customer (i.e., deploys a new smart contract and assigns as owner the id of the customer). As whom to distribute tickets to its customers, the ticket seller performs the role of a Custodian smart contract. Client smart contract will be created and owned by the customer once the ticket is purchased. Customers are allowed to exchange or sell tickets to others by transferring the ownership of his/her Client smart contract. The ticket seller is able to retrieve the updated information when querying since the Client contracts can be restored by the deployment address which the Custodian smart contract keeps track of. If as time passes by, the ticket seller wishes to update the shared random seed to boost security, the Custodian smart contract will call the Client contracts again by its deployed address and perform the update accordingly.\r\n\r\n![ticketselling](https://user-images.githubusercontent.com/12862563/39403204-8a470722-4ba7-11e8-9fb3-fe6ae7b34775.png)\r\n\r\n## Specification\r\n\r\n### Custodian Contract\r\n#### getClient\r\nA phonebook-like mapping from a given client ID to the corresponding client contract address.\r\n```solidity\r\nmapping (uint256 => address) clients;   // client IDs --> client contract addresses\r\n```\r\n\r\n#### createClient\r\nCreate a client with a generated ID (generation mechanism specified below) and return the ID.\r\n```solidity\r\nfunction createClient() public returns (uint256);\r\n```\r\n\r\n#### generateID\r\nGenerate an ID based on the created client contract address.\r\n```solidity\r\nfunction generateID(address _clientAddress) returns (uint256);\r\n```\r\n\r\n#### Event: CreateClient\r\nMUST be triggered when `createClient` was successfully called.\r\n```solidity\r\nevent CreateClient(uint256 _clientId, address _clientAddress);\r\n```\r\n\r\n### Client Contract\r\nSmart contracts associated with ownership that can be **obtained** and **transferred**. Here is a concrete example of [Digital Coupon Smart Contract](https://github.com/BlockChain-UROP/ECoupon-on-blockchain/blob/master/contracts/Coupon.sol).\r\n\r\n## Solidity Interface\r\n```solidity\r\npragma solidity ^0.4.18;\r\n\r\ncontract Custodian {\r\n    event CreateClient(uint256 _clientId, address _clientAddress);\r\n\r\n    mapping (uint256 => address) clients;\r\n    \r\n    function createClient() public returns (uint256);\r\n    function generateID(address _clientAddress) returns (uint256);\r\n}\r\n```\r\nA sample implementation of [Digital Coupon Application](https://github.com/BlockChain-UROP/ECoupon-on-blockchain/blob/master/contracts/Market.sol).\r\n\r\n\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/860/reactions",
    "total_count": 45,
    "+1": 21,
    "-1": 0,
    "laugh": 7,
    "hooray": 9,
    "confused": 0,
    "heart": 8,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/860/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997315926",
    "html_url": "https://github.com/ethereum/EIPs/issues/860#issuecomment-997315926",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/860",
    "id": 997315926,
    "node_id": "IC_kwDOAq426M47cdVW",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-19T02:03:39Z",
    "updated_at": "2021-12-19T02:03:39Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997315926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003651398",
    "html_url": "https://github.com/ethereum/EIPs/issues/860#issuecomment-1003651398",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/860",
    "id": 1003651398,
    "node_id": "IC_kwDOAq426M470oFG",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T02:03:52Z",
    "updated_at": "2022-01-02T02:03:52Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003651398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
