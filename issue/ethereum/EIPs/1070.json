{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1070",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1070/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1070/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1070/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1070",
  "id": 321339530,
  "node_id": "MDU6SXNzdWUzMjEzMzk1MzA=",
  "number": 1070,
  "title": "ERC-1070 Standard Bounties",
  "user": {
    "login": "mbeylin",
    "id": 6082639,
    "node_id": "MDQ6VXNlcjYwODI2Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mbeylin",
    "html_url": "https://github.com/mbeylin",
    "followers_url": "https://api.github.com/users/mbeylin/followers",
    "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
    "organizations_url": "https://api.github.com/users/mbeylin/orgs",
    "repos_url": "https://api.github.com/users/mbeylin/repos",
    "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mbeylin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-05-08T20:42:04Z",
  "updated_at": "2018-05-08T21:42:41Z",
  "closed_at": "2018-05-08T21:42:41Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\nEIP: <to be assigned>\r\nTitle: ERC-1070 Standard Bounties\r\nAuthors: Mark Beylin <mark.beylin@consensys.net>, Kevin Owocki <kevin.owocki@consensys.net>, Ricardo Guilherme Schmidt (@3esmit)\r\nDiscussions-to: <mark.beylin@consensys.net>\r\nStatus: Draft\r\nType: Standards Track\r\nCategory: ERC\r\nCreated: created on 2018-05-08\r\nRequires: EIP20\r\n```\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\nA standard contract and interface for issuing bounties on Ethereum, usable for any type of task, paying in any ERC20 token or in ETH.\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\nIn order to encourage cross-platform interoperability of bounties on Ethereum, and for easier reputational tracking, StandardBounties can facilitate the administration of funds in exchange for deliverables corresponding to a completed task, in a publicly auditable and immutable fashion.\r\n\r\n## Motivation\r\nIn the absence of a standard for bounties on Ethereum, it would be difficult for platforms to collaborate and share the bounties which users create (thereby recreating the walled gardens which currently exist on Web2.0 task outsourcing platforms). A standardization of these interactions across task types also makes it far easier to track various reputational metrics (such as how frequently you pay for completed submissions, or how frequently your work gets accepted).\r\n\r\n## Specification\r\nAfter studying bounties as they've existed for thousands of years (and after implementing and processing over 300 of them on main-net in beta), we've discovered that there are 3 core steps to every bounty:\r\n- a bounty is **issued**: a `controller` specifies the requirements for the task, describing the desired outcome, and how much they would be willing to pay for the completion of that task (denoted in one or several tokens).\r\n- a bounty is **fulfilled**: a bounty `fulfiller` may see the bounty, complete the task, and produce a deliverable which is itself the desired outcome of the task, or simply a record that it was completed. Hashes of these deliverables should be stored immutably on-chain, to serve as proof after the fact.\r\n- a fulfillment is **accepted**: a bounty controller may select one or more submissions to be accepted, thereby releasing payment to the bounty fulfiller(s), and transferring ownership over the given deliverable to the issuer.\r\n\r\nTo implement these steps, a number of functions are needed:\r\n- `initializeBounty(address _controller,  string _data)`: This is used when deploying a new StandardBounty contract, and is particularly useful when applying the proxy design pattern, whereby bounties cannot be initialized in their constructors. Here, the data string should represent an IPFS hash, corresponding to a JSON object which conforms to the schema (described below).\r\n- `fulfillBounty(address[] _fulfillers, uint[] _numerators, uint _denomenator, string _data)`: This is called to submit a fulfillment, submitting a string representing an IPFS hash which contains the deliverable for the bounty. Initially fulfillments could only be submitted by one individual at a time, however users consistently told us they desired to be able to collaborate on fulfillments, thereby allowing the credit for submissions to be shared by several parties. The lines along which eventual payouts are split are determined by the fractions of the submission credited to each fulfiller (using the array of numerators and single denominator). Here, a bounty platform may also include themselves as a collaborator to collect a small fee for matching the bounty with fulfillers.\r\n- `acceptFulfillment(uint _fulfillmentId, StandardToken[] _payoutTokens, uint[] _tokenAmounts)`: This is called by the controller to pay out a given fulfillment, using an array of tokens, and an array of amounts of each token to be split among the contributors. This allows for the bounty amount to move as it needs to based on incoming contributions (which may be transferred directly to the contract address). It also allows for the easy splitting of a given bounty's balance among several fulfillments, if the need should arise.\r\n- `drainBounty(StandardToken[] _payoutTokens)`: This may be called by the controller to drain a bounty of it's funds, if the need should arise.\r\n- `changeBounty(address _controller, string _data)`: This may be called by the controller to change the controller or data field of their bounty.\r\n- `changeController(address _controller)`: This may be called by the controller to change to a new controller if need be\r\n- `changeData(string _data)`: This may be called by the controller to change just the data\r\n\r\nOptional Functions:\r\n- `acceptAndFulfill(address[] _fulfillers, uint[] _numerators, uint _denomenator, string _data, StandardToken[] _payoutTokens, uint[] _tokenAmounts)`: During the course of the development of this standard, we discovered the desire for fulfillers to avoid paying gas fees on their own, entrusting the bounty's controller to make the submission for them, and at the same time accept it. This is useful since it still immutably stores the exchange of tokens for completed work, but avoids the need for new bounty fulfillers to have any ETH to pay for gas costs in advance of their earnings.\r\n- `changeMasterCopy(StandardBounty _masterCopy)`: For controllers to be able to change the masterCopy which their proxy contract relies on, if the proxy design pattern is being employed.\r\n- `refundableContribute(uint[] _amounts, StandardToken[] _tokens)`: While non-refundable contributions may be sent to a bounty simply by transferring those tokens to the address where it resides, one may also desire to contribute to a bounty with the option to refund their contribution, should the bounty never receive a correct submission which is paid out.\r\n`refundContribution(uint _contributionId)`: If a bounty hasn't yet paid out to any correct submissions, those which employed the `refundableContribute` function may retreive their funds from the contract.\r\n\r\n**Schemas**\r\nPersona Schema:\r\n```\r\n{\r\n   name: // optional - A string representing the name of the persona\r\n   email: // optional - A string representing the preferred contact email of the persona\r\n   githubUsername: // optional - A string representing the github username of the persona\r\n   address: // required - A string web3 address of the persona\r\n}\r\n```\r\nBounty issuance `data` Schema:\r\n```\r\n{\r\n  payload: {\r\n    title: // A string representing the title of the bounty\r\n    description: // A string representing the description of the bounty, including all requirements\r\n    issuer: {\r\n       // persona for the issuer of the bounty\r\n    },\r\n    funders:[\r\n       // array of personas of those who funded the issue.\r\n    ],\r\n    categories: // an array of strings, representing the categories of tasks which are being requested\r\n    created: // the timestamp in seconds when the bounty was created\r\n    tokenSymbol: // the symbol for the token which the bounty pays out\r\n    tokenAddress: // the address for the token which the bounty pays out (0x0 if ETH)\r\n\r\n    // ------- add optional fields here -------\r\n    sourceFileName: // A string representing the name of the file\r\n    sourceFileHash: // The IPFS hash of the file associated with the bounty\r\n    sourceDirectoryHash: // The IPFS hash of the directory which can be used to access the file\r\n    webReferenceURL: // The link to a relevant web reference (ie github issue)\r\n  },\r\n  meta: {\r\n    platform: // a string representing the original posting platform (ie 'gitcoin')\r\n    schemaVersion: // a string representing the version number (ie '0.1')\r\n    schemaName: // a string representing the name of the schema (ie 'standardSchema' or 'gitcoinSchema')\r\n  }\r\n}\r\n```\r\nBounty `fulfillment` data Schema:\r\n\r\n```\r\n{\r\n  payload: {\r\n    description: // A string representing the description of the fulfillment, and any necessary links to works\r\n    sourceFileName: // A string representing the name of the file being submitted\r\n    sourceFileHash: // A string representing the IPFS hash of the file being submitted\r\n    sourceDirectoryHash: // A string representing the IPFS hash of the directory which holds the file being submitted\r\n    fulfillers: {\r\n      // personas for the individuals whose work is being submitted\r\n    }\r\n\r\n    // ------- add optional fields here -------\r\n  },\r\n  meta: {\r\n    platform: // a string representing the original posting platform (ie 'gitcoin')\r\n    schemaVersion: // a string representing the version number (ie '0.1')\r\n    schemaName: // a string representing the name of the schema (ie 'standardSchema' or 'gitcoinSchema')\r\n  }\r\n}\r\n```\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\nThe development of this standard began a year ago, with the goal of encouraging interoperability among bounty implementations on Ethereum. The initial version had significantly more restrictions: a bounty's `data` could not be changed after issuance (it seemed unfair for bounty issuers to change the requirements after work is underway), and the bounty payout could not be changed (all funds needed to be deposited in the bounty contract before it could accept submissions). \r\n\r\nThe initial version was also far less extensible, and only allowed for fixed payments to a given set of fulfillments. This new version makes it possible for funds to be split among several correct submissions, for submissions to be shared among several contributors, and for payouts to not only be in a single token as before, but in as many tokens as the issuer of the bounty desires. These design decisions were made after the 8+ months which Gitcoin, the Bounties Network, and Status Open Bounty have been live and meaningfully facilitating bounties for repositories in the Web3.0 ecosystem.\r\n\r\n## Test Cases\r\n<!--Test cases for an implementation are mandatory for EIPs that are affecting consensus changes. Other EIPs can choose to include links to test cases if applicable.-->\r\nTests for our implementation can be found here: https://github.com/Bounties-Network/StandardBounties/tree/develop/test\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\nA reference implementation can be found here: https://github.com/Bounties-Network/StandardBounties/blob/develop/contracts/StandardBounty.sol\r\n**Although this code has been tested, it has not yet been audited or bug-bountied, so we cannot make any assertions about it's correctness, nor can we presently encourage it's use to hold funds on the Ethereum mainnet.**\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "mbeylin",
    "id": 6082639,
    "node_id": "MDQ6VXNlcjYwODI2Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6082639?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mbeylin",
    "html_url": "https://github.com/mbeylin",
    "followers_url": "https://api.github.com/users/mbeylin/followers",
    "following_url": "https://api.github.com/users/mbeylin/following{/other_user}",
    "gists_url": "https://api.github.com/users/mbeylin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mbeylin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mbeylin/subscriptions",
    "organizations_url": "https://api.github.com/users/mbeylin/orgs",
    "repos_url": "https://api.github.com/users/mbeylin/repos",
    "events_url": "https://api.github.com/users/mbeylin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mbeylin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1070/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1070/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/387539173",
    "html_url": "https://github.com/ethereum/EIPs/issues/1070#issuecomment-387539173",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1070",
    "id": 387539173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzUzOTE3Mw==",
    "user": {
      "login": "owocki",
      "id": 513929,
      "node_id": "MDQ6VXNlcjUxMzkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/513929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/owocki",
      "html_url": "https://github.com/owocki",
      "followers_url": "https://api.github.com/users/owocki/followers",
      "following_url": "https://api.github.com/users/owocki/following{/other_user}",
      "gists_url": "https://api.github.com/users/owocki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/owocki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/owocki/subscriptions",
      "organizations_url": "https://api.github.com/users/owocki/orgs",
      "repos_url": "https://api.github.com/users/owocki/repos",
      "events_url": "https://api.github.com/users/owocki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/owocki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T20:54:13Z",
    "updated_at": "2018-05-08T20:54:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi from gitcoin.co -- Can confirm, we rare using [StandardBounties](https://github.com/Bounties-Network/StandardBounties/blob/develop/contracts/StandardBounty.sol) on our platform",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/387539173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/387550549",
    "html_url": "https://github.com/ethereum/EIPs/issues/1070#issuecomment-387550549",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1070",
    "id": 387550549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzU1MDU0OQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T21:38:02Z",
    "updated_at": "2018-05-08T21:38:02Z",
    "author_association": "MEMBER",
    "body": "I'd suggest opening this as a PR, unless you want a lot of feedback before writing up a draft.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/387550549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
