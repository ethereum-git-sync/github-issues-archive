{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1115",
  "id": 325715938,
  "node_id": "MDU6SXNzdWUzMjU3MTU5Mzg=",
  "number": 1115,
  "title": "ERC 1115 : Decentralized user authentication standard",
  "user": {
    "login": "madhavanmalolan",
    "id": 2111253,
    "node_id": "MDQ6VXNlcjIxMTEyNTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2111253?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/madhavanmalolan",
    "html_url": "https://github.com/madhavanmalolan",
    "followers_url": "https://api.github.com/users/madhavanmalolan/followers",
    "following_url": "https://api.github.com/users/madhavanmalolan/following{/other_user}",
    "gists_url": "https://api.github.com/users/madhavanmalolan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/madhavanmalolan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/madhavanmalolan/subscriptions",
    "organizations_url": "https://api.github.com/users/madhavanmalolan/orgs",
    "repos_url": "https://api.github.com/users/madhavanmalolan/repos",
    "events_url": "https://api.github.com/users/madhavanmalolan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/madhavanmalolan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2018-05-23T13:52:31Z",
  "updated_at": "2021-12-20T03:11:58Z",
  "closed_at": "2021-12-20T03:11:58Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\neip: <to be assigned>\r\ntitle: DAuth - Decentralized authentication mechanism for DApps\r\nauthor: madhavanmalolan\r\ndiscussion-to: madhavanmalolan@gmail.com\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-05-23\r\n```\r\n# Simple Summary\r\nThis is an authentication mechanism like _\"Login with Facebook\"_ and _\"Sign in with Google\"_ that is completely decentralized and helps DApps authenticate users.\r\n\r\n# Abstract\r\nDAuth is a specification for an alternative to OAuth that allows DApps to accept user logins in a completely decentralized way - helping the DApp acertain the Ethereum address owned by the user. This login uses a familiar username-password pair that would allow logins to happen from any device or environment without the need for external libraries and extensions like Web3.\r\n\r\n# Motivation\r\nMany DApps that perform some form of personalization need to identify the user. Consider, for example, the case of a popular DApp - [CryptoKitties](https://cryptokitties.co). CryptoKitties is a web based DApp and allows users to view, buy, sell and _breed_ CryptoKitties. The only way to login into the application is using MetaMask which is a Web3 injector. It is not possible to view _My kitties_ using a device that doesn't have MetaMask installed even if I do not intend to make any transactions.\r\n\r\nDAuth will enable DApps to allow users to establish their identity by proving the ownership of their Ethereum address. \r\n\r\n# Design \r\nWe first describe the _Authentication Game_ which takes place to authenticate a user.\r\n\r\n## 0. Registration\r\nA user registers by setting up a HTTP server (called the Dauth server). The user generates a password and a public-private key pair and stores the private key and the hash of the password on the server. Then, registers a username on the smart contract by providing the desired username, the public key and the address of the DAuth server.\r\n\r\nAll usernames on the contract are unique.\r\n\r\n## 1. DApp Login\r\nTo login into a DApp, the user provides the following to the endpoint that performs the authentication on the DApp.\r\n- **Code** : This is a random string that identifies the current authentication session. The authentication will go through only once for a given code.\r\n- **HashCode** : `sha3(sha3(password), code)`\r\n- **Username** : The username that was registered and confirmed on the smart contract.\r\n\r\nIn order to verify this request, the DApp will fetch the public key and DAuth server address from the smart contract.\r\n\r\nThe DApp shall then generate a _Secret_ string - which may be a random string. It will then pass the following parameters to the DAuth server's verification endpoint.\r\n- **Code** : As provided by the user\r\n- **HashCode** : As provided by the user\r\n- **Username** : As provided by the user\r\n- **Cipher** : The _Secret string_ encrypted using the user's public key\r\n\r\n## 2. DAuth server verification\r\nThe DAuth server on receiving the request from the DApp, fetches the hash of the password and the private key from its database corresponding to the username in the request.\r\n\r\nIt then validates if `HashCode = sha3(hash of password, code)`\r\n\r\nIf the HashCode is valid, and the code has not been used before, it tries to decrypt the Cipher using the private key and sends the decrypted value back to the DApp\r\n\r\n## 3. Verification\r\nThe DApp may authenticate the user if the response from the DAuth server is the same as the Secret it used to generate the Cipher.\r\n\r\n# Specification\r\n\r\n## Smart Contract\r\n### set\r\n```\r\n function set(string username, string dauth_url, string public_key) public returns (bool)\r\n\r\n event NewUser(address from, string username, bool success);\r\n```\r\nMust insert a mapping between the `msg.sender` and the username, DAuth Server address, and public key.\r\n\r\nMust  emit `NewUser(address, username, true)` if successfully created, `NewUser(address, username, false)` if it fails.\r\n### getUsername\r\n```\r\n function getUsername(address user_address) public view returns (string)\r\n```\r\nReturns the username associated with a given address. Returns a blank string if no username exists for that address.\r\n\r\n### getAddress\r\n```\r\n function getAddress(string username) public view returns (address)\r\n```\r\nReturns the address associated with the username. Returns a blank string if the username is not registered.\r\n### getDauthUrl\r\n```\r\n function getDauthUrl(string username) public view returns (string)\r\n```\r\nReturns the DAuth Server address associated with the username. Returns a blank string if the username is not registered. \r\n### getDauthPublicKey\r\n```\r\n function getDauthPublicKey(string username) public view returns (string)\r\n```\r\nReturns the public key associated with the username. Returns a blank string if the username is not registered.\r\n\r\n\r\n## DAuth Server\r\nThe DAuth server must expose two endpoints\r\n### Verification Endpoint\r\nThis is the endpoint using a POST request to the DAuth Server address. This takes as parameters\r\n```\r\n{\r\n    username : string,\r\n    cipher : string,\r\n    code : string,\r\n    hashcode : string\r\n}\r\n```\r\n\r\nIf verification is successful, returns \r\n```\r\n200\r\n{ data : <decrypted value> }\r\n```\r\nelse,\r\n```\r\n403\r\n{ data : <reason for failure> }\r\n```\r\n\r\n### Login Page \r\nThis is a GET request to the DAuth Server address. This takes as query parameter the verifier url.\r\nOn the webpage it must accept the username and password, generate the code and hashcode and transmit the username, code and hashcode to the verifier (DApp).\r\n\r\n\r\n## DApp\r\nThe Dapp must provide an endpoint called the _verifier URL_ that is a GET request that can be accessed from a web browser. This endpoint gets the following query parameters : code, hashcode, username. This endpoint may respond accordingly based on the success of the login.\r\n\r\n# Implementation\r\n## Smart Contract\r\nThe smart contract is hosted on the Rinkeby testnet - [Link](https://rinkeby.etherscan.io/address/0xb19d6bf34cf6cecc50c4a73c38f54defcf9e8f6a)\r\n\r\n## DAuth Server\r\nA user may run a self hosted DAuth Server by cloning [this](https://github.com/madhavanmalolan/dauth/tree/master/server) repository.\r\nFor the sake of simplicity and a demo, a DAuth Server has been setup at [dauth.co](https://dauth.co) on which users may choose to host their credentials if they are not able to host a server on their own.\r\n\r\n## Verifier\r\nThe DApps may use a [the promise based nodejs implementation](https://github.com/madhavanmalolan/), which abstracts out all implementation details.\r\n\r\n## Source\r\nAll the code for the smart contract and the Dauth Server are opensourced at [this repository](https://github.com/madhavanmalolan/dauth).\r\n\r\n# Demo \r\nA demo is available at [dauth.co](https://dauth.co)\r\n\r\n# More details\r\nA white paper is made available that digs deeper into technical details : [dauth.pdf](https://github.com/madhavanmalolan/dauth/blob/master/dauth.pdf)\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1115/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391368312",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-391368312",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 391368312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTM2ODMxMg==",
    "user": {
      "login": "ukstv",
      "id": 193527,
      "node_id": "MDQ6VXNlcjE5MzUyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193527?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ukstv",
      "html_url": "https://github.com/ukstv",
      "followers_url": "https://api.github.com/users/ukstv/followers",
      "following_url": "https://api.github.com/users/ukstv/following{/other_user}",
      "gists_url": "https://api.github.com/users/ukstv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ukstv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ukstv/subscriptions",
      "organizations_url": "https://api.github.com/users/ukstv/orgs",
      "repos_url": "https://api.github.com/users/ukstv/repos",
      "events_url": "https://api.github.com/users/ukstv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ukstv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-23T14:29:20Z",
    "updated_at": "2018-05-23T14:29:20Z",
    "author_association": "NONE",
    "body": "How is it different from OpenID? What is the point of the contract here?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391368312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391395635",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-391395635",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 391395635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTM5NTYzNQ==",
    "user": {
      "login": "madhavanmalolan",
      "id": 2111253,
      "node_id": "MDQ6VXNlcjIxMTEyNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2111253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madhavanmalolan",
      "html_url": "https://github.com/madhavanmalolan",
      "followers_url": "https://api.github.com/users/madhavanmalolan/followers",
      "following_url": "https://api.github.com/users/madhavanmalolan/following{/other_user}",
      "gists_url": "https://api.github.com/users/madhavanmalolan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madhavanmalolan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madhavanmalolan/subscriptions",
      "organizations_url": "https://api.github.com/users/madhavanmalolan/orgs",
      "repos_url": "https://api.github.com/users/madhavanmalolan/repos",
      "events_url": "https://api.github.com/users/madhavanmalolan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madhavanmalolan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-23T15:42:48Z",
    "updated_at": "2018-05-23T15:46:15Z",
    "author_association": "NONE",
    "body": "OpenID is a centralised solution and requires one to trust the open id\r\nfoundation\r\n\r\nFrom OpenID website :\r\n\"foundation serves as a public trust organization representing the open\r\ncommunity of developers, vendors, and users.\"\r\n\r\nThe use of the Smart Contract is that it links the public key to the\r\nethereum address - which in turn is used to generate the cipher to do the\r\nverification. The public key is universally accessible from the block chain which is used to generate the Cipher which in turn is used to perform the last leg of the authentication. There is no need to trust anyone entity to perform the authentication (if the user self hosts the Dauth server) \r\n\r\n\r\n\r\nOn Wed, 23 May 2018, 19:59 Sergey Ukustov, <notifications@github.com> wrote:\r\n\r\n> How is it different from OpenID? What is the point of the contract here?\r\n>\r\n> —\r\n> You are receiving this because you authored the thread.\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/ethereum/EIPs/issues/1115#issuecomment-391368312>, or mute\r\n> the thread\r\n> <https://github.com/notifications/unsubscribe-auth/ACA3Fcys1jfryKEzvAFO5BFSQiA6gBadks5t1XJggaJpZM4UKfmR>\r\n> .\r\n>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391395635/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391401777",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-391401777",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 391401777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTQwMTc3Nw==",
    "user": {
      "login": "ukstv",
      "id": 193527,
      "node_id": "MDQ6VXNlcjE5MzUyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193527?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ukstv",
      "html_url": "https://github.com/ukstv",
      "followers_url": "https://api.github.com/users/ukstv/followers",
      "following_url": "https://api.github.com/users/ukstv/following{/other_user}",
      "gists_url": "https://api.github.com/users/ukstv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ukstv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ukstv/subscriptions",
      "organizations_url": "https://api.github.com/users/ukstv/orgs",
      "repos_url": "https://api.github.com/users/ukstv/repos",
      "events_url": "https://api.github.com/users/ukstv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ukstv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-23T16:00:22Z",
    "updated_at": "2018-05-23T16:00:22Z",
    "author_association": "NONE",
    "body": "Hmm, OpenID is a _specification_ for decentralised auth, not some solution. No trust required. It was linked to the respective Foundation at later stages of the development to coordinate the effort.\r\n\r\nApart from that governance thing, how is it different and/or better?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391401777/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391572384",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-391572384",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 391572384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTU3MjM4NA==",
    "user": {
      "login": "EvilJordan",
      "id": 1364262,
      "node_id": "MDQ6VXNlcjEzNjQyNjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1364262?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EvilJordan",
      "html_url": "https://github.com/EvilJordan",
      "followers_url": "https://api.github.com/users/EvilJordan/followers",
      "following_url": "https://api.github.com/users/EvilJordan/following{/other_user}",
      "gists_url": "https://api.github.com/users/EvilJordan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EvilJordan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EvilJordan/subscriptions",
      "organizations_url": "https://api.github.com/users/EvilJordan/orgs",
      "repos_url": "https://api.github.com/users/EvilJordan/repos",
      "events_url": "https://api.github.com/users/EvilJordan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EvilJordan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T03:00:32Z",
    "updated_at": "2018-05-24T03:00:57Z",
    "author_association": "NONE",
    "body": "The example of Cryptokitties requiring MetaMask only is incorrect. Any web3 provider works as Cryptokitties uses message signing to verify accounts. I don't see how this EIP is an improvement over message signing, something widely understood, requires no gas or execution cost, and already built-in to every client.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391572384/reactions",
      "total_count": 8,
      "+1": 7,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391584719",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-391584719",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 391584719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTU4NDcxOQ==",
    "user": {
      "login": "madhavanmalolan",
      "id": 2111253,
      "node_id": "MDQ6VXNlcjIxMTEyNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2111253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madhavanmalolan",
      "html_url": "https://github.com/madhavanmalolan",
      "followers_url": "https://api.github.com/users/madhavanmalolan/followers",
      "following_url": "https://api.github.com/users/madhavanmalolan/following{/other_user}",
      "gists_url": "https://api.github.com/users/madhavanmalolan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madhavanmalolan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madhavanmalolan/subscriptions",
      "organizations_url": "https://api.github.com/users/madhavanmalolan/orgs",
      "repos_url": "https://api.github.com/users/madhavanmalolan/repos",
      "events_url": "https://api.github.com/users/madhavanmalolan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madhavanmalolan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T04:31:12Z",
    "updated_at": "2018-05-24T04:33:55Z",
    "author_association": "NONE",
    "body": "Apologies there, by referring to MetaMask, I meant it as an example of a web3 provider. Though signing with MetaMask is free of gas, there are the following issues.\r\n- users still need to install an extension to enable web3 on their traditional browser. Though it is easy to install, it is not necessarily available on all platforms. Consider the case of accessing the dapp from a mobile application for example using an embedded Web view. I do not agree with the argument t around it being built in on all clients. \r\n- Users lose portability. You cannot login into your Crypto Kitties account from your friends' device unless you type in the 12 word phrase and then need to remember to delete it. \r\n\r\n- Using MetaMask couples payment with identity. Consider scams (pointing out because I have come across one such), which ask you to make a small transaction to _login_. But the actual amount that shows up while paying is magnitudes higher - for someone not paying attention, it is easy to click submit. Dauth decouples payment from identity. The same way an SSN is different from a credit card number. \r\n\r\nThe way the EIP is an improvement is that it allows for a much simpler user experience without making assumptions like web3 being available on client side. \r\n\r\nDoes that answer your question? \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391584719/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391587592",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-391587592",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 391587592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTU4NzU5Mg==",
    "user": {
      "login": "madhavanmalolan",
      "id": 2111253,
      "node_id": "MDQ6VXNlcjIxMTEyNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2111253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madhavanmalolan",
      "html_url": "https://github.com/madhavanmalolan",
      "followers_url": "https://api.github.com/users/madhavanmalolan/followers",
      "following_url": "https://api.github.com/users/madhavanmalolan/following{/other_user}",
      "gists_url": "https://api.github.com/users/madhavanmalolan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madhavanmalolan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madhavanmalolan/subscriptions",
      "organizations_url": "https://api.github.com/users/madhavanmalolan/orgs",
      "repos_url": "https://api.github.com/users/madhavanmalolan/repos",
      "events_url": "https://api.github.com/users/madhavanmalolan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madhavanmalolan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T04:53:15Z",
    "updated_at": "2018-05-24T04:54:50Z",
    "author_association": "NONE",
    "body": "@ukstv The difference from openID or any OAuth provider is that anybody can set up a server that authenticate _only_ them if they want. That doesn't require any permission or certification as is the case with OpenID.\r\nFunctionally it is similar to OAuth and hence OpenID. The governance is the only improvement when compared to OAuth. \r\n\r\nOther improvements are over existing authentication that exist as of today on top of Ethereum. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391587592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391633781",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-391633781",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 391633781,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTYzMzc4MQ==",
    "user": {
      "login": "yuzushioh",
      "id": 12425729,
      "node_id": "MDQ6VXNlcjEyNDI1NzI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12425729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yuzushioh",
      "html_url": "https://github.com/yuzushioh",
      "followers_url": "https://api.github.com/users/yuzushioh/followers",
      "following_url": "https://api.github.com/users/yuzushioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/yuzushioh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yuzushioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yuzushioh/subscriptions",
      "organizations_url": "https://api.github.com/users/yuzushioh/orgs",
      "repos_url": "https://api.github.com/users/yuzushioh/repos",
      "events_url": "https://api.github.com/users/yuzushioh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yuzushioh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T08:31:46Z",
    "updated_at": "2018-05-24T08:31:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since Dauth servers store the users' private keys in their databases, could they pass through the verification step and log in to dapps that those user's are using if they were malicious? Is there any way for end-users or others in the network to check if servers are acting right, and to penalize them for their behaviour?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391633781/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391658096",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-391658096",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 391658096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTY1ODA5Ng==",
    "user": {
      "login": "madhavanmalolan",
      "id": 2111253,
      "node_id": "MDQ6VXNlcjIxMTEyNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2111253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madhavanmalolan",
      "html_url": "https://github.com/madhavanmalolan",
      "followers_url": "https://api.github.com/users/madhavanmalolan/followers",
      "following_url": "https://api.github.com/users/madhavanmalolan/following{/other_user}",
      "gists_url": "https://api.github.com/users/madhavanmalolan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madhavanmalolan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madhavanmalolan/subscriptions",
      "organizations_url": "https://api.github.com/users/madhavanmalolan/orgs",
      "repos_url": "https://api.github.com/users/madhavanmalolan/repos",
      "events_url": "https://api.github.com/users/madhavanmalolan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madhavanmalolan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T09:56:30Z",
    "updated_at": "2018-05-24T09:56:30Z",
    "author_association": "NONE",
    "body": "@yuzushioh That is a very good question!\r\nIn the design i assumed the DAuth server to be acting on behalf of the user anyways. If one doesn't trust the servers out there, they should host one themselves. \r\n\r\nGoogle can signin on your behalf on any website too, in a way.\r\n\r\nThis model focusses on giving an opportunity to the users to not trust a central authority and set up their own servers without compromising on the UX.\r\n\r\nThat said, I think this is a really good question - and I do not have an answer on the top of my mind, but will love to take this conversation forward.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391658096/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391777618",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-391777618",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 391777618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTc3NzYxOA==",
    "user": {
      "login": "yuzushioh",
      "id": 12425729,
      "node_id": "MDQ6VXNlcjEyNDI1NzI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12425729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yuzushioh",
      "html_url": "https://github.com/yuzushioh",
      "followers_url": "https://api.github.com/users/yuzushioh/followers",
      "following_url": "https://api.github.com/users/yuzushioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/yuzushioh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yuzushioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yuzushioh/subscriptions",
      "organizations_url": "https://api.github.com/users/yuzushioh/orgs",
      "repos_url": "https://api.github.com/users/yuzushioh/repos",
      "events_url": "https://api.github.com/users/yuzushioh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yuzushioh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T16:28:37Z",
    "updated_at": "2018-05-24T16:28:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "In this sense users have to host their own server in order for them not to trust anything centralized. \r\n> the DAuth server to be acting on behalf of the user\r\n\r\nIt is true that this model gives an opportunity for users to handle their own actions by themselves, but I think it is far from possible for most of people to host their own servers. It may need more considerations about this. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391777618/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/393666454",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-393666454",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 393666454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzY2NjQ1NA==",
    "user": {
      "login": "quantumproducer",
      "id": 11827932,
      "node_id": "MDQ6VXNlcjExODI3OTMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/11827932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quantumproducer",
      "html_url": "https://github.com/quantumproducer",
      "followers_url": "https://api.github.com/users/quantumproducer/followers",
      "following_url": "https://api.github.com/users/quantumproducer/following{/other_user}",
      "gists_url": "https://api.github.com/users/quantumproducer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quantumproducer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quantumproducer/subscriptions",
      "organizations_url": "https://api.github.com/users/quantumproducer/orgs",
      "repos_url": "https://api.github.com/users/quantumproducer/repos",
      "events_url": "https://api.github.com/users/quantumproducer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quantumproducer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T20:19:10Z",
    "updated_at": "2018-05-31T20:19:10Z",
    "author_association": "NONE",
    "body": "I agree with @EvilJordan - I'm not following the benefit here.\r\n\r\nHaving users sign a message and decrypting serverside with something like eth-sig-util is an easy to use, gasless flow. I made a Javascript wrapper around doing just this:\r\n\r\nhttps://www.npmjs.com/package/eth-auth\r\n\r\nwhich exposes a single function, authenticate, letting a server pass in a userID (for their database), the claimed Ethereum address of the user, the encrypted signature & the plaintext message. The message could be an authentication token, a phrase or even a terms of service agreement.\r\n\r\nI don't think this would be appropriate for a Smart Contract because users aren't going to \"run their own server to prove their identity\" this is not what a user wants to do.\r\n\r\nYou mention the users not having to \"remember a 12 word phrase\".. but that sounds much easier than 1) Setting up a Dauth server & 2) connecting to that server on a friend's computer to login to a Smart Contract app.\r\n\r\nSmart Contract apps depend on servers hosting the web page. This isn't a bad thing. We are going to have \"centralized\" server hosting for a while because of how hosting economics work, at least until developers teach users how to save offline webpages for pure Ethereum applications. However, many applications depend on private data.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/393666454/reactions",
      "total_count": 18,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 4,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/484333590",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-484333590",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 484333590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDMzMzU5MA==",
    "user": {
      "login": "zhiqipan",
      "id": 12974112,
      "node_id": "MDQ6VXNlcjEyOTc0MTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12974112?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zhiqipan",
      "html_url": "https://github.com/zhiqipan",
      "followers_url": "https://api.github.com/users/zhiqipan/followers",
      "following_url": "https://api.github.com/users/zhiqipan/following{/other_user}",
      "gists_url": "https://api.github.com/users/zhiqipan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zhiqipan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zhiqipan/subscriptions",
      "organizations_url": "https://api.github.com/users/zhiqipan/orgs",
      "repos_url": "https://api.github.com/users/zhiqipan/repos",
      "events_url": "https://api.github.com/users/zhiqipan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zhiqipan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-18T02:37:26Z",
    "updated_at": "2019-04-18T02:37:26Z",
    "author_association": "NONE",
    "body": "I don't see a clear benefit out of this new standard, perhaps I miss something? Here's my thoughts:\r\n\r\nGiven the hypothesis that:\r\n\r\n1. the user can set up a server\r\n2. the server is trusted and is on behalf of the user\r\n\r\nWhy won't the app just communicates with the server and authenticates the user, via a standardized interface?\r\n\r\nThe smart contract in this proposal stores:\r\n1. username\r\n2. user's public key\r\n3. server address\r\n\r\nWhy can't the user just remember the username and server address, and public key is stored unencrypted on the server. This way, the app can simply request the public key from the server.\r\n\r\nWhy using a username to retrieve public information (server address, public key) from Ethereum would be better than using a username to retrieve public information from a trusted server (set up by the user itself)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/484333590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/484336173",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-484336173",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 484336173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDMzNjE3Mw==",
    "user": {
      "login": "sadfool1",
      "id": 33245652,
      "node_id": "MDQ6VXNlcjMzMjQ1NjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/33245652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sadfool1",
      "html_url": "https://github.com/sadfool1",
      "followers_url": "https://api.github.com/users/sadfool1/followers",
      "following_url": "https://api.github.com/users/sadfool1/following{/other_user}",
      "gists_url": "https://api.github.com/users/sadfool1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sadfool1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sadfool1/subscriptions",
      "organizations_url": "https://api.github.com/users/sadfool1/orgs",
      "repos_url": "https://api.github.com/users/sadfool1/repos",
      "events_url": "https://api.github.com/users/sadfool1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sadfool1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-18T02:51:16Z",
    "updated_at": "2019-04-18T02:51:16Z",
    "author_association": "NONE",
    "body": "I know an excellent authentication app (MFA) that leverages on blockchain and is completely decentralized:\r\n\r\nhttps://www.hydrogenplatform.com/hydro-app,\r\n\r\nAlso for user Digital Identity Aggregator, check out EIP #1495.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/484336173/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/812384567",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-812384567",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 812384567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjM4NDU2Nw==",
    "user": {
      "login": "Nauman3S",
      "id": 8595825,
      "node_id": "MDQ6VXNlcjg1OTU4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8595825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nauman3S",
      "html_url": "https://github.com/Nauman3S",
      "followers_url": "https://api.github.com/users/Nauman3S/followers",
      "following_url": "https://api.github.com/users/Nauman3S/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nauman3S/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nauman3S/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nauman3S/subscriptions",
      "organizations_url": "https://api.github.com/users/Nauman3S/orgs",
      "repos_url": "https://api.github.com/users/Nauman3S/repos",
      "events_url": "https://api.github.com/users/Nauman3S/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nauman3S/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-02T07:27:28Z",
    "updated_at": "2021-04-02T07:27:28Z",
    "author_association": "NONE",
    "body": "Why not just use Self Sovereign Identity?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/812384567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986398038",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-986398038",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 986398038,
    "node_id": "IC_kwDOAq426M46yz1W",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-06T03:11:47Z",
    "updated_at": "2021-12-06T03:11:47Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986398038/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997555234",
    "html_url": "https://github.com/ethereum/EIPs/issues/1115#issuecomment-997555234",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1115",
    "id": 997555234,
    "node_id": "IC_kwDOAq426M47dXwi",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-20T03:11:57Z",
    "updated_at": "2021-12-20T03:11:57Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997555234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
