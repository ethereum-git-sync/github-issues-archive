{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2258",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2258",
  "id": 488326937,
  "node_id": "MDU6SXNzdWU0ODgzMjY5Mzc=",
  "number": 2258,
  "title": "ERC 2258: Custodial Ownership Standard",
  "user": {
    "login": "adamdossa",
    "id": 2633913,
    "node_id": "MDQ6VXNlcjI2MzM5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adamdossa",
    "html_url": "https://github.com/adamdossa",
    "followers_url": "https://api.github.com/users/adamdossa/followers",
    "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
    "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
    "organizations_url": "https://api.github.com/users/adamdossa/orgs",
    "repos_url": "https://api.github.com/users/adamdossa/repos",
    "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adamdossa/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-09-02T22:04:58Z",
  "updated_at": "2021-12-04T20:12:02Z",
  "closed_at": "2021-12-04T20:12:02Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "---\r\n\r\neip: ERC-2258\r\ntitle: Custodial Ownership Standard (part of the ERC-1400 Security Token Standards)\r\ndiscussions-to: #2258\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2019-09-01\r\nrequire: ERC-20 (#20)\r\n\r\n---\r\n\r\n## Simple Summary\r\n\r\nThis standard is intended to sit under the ERC-1400 (#1411) umbrella set of standards related to security tokens.\r\n\r\nProvides a standard for separating the concepts of beneficial and custodial ownership of tokens.\r\n\r\n## Abstract\r\n\r\nSecurity tokens represent a way to record ownership of some underlying asset. ERC20 and other token standards represent this through a token balance associated with an Ethereum address representing the asset owner.\r\n\r\nMany use-cases require a more granular concept of ownership, and specifically security tokens may be held in custody by an entity on behalf of the token owner. In this case the token owner remains the beneficial owner of the security with respect to capital distribution and governance, whilst the custodian has exclusive rights over changing the beneficial owner.\r\n\r\nExample 1:\r\n\r\n  - a DeFi protocol requires you to provide security tokens as collateral. The DeFi smart contract must be able to transfer away your tokens if there is a liquidation event, so requires custodial ownership. The investor who is posting her tokens as collateral should continue to receive any dividends and be able to vote in any corporate actions.\r\n\r\nExample 2:\r\n\r\n  - the investor nominates a custodian to safe-guard their tokens. They transfer custodial ownership to the custodian, and retain capital distribution and governance rights. This means that their assets are secured (via the custodian in cold storage) whilst the investor can still use a hot wallet to interact with governance and capital distribution.\r\n\r\n## Motivation\r\n\r\nWithin ERC20 the `approve` and `transferFrom` functions provide a kind of limited custodial ownership, but the token owner retains full rights to decrease the custody allowance or transferring tokens away entirely to a different address.\r\n\r\nIn practice this means that entities which need to be able to guarantee control must hold tokens directly and retain a second balance mapping of tokens to owners, for the balance it has under custody.\r\n\r\nThis ERC aims to make this common pattern simpler as well as differentiating between custodial and beneficial ownership so that owners of tokens do not have to give up these rights (or pass them through the custodian) in order to receive e.g. dividends and vote.\r\n\r\nRemoving the requirement for custodians (external addresses or contracts) to transfer balances to themselves in order to act as custodians also means that token issuers see a consistent \"cap table\" of ownership when looking at token balances (e.g. through etherscan.io).\r\n\r\n## Requirements\r\n\r\nSee ERC-1400 (#1411) for a full set of requirements across the library of standards.\r\n\r\n## Rationale\r\n\r\nStandardising this simplifies many use-cases and provides additional functionality for token holders in many domains.\r\n\r\nAllows DeFi contracts to interact with security tokens in a standardised fashion improving composibility of protocols.\r\n\r\n## Specification\r\n\r\nA token holder can choose to nominate a custodian for a fixed number of tokens.\r\n\r\nA token holder cannot transfer away tokens which have been put into custody (across all custodians).\r\n\r\nFor example, Alice has 100 ACME:  \r\n\r\n  - she sets a `custodyAllowance` of 20 ACME to Bob (a custodian)  \r\n  - she sets a `custodyAllowance` of 20 ACME to Charlie (a custodian)  \r\n\r\nAlice can now only transfer 60 ACME (she has a `totalCustodyAllowance` of 40).\r\n\r\nAlice can only put tokens into custody provided that she has sufficient free (un-custodied) balance. This provides the guarantee that a custodian will always be able to transfer up to their custodyAllowance of tokens. This means that the base transfer function must ensure that the remaining balance of the token holder is at least `totalCustodyAllowance` and otherwise revert.\r\n\r\nAs the custodian (external address or smart contract) exercises their right to transfer ACME tokens on behalf of Alice, their `custodyAllowance` is decreased accordingly.\r\n\r\nA custodian transfers tokens by calling `transferByCustodian`. Calling this function decreases a custodians custodyAllowance appropriately on completion.\r\n\r\nIf the token also implements ERC-1410, then the `totalCustodyAllowance` can be presented as a partition of the token holders balance.\r\n\r\nWhen a custodian is transferring tokens on behalf of a token holder, any other transfer rules must be respected (e.g. `canTransfer` should be true for the tokens being transferred from the current beneficial owner to the new owner irrespective of the fact that they are being transferred by a custodian rather than directly by the beneficial owner).\r\n\r\n### increaseCustodyAllowance\r\n\r\nUsed to increase the amount of tokens held in custody by the specified custodian. Note that a token holder can only ever increase this limit and cannot unilaterally decrease it. The only way this limit can be decreased is by the custodian transferring tokens. A custodian can transfer tokens back to the same beneficiary if they wish to remove their custody limit without impacting the beneficial owner.\r\n\r\n`increaseCustodyAllowance` must throw if unsuccessful.  \r\nThe sum of `_amount` and `totalCustodyAllowance` MUST NOT be greater than the token holders balance.  \r\nThe event `CustodyAllowanceChanged` MUST be emitted if the custody limit is successfully changed.  \r\n\r\n``` solidity\r\nfunction increaseCustodyAllowance(address _custodian, uint256 _amount) external;\r\n```\r\n\r\n### increaseCustodyAllowanceOf\r\n\r\nAs per `increaseCustodyAllowance` but can be called by someone other than the token holder.\r\n\r\nThe token holder can provide the caller with signed data to authorise the custody limit being amended, and anyone (e.g. the custodian) can then call this function to update the custody limit.\r\n\r\n`increaseCustodyAllowanceOf` must throw if unsuccessful.  \r\nThe sum of `_amount` and `totalCustodyAllowance` MUST NOT be greater than the token holders balance.  \r\nThe event `CustodyAllowanceChanged` MUST be emitted if the custody limit is successfully changed.  \r\n\r\n``` solidity\r\nfunction increaseCustodyAllowanceOf(address _tokenHolder, address _custodian, uint256 _amount, uint256 _nonce, bytes _sig) external;\r\n```\r\n\r\n### custodyAllowance\r\n\r\nReturns the current custody limit associated with a token holder and custodian.\r\n\r\n``` solidity\r\nfunction custodyAllowance(address _tokenHolder, address _custodian) external view returns (uint256);\r\n```\r\n\r\n### totalCustodyAllowance\r\n\r\nReturns the total amount of tokens that the token holder has assigned under custody to custodians.\r\n\r\nThe token holder MUST always have a token balance greater than their `totalCustodyAllowance`.  \r\n`totalCustodyAllowance` MUST be the sum across all custodians of `custodyAllowance`.  \r\n\r\n``` solidity\r\nfunction totalCustodyAllowance(address _tokenHolder) external view returns (uint256);\r\n```\r\n\r\n### transferByCustodian\r\n\r\nUsed by a custodian to transfer tokens over which they have custody.\r\n\r\nMUST emit a `CustodyTransfer` event on successful completion.  \r\nMUST emit a `CustodyAllowanceChanged` event on successful completion.  \r\nMUST decrease the `custodyAllowance` of the custodian by `_amount`.  \r\n\r\n``` solidity\r\nfunction transferByCustodian(address _tokenHolder, address _receiver, uint256 _amount) external;\r\n```\r\n\r\n## Interface\r\n\r\n``` solidity\r\n/// @title IERCx Custodial Ownership Standard (part of the ERC1400 Security Token Standards Library)\r\n/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\r\n\r\ninterface IERCx {\r\n\r\n    // Increase the custody limit of a custodian either directly or via signed authorisation\r\n    function increaseCustodyAllowance(address _custodian, uint256 _amount) external;\r\n    function increaseCustodyAllowanceOf(address _tokenHolder, address _custodian, uint256 _amount, uint256 _nonce, bytes _sig) external;\r\n\r\n    // Query individual custody limit and total custody limit across all custodians\r\n    function custodyAllowance(address _tokenHolder, address _custodian) external view returns (uint256);\r\n    function totalCustodyAllowance(address _tokenHolder) external view returns (uint256);\r\n\r\n    // Allows a custodian to exercise their right to transfer custodied tokens\r\n    function transferByCustodian(address _tokenHolder, address _receiver, uint256 _amount) external;\r\n\r\n    // Custody Events\r\n    event CustodyTransfer(address _custodian, address _from, address _to, uint256 _amount);\r\n    event CustodyAllowanceChanged(address _tokenHolder, address _custodian, uint256 _oldAllowance, uint256 _newAllowance);\r\n\r\n}\r\n```\r\n\r\n## References\r\n- [EIP 1400: Security Token Standard](https://github.com/ethereum/EIPs/issues/1411)\r\n- [EIP Draft](https://github.com/SecurityTokenStandard/EIP-Spec)\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2258/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/527732833",
    "html_url": "https://github.com/ethereum/EIPs/issues/2258#issuecomment-527732833",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258",
    "id": 527732833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzczMjgzMw==",
    "user": {
      "login": "iamdefinitelyahuman",
      "id": 35276322,
      "node_id": "MDQ6VXNlcjM1Mjc2MzIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/35276322?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iamdefinitelyahuman",
      "html_url": "https://github.com/iamdefinitelyahuman",
      "followers_url": "https://api.github.com/users/iamdefinitelyahuman/followers",
      "following_url": "https://api.github.com/users/iamdefinitelyahuman/following{/other_user}",
      "gists_url": "https://api.github.com/users/iamdefinitelyahuman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iamdefinitelyahuman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iamdefinitelyahuman/subscriptions",
      "organizations_url": "https://api.github.com/users/iamdefinitelyahuman/orgs",
      "repos_url": "https://api.github.com/users/iamdefinitelyahuman/repos",
      "events_url": "https://api.github.com/users/iamdefinitelyahuman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iamdefinitelyahuman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-04T04:18:47Z",
    "updated_at": "2019-09-04T04:18:47Z",
    "author_association": "NONE",
    "body": ":+1: this looks similar to we're handling custody in SFT - https://sft-protocol.readthedocs.io/en/latest/custodian.html\r\n\r\nWe're actually transferring the tokens and tracking custody balances with a seperate mapping. This approach of an only-increasable allowance would massively simplify governance and dividend related logic... very clean, I like it.\r\n\r\nSome thoughts:\r\n* How do you identify that an address belongs to a custodian?  A view function along the lines of `isCustodian(address _addr)` would be useful.\r\n* Private companies typically have legal requirements to prohibit their securities from being transferred or custodied by certain kinds of entities. For example, the issuer may be required to blacklist unregulated lending protocols or exchange addresses, especially when the security is not authorized to trade publicly. There needs to be specific permissioning logic around who can encumber the securities, even while remaining in beneficial owner's account - the custodial equivalent to `canTransfer`.\r\n* In the case of a controllable token, the controller needs a way to differentiate whether they're transferring custodied or uncustodied tokens. Similarly, can a controller reduce a `custodyAllowance`?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/527732833/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/529904877",
    "html_url": "https://github.com/ethereum/EIPs/issues/2258#issuecomment-529904877",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258",
    "id": 529904877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTkwNDg3Nw==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-10T12:08:39Z",
    "updated_at": "2019-09-10T12:08:39Z",
    "author_association": "NONE",
    "body": "Thanks for the comments - great points.\r\n\r\nFor `isCustodian`, there is a `custodyAllowance` function (which takes a token holder and custodian address) - if this returns > 0 then you can assume the custodian address has custody over some tokens - is this the type of functionality you had in mind?\r\n\r\nWhitelist / blacklist functionality for allowed custodians sounds like it makes sense - this is something which could be done at the implementation level potentially, although a helper function like `canCustody` may be helpful here to standardise checking whether an address can act as a custodian (with the logic behind it being outside the scope of the interface).\r\n\r\nGood question re. controllers - they can force transfer tokens so it probably makes sense for them to be able to unilaterally reduce `custodyAllowance`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/529904877/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/530335244",
    "html_url": "https://github.com/ethereum/EIPs/issues/2258#issuecomment-530335244",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258",
    "id": 530335244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDMzNTI0NA==",
    "user": {
      "login": "iamdefinitelyahuman",
      "id": 35276322,
      "node_id": "MDQ6VXNlcjM1Mjc2MzIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/35276322?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iamdefinitelyahuman",
      "html_url": "https://github.com/iamdefinitelyahuman",
      "followers_url": "https://api.github.com/users/iamdefinitelyahuman/followers",
      "following_url": "https://api.github.com/users/iamdefinitelyahuman/following{/other_user}",
      "gists_url": "https://api.github.com/users/iamdefinitelyahuman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iamdefinitelyahuman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iamdefinitelyahuman/subscriptions",
      "organizations_url": "https://api.github.com/users/iamdefinitelyahuman/orgs",
      "repos_url": "https://api.github.com/users/iamdefinitelyahuman/repos",
      "events_url": "https://api.github.com/users/iamdefinitelyahuman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iamdefinitelyahuman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-11T11:14:54Z",
    "updated_at": "2019-09-11T11:14:54Z",
    "author_association": "NONE",
    "body": "My first point was more related to what you mention in response to the second point. In some cases knowing if an address `isCustodian` is a prerequisite to determining whether it `canCustody`. Similarly if an address `isCustodian` it might be blocked from holding tokens in a normal fashion.  I agree that the implementation of custodians will have a lot of potential for variance, but it would be great to standardize the getters to know who they are and what they're allowed to custody.\r\n\r\nRe: controllers - `forceTransferByCustodian`? Or something to that effect, in line with whatever is decided in https://github.com/ethereum/EIPs/issues/1644.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/530335244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/535118184",
    "html_url": "https://github.com/ethereum/EIPs/issues/2258#issuecomment-535118184",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258",
    "id": 535118184,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNTExODE4NA==",
    "user": {
      "login": "teawaterwire",
      "id": 1702973,
      "node_id": "MDQ6VXNlcjE3MDI5NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1702973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/teawaterwire",
      "html_url": "https://github.com/teawaterwire",
      "followers_url": "https://api.github.com/users/teawaterwire/followers",
      "following_url": "https://api.github.com/users/teawaterwire/following{/other_user}",
      "gists_url": "https://api.github.com/users/teawaterwire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/teawaterwire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/teawaterwire/subscriptions",
      "organizations_url": "https://api.github.com/users/teawaterwire/orgs",
      "repos_url": "https://api.github.com/users/teawaterwire/repos",
      "events_url": "https://api.github.com/users/teawaterwire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/teawaterwire/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-25T17:04:58Z",
    "updated_at": "2019-09-25T17:04:58Z",
    "author_association": "NONE",
    "body": "one thought: the custody allowance can only be incremented, which makes sense, but would it be \"safer\" to add a time delay so that after x days the custody allowance is \"released\"? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/535118184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/554119160",
    "html_url": "https://github.com/ethereum/EIPs/issues/2258#issuecomment-554119160",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258",
    "id": 554119160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDExOTE2MA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-14T22:49:47Z",
    "updated_at": "2019-11-14T22:49:47Z",
    "author_association": "NONE",
    "body": "It's an interesting idea - having an optional time limit on the custody sounds a nice idea. Not sure if this is a general enough use case to add to the spec. here or whether it should be on the implementation side?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/554119160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705336",
    "html_url": "https://github.com/ethereum/EIPs/issues/2258#issuecomment-974705336",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258",
    "id": 974705336,
    "node_id": "IC_kwDOAq426M46GNK4",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-20T20:11:33Z",
    "updated_at": "2021-11-20T20:11:33Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086278",
    "html_url": "https://github.com/ethereum/EIPs/issues/2258#issuecomment-986086278",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2258",
    "id": 986086278,
    "node_id": "IC_kwDOAq426M46xnuG",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T20:12:01Z",
    "updated_at": "2021-12-04T20:12:01Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
