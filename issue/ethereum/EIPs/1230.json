{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1230",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1230",
  "id": 342504647,
  "node_id": "MDU6SXNzdWUzNDI1MDQ2NDc=",
  "number": 1230,
  "title": "Idea: Making some functions self executable",
  "user": {
    "login": "seliestel",
    "id": 7725299,
    "node_id": "MDQ6VXNlcjc3MjUyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7725299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/seliestel",
    "html_url": "https://github.com/seliestel",
    "followers_url": "https://api.github.com/users/seliestel/followers",
    "following_url": "https://api.github.com/users/seliestel/following{/other_user}",
    "gists_url": "https://api.github.com/users/seliestel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/seliestel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/seliestel/subscriptions",
    "organizations_url": "https://api.github.com/users/seliestel/orgs",
    "repos_url": "https://api.github.com/users/seliestel/repos",
    "events_url": "https://api.github.com/users/seliestel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/seliestel/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-07-18T21:50:10Z",
  "updated_at": "2021-12-18T21:12:14Z",
  "closed_at": "2021-12-18T21:12:14Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "We (@aribo and @seliestel) have been discussing an idea to make some functions self executable. This would allow the deployment of contracts that execute in the future without an explicit call/send by an external agent. The objective is to create the potential for autonomous code running on the EVM. Of course, this would need to come with a cost and some limitations, in order to protect the network from potential complications and abuses.\r\n\r\nThe proposal is to create a new opcode 'SELFCALL' with four arguments:\r\n\r\n- **p** (position to mem where the bytecode to be executed is located), \r\n- **initial block** (set when the contract is created), \r\n- **interval** (number of blocks between executions, set in the contract code), and\r\n- **gas price** (price of gas to be paid at execution, set in contract code). \r\n\r\nThe EVM would need to calculate the difference between the current block number and the **initial block**. If this difference modulo **interval** is 0, the SELF bytecode located in **p** would be executed.\r\n\r\nThis opcode could be translated as a specific type of function modifier in Solidity, e.g. `self`. This modifier could be added to any function we want to self execute in the future.\r\n\r\nSELF functions will be executed by the EVM every time a new block is mined, only if they have enough ether available. SELF functions would need to pay a set amount of gas every time they are called regardless of the computations they perform - basically the cost of the opcode. Moreover, the EVM would execute the SELF function as long as there is enough ether to pay the gas spent by its execution. \r\n\r\nSome SELF functions would never be called because they have run out of allocated ether. Others might be called and pay the set amount of gas, but then result in no computation or change of state (for example, an alarm clock that begins with a require statement and only runs when a certain time has been reached). Finally, some SELF functions would incur an additional cost in ether as they are executed by the EVM when called.\r\n\r\nAn example of a SELF function in solidity:\r\n\r\n```\r\nfunction wakeUp self(uint 5, uint 10000) {\r\n  require (now == wakeUpTime);\r\n  doSomething(); \r\n}\r\n```\r\n\r\nThe SELF function wakeUp would be called by the EVM every 5 blocks since the contract was first constructed. It would pay 10,000 wei per gas for its execution. The cost in gas of calling the SELF function would be standarized. If the time now is less or more than wakeUpTime the function would do nothing and it would only have to pay in ether the set amount for being called. If wakeUpTime has been reached, it would need to pay in addition the cost in gas of running the function doSomething().\r\n\r\n@seliestel \r\n@aribo",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1230/reactions",
    "total_count": 8,
    "+1": 8,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406483829",
    "html_url": "https://github.com/ethereum/EIPs/issues/1230#issuecomment-406483829",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230",
    "id": 406483829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ4MzgyOQ==",
    "user": {
      "login": "adibas03",
      "id": 6083241,
      "node_id": "MDQ6VXNlcjYwODMyNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6083241?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adibas03",
      "html_url": "https://github.com/adibas03",
      "followers_url": "https://api.github.com/users/adibas03/followers",
      "following_url": "https://api.github.com/users/adibas03/following{/other_user}",
      "gists_url": "https://api.github.com/users/adibas03/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adibas03/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adibas03/subscriptions",
      "organizations_url": "https://api.github.com/users/adibas03/orgs",
      "repos_url": "https://api.github.com/users/adibas03/repos",
      "events_url": "https://api.github.com/users/adibas03/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adibas03/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T04:10:46Z",
    "updated_at": "2018-07-20T04:10:46Z",
    "author_association": "NONE",
    "body": "From your description,\r\nAll contracts with the `SELFCALL` opcode would have to be watched till the execution time, or eternity by the present model. I do not think this would be a good implementation as this could easily lead to DDOSing the network.\r\nOn the implementation, a needed argument to prevent watching such contracts for eternity is `maxCalls`\r\nThe **maxCalls** arg would tell the EVM the maximum number of times, the call has to be made.\r\nso, the contract would have to maintain a state `totalCalls` which the EVM uses to compare and would be one of the check to keep watching such said contract.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406483829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406578957",
    "html_url": "https://github.com/ethereum/EIPs/issues/1230#issuecomment-406578957",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230",
    "id": 406578957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjU3ODk1Nw==",
    "user": {
      "login": "DennisBPeterson",
      "id": 7445180,
      "node_id": "MDQ6VXNlcjc0NDUxODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7445180?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DennisBPeterson",
      "html_url": "https://github.com/DennisBPeterson",
      "followers_url": "https://api.github.com/users/DennisBPeterson/followers",
      "following_url": "https://api.github.com/users/DennisBPeterson/following{/other_user}",
      "gists_url": "https://api.github.com/users/DennisBPeterson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DennisBPeterson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DennisBPeterson/subscriptions",
      "organizations_url": "https://api.github.com/users/DennisBPeterson/orgs",
      "repos_url": "https://api.github.com/users/DennisBPeterson/repos",
      "events_url": "https://api.github.com/users/DennisBPeterson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DennisBPeterson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T11:56:15Z",
    "updated_at": "2018-07-20T11:56:15Z",
    "author_association": "NONE",
    "body": "One way to do this would be to have a (sparse) list of future blocks, each with a list of selfcall executions. The miner for each new block checks its list for scheduled selfcalls, and optionally executes some of them. Every time a selfcall executes, it optionally adds itself to the list on some future block.\r\n\r\nFluctuating gas prices would make this pretty uncertain though...you'd still have to monitor the chain in case your selfcall fails. As long as you're doing that, you might as well just issue the transactions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406578957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406584130",
    "html_url": "https://github.com/ethereum/EIPs/issues/1230#issuecomment-406584130",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230",
    "id": 406584130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjU4NDEzMA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T12:19:20Z",
    "updated_at": "2018-07-20T12:19:20Z",
    "author_association": "MEMBER",
    "body": "Deferred execution has been considered in the past, but it's problematic to get any guarantees on execution.\r\n\r\nOpening a thread about this on the Ethereum Magicians forum might be more productive than an issue here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406584130/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406593573",
    "html_url": "https://github.com/ethereum/EIPs/issues/1230#issuecomment-406593573",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230",
    "id": 406593573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjU5MzU3Mw==",
    "user": {
      "login": "seliestel",
      "id": 7725299,
      "node_id": "MDQ6VXNlcjc3MjUyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7725299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seliestel",
      "html_url": "https://github.com/seliestel",
      "followers_url": "https://api.github.com/users/seliestel/followers",
      "following_url": "https://api.github.com/users/seliestel/following{/other_user}",
      "gists_url": "https://api.github.com/users/seliestel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seliestel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seliestel/subscriptions",
      "organizations_url": "https://api.github.com/users/seliestel/orgs",
      "repos_url": "https://api.github.com/users/seliestel/repos",
      "events_url": "https://api.github.com/users/seliestel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seliestel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T13:00:10Z",
    "updated_at": "2018-07-20T13:00:10Z",
    "author_association": "NONE",
    "body": "Thanks, @DennisBPeterson, @Arachnid and @adibas03 for the comments and suggestions. We are opening a thread on Ethereum Magicians, as Nick suggested. Maybe that will reignite the question of deferred (and recursive) execution and perhaps allow the community to find workable solutions to make it less problematic. At this stage of EVM development, it seems like a desirable step forward. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406593573/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407115807",
    "html_url": "https://github.com/ethereum/EIPs/issues/1230#issuecomment-407115807",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230",
    "id": 407115807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzExNTgwNw==",
    "user": {
      "login": "fraymond",
      "id": 12831900,
      "node_id": "MDQ6VXNlcjEyODMxOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/12831900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fraymond",
      "html_url": "https://github.com/fraymond",
      "followers_url": "https://api.github.com/users/fraymond/followers",
      "following_url": "https://api.github.com/users/fraymond/following{/other_user}",
      "gists_url": "https://api.github.com/users/fraymond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fraymond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fraymond/subscriptions",
      "organizations_url": "https://api.github.com/users/fraymond/orgs",
      "repos_url": "https://api.github.com/users/fraymond/repos",
      "events_url": "https://api.github.com/users/fraymond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fraymond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-23T16:18:41Z",
    "updated_at": "2018-07-23T16:18:41Z",
    "author_association": "NONE",
    "body": "It's not easy to schedule a function call by time on Ethereum. Maybe can we schedule it by block numbers, say, execute something every 50 blocks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407115807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093510",
    "html_url": "https://github.com/ethereum/EIPs/issues/1230#issuecomment-986093510",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230",
    "id": 986093510,
    "node_id": "IC_kwDOAq426M46xpfG",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:11:52Z",
    "updated_at": "2021-12-04T21:11:52Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285374",
    "html_url": "https://github.com/ethereum/EIPs/issues/1230#issuecomment-997285374",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1230",
    "id": 997285374,
    "node_id": "IC_kwDOAq426M47cV3-",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T21:12:13Z",
    "updated_at": "2021-12-18T21:12:13Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
