{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/4353",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/4353/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/4353/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/4353/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/4353",
  "id": 1021602279,
  "node_id": "I_kwDOAq426M485Gnn",
  "number": 4353,
  "title": "Interface for Staked Tokens in NFTs",
  "user": {
    "login": "aug2uag",
    "id": 1901195,
    "node_id": "MDQ6VXNlcjE5MDExOTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1901195?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aug2uag",
    "html_url": "https://github.com/aug2uag",
    "followers_url": "https://api.github.com/users/aug2uag/followers",
    "following_url": "https://api.github.com/users/aug2uag/following{/other_user}",
    "gists_url": "https://api.github.com/users/aug2uag/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aug2uag/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aug2uag/subscriptions",
    "organizations_url": "https://api.github.com/users/aug2uag/orgs",
    "repos_url": "https://api.github.com/users/aug2uag/repos",
    "events_url": "https://api.github.com/users/aug2uag/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aug2uag/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2021-10-09T04:57:41Z",
  "updated_at": "2022-07-19T00:43:27Z",
  "closed_at": "2022-05-23T04:05:25Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```yaml\r\n---\r\neip: <to be assigned>\r\ntitle: Interface for Staked Tokens in NFTs\r\ndescription: This interface enables access to publicly viewable staking data of an NFT.\r\nauthor: <Rex Creed (@aug2uag), Dane Scarborough <dane@nftapps.us>>\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2021-10-08\r\n---\r\n```\r\n\r\n## Abstract\r\nERC721s can be staked with tokens, but there's no means of retrieving the amount of tokens staked and/or bound to an NFT. This proposal outlines a standard that may be implemented by all wallets and marketplaces easily to correctly retrive the staked token amount of an NFT.\r\n\r\n## Motivation\r\nThe absence of staked tokens data limits the ability of the token owner to convey to another, for any purpose including to transact, the true amount of staked tokens as may be viewable in a wallet, marketplace, or explorer. The ability to identify and verify an exogenous value derived from the staking process may be critical to the aims of an NFT holder.\r\n\r\n## Specification\r\n```js\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC721Staked {\r\n    \r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n     /**\r\n     * @dev Returns uint256 of the amount of on-chain ERC20 or like tokens staked and/or bound to the NFT.\r\n     * \r\n     * @dev Wallets and marketplaces would need to call this for displaying the amount of tokens staked and/or bound to the NFT.\r\n     */\r\n    function stakedAmount() external view returns (uint256);\r\n    \r\n}\r\n```\r\n\r\n### Suggested flow:\r\n\r\n#### Constructor/deployment\r\n* Creator - the owner of an NFT with its own rules for depositing tokens at and/or after the minting of a token.\r\n* Token Amount - the current amount of on-chain ERC20 or derived tokens bound to an NFT from one or more deposits.\r\n\r\n#### NFT displayed in wallet or marketplace\r\nWallet or marketplace checks if an NFT has publicly staked tokens available for view - if so, call stakedAmount() to get the current amount of tokens staked and/or bound to the NFT.\r\n\r\nThe logical code looks something like this and inspired by [William Entriken](https://ethereum.stackexchange.com/a/70116/70167):\r\n\r\n```js\r\nabstract contract StakedNFT {\r\n\r\n    /// @dev mapping tokenId to staked amount\r\n    mapping (uint256 => uint256) private stakedTokens;\r\n \r\n    /// @dev mints a new NFT\r\n    /// @param _to address that will own the minted NFT\r\n    /// @param _tokenId (timestamp) id the NFT\r\n    function mint(\r\n        address payable _to,\r\n        uint256 _tokenId\r\n    )\r\n        external \r\n        payable\r\n        onlyOwner\r\n    {\r\n        _safeMint(_to, _tokenId);\r\n        stakedTokens[_tokenId] = msg.value;\r\n    }\r\n\r\n    /// @dev if interface is supported \r\n    /// @param interfaceId interface to check\r\n    function supportsInterface\r\n    (\r\n        bytes4 interfaceId\r\n    ) \r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        (\r\n            ERC165,\r\n            IERC165\r\n        )\r\n        returns \r\n        (\r\n            bool\r\n        ) \r\n    {\r\n        return\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /// @dev returns the current amount of tokens staked\r\n    /// @param _tokenId target NFT\r\n    function stakedAmount\r\n    (\r\n        uint256 _tokenId\r\n    ) \r\n        public \r\n        view \r\n        returns \r\n        (\r\n            uint256\r\n        ) \r\n    {\r\n        return stakedTokens[_tokenId];\r\n    }\r\n\r\n}\r\n```\r\n\r\n## Rationale\r\nThis standard is completely agnostic to how tokens are deposited or handled by the NFT. It is, therefore, the choice and responsibility of the author to encode and communicate the encoding of their tokenomics to purchasees of their token and/or to make their contracts viewable by purchasees.\r\n\r\nFor example, tokens may be deposited at any time with any method. Also, tokens may be transferred at any time with any method. This method will identify whether the NFT has publicly vieweable staked tokens.\r\n\r\nHowever, even if there are no tokens at any given time, the views should treat a supporting interface without any staked tokens assuming tokens may be added in the future. The contract logic should determine whether a possibility exists for additional tokens to be added, i.e., a `depositingType` boolean. For example, if all tokens are withdrawn and no additional tokens will be deposited, it would be desired for a non-supporting interface response to be returned. There may be additional identifiers whether the NFT is a one-time deposit and if the NFT disallows withdraw actions. These may help the interface to provide additional insight and standardizations across staking operations.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/4353/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/4353/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1091098808",
    "html_url": "https://github.com/ethereum/EIPs/issues/4353#issuecomment-1091098808",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/4353",
    "id": 1091098808,
    "node_id": "IC_kwDOAq426M5BCNi4",
    "user": {
      "login": "aug2uag",
      "id": 1901195,
      "node_id": "MDQ6VXNlcjE5MDExOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1901195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aug2uag",
      "html_url": "https://github.com/aug2uag",
      "followers_url": "https://api.github.com/users/aug2uag/followers",
      "following_url": "https://api.github.com/users/aug2uag/following{/other_user}",
      "gists_url": "https://api.github.com/users/aug2uag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aug2uag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aug2uag/subscriptions",
      "organizations_url": "https://api.github.com/users/aug2uag/orgs",
      "repos_url": "https://api.github.com/users/aug2uag/repos",
      "events_url": "https://api.github.com/users/aug2uag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aug2uag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-04-07T05:34:06Z",
    "updated_at": "2022-04-07T05:34:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "One of the limiting features of staking NFTs is the inability to prove whether the value was removed while claiming to hold a value and proving that the NFT holds a value. To counter this:\r\n- enforcing that value is added at mint where the transaction is easily identified\r\n- enforcing the standard applies only to a single `payable` function at burn\r\n\r\nThese qualities are currently being used in production by myself and others; a standard would assist in the identification of conforming NFTs for display in wallets. I am in the process of developing such a wallet that will be displaying the staked amount of tokens of NFTs.\r\n\r\nI'm looking forward to hearing feedback and input from others to push the goalpost on this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1091098808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1119243571",
    "html_url": "https://github.com/ethereum/EIPs/issues/4353#issuecomment-1119243571",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/4353",
    "id": 1119243571,
    "node_id": "IC_kwDOAq426M5Ctk0z",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-06T04:11:13Z",
    "updated_at": "2022-05-06T04:11:13Z",
    "author_association": "MEMBER",
    "body": "If you want to move forward with this, I recommend turning it into an EIP by creating a pull request against this repository.  Alternatively, you can open a discussion on Ethereum Magicians (see link from bot above).  While this issue has been grandfathered in, we generally no longer use GitHub issues for EIP discussions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1119243571/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
