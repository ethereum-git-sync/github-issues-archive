{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2100",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2100",
  "id": 452459787,
  "node_id": "MDU6SXNzdWU0NTI0NTk3ODc=",
  "number": 2100,
  "title": "Proposal for Streaming Token Standard",
  "user": {
    "login": "d10r",
    "id": 5479136,
    "node_id": "MDQ6VXNlcjU0NzkxMzY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5479136?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/d10r",
    "html_url": "https://github.com/d10r",
    "followers_url": "https://api.github.com/users/d10r/followers",
    "following_url": "https://api.github.com/users/d10r/following{/other_user}",
    "gists_url": "https://api.github.com/users/d10r/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/d10r/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/d10r/subscriptions",
    "organizations_url": "https://api.github.com/users/d10r/orgs",
    "repos_url": "https://api.github.com/users/d10r/repos",
    "events_url": "https://api.github.com/users/d10r/events{/privacy}",
    "received_events_url": "https://api.github.com/users/d10r/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": true,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-06-05T11:53:24Z",
  "updated_at": "2023-03-14T13:54:03Z",
  "closed_at": "2021-12-04T20:12:28Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\neip: <to be assigned>\r\ntitle: Streaming Token\r\nauthor: Dietmar Hofer <dho@lab10.coop>, David Forstenlechner <dfo@lab10coop>, Markus Teufelberger <mat@lab10.coop>, Peter Grassberger <pgr@lab10.coop>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/2100\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2019-06-05\r\nrequires: 20\r\n```\r\n\r\n## Simple Summary\r\n\r\nA standard interface for Streaming Tokens.\r\n\r\n## Abstract\r\n\r\nThe following standard extends the [ERC20 Token Standard](https://eips.ethereum.org/EIPS/eip-20).  \r\nIt adds an interface which allows tokens to be streamed between accounts.\r\n\r\n## Motivation\r\n\r\nAtomic value transfers are not the ideal tool for economic transactions which are long lived.  \r\nEthereum allows us to implement cheap continuous value transfers by leveraging block timestamps.  \r\n\r\nThe interface proposed here offers an alternative to [ERC-1620](https://github.com/ethereum/EIPs/issues/1620) for several reasons:\r\n* It's designed to extend the ERC20 Token Standard\r\n* It makes less assumptions about the implementation\r\n* It defines streams such that no settlement/withdrawal of/from streams is required\r\n\r\n## Specification\r\n\r\n### Preliminary definitions\r\n\r\nA _stream_ defines a directed relation between two accounts (_sender_ and _receiver_).  \r\nA stream can be _opened_ by the sender account and _closed_ by the sender or the receiver account.  \r\nOnce closed, a stream ceases to exist and can't be re-opened.  \r\nThe _stream balance_ is the amount of tokens which were transferred through a stream up until a given point in time.  \r\nThe stream balance is defined by an implementation specific function which must be monotonically increasing in time.  \r\n_now_ refers to the point in time defined by the block timestamp of the last known block.\r\n\r\n### Interface\r\n\r\n```\r\ninterface ERC2100Token {\r\n    enum CanOpenResult {\r\n        OK,\r\n        ERR_SENDER_RECEIVER_TUPLE,\r\n        ERR_SENDER_QUOTA,\r\n        ERR_RECEIVER_QUOTA,\r\n        ERR_SYSTEM_LIMIT,\r\n        ERR_FLOWRATE,\r\n        ERR_MAXAMOUNT,\r\n        ERR_OTHER\r\n    }\r\n\r\n    enum TransferType { UNDEFINED, ATOMIC, STREAM }\r\n\r\n    function canOpenStream(address from, address to, uint256 flowrate, uint256 maxAmount) external view returns(CanOpenResult);\r\n    function openStream(address to, uint256 flowrate, uint256 maxAmount) external returns(uint256);\r\n    function getStreamInfo(uint256 streamId) external view returns(uint256 startTS, address sender, address receiver, uint256 flowrate, uint256 maxAmount, uint256 transferredAmount, uint256 outstandingAmount);\r\n    function closeStream(uint256 streamId) external;\r\n\r\n    // overrides ERC20 event, adding a field \"transferType\"\r\n    event Transfer(address indexed from, address indexed to, uint256 value, TransferType transferType);\r\n    event StreamOpened(uint256 id, address indexed from, address indexed to, uint256 flowrate, uint256 maxAmount);\r\n    event StreamClosed(uint256 id, uint256 transferredAmount, uint256 outstandingAmount);\r\n```\r\n\r\n#### `openStream`\r\n\r\n_flowrate_ is the target amount of tokens per second to be transferred. If set to a non-zero value, the average flowrate of a stream over its lifetime (TODO: clarify that this refers to any possible time range from stream opening until an arbitrary later point in time?) must never exceed this value.  \r\nIf set to 0, the sender doesn't pose an upper limit.\r\n \r\n_maxAmount_ is the maximum amount of tokens which can be transferred through a stream overall. Once that amount is reached, the stream balance can't change anymore and the stream loses its utility.  \r\n(TODO: add a method `modifyStream` which allows to increase the limit?).  \r\nIf set to 0, the sender doesn't pose an upper limit.\r\n\r\nReturns _streamId_ which uniquely identifies the opened stream and emits an event _StreamOpened_.  \r\nThrows if a stream with the given parameters couldn't be opened.\r\n\r\n#### `canOpenStream`\r\n\r\nImplementations are free to impose constraints on which accounts can be stream senders or stream receivers, which combinations of sender/receiver are possible, and which values are accepted for flowrate and maxAmount.  \r\nThis constant method allows to check beforehand if a stream with a given set of parameters could be opened, given the current state of the contract.  \r\nThe return value of type _CanOpenResult_ returns _OK_ if such a stream could be opened, and an error code if not. The possible error codes are:\r\n* ERR_SENDER_RECEIVER_TUPLE if the combination of sender and receiver account is not allowed\r\n* ERR_SENDER_QUOTA if the sender account has achieved the limit of open streams\r\n* ERR_RECEIVER_QUOTA if the receiver account has achieved its limit of open streams\r\n* ERR_SYSTEM_LIMIT if any other limit defined by the contract prevents the stream from being opened, e.g. a limit to the number of open streams which is not tied specifically to an account\r\n* ERR_FLOWRATE if the given value flowrate value is not supported\r\n* ERR_MAXAMOUNT if the given maxAmount value is not supported\r\n* ERR_OTHER for errors not covered by any other error code\r\n\r\n#### `getStreamInfo`\r\n\r\nThis constant method returns some metadata and the current balance of an open stream identified by the given _streamId_.  \r\nThrows if no such open stream exists.  \r\n\r\nOn success, it returns multiple values:\r\n* _startTS_ is the timestamp of the block which contains the transaction which opened the stream.\r\n* _sender_ is the address of the sender account which opened the stream\r\n* _receiver_ is the address of the account which receives the tokens transferred through the stream\r\n* _flowrate_ is the flowrate set when opening the stream\r\n* _maxAmount_ is the maxAmount set when opening the stream\r\n* _transferredAmount_ is the amount of tokens transferred through the stream until now\r\n* _outstandingAmount_ is the amount of tokens which would additionally have been transferred, but weren't because of a lack of funds of the sender account\r\n\r\nTODO: split into _getStreamMetadata_ and _getStreamBalance_ instead?\r\n\r\n#### `closeStream`\r\n\r\nCloses the stream defined by _streamId_.  \r\nAt least the sender and receiver account have permission to close a stream at any time.  \r\nEmits an event _StreamClosed_ where _transferredAmount_ is the amount of tokens transferred through the stream and _outstandingAmount_ is the amount of tokens which would additionally have been transferred, had the sender had enough funds.  \r\nEmits an ERC20 compliant event _Transfer_ with the additional field _transferType_ set to _TransferType.STREAM_.\r\n\r\n### Rationale\r\n\r\nThis standard is specifically NOT about replicating the behaviour of payment channels on-chain.  \r\nIt is designed for implementations which allow for continuous transfers which don't require any settle-/withdraw-type transactions. \r\n\r\n#### Challenges\r\n \r\nThe fundamental difficulty for implementations is to deal with possible _underflow_ situations - that is, streams not transferring at their designated capacity due to insufficient funds of the sender account. In order to not allow streams to issue additional tokens out of thin air in such underflow situations, calculating the stream balance always requires knowledge about the balance of the sender account - which in turn may depend on the balance of streams it's currently receiving, etc. This can lead to potentially infinite recursion depths.\r\n  \r\nWhile it's possible to correctly implement this, the complexity budget of a transaction - hard limited by the block gas limit - forces implementations to define constraints which prevent the contract from reaching states at which it can get stuck, e.g. due to recursions hitting the stack limit of the EVM.  \r\nThere's several ways how this can be prevented, e.g. by allowing accounts to not be sender and receiver of streams at the same time, or by limiting the recursion depth.  \r\nIn order to reason about the complexity of calculating the stream balance, it's useful to model the state of a Streaming Token as a [directed graph](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)#Directed_graph) where nodes represent accounts and edges represent open streams.\r\n\r\n#### Genericity\r\n\r\nThe optimal choice of constraints for safe complexity limits depends on the intended applications. The chosen interface thus doesn't make any assumptions about those and is instead kept generic and as simple as possible.\r\n\r\nImplementations are however free to extend the interface with additional methods, e.g. for batch operations.  \r\n\r\n#### Implicit State Updates\r\n\r\nBlock timestamps (BT) are the core building block which make this kind of Streaming Token possible in the first place.  \r\nThey change with every new block and their correctness is guaranteed by the consensus protocol. More specifically, the block timestamps are guaranteed to be strictly increasing (see its [definition in the yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf#subsection.4.3)). The formal specification doesn't mention a limit to the maximum allowed drift from the current system time of a node, but implementations do impose such a limit (TODO: check and link).  \r\nSince the EVM allows to read the timestamp value of the last block (in Solidity, that is done with [block.timestamp](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html)), the block timestamp can effectively be used like a state variable for the current time which is updated for free with every block.  \r\nSince we can rely on the time never going backwards and since this specification mandates the stream balance to be a monotonically increasing function in time, we can construct contracts with _implicit balance updates_ which don't depend on settle/withdraw-type transactions.\r\n\r\n#### Flowrate\r\n\r\nTypical implementations will have a linear stream balance function.  In this case, the actual flowrate will be constant and equal to the value of the flowrate parameter, as long as the sender has funds.  \r\nOther implementations may have non-linear stream balance functions or even functions with dynamic parameters (e.g. a streaming exchange driven by a price oracle).  \r\nIf an implementation accepts a non-zero value for the flowrate parameter, it has to guarantee that the average flowrate never exceeds that value.  \r\nThere is also types of implementations which require an unlimited flowrate (value of the flowrate parameter set to zero), e.g. a stream based splitter which causes incoming tokens (no matter if they are received through an atomic transfer or through a stream) to immediately being forwarded to a defined set of receiver accounts.\r\n\r\n#### ERC20 compatibility\r\n\r\nWhile all of the ERC20 interface can be adopted / extended by this standard, the implementations of the ERC20 methods needs to be considerably different.  \r\nMost importantly, the method `balanceOf` of a streamable token can't be a simple mapping lookup, as is usually the case. Instead, it needs to calculate the current balance based on a more complex set of state variables, which may also involve recursions.\r\n\r\nSome applications may assume that balance changes can take place only in the presence of a _Transfer_ log event. This can result in an outdated account balance being shown.  \r\nThe constant method balanceOf however always returns the correct balance. In order to always show the correct balance, applications monitoring the token balance of an account should call this method for every new block - as many (most?) are already doing anyway.\r\n\r\nIn order to avoid applications relying on Transfer events alone for token balance updates (e.g. Explorers) to permanently show wrong values, a Transfer event is emitted when streams are closed.  \r\nIn order to allow ERC2100 aware applications to easily distinguish between Transfer events triggered by atomic transfers from those triggered by closed streams, an additional field _transferType_ is set.\r\n\r\nOverall, the interface makes sure that existing applications using the ERC20 interface can use ERC2100 tokens just like any other ERC20 token, without any guarantees specified by the ERC20 standard being violated.  \r\nThe most likely cause for troubles may be applications using hardcoded gas limits, assuming all ERC20 implementations to look basically the same. That's why implementations of this standard should try to keep gas requirements as low as possible, especially for the ERC20 methods.\r\n\r\n## Implementations\r\n\r\nExample implementations can be found here: https://github.com/lab10-coop/streaming-token-contracts\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2100/reactions",
    "total_count": 10,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 2,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/499182161",
    "html_url": "https://github.com/ethereum/EIPs/issues/2100#issuecomment-499182161",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100",
    "id": 499182161,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTE4MjE2MQ==",
    "user": {
      "login": "d10r",
      "id": 5479136,
      "node_id": "MDQ6VXNlcjU0NzkxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5479136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/d10r",
      "html_url": "https://github.com/d10r",
      "followers_url": "https://api.github.com/users/d10r/followers",
      "following_url": "https://api.github.com/users/d10r/following{/other_user}",
      "gists_url": "https://api.github.com/users/d10r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/d10r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/d10r/subscriptions",
      "organizations_url": "https://api.github.com/users/d10r/orgs",
      "repos_url": "https://api.github.com/users/d10r/repos",
      "events_url": "https://api.github.com/users/d10r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/d10r/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-05T17:35:46Z",
    "updated_at": "2019-06-05T17:35:46Z",
    "author_association": "NONE",
    "body": "Details I'm not yet so sure about:\r\n\r\na) `canOpenStream` should make it easy for applications to check if a stream with the given participants and parameters can be opened. If not, it shouldn't be too difficult for the application to figure out why, thus the enum return type. On the other hand, returning a bool would feel more natural here.  \r\nAnd one could even argue that the method is superfluous, because the same result could then be achieved by making a call to `openStream` instead and see if it would succeed, relying on error messages associated to the exception. The latter would be my favorite approach (because simplest), but as far as I'm aware, getting such error messages is still a tricky business (afaik ganache delivers them, but do e.g. Parity and Geth?).\r\n\r\nb) `Transfer` event: is there a risk I overlooked when using it with an additional parameter, as suggested?  \r\nIs it worth specifying the additional enum type `TransferType` or would it be better to take the minimalist approach and just add a bool which is set to `true` when emitted for a stream being closed?\r\n\r\nc) Should `openStream` (and maybe also `closeStream`) have an additional `bytes` parameter for implementation specific data, as is e.g. the case in [ERC-777](https://github.com/ethereum/EIPs/issues/777)? In this proposal I opted not to, because if the encoding of that data is implementation specific anyway, the implementation can as well add an external method which allows to hand over additional arguments - in a structured (properly typed) way; this may even be done by providing additional `openStream` methods overloaded with additional parameters.\r\n\r\nd) Should `getStreamInfo` be split into two methods, one for (static) stream metadata and one for the current balance?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/499182161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/501817026",
    "html_url": "https://github.com/ethereum/EIPs/issues/2100#issuecomment-501817026",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100",
    "id": 501817026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTgxNzAyNg==",
    "user": {
      "login": "SurfingNerd",
      "id": 4928740,
      "node_id": "MDQ6VXNlcjQ5Mjg3NDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4928740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SurfingNerd",
      "html_url": "https://github.com/SurfingNerd",
      "followers_url": "https://api.github.com/users/SurfingNerd/followers",
      "following_url": "https://api.github.com/users/SurfingNerd/following{/other_user}",
      "gists_url": "https://api.github.com/users/SurfingNerd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SurfingNerd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SurfingNerd/subscriptions",
      "organizations_url": "https://api.github.com/users/SurfingNerd/orgs",
      "repos_url": "https://api.github.com/users/SurfingNerd/repos",
      "events_url": "https://api.github.com/users/SurfingNerd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SurfingNerd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T18:04:31Z",
    "updated_at": "2019-06-13T18:04:31Z",
    "author_association": "NONE",
    "body": "we have a video showing an example of this streams here: https://www.youtube.com/watch?v=TqVXTohUEpI.\r\n A in depth description of the project can be found here: https://medium.com/lab10-collective/lab10-wins-infineon-blockchain-hackathon-and-streams-music-over-artis-mainnet-5fff84ffd140 . \r\n\r\nsource code for the 2 raspbery pi:\r\n- start/stop a stream with NFC: https://github.com/lab10-coop/kgkm-nfc\r\n- listen to blockchain and switch power supply: https://github.com/lab10-coop/kgkm-power-switcher",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/501817026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705407",
    "html_url": "https://github.com/ethereum/EIPs/issues/2100#issuecomment-974705407",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100",
    "id": 974705407,
    "node_id": "IC_kwDOAq426M46GNL_",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-20T20:11:58Z",
    "updated_at": "2021-11-20T20:11:58Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086352",
    "html_url": "https://github.com/ethereum/EIPs/issues/2100#issuecomment-986086352",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100",
    "id": 986086352,
    "node_id": "IC_kwDOAq426M46xnvQ",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T20:12:28Z",
    "updated_at": "2021-12-04T20:12:28Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1466950390",
    "html_url": "https://github.com/ethereum/EIPs/issues/2100#issuecomment-1466950390",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100",
    "id": 1466950390,
    "node_id": "IC_kwDOAq426M5Xb-L2",
    "user": {
      "login": "radeksvarz",
      "id": 6020891,
      "node_id": "MDQ6VXNlcjYwMjA4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6020891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/radeksvarz",
      "html_url": "https://github.com/radeksvarz",
      "followers_url": "https://api.github.com/users/radeksvarz/followers",
      "following_url": "https://api.github.com/users/radeksvarz/following{/other_user}",
      "gists_url": "https://api.github.com/users/radeksvarz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/radeksvarz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/radeksvarz/subscriptions",
      "organizations_url": "https://api.github.com/users/radeksvarz/orgs",
      "repos_url": "https://api.github.com/users/radeksvarz/repos",
      "events_url": "https://api.github.com/users/radeksvarz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/radeksvarz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-13T21:00:58Z",
    "updated_at": "2023-03-13T21:00:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @d10r , is there any update on this? Any usage? Real life conclusions?\r\nWhy the steaming did not get any traction?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1466950390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1467749405",
    "html_url": "https://github.com/ethereum/EIPs/issues/2100#issuecomment-1467749405",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100",
    "id": 1467749405,
    "node_id": "IC_kwDOAq426M5XfBQd",
    "user": {
      "login": "d10r",
      "id": 5479136,
      "node_id": "MDQ6VXNlcjU0NzkxMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5479136?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/d10r",
      "html_url": "https://github.com/d10r",
      "followers_url": "https://api.github.com/users/d10r/followers",
      "following_url": "https://api.github.com/users/d10r/following{/other_user}",
      "gists_url": "https://api.github.com/users/d10r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/d10r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/d10r/subscriptions",
      "organizations_url": "https://api.github.com/users/d10r/orgs",
      "repos_url": "https://api.github.com/users/d10r/repos",
      "events_url": "https://api.github.com/users/d10r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/d10r/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T09:43:50Z",
    "updated_at": "2023-03-14T09:43:50Z",
    "author_association": "NONE",
    "body": "Hi @radeksvarz, thx for your interest!\r\nThe specific API proposed in this EIP didn't end up getting adopted anywhere (besides the PoC I provided).\r\nHowever the project [Superfluid](https://www.superfluid.finance/), which I discovered in late 2020 and joined a bit later, covers all the aspects this EIP was about.\r\nSuperfluid has a concept called \"Super Token\" which we eventually want to create an EIP for.\r\nWhile the v1 of the protocol has a somewhat unusual API (control flow for non-ERC20 operations not using the token contract as entry point), we're in the process of iterating towards a new API (token centric - with token contract as entry point for all operations) which shall then be proposed as a new token standard. There now exists a Solidity library which allows to use such a token centric interface already with v1 ([SuperTokenV1Library.sol](https://github.com/superfluid-finance/protocol-monorepo/blob/dev/packages/ethereum-contracts/contracts/apps/SuperTokenV1Library.sol)), which can be considered an iteration towards the Super Token API which v2 Super Tokens will implement natively.\r\nIf you're interested in following and contributing to that development, https://github.com/superfluid-finance/protocol-monorepo/discussions is a good entry point - feedback and contributions are welcome!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1467749405/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1468146348",
    "html_url": "https://github.com/ethereum/EIPs/issues/2100#issuecomment-1468146348",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2100",
    "id": 1468146348,
    "node_id": "IC_kwDOAq426M5XgiKs",
    "user": {
      "login": "Pandapip1",
      "id": 45835846,
      "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pandapip1",
      "html_url": "https://github.com/Pandapip1",
      "followers_url": "https://api.github.com/users/Pandapip1/followers",
      "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
      "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
      "repos_url": "https://api.github.com/users/Pandapip1/repos",
      "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-03-14T13:54:02Z",
    "updated_at": "2023-03-14T13:54:02Z",
    "author_association": "MEMBER",
    "body": "Locking, as discussion threads should be migrated to [FEM](https://ethereum-magicians.org).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1468146348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
