{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/68/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/68/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/68/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/68",
  "id": 134299925,
  "node_id": "MDU6SXNzdWUxMzQyOTk5MjU=",
  "number": 68,
  "title": "web3.js contract object re-design",
  "user": {
    "login": "frozeman",
    "id": 232662,
    "node_id": "MDQ6VXNlcjIzMjY2Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frozeman",
    "html_url": "https://github.com/frozeman",
    "followers_url": "https://api.github.com/users/frozeman/followers",
    "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
    "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
    "organizations_url": "https://api.github.com/users/frozeman/orgs",
    "repos_url": "https://api.github.com/users/frozeman/repos",
    "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frozeman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 49,
  "created_at": "2016-02-17T14:50:23Z",
  "updated_at": "2019-03-08T13:29:30Z",
  "closed_at": "2019-03-08T13:29:29Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\nERC: 68\nTitle: web3.js contract object re-design\nStatus: Draft\nType: Informational\nCreated: 08.01.2016\nResolution: https://github.com/ethereum/web3.js\n```\n# Abstract\n\nThis proposal is a move to make it a more future proof javascript representation of a ethereum smart contract.\n# Motivation\n\nThe contract object in web3.js in its current form has confused in many ways and has some draw backs, like not being able to pass a struct (object) as a functions arguments.\n# Usage\n\n``` js\n// contract options can be\noptions = {\n    data: '0x12345678', // used when deploying contracts, so users don't need to pass in the data later\n    from: '0x12345678..', // default from when sending tx\n    gasPrice: '0xb', // default gasPrice when \n    gasLimit: '0xa' // default gasLimit when \n}\n\n\n// initiating an un\"addresses\" contract object\nvar myContract = new web3.eth.contract(abi [, options])\nmyContract.address = '0x12345678...'; // add address later\n\n// initiating with address\nvar myContract = new web3.eth.contract(abi, address [, options])\n\n// -> deploying a contract\neventemitter = myContract.deploy({\n    arguments: [param1, param2],\n    data: '0x2345678' // when provided, this is used over the one from the options object\n});\neventEmitter.on('error', function(error){ \n });\neventEmitter.on('transactionHash', function(hash){ \n });\neventEmitter.on('mined', function(address) { \n     new web3.eth.contract(abi, address);\n     // or\n    myContract.address = address;\n });\n// also promise style works, will be fired when mined\neventEmitter.then(function(address){\n}).catch(function(error){\n})\n\n// -> get the call data for a contract deployment\nmyContract.encodeABI({\n    method: 'constructor',\n    arguments: [param1, param2],\n    data: '0x2345678'\n});\n> 0x23456780000000000000000000005345345\n\n// -> events\nmyContract.on('someEvent' [, {filter: {myValue1: 23, myValue2: [3,5], ...}, fromBlock:..}], function(error, returnValues, log) {})\n\nmyContract.pastEvents(('someEvent' [, {filter: {myValue1: 23, myValue2: [3,5], ...}, fromBlock:.., toBlock: ...}], function(error, returnValues, log) {\n   // called for every past event.\n});\n\n// if a `filter` option is provided, it means either value can be contained in the matching event (log)\n\n// -> methods\n// -> methods\nmyContract.myMethod(param1).estimate({from: '0x1234...'}, function(error, result){})\n\nmyContract.myMethod(param1).call({from: '0x1234...'}, function(error, result){})\n\nmyContract.myMethod(param1).send({from: '0x1234...'}, function(error, hash){})\n\nvar eventEmitter  = myContract.myMethod(param1).send({from: '0x1234...'})\neventEmitter.on('error', function(error){ \n });\neventEmitter.on('transactionHash', function(hash){ \n });\neventEmitter.on('mined', function(receipt) { \n });\n// also promise style works, will be fired when mined\neventEmitter.then(function(hash){\n}).catch(function(error){\n})\n\n// -> get the abi of a method\nmyContract.encodeABI({\n    method: 'myMethod',\n    arguments: ['hello', 12345] \n}) // get only the data of the call '0x23456787654323456765432340000000000000000000000034'\n```\n# Summary\n\nThe contract object would then look as follow:\n\n``` js\nnew web3.eth.contract(abi, address);\n> {\n   address: '0x123456...',\n   deploy: function(options){...},\n   encodeABI: function(options){...},\n   // events\n   on: function(event, options, callback){...},\n   pastEvents:  function(event, options, callback){...},\n   // methods\n   estimateGas: function(options){...},\n   call: function(options){...},\n   transact: function(options){...}\n}\n```\n# Community Request\n\nPlease give comments and reasons, why we should go in one way or another. **Please lets keep this ERC short, We don't want to spend multiple weeks discussing this ;)**\n",
  "closed_by": {
    "login": "nicksavers",
    "id": 7483198,
    "node_id": "MDQ6VXNlcjc0ODMxOTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7483198?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nicksavers",
    "html_url": "https://github.com/nicksavers",
    "followers_url": "https://api.github.com/users/nicksavers/followers",
    "following_url": "https://api.github.com/users/nicksavers/following{/other_user}",
    "gists_url": "https://api.github.com/users/nicksavers/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nicksavers/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nicksavers/subscriptions",
    "organizations_url": "https://api.github.com/users/nicksavers/orgs",
    "repos_url": "https://api.github.com/users/nicksavers/repos",
    "events_url": "https://api.github.com/users/nicksavers/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nicksavers/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/68/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/68/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185255883",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185255883",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185255883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTI1NTg4Mw==",
    "user": {
      "login": "obscuren",
      "id": 6264126,
      "node_id": "MDQ6VXNlcjYyNjQxMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6264126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obscuren",
      "html_url": "https://github.com/obscuren",
      "followers_url": "https://api.github.com/users/obscuren/followers",
      "following_url": "https://api.github.com/users/obscuren/following{/other_user}",
      "gists_url": "https://api.github.com/users/obscuren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obscuren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obscuren/subscriptions",
      "organizations_url": "https://api.github.com/users/obscuren/orgs",
      "repos_url": "https://api.github.com/users/obscuren/repos",
      "events_url": "https://api.github.com/users/obscuren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obscuren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-17T15:31:34Z",
    "updated_at": "2016-02-17T15:34:44Z",
    "author_association": "MEMBER",
    "body": "The gist of changes (please correct me if I'm wrong):\n1. `create` is renamed to `deploy`\n2. `getABI` has been added as an exposed method of the contract\n3. `on(event)` instead of `Event`\n\nThe `myContract.on('someEvent')` can become a real headache if improperly implemented. I can certain see the rational behind it but I urge you to do some _event checking_ when events are added. The old behaviour let the compiler/interpreter do sort of type checking e.g. when `MyEvent` wasn't declared it would throw an error and right now would just silently ignore it (**if incorrectly implemented**). My only suggestion would be that when new filters are created that you do some checking whether a filter actually exist and in the case where it's missing you throw an exception. I understand this might be obvious to some but it is easily forgotten. This should certainly not be viewed as a _this-is-how-you-should-code_ kind of comment :-)\n\nI welcome the `getABI` method :pray: as I've been wanting it on so many occasions (though mainly for debugging).\n\nI don't quite understand the rational behind the `deploy` method. What's wrong with `create`?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185255883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185262089",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185262089",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185262089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTI2MjA4OQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-17T15:42:20Z",
    "updated_at": "2016-02-17T15:42:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "1. `create` was called `new` since a while already. I think deploy is more clear, as your actually deploy a contract on chain\n2. This was also already in in the form of `contract.myMethod.getData(param1, param2)`. But this structure makes it more clean and could be even used for events\n3. it was right now all attached to the contract object, which can lead to namespace clashes: `contract.MyEvent(..)`. Also the `.on('MyEvent')` is commonly used and understood in the JS world.\n4. The new method calling structure allows for passing objects (structs) as well, as we before couldn't differ between the last `options` object and a parameter.\n\n_Additional ideas:_\n\nWe can think of using a `parameter` object, instead of `function(param1,param2)`, so we can add types to the parameters to work with solidities same-name functions.\n\nThe only drawback in this proposal right now is that you have no `contract factory` object anymore. This allowed you to instantiate many objects from this \"factory class\", but also lead to a lot of confusion. This can be replaced by simply making the ABI globally (or contextual) available, which then can be used to instantiate a new contract object.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185262089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185277294",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185277294",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185277294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTI3NzI5NA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-17T16:12:55Z",
    "updated_at": "2016-02-17T16:12:55Z",
    "author_association": "MEMBER",
    "body": "Nice proposal!\n\nSome ideas:\n\nEvents given as string: I think it's fine, but should also allow for parameter types to disambiguate and throw if the event does not exist.\n\n`getABI` should be called `encode`, `encodeFunctionCall` or `abiEncode`. We should also provide stand-alone encode and decode functions that do not have to be tied to a certain function and can also work without function name (we have to provide the types, though).\n\nInside getABI we should use `arguments` instead of `parameters` (parameter is the abstract thing, argument is the value you substitude the parameter with).\n\nFor event filters: Can we please make it clear in the syntax whether we AND or OR the arguments?\n\nDo we still allow `myContract.myMethod(2, function(){})` for constant functions?\n\nI think it is a good idea to separate the actual function arguments and the metadata like gas and sender.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185277294/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185283273",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185283273",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185283273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTI4MzI3Mw==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-17T16:27:32Z",
    "updated_at": "2016-02-17T16:27:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for you comment.\n\nI changed it to `encodeABI` and also to `arguments`.\n\nThe old `myContrac.myMethod` is not supported anymore to avoid namespace clashes, therefore we have now `myContract.call().myMethod()` (which let you call/transact to any function. We might throw an `console.warn` if somebody transacts to a constant func.).\n\nFor the last comment, i added\n\"if a `filter` option is provided, it means either value can be contained in the matching event (log)\"\n\nIs that fine, or what do you mean.?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185283273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185521695",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185521695",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185521695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTUyMTY5NQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-18T03:01:29Z",
    "updated_at": "2016-02-18T03:01:29Z",
    "author_association": "NONE",
    "body": "Looks nice! :smile: \n\nSo in this usage \n\n``` js\neventEmitter.on('mined', function(address) { \n     new web3.eth.contract(abi, address);\n     // or\n    myContract.address = address;\n });\n```\n\nyou only get the address once the transaction creating the contract has been mined. Sometimes it might be desirable to create a contract and immediately send a transaction to it. Since the address only depends on the nonce the address is known right after the transaction is sent off. It might be useful to have the API return the address after the transaction is sent. Would that create other issues?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185521695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185634985",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185634985",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185634985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTYzNDk4NQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-18T10:00:04Z",
    "updated_at": "2016-02-18T10:00:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is most likely the right address, if you predetermine it from the nonce, but there are cases where it could fail (e.g. a different tx got in before you etc, but then it might fail right away).\n\nI will think about adding it.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185634985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185643473",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185643473",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185643473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTY0MzQ3Mw==",
    "user": {
      "login": "gavofyork",
      "id": 138296,
      "node_id": "MDQ6VXNlcjEzODI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavofyork",
      "html_url": "https://github.com/gavofyork",
      "followers_url": "https://api.github.com/users/gavofyork/followers",
      "following_url": "https://api.github.com/users/gavofyork/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavofyork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavofyork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavofyork/subscriptions",
      "organizations_url": "https://api.github.com/users/gavofyork/orgs",
      "repos_url": "https://api.github.com/users/gavofyork/repos",
      "events_url": "https://api.github.com/users/gavofyork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavofyork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-18T10:28:09Z",
    "updated_at": "2016-02-18T10:28:09Z",
    "author_association": "MEMBER",
    "body": "The API doesn't seem to handle microforking (i.e. chain reversions for these events) - any plans for that? Or suggested workarounds?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185643473/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185647581",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185647581",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185647581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTY0NzU4MQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-18T10:41:31Z",
    "updated_at": "2016-02-18T10:41:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "They will, the callback is fired with the log object, which will have the `status: 'deleted'` or something. This is more a node thing. Though i might add this as a fourth param to the called callback or so.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185647581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185809860",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185809860",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185809860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTgwOTg2MA==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-18T16:47:51Z",
    "updated_at": "2016-02-18T16:47:51Z",
    "author_association": "MEMBER",
    "body": "I very much approve of the handling of structs. This will make SO many things easier when it comes to solidity. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185809860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185969844",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185969844",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185969844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTk2OTg0NA==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-18T22:55:54Z",
    "updated_at": "2016-02-18T23:03:31Z",
    "author_association": "NONE",
    "body": "I'd like to introduce [ether-pudding](https://github.com/ConsenSys/ether-pudding) (a.k.a., \"Pudding\") for those that aren't familiar. Pudding is a similar abstraction layer for Web3, but it goes beyond what Web3's abstraction layer does, and even this ERC. My end goal for Pudding was always for it to not exist, and so I hope that its features can eventually get consumed. \n\nRegarding the ERC, I'm very excited about `myContract.transact(...).on(\"mined\")`. That was one of the original impetuses for creating Pudding, and I'm happy that my code no longer needs to be there. That said, there's a lot more the abstraction layer can do to make life better for developers, and I've included some suggestions below, using Pudding as an example.\n1. Integrate Promises, or some mechanism for transaction and call chaining. In Pudding, an example coin contract including a mixture of transactions and calls might look like this:\n   \n   ``` javascript\n   var self = this;\n   this.displayLoadingIcon();\n   metaCoin.sendCoin(receiver, amount, {from: fromAccount}).then(function(tx_hash) {\n     // This callback will only be executed once transaction has been mined\n     return metaCoin.getSendersBalance.call({from: fromAccount});\n   }).then(function(balance) {\n     self.removeLoadingIcon();\n     self.displayBalance(web3.fromWei(balance, \"ether\"));\n   }).catch(function(e) {\n     alert(\"Oh no, there was an error!\");\n   });\n   ```\n   \n   In this example, we send some \"meta coin\" to the receiver, then refresh the balance of the sender once the transaction is finished processing. Obviously, I've inserted other functions that might exist within this this application to communicate what's happening to the user; but it's very clear what the app is doing and in what order it's doing it. Note that this structure is **very good for unit tests**, in that you don't want to start on one step until the one before it has been completed.\n2. Provide a way to set default transaction values per contract, per contract instance, or perhaps globally. As an example, specifying the from address for every transaction is tedious, and is even worse if you need to specify the gas price and gas limit as well. With Pudding, this is easily solved in a few lines of code, where I can create an instance of the MetaCoin contract that applies to a specific address:\n   \n   ``` javascript\n   var myMeta = MetaCoin.at(\"0x1234...\");\n   myMeta.defaults({\n     from: \"0xabcd...\",\n     gasPrice: \"100000000000\" // random number\n     gasLimit: \"100000\" // also random\n   });\n   myMeta.sendCoin(200).then(function() {\n     return myMeta.getSendersBalance.call();\n   })...\n   ```\n   \n   Perhaps even better, this can be integrated into the `at` or `deploy` functions:\n   \n   ``` javascript\n   var myMeta = MetaCoin.at(\"0x1234\", {from: \"...\", gasPrice: \"...\", gasLimit: \"...\"});\n   ```\n   \n   In these examples, for each call or transaction the `from` address \"0xabcd...\" is used because it was specified as the default. The same is true for `gasPrice` and `gasLimit`.\n3. Create a way to serialize contracts, with ABIs, binaries and deployed addresses into a Javascript file that can then be included in your project via `require()` or `import`. Pudding can already do this for you, if asked, and tools like [Truffle](https://github.com/ConsenSys/truffle) already take advantage. The benefit is you can use tools like `webpack`, `browserify`, etc. to easily include your contract and contract's assets within your project in a manageably way.\n4. Lastly, like Pudding, the contract's binary should be supplied in the initial object creation instead of passed during `deploy()`. Proposed example:\n   \n   ``` javascript\n   var myContract = new web3.eth.contract(abi, binary);\n   ```\n   \n   Or currently, in Pudding: \n   \n   ``` javascript\n   Pudding.whisk({abi: ..., binary: ..., address: ...})\n   ```\n   \n   There are negatives to passing the binary during `deploy()`. The first is that you could easily send data to `.deploy()` that doesn't correspond with the abi that was passed into `web3.eth.contract()` originally. Worse, however, is that you now have to make that binary accessible to **any** part of the code that needs to create a new instance of that contract. This requires a lot of parameter passing and is very tedious. Instead, it should only need to be specified once, and the contract object should manage that binary.\n\n---\n\nGiven all the features I mentioned together, interacting with contracts becomes much easier, and in total there's less to think about. Here's a Pudding example:\n\n``` javascript\n// Read in the contract from a file that contains the abi, binary, and other metadata.\n// .load() is an idiosyncrasy; we need to ensure the same Pudding instance is used throughout\nvar MyContract = require(\"./compiled-contracts/MyContract.sol.js\");\nMyContract.load(Pudding); \n\n// Set the defaults class-wide, and not just instance-wide.\nMyContract.defaults({\n  from: \"0x1234...\"\n});\n\n// Create a new version of the contract, without having to worry about the details\nvar myContract;\nMyContract.new(function(instance) {\n  // Instance is now on the blockchain, and can be interacted with\n  myContract = instance;\n\n  // Call someFunction() on the instance.\n  return myContract.someFunction();\n}).then(function(tx_hash) {\n  // Now read some data, since that transaction has been mined.\n  return myContract.readSomeData.call();\n}).then(function(some_data) {\n  // Do something with the data we just read from the network.\n  ...\n}).catch(function(e) {\n  // Handle errors throughout the whole promise chain\n});\n```\n\nI think we have a chance to make interacting with the blockchain less tedious for the developer. Pudding is a step forward, but I'd very much hope Pudding doesn't have to exist. This ERC still requires the developer to think about a lot of moving parts, like mining, or dealing with the hash, etc. I think in general we should focus on reducing the amount of things the developer has to think about, and work on making the resulting code clearer. \n\nAside: You _can_ think about mining, transaction hashes, **_not**_ waiting for a transaction to be mined, etc. with Pudding, if you want to. But that's not Pudding's -- and I think _our_ -- main goal.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185969844/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185986177",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-185986177",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 185986177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTk4NjE3Nw==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T00:02:31Z",
    "updated_at": "2016-02-19T00:02:31Z",
    "author_association": "MEMBER",
    "body": "@tcoulter is spot on. Promised are an awesome addition and should be a standard for web3. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/185986177/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186043285",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-186043285",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 186043285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjA0MzI4NQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T04:19:06Z",
    "updated_at": "2016-02-19T04:19:06Z",
    "author_association": "NONE",
    "body": ":+1: for @tcoulter's points! Pudding is very nice, I use it for all my web3 projects. Good that we have callback on mined transaction, Promises would be very nice in web3!\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186043285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186127233",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-186127233",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 186127233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjEyNzIzMw==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T09:21:31Z",
    "updated_at": "2016-02-19T09:21:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tcoulter i agree with all of your points, though with slight differences:\n1. Integrate Promises: I agree, but how would you \"only\" return the tx has, without waiting for it to be mined? This removes this low-level way of dealing with confirmations etc yourself. You also have no way for the user to show a \"in progress\" after you send the tx, as there is no callback fire immediately.\n   I rather here go with the eventEmitter, as proposed in the ERC, as it allows for multiple events.  \n   Though this does not mean, that promises are good for all the other method calls we have. I'm actually all for removing the sync all together, as its a no-go anyway.\n2. \"Provide a way to set default transaction data [in contracts]\": Thats a very nice addition and i will add this to the proposal\n3. \"Create a way to serialize contracts\": awesome idea, but that might be better in a separate tool like yours\n4. \"the contract's binary should be supplied in the initial object\": Thats definitely something i will add as an optional option. But not as an required one, because sometimes you deal with contracts, you never want to deploy, nor do you need to know the binary. You simply want to interact with them.\n\nThanks again for all the great feedback. If anybody want to help me integrating these new features, please shot me a message, as i'm only one person with two hands and 3 projects ;)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186127233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186236407",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-186236407",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 186236407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjIzNjQwNw==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T14:31:08Z",
    "updated_at": "2016-02-19T14:32:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Follow the progress: https://github.com/ethereum/web3.js/blob/newContract/lib/web3/contract.js\n\nI would appreciate any help.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186236407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186263501",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-186263501",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 186263501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjI2MzUwMQ==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T15:38:38Z",
    "updated_at": "2016-02-19T15:38:38Z",
    "author_association": "MEMBER",
    "body": "@frozeman The way I understand promises in pudding, it does just that in waiting for the transaction to be mined which then sends a callback, and then the promise clears and moves onto the next step. \n\nFurthermore, why should serializing contracts be in a separate tool, just out of curiosity? \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186263501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186278590",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-186278590",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 186278590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjI3ODU5MA==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-19T16:07:09Z",
    "updated_at": "2016-02-19T16:59:18Z",
    "author_association": "NONE",
    "body": "Great @frozeman, glad this helps!\n\nRegarding this point: \n\n> I agree, but how would you \"only\" return the tx has, without waiting for it to be mined?\n\nPudding accomplishes this by having two different functions, one that waits to be mined and one that doesn't. In my experience, I use the function that waits to be mined 99% of the time. Here's an example:\n\n```\nvar myContract = MyContract.at(\"0xabcd...\");\nmyContract.someFunction(function(tx_hash) {\n  // This callback won't be called until the transaction is mined.\n  // Arguably, Pudding should also return the transaction receipt here, but it doesn't currently\n});\nmyContract.someFunction.sendTransaction(function(tx_hash) {\n  // This callback will be called immediately after the transaction has been submitted\n});\n```\n\nThe default behavior for Pudding is to wait until the transaction has been mined, however you can circumvent this by calling `sendTransaction` instead on each function. I think this is a good default while also allowing developers the flexibility to manage their transactions in a different way. Promises, in this case, are mostly for transaction and call chaining when waiting on a transaction to be mined and avoiding \"callback hell\" in the process. Note that with the `.on(\"mined\", ...)` behavior in the ERC, you still get the equivalent of callback hell as you might initiate a second transaction or call within the `on(\"mined\", ...)` callback, which would then result in another `on(\"mined\", ...)` callback, and so on and so forth.\n\nRegarding @VoR0220's question:\n\n> Furthermore, why should serializing contracts be in a separate tool, just out of curiosity?\n\nI'm assuming that's because it adds a lot of dependencies to web3, and were it to perform all the serialization functionality web3 would have to write to the filesystem, which only works in some environements (i.e., Node). I'm fine with this, actually. Pudding would then become a code management tool more than an abstraction layer, which is a fine separation, I think.\n\nCheers!\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186278590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186463106",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-186463106",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 186463106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ2MzEwNg==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T00:14:47Z",
    "updated_at": "2016-02-20T00:14:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that chaining for function calls etc is nice, and i'm all for promises. In fact i wrote a whole API layer on promise basis a few years back. \n\nBut in this case i don't think promises, or two separate functions is the right way.\n\nThe advantage of the event emitter is that it allows us to later add even more events, which can then even be subscriptions under the hood.\nI can think of events for `confirmation`, which fires every block for \"x\" blocks. And a `confirmed` event, which fires after the \"x\" block.\n\nIt allows to use web3.js low level, as well as convenient while having a clear API.\n\nPromises can only do one action after a certain time, and are therefore only really useful when we do contract function and method calls.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186463106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186470484",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-186470484",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 186470484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjQ3MDQ4NA==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T00:49:38Z",
    "updated_at": "2016-02-20T00:49:38Z",
    "author_association": "NONE",
    "body": "> Promises can only do one action after a certain time, and are therefore only really useful when we do contract function and method calls.\n\nI agree with all your points, but in my experience \"doing contract function and method calls\" is 99% of my interaction with the Ethereum blockchain. We can still emit events for more advanced things, but I think we should focus the main use case on the features people will use most often.\n\nRegarding promises specifically, I don't care if we use promises or some other chaining method, but I'd really like to avoid code like this, which is how most of my code would become:\n\n```\nmyContract.transact(...).someFunction.on(\"mined\", function() {\n  myContract.transact(...).someOtherFunction.on(\"mined\", function() {\n    myContract.call(...).yetAnotherFunction(function() {\n      // two transactions and a call, as a simple example\n    });\n  });\n});\n```\n\nThis seems less clear. We can have events _and_ chaining (chaining without promises). It's possible, and I'd be happy to try and code up an example.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186470484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186636559",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-186636559",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 186636559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NjYzNjU1OQ==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-20T16:12:39Z",
    "updated_at": "2016-02-20T16:12:39Z",
    "author_association": "NONE",
    "body": "I'd be very happy with these changes, but I'm just concerned that they're changes. I'd have a large amount of code that would need rewritten if this API replaced the current API, and I'm sure other projects would have similar amounts of code to rewrite.\n\nCan we work some under-the-hood JS magic and have web3.eth.contract return (deprecated) old-style objects if simply called and new-style contracts if new is used? (I have no idea if this is even possible.) Alternately, if that is impossible/would awaken foul horrors from the depths of time, could we get away with specifying the version somewhere?\n\nI suppose, however, that inevitably that web3 has to make breaking changes, (Like, say, when web3.sha3 works as one expects it would.) For my own major project, I get web3 from browserify, so I could probably just specify the version using npm. The real question is: how will mist provide web3 in the future, and how much guarantee will developers have that web3 will remain stable?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/186636559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187136709",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187136709",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187136709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzEzNjcwOQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T11:43:35Z",
    "updated_at": "2016-02-22T11:43:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tcoulter i understand you callback hell fear, but only returning promises, which are resolved when its mined limits you for when you need the tx has directly..\nevents can have multiple event types and therefore are more flexible.\n\nHow would you allow chaining while being flexible??\n\n@Smithgift we will need to make breaking changes, and users can choose their own web3.js version.\nWe are still a very small community and therefore i want to get these changes in ASP, to avoid this in the future to often.\n\nConcerning Mist. Ideally the dapp developers always uses its own web3.js version. The mist is only there for the simple dapps \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187136709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187171771",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187171771",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187171771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzE3MTc3MQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T13:27:23Z",
    "updated_at": "2016-02-22T13:27:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tcoulter do you think about some crazy promise style event like?\n\n``` js\n\ncontract.transact().myMethod().on('mined').then(function(){   })\n\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187171771/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187297165",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187297165",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187297165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzI5NzE2NQ==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T18:03:47Z",
    "updated_at": "2016-02-22T18:06:52Z",
    "author_association": "NONE",
    "body": "@frozeman I was more thinking something like this, which returns a promise-like object that's also an event emitter:\n\n``` javascript\nvar transaction = contract.transact().myMethod();\ntransaction.on(\"transactionHash\", function() {\n  // This function will be called when the transaction is returned \n  // (i.e., once transaction is submitted)\n});\ntransaction.on(\"mined\", function() {\n  // This function will be called when the transaction is mined\n});\ntransaction.then(function(tx_hash) {\n  // This is equivalent to transaction.on(\"mined\"), and fires at the same time.\n  // Here's where the chaining happens: returning a new transaction object for\n  // the next transaction, like you can do with promises.\n  return contract.transact().otherMethod();\n}).then(function(tx_hash) {\n  // Again, this won't be fired until the transaction is mined.\n  // In addition, we should support calls in chainable format. This is arguably \n  // more important as I make more calls than transactions, one after the other:\n  return contract.call().yetAnotherMethod();\n}).then(function(return_value) {\n  // Do something with the call's return value.\n}).catch(function(e) {\n  // It's important that we support catching errors across the whole chain, like promises.\n});\n```\n\nImplementation-wise, I think there are two avenues to achieving this: \n1. Create our own class-like object which extends from EventEmitter, adding in the promise functionality ourselves.\n2. Use an already-created promise library (i.e., bluebird, or native Promises) and add in the EventEmitter behavior on the object we return from `contract.transact().myMethod();`.\n\nI think both are doable. If we choose the first, we should be sure to use the same Promise interface so we can easily integrate with other promise libraries and get all the benefit of Promises without having to completely rewrite the whole library (for instance, I use `Promise.all()` a lot to fire off many transactions at once that all need to be mined before continuing). If we choose the second (my favorite) we can just return a custom promise that inherits from EventEmitter, giving us the best of both worlds. In this case, I suspect we'd choose native promises so we don't have to include another dependency in web3.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187297165/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187298683",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187298683",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187298683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzI5ODY4Mw==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T18:08:59Z",
    "updated_at": "2016-02-22T18:10:20Z",
    "author_association": "NONE",
    "body": "PS: I'm on the edge of my seat whether you end up liking this. So excited if this gets in. Also happy to help with implementation.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187298683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187334623",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187334623",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187334623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzMzNDYyMw==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T19:29:41Z",
    "updated_at": "2016-02-22T19:29:41Z",
    "author_association": "MEMBER",
    "body": ":+1: @tcoulter 's proposal. I really, really think we should enable some kind of promise into the transaction sending. It makes coding and testing for these things soooooo much easier. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187334623/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187639106",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187639106",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187639106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzYzOTEwNg==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T10:16:47Z",
    "updated_at": "2016-02-23T10:16:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sounds like a good idea. I already started [here](https://github.com/ethereum/web3.js/blob/newContract/lib/web3/contract.js#L185-L247): with the eventEmitter, we could simply add promise support then i guess.\nWhat promise library is best, or native?\n\nI used Q from kritokwal a while back\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187639106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187658780",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187658780",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187658780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzY1ODc4MA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T11:19:37Z",
    "updated_at": "2016-02-23T14:25:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tcoulter this was an awesome idea!\nThe magic here is:\n\n``` js\nvar eventifiedPromise = function() {\n    var resolve, reject,\n        emitter = new EventEmitter(),\n        promise = new Promise(function() {\n        resolve = arguments[0];\n        reject = arguments[1];\n    });\n\n    // add eventEmitter to the promise\n    promise.emit = emitter.emit;\n    promise.on = emitter.on;\n    promise.once = emitter.once;\n    promise.listeners = emitter.listeners;\n    promise.addListener = emitter.addListener;\n    promise.removeListener = emitter.removeListener;\n    promise.removeAllListeners = emitter.removeAllListeners;\n\n    return {\n        resolve: resolve,\n        reject: reject,\n        promise: promise\n    };\n};\n\n```\n\nI implemented and tested it with `contract.deploy()` and it seem to work fine. See https://github.com/ethereum/web3.js/commit/9878c8604dacbd781ab4560a0c0eb1c89ace2052.\n\nThis now allows deploy (and later other contract methods) to allow: callbacks, promises and events!!\n\nSo everybody can choose which one to use. \n\nExample:\n\n``` js\nmyContract.deploy({from: '0x12345...', data: '0x234567...', arguments: [123]}, function(e, res){ console.log('Callback results:', e,res)});\n\nevent.on('error', function(error){ console.log('Event error:', error)});\nevent.on('transactionHash', function(hash){ console.log('Event transactionHash:', hash)});\nevent.on('mined', function(address){ console.log('Event mined:', address)})\n\nevent.then(function(address){ console.log('Pomise mined:', address)  }).catch(function(e){ console.log('Promise error: ', e); });\n\n> Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}\n\n> Callback results: null 0xcea73979a424ebd2c1e4ecdd0844c5cb4644e92cf04f7e5f1cc5d87e69ee5168\n> event transactionHash: 0xcea73979a424ebd2c1e4ecdd0844c5cb4644e92cf04f7e5f1cc5d87e69ee5168\n> Event mined: 0xa1fb3680c055ba95f24bacb59ed1b32cbc699326\n> Promise mined: 0xa1fb3680c055ba95f24bacb59ed1b32cbc699326\n```\n\nBTW i clear all event listeners automatically after an error or after the mined event, as no other events will ever be fired.\nYou guys think thats a good idea?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187658780/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187728931",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187728931",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187728931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzcyODkzMQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T14:56:50Z",
    "updated_at": "2016-02-23T14:57:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Made `contract.encodeABI` work:\n\n``` js\n\ncontract.encodeABI({method: 'constructor', arguments: ['0x23456789'], data: '0x12345678912345678'})\n> \"0x123456789123456780000000000000000000000000000000000000000000000000000000023456789\"\n\ncontract.encodeABI({method: 'seller', arguments: [2]})\n> \"0x37ab20b00000000000000000000000000000000000000000000000000000000000000002\"\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187728931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187775643",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187775643",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187775643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzc3NTY0Mw==",
    "user": {
      "login": "rfikki",
      "id": 1055929,
      "node_id": "MDQ6VXNlcjEwNTU5Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1055929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rfikki",
      "html_url": "https://github.com/rfikki",
      "followers_url": "https://api.github.com/users/rfikki/followers",
      "following_url": "https://api.github.com/users/rfikki/following{/other_user}",
      "gists_url": "https://api.github.com/users/rfikki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rfikki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rfikki/subscriptions",
      "organizations_url": "https://api.github.com/users/rfikki/orgs",
      "repos_url": "https://api.github.com/users/rfikki/repos",
      "events_url": "https://api.github.com/users/rfikki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rfikki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T16:32:35Z",
    "updated_at": "2016-02-23T16:32:35Z",
    "author_association": "NONE",
    "body": "This all sounds great. What kind of time frame are we looking at for this release?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187775643/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187789883",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187789883",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187789883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzc4OTg4Mw==",
    "user": {
      "login": "tcoulter",
      "id": 92629,
      "node_id": "MDQ6VXNlcjkyNjI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/92629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tcoulter",
      "html_url": "https://github.com/tcoulter",
      "followers_url": "https://api.github.com/users/tcoulter/followers",
      "following_url": "https://api.github.com/users/tcoulter/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcoulter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tcoulter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcoulter/subscriptions",
      "organizations_url": "https://api.github.com/users/tcoulter/orgs",
      "repos_url": "https://api.github.com/users/tcoulter/repos",
      "events_url": "https://api.github.com/users/tcoulter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tcoulter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T16:56:58Z",
    "updated_at": "2016-02-23T16:57:05Z",
    "author_association": "NONE",
    "body": "Awesome @frozeman! Nice work! :clap: :moneybag: \n\n> BTW i clear all event listeners automatically after an error or after the mined event, as no other events will ever be fired. You guys think thats a good idea?\n\nSounds like the right plan. If there's an error you don't want things to continue. \n\nSo excited for this. Are you just using native promises? I'm assuming native is the best way to go to reduce dependencies, though my favorite library is bluebird. I'd only consider using a library if the execution environment didn't support native promises. Looks like browsers [are cool with it](http://caniuse.com/#feat=promises). Need to find more data about Node.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187789883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187792518",
    "html_url": "https://github.com/ethereum/EIPs/issues/68#issuecomment-187792518",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/68",
    "id": 187792518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzc5MjUxOA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T17:02:30Z",
    "updated_at": "2016-02-23T17:03:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rfikki the contract object might be done soon, but i have some more changes planned for web3.js and we move completely to pub/sub ([PR](https://github.com/ethereum/web3.js/pull/379) already ready)\nSo this is part of the overhaul for web3.js 1.0. If people help me we can get there faster, on the end its only me working on it right now (and i have also mist and the wallet as work)\n\nParts of this also depend on how fast we get changes into geth and other clients.\n\n@tcoulter i used native promises, as you can see here: https://github.com/ethereum/web3.js/commit/9878c8604dacbd781ab4560a0c0eb1c89ace2052\n\nThough i'm not sure if i should load bluebird as backup, e.g. for IE. Node.js works fine with promises, at least the version i have running.\nNative promises and blue bird seem to work exactly the same.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/187792518/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
