{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1404",
  "id": 359329364,
  "node_id": "MDU6SXNzdWUzNTkzMjkzNjQ=",
  "number": 1404,
  "title": "ERC-1404: Simple Restricted Token Standard",
  "user": {
    "login": "masonicGIT",
    "id": 7960935,
    "node_id": "MDQ6VXNlcjc5NjA5MzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7960935?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/masonicGIT",
    "html_url": "https://github.com/masonicGIT",
    "followers_url": "https://api.github.com/users/masonicGIT/followers",
    "following_url": "https://api.github.com/users/masonicGIT/following{/other_user}",
    "gists_url": "https://api.github.com/users/masonicGIT/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/masonicGIT/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/masonicGIT/subscriptions",
    "organizations_url": "https://api.github.com/users/masonicGIT/orgs",
    "repos_url": "https://api.github.com/users/masonicGIT/repos",
    "events_url": "https://api.github.com/users/masonicGIT/events{/privacy}",
    "received_events_url": "https://api.github.com/users/masonicGIT/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 41,
  "created_at": "2018-09-12T06:12:07Z",
  "updated_at": "2022-03-26T13:05:59Z",
  "closed_at": "2022-03-26T13:05:59Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "|eip         |title  | authors| status | discussions-to | type | category | created |\r\n|---------|----|---------|-------|----------------|-----|----------|---------|\r\n| 1404 | Simple Restricted Token Standard|Ron Gierlach <@rongierlach>, James Poole <@pooleja>, Mason Borda <@masonicgit>, Lawson Baker <@lwsnbaker> | Draft | https://github.com/simple-restricted-token/simple-restricted-token/issues | Standards | ERC | 2018-07-27 |\r\n\r\n# Simple Restricted Token Standard\r\n\r\n## Simple Summary\r\n\r\nA simple and interoperable standard for issuing tokens with transfer restrictions. The following draws on input from top issuers, law firms, relevant US regulatory bodies, and exchanges.  \r\n\r\n## Abstract\r\n\r\nCurrent ERC token standards have provided the community with a platform on which to develop a decentralized economy that is focused on building Ethereum applications for the real world. As these applications mature and face consumer adoption, they begin to interface with corporate governance requirements as well as regulations. They must not only be able to meet corporate and regulatory requirements but must also be able to integrate with technology platforms underpinning their associated businesses. What follows is a simple and extendable standard that seeks to ease the burden of integration for wallets, exchanges, and issuers.\r\n\r\n## Motivation\r\n\r\nToken issuers need a way to restrict transfers of ERC-20 tokens to be compliant with securities laws and other contractual obligations. Current implementations do not address these requirements. \r\n\r\nA few emergent examples:\r\n\r\n- Enforcing Token Lock-Up Periods\r\n- Enforcing Passed AML/KYC Checks\r\n- Private Real-Estate Investment Trusts\r\n- Delaware General Corporations Law Shares\r\n\r\nFurthermore, standards adoption amongst token issuers has the potential to evolve into a dynamic and interoperable landscape of automated compliance.\r\n\r\nThe following design gives greater freedom / upgradability to token issuers and simultaneously decreases the burden of integration for developers and exchanges.\r\n\r\nAdditionally, we see fit to provide a pattern by which human-readable messages may be returned when token transfers are reverted. Transparency as to _why_ a token's transfer was reverted is of equal importance to the successful enforcement of the transfer restriction itself.\r\n\r\nA widely adopted standard for detecting restrictions and messaging errors within token transfers will highly convenience the exchanges, wallets, and issuers of the future.\r\n\r\n## Specification\r\n\r\nThe ERC-20 token provides the following basic features:\r\n```solidity\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n```\r\nThe ERC-1404 standard builds on ERC-20's interface, adding two functions:\r\n```solidity\r\ncontract ERC1404 is ERC20 {\r\n  function detectTransferRestriction (address from, address to, uint256 value) public view returns (uint8);\r\n  function messageForTransferRestriction (uint8 restrictionCode) public view returns (string);\r\n}\r\n```\r\n\r\nThe logic of `detectTransferRestriction` and `messageForTransferRestriction` are left up to the issuer.\r\n\r\nThe only requirement is that `detectTransferRestriction` must be evaluated inside a token's `transfer` and `transferFrom` methods.\r\n\r\nIf, inside these transfer methods, `detectTransferRestriction` returns a value other than `0`, the transaction should be reverted.\r\n\r\n## Rationale\r\n\r\nThe standard proposes two functions on top of the ERC-20 standard. Let's discuss the rationale for each.\r\n\r\n1. `detectTransferRestriction` - This function is where an issuer enforces the restriction logic of their token transfers. Some examples of this might include, checking if the token recipient is whitelisted, checking if a sender's tokens are frozen in a lock-up period, etc. Because implementation is up to the issuer, this function serves solely to standardize _where_ execution of such logic should be initiated. Additionally, 3rd parties may publicly call this function to check the expected outcome of a transfer. Because this function returns a `uint8` code rather than a boolean or just reverting, it allows the function caller to know the reason why a transfer might fail and report this to relevant counterparties.\r\n2. `messageForTransferRestriction` - This function is effectively an accessor for the \"message\", a human-readable explanation as to _why_ a transaction is restricted. By standardizing message look-ups, we empower user interface builders to effectively report errors to users.\r\n\r\n## Backwards Compatibility\r\n\r\nBy design ERC-1404 is fully backwards compatible with ERC-20.  \r\nSome examples of how it may be integrated with common types of restricted tokens may be found [here](https://github.com/simple-restricted-token/simple-restricted-token-standard#readme).\r\n\r\n## Test Cases & Implementation\r\n\r\nSee the reference implementation and tests [here](https://github.com/simple-restricted-token/reference-implementation#readme).  \r\nSee some examples of common usage patterns for ERC-1404 [here](https://github.com/simple-restricted-token/simple-restricted-token-standard#readme).\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1404/reactions",
    "total_count": 56,
    "+1": 42,
    "-1": 1,
    "laugh": 0,
    "hooray": 6,
    "confused": 0,
    "heart": 7,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/422968306",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-422968306",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 422968306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjk2ODMwNg==",
    "user": {
      "login": "bmann",
      "id": 280420,
      "node_id": "MDQ6VXNlcjI4MDQyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/280420?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bmann",
      "html_url": "https://github.com/bmann",
      "followers_url": "https://api.github.com/users/bmann/followers",
      "following_url": "https://api.github.com/users/bmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/bmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bmann/subscriptions",
      "organizations_url": "https://api.github.com/users/bmann/orgs",
      "repos_url": "https://api.github.com/users/bmann/repos",
      "events_url": "https://api.github.com/users/bmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-19T21:41:48Z",
    "updated_at": "2018-09-19T21:41:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "This seems very similar to #902?\r\n\r\n902 uses a ```check``` function (it's broader than _just_ security tokens, but effectively this is the same as ```detectTransferRestriction```).\r\n\r\nNo worries either way, but happy to discuss updates into 902 if you found something missing in it.\r\n\r\nThanks for taking the time to write up and submit this as an EIP!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/422968306/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423002902",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-423002902",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 423002902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzAwMjkwMg==",
    "user": {
      "login": "youfoundron",
      "id": 4658359,
      "node_id": "MDQ6VXNlcjQ2NTgzNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4658359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youfoundron",
      "html_url": "https://github.com/youfoundron",
      "followers_url": "https://api.github.com/users/youfoundron/followers",
      "following_url": "https://api.github.com/users/youfoundron/following{/other_user}",
      "gists_url": "https://api.github.com/users/youfoundron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youfoundron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youfoundron/subscriptions",
      "organizations_url": "https://api.github.com/users/youfoundron/orgs",
      "repos_url": "https://api.github.com/users/youfoundron/repos",
      "events_url": "https://api.github.com/users/youfoundron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youfoundron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T00:45:02Z",
    "updated_at": "2018-09-20T00:45:02Z",
    "author_association": "NONE",
    "body": "@bmann Thanks for chiming in!\r\n\r\nLooks like #902's `TokenValidator` contract shares more similarities to Harbor R-Token's [RegulatorService](https://github.com/harborhq/r-token/blob/master/contracts/RegulatorService.sol) approach. We include an R-Token integration example [here](https://github.com/simple-restricted-token/simple-restricted-token/tree/master/contracts/examples/other-standards/R-Token)! 😄 \r\n\r\nIn ERC1404, `detectTransferRestriction` is meant to live on the token contract itself, in there you could easily kick off the call to `validate` (what looks to be one of #902's \"validation helpers\") and achieve a similar result.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423002902/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423180572",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-423180572",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 423180572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzE4MDU3Mg==",
    "user": {
      "login": "veikkoeeva",
      "id": 5158694,
      "node_id": "MDQ6VXNlcjUxNTg2OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5158694?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/veikkoeeva",
      "html_url": "https://github.com/veikkoeeva",
      "followers_url": "https://api.github.com/users/veikkoeeva/followers",
      "following_url": "https://api.github.com/users/veikkoeeva/following{/other_user}",
      "gists_url": "https://api.github.com/users/veikkoeeva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/veikkoeeva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/veikkoeeva/subscriptions",
      "organizations_url": "https://api.github.com/users/veikkoeeva/orgs",
      "repos_url": "https://api.github.com/users/veikkoeeva/repos",
      "events_url": "https://api.github.com/users/veikkoeeva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/veikkoeeva/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T13:21:07Z",
    "updated_at": "2018-09-20T13:21:07Z",
    "author_association": "NONE",
    "body": "Some questions (might be dumb):\r\n\r\n1. If the securities are non-fungible, it would be checked in `detectTransferRestriction`? Just to make sure as there's a bit of cognitive disonance about ERC-20.\r\n2. Should there be a possibility to have batch transfers?\r\n3. I'm wondering if/how this would work with surety bonds (e.g. three parties, more complex terms, still in `detectTransferRestriction`?). I might off with this one on the purpose of this (though in that case pointers and clarifications welcome).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423180572/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423198998",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-423198998",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 423198998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzE5ODk5OA==",
    "user": {
      "login": "Graeme-Code",
      "id": 7915365,
      "node_id": "MDQ6VXNlcjc5MTUzNjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7915365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Graeme-Code",
      "html_url": "https://github.com/Graeme-Code",
      "followers_url": "https://api.github.com/users/Graeme-Code/followers",
      "following_url": "https://api.github.com/users/Graeme-Code/following{/other_user}",
      "gists_url": "https://api.github.com/users/Graeme-Code/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Graeme-Code/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Graeme-Code/subscriptions",
      "organizations_url": "https://api.github.com/users/Graeme-Code/orgs",
      "repos_url": "https://api.github.com/users/Graeme-Code/repos",
      "events_url": "https://api.github.com/users/Graeme-Code/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Graeme-Code/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T14:13:26Z",
    "updated_at": "2018-09-20T14:13:26Z",
    "author_association": "NONE",
    "body": "Hi, I'm very interested in using this standard for a governance project with regards to access control. Anybody looked into how this would work with Giveth's mini-me contract? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423198998/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423260147",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-423260147",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 423260147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzI2MDE0Nw==",
    "user": {
      "login": "youfoundron",
      "id": 4658359,
      "node_id": "MDQ6VXNlcjQ2NTgzNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4658359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youfoundron",
      "html_url": "https://github.com/youfoundron",
      "followers_url": "https://api.github.com/users/youfoundron/followers",
      "following_url": "https://api.github.com/users/youfoundron/following{/other_user}",
      "gists_url": "https://api.github.com/users/youfoundron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youfoundron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youfoundron/subscriptions",
      "organizations_url": "https://api.github.com/users/youfoundron/orgs",
      "repos_url": "https://api.github.com/users/youfoundron/repos",
      "events_url": "https://api.github.com/users/youfoundron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youfoundron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T17:06:38Z",
    "updated_at": "2018-09-20T17:06:38Z",
    "author_association": "NONE",
    "body": "@Graeme-Code, I have not personally used the MiniMe pattern but at a cursory glance of Giveth's repo, it seems you would need to use a version of the `MiniMeToken.sol` contract modified to implement ERC1404 -- the place to look is `function doTransfer()` on [this contract](https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol).\r\n\r\nIf there is considerable interest in this use-case I would be happy to add an implementation to our [examples repo](https://github.com/simple-restricted-token/simple-restricted-token).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423260147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423261671",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-423261671",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 423261671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzI2MTY3MQ==",
    "user": {
      "login": "Graeme-Code",
      "id": 7915365,
      "node_id": "MDQ6VXNlcjc5MTUzNjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7915365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Graeme-Code",
      "html_url": "https://github.com/Graeme-Code",
      "followers_url": "https://api.github.com/users/Graeme-Code/followers",
      "following_url": "https://api.github.com/users/Graeme-Code/following{/other_user}",
      "gists_url": "https://api.github.com/users/Graeme-Code/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Graeme-Code/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Graeme-Code/subscriptions",
      "organizations_url": "https://api.github.com/users/Graeme-Code/orgs",
      "repos_url": "https://api.github.com/users/Graeme-Code/repos",
      "events_url": "https://api.github.com/users/Graeme-Code/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Graeme-Code/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T17:11:30Z",
    "updated_at": "2018-09-20T17:11:30Z",
    "author_association": "NONE",
    "body": "Thank you for the quick response. Running some tests internally and getting\nconsensus on the idea. Will let you know if it is implemented. Cheers\n\nOn Thu, Sep 20, 2018 at 6:07 PM Ron Gierlach <notifications@github.com>\nwrote:\n\n> @Graeme-Code <https://github.com/Graeme-Code>, I have not personally used\n> the MiniMe pattern but at a cursory glance of Giveth's repo, it seems you\n> would need to use a version of the MiniMeToken.sol contract modified to\n> implement ERC1404 -- the place to look is function doTransfer() on this\n> contract\n> <https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol>.\n>\n> If there is considerable interest in this use-case I would be happy to add\n> an implementation to our examples repo\n> <https://github.com/simple-restricted-token/simple-restricted-token>.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/1404#issuecomment-423260147>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AHjHZa18GBJ_sA_N7uD-3jEeQuL4U_jdks5uc8tPgaJpZM4Wktae>\n> .\n>\n\n\n-- \nI respond faster on Status, use my contact code below to add me:\n0x043d3e8477d431c44cdb12f69375726ed3fa83b4409a2848fa8f625c9394f6214ad473cb5314c5c50cb8cc3e4f4ba870afb6364c730a5664f4ad2c523e66ccc431\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423261671/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423268196",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-423268196",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 423268196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzI2ODE5Ng==",
    "user": {
      "login": "youfoundron",
      "id": 4658359,
      "node_id": "MDQ6VXNlcjQ2NTgzNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4658359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youfoundron",
      "html_url": "https://github.com/youfoundron",
      "followers_url": "https://api.github.com/users/youfoundron/followers",
      "following_url": "https://api.github.com/users/youfoundron/following{/other_user}",
      "gists_url": "https://api.github.com/users/youfoundron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youfoundron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youfoundron/subscriptions",
      "organizations_url": "https://api.github.com/users/youfoundron/orgs",
      "repos_url": "https://api.github.com/users/youfoundron/repos",
      "events_url": "https://api.github.com/users/youfoundron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youfoundron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T17:30:59Z",
    "updated_at": "2018-09-20T17:30:59Z",
    "author_association": "NONE",
    "body": "@veikkoeeva No dumb questions! Will try and address each of these to the best of my ability.\r\n\r\n1. _If the securities are non-fungible, it would be checked in `detectTransferRestriction`? Just to make sure as there's a bit of cognitive disonance about ERC-20._<br/><br/>By non-fungible do you mean \"partially fungible\" a la #1410, or full on NFT as in #721? In the case of the former, there are no special implementation requirements. To make an ERC1404 + ERC721 compatible token you could easily modify [this implementation](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC721/ERC721.sol) to handle the `_isApprovedOrOwner` and zero address logic inside of `detectTransferRestriction`. If there is considerable interest in this use-case I would be happy to add an implementation to our [examples repo](https://github.com/simple-restricted-token/simple-restricted-token).\r\n2. _Should there be a possibility to have batch transfers?_<br/><br/>This is functionality outside of the scope of ERC20 and by extension outside of the proposed scope of this standard. It would be useful to a lot of people however, and I'd encourage you to pursue this idea further!\r\n3. _I'm wondering if/how this would work with surety bonds (e.g. three parties, more complex terms, still in `detectTransferRestriction?`). I might off with this one on the purpose of this (though in that case pointers and clarifications welcome)._<br/><br/>I'm not certain, but this scenario doesn't sound like a straight up transfer of tokens. Correct me if I'm wrong, but I believe you're describing an arrangement where tokens would go into escrow, a third party would give some sort of approval, and (if all goes well) tokens would depart escrow en route to a predetermined recipient. The transfers to / from escrow could be regulated by transfer restrictions of your designing, but unless this process can be executed in _a single transaction_ it is beyond the scope of this standard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423268196/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423735774",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-423735774",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 423735774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzczNTc3NA==",
    "user": {
      "login": "veikkoeeva",
      "id": 5158694,
      "node_id": "MDQ6VXNlcjUxNTg2OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5158694?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/veikkoeeva",
      "html_url": "https://github.com/veikkoeeva",
      "followers_url": "https://api.github.com/users/veikkoeeva/followers",
      "following_url": "https://api.github.com/users/veikkoeeva/following{/other_user}",
      "gists_url": "https://api.github.com/users/veikkoeeva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/veikkoeeva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/veikkoeeva/subscriptions",
      "organizations_url": "https://api.github.com/users/veikkoeeva/orgs",
      "repos_url": "https://api.github.com/users/veikkoeeva/repos",
      "events_url": "https://api.github.com/users/veikkoeeva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/veikkoeeva/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-22T10:53:33Z",
    "updated_at": "2018-09-22T10:53:33Z",
    "author_association": "NONE",
    "body": "@rongierlach (or @masonicGIT). Hey, I appreciate you took the time to get back. I'll keep the numbering in the following, but instead of quoting just paraphrase.\r\n\r\n1. By non-fungible securities I mean that some securities are non-fungible, as explained at \r\nhttps://www.repetico.de/card-34407474. In the EU there has been some bonds that are non-fungible due to some extra national serial codes (see [here](https://www.ecb.europa.eu/paym/t2s/progress/pdf/hsg/mtg9/20130521_Non_standardised_Securities_Issuance.pdf?d7f3b288de999bceb30658a581bf720d) [pdf]), but the desire is to move towards fully fungible ones. I understand it's very desirably to have fungible securities (and even to be trade them globally), but I'm especially looking into _green bonds_ and the problems faced there. Some noted, e.g., at https://www.eco-business.com/news/will-a-lack-of-transparency-hurt-green-bonds/. The Finnish Financial Regulatory Authority, I believe, recently warned about due diligence risks in green bonds. I don't have deep enough knowledge on securities to know if some sort of non-fungibility could solve problems but still keep trading liquid.\r\n\r\n2. This idea has been thought of already, as noted. There's a new standard in the makings that allows batch transfers of fungible and non-fungible tokens, more information at https://github.com/ethereum/EIPs/issues/1155. There's also a new 721x (mentioned at the end of 1155) that builds on 721 directly.\r\n\r\n3. That's true as far as I understand. As I see it, the other way/term looking into sureties is [bank guarantees](https://www.tradefinanceglobal.com/posts/what-is-a-bank-guarantee/). I don't think these are tradeable assets usually, but can be used to make so, as noted at https://www.bankguaranteefacts.com/trading-bank-guarantees/. Then there are tradeable bank guarantees, though, as noted at https://www.linkedin.com/pulse/fraud-trading-discounted-bank-guarantees-lady-mj-santos.\r\n\r\nThe reason why I noted these might be dumb, or confused questions, are that I don't have deep knowledge on securities and trading and English isn't my native language (the terminology feels a bit problematic). I see there are plenty of inefficiencies in trading globally and fungibility is very much desired. I'm wondering also if there were a use case, now in the age of blockchain, for non-fungible securities as in with green bonds. I could imagine -- maybe wrongly -- greend bonds issued to construction could be tied to particular buildings are in the power plant building noted in the earlier green bond link. In that sense the bonds might not be fully fungible. Or they might be fully tradeable, but still maintain an unique link to off-chain data (like in ERC-721/ERC-721x/ERC-1155).\r\n\r\nWhile writing this, I noticed [Dharma protocol](https://blog.dharma.io/dharma-bug-bounty-erc721-collateralization-137b2baeca24) which seems to aim tokenizing debt into securities using ERC-721 (link to Ethereum contracts at https://blog.dharma.io/dharma-bug-bounty-erc721-collateralization-137b2baeca24). In my mind securities and debt securities are around the same issue, but I might be misguided here.\r\n\r\nIf there is something I could find more information on, I'm happy to do put some effort. I'm equally happy to be noted this is out-of-scope and/or I need to check some sources to increase my understanding otherwise.\r\n\r\nOnce again, I appreciate the effort to get back with explanations. I for one would appreciate an added sample to the sample repo on non-fungible asset.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423735774/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423751971",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-423751971",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 423751971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzc1MTk3MQ==",
    "user": {
      "login": "zxlzy",
      "id": 31438870,
      "node_id": "MDQ6VXNlcjMxNDM4ODcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/31438870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zxlzy",
      "html_url": "https://github.com/zxlzy",
      "followers_url": "https://api.github.com/users/zxlzy/followers",
      "following_url": "https://api.github.com/users/zxlzy/following{/other_user}",
      "gists_url": "https://api.github.com/users/zxlzy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zxlzy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zxlzy/subscriptions",
      "organizations_url": "https://api.github.com/users/zxlzy/orgs",
      "repos_url": "https://api.github.com/users/zxlzy/repos",
      "events_url": "https://api.github.com/users/zxlzy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zxlzy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-22T15:30:37Z",
    "updated_at": "2018-09-23T12:40:38Z",
    "author_association": "NONE",
    "body": "I am an eth fan and solidity beginner from China. I think this this standard is very useful.  I do some simple implement for this standard. I do not implement the ban function. But it's easy.\r\nEvery tx can teturn just one restrictionCode .But may have more than one reson for be restricted. Should we solve it?\r\nInsert this at transfer and transferFrom function.\r\n```solidity\r\nuint8 restrictionCode = detectTransferRestriction(_from,  _to, _value);\r\nif( restrictionCode != 0 ) {\r\n revert(restrictionCode);\r\n}\r\n```\r\nThere is the ERC1404 contract.\r\n```solidity\r\ncontract ERC1404 is StandardToken , Pausable  {\r\n  mapping(uint8 => string) restrictionMap;\r\n  mapping(address => bool) blackList;\r\n  constructor () public {\r\n    restrictionMap[1] = \"Token is pausing!\";\r\n    restrictionMap[2] = \"sender has been banned!\";\r\n    restrictionMap[3] = \"receiver has been banned!\";\r\n  }\r\n\r\n  function detectTransferRestriction (address from, address to, uint256 value) public view returns (uint8){\r\n    if (paused == true ) {\r\n      return 1;\r\n    }\r\n    if (blackList[from] == true ) {\r\n      return 2;\r\n    }\r\n    if ( blackList[to] == true ) {\r\n      return 3;\r\n    }\r\n  return 0;\r\n  }\r\n  function messageForTransferRestriction (uint8 restrictionCode) public view returns (string){\r\n    if (bytes(restrictionMap[restrictionCode]).length == 0 ){\r\n      return \"Restriction code incorrect!\";\r\n    }\r\n    return restrictionMap[restrictionCode];\r\n  }\r\n\r\n}\r\n\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423751971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424066166",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-424066166",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 424066166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDA2NjE2Ng==",
    "user": {
      "login": "youfoundron",
      "id": 4658359,
      "node_id": "MDQ6VXNlcjQ2NTgzNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4658359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youfoundron",
      "html_url": "https://github.com/youfoundron",
      "followers_url": "https://api.github.com/users/youfoundron/followers",
      "following_url": "https://api.github.com/users/youfoundron/following{/other_user}",
      "gists_url": "https://api.github.com/users/youfoundron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youfoundron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youfoundron/subscriptions",
      "organizations_url": "https://api.github.com/users/youfoundron/orgs",
      "repos_url": "https://api.github.com/users/youfoundron/repos",
      "events_url": "https://api.github.com/users/youfoundron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youfoundron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-24T17:54:46Z",
    "updated_at": "2018-09-24T17:58:42Z",
    "author_association": "NONE",
    "body": "@zxlzy At a cursory glance this implementation seems correct. Nice work! 👍 \r\nA transaction failing because of more than one reason is a likely possibility. However, modifying the standard to return multiple restriction codes from say a function called `detectTransferRestrictions` would be tricky because [Solidity does not support returning dynamic arrays](https://ethereum.stackexchange.com/questions/17312/solidity-can-you-return-dynamic-arrays-in-a-function). There are workarounds for this, but I feel they would sacrifice the simplicity of the standard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424066166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424171769",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-424171769",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 424171769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE3MTc2OQ==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T00:53:39Z",
    "updated_at": "2018-09-25T00:53:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi I noticed #1155 was linked here regarding the batch transfer possibility. I should note that I don't see a problem with someone implementing \"AContract is 1155,1404\" and in the transferring of tokens simply calling the detectTransferRestriction each time...\r\n\r\nHowever if you did want to do 100 transfers in one batch tx perhaps, the requirement to revert on one non-zero return would mean that for eg. instead of 99 transfers passing and 1 failing, all 100 transfers would fail.\r\n\r\nMaybe that is something to consider when developing this standard?\r\n\r\nOf course however if the detectTransferRestriction is called for each transaction _off chain_ first, then you could do the above batching without having to enforce the check on chain but I'm not aware of the use cases of this standard enough to say that the detection has to always happen _on chain_ during the transfer to make things transparent and secure.\r\n\r\nPerhaps, you would just have to do both off and on checks to \"guarantee\" a batch would make it through in the majority of cases and still enforce security and transparency.\r\n\r\nSo offline at least (without regard for usable/nice code):\r\n\r\n```\r\nbool doTheBatchTx = true;\r\nint numberOfTransfers=sizeof(fromArray); // better check your arrays all match and numberOfTransfers > 0\r\nwhile(numberOfTransfers--) {\r\n\tif (contract.detectTransferRestriction(fromArray[numberOfTransfers]),toArray[numberOfTransfers],valueArray[numberOfTransfers])) {\r\n\t\tdoTheBatchTx = false;\r\n\t\tbreak;\r\n\t}\r\n}\r\n\r\nif (doTheBatchTx)\r\n\tcontract.multicastTransferFrom(fromArray,toArray,idArray,valueArray);\r\nelse\r\n\terrorMsg(\"One of the batch transfers failed the detectTransferRestriction check\");\r\n```\r\n\r\nany that might fail the above you could drop from the arrays and at least salvage things (unless you needed to guarantee a set and so dropping the entire set might be desirable).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424171769/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/425768401",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-425768401",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 425768401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTc2ODQwMQ==",
    "user": {
      "login": "jllaw",
      "id": 5771238,
      "node_id": "MDQ6VXNlcjU3NzEyMzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5771238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jllaw",
      "html_url": "https://github.com/jllaw",
      "followers_url": "https://api.github.com/users/jllaw/followers",
      "following_url": "https://api.github.com/users/jllaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/jllaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jllaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jllaw/subscriptions",
      "organizations_url": "https://api.github.com/users/jllaw/orgs",
      "repos_url": "https://api.github.com/users/jllaw/repos",
      "events_url": "https://api.github.com/users/jllaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jllaw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T01:28:39Z",
    "updated_at": "2018-10-01T01:28:39Z",
    "author_association": "NONE",
    "body": "Really nice and clean.  As someone who was involved with the genesis of #1400 (#1410 & #1411), I can really appreciate the simplicity of this.  Will monitor and contribute if I can (hard to follow all the conversation as I'm not technically trained).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/425768401/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/425778198",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-425778198",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 425778198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTc3ODE5OA==",
    "user": {
      "login": "jllaw",
      "id": 5771238,
      "node_id": "MDQ6VXNlcjU3NzEyMzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5771238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jllaw",
      "html_url": "https://github.com/jllaw",
      "followers_url": "https://api.github.com/users/jllaw/followers",
      "following_url": "https://api.github.com/users/jllaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/jllaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jllaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jllaw/subscriptions",
      "organizations_url": "https://api.github.com/users/jllaw/orgs",
      "repos_url": "https://api.github.com/users/jllaw/repos",
      "events_url": "https://api.github.com/users/jllaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jllaw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T03:05:16Z",
    "updated_at": "2018-10-01T03:05:16Z",
    "author_association": "NONE",
    "body": "\"The logic of detectTransferRestriction and messageForTransferRestriction are left up to the issuer.\" \r\n\r\nJust to be clear, the detectTransferRestriction doesn't give a third party any knowledge of the full set of transfer restrictions and rules which might apply to a token right?  All this standard would do is 1) check if something can be transferred against something offchain and 2) report some sort of error (but not necessarily in any standardized format).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/425778198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/425925862",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-425925862",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 425925862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTkyNTg2Mg==",
    "user": {
      "login": "xlab",
      "id": 477998,
      "node_id": "MDQ6VXNlcjQ3Nzk5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/477998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xlab",
      "html_url": "https://github.com/xlab",
      "followers_url": "https://api.github.com/users/xlab/followers",
      "following_url": "https://api.github.com/users/xlab/following{/other_user}",
      "gists_url": "https://api.github.com/users/xlab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xlab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xlab/subscriptions",
      "organizations_url": "https://api.github.com/users/xlab/orgs",
      "repos_url": "https://api.github.com/users/xlab/repos",
      "events_url": "https://api.github.com/users/xlab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xlab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T14:21:07Z",
    "updated_at": "2018-10-01T14:21:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> 2) report some sort of error (but not necessarily in any standardized format).\r\n\r\nI'd suggest use of [ERC-1066](https://github.com/Ethereum/EIPs/pull/1066) and ERC-1444 for this purpose. It's a good thing they've appeared just in time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/425925862/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/425927748",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-425927748",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 425927748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTkyNzc0OA==",
    "user": {
      "login": "jllaw",
      "id": 5771238,
      "node_id": "MDQ6VXNlcjU3NzEyMzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5771238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jllaw",
      "html_url": "https://github.com/jllaw",
      "followers_url": "https://api.github.com/users/jllaw/followers",
      "following_url": "https://api.github.com/users/jllaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/jllaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jllaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jllaw/subscriptions",
      "organizations_url": "https://api.github.com/users/jllaw/orgs",
      "repos_url": "https://api.github.com/users/jllaw/repos",
      "events_url": "https://api.github.com/users/jllaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jllaw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T14:26:40Z",
    "updated_at": "2018-10-01T14:26:40Z",
    "author_association": "NONE",
    "body": "Yes, #1066 is used by #1400 / #1411 I'll have to take a look at #1444 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/425927748/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426003298",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-426003298",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 426003298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjAwMzI5OA==",
    "user": {
      "login": "youfoundron",
      "id": 4658359,
      "node_id": "MDQ6VXNlcjQ2NTgzNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4658359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youfoundron",
      "html_url": "https://github.com/youfoundron",
      "followers_url": "https://api.github.com/users/youfoundron/followers",
      "following_url": "https://api.github.com/users/youfoundron/following{/other_user}",
      "gists_url": "https://api.github.com/users/youfoundron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youfoundron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youfoundron/subscriptions",
      "organizations_url": "https://api.github.com/users/youfoundron/orgs",
      "repos_url": "https://api.github.com/users/youfoundron/repos",
      "events_url": "https://api.github.com/users/youfoundron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youfoundron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-01T17:59:00Z",
    "updated_at": "2018-10-01T17:59:00Z",
    "author_association": "NONE",
    "body": "@jilaw\r\nThe `detectTransferRestriction` function is the entry-point for enforcing transfer restriction logic. If said logic is implemented on-chain and the contract source code is public, then it will be obvious to third parties.\r\n\r\nHowever, if a portion or all of this logic depends on a call to an oracle dealing with an off-chain check, this may not be so obvious to a third party -- all this remains up to the issuer. \r\n\r\nStandard error codes are not spec'd in #1404 but are a good to be thinking about!\r\n\r\n@xlab\r\nError code standardization is an important next step for not just #1404 but the restricted / security token space in general.\r\n\r\n#1066 and the discussions branching off of it seem like really promising avenues towards accomplishing this end, thank you for bringing to my attention!\r\n\r\nAlong these lines and in your opinion, should `detectTransferRestriction` be modified to return type `byte1` rather than `uint8`?\r\n\r\nAppreciate all the productive discussion around this issue!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426003298/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/427554198",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-427554198",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 427554198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzU1NDE5OA==",
    "user": {
      "login": "jeffishjeff",
      "id": 5304123,
      "node_id": "MDQ6VXNlcjUzMDQxMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5304123?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffishjeff",
      "html_url": "https://github.com/jeffishjeff",
      "followers_url": "https://api.github.com/users/jeffishjeff/followers",
      "following_url": "https://api.github.com/users/jeffishjeff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffishjeff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffishjeff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffishjeff/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffishjeff/orgs",
      "repos_url": "https://api.github.com/users/jeffishjeff/repos",
      "events_url": "https://api.github.com/users/jeffishjeff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffishjeff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-06T07:44:22Z",
    "updated_at": "2018-10-06T07:49:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice proposal! A couple initial thoughts if I may:\r\n\r\n- Fully agree #1066 is quite suitable for this EIP.\r\n\r\n- Any particular reason for using byte1/uint8 rather than uint256? Seems artificially restrictive and [cost 4x more gas](https://ethereum.stackexchange.com/questions/3067/why-does-uint8-cost-more-gas-than-uint256) as the EVM just works with uint256 internally\r\n\r\n- @youfoundron returning dynamic array is supported in [newer EVMs](https://solidity.readthedocs.io/en/latest/types.html#members). The doc is just catching up to the fact but it's been there since [0.4.22](https://github.com/ethereum/solidity/releases/tag/v0.4.22)\r\n\r\n- Do we really need `messageForTransferRestriction`? I appreciate that human readable message is useful for the UI layer but seems this should be provided by a web service rather than on-chain function. Do other *contracts* need to retrieve text messages for interops?\r\n\r\n- What does the upgrade path look like for this EIP? Regulations or even just developers' self-imposed restrictions change often so the token implementation need to take that into account for its own longevity. I wonder if it'd be a better idea to separate restriction logic from token logic in the reference implementation, below is one way of doing that:\r\n-\r\n\r\n    function Token is Erc20, Ownable {\r\n        IErc1404 restrictor;\r\n\r\n        function updateRestrictor(address addr) ownerOnly {\r\n            restrictor = (IErc1404) addr;\r\n        }\r\n\r\n        modifier notRestricted (address from, address to, uint256 value) {\r\n            uint256 restrictionCode = restrictor.detectTransferRestriction(from, to, value);\r\n            require(restrictionCode == SUCCESS_CODE, restrictionCode);\r\n            _;\r\n        }\r\n    }",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/427554198/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/427844925",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-427844925",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 427844925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg0NDkyNQ==",
    "user": {
      "login": "morpheus499",
      "id": 43952680,
      "node_id": "MDQ6VXNlcjQzOTUyNjgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/43952680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morpheus499",
      "html_url": "https://github.com/morpheus499",
      "followers_url": "https://api.github.com/users/morpheus499/followers",
      "following_url": "https://api.github.com/users/morpheus499/following{/other_user}",
      "gists_url": "https://api.github.com/users/morpheus499/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morpheus499/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morpheus499/subscriptions",
      "organizations_url": "https://api.github.com/users/morpheus499/orgs",
      "repos_url": "https://api.github.com/users/morpheus499/repos",
      "events_url": "https://api.github.com/users/morpheus499/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morpheus499/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-08T13:59:22Z",
    "updated_at": "2018-10-08T13:59:22Z",
    "author_association": "NONE",
    "body": "What’s the point of having the standards so specific they are practically designed to work for specific platforms? You might want to have a look at ERC-1462\r\n(https://github.com/AtlantPlatform/BaseSecurityToken/). It’s a really general standard for security tokens, unlike the proprietary methods 1400 and others trying to pump their own projects and hidden agendas. The new standard for security tokens should support as many use-cases as possible, so all teams can start embracing it such as ERC 20.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/427844925/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/428738491",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-428738491",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 428738491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyODczODQ5MQ==",
    "user": {
      "login": "youfoundron",
      "id": 4658359,
      "node_id": "MDQ6VXNlcjQ2NTgzNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4658359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youfoundron",
      "html_url": "https://github.com/youfoundron",
      "followers_url": "https://api.github.com/users/youfoundron/followers",
      "following_url": "https://api.github.com/users/youfoundron/following{/other_user}",
      "gists_url": "https://api.github.com/users/youfoundron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youfoundron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youfoundron/subscriptions",
      "organizations_url": "https://api.github.com/users/youfoundron/orgs",
      "repos_url": "https://api.github.com/users/youfoundron/repos",
      "events_url": "https://api.github.com/users/youfoundron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youfoundron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-10T21:28:07Z",
    "updated_at": "2018-10-10T21:28:07Z",
    "author_association": "NONE",
    "body": "@jeffishjeff - Excellent feedback, really appreciate your thoughts on this.\r\n\r\n1. We'll explore providing an implementation that leverages #1066 in our examples.\r\n\r\n2. Noted. I agree this should be changed.\r\n\r\n3. This is good to know, thanks for catching me up to speed.\r\n\r\n4. `messageForTransferRestriction` is anticipating a best-practice, ie the way the community added details (`decimals`, `name`, and `symbol`) to token contracts. Perhaps it is unnecessary in the event that error codes are standardized, I see your point but I'm on the fence still.\r\n\r\n5. I agree that issuers would do best to put their restriction logic somewhere they can upgrade later and that the reference implementation is fairly contrived. However I feel the reference implementation should be as simple as possible. Will explore providing an implementation that uses `detectTransferRestriction` as a proxy for calling the check on a separate contract containing restriction logic that the token owner can swap out the address for -- this is what R-Token does btw.\r\n\r\nReally appreciate the thoughtfulness of your feedback. Cheers! 😎 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/428738491/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436504479",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-436504479",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 436504479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjUwNDQ3OQ==",
    "user": {
      "login": "masonicGIT",
      "id": 7960935,
      "node_id": "MDQ6VXNlcjc5NjA5MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7960935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/masonicGIT",
      "html_url": "https://github.com/masonicGIT",
      "followers_url": "https://api.github.com/users/masonicGIT/followers",
      "following_url": "https://api.github.com/users/masonicGIT/following{/other_user}",
      "gists_url": "https://api.github.com/users/masonicGIT/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/masonicGIT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/masonicGIT/subscriptions",
      "organizations_url": "https://api.github.com/users/masonicGIT/orgs",
      "repos_url": "https://api.github.com/users/masonicGIT/repos",
      "events_url": "https://api.github.com/users/masonicGIT/events{/privacy}",
      "received_events_url": "https://api.github.com/users/masonicGIT/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T04:53:48Z",
    "updated_at": "2018-11-07T04:53:48Z",
    "author_association": "NONE",
    "body": "> @jeffishjeff\r\n\r\nHey @jeffishjeff - #4 was direct and consistent feedback from technical integrators of the standard. Would be hard to err from this one at the moment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436504479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/437493409",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-437493409",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 437493409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzQ5MzQwOQ==",
    "user": {
      "login": "youfoundron",
      "id": 4658359,
      "node_id": "MDQ6VXNlcjQ2NTgzNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4658359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youfoundron",
      "html_url": "https://github.com/youfoundron",
      "followers_url": "https://api.github.com/users/youfoundron/followers",
      "following_url": "https://api.github.com/users/youfoundron/following{/other_user}",
      "gists_url": "https://api.github.com/users/youfoundron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youfoundron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youfoundron/subscriptions",
      "organizations_url": "https://api.github.com/users/youfoundron/orgs",
      "repos_url": "https://api.github.com/users/youfoundron/repos",
      "events_url": "https://api.github.com/users/youfoundron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youfoundron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T20:59:31Z",
    "updated_at": "2018-11-09T20:59:56Z",
    "author_association": "NONE",
    "body": "tagging #1444, an expansion of ERC-1066, to the thread",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/437493409/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/437667587",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-437667587",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 437667587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzY2NzU4Nw==",
    "user": {
      "login": "stvenyin",
      "id": 32395964,
      "node_id": "MDQ6VXNlcjMyMzk1OTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/32395964?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stvenyin",
      "html_url": "https://github.com/stvenyin",
      "followers_url": "https://api.github.com/users/stvenyin/followers",
      "following_url": "https://api.github.com/users/stvenyin/following{/other_user}",
      "gists_url": "https://api.github.com/users/stvenyin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stvenyin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stvenyin/subscriptions",
      "organizations_url": "https://api.github.com/users/stvenyin/orgs",
      "repos_url": "https://api.github.com/users/stvenyin/repos",
      "events_url": "https://api.github.com/users/stvenyin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stvenyin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-11T12:50:13Z",
    "updated_at": "2018-11-11T12:50:13Z",
    "author_association": "NONE",
    "body": "ik",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/437667587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/437667704",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-437667704",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 437667704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzY2NzcwNA==",
    "user": {
      "login": "stvenyin",
      "id": 32395964,
      "node_id": "MDQ6VXNlcjMyMzk1OTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/32395964?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stvenyin",
      "html_url": "https://github.com/stvenyin",
      "followers_url": "https://api.github.com/users/stvenyin/followers",
      "following_url": "https://api.github.com/users/stvenyin/following{/other_user}",
      "gists_url": "https://api.github.com/users/stvenyin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stvenyin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stvenyin/subscriptions",
      "organizations_url": "https://api.github.com/users/stvenyin/orgs",
      "repos_url": "https://api.github.com/users/stvenyin/repos",
      "events_url": "https://api.github.com/users/stvenyin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stvenyin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-11T12:51:49Z",
    "updated_at": "2018-11-11T12:51:49Z",
    "author_association": "NONE",
    "body": "OK",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/437667704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/475456604",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-475456604",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 475456604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTQ1NjYwNA==",
    "user": {
      "login": "kwikiel",
      "id": 5274399,
      "node_id": "MDQ6VXNlcjUyNzQzOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5274399?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kwikiel",
      "html_url": "https://github.com/kwikiel",
      "followers_url": "https://api.github.com/users/kwikiel/followers",
      "following_url": "https://api.github.com/users/kwikiel/following{/other_user}",
      "gists_url": "https://api.github.com/users/kwikiel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kwikiel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kwikiel/subscriptions",
      "organizations_url": "https://api.github.com/users/kwikiel/orgs",
      "repos_url": "https://api.github.com/users/kwikiel/repos",
      "events_url": "https://api.github.com/users/kwikiel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kwikiel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T00:56:38Z",
    "updated_at": "2019-03-22T00:56:38Z",
    "author_association": "NONE",
    "body": "I think it's terribly bad idea to embrace security tokens:\r\n\r\nEnforcing Token Lock-Up Periods (reasonable)\r\nEnforcing Passed AML/KYC Checks (this is making ethereum less inclusive / it hurts people from blacklisted countries)\r\nPrivate Real-Estate Investment Trusts ( why you need blockchain for that ) \r\nDelaware General Corporations Law Shares ( why you need blockchain for that ) \r\n\r\nGenerally blockchains cannot enforce property rights for things outside of the blockchain context - you may make smart contract that will punish person by slashing their deposit but this is limited ( you cannot enforce below zero that way) \r\n\r\nMeanwhile in meatspace actual law is able to enforce with literal force. \r\n\r\nSource: https://uncommoncore.co/bitcoin-and-the-promise-of-independent-property-rights/\r\n![0_X-ERkpt4PAzgW2-g](https://user-images.githubusercontent.com/5274399/54793898-090fde00-4c45-11e9-909c-67127f50cc3b.png)\r\n\r\nBy adding lots of compliance into Ethereum directly one is hurting the Ethereum values (globally accessible, more free and more trustworthy Internet )\r\n\r\nYou don't need blockchain to issue equity shares, you can just use regular database. No value is created \r\n\r\n\"Security Tokens for traditional businesses is like PDF'ing the NYT in the 1990's to put it on the internet. This is a method to put the news on the internet but it is the incorrect approach\"\r\n\r\nhttps://twitter.com/lwsnbaker/status/1016717948986089472\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/475456604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/475710772",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-475710772",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 475710772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTcxMDc3Mg==",
    "user": {
      "login": "masonicGIT",
      "id": 7960935,
      "node_id": "MDQ6VXNlcjc5NjA5MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7960935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/masonicGIT",
      "html_url": "https://github.com/masonicGIT",
      "followers_url": "https://api.github.com/users/masonicGIT/followers",
      "following_url": "https://api.github.com/users/masonicGIT/following{/other_user}",
      "gists_url": "https://api.github.com/users/masonicGIT/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/masonicGIT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/masonicGIT/subscriptions",
      "organizations_url": "https://api.github.com/users/masonicGIT/orgs",
      "repos_url": "https://api.github.com/users/masonicGIT/repos",
      "events_url": "https://api.github.com/users/masonicGIT/events{/privacy}",
      "received_events_url": "https://api.github.com/users/masonicGIT/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T17:31:38Z",
    "updated_at": "2019-03-22T17:31:38Z",
    "author_association": "NONE",
    "body": "> I think it's terribly bad idea to embrace security tokens:\r\n> \r\n> Enforcing Token Lock-Up Periods (reasonable)\r\n> Enforcing Passed AML/KYC Checks (this is making ethereum less inclusive / it hurts people from blacklisted countries)\r\n> Private Real-Estate Investment Trusts ( why you need blockchain for that )\r\n> Delaware General Corporations Law Shares ( why you need blockchain for that )\r\n> \r\n> Generally blockchains cannot enforce property rights for things outside of the blockchain context - you may make smart contract that will punish person by slashing their deposit but this is limited ( you cannot enforce below zero that way)\r\n> \r\n> Meanwhile in meatspace actual law is able to enforce with literal force.\r\n> \r\n> Source: https://uncommoncore.co/bitcoin-and-the-promise-of-independent-property-rights/\r\n> ![0_X-ERkpt4PAzgW2-g](https://user-images.githubusercontent.com/5274399/54793898-090fde00-4c45-11e9-909c-67127f50cc3b.png)\r\n> \r\n> By adding lots of compliance into Ethereum directly one is hurting the Ethereum values (globally accessible, more free and more trustworthy Internet )\r\n> \r\n> You don't need blockchain to issue equity shares, you can just use regular database. No value is created\r\n> \r\n> \"Security Tokens for traditional businesses is like PDF'ing the NYT in the 1990's to put it on the internet. This is a method to put the news on the internet but it is the incorrect approach\"\r\n> \r\n> https://twitter.com/lwsnbaker/status/1016717948986089472\r\n\r\nHello - We are simply using the Ethereum blockchain based on demand, its one of the best tested and widely adopted at the moment. \r\n\r\nThe Ethereum blockchain can always be used completely openly, however when integrated into businesses, they have regulatory obligations. This standard is designed to help them meet their corporate obligations while following their own laws. That in no way impinges certain values onto other users, they are merely additional users on the network.  \r\n\r\nOne of the big benefits of building this on Ethereum is the shared infrastructure. There is the opportunity to build a financial fabric that is available 24/7 and that enables global access to assets in a compliant/automated manner. This may seem like a closed approach, but there is a lot being done to create greater interconnectivity between countries that don't have access to financially mature markets like HK, US, or UK. In a way, it is more powerful that the traditional financial markets are being forced to open up beyond the existing participants.\r\n\r\nEither way, greater adoption of Ethereum = more fees for miners :-)\r\n\r\nAlso - Lawson is an author on the standard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/475710772/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/475765174",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-475765174",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 475765174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTc2NTE3NA==",
    "user": {
      "login": "kwikiel",
      "id": 5274399,
      "node_id": "MDQ6VXNlcjUyNzQzOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5274399?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kwikiel",
      "html_url": "https://github.com/kwikiel",
      "followers_url": "https://api.github.com/users/kwikiel/followers",
      "following_url": "https://api.github.com/users/kwikiel/following{/other_user}",
      "gists_url": "https://api.github.com/users/kwikiel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kwikiel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kwikiel/subscriptions",
      "organizations_url": "https://api.github.com/users/kwikiel/orgs",
      "repos_url": "https://api.github.com/users/kwikiel/repos",
      "events_url": "https://api.github.com/users/kwikiel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kwikiel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-22T20:13:14Z",
    "updated_at": "2019-03-22T20:13:14Z",
    "author_association": "NONE",
    "body": "Sounds right - it seems that the most important part would detectTransferRestriction logic ( where most of the compliance code will be located ) ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/475765174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/477827268",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-477827268",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 477827268,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NzgyNzI2OA==",
    "user": {
      "login": "alcuadrado",
      "id": 176499,
      "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcuadrado",
      "html_url": "https://github.com/alcuadrado",
      "followers_url": "https://api.github.com/users/alcuadrado/followers",
      "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
      "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
      "repos_url": "https://api.github.com/users/alcuadrado/repos",
      "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-29T01:11:46Z",
    "updated_at": "2019-03-29T01:11:46Z",
    "author_association": "MEMBER",
    "body": "I think it would be useful to specify the content of the revert message when a restriction prevents a `transfer` or `transferFrom` from running. Otherwise, if a transaction fails and its restrictions are removed immediately after the failure, there'd be no way to know why it failed.\r\n\r\nOne alternative is to dictate that the revert message should be the one returned by `messageForTransferRestriction` with the `restrictionCode` that made the transaction fail. Another one is to return the `restrictionCode` itself, but as messages are strings and codes `uint8`s this may be more complicated to implement in Solidity. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/477827268/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/477850477",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-477850477",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 477850477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Nzg1MDQ3Nw==",
    "user": {
      "login": "youfoundron",
      "id": 4658359,
      "node_id": "MDQ6VXNlcjQ2NTgzNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4658359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youfoundron",
      "html_url": "https://github.com/youfoundron",
      "followers_url": "https://api.github.com/users/youfoundron/followers",
      "following_url": "https://api.github.com/users/youfoundron/following{/other_user}",
      "gists_url": "https://api.github.com/users/youfoundron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youfoundron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youfoundron/subscriptions",
      "organizations_url": "https://api.github.com/users/youfoundron/orgs",
      "repos_url": "https://api.github.com/users/youfoundron/repos",
      "events_url": "https://api.github.com/users/youfoundron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youfoundron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-29T03:13:16Z",
    "updated_at": "2019-03-29T03:13:16Z",
    "author_association": "NONE",
    "body": "@alcuadrado\r\n\r\nWe handle the revert message this way in all of our example and reference implementations -- https://github.com/simple-restricted-token/reference-implementation/blob/master/contracts/token/ERC1404/ERC1404ReferenceImpl.sol#L42",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/477850477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/478005049",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-478005049",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 478005049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODAwNTA0OQ==",
    "user": {
      "login": "alcuadrado",
      "id": 176499,
      "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcuadrado",
      "html_url": "https://github.com/alcuadrado",
      "followers_url": "https://api.github.com/users/alcuadrado/followers",
      "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
      "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
      "repos_url": "https://api.github.com/users/alcuadrado/repos",
      "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-29T13:52:00Z",
    "updated_at": "2019-03-29T13:52:00Z",
    "author_association": "MEMBER",
    "body": "Hey @youfoundron, thanks for your quick reply. \r\n\r\nI'm aware of that and forgot to mention it in my previous comment. My suggestion is to standardize that behavior, so every compliant implementation does the same.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/478005049/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/478677486",
    "html_url": "https://github.com/ethereum/EIPs/issues/1404#issuecomment-478677486",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1404",
    "id": 478677486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODY3NzQ4Ng==",
    "user": {
      "login": "youfoundron",
      "id": 4658359,
      "node_id": "MDQ6VXNlcjQ2NTgzNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4658359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youfoundron",
      "html_url": "https://github.com/youfoundron",
      "followers_url": "https://api.github.com/users/youfoundron/followers",
      "following_url": "https://api.github.com/users/youfoundron/following{/other_user}",
      "gists_url": "https://api.github.com/users/youfoundron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youfoundron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youfoundron/subscriptions",
      "organizations_url": "https://api.github.com/users/youfoundron/orgs",
      "repos_url": "https://api.github.com/users/youfoundron/repos",
      "events_url": "https://api.github.com/users/youfoundron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youfoundron/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-01T17:47:55Z",
    "updated_at": "2019-04-01T17:47:55Z",
    "author_association": "NONE",
    "body": "@alcuadrado Good suggestion. Thanks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/478677486/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
