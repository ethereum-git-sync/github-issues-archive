{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1319",
  "id": 350128909,
  "node_id": "MDU6SXNzdWUzNTAxMjg5MDk=",
  "number": 1319,
  "title": "ERC-1319 Smart Contract Package Registry Interface",
  "user": {
    "login": "cgewecke",
    "id": 7332026,
    "node_id": "MDQ6VXNlcjczMzIwMjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cgewecke",
    "html_url": "https://github.com/cgewecke",
    "followers_url": "https://api.github.com/users/cgewecke/followers",
    "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
    "organizations_url": "https://api.github.com/users/cgewecke/orgs",
    "repos_url": "https://api.github.com/users/cgewecke/repos",
    "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cgewecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2018-08-13T17:49:57Z",
  "updated_at": "2022-05-28T05:11:43Z",
  "closed_at": "2022-05-28T05:11:43Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Simple Summary\r\nA standard interface for smart contract package registries.\r\n\r\n## Abstract\r\nThis EIP specifies an interface for publishing to and retrieving assets from smart contract package registries. It is a companion EIP to [1123](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1123.md) which defines a standard for smart contract package manifests.\r\n\r\n## Motivation\r\nThe goal is to establish a framework that allows smart contract publishers to design and deploy code registries with arbitrary business logic while exposing a set of common endpoints that tooling can use to retrieve assets for contract consumers.\r\n\r\nA clear standard would help the existing EthPM Package Registry evolve from a centralized, single-project community resource into a decentralized multi-registry system whose constituents are bound together by the proposed interface. In turn, these registries could be ENS name-spaced, enabling installation conventions familiar to users of `npm` and other package managers.\r\n\r\n**Examples**\r\n```shell\r\n$ ethpm install packages.zeppelin.eth/Ownership\r\n```\r\n\r\n```javascript\r\nconst SimpleToken = await web3.packaging\r\n                              .registry('packages.ethpm.eth')\r\n                              .getPackage('simple-token')\r\n                              .getVersion('^1.1.5');\r\n```\r\n\r\n## Specification\r\nThe specification describes a small read/write API whose components are mandatory. It allows registries to manage versioned releases using the conventions of [semver](https://semver.org/) without imposing this as a requirement. It assumes registries will share the following structure and conventions:\r\n\r\n+ a **registry** is a deployed contract which manages a collection of **packages**.\r\n+ a **package** is a collection of **releases**\r\n+ a **package** is identified by a unique string name and unique bytes32 **packageId** within a given **registry**\r\n+ a **release** is identified by a `bytes32` **releaseId** which must be unique for a given package name and release version string pair.\r\n+ a **releaseId** maps to a set of data that includes a **manifestURI** string which describes the location of an [EIP 1123 package manifest](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1123.md). This manifest contains data about the release including the location of its component code assets.\r\n+ a **manifestURI** is a URI as defined by [RFC3986](https://tools.ietf.org/html/rfc3986) which can be used to retrieve the contents of the package manifest. In addition to validation against RFC3986, each **manifestURI** must also contain a hash of the content as specified in the [EIP 1123](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1123.md).\r\n\r\n### Examples\r\n\r\n**Package Names / Release Versions**\r\n\r\n```shell\r\n\"simple-token\" # package name\r\n\"1.0.1\"        # version string\r\n```\r\n\r\n**Release IDs**\r\n\r\nImplementations are free to choose any scheme for generating a **releaseId**. A common approach would be to hash the strings together as below:\r\n\r\n```solidity\r\n// Hashes package name and a release version string\r\nfunction generateReleaseId(string packageName, string version)\r\n  public\r\n  view\r\n  returns (bytes32)\r\n  {\r\n    return keccak256(abi.encodePacked(packageName, version));\r\n  }\r\n```\r\nImplementations **must** expose this id generation logic as part of their public `read` API so\r\ntooling can easily map a string based release query to the registry's unique identifier for that release.\r\n\r\n**Manifest URIs**\r\n\r\nAny IPFS or Swarm URI meets the definition of **manifestURI**.\r\n\r\nAnother example is content on GitHub addressed by its SHA-1 hash. The Base64 encoded content at this hash can be obtained by running:\r\n```shell\r\n$ curl https://api.github.com/repos/:owner/:repo/git/blobs/:file_sha\r\n\r\n# Example\r\n$ curl https://api.github.com/repos/rstallman/hello/git/blobs/ce013625030ba8dba906f756967f9e9ca394464a\r\n```\r\n\r\nThe string \"hello\" can have its GitHub SHA-1 hash independently verified by comparing it to the output of:\r\n```shell\r\n$ printf \"blob 6\\000hello\\n\" | sha1sum\r\n> ce013625030ba8dba906f756967f9e9ca394464a\r\n```\r\n\r\n### Write API Specification\r\nThe write API consists of a single method, `release`. It passes the registry the package name, a\r\nversion identifier for the release, and a URI specifying the location of a manifest which\r\ndetails the contents of the release.\r\n```solidity\r\nfunction release(string packageName, string version, string manifestURI) public\r\n  returns (bytes32 releaseId);\r\n```\r\n### Read API Specification\r\n\r\nThe read API consists of a set of methods that allows tooling to extract all consumable data from a registry.\r\n\r\n```solidity\r\n// Retrieves a slice of the list of all unique package identifiers in a registry.\r\n// `offset` and `limit` enable paginated responses / retrieval of the complete set.  (See note below)\r\nfunction getAllPackageIds(uint offset, uint limit) public view\r\n  returns (\r\n    bytes32 packageIds,\r\n    uint offset\r\n  );\r\n\r\n// Retrieves the unique string `name` associated with a package's id.\r\nfunction getPackageName(bytes32 packageId) public view returns (string name);\r\n\r\n// Retrieves the registry's unique identifier for an existing release of a package.\r\nfunction getReleaseId(string packageName, string version) public view returns (bytes32);\r\n\r\n// Retrieves a slice of the list of all release ids for a package.\r\n// `offset` and `limit` enable paginated responses / retrieval of the complete set. (See note below)\r\nfunction getAllReleaseIds(string packageName, uint offset, uint limit) public view\r\n  returns (\r\n    bytes32[] ids,\r\n    uint offset\r\n  );\r\n\r\n// Retrieves package name, release version and URI location data for a release id.\r\nfunction getReleaseData(bytes32 releaseId) public view\r\n  returns (\r\n    string packageName,\r\n    string version,\r\n    string manifestURI\r\n  );\r\n\r\n// Retrieves the release id a registry *would* generate for a package name and version pair\r\n// when executing a release.\r\nfunction generateReleaseId(string packageName, string version) \r\n  public\r\n  view\r\n  returns (bytes32);\r\n```\r\n**Pagination**\r\n\r\n`getAllPackageIds` and `getAllReleaseIds` support paginated requests because it's possible that the return values for these methods could become quite large. The methods should return an `offset` that is a pointer to the next available item in a list of all items such that a caller can use it to pick up from where the previous request left off.  (See [here](https://mixmax.com/blog/api-paging-built-the-right-way) for a discussion of the merits and demerits of various pagination strategies.) The `limit` parameter defines the maximum number of items a registry should return per request.\r\n\r\n## Rationale\r\nThe proposal hopes to accomplish the following:\r\n\r\n+ Define the smallest set of inputs necessary to allow registries to map package names to a set of\r\nrelease versions while allowing them to use any versioning schema they choose.\r\n+ Provide the minimum set of getter methods needed to retrieve package data from a registry so that registry aggregators can read all of their data.\r\n+ Define a standard query that synthesizes a release identifier from a package name and version pair so that tooling can resolve specific package version requests without needing to query a registry about all of a package's releases.\r\n\r\nRegistries may offer more complex `read` APIs that manage requests for packages within a semver range or at `latest` etc. This EIP is agnostic about how tooling or registries might implement these. It recommends that registries implement [EIP 165](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md) and avail themselves of resources to publish more complex interfaces such as [EIP 926](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-926.md).\r\n\r\n## Backwards Compatibility\r\nNo standard exists for package registries. The package registry currently deployed by EthPM would not comply with the standard since it implements only one of the method signatures described in the specification.\r\n\r\n## Implementation\r\nA reference implementation of this proposal is in active development at the EthPM organization on Github [here](https://github.com/ethpm/escape-truffle).\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1319/reactions",
    "total_count": 11,
    "+1": 8,
    "-1": 0,
    "laugh": 0,
    "hooray": 3,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412666391",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-412666391",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 412666391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjY2NjM5MQ==",
    "user": {
      "login": "xinbenlv",
      "id": 640325,
      "node_id": "MDQ6VXNlcjY0MDMyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/640325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinbenlv",
      "html_url": "https://github.com/xinbenlv",
      "followers_url": "https://api.github.com/users/xinbenlv/followers",
      "following_url": "https://api.github.com/users/xinbenlv/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinbenlv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinbenlv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinbenlv/subscriptions",
      "organizations_url": "https://api.github.com/users/xinbenlv/orgs",
      "repos_url": "https://api.github.com/users/xinbenlv/repos",
      "events_url": "https://api.github.com/users/xinbenlv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinbenlv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T21:13:14Z",
    "updated_at": "2018-08-13T21:13:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for composing this ERC, this is very interesting. I look forward to more updates on the draft. Cheers!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412666391/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412728323",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-412728323",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 412728323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjcyODMyMw==",
    "user": {
      "login": "tjayrush",
      "id": 5417918,
      "node_id": "MDQ6VXNlcjU0MTc5MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5417918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjayrush",
      "html_url": "https://github.com/tjayrush",
      "followers_url": "https://api.github.com/users/tjayrush/followers",
      "following_url": "https://api.github.com/users/tjayrush/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjayrush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjayrush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjayrush/subscriptions",
      "organizations_url": "https://api.github.com/users/tjayrush/orgs",
      "repos_url": "https://api.github.com/users/tjayrush/repos",
      "events_url": "https://api.github.com/users/tjayrush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjayrush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T02:02:47Z",
    "updated_at": "2018-08-14T02:02:47Z",
    "author_association": "NONE",
    "body": "This is gorgeous. Thanks for posting it. Does it easily expand out to plain old-fashioned software distribution as well (or any digital content for that matter), or is there some reason why it would only apply to smart contracts? Asking out of ignorance more than anything else.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412728323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412740822",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-412740822",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 412740822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjc0MDgyMg==",
    "user": {
      "login": "gnidan",
      "id": 151065,
      "node_id": "MDQ6VXNlcjE1MTA2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnidan",
      "html_url": "https://github.com/gnidan",
      "followers_url": "https://api.github.com/users/gnidan/followers",
      "following_url": "https://api.github.com/users/gnidan/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnidan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnidan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnidan/subscriptions",
      "organizations_url": "https://api.github.com/users/gnidan/orgs",
      "repos_url": "https://api.github.com/users/gnidan/repos",
      "events_url": "https://api.github.com/users/gnidan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnidan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T03:13:39Z",
    "updated_at": "2018-08-14T03:16:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@tjayrush in theory, EthPM works just fine with traditional software distribution, but it's overkill and not the use case for which it was designed.\r\n\r\nYou would include `sources` in your manifest file, as described by [EIP-1123](https://eips.ethereum.org/EIPS/eip-1123) (discussion: #1123), but leave out `contract_types` and `deployments`. See also: EthPM [Use Cases](https://ethpm.github.io/ethpm-spec/use-cases.html) for descriptions and links to examples.\r\n\r\nHere's a basic manifest file you might use, as example:\r\n```javascript\r\n{\r\n  \"manifest_version\": \"2\",\r\n  \"version\": \"1.0.0\",\r\n  \"package_name\":\"cool-program\",\r\n  \"sources\":{\r\n    \"./bin/a.out\": \"ipfs://Qma8ti...\",\r\n    \"./src/index.cpp\": \"ipfs://QmRJHL...\"\r\n    /* ... other files to include in the package ... */\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412740822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/414006302",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-414006302",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 414006302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDAwNjMwMg==",
    "user": {
      "login": "CBDotGuru",
      "id": 5546555,
      "node_id": "MDQ6VXNlcjU1NDY1NTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5546555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CBDotGuru",
      "html_url": "https://github.com/CBDotGuru",
      "followers_url": "https://api.github.com/users/CBDotGuru/followers",
      "following_url": "https://api.github.com/users/CBDotGuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/CBDotGuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CBDotGuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CBDotGuru/subscriptions",
      "organizations_url": "https://api.github.com/users/CBDotGuru/orgs",
      "repos_url": "https://api.github.com/users/CBDotGuru/repos",
      "events_url": "https://api.github.com/users/CBDotGuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CBDotGuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T22:46:25Z",
    "updated_at": "2018-08-17T22:46:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gnidan unless we're migrating software registries to blockchain as whole right? I think a case can be made about this serving as a foundation to a much larger ecosystem.  :)\r\n\r\nWhat is the status of any of the web3js or any other current web3 api adopting this if we know? Are they going to wait for this to move up in status beforehand? Also, I haven't looked, but just want to verify that the ethpm registry is live on mainnet?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/414006302/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/414018414",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-414018414",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 414018414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDAxODQxNA==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-18T00:29:26Z",
    "updated_at": "2018-08-18T00:31:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @Hackdom :)\r\n\r\n+ A Web3.js module is part of the work [EthPrize](http://ethprize.io/) is sponsoring at [EthPM](https://github.com/ethpm).  We've talked to the maintainers at Web3.js and have their encouragement as well as advice about how to structure the API and integrate with an ENS library they're rolling out. There should be substantial progress on that over the next month.\r\n\r\n+ There's active work at EthPM on a reference implementation for a registry whose interface matches this ERC's (hopefully completed by next week). That project includes deployment and temporary ENS namespace registration scripts that should allow contract publishers to quickly deploy a registry and/or experiment with whatever registry model they're interested in. The standard proposed here is meant to make it possible for tooling to pull packages down from a  multiple-registry ecosystem with the minimum fuss. \r\n\r\n+ Finally there's ongoing work at EthPM developing Python and JS libraries to facilitate package publication and installation in accordance with the package manifest standard proposed by EIP #1123, tying all these pieces together.\r\n\r\nIn short there's WIP for all of this but ultimately community agreement about a reasonable interface is necessary before those implementations can be locked down. \r\n\r\nThe current EthPM Registry (which has been active for more than a year) is deployed to Ropsten at [0x8011df4830b4f696cd81393997e5371b93338878](https://testnet.etherscan.io/address/0x8011df4830b4f696cd81393997e5371b93338878).  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/414018414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421299329",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-421299329",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 421299329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTI5OTMyOQ==",
    "user": {
      "login": "hiddentao",
      "id": 266594,
      "node_id": "MDQ6VXNlcjI2NjU5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266594?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hiddentao",
      "html_url": "https://github.com/hiddentao",
      "followers_url": "https://api.github.com/users/hiddentao/followers",
      "following_url": "https://api.github.com/users/hiddentao/following{/other_user}",
      "gists_url": "https://api.github.com/users/hiddentao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hiddentao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hiddentao/subscriptions",
      "organizations_url": "https://api.github.com/users/hiddentao/orgs",
      "repos_url": "https://api.github.com/users/hiddentao/repos",
      "events_url": "https://api.github.com/users/hiddentao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hiddentao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T09:51:01Z",
    "updated_at": "2018-09-14T09:57:15Z",
    "author_association": "NONE",
    "body": "When publishing a new release it would be good if multiple manifest URIs could be provided, as fallbacks. So perhaps a function which allows you to associate additional URIs with a release id:\r\n\r\n```solidity\r\nfunction addManifestUri(bytes32 releaseId, string manifestURI) public;\r\n```\r\n\r\nThen for reading, since [we can't yet return an array of strings](https://solidity.readthedocs.io/en/v0.4.25/frequently-asked-questions.html#is-it-possible-to-return-an-array-of-strings-string-from-a-solidity-function):\r\n\r\n```solidity\r\nfunction getReleaseData(bytes32 releaseId) public view\r\n  returns (\r\n    string packageName,\r\n    string version,\r\n    string manifestURI, /* the first one */\r\n    uint totalManifestURIs /* no. of URIs in total */\r\n  );\r\n\r\n/* Pass in 0-based index to get the URI at that index in the array */\r\nfunction getManifestUri(bytes32 releaseId, uint index) public view return (string)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421299329/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421616793",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-421616793",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 421616793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTYxNjc5Mw==",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-15T18:57:19Z",
    "updated_at": "2018-09-15T18:57:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hiddentao Thanks for this comment. \r\n\r\n+ Could you provide more information about why you believe fallbacks would be helpful? \r\n+ Is there an analog to this approach in other resource request patterns you know of? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421616793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421931308",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-421931308",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 421931308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTkzMTMwOA==",
    "user": {
      "login": "hiddentao",
      "id": 266594,
      "node_id": "MDQ6VXNlcjI2NjU5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266594?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hiddentao",
      "html_url": "https://github.com/hiddentao",
      "followers_url": "https://api.github.com/users/hiddentao/followers",
      "following_url": "https://api.github.com/users/hiddentao/following{/other_user}",
      "gists_url": "https://api.github.com/users/hiddentao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hiddentao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hiddentao/subscriptions",
      "organizations_url": "https://api.github.com/users/hiddentao/orgs",
      "repos_url": "https://api.github.com/users/hiddentao/repos",
      "events_url": "https://api.github.com/users/hiddentao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hiddentao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-17T08:47:41Z",
    "updated_at": "2018-09-17T08:47:41Z",
    "author_association": "NONE",
    "body": "@cgewecke \r\n\r\nIt's purely from a redundancy point of view. Also note that they wouldn't be mandatory - the slots are there if a package manager wishes to makes use of them.\r\n\r\nI know that Maven allows for mirror repositories (essentially the same thing) -> https://maven.apache.org/guides/mini/guide-mirror-settings.html. And they list some good reasons:\r\n\r\n* There is a synchronized mirror on the internet that is geographically closer and faster\r\n* You want to replace a particular repository with your own internal repository which you have greater control over\r\n* You want to run a repository manager to provide a local cache to a mirror and need to use its URL instead",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421931308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/427429035",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-427429035",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 427429035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQyOTAzNQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T16:47:54Z",
    "updated_at": "2018-10-05T16:47:54Z",
    "author_association": "MEMBER",
    "body": "Looks like the return types for `getAllPackageIds` is incorrectly a `bytes32` instead of a `bytes32[]`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/427429035/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/427430734",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-427430734",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 427430734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQzMDczNA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T16:53:49Z",
    "updated_at": "2018-10-05T16:53:49Z",
    "author_association": "MEMBER",
    "body": "@hiddentao since all releases are content addressed, and we are expecting to see mostly ipfs/swarm uris, I don't see a lot of value in this.  I understand there is some extra benefit in being able to provide redundancy, but for this use case, submitting both a swarm url and an IPFS url is not necessary because you can perform a transform between the two urls.\r\n\r\nAnother problem I see with this is if the different urls have different content hashes, which results in both ambiguity as to which is the *right* one, as well as additional load on package managers to do something like validate that all listed URLs have the same content hash.\r\n\r\nAlso, I believe that this can be accomplished by layer-2 solutions, especially since the content hash is required.\r\n\r\nI don't think it has zero value by any means, but I don't think the value added is worth the extra complexity.  :-1: from me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/427430734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093470",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-986093470",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 986093470,
    "node_id": "IC_kwDOAq426M46xpee",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:11:35Z",
    "updated_at": "2021-12-04T21:11:35Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986168842",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-986168842",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 986168842,
    "node_id": "IC_kwDOAq426M46x74K",
    "user": {
      "login": "xinbenlv",
      "id": 640325,
      "node_id": "MDQ6VXNlcjY0MDMyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/640325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinbenlv",
      "html_url": "https://github.com/xinbenlv",
      "followers_url": "https://api.github.com/users/xinbenlv/followers",
      "following_url": "https://api.github.com/users/xinbenlv/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinbenlv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinbenlv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinbenlv/subscriptions",
      "organizations_url": "https://api.github.com/users/xinbenlv/orgs",
      "repos_url": "https://api.github.com/users/xinbenlv/repos",
      "events_url": "https://api.github.com/users/xinbenlv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinbenlv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-05T05:17:41Z",
    "updated_at": "2021-12-05T05:17:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "cgewecke@ are you still working on this proposal?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986168842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986264052",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-986264052",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 986264052,
    "node_id": "IC_kwDOAq426M46yTH0",
    "user": {
      "login": "cgewecke",
      "id": 7332026,
      "node_id": "MDQ6VXNlcjczMzIwMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7332026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgewecke",
      "html_url": "https://github.com/cgewecke",
      "followers_url": "https://api.github.com/users/cgewecke/followers",
      "following_url": "https://api.github.com/users/cgewecke/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgewecke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgewecke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgewecke/subscriptions",
      "organizations_url": "https://api.github.com/users/cgewecke/orgs",
      "repos_url": "https://api.github.com/users/cgewecke/repos",
      "events_url": "https://api.github.com/users/cgewecke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgewecke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-05T16:50:55Z",
    "updated_at": "2021-12-05T16:50:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@xinbenlv No, I'm not. This proposal was actually spear-headed by @pipermerriam. \r\n\r\n@pipermerriam What should be done here?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986264052/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140176126",
    "html_url": "https://github.com/ethereum/EIPs/issues/1319#issuecomment-1140176126",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1319",
    "id": 1140176126,
    "node_id": "IC_kwDOAq426M5D9bT-",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-28T05:11:43Z",
    "updated_at": "2022-05-28T05:11:43Z",
    "author_association": "MEMBER",
    "body": "Closing this for housekeeping purposes.  Feel free to continue using this issue for discussion about EIP-1319.\r\n\r\nNote: If 1319 is pulled out of stagnant, the discussions-to link should be moved to a thread on Ethereum Magicians.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140176126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
