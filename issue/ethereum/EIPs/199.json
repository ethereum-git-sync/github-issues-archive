{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/199/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/199/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/199/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/199",
  "id": 204115141,
  "node_id": "MDU6SXNzdWUyMDQxMTUxNDE=",
  "number": 199,
  "title": "New Opcode: INJECTED_STATIC_CALL",
  "user": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2017-01-30T20:04:51Z",
  "updated_at": "2017-05-05T16:16:59Z",
  "closed_at": "2017-05-05T16:16:59Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "I propose a new opcode, `INJECTED_STATIC_CALL` which would be built off of the semantics of `STATIC_CALL` from [EIP116](https://github.com/ethereum/EIPs/issues/116).  The `INJECTED_STATIC_CALL` opcode would operate in the same manner as `STATIC_CALL`, disallowing any state modifying actions.  This opcode would take one additional address argument.  The code executed by `INJECTED_STATIC_CALL` would be executed in the context of the storage for the given address.\r\n\r\nThe motivation for this opcode comes from a gap in functionality that [EIP144](https://github.com/ethereum/EIPs/issues/144) may leave.  EIP144 will allow external calls to query the storage of arbitrary contracts using EVM code.  The addition of this new opcode would enable this same functionality for contracts.",
  "closed_by": {
    "login": "pipermerriam",
    "id": 824194,
    "node_id": "MDQ6VXNlcjgyNDE5NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pipermerriam",
    "html_url": "https://github.com/pipermerriam",
    "followers_url": "https://api.github.com/users/pipermerriam/followers",
    "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
    "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
    "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
    "repos_url": "https://api.github.com/users/pipermerriam/repos",
    "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/199/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/199/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276362518",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-276362518",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 276362518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjM2MjUxOA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-31T13:27:55Z",
    "updated_at": "2017-01-31T13:27:55Z",
    "author_association": "MEMBER",
    "body": "What's the motivating use-case for this? As far as I'm concerned, contracts only being able to interact with each other via their exposed public APIs is an asset, not a liability.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276362518/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276408479",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-276408479",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 276408479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjQwODQ3OQ==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-31T16:12:27Z",
    "updated_at": "2017-01-31T16:12:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "As long as it only allows reads, what liability could it create? The whole blockchain is public anyways, this just makes some of that data easier to read.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276408479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276410741",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-276410741",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 276410741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjQxMDc0MQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-31T16:19:05Z",
    "updated_at": "2017-01-31T16:19:05Z",
    "author_association": "MEMBER",
    "body": "I'm concerned that it will encourage people to ignore or avoid the interfaces publicly exposed by contracts, and I haven't heard a compelling use-case for offering it.\r\n\r\nAll of the data in a contract can be accessed offchain, and that's fine, but I think there's a good argument for requiring contracts to talk to each other only via their ABIs.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276410741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276410854",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-276410854",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 276410854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjQxMDg1NA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-31T16:19:24Z",
    "updated_at": "2017-01-31T16:21:11Z",
    "author_association": "MEMBER",
    "body": "@Arachnid in all previous context's that I've done development I think I would agree but for smart contract development I think this fits well.  Here are the use cases that I see as compelling.\r\n\r\n1. It is easy to reach the gas limit in contract development.  One of the common ways I've gone about reducing size is munging all of my *getters* together.  Instead of `function getA, function getB, function getC` you end up with `function getABC` which returns all 3 values.   There are cases where the combined getter API is *good* but there are also plenty of cases where it results in harder to read code.  This opcode would allow for contract developers to write the right *getter* API rather than the one that reduces the deploy gas costs.\r\n\r\n2. Contracts don't always expose the data you need in the format you need.  In the traditional web world, we typically would just write some code to translate the data into the format we want.  In contract development this type of data munging can be prohibitively expensive.  Allowing direct access to the storage will allow this type of data munging in a much more efficient way.\r\n\r\n3. Being able to fetch *only* the piece of data you need reduces gas costs for the contracts reading that data.\r\n\r\nArguments against that I've heard.\r\n\r\n1. What about contracts that make you pay for their data.  Since the data is already available to the outside world, I think that this pattern is fundamentally flawed.  It is trivial to circumvent these types of paywalls.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276410854/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276457823",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-276457823",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 276457823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjQ1NzgyMw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-31T19:00:49Z",
    "updated_at": "2017-01-31T19:00:49Z",
    "author_association": "MEMBER",
    "body": "Another thing that I like this feature for is situations where you contracts that just act as views on top of an underlying database contract.  With a sufficiently complex database contract it becomes very difficult to forecast what read APIs you may need going forward.  In the current world this requires that you build in the ability to get at 100% of the data up front.  This new opcode would allow you to only build the initial API that you need for reading data (or none at all) with the knowledge that you can implement that API in the view contracts that sit in front of the DB contract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/276457823/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283383247",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-283383247",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 283383247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzM4MzI0Nw==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T16:04:45Z",
    "updated_at": "2017-03-01T16:04:45Z",
    "author_association": "NONE",
    "body": "I thought hiding private state (from other on-chain consumers) was a design feature of the EVM. injectCall is just sugar for something you can already off chain",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283383247/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283384812",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-283384812",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 283384812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzM4NDgxMg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T16:09:43Z",
    "updated_at": "2017-03-01T16:09:43Z",
    "author_association": "MEMBER",
    "body": "> I thought hiding private state (from other on-chain consumers) was a design feature of the EVM.\r\n\r\nGiven that it is relatively trivial to circumvent the \"privateness\" of that data I'd posture that this isn't a very solid or reliable feature.\r\n\r\n> injectCall is just sugar for something you can already off chain\r\n\r\nAlong that reasoning, since you can already do this off chain, why not allow it on-chain as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283384812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283386234",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-283386234",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 283386234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzM4NjIzNA==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T16:14:10Z",
    "updated_at": "2017-03-01T16:14:10Z",
    "author_association": "NONE",
    "body": "> Given that it is relatively trivial to circumvent the \"privateness\" of that data I'd posture that this isn't a very solid or reliable feature.\r\n\r\nYou can read the data from my Super Authoritative Oracle Aggregator and resubmit it, but I can still charge the first consumer on-chain who wants the \"real\" thing. These and probably other building blocks stop working. I bet there will be some kind of obfuscation arms race if this is enabled.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283386234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283386581",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-283386581",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 283386581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzM4NjU4MQ==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T16:15:07Z",
    "updated_at": "2017-03-01T16:15:07Z",
    "author_association": "NONE",
    "body": "> Along that reasoning, since you can already do this off chain, why not allow it on-chain as well.\r\n\r\nOk and along that reasoning, we should be able to read historic log state into contract state.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283386581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283406174",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-283406174",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 283406174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzQwNjE3NA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T17:16:46Z",
    "updated_at": "2017-03-01T17:16:46Z",
    "author_association": "MEMBER",
    "body": "> Ok and along that reasoning, we should be able to read historic log state into contract state.\r\n\r\nAnd if we legalize marijuana we'll probably have to legalize heroin and cocaine as well.  Can not use that style of argument?\r\n\r\n> I can still charge the first consumer on-chain who wants the \"real\" thing.\r\n\r\nThis is purely my opinion, but the business model of contract's which charge other contracts for data feels flawed and not worth protecting.  It is borderline trivial to circumvent or undermine these systems.  \r\n\r\nI'd also point out that were this to be implemented, it doesn't preclude oracles from charging for information.  It just eliminates the ability to charge for information that is already on the blockchain.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/283406174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/284181164",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-284181164",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 284181164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE4MTE2NA==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-04T21:11:24Z",
    "updated_at": "2017-03-04T21:11:24Z",
    "author_association": "NONE",
    "body": "> It just eliminates the ability to charge for information that is already on the blockchain.\r\n\r\nThis essentially forces all architectures to be push-oriented instead of allowing pull-oriented data flows. This may be viable, but it really needs us to try working through some non trivial examples and see if it forces awkward constraints on systems that use monetized feeds",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/284181164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/284181229",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-284181229",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 284181229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE4MTIyOQ==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-04T21:12:21Z",
    "updated_at": "2017-03-04T21:12:21Z",
    "author_association": "NONE",
    "body": "I would love input from anyone who was in the original \"allow private state or not\" debate. @gavofyork maybe?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/284181229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289121747",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-289121747",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 289121747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTEyMTc0Nw==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T19:27:43Z",
    "updated_at": "2017-03-24T19:27:43Z",
    "author_association": "MEMBER",
    "body": "More discussion over at the BTCRelay repository relevant to this.  https://github.com/ethereum/btcrelay/issues/44\r\n\r\nI'd present that as further evidence that private state is a flawed concept.  Monetized feeds are fine, but money is paying for the data to be put into the blockchain (much like what oraclize.it does).  If the payment is for data that is already on chain then there will be ways to circumvent that payment (which can be done today with the current EVM).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289121747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289143000",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-289143000",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 289143000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE0MzAwMA==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T21:06:47Z",
    "updated_at": "2017-03-25T00:17:05Z",
    "author_association": "NONE",
    "body": "> If the payment is for data that is already on chain then there will be ways to circumvent that payment (which can be done today with the current EVM).\r\n\r\nI guess the point is that you actually can't fully circumvent it and preserve the EVM's trust properties, and it was a deliberate choice to force this out of this layer in order to enable certain kinds of dapps.\r\n\r\nAnother way to say this is that certain kinds of \"metadata\" should be treated as off chain data (like logs and maybe private state). I believe this enables a kind of pull-oriented dataflow which might be more efficient if we want 'pay for new data' feature (I'd need time to make that argument). Whether or not this is sufficient reason to have private state is not clear to me.\r\n\r\nI don't find the btcrelay discussion to be convincing one way or the other, it's not an interesting \"already in the state but unaccessible\" case if I understand correctly. I'd really like to see what the people who deliberately discussed this and then decided this way have to say. I think this happened because of a blog post during POC phase or something like that.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289143000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289145406",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-289145406",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 289145406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE0NTQwNg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T21:18:42Z",
    "updated_at": "2017-03-24T21:18:42Z",
    "author_association": "MEMBER",
    "body": "> I'd really like to see what the people who deliberately discussed this and then decided this way have to say\r\n\r\nI am interested in this as well.  @vbuterin ?  can you provide any information about previous conversations that have happened resulting in the choice to make contract state \"private\" by default?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/289145406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299366095",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-299366095",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 299366095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTM2NjA5NQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-05T04:14:07Z",
    "updated_at": "2017-05-05T04:14:07Z",
    "author_association": "MEMBER",
    "body": "I think that aside from preserving a bit of data feed monetizability the idea was to preserve an object-oriented programming principle, where contracts would interact with each other through calls instead of directly reading into each other's state. One practical benefit of this is that right now it's theoretically possible to make hardforks that heavily reorganize the way that storage and code work, eg. completely rewriting how storage is organized and then making appropriate modifications to code to fit into the new model, but allowing contracts to access external storage would make this trickier, as you would have to deal with the case where code of contract A acts on storage of contract B. DELEGATECALL also does this, but it's less bad because you can transform the code at runtime whereas with INJECTED_STATIC_CALL it's the storage that would need to be transformed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299366095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299392439",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-299392439",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 299392439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTM5MjQzOQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-05T06:28:14Z",
    "updated_at": "2017-05-05T06:28:14Z",
    "author_association": "MEMBER",
    "body": "I'm against this onchain because of the abstraction issues Vitalik\nmentions, unless someone can cite a compelling use case in which this\nfunctionality would be vital.\n\nOn Fri, May 5, 2017 at 5:14 AM vbuterin <notifications@github.com> wrote:\n\n> I think that aside from preserving a bit of data feed monetizability the\n> idea was to preserve an object-oriented programming principle, where\n> contracts would interact with each other through calls instead of directly\n> reading into each other's state. One practical benefit of this is that\n> right now it's theoretically possible to make hardforks that heavily\n> reorganize the way that storage and code work, eg. completely rewriting how\n> storage is organized and then making appropriate modifications to code to\n> fit into the new model, but allowing contracts to access external storage\n> would make this trickier, as you would have to deal with the case where\n> code of contract A acts on storage of contract B. DELEGATECALL also does\n> this, but it's less bad because you can transform the code at runtime\n> whereas with INJECTED_STATIC_CALL it's the storage that would need to be\n> transformed.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/199#issuecomment-299366095>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AABFyfsCLpwBHjpfQ8vVCpOF0ThXFQnQks5r2qIQgaJpZM4Lx2kv>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299392439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299508935",
    "html_url": "https://github.com/ethereum/EIPs/issues/199#issuecomment-299508935",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/199",
    "id": 299508935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTUwODkzNQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-05T16:16:59Z",
    "updated_at": "2017-05-05T16:16:59Z",
    "author_association": "MEMBER",
    "body": "I don't feel strongly enough about this proposal to try and push it forward.  Thanks @vbuterin for the context on the original decision.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299508935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
