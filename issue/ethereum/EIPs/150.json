{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/150/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/150/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/150/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/150",
  "id": 179028421,
  "node_id": "MDU6SXNzdWUxNzkwMjg0MjE=",
  "number": 150,
  "title": "Long-term gas cost changes for IO-heavy operations to mitigate transaction spam attacks",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 40,
  "created_at": "2016-09-24T12:43:21Z",
  "updated_at": "2017-08-15T14:57:10Z",
  "closed_at": "2017-08-15T14:52:00Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "EDITOR UPDATE (2017-08-15): This EIP is now located at https://github.com/ethereum/EIPs/blob/master/EIPS/eip-150.md. Please go there for the correct specification. The text below may be incorrect or outdated, and is not maintained.\r\n-----\r\n\r\nUPDATE: version 1c of this spec has been implemented and is active on the mainnet as of block 2463000. Spec is kept unmodified for archival purposes.\r\n### Specification (version 1)\r\n\r\nIf `block.number >= FORK_BLKNUM`, then:\r\n- Increase the gas cost of EXTCODESIZE to 700\r\n- Increase the base gas cost of EXTCODECOPY to 700\r\n- Increase the gas cost of BALANCE to 400\r\n- Increase the gas cost of SLOAD to 200\r\n- Increase the gas cost of CALL, DELEGATECALL, CALLCODE to 700\r\n- Increase the gas cost of SUICIDE to 5000\r\n- Increase the recommended gas limit target to 5.5 million\r\n- If a call asks for more gas than the maximum allowed amount, do not return an OOG error; instead, call with the maximum allowed amount of gas (this is equivalent to a version of #90)\r\n\r\nThat is, substitute:\r\n\r\n```\r\n        extra_gas = (not ext.account_exists(to)) * opcodes.GCALLNEWACCOUNT + \\\r\n            (value > 0) * opcodes.GCALLVALUETRANSFER\r\n        submsg_gas = gas + opcodes.GSTIPEND * (value > 0)\r\n        if compustate.gas < gas + extra_gas:\r\n            return vm_exception('OUT OF GAS', needed=gas+extra_gas)\r\n```\r\n\r\nWith:\r\n\r\n```\r\n        extra_gas = (not ext.account_exists(to)) * opcodes.GCALLNEWACCOUNT + \\\r\n            (value > 0) * opcodes.GCALLVALUETRANSFER\r\n        if compustate.gas < extra_gas:\r\n            return vm_exception('OUT OF GAS', needed=extra_gas)\r\n        if compustate.gas < gas + extra_gas:\r\n            gas = compustate.gas - extra_gas\r\n        submsg_gas = gas + opcodes.GSTIPEND * (value > 0)\r\n```\r\n### Specification (version 1b)\r\n\r\nAll of the above, but:\r\n- Define \"all but one 64th\" of `N` as `N - floor(N / 64)`\r\n- If a call asks for more gas than the maximum allowed amount (ie. total amount of gas remaining in the parent after subtracting the gas cost of the call and memory expansion), do not return an OOG error; instead, if a call asks for more gas than all but one 64th of the maximum allowed amount, call with all but one 64th of the maximum allowed amount of gas  (this is equivalent to a version of #90 plus #114). CREATE only provides all but one 64th of the parent gas  to the child call.\r\n### Specification (version 1c)\r\n\r\nAll of the above, and:\r\n\r\nIf SUICIDE hits a newly created account, it triggers an additional gas cost of 25000 (similar to CALLs)\r\n### Specification (version 2)\r\n\r\nIf `block.number >= METROPOLIS_FORK_BLKNUM`, then:\r\n- Increase the gas cost of EXTCODESIZE to 4000\r\n- Increase the base gas cost of EXTCODECOPY to 4000\r\n- Increase the gas cost of BALANCE to 400\r\n- Increase the gas cost of SLOAD to 200\r\n- Increase the gas cost of CALL, CALLDELEGATE, CALLCODE to 4000\r\n- Increase the gas cost of SUICIDE to 5000\r\n- If SUICIDE hits a newly created account, it triggers an additional gas cost of 25000 (similar to CALLs)\r\n- Increase the recommended gas limit target to 5.5 million\r\n- Define \"all but one 64th\" of `N` as `N - floor(N / 64)`\r\n- If a call asks for more gas than the maximum allowed amount, do not return an OOG error; instead, if a call asks for more gas than all but one 64th of the maximum allowed amount, call with all but one 64th of the maximum allowed amount of gas (this is equivalent to a version of #90 plus #114). CREATE only provides all but one 64th of the parent gas to the child call.\r\n\r\nWhen executing EXTCODESIZE, EXTCODECOPY, CALL, CALLDELEGATE or CALLCODE (but NOT BALANCE), let CODELOADING_GAS be `int(400 + len(code) / 6)`. At the end of the call, refund an additional 4000 - CODELOADING_GAS (if CODELOADING < 0, refund nothing). CREATE only provides 63/64 of the parent gas to the child call.\r\n### Rationale\r\n\r\nRecent denial-of-service attacks have shown that opcodes that read the state tree are under-priced relative to other opcodes. There are software changes that have been made, are being made and can be made in order to mitigate the situation; however, the fact will remain that such opcodes will be by a substantial margin the easiest known mechanism to degrade network performance via transaction spam. The concern arises because it takes a long time to read from disk, and is additionally a risk to future sharding proposals as the \"attack transactions\" that have so far been most successful in degrading network performance would also require tens of megabytes to provide Merkle proofs for. This EIP increases the cost of storage reading opcodes to address this concern. The costs have been derived from an updated version of the calculation table used to generate the 1.0 gas costs: https://docs.google.com/spreadsheets/d/15wghZr-Z6sRSMdmRmhls9dVXTOpxKy8Y64oy9MvDZEQ/edit#gid=0 ; the rules attempt to target a limit of 8 MB of data that needs to be read in order to process a block, and include an estimate of 500 bytes for a Merkle proof for SLOAD and 1000 for an account.\r\n\r\nThe first version of the EIP aims to be simple, and adds a flat penalty of 300 gas on top of the costs calculated in this table to account for the cost of loading the code (~17-21 kb in the worst case). The second version of the EIP instead adds an explicit parameter to take into account the size of code loading. Note that this parameter is weighted ~60% below the computed weight; this is to account for the fact that loading a large contiguous of code is, on a per-byte basis, much more efficient in terms of disk seeks (which often have a minimum size of 4kb regardless of the size of the actual object) than making several Merkle queries. A worst-case contract would take 3000 gas to load; a contract 2kb in size would take ~720 gas. This also has the benefit that it prevents a potential DoS vector against precomputation-heavy JIT VMs, where an attacker calls a large contract, requires the VM to just-in-time compile its entire code, only executes for perhaps ten cycles and then leaves. Version 2b fixes a problem where EXTCODESIZE is called with a small amount of gas, so that execution tries to fetch the contract code but runs out-of-gas upon seeing its size, thereby adding a large number of bytes to the merkle proof (and required DB load unless proper caching is added) but still only costing a relatively small amount of gas.\r\n\r\nBALANCE is not affected by the per-byte changes because checking an account's balance does not require loading its code.\r\n\r\nThe EIP 90 gas mechanic is introduced because without it, all current contracts that make calls would stop working as they use an expression like `msg.gas - 40` to determine how much gas to make a call with, relying on the gas cost of calls being 40. In the more complex version, EIP 114 is introduced because, given that we are making the cost of a call higher and less predictable, we have an opportunity to do it at no extra cost to currently available guarantees, and so we also achieve the benefit of replacing the call stack depth limit with a \"softer\" gas-based restriction, thereby eliminating call stack depth attacks as a class of attack that contract developers have to worry about and hence increasing contract programming safety. Note that with the given parameters, the de-facto maximum call stack depth is limited to ~340 (down from ~1024), mitigating the harm caused by any further potential quadratic-complexity DoS attacks that rely on calls.\r\n\r\nThe gas limit increase is recommended so as to preserve the de-facto transactions-per-second processing capability of the system for average contracts.\r\n",
  "closed_by": {
    "login": "cdetrio",
    "id": 997681,
    "node_id": "MDQ6VXNlcjk5NzY4MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cdetrio",
    "html_url": "https://github.com/cdetrio",
    "followers_url": "https://api.github.com/users/cdetrio/followers",
    "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
    "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
    "organizations_url": "https://api.github.com/users/cdetrio/orgs",
    "repos_url": "https://api.github.com/users/cdetrio/repos",
    "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cdetrio/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/150/reactions",
    "total_count": 3,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 3,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/150/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/249396122",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-249396122",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 249396122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTM5NjEyMg==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-25T00:56:14Z",
    "updated_at": "2016-09-25T00:56:14Z",
    "author_association": "NONE",
    "body": "Very surprising that the fix is more guessing at constants, this is practically equivalent to any other solution that makes the right costs quadratic. Could there not be a market mechanism for gas costs of different opcodes?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/249396122/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/249402632",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-249402632",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 249402632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTQwMjYzMg==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-25T04:47:55Z",
    "updated_at": "2016-09-25T04:47:55Z",
    "author_association": "MEMBER",
    "body": "IMO that would add much more complexity than either of my own proposals. I have thought about market mechanisms for opcode prices, as has Gav, but so far I have not seen anything that I would not consider exploitable. That said, pricing by category is something that I have looked into within narrow ranges, particularly in the context of state size control vs block processing time control.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/249402632/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/249404090",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-249404090",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 249404090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTQwNDA5MA==",
    "user": {
      "login": "Gustav-Simonsson",
      "id": 293096,
      "node_id": "MDQ6VXNlcjI5MzA5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/293096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gustav-Simonsson",
      "html_url": "https://github.com/Gustav-Simonsson",
      "followers_url": "https://api.github.com/users/Gustav-Simonsson/followers",
      "following_url": "https://api.github.com/users/Gustav-Simonsson/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gustav-Simonsson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gustav-Simonsson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gustav-Simonsson/subscriptions",
      "organizations_url": "https://api.github.com/users/Gustav-Simonsson/orgs",
      "repos_url": "https://api.github.com/users/Gustav-Simonsson/repos",
      "events_url": "https://api.github.com/users/Gustav-Simonsson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gustav-Simonsson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-25T05:38:52Z",
    "updated_at": "2016-09-25T19:33:42Z",
    "author_association": "NONE",
    "body": "version 2 seems like a good first step. With CALL, CALLDELEGATE, CALLCODE at 400 it may be OK to set SLOAD a bit lower, perhaps to 100. I'm guessing it's cost is more important to complex dapps that require more storage loads, and in particular, SLOAD is harder to abuse DoS wise because it already requires the cost of calling a contract - clients can easier optimize storage reads for an already-loaded contract compared to e.g. EXTCODESIZE calls to a ton of (random) contracts.\n\nWe should do some benchmarks in both geth and parity to confirm this.\n\nThough wouldn't aim for perfection here - rather encourage multiple gas tuning HFs to continuously approach optimal values. HFs that change gas costs are significantly easier than other type of consensus protocol changes, and also much easier to get community support around.\n\nRight now the most important thing is to tune these codes approx 1 order of magnitude to avoid severe DoS.\n\nTuning of gas costs reminds me of the tuning Blizzard has done over the years of fighting units (e.g. speed, damage) in Starcraft I and II. Impossible to get 100% right - every tuning causes pro gamers to find so-far-unknown strategies where some units are a bit off balance. But over 20 or so turnings in each game, the end result is extremely balanced.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/249404090/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/249813840",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-249813840",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 249813840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTgxMzg0MA==",
    "user": {
      "login": "chfast",
      "id": 573380,
      "node_id": "MDQ6VXNlcjU3MzM4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chfast",
      "html_url": "https://github.com/chfast",
      "followers_url": "https://api.github.com/users/chfast/followers",
      "following_url": "https://api.github.com/users/chfast/following{/other_user}",
      "gists_url": "https://api.github.com/users/chfast/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chfast/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chfast/subscriptions",
      "organizations_url": "https://api.github.com/users/chfast/orgs",
      "repos_url": "https://api.github.com/users/chfast/repos",
      "events_url": "https://api.github.com/users/chfast/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chfast/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-27T09:28:16Z",
    "updated_at": "2016-09-27T09:28:16Z",
    "author_association": "MEMBER",
    "body": "There is also an EIP https://github.com/ethereum/EIPs/issues/142 to lower SSTORE cost. Worth considering here?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/249813840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/250963314",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-250963314",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 250963314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDk2MzMxNA==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-02T09:54:39Z",
    "updated_at": "2016-10-02T09:54:39Z",
    "author_association": "MEMBER",
    "body": ">  The costs have been derived from an updated version of the calculation table used to generate the 1.0 gas costs: https://docs.google.com/spreadsheets/d/15wghZr-Z6sRSMdmRmhls9dVXTOpxKy8Y64oy9MvDZEQ/edit#gid=0 ; \n\nFor reference, this appears to be the original 1.0 gas costs table: https://docs.google.com/spreadsheets/d/1m89CVujrQe5LAFJ8-YAUCcNK950dUzMQPMJBxRtGCqs/edit#gid=0\n\n> We should do some benchmarks in both geth and parity to confirm this.\n\nThe tables above were presumably generated by benchmarks. Outlining the benchmarking methodology would help with measuring costs across different implementations.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/250963314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251034954",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-251034954",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 251034954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTAzNDk1NA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-03T06:25:24Z",
    "updated_at": "2016-10-03T06:25:24Z",
    "author_association": "MEMBER",
    "body": "Only one column of that table was generated by benchmarks: the computation table. The other columns are either estimates (as in the case of Merkle proofs) or common sense (1 byte = 1 byte, etc). In this EIP, it's only the other columns that are an issue.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251034954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251048501",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-251048501",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 251048501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTA0ODUwMQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-03T08:06:04Z",
    "updated_at": "2016-10-03T08:06:04Z",
    "author_association": "MEMBER",
    "body": "@chfast:\n\n> There is also an EIP #142 to lower SSTORE cost. Worth considering here?\n\nIt is not about lowering, but semantically separating the two costs it has: processing (CPU) and storage.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251048501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251347836",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-251347836",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 251347836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTM0NzgzNg==",
    "user": {
      "login": "chfast",
      "id": 573380,
      "node_id": "MDQ6VXNlcjU3MzM4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chfast",
      "html_url": "https://github.com/chfast",
      "followers_url": "https://api.github.com/users/chfast/followers",
      "following_url": "https://api.github.com/users/chfast/following{/other_user}",
      "gists_url": "https://api.github.com/users/chfast/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chfast/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chfast/subscriptions",
      "organizations_url": "https://api.github.com/users/chfast/orgs",
      "repos_url": "https://api.github.com/users/chfast/repos",
      "events_url": "https://api.github.com/users/chfast/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chfast/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-04T10:07:21Z",
    "updated_at": "2016-10-04T10:07:21Z",
    "author_association": "MEMBER",
    "body": "@axic, fine. But as I understand it, the side effect of the will be lowered gas cost of storage modification (non-zero value to non-zero value).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251347836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251388189",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-251388189",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 251388189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTM4ODE4OQ==",
    "user": {
      "login": "wanderer",
      "id": 158211,
      "node_id": "MDQ6VXNlcjE1ODIxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/158211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wanderer",
      "html_url": "https://github.com/wanderer",
      "followers_url": "https://api.github.com/users/wanderer/followers",
      "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
      "organizations_url": "https://api.github.com/users/wanderer/orgs",
      "repos_url": "https://api.github.com/users/wanderer/repos",
      "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wanderer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-04T13:31:34Z",
    "updated_at": "2016-10-04T13:31:34Z",
    "author_association": "MEMBER",
    "body": "how will backwards compatibility work for old contracts?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251388189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251805481",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-251805481",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 251805481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTgwNTQ4MQ==",
    "user": {
      "login": "CJentzsch",
      "id": 8452011,
      "node_id": "MDQ6VXNlcjg0NTIwMTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8452011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CJentzsch",
      "html_url": "https://github.com/CJentzsch",
      "followers_url": "https://api.github.com/users/CJentzsch/followers",
      "following_url": "https://api.github.com/users/CJentzsch/following{/other_user}",
      "gists_url": "https://api.github.com/users/CJentzsch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CJentzsch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CJentzsch/subscriptions",
      "organizations_url": "https://api.github.com/users/CJentzsch/orgs",
      "repos_url": "https://api.github.com/users/CJentzsch/repos",
      "events_url": "https://api.github.com/users/CJentzsch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CJentzsch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T21:30:41Z",
    "updated_at": "2016-10-05T21:30:41Z",
    "author_association": "NONE",
    "body": "Market for contract gasPrices:\n\nI agree that a market for opcodes gas prices doesn't seem to be feasible. But there could be a market for gasPrices of certain contracts.\nEach miner would benchmark his performance on certain contracts and derives an individual gasPrice for a certain codehash.\nThe benchmarking itself is a overhead cost which should be covered by a relatively high gasPrice for CREATE (opcode and transactions which create a contract).\n\nThe good thing with this solution is, that no protocol change would be needed, it's only an optimization for the miners. \nAlthough I still think an improvement on pricing of opcodes should be done asap.\n\nA problem is the use of CALL's, where the code executed can depend on input parameters or logic in the contract.\nThis can be mitigated by adding relatively high fixed number to the gasPrice for dynamic CALLs where the recipient can only be determined by actually running the code\nand use real benchmarking for static CALLs, where the recipient can be known by static analysis of the bytecode. This can be weighted by the amount of gas transferred in the CALL.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251805481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251832680",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-251832680",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 251832680,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTgzMjY4MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T23:54:21Z",
    "updated_at": "2016-10-05T23:54:21Z",
    "author_association": "MEMBER",
    "body": "> how will backwards compatibility work for old contracts?\n\nEIP 90 ensures calls won't get broken; otherwise, this is indeed a compatibility-breaking change, and that's how it must be: if old contracts were somehow grandfathered in, then they could be used for ongoing DoS attacks.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/251832680/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252040965",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-252040965",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 252040965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjA0MDk2NQ==",
    "user": {
      "login": "obscuren",
      "id": 6264126,
      "node_id": "MDQ6VXNlcjYyNjQxMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6264126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obscuren",
      "html_url": "https://github.com/obscuren",
      "followers_url": "https://api.github.com/users/obscuren/followers",
      "following_url": "https://api.github.com/users/obscuren/following{/other_user}",
      "gists_url": "https://api.github.com/users/obscuren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obscuren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obscuren/subscriptions",
      "organizations_url": "https://api.github.com/users/obscuren/orgs",
      "repos_url": "https://api.github.com/users/obscuren/repos",
      "events_url": "https://api.github.com/users/obscuren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obscuren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-06T18:00:51Z",
    "updated_at": "2016-10-06T18:00:51Z",
    "author_association": "MEMBER",
    "body": ":+1: for a gas-price-only HF. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252040965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252247839",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-252247839",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 252247839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjI0NzgzOQ==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-07T13:10:21Z",
    "updated_at": "2016-10-07T13:10:21Z",
    "author_association": "NONE",
    "body": "@CJentzsch couldn't price per codehash be used for miners as a way to censor some contract categories? I fear it could open up some DDoS possibilities like the soft fork attempt did. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252247839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252269267",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-252269267",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 252269267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjI2OTI2Nw==",
    "user": {
      "login": "CJentzsch",
      "id": 8452011,
      "node_id": "MDQ6VXNlcjg0NTIwMTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8452011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CJentzsch",
      "html_url": "https://github.com/CJentzsch",
      "followers_url": "https://api.github.com/users/CJentzsch/followers",
      "following_url": "https://api.github.com/users/CJentzsch/following{/other_user}",
      "gists_url": "https://api.github.com/users/CJentzsch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CJentzsch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CJentzsch/subscriptions",
      "organizations_url": "https://api.github.com/users/CJentzsch/orgs",
      "repos_url": "https://api.github.com/users/CJentzsch/repos",
      "events_url": "https://api.github.com/users/CJentzsch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CJentzsch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-07T14:36:17Z",
    "updated_at": "2016-10-07T14:36:17Z",
    "author_association": "NONE",
    "body": "@alexvandesande Miners could censor anything they want currently in there blocks, but yes, this would make it even easier for them. This suggestion is not a protocol update, and the DDoS possibilities for the soft fork were different. Since there miners did run code, without including the transaction and therefore they would not get any payment.\nMy suggestion would let miners run a benchmark on contracts _after_ they got created in a valid transaction. For transactions which create a contract they could set a higher gasPrice in order to pay for the extra computation which comes from benchmarking them. The benchmarking would be very limited, since dynamic calls, some execution branches and other scenarios are hard or impossible to benchmark in advance. For all those contracts one would use the standard (max) gasPrice, but for others (such as transfer of tokens and other highly used code executions) one could exactly know how long it takes to process them and charge accordingly.\nThis would lead to a fairer price model and most likely reduce the costs for often used code executions.\nBut having a correct pricing of opcodes is of course much better, but could be done in parallel.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252269267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252400339",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-252400339",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 252400339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQwMDMzOQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-08T03:42:54Z",
    "updated_at": "2016-10-08T03:42:54Z",
    "author_association": "MEMBER",
    "body": "Market-based gas cost schemes are cool, but I personally consider them too complex for a hard fork that should be scheduled to happen quickly so as to resolve present issues.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252400339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252410915",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-252410915",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 252410915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQxMDkxNQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-08T08:13:03Z",
    "updated_at": "2016-10-08T08:13:03Z",
    "author_association": "MEMBER",
    "body": "Version 2, I think, overestimates the cost of contiguous reads, and underestimates the cost of seeks. Version 1b seems like a good idea to me, and I very much like the manner in which it can limit call depth without resorting to a fixed recursion limit.\n\nRegarding backwards compatibility, it's important to note that Solidity does not currently cache storage reads in contract memory or on the stack - presumably because they're so cheap. There will be a lot of contracts out there that are suddenly a lot more expensive because of this.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252410915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252423637",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-252423637",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 252423637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQyMzYzNw==",
    "user": {
      "login": "CJentzsch",
      "id": 8452011,
      "node_id": "MDQ6VXNlcjg0NTIwMTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8452011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CJentzsch",
      "html_url": "https://github.com/CJentzsch",
      "followers_url": "https://api.github.com/users/CJentzsch/followers",
      "following_url": "https://api.github.com/users/CJentzsch/following{/other_user}",
      "gists_url": "https://api.github.com/users/CJentzsch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CJentzsch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CJentzsch/subscriptions",
      "organizations_url": "https://api.github.com/users/CJentzsch/orgs",
      "repos_url": "https://api.github.com/users/CJentzsch/repos",
      "events_url": "https://api.github.com/users/CJentzsch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CJentzsch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-08T13:05:57Z",
    "updated_at": "2016-10-08T13:05:57Z",
    "author_association": "NONE",
    "body": "@vbuterin I agree, my market-based gas costs suggestion does not need a protocol change and therefore does not need to be implemented with this hard fork. \n\nBut I would suggest to increase all gas costs by a multiplier between 100-10000.\nThis EIP is breaking backwards-compatibility since it increases gas costs. There will most likely be future price optimizations. By increasing the gas costs for opcodes by several magnitudes, the next price optimization only need to reduce prices instead of increasing them and therefore would not destroy backwards compatibility. And since only relative differences matter and not absolute numbers, I think it should not be a problem.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252423637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252464516",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-252464516",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 252464516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQ2NDUxNg==",
    "user": {
      "login": "koeppelmann",
      "id": 2594089,
      "node_id": "MDQ6VXNlcjI1OTQwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2594089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/koeppelmann",
      "html_url": "https://github.com/koeppelmann",
      "followers_url": "https://api.github.com/users/koeppelmann/followers",
      "following_url": "https://api.github.com/users/koeppelmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/koeppelmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/koeppelmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/koeppelmann/subscriptions",
      "organizations_url": "https://api.github.com/users/koeppelmann/orgs",
      "repos_url": "https://api.github.com/users/koeppelmann/repos",
      "events_url": "https://api.github.com/users/koeppelmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/koeppelmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-09T04:46:30Z",
    "updated_at": "2016-10-09T04:46:30Z",
    "author_association": "NONE",
    "body": "If we can't figure out a market based solution why not use the same voting mechanism we use for the block gas limit. Every miner can (optionally) vote gas costs for each opcode up or down in the range of +/- (1/1024) (rounded up the full integer obv.).\n\nI guess we all agree that hard coding the costs is always a guessing game. There is no way to know today wether in x years storage, bandwidth or computation will be the bottleneck.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252464516/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252472586",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-252472586",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 252472586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQ3MjU4Ng==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-09T08:26:47Z",
    "updated_at": "2016-10-09T08:26:47Z",
    "author_association": "MEMBER",
    "body": "> Every miner can (optionally) vote gas costs for each opcode up or down in the range of +/- (1/1024) (rounded up the full integer obv.).\n\nI'm concerned that that would facilitate new types of attack, particularly if most miners aren't voting. And it would certainly make optimising compilers a lot more complicated.\n\n> I guess we all agree that hard coding the costs is always a guessing game. There is no way to know today wether in x years storage, bandwidth or computation will be the bottleneck.\n\nThat doesn't make it a guessing game; it just means that it needs periodic revision.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/252472586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253170706",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253170706",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253170706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzE3MDcwNg==",
    "user": {
      "login": "chfast",
      "id": 573380,
      "node_id": "MDQ6VXNlcjU3MzM4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chfast",
      "html_url": "https://github.com/chfast",
      "followers_url": "https://api.github.com/users/chfast/followers",
      "following_url": "https://api.github.com/users/chfast/following{/other_user}",
      "gists_url": "https://api.github.com/users/chfast/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chfast/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chfast/subscriptions",
      "organizations_url": "https://api.github.com/users/chfast/orgs",
      "repos_url": "https://api.github.com/users/chfast/repos",
      "events_url": "https://api.github.com/users/chfast/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chfast/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-12T09:58:15Z",
    "updated_at": "2016-10-12T09:58:15Z",
    "author_association": "MEMBER",
    "body": "For 1b I would use the formula `g - (g // 64)` instead of `(g * 63) // 64` to avoid overflows in implementations. More on that in #114.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253170706/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253241855",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253241855",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253241855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzI0MTg1NQ==",
    "user": {
      "login": "jwest411",
      "id": 16709668,
      "node_id": "MDQ6VXNlcjE2NzA5NjY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16709668?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jwest411",
      "html_url": "https://github.com/jwest411",
      "followers_url": "https://api.github.com/users/jwest411/followers",
      "following_url": "https://api.github.com/users/jwest411/following{/other_user}",
      "gists_url": "https://api.github.com/users/jwest411/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jwest411/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jwest411/subscriptions",
      "organizations_url": "https://api.github.com/users/jwest411/orgs",
      "repos_url": "https://api.github.com/users/jwest411/repos",
      "events_url": "https://api.github.com/users/jwest411/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jwest411/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-12T15:10:23Z",
    "updated_at": "2016-10-12T15:10:23Z",
    "author_association": "NONE",
    "body": "rough idea here but have y'all thought about a market based idea where you set each value to vitaliks values as starting values then have gas prices change relative to how much opcode has been called vs historical avr? \n\nWay this could work is prices change based on how often an op code is called per ____ duration / a \"normal\" threshold. so if the network calls something 100x suicides a minute, over the past yr before the dosses we see 60x per minute, price of suicide = vitaliks value \\* 100/60 \\* some constant we set. So that way If codes are used less they go down in price too.\n\nWe can tweak this however you want. You can build a curve of rate of change use of opcodes, and have the \"expected\" amount be something you derive based on the rate of change use until now.  \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253241855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253322533",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253322533",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253322533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzMyMjUzMw==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-12T20:04:04Z",
    "updated_at": "2016-10-12T20:04:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "It would be good to penalty only the first time that you access an external contract but then low the gas costs in the subsequent calls. This would be more adapted to the cache behaviour of clients, and programs that use intensively a library or a related contract will not be affected so much.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253322533/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253354652",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253354652",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253354652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzM1NDY1Mg==",
    "user": {
      "login": "etscrivner",
      "id": 69561,
      "node_id": "MDQ6VXNlcjY5NTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/69561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etscrivner",
      "html_url": "https://github.com/etscrivner",
      "followers_url": "https://api.github.com/users/etscrivner/followers",
      "following_url": "https://api.github.com/users/etscrivner/following{/other_user}",
      "gists_url": "https://api.github.com/users/etscrivner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etscrivner/subscriptions",
      "organizations_url": "https://api.github.com/users/etscrivner/orgs",
      "repos_url": "https://api.github.com/users/etscrivner/repos",
      "events_url": "https://api.github.com/users/etscrivner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etscrivner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-12T22:10:22Z",
    "updated_at": "2016-10-12T22:10:22Z",
    "author_association": "NONE",
    "body": "Have we considered a mitigation strategy for possible replay attacks against Exchanges? \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253354652/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253377992",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253377992",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253377992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzM3Nzk5Mg==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T00:29:43Z",
    "updated_at": "2016-10-13T00:29:43Z",
    "author_association": "NONE",
    "body": "@etscrivner: It is highly unlikely that this fork would cause such issues.\n\nA replay attack is only meaningful if there is a user who is on one chain who does not wish to have his transaction copied on another chain. If the other chain is dead, then there's no need to worry about replay attacks.\n\nThis hardfork would create two chains, one of which (the old one) will be DoSable, will likely have zero first-party client support, and will very likely die immediately. Unless there is an organized effort to sustain as a separate blockchain, exchanges can simply upgrade their clients and move on. \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253377992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253391674",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253391674",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253391674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzM5MTY3NA==",
    "user": {
      "login": "etscrivner",
      "id": 69561,
      "node_id": "MDQ6VXNlcjY5NTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/69561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etscrivner",
      "html_url": "https://github.com/etscrivner",
      "followers_url": "https://api.github.com/users/etscrivner/followers",
      "following_url": "https://api.github.com/users/etscrivner/following{/other_user}",
      "gists_url": "https://api.github.com/users/etscrivner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etscrivner/subscriptions",
      "organizations_url": "https://api.github.com/users/etscrivner/orgs",
      "repos_url": "https://api.github.com/users/etscrivner/repos",
      "events_url": "https://api.github.com/users/etscrivner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etscrivner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T02:00:26Z",
    "updated_at": "2016-10-13T02:04:07Z",
    "author_association": "NONE",
    "body": "@Smithgift: Unfortunately, I don't think armchair reasoning about incentives has really been an accurate predictor of reality up to this point. So you'll have to excuse me if I don't immediately buy that. As a simple alternative, I'd propose that rather than continue relying on a failing strategy, we instead make transactions in this HF backwards incompatible to avoid replays? I'm open to alternatives, but this is one relatively simple way to fix the issue.\n\nRefusing to entertain the possibility of the old chain surviving is just negligent and puts exchanges and individual funds at risk.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253391674/reactions",
      "total_count": 9,
      "+1": 7,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253426142",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253426142",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253426142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzQyNjE0Mg==",
    "user": {
      "login": "aztriker",
      "id": 3814255,
      "node_id": "MDQ6VXNlcjM4MTQyNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3814255?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aztriker",
      "html_url": "https://github.com/aztriker",
      "followers_url": "https://api.github.com/users/aztriker/followers",
      "following_url": "https://api.github.com/users/aztriker/following{/other_user}",
      "gists_url": "https://api.github.com/users/aztriker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aztriker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aztriker/subscriptions",
      "organizations_url": "https://api.github.com/users/aztriker/orgs",
      "repos_url": "https://api.github.com/users/aztriker/repos",
      "events_url": "https://api.github.com/users/aztriker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aztriker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T06:32:10Z",
    "updated_at": "2016-10-13T06:32:10Z",
    "author_association": "NONE",
    "body": "food for thought  -- Survival of intent.  The intent of an attack may never be truly known.  If the network can be defined as to permitted component behaviour - based on underlying component command level, individual network component level responsibilities - then one might develop a offense and defense with code appropriate to the need.    All network levels cascade against attacks that are not properly dealt with by the assigned code level.  irrespective of intent\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253426142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253560364",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253560364",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253560364,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzU2MDM2NA==",
    "user": {
      "login": "pdaian",
      "id": 565776,
      "node_id": "MDQ6VXNlcjU2NTc3Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/565776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pdaian",
      "html_url": "https://github.com/pdaian",
      "followers_url": "https://api.github.com/users/pdaian/followers",
      "following_url": "https://api.github.com/users/pdaian/following{/other_user}",
      "gists_url": "https://api.github.com/users/pdaian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pdaian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pdaian/subscriptions",
      "organizations_url": "https://api.github.com/users/pdaian/orgs",
      "repos_url": "https://api.github.com/users/pdaian/repos",
      "events_url": "https://api.github.com/users/pdaian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pdaian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T16:09:59Z",
    "updated_at": "2016-10-13T16:53:12Z",
    "author_association": "MEMBER",
    "body": "I actually agree with @etscrivner.  This is clearly a motivated attacker seeking widespread system damage.  ~~If they can convince any two exchanges to run different fork versions (1b vs 1c, or both on the same exchange, or similar) then fork each to their own chains through a suicide, the result will be messy.~~\n\n~~Imagine someone like Coinbase adopting support for 1b, then getting 1c tokens stolen from them which then plummet to 0.  The attacker is clearly well resourced and savvy; if they manage to prop up 1c they can then claim Coinbase's liability for 1c losses.~~\n\n~~This is either going to require perfect communication with large stakeholders or should include replay protection.~~\n\nI wouldn't lean on the change being non-controversial because the attacker has a clear incentive and quite possibly a significant ability to create controversy.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253560364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253566764",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253566764",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253566764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzU2Njc2NA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T16:33:58Z",
    "updated_at": "2016-10-13T16:33:58Z",
    "author_association": "MEMBER",
    "body": "@pdaian Nobody will be releasing clients that support different _versions_ of the hard fork. The choice for users will be between running an updated client or not.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253566764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253567590",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253567590",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253567590,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzU2NzU5MA==",
    "user": {
      "login": "pdaian",
      "id": 565776,
      "node_id": "MDQ6VXNlcjU2NTc3Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/565776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pdaian",
      "html_url": "https://github.com/pdaian",
      "followers_url": "https://api.github.com/users/pdaian/followers",
      "following_url": "https://api.github.com/users/pdaian/following{/other_user}",
      "gists_url": "https://api.github.com/users/pdaian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pdaian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pdaian/subscriptions",
      "organizations_url": "https://api.github.com/users/pdaian/orgs",
      "repos_url": "https://api.github.com/users/pdaian/repos",
      "events_url": "https://api.github.com/users/pdaian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pdaian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T16:36:49Z",
    "updated_at": "2016-10-13T16:48:46Z",
    "author_association": "MEMBER",
    "body": "@Arachnid that was not my understanding from reading https://github.com/ethereum/go-ethereum/pull/3111 and https://github.com/ethcore/parity/pull/2591.  If my understanding is out of date I apologize.  **Edit** just read the code again, it seems like both implement 1c.  My bad, plz ignore :).\n\nAlthough I do think for the future the best approach is to offer all plausibly optimal forks with well-versioned replay protection and let the market decide, offering only one option at a time seems fine until such the supporting infrastructure exists to do that smoothly.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253567590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253567730",
    "html_url": "https://github.com/ethereum/EIPs/issues/150#issuecomment-253567730",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/150",
    "id": 253567730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzU2NzczMA==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-13T16:37:21Z",
    "updated_at": "2016-10-13T16:37:21Z",
    "author_association": "NONE",
    "body": "I admit I did believe that the Classic chain would be irrelevant, and it was not. I continue to find it unlikely that there will be a surviving alternate chain from this fork.\n\nSuppose we consider backwards incompatibility anyway.\n\nSpeaking in complexity terms, setting gas costs to different numbers is trivial. Changing gas call semantics is less trivial. Making transactions backward-incompatible is non-trivial. If you head over to the Classic community, where they are actively working on replay prevention, you'll see that there have been multiple proposals discussed. As far as I am aware, they have yet to decide upon and implement one. And this is for a good reason: it's a very large change and shouldn't be rushed.\n\nThis is, ultimately, a quick fix. If we are going to wait however many weeks for a mutually acceptable replay prevention system--a thing I am indeed in favor of--we are going to be waiting those weeks with the DoS vulnerabilities. I don't think this is the time for that kind of change, when the fix is needed _now._ \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/253567730/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
