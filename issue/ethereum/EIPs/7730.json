{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/7730",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/7730/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/7730/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/7730/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/7730",
  "id": 1901516429,
  "node_id": "I_kwDOAq426M5xVtaN",
  "number": 7730,
  "title": "Reclaiming of ether in common classes of stuck accounts",
  "user": {
    "login": "andygilb",
    "id": 145385909,
    "node_id": "U_kgDOCKpptQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/145385909?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/andygilb",
    "html_url": "https://github.com/andygilb",
    "followers_url": "https://api.github.com/users/andygilb/followers",
    "following_url": "https://api.github.com/users/andygilb/following{/other_user}",
    "gists_url": "https://api.github.com/users/andygilb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/andygilb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/andygilb/subscriptions",
    "organizations_url": "https://api.github.com/users/andygilb/orgs",
    "repos_url": "https://api.github.com/users/andygilb/repos",
    "events_url": "https://api.github.com/users/andygilb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/andygilb/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2023-09-18T18:30:40Z",
  "updated_at": "2023-09-18T18:37:59Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Specification (v1)\r\nThe below is only usable between blocks FORK_BLKNUM and FORK_BLKNUM + EFFECTIVE_DURATION (both TBA).\r\n\r\nIf the v value of a signature is (strictly) greater than 1024, then calculate the sender as follows:\r\n\r\nLet s be the sender computed according to the normal algorithm, using 27 as the v value if the provided v is odd, and 28 if the provided v is even.\r\nLet the actual sender be the address that a contract would be created at if its sender is s and the contract creation nonce is floor((v - 1025) / 2).\r\nTransactions with v values strictly greater than 1024 are only valid if the sender account is nonexistent or its code is empty.\r\n\r\nIf the v value of a signature is 1023 or 1024, then calculate the sender as follows:\r\n\r\nLet P be the public key computed according to the normal algorithm, in the 64-byte packed form that is normally hashed to determine the sender address, using 27 as the v value if the provided v is odd, and 28 if the provided v is even.\r\nLet the actual sender be the last 20 bytes of the sha3 of the lowercase non-prefixed hex encoded form of P instead of the binary raw P itself.\r\nSpecification (v2)\r\nCreate a solidity contract with the following functions:\r\n\r\ndeclareEmptyContract(index): computes rlp.encode([msg.sender, index]); if there is a contract at this address with ether and no code, then the contract saves a record that this contract has been checked, and sends an equal amount of \"future ether\" (an ERC20 token) at that account.\r\ndeclareLowercaseHexAddress(pubkey): checks sha3(pubkey) % 2**160 == msg.sender; then checks that sha3(pubkey.encode('hex')) % 2**160 has ether; if it does, then the contract saves a record that this contract has been checked, and sends an equal amount of \"future ether\" (an ERC20 token) at that account\r\nwithdraw(): deletes the msg.sender's future ether, and sends it an equivalent amount of ether.\r\nThe hard fork would increase the future ether contract's balance by an amount equal to the total quantity of extant future ether.\r\n\r\nSpecification (v3)\r\nFollow v2, but distribute the future ether on a Casper testnet. Then, later have a single step that converts both Casper ether and ethereum 1.0 ether into ether as part of the Serenity hardfork.\r\n\r\nRationale\r\nThis allows for users with ether or other assets in common classes of \"stuck\" accounts to withdraw their assets. The first case covers contracts that are accidentally created with no code, as well as some losses due to replay attacks where a contract was created on ETC, funds sent on ETH but the contract not created on ETH; the second case covers losses due to an old ethereum javascript library that incorrectly computed ethereum addresses. Note that in all cases, the \"rightful owner\" of the assets is obvious and mathematically provable, and no user is being deprived of any assets, and this proposal provides no explicit favor to any single account, user or application.\r\n\r\nIt is understood that there may be a risk that this proposal will be viewed controversially as it is in some sense a \"rescue\" rather than a \"technical improvement\", even though it is arguably much less intrusive than previous such proposals for the reasons outlined above; the proposal is created in order to allow community discussion and debate and does not signify full endorsement.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/7730/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/7730/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1724167705",
    "html_url": "https://github.com/ethereum/EIPs/issues/7730#issuecomment-1724167705",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/7730",
    "id": 1724167705,
    "node_id": "IC_kwDOAq426M5mxLYZ",
    "user": {
      "login": "andygilb",
      "id": 145385909,
      "node_id": "U_kgDOCKpptQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/145385909?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andygilb",
      "html_url": "https://github.com/andygilb",
      "followers_url": "https://api.github.com/users/andygilb/followers",
      "following_url": "https://api.github.com/users/andygilb/following{/other_user}",
      "gists_url": "https://api.github.com/users/andygilb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andygilb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andygilb/subscriptions",
      "organizations_url": "https://api.github.com/users/andygilb/orgs",
      "repos_url": "https://api.github.com/users/andygilb/repos",
      "events_url": "https://api.github.com/users/andygilb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andygilb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-09-18T18:37:59Z",
    "updated_at": "2023-09-18T18:37:59Z",
    "author_association": "NONE",
    "body": "I created what I thought was a complete contract and funded it with some eth, only to find out later the contract had no functions or code, how do I get my eth out of this now (now classed as an EOW) Thanks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1724167705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
