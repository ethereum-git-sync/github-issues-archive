{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1132",
  "id": 328772547,
  "node_id": "MDU6SXNzdWUzMjg3NzI1NDc=",
  "number": 1132,
  "title": "Extending ERC20 with token locking capability",
  "user": {
    "login": "nitika-goel",
    "id": 33280614,
    "node_id": "MDQ6VXNlcjMzMjgwNjE0",
    "avatar_url": "https://avatars.githubusercontent.com/u/33280614?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nitika-goel",
    "html_url": "https://github.com/nitika-goel",
    "followers_url": "https://api.github.com/users/nitika-goel/followers",
    "following_url": "https://api.github.com/users/nitika-goel/following{/other_user}",
    "gists_url": "https://api.github.com/users/nitika-goel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nitika-goel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nitika-goel/subscriptions",
    "organizations_url": "https://api.github.com/users/nitika-goel/orgs",
    "repos_url": "https://api.github.com/users/nitika-goel/repos",
    "events_url": "https://api.github.com/users/nitika-goel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nitika-goel/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 20,
  "created_at": "2018-06-02T19:56:42Z",
  "updated_at": "2021-12-19T06:13:29Z",
  "closed_at": "2021-12-19T06:13:29Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\nEIP: 1132\r\nTitle: Extending ERC20 with token locking capability\r\nAuthor: nitika-goel <nitika@govblocks.io>\r\nType: Standards Track\r\nCategory: ERC\r\nStatus: Draft\r\nCreated: 2018-06-03\r\n```\r\n\r\n## Simple Summary\r\n\r\nAn extension to the ERC20 standard with methods for time-locking of tokens within a contract.\r\n\r\n## Abstract\r\n\r\nThis proposal provides basic functionality to time-lock tokens within an ERC20 smart contract for multiple utilities without the need of transferring tokens to an external escrow smart contract.  It also allows fetching balance of locked and transferable tokens. \r\n\r\nTime-locking can also be achieved via staking (#900), but that requires transfer of tokens to an escrow contract / stake manager, resulting in the following six concerns: \r\n\r\n1. additional trust on escrow contract / stake manager \r\n2. additional approval process for token transfer\r\n3. increased ops costs due to gas requirements in transfers\r\n4. tough user experience as the user needs to claim the amount back from external escrows \r\n5. inability for the user to track their true token balance / token activity \r\n6. inability for the user to utilize their locked tokens within the token ecosystem. \r\n\r\n## Motivation\r\n\r\ndApps often require tokens to be time-locked against transfers for letting members 1) adhere to vesting schedules and 2) show skin in the game to comply with the underlying business process. I realized this need while building Nexus Mutual and GovBlocks. \r\n\r\nIn [Nexus Mutual](https://nexusmutual.io), claim assessors are required to lock their tokens before passing a vote for claims assessment. This is important as it ensures assessors’ skin in the game. The need here was that once a claim assessor locks his tokens for ‘n’ days, he should be able to cast multiple votes during that period of ‘n’ days, which is not feasible with staking mechanism.  There are other scenarios like skills/identity verification or participation in gamified token curated registries where time-locked tokens are required as well. \r\n\r\nIn [GovBlocks](https://govblocks.io), I wanted to allow dApps to lock member tokens for governance, while still allowing members to use those locked tokens for other activities within the dApp business. This is also the case with DGX governance model where they’ve proposed quarterly token locking for participation in governance activities of DGX. \r\n\r\nIn addition to locking functionality, I have proposed a `Lock()` and `Unlock()` event, just like the `Transfer()` event , to track token lock and unlock status. From token holder’s perspective, it gets tough to manage token holdings if certain tokens are transferred to another account for locking, because whenever `balanceOf()` queries are triggered on token holder’s account – the result does not include locked tokens. A `totalBalanceOf()` function intends to solve this problem.  \r\n\r\nThe intention with this proposal is to enhance the ERC20 standard with token-locking capability so that dApps can time-lock tokens of the members without having to transfer tokens to an escrow / stake manager and at the same time allow members to use the locked tokens for multiple utilities. \r\n\r\n## Specification\r\n\r\nI’ve extended the ERC20 interface with the following enhancements:\r\n\r\n### Locking of tokens\r\n```\r\n/**\r\n  * @dev Locks a specified amount of tokens against an address,\r\n  *      for a specified reason and time\r\n  * @param _reason The reason to lock tokens\r\n  * @param _amount Number of tokens to be locked\r\n  * @param _time Lock time in seconds\r\n  */\r\nfunction lock(bytes32 _reason, uint256 _amount, uint256 _time) public returns (bool)\r\n```\r\n\r\n### Fetching number of tokens locked under each utility\r\n```\r\n/**\r\n  * @dev Returns tokens locked for a specified address for a\r\n  *      specified reason\r\n  *\r\n  * @param _of The address whose tokens are locked\r\n  * @param _reason The reason to query the lock tokens for\r\n  */\r\n   tokensLocked(address _of, bytes32 _reason) view returns (uint256 amount)\r\n```\r\n\r\n### Fetching number of tokens locked under each utility at a future timestamp\r\n```\r\n/**\r\n  * @dev Returns tokens locked for a specified address for a\r\n  *      specified reason at a specific time\r\n  *\r\n  * @param _of The address whose tokens are locked\r\n  * @param _reason The reason to query the lock tokens for\r\n  * @param _time The timestamp to query the lock tokens for\r\n  */\r\n  function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time) public view returns (uint256 amount)\r\n```\r\n\r\n### Fetching number of tokens held by an address\r\n```\r\n/**\r\n  * @dev @dev Returns total tokens held by an address (locked + transferable)\r\n  * @param _of The address to query the total balance of\r\n  */\r\nfunction totalBalanceOf(address _of)  view returns (uint256 amount)\r\n```\r\n\r\n### Extending lock period\r\n```\r\n/**\r\n  * @dev Extends lock for a specified reason and time\r\n  * @param _reason The reason to lock tokens\r\n  * @param _time Lock extension time in seconds\r\n  */\r\n  function extendLock(bytes32 _reason, uint256 _time) public returns (bool)\r\n```\r\n\r\n### Increasing number of tokens locked\r\n```\r\n/**\r\n  * @dev Increase number of tokens locked for a specified reason\r\n  * @param _reason The reason to lock tokens\r\n  * @param _amount Number of tokens to be increased\r\n  */\r\n  function increaseLockAmount(bytes32 _reason, uint256 _amount) public returns (bool)\r\n```\r\n### Fetching number of unlockable tokens under each utility\r\n```\r\n/**\r\n  * @dev Returns unlockable tokens for a specified address for a specified reason\r\n  * @param _of The address to query the the unlockable token count of\r\n  * @param _reason The reason to query the unlockable tokens for\r\n  */\r\n  function tokensUnlockable(address _of, bytes32 _reason) public view returns (uint256 amount)\r\n ```    \r\n### Fetching number of unlockable tokens\r\n```\r\n/**\r\n  * @dev Gets the unlockable tokens of a specified address\r\n  * @param _of The address to query the the unlockable token count of\r\n  */\r\n  function getUnlockableTokens(address _of) public view returns (uint256 unlockableTokens)\r\n```\r\n### Unlocking tokens\r\n```\r\n/**\r\n  * @dev Unlocks the unlockable tokens of a specified address\r\n  * @param _of Address of user, claiming back unlockable tokens\r\n  */\r\n  function unlock(address _of) public returns (uint256 unlockableTokens)\r\n```\r\n\r\n### Lock event recorded in the token contract\r\n`event Lock(address indexed _of, uint256 indexed _reason, uint256 _amount, uint256 _validity)`\r\n\r\n### Unlock event recorded in the token contract\r\n`event Unlock(address indexed _of, uint256 indexed _reason, uint256 _amount)`\r\n\r\n\r\n## Implementation\r\n\r\n- Complete implementation available at https://github.com/nitika-goel/lockable-token\r\n- [GovBlocks](https://govblocks.io) Project specific implementation available at https://github.com/somish/govblocks-protocol/blob/Locking/contracts/GBTStandardToken.sol",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1132/reactions",
    "total_count": 9,
    "+1": 9,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/394144048",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-394144048",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 394144048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDE0NDA0OA==",
    "user": {
      "login": "davesag",
      "id": 387098,
      "node_id": "MDQ6VXNlcjM4NzA5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/387098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesag",
      "html_url": "https://github.com/davesag",
      "followers_url": "https://api.github.com/users/davesag/followers",
      "following_url": "https://api.github.com/users/davesag/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesag/subscriptions",
      "organizations_url": "https://api.github.com/users/davesag/orgs",
      "repos_url": "https://api.github.com/users/davesag/repos",
      "events_url": "https://api.github.com/users/davesag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-03T07:47:22Z",
    "updated_at": "2018-06-03T07:47:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nitika-goel I like this.  I was just about to sit down and write an extension to [ERC-884](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-884.md) to add time-locking in order to introduce Reg-D compatibility.  Your proposal handles this quite elegantly.\r\n\r\nIn your reference implementation I don't understand line 67. I would have expected the 'purpose' to be a bytes32 or string to provide an human readable reason for locking the token.  But you have defined `_for` as an int and then explicitly require that int to be less than a contact-wide `locked_for` property.  I'm not clear on the rationale for that.\r\n\r\nhttps://github.com/nitika-goel/lockable-token/blob/master/contracts/LockableToken.sol#L67\r\n\r\n    57 /**\r\n    58  * @dev Locks a specified amount of tokens against an address, for a specified purpose and time\r\n    59  * @param _for The purpose to lock tokens \r\n    60  * @param _amount Number of tokens to be locked\r\n    61  * @param _time Lock time in seconds\r\n    62  */\r\n    63 function lock(uint256 _for,uint256 _amount,uint256 _time)\r\n    64 {\r\n    65  uint256 validUntil=block.timestamp.add(_time);\r\n    66  require(_amount <= transferableBalanceOf(msg.sender));\r\n    67  require(_for<locked_for);\r\n    68  locked[msg.sender][_for].push(lockToken(_amount,validUntil));\r\n    69  Lock(msg.sender,_for,_amount,validUntil);\r\n    70   \r\n    71 }\r\n\r\nIt would also help if the reference implementation had some unit-tests that demonstrate various usage scenarios.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/394144048/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/394290166",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-394290166",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 394290166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDI5MDE2Ng==",
    "user": {
      "login": "nitika-goel",
      "id": 33280614,
      "node_id": "MDQ6VXNlcjMzMjgwNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/33280614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nitika-goel",
      "html_url": "https://github.com/nitika-goel",
      "followers_url": "https://api.github.com/users/nitika-goel/followers",
      "following_url": "https://api.github.com/users/nitika-goel/following{/other_user}",
      "gists_url": "https://api.github.com/users/nitika-goel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nitika-goel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nitika-goel/subscriptions",
      "organizations_url": "https://api.github.com/users/nitika-goel/orgs",
      "repos_url": "https://api.github.com/users/nitika-goel/repos",
      "events_url": "https://api.github.com/users/nitika-goel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nitika-goel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-04T09:22:16Z",
    "updated_at": "2018-06-04T09:22:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for your views @davesag.\r\n\r\n### Explaining line 67\r\nThe purpose of line 67 in implementation sample is to ensure that tokens are only locked for utilities allowed by a dApp. The variable `locked_for` is the number of utilities for which a token can be locked (apologies for the bad variable naming). So for example, if a dApp allows 2 utilities i.e claims assessment and governance, then `locked_for` = 2 and at all times `_for` should be less than 2, because if `_for >= 2` then those tokens would be shown as locked in `tokensLocked()`. At the same time these tokens shall not be counted in `transferableBalanceOf()` and hence would be available for transfer, resulting in a chaos.\r\n\r\n### Implementing bytes32 for `_for`\r\nThanks for pointing that out. Originally, even I started writing the interface with `_for` as a `bytes32`, but the implementation wasn't elegant enough due to complexity around checking valid utility.\r\n\r\nHowever, I came up with a better idea and have implemented `_for` as `bytes32`, branched at https://github.com/nitika-goel/lockable-token. The new contract is also available at `0xe4c32329de48334c8b635ccb6c4cf1fdbb7d1829` on Kovan testnet. Let me know what you think.\r\n\r\n### Test Cases \r\nWill write test cases and submit soon on repo.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/394290166/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/394292094",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-394292094",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 394292094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDI5MjA5NA==",
    "user": {
      "login": "davesag",
      "id": 387098,
      "node_id": "MDQ6VXNlcjM4NzA5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/387098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesag",
      "html_url": "https://github.com/davesag",
      "followers_url": "https://api.github.com/users/davesag/followers",
      "following_url": "https://api.github.com/users/davesag/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesag/subscriptions",
      "organizations_url": "https://api.github.com/users/davesag/orgs",
      "repos_url": "https://api.github.com/users/davesag/repos",
      "events_url": "https://api.github.com/users/davesag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-04T09:28:50Z",
    "updated_at": "2018-06-04T09:28:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @nitika-goel — I've submitted a PR for you for your reference implementation with some general code cleanups and some tests, hope you find it useful. I think the `bytes32` idea works better.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/394292094/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/396183653",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-396183653",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 396183653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjE4MzY1Mw==",
    "user": {
      "login": "thekrol01",
      "id": 34987076,
      "node_id": "MDQ6VXNlcjM0OTg3MDc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/34987076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thekrol01",
      "html_url": "https://github.com/thekrol01",
      "followers_url": "https://api.github.com/users/thekrol01/followers",
      "following_url": "https://api.github.com/users/thekrol01/following{/other_user}",
      "gists_url": "https://api.github.com/users/thekrol01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thekrol01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thekrol01/subscriptions",
      "organizations_url": "https://api.github.com/users/thekrol01/orgs",
      "repos_url": "https://api.github.com/users/thekrol01/repos",
      "events_url": "https://api.github.com/users/thekrol01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thekrol01/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-11T09:38:24Z",
    "updated_at": "2018-06-11T18:41:29Z",
    "author_association": "NONE",
    "body": "Hi @nitika-goel, \r\nGreat proposal. Though I am a bit hesitant with altering the ERC20/ERC223 standard functions.\r\nBut If you don't want to escrow the tokens this could be the way to go.\r\nI have not tested this but doesn't this make a standard transfer much more expensive, because every transfer is tested against the available balance for transfer. Therefore splitting the lock function from the not locked transfers could be cheaper for the regular transaction which don' t have a locked balance. \r\nWhy not ' transfer'  the locked tokens to another balance (mapping)  within the token contract where only the holder of the locked tokens has control of.  In that way you can leave the current transfer as it is, because the locked tokens are extracted from the token balance and added to the locked balance. Because the user is in complete control the trust issue is not relevant anymore. When I look at your concerns only point 4 will still be there in some extend, but because of the complete control I wonder if the trust issue will stil be there.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/396183653/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413017617",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-413017617",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 413017617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzAxNzYxNw==",
    "user": {
      "login": "vongohren",
      "id": 1012055,
      "node_id": "MDQ6VXNlcjEwMTIwNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1012055?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vongohren",
      "html_url": "https://github.com/vongohren",
      "followers_url": "https://api.github.com/users/vongohren/followers",
      "following_url": "https://api.github.com/users/vongohren/following{/other_user}",
      "gists_url": "https://api.github.com/users/vongohren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vongohren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vongohren/subscriptions",
      "organizations_url": "https://api.github.com/users/vongohren/orgs",
      "repos_url": "https://api.github.com/users/vongohren/repos",
      "events_url": "https://api.github.com/users/vongohren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vongohren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T21:11:43Z",
    "updated_at": "2018-08-14T21:11:43Z",
    "author_association": "NONE",
    "body": "Great proposal, was in any more feedback on this @nitika-goel ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413017617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413756319",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-413756319",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 413756319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzc1NjMxOQ==",
    "user": {
      "login": "maxsam4",
      "id": 7436022,
      "node_id": "MDQ6VXNlcjc0MzYwMjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7436022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxsam4",
      "html_url": "https://github.com/maxsam4",
      "followers_url": "https://api.github.com/users/maxsam4/followers",
      "following_url": "https://api.github.com/users/maxsam4/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxsam4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxsam4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxsam4/subscriptions",
      "organizations_url": "https://api.github.com/users/maxsam4/orgs",
      "repos_url": "https://api.github.com/users/maxsam4/repos",
      "events_url": "https://api.github.com/users/maxsam4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxsam4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T04:46:32Z",
    "updated_at": "2018-09-07T11:29:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with @thekrol01 that we should refrain from editing the standard function. https://github.com/nitika-goel/lockable-token/pull/5 is an updated implementation which kinda works as an interface without touching the standard functions.\r\n\r\nAn example of a token that implements this is https://github.com/somish/govblocks-protocol/blob/master/contracts/GBTStandardToken.sol\r\n\r\nWe can't expect the existing tokens to use this interface so I believe a proxy like token will be helpful which will transfer the \"non-lockable\" token from the user to itself when the user locks the token and transfer back the token to the user once they claim the token. A sample implementation can be found at \r\nhttps://github.com/somish/govblocks-protocol/blob/master/contracts/TokenProxy.sol",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413756319/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413786088",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-413786088",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 413786088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzc4NjA4OA==",
    "user": {
      "login": "davesag",
      "id": 387098,
      "node_id": "MDQ6VXNlcjM4NzA5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/387098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesag",
      "html_url": "https://github.com/davesag",
      "followers_url": "https://api.github.com/users/davesag/followers",
      "following_url": "https://api.github.com/users/davesag/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesag/subscriptions",
      "organizations_url": "https://api.github.com/users/davesag/orgs",
      "repos_url": "https://api.github.com/users/davesag/repos",
      "events_url": "https://api.github.com/users/davesag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T07:46:13Z",
    "updated_at": "2018-08-17T07:46:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nitika-goel You've since addressed the issues cited above.  Maybe update this Issue with the latest interface and raise a PR in regards to this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413786088/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413801958",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-413801958",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 413801958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzgwMTk1OA==",
    "user": {
      "login": "nitika-goel",
      "id": 33280614,
      "node_id": "MDQ6VXNlcjMzMjgwNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/33280614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nitika-goel",
      "html_url": "https://github.com/nitika-goel",
      "followers_url": "https://api.github.com/users/nitika-goel/followers",
      "following_url": "https://api.github.com/users/nitika-goel/following{/other_user}",
      "gists_url": "https://api.github.com/users/nitika-goel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nitika-goel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nitika-goel/subscriptions",
      "organizations_url": "https://api.github.com/users/nitika-goel/orgs",
      "repos_url": "https://api.github.com/users/nitika-goel/repos",
      "events_url": "https://api.github.com/users/nitika-goel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nitika-goel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T08:54:17Z",
    "updated_at": "2018-08-17T08:54:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks all of you. I've now updated the code with ideas from @davesag, @thekrol01 and @maxsam4! Changed the interface above to make sure ERC20 functions aren't changed. New functions are added to introduce manual unlocking of tokens - it kind of adds an extra step, but probably worth it. Submitting a PR now. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413801958/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/438153340",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-438153340",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 438153340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODE1MzM0MA==",
    "user": {
      "login": "m888m",
      "id": 13195389,
      "node_id": "MDQ6VXNlcjEzMTk1Mzg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13195389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m888m",
      "html_url": "https://github.com/m888m",
      "followers_url": "https://api.github.com/users/m888m/followers",
      "following_url": "https://api.github.com/users/m888m/following{/other_user}",
      "gists_url": "https://api.github.com/users/m888m/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m888m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m888m/subscriptions",
      "organizations_url": "https://api.github.com/users/m888m/orgs",
      "repos_url": "https://api.github.com/users/m888m/repos",
      "events_url": "https://api.github.com/users/m888m/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m888m/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T06:31:41Z",
    "updated_at": "2018-11-13T06:31:41Z",
    "author_association": "NONE",
    "body": "Great initiative, and thank you all for the work!\r\n\r\nSuggestion:\r\nTo keep the interface maximum compatible, don't specify \r\n\r\n- lockReason\r\n- lockToken\r\n- locked\r\n\r\nin the interface, but keep this for the actual contracts that implement the interface.\r\n\r\nReason: We should not presume the inherent data structures of the implementing contracts. E.g., a contract that uses a flat file data storage architecture will not implement these variables in the same way.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/438153340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439596731",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-439596731",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 439596731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU5NjczMQ==",
    "user": {
      "login": "m888m",
      "id": 13195389,
      "node_id": "MDQ6VXNlcjEzMTk1Mzg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13195389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m888m",
      "html_url": "https://github.com/m888m",
      "followers_url": "https://api.github.com/users/m888m/followers",
      "following_url": "https://api.github.com/users/m888m/following{/other_user}",
      "gists_url": "https://api.github.com/users/m888m/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m888m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m888m/subscriptions",
      "organizations_url": "https://api.github.com/users/m888m/orgs",
      "repos_url": "https://api.github.com/users/m888m/repos",
      "events_url": "https://api.github.com/users/m888m/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m888m/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T07:44:18Z",
    "updated_at": "2018-11-17T07:44:18Z",
    "author_association": "NONE",
    "body": "I've started to implement the interface in our project.\r\n\r\nObservation:\r\n\r\nThe interface is way too specific imo.\r\nMany of the functions defined are actually aggregations of basic functions.\r\nThis should not be implemented in a library, but in the business logic contract that implements the interface.\r\n\r\nInterfaces should be designed to reflect the smallest common denominator.\r\nHence my suggestion is to radically slim down the interface, and to really focus on the core (base) functionalities that exist in EVERY time locked token.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439596731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439605640",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-439605640",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 439605640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTYwNTY0MA==",
    "user": {
      "login": "nitika-goel",
      "id": 33280614,
      "node_id": "MDQ6VXNlcjMzMjgwNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/33280614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nitika-goel",
      "html_url": "https://github.com/nitika-goel",
      "followers_url": "https://api.github.com/users/nitika-goel/followers",
      "following_url": "https://api.github.com/users/nitika-goel/following{/other_user}",
      "gists_url": "https://api.github.com/users/nitika-goel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nitika-goel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nitika-goel/subscriptions",
      "organizations_url": "https://api.github.com/users/nitika-goel/orgs",
      "repos_url": "https://api.github.com/users/nitika-goel/repos",
      "events_url": "https://api.github.com/users/nitika-goel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nitika-goel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T10:12:18Z",
    "updated_at": "2018-11-17T10:12:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for your feedback @m888m. The interface targets interoperability of tokens and reusability within the same application, for multiple utilities. Imagine a stable coin implements this interface, all users using this stable token across different applications can lock their tokens within the same contract with different reasons. A user can then, simply see in 1 contract, all the tokens locked up under different applications. Similarly, as we see more utility tokens coming up, imo, the same token shall be used for different purposes and it will be really useful to lock them in a single contract. I have seen that personally for 2 of my projects.\r\nAll data structures you mentioned are not intended to be a part of the interface, and are not mentioned in the [EIP](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1132.md). I think ERC1132.sol in the  in the impelementation repo is causing the confusion. Happy to make changes there.\r\n\r\nThe functions defined in the interface are those that shall be needed to facilitate interoperability and reusability. If an application has a single lock reason, it can always implement lock under 1 default reason. Unable to understand which functions are you referring to as aggregations of other functions. Feedback is always welcome! ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/439605640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/533072595",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-533072595",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 533072595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzA3MjU5NQ==",
    "user": {
      "login": "ray-hash",
      "id": 7157341,
      "node_id": "MDQ6VXNlcjcxNTczNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7157341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ray-hash",
      "html_url": "https://github.com/ray-hash",
      "followers_url": "https://api.github.com/users/ray-hash/followers",
      "following_url": "https://api.github.com/users/ray-hash/following{/other_user}",
      "gists_url": "https://api.github.com/users/ray-hash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ray-hash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ray-hash/subscriptions",
      "organizations_url": "https://api.github.com/users/ray-hash/orgs",
      "repos_url": "https://api.github.com/users/ray-hash/repos",
      "events_url": "https://api.github.com/users/ray-hash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ray-hash/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-19T10:39:21Z",
    "updated_at": "2019-09-19T10:39:21Z",
    "author_association": "NONE",
    "body": "```\r\n    function unlock(address _of)\r\n        public\r\n        returns (uint256 unlockableTokens)\r\n    {\r\n        uint256 lockedTokens;\r\n\r\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\r\n            lockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\r\n            if (lockedTokens > 0) {\r\n                unlockableTokens = unlockableTokens.add(lockedTokens);\r\n                locked[_of][lockReason[_of][i]].claimed = true;\r\n                emit Unlock(_of, lockReason[_of][i], lockedTokens);\r\n            }\r\n        }  \r\n\r\n        if(unlockableTokens > 0)\r\n        \tthis.transfer(_of, unlockableTokens);\r\n    }\r\n```\r\n\r\nUnlock may not be possible due to loop attack. fee limit exceeded.\r\nNeed a defense.\r\n\r\n```\r\n    function unlockAll(address _of)\r\n        public\r\n        returns (uint256 unlockableTokens)\r\n    {\r\n        uint256 lockedTokens;\r\n\r\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\r\n            lockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\r\n            if (lockedTokens > 0) {\r\n                unlockableTokens = unlockableTokens.add(lockedTokens);\r\n                locked[_of][lockReason[_of][i]].claimed = true;\r\n                emit Unlocked(_of, lockReason[_of][i], lockedTokens);\r\n            }\r\n        }\r\n\r\n        if (unlockableTokens > 0)\r\n            this.transfer(_of, unlockableTokens);\r\n    }\r\n\r\n    function unlock(address _of, bytes32 _reason)\r\n        public\r\n        returns (uint256 unlocked)\r\n    {\r\n        unlocked = tokensUnlockable(_of, _reason);\r\n        if (unlocked > 0) {\r\n            locked[_of][_reason].claimed = true;\r\n            emit Unlocked(_of, _reason, unlocked);\r\n            this.transfer(_of, unlocked);\r\n        }\r\n    }\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/533072595/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536916994",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-536916994",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 536916994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjkxNjk5NA==",
    "user": {
      "login": "nitika-goel",
      "id": 33280614,
      "node_id": "MDQ6VXNlcjMzMjgwNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/33280614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nitika-goel",
      "html_url": "https://github.com/nitika-goel",
      "followers_url": "https://api.github.com/users/nitika-goel/followers",
      "following_url": "https://api.github.com/users/nitika-goel/following{/other_user}",
      "gists_url": "https://api.github.com/users/nitika-goel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nitika-goel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nitika-goel/subscriptions",
      "organizations_url": "https://api.github.com/users/nitika-goel/orgs",
      "repos_url": "https://api.github.com/users/nitika-goel/repos",
      "events_url": "https://api.github.com/users/nitika-goel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nitika-goel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T07:56:48Z",
    "updated_at": "2019-10-01T07:56:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great suggestion @RyoungHo . While I believe that the gas limit is good enough to support a lot of reasons and the code should not break in a practical scenario, we should still include this as a part of the interface. \r\nHowever, there are tokens like Nexus Mutual https://github.com/somish/NexusMutual, which are using the interface in main-net and it would be great to keep them compatible with the interface as well.\r\nHow about the following:\r\n1. unlock(address _of)\r\n2. unlockReason(address _of, bytes32 _reason)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536916994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536935949",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-536935949",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 536935949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjkzNTk0OQ==",
    "user": {
      "login": "davesag",
      "id": 387098,
      "node_id": "MDQ6VXNlcjM4NzA5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/387098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesag",
      "html_url": "https://github.com/davesag",
      "followers_url": "https://api.github.com/users/davesag/followers",
      "following_url": "https://api.github.com/users/davesag/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesag/subscriptions",
      "organizations_url": "https://api.github.com/users/davesag/orgs",
      "repos_url": "https://api.github.com/users/davesag/repos",
      "events_url": "https://api.github.com/users/davesag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T08:47:56Z",
    "updated_at": "2019-10-01T08:47:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Great suggestion @RyoungHo . While I believe that the gas limit is good enough to support a lot of reasons and the code should not break in a practical scenario, we should still include this as a part of the interface.\r\n> However, there are tokens like Nexus Mutual https://github.com/somish/NexusMutual, which are using the interface in main-net and it would be great to keep them compatible with the interface as well.\r\n> How about the following:\r\n> \r\n> 1. unlock(address _of)\r\n> 2. unlockReason(address _of, bytes32 _reason)\r\n\r\nHi @nitika-goel I think it's risky to use this interface in Main Net until it's been accepted.  Right now this is still an open proposal.\r\n\r\nThat said, I agree it's ideal to keep the interface changes to a minimum.\r\n\r\nI do like the terminology `unlockAll` and perhaps `unlockOne` however.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536935949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536956559",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-536956559",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 536956559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjk1NjU1OQ==",
    "user": {
      "login": "nitika-goel",
      "id": 33280614,
      "node_id": "MDQ6VXNlcjMzMjgwNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/33280614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nitika-goel",
      "html_url": "https://github.com/nitika-goel",
      "followers_url": "https://api.github.com/users/nitika-goel/followers",
      "following_url": "https://api.github.com/users/nitika-goel/following{/other_user}",
      "gists_url": "https://api.github.com/users/nitika-goel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nitika-goel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nitika-goel/subscriptions",
      "organizations_url": "https://api.github.com/users/nitika-goel/orgs",
      "repos_url": "https://api.github.com/users/nitika-goel/repos",
      "events_url": "https://api.github.com/users/nitika-goel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nitika-goel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T09:40:11Z",
    "updated_at": "2019-10-01T09:40:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Definitely @davesag. Nexus has used their own implementation of the EIP. They have just maintained the interface, which I think we should continue. Their contracts were audited by a third party too.\r\n\r\nDo you suggest the following?\r\n1. unlock(address _of)\r\n2. unlockOne(address _of, bytes32 _reason)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536956559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536958160",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-536958160",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 536958160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjk1ODE2MA==",
    "user": {
      "login": "davesag",
      "id": 387098,
      "node_id": "MDQ6VXNlcjM4NzA5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/387098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesag",
      "html_url": "https://github.com/davesag",
      "followers_url": "https://api.github.com/users/davesag/followers",
      "following_url": "https://api.github.com/users/davesag/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesag/subscriptions",
      "organizations_url": "https://api.github.com/users/davesag/orgs",
      "repos_url": "https://api.github.com/users/davesag/repos",
      "events_url": "https://api.github.com/users/davesag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T09:44:24Z",
    "updated_at": "2019-10-01T09:44:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nitika-goel that makes sense to me.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536958160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536959839",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-536959839",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 536959839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjk1OTgzOQ==",
    "user": {
      "login": "ray-hash",
      "id": 7157341,
      "node_id": "MDQ6VXNlcjcxNTczNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7157341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ray-hash",
      "html_url": "https://github.com/ray-hash",
      "followers_url": "https://api.github.com/users/ray-hash/followers",
      "following_url": "https://api.github.com/users/ray-hash/following{/other_user}",
      "gists_url": "https://api.github.com/users/ray-hash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ray-hash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ray-hash/subscriptions",
      "organizations_url": "https://api.github.com/users/ray-hash/orgs",
      "repos_url": "https://api.github.com/users/ray-hash/repos",
      "events_url": "https://api.github.com/users/ray-hash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ray-hash/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T09:49:09Z",
    "updated_at": "2019-10-01T09:55:16Z",
    "author_association": "NONE",
    "body": "> Definitely @davesag. Nexus has used their own implementation of the EIP. They have just maintained the interface, which I think we should continue. Their contracts were audited by a third party too.\r\n> \r\n> Do you suggest the following?\r\n> \r\n> 1. unlock(address _of)\r\n> 2. unlockOne(address _of, bytes32 _reason)\r\n\r\nNexus will have to change the contract.\r\nvery dangerous.\r\n\r\nIf the attacks the locked whale, the address will be locked.\r\n\r\n--------\r\n\r\nOh, Nexus doesn't have the transferWithLock function. :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536959839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536969959",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-536969959",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 536969959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjk2OTk1OQ==",
    "user": {
      "login": "nitika-goel",
      "id": 33280614,
      "node_id": "MDQ6VXNlcjMzMjgwNjE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/33280614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nitika-goel",
      "html_url": "https://github.com/nitika-goel",
      "followers_url": "https://api.github.com/users/nitika-goel/followers",
      "following_url": "https://api.github.com/users/nitika-goel/following{/other_user}",
      "gists_url": "https://api.github.com/users/nitika-goel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nitika-goel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nitika-goel/subscriptions",
      "organizations_url": "https://api.github.com/users/nitika-goel/orgs",
      "repos_url": "https://api.github.com/users/nitika-goel/repos",
      "events_url": "https://api.github.com/users/nitika-goel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nitika-goel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-01T10:15:51Z",
    "updated_at": "2019-10-01T10:15:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's right @RyoungHo , transferWithLock is not a part of the interface. Also, similar to unlockOne(), they have the function releaseLockedTokens, which unlocks tokens for individual reasons. \r\n\r\nHence, I don't see the issue in their implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/536969959/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986173628",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-986173628",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 986173628,
    "node_id": "IC_kwDOAq426M46x9C8",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-05T06:13:28Z",
    "updated_at": "2021-12-05T06:13:28Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986173628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997336286",
    "html_url": "https://github.com/ethereum/EIPs/issues/1132#issuecomment-997336286",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1132",
    "id": 997336286,
    "node_id": "IC_kwDOAq426M47ciTe",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-19T06:13:29Z",
    "updated_at": "2021-12-19T06:13:29Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997336286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
