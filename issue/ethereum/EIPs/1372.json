{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1372",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1372",
  "id": 356281035,
  "node_id": "MDU6SXNzdWUzNTYyODEwMzU=",
  "number": 1372,
  "title": "ERC-1372 Multi-Class Token Standard vNext",
  "user": {
    "login": "aquiladev",
    "id": 1164492,
    "node_id": "MDQ6VXNlcjExNjQ0OTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1164492?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aquiladev",
    "html_url": "https://github.com/aquiladev",
    "followers_url": "https://api.github.com/users/aquiladev/followers",
    "following_url": "https://api.github.com/users/aquiladev/following{/other_user}",
    "gists_url": "https://api.github.com/users/aquiladev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aquiladev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aquiladev/subscriptions",
    "organizations_url": "https://api.github.com/users/aquiladev/orgs",
    "repos_url": "https://api.github.com/users/aquiladev/repos",
    "events_url": "https://api.github.com/users/aquiladev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aquiladev/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-09-02T13:05:35Z",
  "updated_at": "2018-09-07T19:15:02Z",
  "closed_at": "2018-09-07T19:15:02Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "# Simple Summary\r\nA standard interface for multi-class tokens (MCTs).\r\n\r\n# Abstract\r\nThe following standard allows for the implementation of a standard API for MCTs within smart contracts. This standard provides basic functionality to track, transfer, and convert MCTs.\r\n\r\n# Personal motivation\r\nToken factory is the first name of the concept. After the investigation I found the similar multi-class token concept. It has been bothering me for the last 3 months. I am familiar with #1155, #1178, #1203 proposals, but there is one tiny issue that makes me worried, which actually motivated me to write the proposal of my own. In my opinion the above-mentioned proposals have a small flaw which opens a room for improvement.\r\n\r\nIn my proposal I'm going to cover only the MCT. It is up to the  community to discuss, decline, accept, change or merge the proposal with the existing ones.\r\n\r\nExplanation is based on #1203\r\n\r\n# Motivation\r\nI completely agree with general motivation from #1203\r\n\r\n# Key\r\nThe tiny difference and at the same time the biggest advantage of the proposal is the access key (**class** in #1155, #1178, #1203 proposals).\r\n\r\nI'm proposing to use **bytes32** type as a key for a token, whereas all proposals use **uint265** type.\r\n\r\n### Why is it so important?\r\nIt is much easier to use rule based keys than index keys.\r\nHere are some examples of the key's rule:\r\n- token owner (account as well as contract)\r\n- multiple owners,\r\n- month_year\r\n- color\r\n- index\r\n- etc\r\n\r\nIn order to create the key we can utilize `keccak256(rule)`. Default key can be `keccak256('')`\r\n\r\n# Specification\r\n```\r\ncontract ERC1372 is ERC20 {\r\n    function totalSupply(bytes32 _class) public view returns (uint256);\r\n    function balanceOf(address _owner, bytes32 _class) public view returns (uint256);\r\n    function transfer(address _to, bytes32 _class, uint256 _value) public returns (bool);\r\n    function approve(address _spender, bytes32 _class, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender, bytes32 _class) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, bytes32 _class, uint256 _value) public returns (bool);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, bytes32 _class, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, bytes32 _class, uint256 _value);\r\n    event Convert(uint256 indexed _fromClass, uint256 indexed _toClass, uint256 _value);\r\n}\r\n```\r\n\r\n# Credits\r\nThanks to all the authors of the related proposals.\r\n\r\nI would appreciate to discuss the proposal with @coinfork (#1155) @achon22 (#1178) @jeffishjeff (#1203) and co-authors.\r\n\r\n# Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "aquiladev",
    "id": 1164492,
    "node_id": "MDQ6VXNlcjExNjQ0OTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1164492?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aquiladev",
    "html_url": "https://github.com/aquiladev",
    "followers_url": "https://api.github.com/users/aquiladev/followers",
    "following_url": "https://api.github.com/users/aquiladev/following{/other_user}",
    "gists_url": "https://api.github.com/users/aquiladev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aquiladev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aquiladev/subscriptions",
    "organizations_url": "https://api.github.com/users/aquiladev/orgs",
    "repos_url": "https://api.github.com/users/aquiladev/repos",
    "events_url": "https://api.github.com/users/aquiladev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aquiladev/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1372/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418463159",
    "html_url": "https://github.com/ethereum/EIPs/issues/1372#issuecomment-418463159",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372",
    "id": 418463159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODQ2MzE1OQ==",
    "user": {
      "login": "ericbinet",
      "id": 22279070,
      "node_id": "MDQ6VXNlcjIyMjc5MDcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22279070?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericbinet",
      "html_url": "https://github.com/ericbinet",
      "followers_url": "https://api.github.com/users/ericbinet/followers",
      "following_url": "https://api.github.com/users/ericbinet/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericbinet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericbinet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericbinet/subscriptions",
      "organizations_url": "https://api.github.com/users/ericbinet/orgs",
      "repos_url": "https://api.github.com/users/ericbinet/repos",
      "events_url": "https://api.github.com/users/ericbinet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericbinet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T18:03:03Z",
    "updated_at": "2018-09-04T18:03:03Z",
    "author_association": "NONE",
    "body": "You can losslessly cast back and forth between bytes32 and uint256. Neither ERC-1155, nor ERC-1203 impose a format on the class value. A hash can be used without using bytes32.\r\n\r\nAn added benefit is that operations on uint256 cost less gas then bytes32.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418463159/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418491172",
    "html_url": "https://github.com/ethereum/EIPs/issues/1372#issuecomment-418491172",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372",
    "id": 418491172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODQ5MTE3Mg==",
    "user": {
      "login": "aquiladev",
      "id": 1164492,
      "node_id": "MDQ6VXNlcjExNjQ0OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1164492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aquiladev",
      "html_url": "https://github.com/aquiladev",
      "followers_url": "https://api.github.com/users/aquiladev/followers",
      "following_url": "https://api.github.com/users/aquiladev/following{/other_user}",
      "gists_url": "https://api.github.com/users/aquiladev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aquiladev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aquiladev/subscriptions",
      "organizations_url": "https://api.github.com/users/aquiladev/orgs",
      "repos_url": "https://api.github.com/users/aquiladev/repos",
      "events_url": "https://api.github.com/users/aquiladev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aquiladev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T19:35:19Z",
    "updated_at": "2018-09-04T19:35:19Z",
    "author_association": "NONE",
    "body": "@ericbinet good arguments, thanks!\r\n\r\nIs it possible to do implicit cast between those types? For instance function expects uint256, but I sent bytes32 (string).\r\n\r\nWhat kind of operations do you mean in the particular case? Is there any cost differences for access by index for different index's types?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418491172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418543255",
    "html_url": "https://github.com/ethereum/EIPs/issues/1372#issuecomment-418543255",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372",
    "id": 418543255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODU0MzI1NQ==",
    "user": {
      "login": "coinfork",
      "id": 2774008,
      "node_id": "MDQ6VXNlcjI3NzQwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2774008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coinfork",
      "html_url": "https://github.com/coinfork",
      "followers_url": "https://api.github.com/users/coinfork/followers",
      "following_url": "https://api.github.com/users/coinfork/following{/other_user}",
      "gists_url": "https://api.github.com/users/coinfork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coinfork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coinfork/subscriptions",
      "organizations_url": "https://api.github.com/users/coinfork/orgs",
      "repos_url": "https://api.github.com/users/coinfork/repos",
      "events_url": "https://api.github.com/users/coinfork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coinfork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T22:52:57Z",
    "updated_at": "2018-09-04T22:52:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What kind of operations do you mean in the particular case? Is there any cost differences for access by index for different index's types?\r\n\r\nUsing bytes32 in various cases is more expensive than using uint256. For example, simply passing a bytes32 value in a function parameter (like bytes32 _class in this standard) will be more expensive than a uint256 parameter.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418543255/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418569652",
    "html_url": "https://github.com/ethereum/EIPs/issues/1372#issuecomment-418569652",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372",
    "id": 418569652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODU2OTY1Mg==",
    "user": {
      "login": "ericbinet",
      "id": 22279070,
      "node_id": "MDQ6VXNlcjIyMjc5MDcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22279070?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericbinet",
      "html_url": "https://github.com/ericbinet",
      "followers_url": "https://api.github.com/users/ericbinet/followers",
      "following_url": "https://api.github.com/users/ericbinet/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericbinet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericbinet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericbinet/subscriptions",
      "organizations_url": "https://api.github.com/users/ericbinet/orgs",
      "repos_url": "https://api.github.com/users/ericbinet/repos",
      "events_url": "https://api.github.com/users/ericbinet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericbinet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T01:30:14Z",
    "updated_at": "2018-09-05T01:30:14Z",
    "author_association": "NONE",
    "body": "As far as implicit casts go, this would be handled by your client code. If you use Web3 in JavaScript, all numbers are sent to Ethereum as BigNumbers. Conversion is handled by the library.\r\n\r\nIf you rely on `web3.sha3(\"data to hash, info on token class\")`, this function returns a hex string that is accepted by functions expecting a uint256.\r\n\r\nOn Web3 1.0, this function is named `web3.utils.sha3` and is aliased as `web3.utils.keccak256`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418569652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418585987",
    "html_url": "https://github.com/ethereum/EIPs/issues/1372#issuecomment-418585987",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372",
    "id": 418585987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODU4NTk4Nw==",
    "user": {
      "login": "jeffishjeff",
      "id": 5304123,
      "node_id": "MDQ6VXNlcjUzMDQxMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5304123?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffishjeff",
      "html_url": "https://github.com/jeffishjeff",
      "followers_url": "https://api.github.com/users/jeffishjeff/followers",
      "following_url": "https://api.github.com/users/jeffishjeff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffishjeff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffishjeff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffishjeff/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffishjeff/orgs",
      "repos_url": "https://api.github.com/users/jeffishjeff/repos",
      "events_url": "https://api.github.com/users/jeffishjeff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffishjeff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T03:14:41Z",
    "updated_at": "2018-09-05T03:14:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@aquiladev Thanks for citing my EIP-1203 :) Glad to see my idea being validated by others and as @ericbinet pointed out, our differences may be trivial.\r\n\r\nFrankly though, I have essentially stopped working on EIP-1203 after giving another pass on EIP-1155 by @coinfork and found it to be a superset of what I was trying to do. In the comment section, there is a (very) lengthy discussion on standardizing the _class (or _id) bit packing format. The TL;DR version is that we're leaning toward moving that to its own standard (personally think it'll be a series of, with common business logic embedded for different sectors which is really cool) and leave EIP-1155 focused on addressing the multi-class part.\r\n\r\nTake a look and see if you agree that we can all join force behind one proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/418585987/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/419538402",
    "html_url": "https://github.com/ethereum/EIPs/issues/1372#issuecomment-419538402",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1372",
    "id": 419538402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTUzODQwMg==",
    "user": {
      "login": "aquiladev",
      "id": 1164492,
      "node_id": "MDQ6VXNlcjExNjQ0OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1164492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aquiladev",
      "html_url": "https://github.com/aquiladev",
      "followers_url": "https://api.github.com/users/aquiladev/followers",
      "following_url": "https://api.github.com/users/aquiladev/following{/other_user}",
      "gists_url": "https://api.github.com/users/aquiladev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aquiladev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aquiladev/subscriptions",
      "organizations_url": "https://api.github.com/users/aquiladev/orgs",
      "repos_url": "https://api.github.com/users/aquiladev/repos",
      "events_url": "https://api.github.com/users/aquiladev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aquiladev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-07T19:15:02Z",
    "updated_at": "2018-09-07T19:15:02Z",
    "author_association": "NONE",
    "body": "fair arguments, I think the proposal is no longer needed",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/419538402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
