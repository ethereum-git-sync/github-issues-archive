{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1111",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1111/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1111/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1111/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1111",
  "id": 325407208,
  "node_id": "MDU6SXNzdWUzMjU0MDcyMDg=",
  "number": 1111,
  "title": "Introspective metadata definition disclosure (discussion to establish a standard)",
  "user": {
    "login": "gitcnd",
    "id": 4301826,
    "node_id": "MDQ6VXNlcjQzMDE4MjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4301826?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gitcnd",
    "html_url": "https://github.com/gitcnd",
    "followers_url": "https://api.github.com/users/gitcnd/followers",
    "following_url": "https://api.github.com/users/gitcnd/following{/other_user}",
    "gists_url": "https://api.github.com/users/gitcnd/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gitcnd/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gitcnd/subscriptions",
    "organizations_url": "https://api.github.com/users/gitcnd/orgs",
    "repos_url": "https://api.github.com/users/gitcnd/repos",
    "events_url": "https://api.github.com/users/gitcnd/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gitcnd/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-05-22T18:12:37Z",
  "updated_at": "2021-12-20T03:11:59Z",
  "closed_at": "2021-12-20T03:11:59Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "# Introspective metadata definition disclosure (discussion to establish a standard)\r\n\r\n## Simple Summary\r\n\r\nIt is becoming increasingly important for metadata that's parseable on and off chain to be included in transactions.\r\n\r\nThis is a discussion about proposing a standard whereby authors can publish the definition of their metadata, allowing arbitrary 3rd parties to understand and use it.\r\n\r\nThe general idea is an [ERC820](https://github.com/ethereum/EIPs/issues/820)-style contract to which a [Protocol Buffers](https://developers.google.com/protocol-buffers/) .proto text object is submitted, which returns a unique sequence number.  Thereafter, when data encoded to this spec appears on-chain, the meaning of what's inside can be easily (and machine readably) ascertained.\r\n\r\n## Abstract\r\n\r\nOne example for metadata importance comes with \"security tokens\".  These transactions represent real-world assets, like company equity (stocks/shares), bonds, fiat, commodities, and so on.  Transactions involving these concepts are almost always regulated by country securities laws, all of which require ownership and accounting records.  It is illegal to issue and trade securities without complying with such laws.  Metadata makes compliance possible.\r\n\r\nMany other examples exist - blockchain technology supports many use cases, and metadata is an easy and relatively safe way to incorporate a lot of them.\r\n\r\n## Motivation\r\n\r\nThis is not a change to ethereum's protocol.\r\n\r\nWe propose a standard that authors can optionally follow, which will automatically make their projects compatible with software designed to read and understand the metadata they incorporate.\r\n\r\nIt will minimise gas and space wastage, yet provide deep understanding of the stored data, equivalent to the level of \"commented json\".\r\n\r\n## Specification\r\n\r\nThe Protocol Buffers language is a highly efficient compact mechanism for the binary storage of arbitrary structured data.  \r\n\r\nIt uses easy to understand machine-readable definitions which accept human-readable comments.\r\n\r\nOur proposal is that authors define any Protocol Buffers format(s) they desire, and when serializing them for storage, they store their resulting data inside a \"master\" Protocol Buffers formats, where this master serves to define which format the author used (the serial number of their published definition), and a checksum.  This has the side-effect of making this data reliably recognizable so as not to conflict with anyone else's use of their own custom metadata.\r\n\r\n### The master format\r\n\r\n```solidity\r\n\r\nmessage UserData {  \r\n                   required uint64 ercXXXdefinitionindex = 1; // Registration index identifying:-\r\n                   repeated bytes pbmessage = 2;              // Authors own data here\r\n                   required fixed64 checksum = 3;             // function computed on prior bytes\r\n                 } \r\n\r\n```\r\n\r\nThe ercXXXdefinitionindex is the integer corresponding to the definition that the author published to this contract.\r\n\r\nThe pbmessage is the authors data according to that definition\r\n\r\nThe checksum is the 1st 8 bytes of keccak256(fixed salt + all the bytes preceding it)\r\n\r\n### Illustrative use cases\r\n\r\nA contract wants to publish standard GAAP/IFRS accounting code metadata so that anyone watching their on-chain transactions can determine the meaning of them (which, if complete, allows for real-time production of a complete set of compliant financial accounts for a business).  They might publish this definition:\r\n\r\n```solidity\r\n\r\nmessage AccountingReference {\r\n                              // To convert GAAP (e.g. 1-1100) to int, \r\n                              // remove the \"-\" and reverse the result\r\n                              required uint64 accountingcode = 2; // GAAP code, as a varint\r\n                              repeated string journalnotes = 3;   // arbitrary ascii text\r\n                            }\r\n\r\n```\r\n\r\nThus, the wire format of the above, encoding, 1-1100 for the accountingcode code, and \"New MacBook\" for the notes would be (in hex):\r\n\r\n<pre>\r\n10 6f 1a 0b 4e 65 77 20  4d 61 63 42 6f 6f 6b \r\n</pre>\r\n\r\nInserting this into the master format (lets say the above got ercXXXdefinitionindex 42 when it was registered) gives this:\r\n\r\n<pre>\r\n08 2a 12 0f <b>10 6f 1a 0b  4e 65 77 20 4d 61 63 42 \r\n6f 6f 6b</b> 19 93 fc 7e 9a  0a 1a 1a ac\r\n</pre>\r\n\r\n08 = Protocol Buffer tag indicating a varint of 1 byte follows\r\n2a = varint encoded version of 42, the ercXXXdefinitionindex of what follows\r\n12 = Protocol Buffer tag indicating a string of length (following byte) follows\r\n0f = 15 bytes follow\r\n&nbsp;  10 = another 1-byte varint follows\r\n&nbsp;  6f = the number 111 in hex, which came from the code 1-1100 reversed.\r\n&nbsp;  1a = Protocol Buffer tag indicating a string of length (following byte) follows\r\n&nbsp;  0b = 11 bytes follow\r\n&nbsp;  4e 65 77 20 4d 61 63 42 6f 6f 6b = \"New MacBook\" string\r\n19 = a 64bit binary structure follows\r\n93 fc 7e 9a  0a 1a 1a ac = 8 bytes from keccak256(salt + the above)\r\n\r\nThe leading 08 (and some bits of the next byte) give us a \"magic\" making this metadata easy to spot, and the checksum confirms.\r\n\r\nAnyone spotting that pattern can thus consult this contract to find out what it means.\r\n\r\nHere's a second abbreviated example: lets say I want to do an on-chain ERC777 transaction and I want the whole world to know that it was me, sending money, and who-to - I could first create the following definition and publish it into this proposed contract, (which would assign me the next ercXXXdefinitionindex packetid):\r\n\r\n```solidity\r\nmessage OpenTransfer {\r\n   required string sender = 1;\r\n   required string recipient = 2;\r\n   required string iso_currency_code = 3;\r\n   required float amount = 4;\r\n}\r\n```\r\n\r\nI could then encode it and insert - like this for example:\r\n\r\n```solidity\r\nOpenTransfer->encode({\r\n   sender   => 'chris@example.net',\r\n   recipient   => 'taxman@government.boo',\r\n   iso_currency_code  => 'EUR',\r\n   amount  => 1234.56\r\n});\r\n```\r\n\r\n### Raw transaction for deploying the smart contract on any chain\r\n\r\nTBD\r\n\r\n### Deployment method\r\n\r\nThis contract is going to be deployed using the Nick's Method (same as ERC820).\r\n\r\n## Backwards Compatibility\r\n\r\nN/A\r\n\r\n## Test Cases\r\n\r\nA repository will be established with example tests\r\n\r\n## Implementation\r\n\r\nA repository will be established with code to use\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1111/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1111/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986398060",
    "html_url": "https://github.com/ethereum/EIPs/issues/1111#issuecomment-986398060",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1111",
    "id": 986398060,
    "node_id": "IC_kwDOAq426M46yz1s",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-06T03:11:49Z",
    "updated_at": "2021-12-06T03:11:49Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986398060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997555248",
    "html_url": "https://github.com/ethereum/EIPs/issues/1111#issuecomment-997555248",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1111",
    "id": 997555248,
    "node_id": "IC_kwDOAq426M47dXww",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-20T03:11:59Z",
    "updated_at": "2021-12-20T03:11:59Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997555248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
