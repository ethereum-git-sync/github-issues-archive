{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1048",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1048/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1048/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1048/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1048",
  "id": 319197745,
  "node_id": "MDU6SXNzdWUzMTkxOTc3NDU=",
  "number": 1048,
  "title": "On the go storage gas refunds",
  "user": {
    "login": "ghost",
    "id": 10137,
    "node_id": "MDQ6VXNlcjEwMTM3",
    "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ghost",
    "html_url": "https://github.com/ghost",
    "followers_url": "https://api.github.com/users/ghost/followers",
    "following_url": "https://api.github.com/users/ghost/following{/other_user}",
    "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
    "organizations_url": "https://api.github.com/users/ghost/orgs",
    "repos_url": "https://api.github.com/users/ghost/repos",
    "events_url": "https://api.github.com/users/ghost/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ghost/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-05-01T13:29:32Z",
  "updated_at": "2021-01-06T03:11:40Z",
  "closed_at": "2018-05-18T18:57:37Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Currently, the EVM refunds gas to those who delete data from storage or call the contract suicide function. This is done to incentivize users to free storage if they no longer need it.\r\n\r\n[Detailed gas costs spreadsheet](https://docs.google.com/spreadsheets/d/1m89CVujrQe5LAFJ8-YAUCcNK950dUzMQPMJBxRtGCqs)\r\n\r\nThe problem is that gas is refunded after the code execution has finished instead of on the go. This means operations such as clearing long arrays may end up running out of gas although they shouldn't.\r\n\r\nThis is an example of a function with an execution cost higher than its transaction cost:\r\n\r\n```\r\npragma solidity ^0.4.23;\r\n\r\ncontract Array {\r\n    uint256 a;\r\n    \r\n    function Test() external {\r\n        a = 1;\r\n        delete a;\r\n        a = 1;\r\n        delete a;\r\n        a = 1;\r\n        delete a;\r\n        a = 1;\r\n        delete a;\r\n        a = 1;\r\n        delete a;\r\n        a = 1;\r\n        delete a;\r\n        a = 1;\r\n        delete a;\r\n        a = 1;\r\n        delete a;\r\n    }\r\n}\r\n```\r\n\r\nAccording to Remix, this function has a transaction cost of 110795 gas. However, you will need to send at least 221590 gas (twice as much) to prevent your transaction from running out of gas; even though you will only be charged 110795 gas.\r\n\r\nRefunding gas on the go requires more computations and is therefore refunded afterwards, in bulk. However, I would suggest something such as: \r\n\r\nOnce a user runs out of gas, use the yet to be refunded gas. Once the refundable gas == 0, throw out of gas. This allows users to send the appropriate gas amount, without having the computational impact of refunding multiple times on the go.",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1048/reactions",
    "total_count": 4,
    "+1": 0,
    "-1": 2,
    "laugh": 0,
    "hooray": 2,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1048/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385830642",
    "html_url": "https://github.com/ethereum/EIPs/issues/1048#issuecomment-385830642",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1048",
    "id": 385830642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTgzMDY0Mg==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T00:34:11Z",
    "updated_at": "2018-05-02T00:34:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm worried that this could enable reentrancy attacks. Today, if a contract uses Solidity's `transfer` for sending ETH, the amount of gas associated is limited, so that no reentrancies can be executed. With this new semantics, an attacker could call from a malicious contract that deletes several storage slots in order to _gain_ gas, and then use it to execute a reentrancy.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385830642/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385859409",
    "html_url": "https://github.com/ethereum/EIPs/issues/1048#issuecomment-385859409",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1048",
    "id": 385859409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTg1OTQwOQ==",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T04:09:54Z",
    "updated_at": "2018-05-02T12:23:19Z",
    "author_association": "NONE",
    "body": "I believe we could add an exeption to that. Both the `send` and `transfer` functions have a gas limit of 2300 gas. Currently, I imagine the EVM does something like:\r\n\r\n```\r\nif transfer or send is called\r\n    if gas_left > 2300\r\n        temp = gas_left - 2300\r\n        gas_left = 2300\r\n\r\nonce transfer or send is finished\r\n    gas_left = gas_left + temp\r\n```\r\n\r\nWe could easily adapt the code above to fit this method by doing something like:\r\n\r\n```\r\nif transfer or send is called\r\n    if gas_left + refundable_gas > 2300\r\n        temp = gas_left + refundable_gas - 2300\r\n        refundable_gas = 0\r\n        gas_left = 2300\r\n\r\nonce transfer or send is finished\r\n    gas_left = gas_left + temp\r\n```\r\n\r\nNotice that the code above is just an example, as I do not know exactly how the gas limit is imposed on both the `transfer` and `send` functions, but the point is that it could be adapted.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385859409/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385973225",
    "html_url": "https://github.com/ethereum/EIPs/issues/1048#issuecomment-385973225",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1048",
    "id": 385973225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTk3MzIyNQ==",
    "user": {
      "login": "spalladino",
      "id": 429604,
      "node_id": "MDQ6VXNlcjQyOTYwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429604?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spalladino",
      "html_url": "https://github.com/spalladino",
      "followers_url": "https://api.github.com/users/spalladino/followers",
      "following_url": "https://api.github.com/users/spalladino/following{/other_user}",
      "gists_url": "https://api.github.com/users/spalladino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spalladino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spalladino/subscriptions",
      "organizations_url": "https://api.github.com/users/spalladino/orgs",
      "repos_url": "https://api.github.com/users/spalladino/repos",
      "events_url": "https://api.github.com/users/spalladino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spalladino/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T13:13:38Z",
    "updated_at": "2018-05-02T13:13:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Transfer and send are Solidity constructs, they just wrap EVM `CALL` with a certain value, so it is not possible to know if transfer or send were used (instead of an actual function call) from the EVM.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385973225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386039730",
    "html_url": "https://github.com/ethereum/EIPs/issues/1048#issuecomment-386039730",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1048",
    "id": 386039730,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjAzOTczMA==",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T16:32:22Z",
    "updated_at": "2018-05-02T16:34:44Z",
    "author_association": "NONE",
    "body": "True. Then, we could modify the `.gas()` behaviour in the `CALL`.\r\n\r\nI believe we can solve this issue because we currently limit one integer, `gas_left`, to not decrease by more than 2300. Therefore, we should also be able to limit the sum of two integers, `gas_left + refundable_gas`, because the sum is also a single integer; just like `gas_left`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386039730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
