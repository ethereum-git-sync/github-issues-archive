{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2212",
  "id": 473129200,
  "node_id": "MDU6SXNzdWU0NzMxMjkyMDA=",
  "number": 2212,
  "title": "ERC-2212: Interest Earning Stakes",
  "user": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2019-07-26T00:57:14Z",
  "updated_at": "2020-09-09T11:40:29Z",
  "closed_at": "2020-09-09T11:40:28Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\neip: 2212\r\ntitle: ERC-2212 Interest Earning Stakes\r\nauthor: Paul Razvan Berg (@PaulRBerg) <paul@sablier.finance>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/2212\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2019-07-26\r\nrequires: 20\r\n```\r\n\r\n## Simple Summary\r\n\r\nWe propose a new way to monetise decentralised apps that involves users staking tokens in exchange for a product or a service and creators earning interest on the pooled stakes through a continuous lending protocol such as [Compound](https://compound.finance).\r\n\r\n## Abstract\r\n\r\nThe advent of decentralised lending brought to the web3 ecosystem a new primitive for designing business models. We herein describe a smart contract interface that accepts deposits (\"stakes\") in ERC20 tokens. These deposits are immediately lent on the market to earn interest either for just the owner of the contract, or for both them and the user. We assume that users get access to a product or a service for as long as they keep staking tokens.\r\n\r\n## Motivation\r\n\r\nWhile most web3 business models rely on paying a percentage fee on transfers, or committing to a monthly subscription, we aim to flip the model on its head. Users are their own banks now, so, instead of charging them, we make them stake tokens that can be claimed back, in full, at any point in time. We view this as a win-win-win scenario for users, dapp creators and lending protocols.\r\n\r\nIt is worth it to mention PoolTogether, a \"no-loss lottery\" that launched recently. It works by having participants deposit money in their contracts, locking it up for a while and earning interest through Compound. Ultimately, they choose a lucky winner and return the deposits back to all other players. PoolTogether takes a 10% commission on the prize.\r\n\r\nWe wrote this specification because interest earning stakes are a powerful financial instrument and a community-vetted standard and implementation will reduce the cost of replication.\r\n\r\n### Use Cases\r\n\r\n- Software products and services\r\n- Charity pools\r\n- Games\r\n- Gym memberships\r\n\r\n## Specification\r\n\r\nAssigning an owner is mandatory for this spec to make sense, thus we assume that a proper implementation would use a well-known contract such as OpenZeppelin's [Ownable](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/ownership/Ownable.sol). For brevity, we haven't included any method for assigning or transferring ownership.\r\n\r\n### Methods\r\n\r\n#### owner\r\n\r\nReturns the owner of the contract.\r\n\r\n```solidity\r\nfunction owner() external view returns (address);\r\n```\r\n\r\n#### fee\r\n\r\nReturns the fee as a percentage value scaled by 1e18.\r\n\r\n```solidity\r\nfunction fee() external view returns (uint256);\r\n```\r\n\r\n#### balanceOf\r\n\r\nReturns the stake that consists of the initial deposit plus the interest accrued over time.\r\n\r\nSHOULD revert if `staker` doesn't have an active stake. SHOULD revert if `tokenAddress` doesn't match either the cToken or the underlying of the stake.\r\n\r\n```solidity\r\nfunction balanceOf(address staker, address tokenAddress) external view returns (uint256);\r\n```\r\n\r\n#### depositOf\r\n\r\nReturns the initial deposit.\r\n\r\nSHOULD revert if `staker` doesn't have an active stake. SHOULD revert if `tokenAddress` doesn't match either the cToken or the underlying of the stake.\r\n\r\n```solidity\r\nfunction depositOf(address staker, address tokenAddress) external view returns (uint256);\r\n```\r\n\r\n#### whitelistCToken\r\n\r\nWhitelists a cToken to automatically convert its underlying when deposited.\r\n\r\nMUST revert if `msg.sender` is not the owner.\r\n\r\n**Triggers Event**: [WhitelistCToken](#whitelistctoken)\r\n\r\n```solidity\r\nfunction whitelistCToken(address cTokenAddress, address underlyingAddress) external;\r\n```\r\n\r\n#### discardCToken\r\n\r\nDiscards a cToken that has been whitelisted before.\r\n\r\nMUST revert if `msg.sender` is not the owner.\r\n\r\n**Triggers Event**: [DiscardCToken](#discardctoken)\r\n\r\n```solidity\r\nfunction discardCToken(address cTokenAddress) external\r\n```\r\n\r\n#### resetAllowance\r\n\r\nResets the allowance granted to the cToken contract to spend from the underlying contract to the maximum value possible in the EVM.\r\n\r\n```solidity\r\nfunction resetAllowance(address cTokenAddress, address underlyingAddress);\r\n```\r\n\r\n#### stake\r\n\r\nCreates a new stake object for `msg.sender`. Automatically converts an underlying to its cToken form so that the contract can earn interest.\r\n\r\nMUST revert if `msg.sender` already has an active stake. MUST revert if the cToken/ underlying pair has not been whitelisted.\r\n\r\n**Triggers Event**: [Stake](#stake)\r\n\r\n```solidity\r\nfunction stake(address tokenAddress, uint256 amount) external;\r\n```\r\n\r\n#### redeem\r\n\r\nReturns the deposit plus any accrued interest to the staker and levies the fee for the `owner`.\r\n\r\nMUST revert if `msg.sender` is not the staker or the owner.\r\n\r\n**Triggers Event**: [Redeem](#redeem)\r\n\r\n```solidity\r\nfunction redeem(address staker) external;\r\n```\r\n\r\n#### takeEarnings\r\n\r\nWithdraws the earnings accrued over time.\r\n\r\nMUST revert if `msg.sender` is not the owner.\r\n\r\n**Triggers Event**: [TakeEarnings](#takeearnings)\r\n\r\n```solidity\r\nfunction takeEarnings(address tokenAddress, uint256 amount) external;\r\n```\r\n\r\n#### updateFee\r\n\r\nUpdates the fee practised by the contract. Has to be a percentage value scaled by 1e18. Can be anything between 0% and 100%.\r\n\r\nMUST revert if `msg.sender` is not the owner.\r\n\r\n**Triggers Event**: [UpdateFee](#updatefee)\r\n\r\n```solidity\r\nfunction updateFee(uint256 newFee) external;\r\n```\r\n\r\n---\r\n\r\n### Events\r\n\r\n#### WhitelistCToken\r\n\r\nMUST be triggered when `whitelistCToken` is successfully called.\r\n\r\n```solidity\r\nevent WhitelistCToken(address indexed cTokenAddress, address underlyingAddress);\r\n```\r\n\r\n#### DiscardCToken\r\n\r\nMUST be triggered when `discardCToken` is successfully called.\r\n\r\n```solidity\r\nevent DiscardCToken(address indexed cTokenAddress);\r\n```\r\n\r\n#### Stake\r\n\r\nMUST be triggered when `stake` is successfully called.\r\n\r\n```solidity\r\nevent Stake(address indexed staker, address indexed cTokenAddress, address indexed underlyingAddress, bool converted, uint256 cTokenDeposit, uint256 exchangeRate);\r\n```\r\n\r\n#### Redeem\r\n\r\nMUST be triggered when `redeem` is successfully called.\r\n\r\n```solidity\r\nevent Redeem(address indexed staker, address indexed cTokenAddress, address indexed underlyingAddress, uint256 cTokenFee, uint256 cTokenWithdrawal, uint256 exchangeRate);\r\n```\r\n\r\n#### TakeEarnings\r\n\r\nMUST be triggered when `takeEarnings` is successfully called.\r\n\r\n```solidity\r\nevent TakeEarnings(address indexed tokenAddress, uint256 indexed amount);\r\n```\r\n\r\n#### UpdateFee\r\n\r\nMUST be triggered when `updateFee` is successfully called.\r\n\r\n```solidity\r\nevent UpdateFee(uint256 indexed fee);\r\n```\r\n\r\n## Rationale\r\n\r\nWe designed these interest earning stakes with simplicity in mind, but we acknowledge that there are some missing features and obvious concerns which we discuss below.\r\n\r\n---\r\n\r\n### Missing Features\r\n\r\n#### Update\r\n\r\nBy and large, this is the most prominent missing feature. Dapp creators might want to update their staking requirements and the only way to achieve that would be to ask users to redeem their previous stake and put in the new amount.\r\n\r\nWe assume that most apps don't need this and the spec as it is now is sufficient for running the very first experiments. Yet, time will tell best. We are looking forward to making updates if need be.\r\n\r\n#### Parallel Staking\r\n\r\nLarge enterprises have multiple sources of revenue, hence switching to a business model based on staking would require a smart contract that accepts multiple stakes per user.\r\n\r\nHowever, the goal is to avoid writing an over-optimised standard. Parallel staking would require dapp creators to keep track of multiple stake ids, instead of only the user's account. Also, the user's interface would become more complex, as they would have to be aware of multiple stakes.\r\n\r\n#### Beyond Compound\r\n\r\nSome functions in the interface are highly specific to Compound, but the rationale behind that is simple. Compound is by far the best suited protocol for interest earning stakes. It is ultra-short term, which makes for frictionless business. We may update the interface when other continuous lending schemes, such as the Dai Savings Rate, will scale significantly.\r\n\r\n---\r\n\r\n### Concerns\r\n\r\n#### Loan Defaults\r\n\r\nLending never comes without risks, so interest earning stakes are not a good fit for the ultra-sensitive business applications. That said, dapp creators have an incentive to monitor the market for borrowers that go under the collateral requirements and liquidate them. By doing so, they secure the network for their own users and also earn a fee in the process.\r\n\r\n#### Fluctuating Rates\r\n\r\nThe market rates for lending stablecoins hovered around 10% in early 2019, but this is not a given. Dapp creators can accommodate this issue by asking for a stake that generates interest reasonably above what they deem as an acceptable revenue stream.\r\n\r\n#### Rent-Seeking\r\n\r\nInterest earning stakes work best for products or services that are priced on time instead of quantity (imagine subscription-based SaaS). If a dapp is quota-based, its creators would be better off charging a fee on every transfer.\r\n\r\n## Implementation\r\n\r\n[Head to the Sablier organisation on GitHub](https://github.com/sablierhq/erc2212) for a WIP implementation.\r\n\r\n## Additional References\r\n\r\n- [Thread on cTokens](https://twitter.com/PaulRBerg/status/1147980107740524544)\r\n- [Compound Protocol](https://github.com/compound-finance/compound-protocol)\r\n- [PoolTogether](https://pooltogether.us)\r\n- [Pooled cDAI](https://github.com/ZeframLou/pooled-cdai)\r\n- [Lending Proxy by Luciano Bertenasco](https://github.com/lbertenasco/lending-proxy)\r\n- [Web3 Revenue Primitives](https://github.com/FEMBusinessModelsRing/web3_revenue_primitives)\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n\r\n@PaulRBerg and @SablierHQ ✌️",
  "closed_by": {
    "login": "PaulRBerg",
    "id": 8782666,
    "node_id": "MDQ6VXNlcjg3ODI2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PaulRBerg",
    "html_url": "https://github.com/PaulRBerg",
    "followers_url": "https://api.github.com/users/PaulRBerg/followers",
    "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
    "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
    "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
    "repos_url": "https://api.github.com/users/PaulRBerg/repos",
    "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2212/reactions",
    "total_count": 26,
    "+1": 17,
    "-1": 0,
    "laugh": 0,
    "hooray": 7,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/515436762",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-515436762",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 515436762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTQzNjc2Mg==",
    "user": {
      "login": "bgits",
      "id": 4020296,
      "node_id": "MDQ6VXNlcjQwMjAyOTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4020296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bgits",
      "html_url": "https://github.com/bgits",
      "followers_url": "https://api.github.com/users/bgits/followers",
      "following_url": "https://api.github.com/users/bgits/following{/other_user}",
      "gists_url": "https://api.github.com/users/bgits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bgits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bgits/subscriptions",
      "organizations_url": "https://api.github.com/users/bgits/orgs",
      "repos_url": "https://api.github.com/users/bgits/repos",
      "events_url": "https://api.github.com/users/bgits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bgits/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-26T12:46:38Z",
    "updated_at": "2019-07-26T12:46:38Z",
    "author_association": "NONE",
    "body": "I think it would be helpful to also have a standard for interacting with lending contracts. It seems compound, dYdX, etc can and should expose the same interfaces so that developers can easily integrate multiple lending market places.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/515436762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/515562554",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-515562554",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 515562554,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU2MjU1NA==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-26T18:54:09Z",
    "updated_at": "2019-07-26T19:20:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bgits Interesting, although hard to implement. These protocols have very different interfaces and collateral requirements.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/515562554/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/515567937",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-515567937",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 515567937,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU2NzkzNw==",
    "user": {
      "login": "bgits",
      "id": 4020296,
      "node_id": "MDQ6VXNlcjQwMjAyOTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4020296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bgits",
      "html_url": "https://github.com/bgits",
      "followers_url": "https://api.github.com/users/bgits/followers",
      "following_url": "https://api.github.com/users/bgits/following{/other_user}",
      "gists_url": "https://api.github.com/users/bgits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bgits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bgits/subscriptions",
      "organizations_url": "https://api.github.com/users/bgits/orgs",
      "repos_url": "https://api.github.com/users/bgits/repos",
      "events_url": "https://api.github.com/users/bgits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bgits/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-26T19:12:38Z",
    "updated_at": "2019-07-26T19:12:38Z",
    "author_association": "NONE",
    "body": "> @bgits Interesting, although hard to implement. These protocols have very different interfaces to collateral requirements.\r\n\r\nThe different interfaces are the problem having a standard would fix. Collateral requirements, term structure and all components that compose a loan can be standardized into an expected interface just like they are for the traditional debt markets regardless of the thousands of different companies issuing different debt types.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/515567937/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/515570856",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-515570856",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 515570856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU3MDg1Ng==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-26T19:23:29Z",
    "updated_at": "2019-07-26T19:23:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "What I meant is that coordinating all teams is hard, specifically because trade-offs would have to be made. Something like InstaDApp where each protocol is abstracted in the backend may be much easier to develop.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/515570856/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516264037",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-516264037",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 516264037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjI2NDAzNw==",
    "user": {
      "login": "hayesgm",
      "id": 271024,
      "node_id": "MDQ6VXNlcjI3MTAyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/271024?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayesgm",
      "html_url": "https://github.com/hayesgm",
      "followers_url": "https://api.github.com/users/hayesgm/followers",
      "following_url": "https://api.github.com/users/hayesgm/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayesgm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayesgm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayesgm/subscriptions",
      "organizations_url": "https://api.github.com/users/hayesgm/orgs",
      "repos_url": "https://api.github.com/users/hayesgm/repos",
      "events_url": "https://api.github.com/users/hayesgm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayesgm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-30T05:09:48Z",
    "updated_at": "2019-07-30T05:09:48Z",
    "author_association": "NONE",
    "body": "Big fan of this spec and the power behind this idea, as we've already see in a number of live projects. This specification can really open up that ecosystem to a new set of apps and teams.\r\n\r\nI do agree with @bgits that the interface layer should probably be generic. That is, the interface for `stake`, `redeem`, `takeEarnings`, etc, should be as generic as possible so that a proper implementation could be backed by **any** protocol that is compatible with this spec. Then, the rest of the functions here (such as `whitelistCToken`) can be implementation details. Preferably, we can build a first-class implementation that integrates Compound, and then make sure the community has the resources to build further implementations.\r\n\r\nI'd love to see this spec move forward and become widely utilized. We're already seeing projects build in this direction, and thus this spec can help keep the community and implementations fully compatible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516264037/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516374650",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-516374650",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 516374650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjM3NDY1MA==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-30T11:12:04Z",
    "updated_at": "2019-07-30T11:12:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @hayesgm happy to see you diving in!\r\n\r\nOh, absolutely, the standard should eventually become protocol agnostic. As mentioned in v1, I used Compound simply because it was easy to pick up. My take was that Barry suggested another ERC for accessing all lending protocols and I deemed that hard to accomplish. Sorry for any misunderstanding.\r\n\r\n[I made this HackMD document for everyone to leave their thoughts on v2.](https://hackmd.io/ZC7gCtksR0-sWi-VKmLonA)\r\n\r\nWhat I did so far:\r\n\r\n- Remove `whitelistCToken`, `discardCToken` and `resetAllowance` and their associated events\r\n- Replace `cTokenDeposit` with `deposit` in the `Stake` event\r\n- Replace `cTokenFee` with `fee` in the `Redeem` event\r\n- Replace `cTokenWithdrawal` with `withdrawal` in the `Redeem` event\r\n\r\nAlso, the assumption is now that deposits and withdrawals are quantified in the underlying asset. That is, DAI instead of cDAI, because the former is the ubiquitous source of value (well,  if you ask blockchain people).\r\n\r\nQuestions:\r\n\r\n1. I personally like \"stakes\" more than \"pools\", as you can make a pool out of a group of stakes, but the reverse is not logically possible. But others said \"Interest Earning Pools\" sounds better, so I'm kinda sitting on the fence. What do you think?\r\n2. Should there be a dead man's switch for withdrawing/ liquidating all stakes? That is, in case of a flash crash, the owner of the contract could call one method to redeem the underlying assets.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516374650/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516521340",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-516521340",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 516521340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjUyMTM0MA==",
    "user": {
      "login": "hayesgm",
      "id": 271024,
      "node_id": "MDQ6VXNlcjI3MTAyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/271024?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayesgm",
      "html_url": "https://github.com/hayesgm",
      "followers_url": "https://api.github.com/users/hayesgm/followers",
      "following_url": "https://api.github.com/users/hayesgm/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayesgm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayesgm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayesgm/subscriptions",
      "organizations_url": "https://api.github.com/users/hayesgm/orgs",
      "repos_url": "https://api.github.com/users/hayesgm/repos",
      "events_url": "https://api.github.com/users/hayesgm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayesgm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-30T17:44:05Z",
    "updated_at": "2019-07-30T17:44:05Z",
    "author_association": "NONE",
    "body": "Cool @PaulRBerg added some comments to the HackMD doc. This is coming along, for sure. In regards to your two questions:\r\n\r\n1. Yeah-- personally, I think of this as, for example, \"Stake DAI to join the community\" or \"Stake USDC to donate\" or whatever use cases people come up with. Collectively, we should think of this as Group Staking over a variety of underlying assets (that is, beyond just Eth staking). Personally, \"Enter an Interest Earning Pool to join the community\" doesn't have the same ring.\r\n2. Liquidating each individual stake might be difficult code-wise. You could fully `redeem` this contract's balance from Compound and allow users to redeem directly from that balance. Holistically, though, I believe that users who stake this way are liable to any concerns in the underlying platform and adding this switch wouldn't truly insulate those users from those risks (plus, they could each redeem, themselves, in light of any concerns).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516521340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516545560",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-516545560",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 516545560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjU0NTU2MA==",
    "user": {
      "login": "AdvaithD",
      "id": 8968110,
      "node_id": "MDQ6VXNlcjg5NjgxMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8968110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AdvaithD",
      "html_url": "https://github.com/AdvaithD",
      "followers_url": "https://api.github.com/users/AdvaithD/followers",
      "following_url": "https://api.github.com/users/AdvaithD/following{/other_user}",
      "gists_url": "https://api.github.com/users/AdvaithD/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AdvaithD/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AdvaithD/subscriptions",
      "organizations_url": "https://api.github.com/users/AdvaithD/orgs",
      "repos_url": "https://api.github.com/users/AdvaithD/repos",
      "events_url": "https://api.github.com/users/AdvaithD/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AdvaithD/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-30T18:46:38Z",
    "updated_at": "2019-07-30T18:46:38Z",
    "author_association": "NONE",
    "body": "This is amazing! I think it plays well into ethos as well. Using compound would be a great way to test this as an experiment. However, if this spec was protocol agnostic - we would have higher liquidity and better earnings.\r\n\r\nThis could be used as a membership mechanism for any dapp - \"stake with us to get access, while we earn some interest off of your collateral\"",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516545560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516548819",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-516548819",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 516548819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjU0ODgxOQ==",
    "user": {
      "login": "hayesgm",
      "id": 271024,
      "node_id": "MDQ6VXNlcjI3MTAyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/271024?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayesgm",
      "html_url": "https://github.com/hayesgm",
      "followers_url": "https://api.github.com/users/hayesgm/followers",
      "following_url": "https://api.github.com/users/hayesgm/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayesgm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayesgm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayesgm/subscriptions",
      "organizations_url": "https://api.github.com/users/hayesgm/orgs",
      "repos_url": "https://api.github.com/users/hayesgm/repos",
      "events_url": "https://api.github.com/users/hayesgm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayesgm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-30T18:56:06Z",
    "updated_at": "2019-07-30T18:56:06Z",
    "author_association": "NONE",
    "body": "In regards to agnostic, I believe the right implementation would be: many protocols will implement this same interface, however, each one would only implement staking via a **single** underlying lending protocol (e.g. Compound or dYdX). Different lending protocols have vastly different risk parameters, and it should be made clear to stakers ahead of time which protocol their funds are being staked to. The common interface, however, would make it easy to build common interfaces or second-layer solutions for interest-bearing protocol staking.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516548819/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516803982",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-516803982",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 516803982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjgwMzk4Mg==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-31T11:07:59Z",
    "updated_at": "2019-07-31T11:09:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In regards to your two questions:\r\n\r\n1. Awesome\r\n2. Gotcha\r\n\r\nHey @AdvaithD glad to hear that! To follow up on Geoff's point: let's take an example of lending 100 DAI and two markets A and B which only allow up to 50 DAI each. Even if you may benefit from increased liquidity by lending on both A and B, you vastly \\*reduce\\* the security and significantly \\*increase\\* the overhead of the standard. Therefore, it is easier to cap the stake to 50 DAI, only lend on A and wait for the market to get larger.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/516803982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/567104285",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-567104285",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 567104285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzEwNDI4NQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-18T16:20:51Z",
    "updated_at": "2019-12-18T16:20:51Z",
    "author_association": "MEMBER",
    "body": "@PaulRBerg do you want to create a real EIP out of this (aka submit a PR)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/567104285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/567264133",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-567264133",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 567264133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzI2NDEzMw==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-18T23:48:39Z",
    "updated_at": "2019-12-18T23:48:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @axic, thanks for the heads-up, will do. We're gonna set erc-1620 in stone soon and, when I make the PR for it, I'll make one for erc-2212 too.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/567264133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/689505657",
    "html_url": "https://github.com/ethereum/EIPs/issues/2212#issuecomment-689505657",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2212",
    "id": 689505657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTUwNTY1Nw==",
    "user": {
      "login": "PaulRBerg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulRBerg",
      "html_url": "https://github.com/PaulRBerg",
      "followers_url": "https://api.github.com/users/PaulRBerg/followers",
      "following_url": "https://api.github.com/users/PaulRBerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulRBerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulRBerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulRBerg/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulRBerg/orgs",
      "repos_url": "https://api.github.com/users/PaulRBerg/repos",
      "events_url": "https://api.github.com/users/PaulRBerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulRBerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-09T11:40:28Z",
    "updated_at": "2020-09-09T11:40:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "As per the latest discussions in #2444, I'm going to close this discussion about ERC-2212.\r\n\r\nThere are two main reasons for this:\r\n\r\n+ The lack of a bespoke interface/ ERC for cTokens\r\n+ Me not having enough time to maintain, improve and promote this ERC",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/689505657/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
