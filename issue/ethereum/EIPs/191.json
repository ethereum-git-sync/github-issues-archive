{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/191/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/191/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/191/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/191",
  "id": 202087905,
  "node_id": "MDU6SXNzdWUyMDIwODc5MDU=",
  "number": 191,
  "title": "ERC: Signed Data Standard ",
  "user": {
    "login": "holiman",
    "id": 142290,
    "node_id": "MDQ6VXNlcjE0MjI5MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/holiman",
    "html_url": "https://github.com/holiman",
    "followers_url": "https://api.github.com/users/holiman/followers",
    "following_url": "https://api.github.com/users/holiman/following{/other_user}",
    "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
    "organizations_url": "https://api.github.com/users/holiman/orgs",
    "repos_url": "https://api.github.com/users/holiman/repos",
    "events_url": "https://api.github.com/users/holiman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/holiman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2017-01-20T09:06:27Z",
  "updated_at": "2022-09-08T10:47:51Z",
  "closed_at": "2018-04-06T12:02:22Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "```\r\nERC: 191\r\nTitle: Signed Data Standard\r\nAuthors: Martin Holst Swende, Nick Johnson\r\nStatus: Draft\r\nType: Informational\r\nCreated: 2016-01-20\r\n```\r\n\r\n# Abstract\r\n\r\nThis ERC proposes a specification about how to handle signed data in Etherum contracts. \r\n\r\n# Motivation \r\n\r\nSeveral multisignature wallet implementations have been created which accepts `presigned` transactions. A `presigned` transaction is a chunk of binary `signed_data`, along with signature (`r`, `s` and `v`). The interpretation of the `signed_data` has not been specified, leading to several problems: \r\n\r\n* Standard Ethereum transactions can be submitted as `signed_data`. An Ethereum transaction can be unpacked, into the following components: `RLP<nonce, gasPrice, startGas, to, value, data>` (hereby called `RLPdata`), `r`, `s` and `v`. If there are no syntactical constraints on `signed_data`, this means that `RLPdata` can be used as a syntactically valid `presigned` transaction. \r\n* Multisignature wallets have also had the problem that a `presigned` transaction has not been tied to a particular `validator`, i.e a specific wallet. Example:\r\n    1. Users `A`, `B` and `C` have the `2/3`-wallet `X`\r\n    2. Users `A`, `B` and `D` have the `2/3`-wallet `Y`\r\n    3. User `A` and `B` submites `presigned` transaction to `X`. \r\n    4. Attacker can now reuse their presigned transactions to `X`, and submit to `Y`. \r\n\r\n## Specification\r\n\r\nWe propose the following format for `signed_data`\r\n\r\n```\r\n0x19 <1 byte version> <version specific data> <data to sign>. \r\n```\r\nVersion `0` has `<20 byte address>` for the version specific data, and the `address` is the intended validator. In the case of a Multisig wallet, that is the wallet's own address  . \r\n\r\nThe initial `0x19` byte is intended to ensure that the `signed_data` is not valid [RLP](https://github.com/ethereum/wiki/wiki/RLP) \r\n\r\n> For a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\r\n\r\nThat means that any `signed_data` cannot be one RLP-structure, but a 1-byte `RLP` payload followed by something else. Thus, any ERC-191 `signed_data` can never be an Ethereum transaction. \r\n\r\nAdditionally, `0x19` has been chosen because since ethereum/go-ethereum#2940 , the following is prepended before hashing in personal_sign:\r\n\r\n```\r\n\"\\x19Ethereum Signed Message:\\n\" + len(message).\r\n```\r\n\r\nUsing `0x19` thus makes it possible to extend the scheme by defining a version `0x45` (`E`) to handle these kinds of signatures.\r\n\r\n### Example\r\n\r\n    function submitTransactionPreSigned(address destination, uint value, bytes data, uint nonce, uint8 v, bytes32 r, bytes32 s)\r\n        public\r\n        returns (bytes32 transactionHash)\r\n    {\r\n       // Arguments when calculating hash to validate\r\n        // 1: byte(0x19) - the initial 0x19 byte\r\n        // 2: byte(0) - the version byte \r\n        // 4: this - the validator address\r\n        // 4-7 : Application specific data\r\n        transactionHash = keccak256(byte(0x19),byte(0),this,destination, value, data, nonce);\r\n        sender = ecrecover(transactionHash, v, r, s);\r\n        // ...\r\n    }\r\n",
  "closed_by": {
    "login": "Arachnid",
    "id": 17865,
    "node_id": "MDQ6VXNlcjE3ODY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Arachnid",
    "html_url": "https://github.com/Arachnid",
    "followers_url": "https://api.github.com/users/Arachnid/followers",
    "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
    "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
    "organizations_url": "https://api.github.com/users/Arachnid/orgs",
    "repos_url": "https://api.github.com/users/Arachnid/repos",
    "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Arachnid/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/191/reactions",
    "total_count": 25,
    "+1": 22,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 3,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/191/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274018289",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-274018289",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 274018289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDAxODI4OQ==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-20T09:12:43Z",
    "updated_at": "2017-01-20T09:12:43Z",
    "author_association": "MEMBER",
    "body": "cc @ethers @Georgi87 @Arachnid @retotrinkler",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274018289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274029157",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-274029157",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 274029157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDAyOTE1Nw==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-20T09:55:55Z",
    "updated_at": "2017-01-20T09:55:55Z",
    "author_association": "MEMBER",
    "body": "I'm thinking that it may be a good idea to define the initial byte as `0x19` instead. Since https://github.com/ethereum/go-ethereum/pull/2940 , the following is prepended before hashing in `personal_sign`: \r\n\r\n```\r\n\"\\x19Ethereum Signed Message:\\n\" + len(message).\r\n```\r\n\r\nUsing `0x19` would make it possible to extend the scheme by defining a version `0x45` (`E`) to handle these kinds of signatures. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274029157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274060582",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-274060582",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 274060582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDA2MDU4Mg==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-20T12:25:22Z",
    "updated_at": "2017-01-20T12:25:22Z",
    "author_association": "MEMBER",
    "body": "That makes sense, since that still corresponds to an RLP-encoded small integer and thus isn't a valid RLP transaction.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274060582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274062448",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-274062448",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 274062448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDA2MjQ0OA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-20T12:35:29Z",
    "updated_at": "2017-01-20T12:35:35Z",
    "author_association": "MEMBER",
    "body": "I updated the proposal to use `0x19` instead of `0x00`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274062448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274346304",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-274346304",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 274346304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDM0NjMwNA==",
    "user": {
      "login": "subtly",
      "id": 6557250,
      "node_id": "MDQ6VXNlcjY1NTcyNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6557250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subtly",
      "html_url": "https://github.com/subtly",
      "followers_url": "https://api.github.com/users/subtly/followers",
      "following_url": "https://api.github.com/users/subtly/following{/other_user}",
      "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
      "organizations_url": "https://api.github.com/users/subtly/orgs",
      "repos_url": "https://api.github.com/users/subtly/repos",
      "events_url": "https://api.github.com/users/subtly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subtly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-22T17:49:06Z",
    "updated_at": "2017-01-22T17:49:20Z",
    "author_association": "MEMBER",
    "body": "I would propose this to be scoped to / maintained within Solidity. Can this also be simplified to a suggestion for developers who use ecrecover (below)?  Might also make sense as a part of metropolis.\r\n\r\n```\r\ntxHash = keccak256(uniqueHash, data); // uniqueHash can be one of many schemes, we SUGGEST ?, as described in solidity documentation\r\naddr = ecrecover(txhash, v, r, s);\r\n```\r\n\r\n> Thus, any ERC-191 signed_data can never be an Ethereum transaction.\r\n\r\nThis may not be true in metropolis (see: #86). In metropolis account model, it could be that internal calls between accounts are the same as transactions without the '0x0' signature - which is merely a mechanism for backwards compatibility. External transactions may have signed_data as 0x0, but internal transactions may enumerate or pass signed_data for other schemes where the payload begins with 0x19.\r\n\r\nOverall Concerns:\r\n* Other systems/standards have different schemes (x509, NIST, IPFS)\r\n* Nonce is application specific\r\n* Nonce requires state and introduces complexity\r\n\r\nNonces introduces other problems and without further defining the nonce mechanism, the proposal doesn't address replay attacks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274346304/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274346546",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-274346546",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 274346546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDM0NjU0Ng==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-22T17:52:45Z",
    "updated_at": "2017-01-22T17:52:45Z",
    "author_association": "MEMBER",
    "body": "> I would propose this to be scoped to / maintained within Solidity.\r\n\r\nCan you clarify what you mean by this? This is a standard that defines how to encode strings for hashing and signing; while it would be theoretically possible to add this as a feature in Solidity, there doesn't seem a lot of point.\r\n\r\n> This may not be true in metropolis (see: #86). In metropolis account model, it could be that internal calls between accounts are the same as transactions without the '0x0' signature - which is merely a mechanism for backwards compatibility.\r\n\r\nAs long as transactions remain RLP-encoded, the prefix will ensure that they can't be replayed against contracts using this scheme.\r\n\r\n> Nonce is application specific\r\n\r\nA nonce isn't part of this EIP.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274346546/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274350509",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-274350509",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 274350509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDM1MDUwOQ==",
    "user": {
      "login": "msacks",
      "id": 189203,
      "node_id": "MDQ6VXNlcjE4OTIwMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/189203?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msacks",
      "html_url": "https://github.com/msacks",
      "followers_url": "https://api.github.com/users/msacks/followers",
      "following_url": "https://api.github.com/users/msacks/following{/other_user}",
      "gists_url": "https://api.github.com/users/msacks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msacks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msacks/subscriptions",
      "organizations_url": "https://api.github.com/users/msacks/orgs",
      "repos_url": "https://api.github.com/users/msacks/repos",
      "events_url": "https://api.github.com/users/msacks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msacks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-22T18:53:45Z",
    "updated_at": "2017-01-22T18:53:45Z",
    "author_association": "NONE",
    "body": "Nice write up.\n\nOn Sun, Jan 22, 2017 at 9:52 AM Nick Johnson <notifications@github.com>\nwrote:\n\n>\n>\n> I would propose this to be scoped to / maintained within Solidity.\n>\n>\n>\n>\n> Can you clarify what you mean by this? This is a standard that defines how\n> to encode strings for hashing and signing; while it would be theoretically\n> possible to add this as a feature in Solidity, there doesn't seem a lot of\n> point.\n>\n>\n>\n>\n> This may not be true in metropolis (see: #86\n> <https://github.com/ethereum/EIPs/issues/86>). In metropolis account\n> model, it could be that internal calls between accounts are the same as\n> transactions without the '0x0' signature - which is merely a mechanism for\n> backwards compatibility.\n>\n>\n>\n>\n> As long as transactions remain RLP-encoded, the prefix will ensure that\n> they can't be replayed against contracts using this scheme.\n>\n>\n>\n>\n> Nonce is application specific\n>\n>\n>\n>\n> A nonce isn't part of this EIP.\n>\n>\n>\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/191#issuecomment-274346546>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AALjExlZ5Q9pdXakiNNpOWOWNObcph3lks5rU5dugaJpZM4LpFNM>\n> .\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/274350509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/286871017",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-286871017",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 286871017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njg3MTAxNw==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T20:37:21Z",
    "updated_at": "2017-03-15T20:37:21Z",
    "author_association": "NONE",
    "body": "@holiman  Nice initiative! I've also been playing around with this kind access control based on [presigned messages](https://github.com/christianlundkvist/simple-multisig/blob/master/contracts/SimpleMultiSig.sol).\r\n\r\nQuestion about the versioning: Are you considering a central repository of versions and their definitions, once other uses emerge besides multisig?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/286871017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/332242686",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-332242686",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 332242686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjI0MjY4Ng==",
    "user": {
      "login": "Georgi87",
      "id": 259400,
      "node_id": "MDQ6VXNlcjI1OTQwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/259400?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Georgi87",
      "html_url": "https://github.com/Georgi87",
      "followers_url": "https://api.github.com/users/Georgi87/followers",
      "following_url": "https://api.github.com/users/Georgi87/following{/other_user}",
      "gists_url": "https://api.github.com/users/Georgi87/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Georgi87/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Georgi87/subscriptions",
      "organizations_url": "https://api.github.com/users/Georgi87/orgs",
      "repos_url": "https://api.github.com/users/Georgi87/repos",
      "events_url": "https://api.github.com/users/Georgi87/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Georgi87/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-26T15:48:06Z",
    "updated_at": "2017-09-26T15:48:06Z",
    "author_association": "NONE",
    "body": "I am wondering if the `Signed Data Standard` should allow to define different call types.\r\n\r\nUsing proxy contracts (e.g. multisigs) it would make sense to allow not only `.call` but also `.delegatecall` and `.callcode`.\r\n\r\nOne example: Assuming a multisig contract wants to approve tokens before executing a contract function, it would have to do 2 transactions using `.call`. Using `.delegatecall` those two transactions could be combined into one using a library call, which will first approve tokens and then calls the contract function.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/332242686/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/332272178",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-332272178",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 332272178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjI3MjE3OA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-26T17:22:31Z",
    "updated_at": "2017-09-26T17:22:31Z",
    "author_association": "MEMBER",
    "body": "Why does this need to be a standard?  I think it is a reasonable best practice and contracts that validate pre-signed input should validate that the input was _intended_ for that contract, but I don't see value in enforcing any kind of cross-contract standard.  In fact, this standard is effectively a standard meant to ensure that no two signatures are compatible.  :)\r\n\r\nIs the purpose of this EIP issue just to open up some discussion and recommend a best practice or is the intent that it will be formalized/standardized in some way?  If the latter, then I'm against it without substantially more argument as to why we need a standard.  If the former, I would really love it if there was a better place to put \"best practices and recommendations\" rather than EIPs.  :/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/332272178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/332884074",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-332884074",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 332884074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjg4NDA3NA==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T16:03:37Z",
    "updated_at": "2017-09-28T16:35:29Z",
    "author_association": "MEMBER",
    "body": "Is the intention for this signing format to apply in contexts like signing messages in state channels? If so, there could be a benefit to avoiding replay attacks using [EIP 155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md) values of `v`.\r\n\r\nEven if not, it would be good for the signed data standard to explicitly name valid values of `v`.\r\n\r\nie~ Is `{0, 1}` valid, or only `{27, 28}`?\r\n\r\n*Edit:* Also, a standard serialization format with the signature could be valuable, for passing around one blob of a signed message. Probably either: the simple concatenation of bytes: `message_hash + r + s + v`, or the RLP encoding of [message_hash, r, s, v]. Since all values are fixed size, RLP seems unnecessary, though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/332884074/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/343559368",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-343559368",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 343559368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzU1OTM2OA==",
    "user": {
      "login": "alex-miller-0",
      "id": 7378490,
      "node_id": "MDQ6VXNlcjczNzg0OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7378490?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-miller-0",
      "html_url": "https://github.com/alex-miller-0",
      "followers_url": "https://api.github.com/users/alex-miller-0/followers",
      "following_url": "https://api.github.com/users/alex-miller-0/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-miller-0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-miller-0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-miller-0/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-miller-0/orgs",
      "repos_url": "https://api.github.com/users/alex-miller-0/repos",
      "events_url": "https://api.github.com/users/alex-miller-0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-miller-0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-10T19:07:38Z",
    "updated_at": "2017-11-10T19:07:38Z",
    "author_association": "NONE",
    "body": "What about adding a `chainId` parameter here to prevent cross-chain replays?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/343559368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361091396",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-361091396",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 361091396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTA5MTM5Ng==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-28T20:03:54Z",
    "updated_at": "2018-01-29T03:32:19Z",
    "author_association": "CONTRIBUTOR",
    "body": " @holiman Thanks for this ERC, I think that your `version` byte means that the wallet softwares that provide UX could understand one, or several subtypes of signatures.  I think 255 types are more then we need, but `0xFF` can be used to extend this to the second byte, just like if this type contain subtypes.\r\n`0x45` (hex of char `E`) should be also a supported type by wallets, as is the legacy support, so it could also sign to old contracts. `0x00` could be the pattern you specified.\r\n\r\n@MicahZoltu The standarization is important so signatures can be verified as safe and understood by wallets. Also through natspec or some compilation magic a signature interface could be created and used in wallets together with (or inside) ABI to interact with a smart-contract, so user can sign a message using UI provided by the wallet software. \r\n\r\n@carver @alex-miller-0  Will chainId will ever be available in smart-contract? Otherwise we will need to hardcode the chainId in smart contract or passing as a variable in constructor.\r\nI think is interesting to have chainId available as a global variable to then wallets automatically sign messages with chainId included. \r\n\r\nI agree that reply attack is somewhat important, I see that the reply attack can be performed in 2 cases:\r\n 1. A forked chain (like ETC) and people keep using both sides of an smart contract which uses signed messages. This is likely to happen in case of a DAO which controls native token (or a token backed by a native token DAO).  \r\n 2. A malicious deployer deploy the same address in completly different ethereum-compatible networks and user (wrongly) use the same private key for both networks. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361091396/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361096560",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-361096560",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 361096560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTA5NjU2MA==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-28T21:14:09Z",
    "updated_at": "2018-01-28T21:31:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Consider the following example:\r\n```javascript\r\npragma solidity ^0.4.18;\r\n\r\ncontract PreSignedExample {\r\n\r\n    function getFooBarHash(bytes data, uint nonce) \r\n        internal\r\n        pure\r\n        returns (bytes32 unsignedDataHash)\r\n    {\r\n        return keccak256(byte(0x19),byte(0), address(this), data);\r\n    }\r\n\r\n    function submitPreSigned(bytes data, uint nonce, uint8 v, bytes32 r, bytes32 s)\r\n    public\r\n    {\r\n        // ...\r\n        sender = ecrecover(getFooBarHash(data, nonce v, r, s);\r\n        // ...\r\n    }\r\n\r\n}\r\n```\r\n\r\n`getApplicationUnsignedDataHash(bytes data, uint nonce) ` would be used by UI to help signing a transaction. \r\nThis could be improved within solidity, by adding a new keyword to specify that function purpose is to build a signed term to the contract. \r\nWith this, a interface could be created that could be used with ABI to wallets able to sign a message to that contract. This also will be converted into a public constant function.\r\n\r\nI would suggest something like this:\r\n```javascript\r\ncontract PreSignedExample {\r\n\r\n    mapping (address => uint256) public nonce;\r\n\r\n    /** \r\n    * @notice signs `data` for foo and bar\r\n    * @param signer the account being signed (needed to get nonce), maybe msg.signer?\r\n    * @param data the data to sign\r\n    * @signed header Safety header\r\n    * @signed version signature version type\r\n    * @signed signAtAddress `address(this)` the address of the contract receving the signature\r\n    * @signed data the data provided\r\n    * @signed nonce `this.nonce(msg.signer)` unique incremental identifier of this interaction \r\n    **/\r\n    signature signFooBar(address signer, bytes data) \r\n        signs(byte header, byte version, address signAtAddress, bytes data, uint256 nonce)\r\n    {\r\n        sign(byte(0x19),byte(0), address(this), nonce[signer], data); \r\n    }\r\n\r\n\r\n    function submitPreSigned(address signer, bytes data, uint8 v, bytes32 r, bytes32 s)\r\n    public\r\n    {\r\n        // ...\r\n        sender = ecrecover(signFooBar(signer, data), v, r, s);\r\n        // ...\r\n    }\r\n\r\n}\r\n\r\n```\r\nThere are some problems, in the example `msg.signer` is known at signing moment, but when recovering this information is unknown yet, so we should know what nonce is or provide the signer to findout the nonce. So I needed to provide `address signer` there.\r\nThis example have lots of room for improvement, such as fixed prefixes `byte header, byte version,` by modifiers. \r\n\r\nI think this is interesting to help wallets understand correctly what they are signing, and also to provide a seamless development environment.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361096560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361101328",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-361101328",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 361101328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTEwMTMyOA==",
    "user": {
      "login": "ChristopherB737",
      "id": 5546555,
      "node_id": "MDQ6VXNlcjU1NDY1NTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5546555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChristopherB737",
      "html_url": "https://github.com/ChristopherB737",
      "followers_url": "https://api.github.com/users/ChristopherB737/followers",
      "following_url": "https://api.github.com/users/ChristopherB737/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChristopherB737/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChristopherB737/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChristopherB737/subscriptions",
      "organizations_url": "https://api.github.com/users/ChristopherB737/orgs",
      "repos_url": "https://api.github.com/users/ChristopherB737/repos",
      "events_url": "https://api.github.com/users/ChristopherB737/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChristopherB737/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-28T22:18:07Z",
    "updated_at": "2018-01-28T22:18:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alex-miller-0 and @3esmit I was just messing with this today. I think the chainId is an important addition, we have to assume 1) There will be multiple public chains for which the same data packet would be useful and 2) Users prefer to have the same addresses cross chain. I defined the chainId in the contract constructor, this is ideal since you could deploy the same contract in any EVM network, therefore it doesn't make sense to hardcode this value. However, the chainId storage variable should be immutable after being set, so the setter should only appear in the constructor. With that said, adding chainId into the `keccak256()` function actually results in a stack depth failure when you do:   \r\n`bytes32 txHash = keccak256(byte(0x19), byte(0), chainId, this, destination, value, data, nonce);`   \r\nbut I was able to get it to work by simply combining the first two bytes:   \r\n`bytes32 txHash = keccak256(bytes2(0x1900), chainId, this, destination, value, data, nonce);`   \r\n\r\nWith that said, I suggest adding the chainId in that position because it fits in the hierarchy: version->chain->address->data.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/361101328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379217121",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-379217121",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 379217121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTIxNzEyMQ==",
    "user": {
      "login": "ligi",
      "id": 111600,
      "node_id": "MDQ6VXNlcjExMTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ligi",
      "html_url": "https://github.com/ligi",
      "followers_url": "https://api.github.com/users/ligi/followers",
      "following_url": "https://api.github.com/users/ligi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ligi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ligi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ligi/subscriptions",
      "organizations_url": "https://api.github.com/users/ligi/orgs",
      "repos_url": "https://api.github.com/users/ligi/repos",
      "events_url": "https://api.github.com/users/ligi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ligi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T10:43:24Z",
    "updated_at": "2018-04-06T10:43:24Z",
    "author_association": "MEMBER",
    "body": "I think this issue can be closed now as of #973 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379217121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/840982848",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-840982848",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 840982848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MDk4Mjg0OA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-14T03:37:17Z",
    "updated_at": "2021-05-14T03:37:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please reopen this issue and set it as the Discussions-To address for the EIP during Last Call.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/840982848/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/840983162",
    "html_url": "https://github.com/ethereum/EIPs/issues/191#issuecomment-840983162",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/191",
    "id": 840983162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MDk4MzE2Mg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-14T03:38:30Z",
    "updated_at": "2021-05-14T03:38:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, the code in the example does not compile.\r\n\r\nAlso, the code is using an unsupported version of Solidity. The Solidity project recommends you to use the latest version (now 0.8.4) and does not support older versions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/840983162/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
