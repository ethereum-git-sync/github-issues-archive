{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1418",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1418",
  "id": 360684938,
  "node_id": "MDU6SXNzdWUzNjA2ODQ5Mzg=",
  "number": 1418,
  "title": "Blockchain rent: fixed cost per word-block",
  "user": {
    "login": "fulldecent",
    "id": 382183,
    "node_id": "MDQ6VXNlcjM4MjE4Mw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/fulldecent",
    "html_url": "https://github.com/fulldecent",
    "followers_url": "https://api.github.com/users/fulldecent/followers",
    "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
    "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
    "organizations_url": "https://api.github.com/users/fulldecent/orgs",
    "repos_url": "https://api.github.com/users/fulldecent/repos",
    "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
    "received_events_url": "https://api.github.com/users/fulldecent/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-09-16T22:27:27Z",
  "updated_at": "2022-05-14T05:28:50Z",
  "closed_at": "2022-05-14T05:28:50Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "This topic has come up a few times I am stealing plenty of people's ideas (please help me attribute if missing). This issue discusses a WORDS * BLOCKS fixed cost approach.\r\n\r\n**Status and discussion points**\r\n\r\n- [ ] Circulate with @AlexeyAkhunov, @lrettig, identify other code owners\r\n- [ ] Review sub proposal to spend value after rent, should we merge this into the mainline proposal?\r\n- [ ] Vulnerability and replay attacks with \"Permanent removal\"\r\n  - Nonces require resources to store\r\n  - Removal of nonces is a problem\r\n  - A change in [chain id, TX signing, forking process] would solve this problem, if there is appetite, I can make a separate proposal for that and it would be a prerequisite here, also affects Casper FFG and similar proposals\r\n- [ ] What happens to rent on SELFDESTRUCT? Probably the same thing as what happens to value.\r\n\r\n---\r\n\r\nFULL TEXT FOLLOWS\r\n\r\n---\r\n\r\n# Bibliography\r\n\r\n* https://github.com/ethereum/EIPs/issues/87 EIP 103 (Serenity): Blockchain rent \r\n* https://github.com/ethereum/EIPs/issues/35 Blockchain rent: exponential rent-to-own edition\r\n* https://github.com/ethereum/EIPs/issues/88 Blockchain rent: user-side resurrectable edition\r\n  * Stores a tree hash when account runs out of gas\r\n  * Somehow you have to get the state back into the state tree (no thin clients)\r\n* https://github.com/ethereum/EIPs/pull/755 Rent Collection for Blockchain Data\r\n  * Market rate for storage price\r\n* Numerous teachings from @vbuterin \r\n* Helpful discussions from @Arachnid on Gitter\r\n\r\n# Preamble\r\n\r\n     EIP: <to be assigned>\r\n     Title: Blockchain Storage Rent Payment\r\n     Author: William Entriken <@fulldecent>\r\n     Type: Standard Track\r\n     Category: Core\r\n     Status: Draft\r\n     Created: 2018-09-16\r\n\r\n# Motivation\r\n\r\nEthereum is a public utility and we are underpricing the long-term costs of storage. Storage cost can be approximately modeled as bytes * time.\r\n\r\n# Specification\r\n\r\n**New state variables (per account)**\r\n\r\n* rent -- σ[a]_r -- an amount of value, in Wei\r\n* rentLastPaid -- σ[a]_p -- a block number that is set when:\r\n  * Value is transferred into an account\r\n  * Code is set for an account (CREATE)\r\n  * An account's storage is updated (SSTORE)\r\n* storageWords -- σ[a]_w -- number of words in storage\r\n* rentEvictBlock -- σ[a]_e -- the block number when this account will be destructed\r\n  * Note: it is possible that a client could implement the Yellow Paper without storing this value explicitly. It can be calculated simply on demand.\r\n\r\n**New constants**\r\n\r\n* RENT_WORD_COST -- The rent cost, in Wei, paid for each word-block\r\n* RENT_ACCOUNT_COST -- The rent cost, in Wei, paid for each account-block\r\n* RENT_STIPEND -- The amount of rent, in Wei, given to accounts when touched\r\n\r\n**New opcodes**\r\n\r\n* RENTBALANCE(address) -- G_BALANCE -- Similar to BALANCE\r\n* SENDRENT(address, amount) -- G_BASE -- Convert value to rent and send to account\r\n  1. σ[account]_rent += amount\r\n  2. σ[msg.sender]_balance -= amount\r\n\r\n**Updated opcodes**\r\n\r\nA new subroutine, paying for rent, is established as such:\r\n\r\n```pseudocode\r\nPAYRENT(account)\r\n    ASSERT(σ[account]_rentEviction >= NUMBER) // TODO: I'm not sure if should be > or >=\r\n    blocks_to_pay = NUMBER - σ[account]_rentLastPaid\r\n    cost_per_block = RENT_ACCOUNT_COST + RENT_WORD_COST * ⌈∥σ[account]_code∥ / 32⌉ + RENT_WORD_COST * σ[a]_storageWords\r\n    rent_to_pay = blocks_to_pay * cost_per_block\r\n    σ[account]_rent -= rent_to_pay\r\n    σ[account]_rentLastPaid = NUMBER\r\n    σ[account]_rentEvictBlock = NUMBER + ⌊σ[account]_rent / cost_per_block⌋\r\nEND PAYRENT\r\n```\r\n\r\n* SSTORE(account, key, value)\r\n  * Perform PAYRENT(account)\r\n  * Set σ[account]_rent = MAX(σ[account]_rent, RENT_STIPEND)\r\n  * Do normal SSTORE operation\r\n  * If the old value was zero for this [account, key] and the new value is non-zero, then σ[account]_storageSize++\r\n  * If the old value was non-zero for this [account, key] and the new value is zero, then σ[account]_storageSize--\r\n* CALL (and derivatives)\r\n  * If value > 0 then perform PAYRENT(account)\r\n  * Do normal CALL operation\r\n* CREATE\r\n  * Set σ[account]_rent = MAX(σ[account]_rent, RENT_STIPEND)\r\n  * Set σ[account]_rentLastPaid = HEIGHT\r\n  * Do normal CREATE operation\r\n  * Note: it is possible there is a pre-existing rent balance here\r\n\r\n**Updated substate**\r\n\r\nThe substate tuple is defined as:\r\n\r\n> A ≡ (As, Al, At, Ar)\r\n\r\nThis includes A_t, \"the set of touched accounts, of which the empty ones are deleted at the end of a transaction\".\r\n\r\nThis definition is updated to: \"the set of touched accounts, of which the empty ones or evicted ones (BLOCK >= σ[a]_rentEvictBlock) are deleted at the end of a transaction\"\r\n\r\n// TODO: I'm not sure if that should be > or >=\r\n\r\n**New built-in contract**\r\n\r\n* PAYRENT(address, amount) -- Calls PAYRENT opcode\r\n\r\n*This is a convenience for humans to send Ether from their accounts and turn it into rent. Note that simple accounts (CODESIZE == 0) cannot call arbitrary opcodes, they can only call CREATE or CALL.*\r\n\r\nThe gas cost of PAYRENT will be 10,000.\r\n\r\n**No changes to current opcode gas costs.**\r\n\r\n# Rationale \r\n\r\n**No call**\r\n\r\nA contract will not know or react to the receipt of rent. This is okay. Workaround: if a contract really needed to know who provided rent payments then it could create a function in its ABI to attribute these payments. It is already possible to send payments to a contract without attribution by using SELFDESTRUCT.\r\n\r\n**Eviction responsibility / lazy evaluation**\r\n\r\nThe specification gives responsibility for eviction to the consensus clients. This is the most predictable behavior because it happens exactly when it should. Also there need not be any incentive mechanism (refund gas, bounty) for outside participants (off chain) to monitor accounts and request removal.\r\n\r\nThis adds a computational responsibility to the clients to track eviction dates. This is possible in efficient time (at double the memory) using a double-ended priority queue (one for addressing by account address, the other for addressing by eviction date). There may be other ways of implementing this with different time-memory guarantees.\r\n\r\n**No converting rent to value**\r\n\r\nEther converted to rent cannot be converted back. Anybody that works in accounting and knows about gifts cards should tell you this is a good idea. It makes reasoning about the system much easier.\r\n\r\n**Accounts pay rent**\r\n\r\nYes, they pay rent. It costs money to keep their balances so we charge them rent.\r\n\r\n**You can lose all your money**\r\n\r\nYes, if you do not pay rent for your account or contract then you lose it all. User education is required.\r\n\r\nAlternative: spend value (Ether balance) when rent is depleted\r\n * Rename rentEvictBlock to rentUsingValueBlock\r\n * Update eviction calculation to include RENT + VALUE. Also update CALL (and friends) operations to recalculate eviction date when value is transferred. This is the new rentEvictBlock.\r\n * Update CALL (and friends), RENTBALANCE and SENDRENT operations. If HEIGHT >= rentUsingValueBlock then proceed as if rent started paying using value.\r\n\r\nThis alternative is a good idea, if there is support I can include this part formally in the specification. The specification is a little complicated so I like the informal definition above until we have some consent around it.\r\n\r\n**Permanent removal**\r\n\r\nAll state about an account is destructed during eviction. The data cannot be recovered. That's the point.\r\n\r\nHint to implementers: make sure this works:\r\n\r\n1. Send value to a new account (gets stipend)\r\n2. Pay rent to that account\r\n3. Wait until after the rent expires (account is gone)\r\n4. Send value to that account (gets stipend again)\r\n5. Deploy a contract (CREATE) to that account (stipend gets topped off)\r\n\r\n# Economics & constants\r\n\r\nAn `SSTORE` executed in 2015 cost 20,000 gas and has survived about 6 million blocks. The gas price has been around 1 ~ 50 Gwei. So basically 4,000 Wei per block per word so far. Maybe storing an account is 10 times more intensive than storing a word. But actually G_transaction is 21,000 and G_sstore is 20,000 so these are similar and they can both create new accounts / words.\r\n\r\nHow about:\r\n\r\n* RENT_WORD_COST -- 4,000 Wei\r\n* RENT_ACCOUNT_COST -- 4,000 Wei\r\n* RENT_STIPEND -- 4,000 Wei * 360 days worth of blocks\r\n\r\nThe rent is priced in cold, hard Ether. It is not negotiated by clients, it is not dynamic. It is linear. Why is this a good idea? Because right now Ethereum is a system with multiple free variables -- Ether/gas price, gas/opcodes costs, Ether/block reward. [Add some note here about reducing a system of equations...] So the end result is that we can peg one of the values and it will be okay.\r\n\r\nBy setting the RENT price in Ether and by having the existing gas prices set based on the floating rate, there is an implicit price of ~4 gwei set into the Yellow Paper. In other words, if in the future the price of gas goes to 1 Ether then people will be upset because they will say \"I paid 20,000 gas for an SSTORE\" but I only got 360 days of stipend. If I paid for the rent directly I would have gotten enough rent to last until the Sun explodes.\" I acknowledge this complaint and do not think it is sufficient to warrant dismissing this proposal.\r\n\r\nQ: There is a finite-ish amount of Ether and this proposal introduces a word-price in Ether, do math for me. A: The current size of Ethereum is about ~1 TB, maybe half of that is branch nodes. So that's like 15B words. There is about 100M Ether mined. The answer is that all the Ether can be spent on 400,000 terabyte-years of storage. I'm not sure if it is helpful to look at it that way.\r\n\r\n# Backwards compatibility\r\n\r\nThere is a 360-day transition period (related to the RENT_STIPEND). This requires a hard fork. On the block of the fork, every account is immediately funded with enough rent to pay for ~ 360 days' worth of their current storage requirements. The formal implementation is that this new rule is applied if any existing account has σ[account]_rentLastPaid = 0. Therefore this can be implemented by clients lazily or eagerly.\r\n\r\nPreexisting accounts which increase their storage needs will evict sooner than 360 days.\r\n\r\nUsers will need to be educated.\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1418/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 1,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/422592161",
    "html_url": "https://github.com/ethereum/EIPs/issues/1418#issuecomment-422592161",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418",
    "id": 422592161,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjU5MjE2MQ==",
    "user": {
      "login": "OFRBG",
      "id": 8671781,
      "node_id": "MDQ6VXNlcjg2NzE3ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8671781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OFRBG",
      "html_url": "https://github.com/OFRBG",
      "followers_url": "https://api.github.com/users/OFRBG/followers",
      "following_url": "https://api.github.com/users/OFRBG/following{/other_user}",
      "gists_url": "https://api.github.com/users/OFRBG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OFRBG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OFRBG/subscriptions",
      "organizations_url": "https://api.github.com/users/OFRBG/orgs",
      "repos_url": "https://api.github.com/users/OFRBG/repos",
      "events_url": "https://api.github.com/users/OFRBG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OFRBG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-18T23:26:45Z",
    "updated_at": "2018-09-18T23:26:45Z",
    "author_association": "NONE",
    "body": "This would enable a new set of time-based implementations. For example, it would solve the missing piece for https://github.com/ethereum/EIPs/issues/1339, which is paying to have your function call on hold.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/422592161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/462712498",
    "html_url": "https://github.com/ethereum/EIPs/issues/1418#issuecomment-462712498",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418",
    "id": 462712498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjcxMjQ5OA==",
    "user": {
      "login": "5chdn",
      "id": 15729797,
      "node_id": "MDQ6VXNlcjE1NzI5Nzk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/15729797?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/5chdn",
      "html_url": "https://github.com/5chdn",
      "followers_url": "https://api.github.com/users/5chdn/followers",
      "following_url": "https://api.github.com/users/5chdn/following{/other_user}",
      "gists_url": "https://api.github.com/users/5chdn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/5chdn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/5chdn/subscriptions",
      "organizations_url": "https://api.github.com/users/5chdn/orgs",
      "repos_url": "https://api.github.com/users/5chdn/repos",
      "events_url": "https://api.github.com/users/5chdn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/5chdn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T10:50:57Z",
    "updated_at": "2019-02-12T10:50:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you create a PR with EIP number 1418?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/462712498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/462801363",
    "html_url": "https://github.com/ethereum/EIPs/issues/1418#issuecomment-462801363",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418",
    "id": 462801363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjgwMTM2Mw==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T15:22:26Z",
    "updated_at": "2019-02-12T15:22:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@5chdn Thank you, this is #1752 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/462801363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/473418704",
    "html_url": "https://github.com/ethereum/EIPs/issues/1418#issuecomment-473418704",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418",
    "id": 473418704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzQxODcwNA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-15T19:46:30Z",
    "updated_at": "2019-03-15T19:46:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Copying relevant discussions from EM to here.\r\n\r\nThank you @arachnid and @jvluso for these points.\r\n\r\nIt is not spelled out in the proposal, but as-is this is by default a governed system. The storage cost can be changed at any time, this would require a hard fork. We are currently using the same approach with Constantinople. Specifically, EIP-1234 governs how the fixed fee for PoW miners will change.\r\n\r\nYou are both considering a market based approach (\"storage constraints\", \"floating\"). I am trying to understand more about what you mean so I can make an improved proposal. Would a proof-of-storage system be moving in the right direction of what you are thinking?\r\n\r\nPutting a couple ideas here to illustrate, but I haven't read existing work on PoStorage yet.\r\n\r\n- Assume the Ethereum mainnet storage tree is 1 TB.\r\n- Update Ethash:\r\n  - Currently, there is a 16 MB seed which generates a 1 GB+ dataset (\"seeded dataset\"). You pick a nonce and hash a bunch of times across this dataset. Your proof can be tied back to the 16 MB seed.\r\n  - Proposed is to use the state tree as a second 1 TB dataset (\"state dataset\").\r\n  - When performing Ethash, the miner chooses whether to use seeded dataset or state dataset.\r\n- Update the difficulty calculation:\r\n  - Currently, blocks based on seeded dataset are valid if the hash is less than DIFFICULTY, this stays the same.\r\n  - Propose that blocks based on state dataset are also valid if the hash is less than FULLDIFFICULTY.\r\n  - Currently DIFFICULTY changes to target 15 seconds per block.\r\n  - Proposed is that DIFFICULTY and FULLDIFFICULTY changes to target two constraints: 15 seconds per block and 50% of blocks use full dataset.\r\n- Now we can price rent based on how expensive storage is.\r\n  - If FULLDIFFICULTY = DIFFICULTY then apparently it is very easy to run a consensus node, so rent is free.\r\n  - If FULLDIFFICULTY is a super-low threshold because nobody is running a full node then rent increases to cover the full block reward.\r\n  - Somehow it scales in between these two extremes. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/473418704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/955929581",
    "html_url": "https://github.com/ethereum/EIPs/issues/1418#issuecomment-955929581",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418",
    "id": 955929581,
    "node_id": "IC_kwDOAq426M44-lPt",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-01T04:51:41Z",
    "updated_at": "2021-11-01T04:51:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Simplify: The new convenience built-in contract can be removed. Normal humans can just use a spell to send rent to an account.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/955929581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1113916457",
    "html_url": "https://github.com/ethereum/EIPs/issues/1418#issuecomment-1113916457",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418",
    "id": 1113916457,
    "node_id": "IC_kwDOAq426M5CZQQp",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-04-30T05:02:57Z",
    "updated_at": "2022-04-30T05:02:57Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1113916457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1126644898",
    "html_url": "https://github.com/ethereum/EIPs/issues/1418#issuecomment-1126644898",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1418",
    "id": 1126644898,
    "node_id": "IC_kwDOAq426M5DJzyi",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-05-14T05:28:49Z",
    "updated_at": "2022-05-14T05:28:49Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1126644898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
