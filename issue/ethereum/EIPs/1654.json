{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1654",
  "id": 390492191,
  "node_id": "MDU6SXNzdWUzOTA0OTIxOTE=",
  "number": 1654,
  "title": "ERC-1654 Dapp-wallet authentication process with contract wallets support",
  "user": {
    "login": "pazams",
    "id": 9962080,
    "node_id": "MDQ6VXNlcjk5NjIwODA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9962080?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pazams",
    "html_url": "https://github.com/pazams",
    "followers_url": "https://api.github.com/users/pazams/followers",
    "following_url": "https://api.github.com/users/pazams/following{/other_user}",
    "gists_url": "https://api.github.com/users/pazams/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pazams/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pazams/subscriptions",
    "organizations_url": "https://api.github.com/users/pazams/orgs",
    "repos_url": "https://api.github.com/users/pazams/repos",
    "events_url": "https://api.github.com/users/pazams/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pazams/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 22,
  "created_at": "2018-12-13T02:31:17Z",
  "updated_at": "2021-12-05T05:10:31Z",
  "closed_at": "2021-12-05T05:10:31Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "---\r\neip: <to be assigned>\r\ntitle: Dapp-wallet authentication process with contract wallets support\r\nauthor: Maor Zamski (@pazams)\r\ndiscussions-to: <URL>\r\nstatus: Draft\r\ntype: Meta\r\ncreated: 2018-12-12\r\n---\r\n\r\n<details><summary>First draft</summary>\r\n<!--You can leave these HTML comments in your merged EIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new EIPs. Note that an EIP number will be assigned by an editor. When opening a pull request to submit your EIP, please use an abbreviated title in the filename, `eip-draft_title_abbrev.md`. The title should be 44 characters or less.-->\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\nAn off-chain process for dapps to prove actionable control (informally, \"ownership\") over a public Ethereum address using `eth_sign`. Supports both external wallets and contract wallets.\r\n\r\n## Definitions\r\n- `contract wallet` A contract [account](https://github.com/ethereum/wiki/wiki/White-Paper#ethereum-accounts) deployed with the intent to be used as the ownership address for on-chain assets (including ether, ERC-20 tokens, and ERC-721 NFTs). It has the ability to transfer ether or dynamically execute actions on other contracts (acting as the owner of assets controlled by those contracts). Common examples of contract wallets are `multisig wallets` (such as the ones provided by [Gnosis](https://github.com/Gnosis/MultiSigWallet) and [Parity](https://github.com/ConsenSys/MultiSigWallet)) and `identity contracts`, as defined in [ERC-725](https://github.com/ethereum/EIPs/issues/725).\r\n- `external wallet` An externally owned [account](https://github.com/ethereum/wiki/wiki/White-Paper#ethereum-accounts), controlled by a private key. Currently, most on-chain assets are owned by such accounts. A common example for an external wallet are the wallets generated by MetaMask.\r\n- `actionable control` A public key is defined to have actionable control over an address if either:\r\n  - It is an external wallet AND the key is determined to correspond to the address.\r\n  - It is a contract wallet AND the key exists in the contract account state and has a purpose of `ACTION` as defined in EIP-725.\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\nThe authentication process starts with the dapp client component requesting a message signature from the wallet.\r\nThe client then proceeds to send the result to the dapp backend component along with the requested address to be used for authentication. The dapp backend recovers a public key from the signature, and checks if it has actionable control over the requested address. This check is done under consideration that the address may represent either an external wallet or a contract wallet. This process works with external wallets and EIP-725 contract wallets. For this process to be compatible with any other contract wallet, it requires the wallet to implement a small subset of EIP-725.\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\nDapps frequently offer a customised off-chain user experience in addition to their smart-contract interface. For example, a dapp may provide a push notification feature to their users, allowing them to stay notified about successful state changes associated with their public addresses. For these type of features, a dapp needs a way to authenticate that a user has actionable control over the public address associated with their account.\r\n\r\nA common practice dapps use in an authentication process is to only check if a recovered public key matches the requested authentication address. For contract wallets, this check is broken, as there is no corresponding private key to which to generate a signed message, and hence why some dapps are inaccessible for contract wallet users.  It is therefore argued that a broader approach is needed.\r\n\r\n## Specification\r\n\r\n### Dapp\r\n\r\nOn the dapp side, the dapp-wallet authentication process MUST follow these steps:\r\n1. Dapp client requests the wallet software to sign a challenge message via [`eth_sign`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign).\r\n2. Dapp client sends the signature to the dapp's backend component, along with the wallet address to be authenticated with. The address may be obtained via [`eth_accounts`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_accounts).\r\n3. Dapp backend recovers a public key from the signature.\r\n4. Dapp backend checks if the recovered key has actionable control over the provided wallet address under the assumption it could represent an external wallet OR a contract wallet. For the case of a contract wallet, it MUST be determined it supports the entirety of the EIP-725 interface via a EIP-165 interfaceID `0xdc3d2a7b` or just the `keyHasPurpose` method as a subset of it using the EIP-165 interfaceID `0xd202158d`.\r\n5. The result of the actionable control check is returned as the result of the authentication and the flow is complete.\r\n\r\nA challenge message SHOULD contain a random component. This will reduce the risk of replay attacks.\r\n\r\nA challenge message SHOULD be generated by the dapp backend AND not get sent back as input from the dapp client, but be persisted in the backend for at least the entirety of the authentication process. This will remove the risk of accepting forged challenges.\r\n\r\nThe following algorithm MAY be used by dapp backend when authenticating users with personal signed messages:\r\n\r\n```\r\nFUNCTION isSignerActionableOnAddress(challengeString, signature, walletAddress) RETURNS (successFlag, errorMsg)\r\n\r\n  SET challengeHash to the hash of: challengeString prepended with `\"\\x19Ethereum Signed Message:\\n\" + len(challengeString)`\r\n\r\n  SET recoveredKey to the public key recovered from signature and challengeHash\r\n\r\n  SET recoveredAddress to the address corresponding with recoveredKey\r\n\r\n  // try external wallet\r\n  IF walletAddress EQUALS recoveredAddress\r\n    RETURN true, nil\r\n  END IF\r\n\r\n  // else try contract wallet\r\n  SET isSupportedContract to TRUE IF walletAddress is a smart contract AND (has interfaceID 0xd202158d OR has interfaceID 0xdc3d2a7b)\r\n\r\n  IF isSupportedContract resulted in an error\r\n    RETURN false, ERROR\r\n  END IF\r\n\r\n  IF isSupportedContract equals FALSE\r\n    RETURN false, nil\r\n  END IF\r\n\r\n  SET keyHasActionPurpose to the result of calling a contract method keyHasPurpose with recoveredKey and ACTION parameters\r\n\r\n  IF keyHasActionPurpose in an error\r\n    RETURN false, ERROR\r\n  END IF\r\n\r\n  RETURN keyHasActionPurpose, nil\r\n\r\nEND FUNCTION\r\n```\r\n\r\n### Wallet\r\n\r\n#### External wallet\r\nAny software agents managing external wallets are not required to make any changes to continue to work with this process.\r\n\r\n#### Contract wallet\r\n\r\n1. The contract MUST implement the [keyHasPurpose](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-725.md#keyhaspurpose) method as in EIP-725:\r\n\r\n  ```Solidity\r\n  function keyHasPurpose(bytes32 _key, uint256 purpose) constant returns(bool exists);\r\n  ```\r\n\r\n  When passed the ACTION `purpose` parameter of `2`, the method MUST return `true` if a key is present AND it can perform actions in wallet's name (signing, logins, transactions, etc.)\r\n\r\n  When passed the ACTION `purpose` parameter of `2`, the method MUST return `false` if a key is not present OR it cannot perform actions in wallet's name (signing, logins, transactions, etc.)\r\n\r\n2. The contract MUST implement the EIP-165 method:\r\n\r\n  ```Solidity\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n  ```\r\n\r\n  It MUST return `true` if passed an `interfaceID` of `0xd202158d` OR `0xdc3d2a7b`. The former value represents a minimal subset of EIP-725 with just the `keyHasPurpose` method, while the later represents the full EIP-725 interface.\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\nThere has been a great body of work in standardizing contracts wallets, namely https://github.com/ethereum/EIPs/issues/725. However, for the current process of dapp-wallet authentication, interfaces for claims and key management are not required. Instead, a single contract method and a modification for the current process suffices. The small surface area of this proposal should allow it to be easily compatible across different types of contract wallets.\r\n\r\n## Backwards Compatibility\r\n<!--All EIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EIP must explain how the author proposes to deal with these incompatibilities. EIP submissions without a sufficient backwards compatibility treatise may be rejected outright.-->\r\n- External wallets are backwards compatible with this process.\r\n- Contract wallets with EIP-725 support, are compatible with this process without modification.\r\n- Contract wallets without EIP-725 support must implement the proposed subset of EIP-725 to be compatible with this process.\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\nPackages implementing the purposed algorithm: \r\n- Javascript: https://github.com/dapperlabs/dappauth.js\r\n- Go: https://github.com/dapperlabs/dappauth\r\n\r\n</details>\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\nAn off-chain process for dapps to assert whether an entity has authorized control (informally, \"ownership\") over a public Ethereum address using `eth_sign`. Supports both external wallets and contract wallets.\r\n\r\n## Definitions\r\n- `contract wallet` A contract [account](https://github.com/ethereum/wiki/wiki/White-Paper#ethereum-accounts) deployed with the intent to be used as the ownership address for on-chain assets (including ether, ERC-20 tokens, and ERC-721 NFTs). It has the ability to transfer ether or dynamically execute actions on other contracts (acting as the owner of assets controlled by those contracts). Common examples of contract wallets are `multisig wallets` (such as the ones provided by [Gnosis](https://github.com/Gnosis/MultiSigWallet) and [Parity](https://github.com/ConsenSys/MultiSigWallet)) and `identity contracts`, as defined in [ERC-725](https://github.com/ethereum/EIPs/issues/725).\r\n- `external wallet` An externally owned [account](https://github.com/ethereum/wiki/wiki/White-Paper#ethereum-accounts), controlled by a private key. Currently, most on-chain assets are owned by such accounts. A common example for an external wallet are the wallets generated by MetaMask.\r\n- `authorized signer` An entity is considered to have authorized control over a wallet if either:\r\n  - It produced a signature of which the recovered address matches the wallet address.\r\n  - It produced a signature of which the contract at the wallet address responds with the magic value `0x1626ba7e` to the `IsValidSignature` contract call.\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\nThe authentication process starts with the dapp client component requesting a message signature from the wallet.\r\nThe client then proceeds to send the result to the dapp backend component along with the requested address to be used for authentication. The dapp backend recovers a public key from the signature, and checks if it has authorized control over the requested address. This check is done under consideration that the address may represent either an external wallet or a contract wallet. This process works with external wallets and contract wallets that support EIP-1271 with `0x1626ba7e` as a magic return value.\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\nDapps frequently offer a customised off-chain user experience in addition to their smart-contract interface. For example, a dapp may provide a push notification feature to their users, allowing them to stay notified about successful state changes associated with their public addresses. For these type of features, a dapp needs a way to assert that a user has authorized control over the public address associated with their account.\r\n\r\nA common practice dapps use in an authentication process is to only check if a recovered public key matches the requested authentication address. For contract wallets, this check is broken, as there is no corresponding private key to which to generate a signed message, and hence why some dapps are inaccessible for contract wallet users.  It is therefore argued that a more broader approach is needed.\r\n\r\n## Specification\r\n\r\n### Dapp\r\n\r\nOn the dapp side, the dapp-wallet authentication process MUST follow these steps:\r\n1. Dapp client requests the wallet software to sign a challenge message via [`eth_sign`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign).\r\n2. Dapp client sends the signature to the dapp's backend component, along with the wallet address to be authenticated with. The address may be obtained via [`eth_accounts`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_accounts).\r\n3. Dapp backend recovers a public key from the signature.\r\n4. Dapp backend checks if the recovered key has authorized control over the provided wallet address under the assumption it could represent an external wallet OR a contract wallet. For the case of a contract wallet, it MUST call `IsValidSignature` and expect the value `0x1626ba7e` to determine whether the entity who signed the challenge has authorized control over the wallet.\r\n5. The result of the authorized control check is returned as the result of the authentication and the flow is complete.\r\n\r\nA challenge message SHOULD contain a random component. This will reduce the risk of replay attacks.\r\n\r\nA challenge message SHOULD be generated by the dapp backend AND not get sent back as input from the dapp client, but be persisted in the backend for at least the entirety of the authentication process. This will remove the risk of accepting forged challenges.\r\n\r\nThe following algorithm MAY be used by dapp backend for authenticating users with personal signed messages:\r\n\r\n```\r\nFUNCTION IsAuthorizedSigner(challengeString, signature, walletAddress) RETURNS (success)\r\n\r\n  SET personalChallengeHash to the hash of: challengeString prepended with `\"\\x19Ethereum Signed Message:\\n\" + len(challengeString)`\r\n\r\n  SET recoveredKey to the public key recovered from signature and personalChallengeHash\r\n\r\n  SET recoveredAddress to the address corresponding with recoveredKey\r\n\r\n  // try external wallet\r\n  IF walletAddress EQUALS recoveredAddress\r\n    RETURN true\r\n  END IF\r\n\r\n  SET challengeHash to the hash of: challengeString . We send just a regular Keccak256 hash, which then the smart contract hashes ontop to an erc191 hash.\r\n\r\n  SET contractResult to the result of calling IsValidSignature(challengeHash, signature) on the contract at walletAddress \r\n\r\n  IF contractResult EQUALS 0x1626ba7e\r\n    RETURN true\r\n  ELSE\r\n    RETURN false\r\n  END IF\r\n\r\nEND FUNCTION\r\n```\r\n\r\n### Wallet\r\n\r\n#### External wallet\r\nAny software agents managing external wallets are not required to make any changes to continue to work with this process.\r\n\r\n#### Contract wallet\r\n\r\n##### Contract\r\n\r\nThe contract MUST implement the [isValidSignature](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1271.md) method as suggested by EIP-1271, yet in this variation:\r\n\r\n```Solidity\r\nfunction isValidSignature(bytes32 hash, bytes _signature) returns(bytes4 magicValue);\r\n```\r\n\r\nBefore recovering a public key, the `bytes32 hash` parameter MUST get hashed again with [EIP-191](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-191.md), with 0 for \"version\" and the wallet address for \"version specific data\".\r\n\r\nThe `bytes _signature` parameter MAY contain multiple concatenated signatures in case of a multi-sig wallet.\r\n\r\nThe method MUST return `0x1626ba7e` if the public key (or keys) recovered from the signature (or signatures) are as expected according to the wallet's own key management logic. Otherwise the method MUST return `0x00000000`.\r\n\r\n##### User agent\r\n\r\nA user agent intended to work with the contract MUST generate signatures over a EIP-191 hash of a regular Keccak256 hash of the challenge message.\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\n\r\nEIP-1271 has done a great work with starting the discussion on a standard signature validation method for contracts. At the time of writing, it is still in draft, with several suggestions for the shape of the interface (e.g see [here](https://github.com/ethereum/EIPs/issues/1271#issuecomment-455356404)). This proposal takes one of the variations mentioned in the discussion, and builds on top of it a process for dapp-wallet authentication. \r\n\r\n## Backwards Compatibility\r\n<!--All EIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EIP must explain how the author proposes to deal with these incompatibilities. EIP submissions without a sufficient backwards compatibility treatise may be rejected outright.-->\r\n- external wallets are backwards compatible with this process.\r\n- contract wallets with EIP-1271 support, are compatible with this process to the extent of supporting the method format suggested here and it's corresponding magic value.\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\nPackages implementing the purposed algorithm: \r\n- Javascript: https://github.com/dapperlabs/dappauth.js\r\n- Go: https://github.com/dapperlabs/dappauth\r\n\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n\r\n---\r\nThanks to @dete @Arachnid @chrisaxiom @igorbarbashin @turbolent @jordanschalm @hwrdtm for feedback and suggestions",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1654/reactions",
    "total_count": 14,
    "+1": 14,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/447185503",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-447185503",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 447185503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzE4NTUwMw==",
    "user": {
      "login": "dete",
      "id": 1195159,
      "node_id": "MDQ6VXNlcjExOTUxNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1195159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dete",
      "html_url": "https://github.com/dete",
      "followers_url": "https://api.github.com/users/dete/followers",
      "following_url": "https://api.github.com/users/dete/following{/other_user}",
      "gists_url": "https://api.github.com/users/dete/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dete/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dete/subscriptions",
      "organizations_url": "https://api.github.com/users/dete/orgs",
      "repos_url": "https://api.github.com/users/dete/repos",
      "events_url": "https://api.github.com/users/dete/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dete/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-14T01:51:34Z",
    "updated_at": "2018-12-14T01:51:34Z",
    "author_association": "NONE",
    "body": "Thanks to @pazams for writing this up. We think that there are lots of good reasons to use smart contract wallets, even for individual users. Hopefully, lots of Dapps will make this simple change to make that use-case viable (as we will for [CryptoKitties](https://www.cryptokitties.co/)!).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/447185503/reactions",
      "total_count": 5,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/451969652",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-451969652",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 451969652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTk2OTY1Mg==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T15:22:25Z",
    "updated_at": "2019-01-07T15:22:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for putting this together!\r\n\r\nQuick questions: \r\n\r\n1. How does the function `keyHasPurpose` allow for passing a multi-sig in one-go? Also, this methods assumes that keys are pre-registered on the wallet contract, correct? \r\n\r\n2. How does one check whether a given signature is valid for a given key? Do you first  recover the signer via ECDSA method and then call `walletContract.keyHasPurpose(signer, action)`? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/451969652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/453227913",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-453227913",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 453227913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MzIyNzkxMw==",
    "user": {
      "login": "pazams",
      "id": 9962080,
      "node_id": "MDQ6VXNlcjk5NjIwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9962080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pazams",
      "html_url": "https://github.com/pazams",
      "followers_url": "https://api.github.com/users/pazams/followers",
      "following_url": "https://api.github.com/users/pazams/following{/other_user}",
      "gists_url": "https://api.github.com/users/pazams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pazams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pazams/subscriptions",
      "organizations_url": "https://api.github.com/users/pazams/orgs",
      "repos_url": "https://api.github.com/users/pazams/repos",
      "events_url": "https://api.github.com/users/pazams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pazams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-10T19:43:38Z",
    "updated_at": "2019-01-10T19:43:38Z",
    "author_association": "NONE",
    "body": "@PhABC thanks for these questions!\r\n\r\n> How does one check whether a given signature is valid for a given key? Do you first recover the signer via ECDSA method and then call walletContract.keyHasPurpose(signer, action)?\r\n\r\nCorrect. For an authentication flow, we have to first recover the signer in any case since we want to first validate in case of an external wallet. If that doesn't match, we can check under assumption of a contract wallet, which then we can already use the recover result from previous step.\r\n\r\n> How does the function keyHasPurpose allow for passing a multi-sig in one-go? Also, this methods assumes that keys are pre-registered on the wallet contract, correct?\r\n\r\nYes, this proposal assumes keys are pre-registered. It be may done with https://github.com/ethereum/EIPs/blob/master/EIPS/eip-725.md#addkey for EIP-725 wallets, but it's also valid for the keys to be hardcoded - the implementation strategy is up to the wallet.\r\n\r\nAs for support for multi-sig, that's an excellent point!\r\nWe therefore think we should pivot this suggestion, and based it on `isValidSignature` as defined in EIP-1271, instead of `keyHasPurpose` as defined in EIP-725. We keep in mind that this suggestion is describing an off-chain process, rather than an interface, so it should fit nicely on top of EIP-1271.\r\n\r\n@PhABC What are your thoughts?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/453227913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454079707",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-454079707",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 454079707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDA3OTcwNw==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-14T16:59:51Z",
    "updated_at": "2019-01-14T16:59:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Correct. For an authentication flow, we have to first recover the signer in any case since we want to first validate in case of an external wallet. If that doesn't match, we can check under assumption of a contract wallet, which then we can already use the recover result from previous step.\r\n\r\nI think this is fine for some use cases, but it's a bit less general than 1271 since it prevents other types of signatures schemes than ECDSA.\r\n\r\n> As for support for multi-sig, that's an excellent point! We therefore think we should pivot this suggestion, and based it on isValidSignature as defined in EIP-1271, instead of keyHasPurpose as defined in EIP-725. We keep in mind that this suggestion is describing an off-chain process, rather than an interface, so it should fit nicely on top of EIP-1271.\r\n\r\nThat makes sense! Yes, I think a guideline for off-chain processes like the one you are proposing can be very useful. Would you mind commenting on #1271 with your thoughts? I would like to see it being finalized pretty soon as it's relatively simple, but not many people are participating in the discussion as of now. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454079707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454369789",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-454369789",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 454369789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM2OTc4OQ==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T12:04:39Z",
    "updated_at": "2019-01-15T12:04:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey, I just published an article on \"automatic authentication signatures\"\r\nThis would allow the scheme you describe here to be performed securely without user input (no signing popup):\r\n https://medium.com/@wighawag/automatic-authentication-signatures-for-web3-dcbcbc64d6b5\r\n\r\nI guess this could be part of a different EIP but thought worth mentioning here.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454369789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454983121",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-454983121",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 454983121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDk4MzEyMQ==",
    "user": {
      "login": "pazams",
      "id": 9962080,
      "node_id": "MDQ6VXNlcjk5NjIwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9962080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pazams",
      "html_url": "https://github.com/pazams",
      "followers_url": "https://api.github.com/users/pazams/followers",
      "following_url": "https://api.github.com/users/pazams/following{/other_user}",
      "gists_url": "https://api.github.com/users/pazams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pazams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pazams/subscriptions",
      "organizations_url": "https://api.github.com/users/pazams/orgs",
      "repos_url": "https://api.github.com/users/pazams/repos",
      "events_url": "https://api.github.com/users/pazams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pazams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T23:26:04Z",
    "updated_at": "2019-01-16T23:38:18Z",
    "author_association": "NONE",
    "body": "@PhABC, done.\r\n\r\n@wighawag, you have some interesting points.  [Here](https://medium.com/@wighawag/3-proposals-for-making-web3-a-better-experience-974f97765700) you wrote: \"Upon signing, the origin (could be the hash of the origin) is inserted as part of the message to be signed\". I definitely see the value there. How will that work with a wallet like MetaMask? Since the interface of dapp-wallet communication in web wallets is javascript, how can such thing be enforced with today's tech? where's the best thread to continue this discussion?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454983121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/455481449",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-455481449",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 455481449,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTQ4MTQ0OQ==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-18T09:27:04Z",
    "updated_at": "2019-01-18T09:27:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pazams \r\nTo reply quickly here, the idea is that Metamask using the browser plugin sdk, should be aware of the origin of the document (including the embeded javascript) requesting the signature. This is how a web3 plugin like metamask can ensure an application with a different origin cannot request signature aimed at another origin: If the origin of the document is different from the one added to EIP712 envelope, the web3 browser will refuse such signature to be performed.\r\n\r\nFor discussion regarding such \"origin based\" signature scheme, I initially thought (and still think) it should be part of #712 but the consensus (at least for now) seems to be that a separate EIP would be a better option. I am planning to write such EIP but for now the best place of discussion might be the ethereum magicians forum where I posted the  article link and a quick summary at https://ethereum-magicians.org/t/3-proposals-for-making-web3-a-better-experience/1586\r\nFeel free to comment there\r\n\r\nThe 3 proposals also include an encryption/decryption scheme which should allow a seamless syncing mechanism for dapps. Encryption/decryption is currently being implemented by Metamask (though I am not sure what their exact plan is in this regard) and some discussion happened over there : https://ethereum-magicians.org/t/the-ux-of-eip-1024-encrypt-decrypt/1243\r\n\r\nAs for the authentication signature (that do not require origin checks) I added a link and a quick summary to the ethereum magicians forum, see here : https://ethereum-magicians.org/t/automatic-authentication-signature/2429\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/455481449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/462263610",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-462263610",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 462263610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjI2MzYxMA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-11T09:31:03Z",
    "updated_at": "2019-02-11T09:31:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this should be revisted for the new [ERC725 v2](https://github.com/ERC725Alliance/erc725/blob/master/docs/ERC-725.md), where the owner account at key `0x0` is a [key manager contract](https://github.com/ERC725Alliance/erc725/blob/master/docs/ERC-734.md), that can have purposes etc.\r\n\r\nI'll plan on updating the #725 issue soon.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/462263610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/483341924",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-483341924",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 483341924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MzM0MTkyNA==",
    "user": {
      "login": "pazams",
      "id": 9962080,
      "node_id": "MDQ6VXNlcjk5NjIwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9962080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pazams",
      "html_url": "https://github.com/pazams",
      "followers_url": "https://api.github.com/users/pazams/followers",
      "following_url": "https://api.github.com/users/pazams/following{/other_user}",
      "gists_url": "https://api.github.com/users/pazams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pazams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pazams/subscriptions",
      "organizations_url": "https://api.github.com/users/pazams/orgs",
      "repos_url": "https://api.github.com/users/pazams/repos",
      "events_url": "https://api.github.com/users/pazams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pazams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-15T17:20:23Z",
    "updated_at": "2019-04-15T17:20:23Z",
    "author_association": "NONE",
    "body": "@frozeman thanks for pointing this out!\r\n\r\nLet's assume a dapp get's a 130 byte signature as result of sign-in with personal sign flow. That's twice as long from the expected signature (user is using a multi sig wallet). The be able to query 725 methods, it first needs to split the signature into 65 byte chunks, recover each of the public keys, and query each of them. \r\n\r\nThat _could_ work, however, with `isValidSignature`, we can forward the signature as-is, and let the identity/wallet contract deal with the splitting logic. I think lifting that burden from dapps is important.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/483341924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545589083",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-545589083",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 545589083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTU4OTA4Mw==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T19:01:04Z",
    "updated_at": "2019-10-23T19:01:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pazams @dete Should add that the `0x1626ba7e` value was achieved via `bytes4(keccak256(\"isValidSignature(bytes32,bytes)\"))` ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545589083/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559858496",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-559858496",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 559858496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTg1ODQ5Ng==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T18:13:56Z",
    "updated_at": "2019-11-29T18:13:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can't find the EIP in the EIP folder ; https://github.com/ethereum/EIPs/tree/master/EIPS\r\n\r\nAny help?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559858496/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559882931",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-559882931",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 559882931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTg4MjkzMQ==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T21:27:15Z",
    "updated_at": "2019-11-29T21:27:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't understand why EIP1271 cant be used to achieve exactly the same as proposed here, but 1654 seems limited to the signature format of bytes32.\r\n\r\nAs a DApp developer, why should I use 1654 instead of 1271? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/559882931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/560073024",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-560073024",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 560073024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDA3MzAyNA==",
    "user": {
      "login": "pazams",
      "id": 9962080,
      "node_id": "MDQ6VXNlcjk5NjIwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9962080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pazams",
      "html_url": "https://github.com/pazams",
      "followers_url": "https://api.github.com/users/pazams/followers",
      "following_url": "https://api.github.com/users/pazams/following{/other_user}",
      "gists_url": "https://api.github.com/users/pazams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pazams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pazams/subscriptions",
      "organizations_url": "https://api.github.com/users/pazams/orgs",
      "repos_url": "https://api.github.com/users/pazams/repos",
      "events_url": "https://api.github.com/users/pazams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pazams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-01T08:06:22Z",
    "updated_at": "2019-12-01T08:06:45Z",
    "author_association": "NONE",
    "body": "> I can't find the EIP in the EIP folder ; https://github.com/ethereum/EIPs/tree/master/EIPS\r\n\r\n@PhABC , that's because the PR has been stuck since June with no reviewers follow up 😞 \r\n@PhABC , I think it might be beneficial if we can both get on a call (and any other stake holder of this EIP), so we can discuss ways to move forward? I think a call at will point would be great. I'll also do my best to have @dete on the line.\r\n\r\n> I don't understand why EIP1271 cant be used to achieve exactly the same as proposed here, but 1654 seems limited to the signature format of bytes32.\r\n\r\n@3esmit , see https://github.com/ethereum/EIPs/issues/1271#issuecomment-511509273 for an explanation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/560073024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/560177175",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-560177175",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 560177175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDE3NzE3NQ==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-02T00:00:14Z",
    "updated_at": "2019-12-02T00:00:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pazams Any special reason for not using the latest spec of 1271? The comment you linked suggests it as an arbitrary decision. I hope this standard becomes compatible with final 1271.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/560177175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/649664929",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-649664929",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 649664929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTY2NDkyOQ==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-25T16:11:27Z",
    "updated_at": "2020-06-25T16:11:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree with the variation of  ERC1271 as added here, and discussions in https://github.com/ethereum/EIPs/issues/1271 are ongoing to adopt the standard to the version with `bytes32`.\r\nYou should then make sure your standard names ERC1271 as a requirement, and make sure the fail return value is `0xffffffff`, to differentiate from silent fails.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/649664929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/650260769",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-650260769",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 650260769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDI2MDc2OQ==",
    "user": {
      "login": "pazams",
      "id": 9962080,
      "node_id": "MDQ6VXNlcjk5NjIwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9962080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pazams",
      "html_url": "https://github.com/pazams",
      "followers_url": "https://api.github.com/users/pazams/followers",
      "following_url": "https://api.github.com/users/pazams/following{/other_user}",
      "gists_url": "https://api.github.com/users/pazams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pazams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pazams/subscriptions",
      "organizations_url": "https://api.github.com/users/pazams/orgs",
      "repos_url": "https://api.github.com/users/pazams/repos",
      "events_url": "https://api.github.com/users/pazams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pazams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-26T16:06:17Z",
    "updated_at": "2020-06-26T16:06:17Z",
    "author_association": "NONE",
    "body": "@frozeman \r\n:100: Once the discussions in 1271 also result in that change, I'll be more than happy to require ERC1271 and drop the interface spec from here.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/650260769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/650263153",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-650263153",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 650263153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDI2MzE1Mw==",
    "user": {
      "login": "pazams",
      "id": 9962080,
      "node_id": "MDQ6VXNlcjk5NjIwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9962080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pazams",
      "html_url": "https://github.com/pazams",
      "followers_url": "https://api.github.com/users/pazams/followers",
      "following_url": "https://api.github.com/users/pazams/following{/other_user}",
      "gists_url": "https://api.github.com/users/pazams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pazams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pazams/subscriptions",
      "organizations_url": "https://api.github.com/users/pazams/orgs",
      "repos_url": "https://api.github.com/users/pazams/repos",
      "events_url": "https://api.github.com/users/pazams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pazams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-26T16:10:59Z",
    "updated_at": "2020-06-26T16:10:59Z",
    "author_association": "NONE",
    "body": "> @pazams Any special reason for not using the latest spec of 1271? The comment you linked suggests it as an arbitrary decision. I hope this standard becomes compatible with final 1271.\r\n\r\n@3esmit I still see a non-compatible version here  https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1271.md . \r\nHowever with the recent discussions going on in 1271 I'm hopeful that can change soon!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/650263153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/650263916",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-650263916",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 650263916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDI2MzkxNg==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-26T16:12:30Z",
    "updated_at": "2020-06-26T16:12:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Once we finalised we can make a new PR to the EIP doc\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/650263916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/696930841",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-696930841",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 696930841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjkzMDg0MQ==",
    "user": {
      "login": "pazams",
      "id": 9962080,
      "node_id": "MDQ6VXNlcjk5NjIwODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9962080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pazams",
      "html_url": "https://github.com/pazams",
      "followers_url": "https://api.github.com/users/pazams/followers",
      "following_url": "https://api.github.com/users/pazams/following{/other_user}",
      "gists_url": "https://api.github.com/users/pazams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pazams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pazams/subscriptions",
      "organizations_url": "https://api.github.com/users/pazams/orgs",
      "repos_url": "https://api.github.com/users/pazams/repos",
      "events_url": "https://api.github.com/users/pazams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pazams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-22T19:25:29Z",
    "updated_at": "2020-09-22T19:25:29Z",
    "author_association": "NONE",
    "body": "@PhABC @frozeman @3esmit \r\n[New PR for 1654](https://github.com/ethereum/EIPs/pull/2995) that now also requires 1271 as the two now converged to the same interface.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/696930841/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/697034127",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-697034127",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 697034127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NzAzNDEyNw==",
    "user": {
      "login": "pkieltyka",
      "id": 18831,
      "node_id": "MDQ6VXNlcjE4ODMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/18831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pkieltyka",
      "html_url": "https://github.com/pkieltyka",
      "followers_url": "https://api.github.com/users/pkieltyka/followers",
      "following_url": "https://api.github.com/users/pkieltyka/following{/other_user}",
      "gists_url": "https://api.github.com/users/pkieltyka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pkieltyka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pkieltyka/subscriptions",
      "organizations_url": "https://api.github.com/users/pkieltyka/orgs",
      "repos_url": "https://api.github.com/users/pkieltyka/repos",
      "events_url": "https://api.github.com/users/pkieltyka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pkieltyka/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-22T23:26:02Z",
    "updated_at": "2020-09-22T23:26:02Z",
    "author_association": "NONE",
    "body": "hey all, this might be relevant to check out: https://github.com/arcadeum/ethauth.js / https://github.com/arcadeum/go-ethauth -- it is an authorization scheme using eip712 which supports EOA's and contract wallets implemented in both Typescript and Go. The idea is a dapp makes an auth request of some claims (dapp name, expiry, origin domain), asks a wallet to sign the payload with eip712, and then encodes an ethauth-proof string. You can use the ethauth-proof directly even as an http handler/middleware, but since for contract wallets you need to call isValidSignature remotely, its not ideal to do the check per request. Instead you can think of it somewhat like OAuth, and use the ethauth claims proof and exchange it for a JWT token.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/697034127/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974757115",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-974757115",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 974757115,
    "node_id": "IC_kwDOAq426M46GZz7",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-21T05:09:47Z",
    "updated_at": "2021-11-21T05:09:47Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974757115/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986168186",
    "html_url": "https://github.com/ethereum/EIPs/issues/1654#issuecomment-986168186",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1654",
    "id": 986168186,
    "node_id": "IC_kwDOAq426M46x7t6",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-05T05:10:30Z",
    "updated_at": "2021-12-05T05:10:30Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986168186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
