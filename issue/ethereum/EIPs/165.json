{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/165/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/165/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/165/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/165",
  "id": 185910598,
  "node_id": "MDU6SXNzdWUxODU5MTA1OTg=",
  "number": 165,
  "title": "Pseudo-Introspection, or standard interface detection",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 61,
  "created_at": "2016-10-28T12:25:20Z",
  "updated_at": "2021-10-16T22:40:04Z",
  "closed_at": "2018-02-21T22:43:47Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "This EIP is being further developed as https://github.com/ethereum/EIPs/pull/881\r\n\r\n-----\r\n\r\nFor some \"standard interfaces\" like the token interface ( #20 ), it is sometimes useful to query whether a contract supports the interface and if yes, which version of the interface, in order to adapt the way in which the contract is interfaced with. Specifically for #20, a version identifier has already been proposed. This proposal wants to generalize the concept of interfaces and interface versions to interface identifiers:\r\n\r\nEvery \"standard interface\" should be assigned a unique identifier (the sha3 hash of its source representation would be suitable) as a bytes32 value. Interfaces that support pseudo-introspection should provide the following methods. Note that this is especially targeted at contracts that can also provide multiple non-conflicting interfaces. This is useful if e.g. a standard token contract also allows a \"cheque\" functionality, which would have its own interface ID, or if the token does not support allowances.\r\n\r\n``` js\r\n/// @returns true iff the interface is supported\r\nfunction supportsInterface(bytes32 interfaceID) constant returns (bool);\r\n/// @returns the (main) interface ID of this contract\r\nfunction interfaceID() constant returns (bytes32);\r\n/// @returns a bit mask of the supported interfaces.\r\nfunction supportsInterfaces(bytes32[] interfaceIDs) constant returns (bytes32 r) {\r\n  if (interfaceIDs.length > 256) throw;\r\n  for (uint i = 0; i < interfaceIDs.length; i++)\r\n    if (supportsInterface(interfaceIDs[i]))\r\n      r |= bytes32(2**i);\r\n}\r\n```\r\n\r\n**Example implementation and usage:**\r\n\r\n``` js\r\ncontract GenericInterfaceContract {\r\n    function interfaceID() constant returns (bytes32);\r\n    function supportsInterface(bytes32 _interfaceID) constant returns (bool);\r\n    function supportsInterfaces(bytes32[] interfaceIDs) constant returns (bytes32 r) {\r\n      if (interfaceIDs.length > 256) throw;\r\n      for (uint i = 0; i < interfaceIDs.length; i++)\r\n        if (supportsInterface(interfaceIDs[i]))\r\n          r |= bytes32(2**i);\r\n    }\r\n}\r\ncontract SimpleToken is GenericInterfaceContract {\r\n    bytes32 public constant interfaceID = 0xf2a53462c853462ca86b71b97dd84af6a2f7689fc12ea917d9029117d32b9fde;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    function supportsInterface(bytes32 _interfaceID) constant returns (bool) {\r\n        return _interfaceID == interfaceID;\r\n    }\r\n}\r\ncontract Token is SimpleToken {\r\n    bytes32 public constant interfaceID = 0xa2f7689fc12ea917d9029117d32b9fdef2a53462c853462ca86b71b97dd84af6;\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    function supportsInterface(bytes32 _interfaceID) constant returns (bool) {\r\n        return _interfaceID == interfaceID || super.supportsInterface(_interfaceID);\r\n    }\r\n}\r\ncontract C {\r\n    function retrieveRemainingAllowance(GenericInterfaceContract c, address owner) returns (uint) {\r\n        if (c.supportsInterface(Token.interfaceID)) {\r\n            Token t = Token(c);\r\n            return Token(c).allowance(owner, msg.sender);\r\n        } else if (c.supportsInterface(SimpleToken.interfaceID)) {\r\n            return 0;\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Note:**\r\nSince the EVM does not provide any guarantees for the semantics of contracts, any such information returned by other contracts can only be used as a guideline.\r\n\r\n**Note2:**\r\nThe convenient access to the interface ID via `Token.interfaceID` is not yet supported by solidity ( https://github.com/ethereum/solidity/issues/1290 ).\r\n\r\nCredits: This is the result of a discussion with @konradkonrad and @frozeman \r\n",
  "closed_by": {
    "login": "nicksavers",
    "id": 7483198,
    "node_id": "MDQ6VXNlcjc0ODMxOTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7483198?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nicksavers",
    "html_url": "https://github.com/nicksavers",
    "followers_url": "https://api.github.com/users/nicksavers/followers",
    "following_url": "https://api.github.com/users/nicksavers/following{/other_user}",
    "gists_url": "https://api.github.com/users/nicksavers/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nicksavers/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nicksavers/subscriptions",
    "organizations_url": "https://api.github.com/users/nicksavers/orgs",
    "repos_url": "https://api.github.com/users/nicksavers/repos",
    "events_url": "https://api.github.com/users/nicksavers/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nicksavers/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/165/reactions",
    "total_count": 19,
    "+1": 14,
    "-1": 0,
    "laugh": 0,
    "hooray": 5,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/165/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/262360669",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-262360669",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 262360669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjM2MDY2OQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-22T20:46:03Z",
    "updated_at": "2016-11-22T20:46:03Z",
    "author_association": "MEMBER",
    "body": "This would be particularly useful for ENS resolvers, and would allow removing the `has()` method, which implements an equivalent (ENS-specific) operation.\r\n\r\n`supportsInterfaces` seems like a lot of extra overhead for relatively little gain over just calling the contract multiple times, however, especially given the low number of interfaces one is likely to need to check.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/262360669/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263558475",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-263558475",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 263558475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzU1ODQ3NQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-29T12:32:34Z",
    "updated_at": "2016-11-29T12:32:34Z",
    "author_association": "MEMBER",
    "body": "A couple of other suggestions:\r\n\r\n 1. `interfaceID` assumes the existence of a 'primary' interface, and doesn't seem a-priori terribly useful. Unless there's compelling use cases for it, I'd suggest dropping it.\r\n 2. Making the interface ID the 32 bit XOR of all the function signatures the interface contains would make calculating it simpler, relying only on existing code to generate function hashes and simple arithmetic ops.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263558475/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263572196",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-263572196",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 263572196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzU3MjE5Ng==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-29T13:39:42Z",
    "updated_at": "2016-11-29T14:14:46Z",
    "author_association": "MEMBER",
    "body": "Discussing this with Chris in the Solidity channel, he pointed out that an interface is more than its ABI; it's possible for two interfaces with the same set of function signatures to have different expectations of how they operate (especially since function signatures don't include parameter names!). So, the interface ID should be a pseudorandom value with low probability of colliding with any other interface ID; it doesn't need to bear a strict relationship to the source (and arguably, shouldn't, so people don't make assumptions about it being usable as some kind of test).\r\n\r\nI agree - so ignore my earlier suggestions about constructing the interface ID from the constituent functions.\r\n\r\nEdit: On the other hand, Go does 'duck typed interfaces' and generally doesn't have a problem; although you can have two interfaces with the same ABI but different intents, the chances of both of them being relevant in a given scenario seem vanishingly small. For instance, it's easy to avoid a collision in interface definitions for ENS resolvers, and nobody's going to ask an ENS resolver if it implements, say , a token-related interface.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263572196/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263908104",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-263908104",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 263908104,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzkwODEwNA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T15:48:22Z",
    "updated_at": "2016-11-30T15:48:22Z",
    "author_association": "MEMBER",
    "body": "After some more discussion, I think we did settle on just using the xor of the function identifiers that are part of the interface as a canonical identifier.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263908104/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264515086",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-264515086",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 264515086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDUxNTA4Ng==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-02T17:43:33Z",
    "updated_at": "2017-08-09T09:17:22Z",
    "author_association": "MEMBER",
    "body": "@chriseth @Arachnid I am of the belief that we should be either copying how Go does this or how Rust does this in regards to our interfaces. They should be their own type. Something looking like this:\r\n\r\n```js\r\ncontract C {\r\n    interface I {\r\n         foo(uint256) returns (uint256);\r\n         bar(bool, string) returns (bool);\r\n    }\r\n}\r\n\r\ncontract A {\r\n     struct MyStruct {\r\n          function foo(uint256) returns (uint256);\r\n          function bar(bool, string) returns (bool);\r\n     }\r\n     MyStruct _myStruct;\r\n     D someContract;\r\n     function a_call() {\r\n          d.f(_myStruct); //passes in _myStruct as interface to D\r\n     }\r\n}\r\n\r\ncontract B {\r\n  E _e; \r\n  D _d;\r\n\r\n  function call_D() {\r\n       _d.f(_e); //passes in E to D and thus will clear because functions align.\r\n   }\r\n} \r\n\r\ncontract E {\r\n    function foo (uint256) returns (uint256) {\r\n       //some function\r\n   }\r\n   function bar (bool, string) returns (bool) {\r\n     //some function\r\n   }\r\n} \r\ncontract D is C {\r\n     function f(_interface I) {\r\n            switch type(_interface) { //switch on the types of objects passed into the interface (i think this should be mandatory to some extent)\r\n                 case A:\r\n                      uint a = _interface.foo(1);\r\n                 case B: \r\n                       bool truth = _interface.bar(true, \"something\");\r\n                 default: throw;\r\n            }\r\n     }\r\n}\r\n\r\n```\r\n\r\nI'm not sure about xor-ing it...that may work, I'm just not sure I understand it yet, need to look. What I think we can do for the type assertion is to hash for these types based on their actual function opcodes that they are utilizing/generating on the stack portion. This will make it so that we can verify that only these contracts are calling externally and can make the interface quite a useful safety mechanism. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264515086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/266277917",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-266277917",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 266277917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjI3NzkxNw==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-11T11:57:18Z",
    "updated_at": "2016-12-11T11:57:18Z",
    "author_association": "MEMBER",
    "body": "@VoR0220 I think what you're talking about is language design, and thus orthogonal to this EIP, which is mostly about how to implement the feature at the EVM level.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/266277917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/266340843",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-266340843",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 266340843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjM0MDg0Mw==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-12T04:28:47Z",
    "updated_at": "2016-12-12T04:28:47Z",
    "author_association": "MEMBER",
    "body": "I believe you might be correct. Will reread this in the morning. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/266340843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278473665",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-278473665",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 278473665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQ3MzY2NQ==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T21:53:09Z",
    "updated_at": "2017-02-08T21:53:09Z",
    "author_association": "MEMBER",
    "body": "Okay. 2 Months later, I have reread it and with some help I think I understand the proposal better. Here's my question. How might we distinguish between different versions of a contract interface? Would that need to be included? Or would it be \"Version independent\"? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/278473665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298841411",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-298841411",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 298841411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODg0MTQxMQ==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T07:33:34Z",
    "updated_at": "2017-05-03T07:33:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here are the modifications that I would do in the standard:\r\n\r\n1.- I would keep GenericInterface very simple with just one single method: `supportsInterfaces(bytes32)`. I would not include the other two methods: `supportsInterfaces` and `interfaceID`.\r\n2.- This interface should always return `true` when called with `0xf1753550` as a parameter. (This is the interface that implements `supportsInterfaces(bytes32)`. \r\n3.- This function should always return `false` when called with `0xff···ff` parameter.\r\n\r\nWith this definition, You can test if a contract implements EIP165 or not by trying to call `supportInterface` for GenericInterface (Should always return true) and an Invalid interface (Should always return false). If an exception, out of gas or the results are not true/false, then this means that this contract does not implement EIP165\r\n\r\nFor saving gas, a single generic EIP165Cache contract can exist in the blockchain.\r\n\r\nYou can see an how this implementation would be here:\r\n\r\nhttps://github.com/jbaylina/EIP165Cache/blob/master/contracts/EIP165Cache.sol",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298841411/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298912959",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-298912959",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 298912959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODkxMjk1OQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T13:37:46Z",
    "updated_at": "2017-05-03T13:37:46Z",
    "author_association": "MEMBER",
    "body": "I broadly agree, although I'm not sure it's necessary to be able to test `supportsInterface` explicitly like that; if you call it and it throws, it's safe to say the method isn't supported (throwing is the default fallback behaviour for some time now).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298912959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298922611",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-298922611",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 298922611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODkyMjYxMQ==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T14:11:33Z",
    "updated_at": "2017-05-03T14:11:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Arachnid I believe that there are some contracts (like wallets or normal addresses) that don't throw. They just do nothing. \r\nIn those old contracts, they may return false or true. What I am  testing is that they return true in a \"must Implement\" interface and false in a \"must not implement\" interface. This way we guaranty that it will work in most (if not all) old contracts.\r\n\r\nIf you agree on this, I will make some tests with the most used contracts so that they return false. We will see if this \"double check\" is necessary or not.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298922611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298939846",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-298939846",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 298939846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODkzOTg0Ng==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T15:07:55Z",
    "updated_at": "2017-05-03T15:07:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Arachnid Another question, I see that in the ENS implementation, the fingerprint is:\r\n\r\nfunction supportsInterface(bytes4 _interfaceID) constant returns (bool);\r\n\r\ninstead of\r\n\r\nfunction supportsInterface(bytes32 _interfaceID) constant returns (bool);\r\n\r\nI think it's better to use bytes32 instead of bytes4 even if we use only 4 bytes. This will give space for future ampliations.\r\n\r\nAnd may be it's too late now, but I think it would be good to also return true for the`supportsInterface` interface:\r\n\r\n0xf1753550 -> supportsInterface(bytes32)\r\n0x01ffc9a7  -> supportsInterface(bytes4)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298939846/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298953186",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-298953186",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 298953186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODk1MzE4Ng==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T15:51:26Z",
    "updated_at": "2017-05-03T15:51:26Z",
    "author_association": "MEMBER",
    "body": "`bytes4` was what was agreed on in the Solidity channel, but @chriseth never updated the draft accordingly. I don't think it's possible to change how many bytes we use without breaking backwards compatibility, so I'd vote for keeping it as `bytes4`.\r\n\r\nThere's certainly no harm in having contracts return true for the `supportsInterface` interface. I'll update the ENS contracts accordingly.\r\n\r\nSince you're working on this, any interest in submitting a PR that formalises it?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298953186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298983312",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-298983312",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 298983312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODk4MzMxMg==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T17:42:28Z",
    "updated_at": "2017-05-03T17:42:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Arachnid: You mean a PR for the standard or for the ENS?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/298983312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299029516",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-299029516",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 299029516,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTAyOTUxNg==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T20:43:30Z",
    "updated_at": "2017-05-03T20:43:30Z",
    "author_association": "MEMBER",
    "body": "I mean a pr for the current understanding of this standard.\n\nOn Wed, 3 May 2017, 18:42 Jordi Baylina, <notifications@github.com> wrote:\n\n> @Arachnid <https://github.com/Arachnid>: You mean a PR for the standard\n> or for the ENS?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/165#issuecomment-298983312>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AABFyUtSWd1ksEn-ZlhPOtymbZZtsX7xks5r2LyFgaJpZM4KjYmN>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299029516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299113682",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-299113682",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 299113682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTExMzY4Mg==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-04T07:22:05Z",
    "updated_at": "2017-05-04T07:22:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Arachnid Ok, I'm going to prepare it!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/299113682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/304242452",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-304242452",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 304242452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDI0MjQ1Mg==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-26T09:59:54Z",
    "updated_at": "2017-05-26T09:59:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have the first draft of the Specification Here:\r\nhttps://docs.google.com/document/d/16AC8gBylYgPE5zr9C4mz2fS1oYLHQf1o8sGjxmw8Juw/edit?usp=sharing\r\n\r\nI have also created and tested the EIP165Cache contract Here:\r\nhttps://github.com/jbaylina/EIP165Cache\r\n\r\nPlease, comment/correct in the doc before creating the formal PR.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/304242452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/304246295",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-304246295",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 304246295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDI0NjI5NQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-26T10:19:25Z",
    "updated_at": "2017-05-26T10:19:25Z",
    "author_association": "MEMBER",
    "body": "Looks like a good start, but it would be much easier to leave comments against the PR than in a Google Doc (and they'll be preserved for posterity).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/304246295/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/304254314",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-304254314",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 304254314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDI1NDMxNA==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-26T10:59:54Z",
    "updated_at": "2017-05-26T10:59:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok. Then I'll Create the PR.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/304254314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/304324845",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-304324845",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 304324845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDMyNDg0NQ==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-26T16:17:33Z",
    "updated_at": "2017-05-26T16:17:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just deployed the contract in testnet:\r\n\r\nhttps://ropsten.etherscan.io/address/0xb60739c904b6d202c7cb2ba4be0fd4b733374c4e#readContract",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/304324845/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/345330985",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-345330985",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 345330985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTMzMDk4NQ==",
    "user": {
      "login": "dete",
      "id": 1195159,
      "node_id": "MDQ6VXNlcjExOTUxNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1195159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dete",
      "html_url": "https://github.com/dete",
      "followers_url": "https://api.github.com/users/dete/followers",
      "following_url": "https://api.github.com/users/dete/following{/other_user}",
      "gists_url": "https://api.github.com/users/dete/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dete/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dete/subscriptions",
      "organizations_url": "https://api.github.com/users/dete/orgs",
      "repos_url": "https://api.github.com/users/dete/repos",
      "events_url": "https://api.github.com/users/dete/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dete/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T18:50:40Z",
    "updated_at": "2017-11-17T18:50:40Z",
    "author_association": "NONE",
    "body": "I'd love to ensure this is easy to adopt by folks looking at [ERC-721](https://github.com/ethereum/EIPs/issues/721), but it's really not clear to me what the right behaviour is with regards to optional functions. I see three possibilities:\r\n\r\n- The ERC-165 interface signature includes just the required methods (The sample code at the bottom of the draft spec seems to imply that this is _not_ the expected interpretation, and includes optional methods (like `symbol()`) in the signature calculation for ERC-20.)\r\n- The ERC-165 interface signature for a specific implementation includes only those optional functions that are actually implemented. This has the nice properly that you could theoretically figure out which subset of optional functionality each contract implements, but has the absolutely abysmal property that you'd have to query every possible subset of optional functionality in order to test a contract! 😬 \r\n- The ERC-165 interface signature for a specific implementation includes all optional functions. This seems a bit weird to me, because it kind of feels like promising to implement functions that you might not implement.\r\n\r\nBecause the example includes optional methods for ERC-20, I'm going to include optional methods for ERC-721. @jbaylina: Please let me know ASAP if I'm getting this wrong! :-D ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/345330985/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/345380667",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-345380667",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 345380667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM4MDY2Nw==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T22:16:16Z",
    "updated_at": "2017-11-17T22:16:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dete This interface does not contemplate optional functions. They are defined or not defined in the interface specification. If you define a function as part of the interface, it is included, if not then not.  You may want to define two interfaces one required and one optional, or may be you want to define one interface for each function, or one interface with a function that specifies the capabilities of the implementation, what ever you want.\r\n\r\nBut this is not part of this standard. This should be part of the specific standard that defines the interface or interfaces. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/345380667/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/345382512",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-345382512",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 345382512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM4MjUxMg==",
    "user": {
      "login": "dete",
      "id": 1195159,
      "node_id": "MDQ6VXNlcjExOTUxNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1195159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dete",
      "html_url": "https://github.com/dete",
      "followers_url": "https://api.github.com/users/dete/followers",
      "following_url": "https://api.github.com/users/dete/following{/other_user}",
      "gists_url": "https://api.github.com/users/dete/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dete/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dete/subscriptions",
      "organizations_url": "https://api.github.com/users/dete/orgs",
      "repos_url": "https://api.github.com/users/dete/repos",
      "events_url": "https://api.github.com/users/dete/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dete/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-17T22:25:19Z",
    "updated_at": "2017-11-17T22:25:19Z",
    "author_association": "NONE",
    "body": "I see your point.\r\n\r\nBut at the same time, some guidance is not unreasonable until norms are established. At the very least, the guidance could be essentially what you wrote:\r\n\r\n> It may be appropriate for single interface standard can define multiple ERC-165 interface signatures to indicate \"degrees\" of implementation. It is up to each interface standard to determine the appropriate granularity of interface signatures in it's own domain. For example, you could have one interface signature for core functionality, and one signature for an implementation that adds optional functionality. If one interface is a proper superset of another interface, an implementation that supports the more encompassing standard should report support for both.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/345382512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354941481",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-354941481",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 354941481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDk0MTQ4MQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-03T05:49:31Z",
    "updated_at": "2018-01-03T05:49:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "**Straw man proposal: use bool functions to achieve goal of EIP 165.**\r\n\r\nImplementation example [found in the wild](https://ethfiddle.com/09YbyJRfiI):\r\n\r\n```solidity\r\n/// @title SEKRETOOOO\r\ncontract GeneScienceInterface {\r\n    /// @dev simply a boolean to indicate this is the contract we expect to be\r\n    function isGeneScience() public pure returns (bool);\r\n\r\n    /// @dev given genes of kitten 1 & 2, return a genetic combination - may have a random factor\r\n    /// @param genes1 genes of mom\r\n    /// @param genes2 genes of sire\r\n    /// @return the genes that are supposed to be passed down the child\r\n    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256);\r\n}\r\n```\r\n\r\nWhy not simply add `supportsEIP20Basic() public pure returns (bool);` to every basic token and then `supportsEIP20() public pure returns (bool);` to full tokens?\r\n\r\nDoes this straw proposal have a greater or lesser footprint on the EVM than EIP-165?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354941481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355017503",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-355017503",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 355017503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTAxNzUwMw==",
    "user": {
      "login": "veox",
      "id": 3036030,
      "node_id": "MDQ6VXNlcjMwMzYwMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3036030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/veox",
      "html_url": "https://github.com/veox",
      "followers_url": "https://api.github.com/users/veox/followers",
      "following_url": "https://api.github.com/users/veox/following{/other_user}",
      "gists_url": "https://api.github.com/users/veox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/veox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/veox/subscriptions",
      "organizations_url": "https://api.github.com/users/veox/orgs",
      "repos_url": "https://api.github.com/users/veox/repos",
      "events_url": "https://api.github.com/users/veox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/veox/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-03T13:57:11Z",
    "updated_at": "2018-01-03T13:57:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fulldecent That wouldn't be very future-proof.\r\n\r\nFor the question of \"does contract C support interface I?\", we'd like to be able to get a `yes/no` answer, as compared to the current `yes/{execute fallback code}`.\r\n\r\nImagine this EIP having been widely adopted. Contract Ali wants to check if contract Bob supports Ali's favourite interface. Ali calls Bob with a standard function (the pre-known 4-byte selector for `supportsInterface`). Bob says \"no\" (`false`). Ali continues with the \"counter-party doesn't support interface\" branch of its code - e.g. emits an event and stops; or tries a different interface; or pings contract Cat as the next candidate counter-party.\r\n\r\nImagine now the `isSomethingSpecial` approach. Ali calls Bob, and that falls through to Bob's fallback (because Bob doesn't support that particular interface), which `revert`s. Ali has no way to inquire Bob if they can have a civil conversation. (OK, there are ways, but they're messy logic-wise.)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355017503/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355156395",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-355156395",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 355156395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTE1NjM5NQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-03T23:24:21Z",
    "updated_at": "2018-01-03T23:24:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@veox Thank you for the explanation.\r\n\r\nWe must always be prepared for executing fallback code because targets may not implement EIP-165. However I see the value EIP-165 creates is that checking for *n* interface compliances would only execute at most one fallback code. Using straw man this could trigger up to *n* fallback codes.\r\n\r\nAnd of course *n* grows fast when we start talking about ERC-20Basic, ERC-20, ERC-20v2, ...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355156395/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/357542410",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-357542410",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 357542410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzU0MjQxMA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-14T21:06:09Z",
    "updated_at": "2018-01-14T22:32:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chriseth Will you please update the original issue at the top to include the latest proposal, with bytes4. If you wish to preserve the current text for some reason, you might see how they did it at #721.\r\n\r\nAlso, can you please include a solidity interface at the top following all best practices so that others can copy paste it. Maybe this would be it.\r\n\r\n```solidity\r\ninterface ERC165 {\r\n    // Interface signature for ERC-165\r\n    bytes4 constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    function supportsInterface(bytes4 interfaceID) constant returns (bool);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/357542410/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/357544242",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-357544242",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 357544242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzU0NDI0Mg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-14T21:32:56Z",
    "updated_at": "2018-01-14T21:32:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Security note: it is not very difficult to create collisions in the 32-bit xor \"hashing\" algorithm here. If you wanted to design an interface that has the same signature as the ERC20 signature then you could do it in a reasonable amount of time.\r\n\r\nYou could then have other contract authors unwittingly implement your interface. And those contracts would test positive for your interface and for the ERC20 interface.\r\n\r\nAnyway, the algorithms are already written to do this type of attack, just look up step two of the quadratic sieve method.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/357544242/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359146830",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-359146830",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 359146830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTE0NjgzMA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T05:22:17Z",
    "updated_at": "2018-01-20T05:22:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "^ If anyone thinks this *is* a security issue, please share! Then I will have an excuse to find a collision!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359146830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359146878",
    "html_url": "https://github.com/ethereum/EIPs/issues/165#issuecomment-359146878",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/165",
    "id": 359146878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTE0Njg3OA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T05:23:32Z",
    "updated_at": "2018-01-20T05:23:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbaylina This interface should be updated to `pure` mutability. Otherwise, caching will not work!\r\n\r\nCurrent PR does not have this https://github.com/ethereum/EIPs/pull/639",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359146878/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
