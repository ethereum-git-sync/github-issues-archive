{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/781",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/781/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/781/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/781/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/781",
  "id": 277960410,
  "node_id": "MDU6SXNzdWUyNzc5NjA0MTA=",
  "number": 781,
  "title": "RFC: API method `eth_watchCall`",
  "user": {
    "login": "recmo",
    "id": 4532328,
    "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/recmo",
    "html_url": "https://github.com/recmo",
    "followers_url": "https://api.github.com/users/recmo/followers",
    "following_url": "https://api.github.com/users/recmo/following{/other_user}",
    "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
    "organizations_url": "https://api.github.com/users/recmo/orgs",
    "repos_url": "https://api.github.com/users/recmo/repos",
    "events_url": "https://api.github.com/users/recmo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/recmo/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2017-11-30T00:48:22Z",
  "updated_at": "2022-01-02T08:13:59Z",
  "closed_at": "2022-01-02T08:13:59Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I propose an API for registering any `view` function call for monitoring. Whenever the value of the function call changes, the client is notified. Much like registering for log events. \r\n\r\n**Rationale**: This functionality can be implemented efficiently. There are use cases for monitoring contracts for changes. Events cover this, but are not available when the need to monitor is discovered after deployment or by a third party.\r\n\r\n**Suggested Implementation:**\r\n\r\n* On registration:\r\n  1. execute the function as if it was a `STATICCALL` (see limitations).\r\n  2. Trace and remember all the storage locations accessed with `SLOAD`.\r\n\r\n* When a new block arrives:\r\n  1. Diff the Patricia trees to find altered storage locations.\r\n  2. Find functions whose storage access is altered.\r\n  3. Re-evaluate only those functions and compare for changes.\r\n  4. Re-register those functions (as `SLOAD` locations may depend on other state).\r\n\r\nStep 1 and 2 can be done fast and in time constant in the number of functions to monitor. Further steps are only executed for functions with a *reasonable chance* of being changed. False negatives are impossible. I expect false positive to be rare, but would love to see counterexamples.\r\n\r\n**Examples**:\r\n\r\n* Register `balanceOf(my_address)` on a token contract that does not do implements appropriate events.\r\n\r\n**Limitations**: The semantics of the function call to monitor are similar to that of [`STATICCALL`](https://github.com/ethereum/EIPs/pull/214/files?diff=unified), with the additional restriction that non-deterministic opcodes (`BLOCKHASH`, `COINBASE`, â€¦) are also disallowed. (Alternatively, they could be allowed at a risk of false negatives.)\r\n\r\n**Potential extensions**: Instead of an existing `view` method of the contract, any arbitrary piece of EVM code can be provided to be executed in the context of a given contract and monitored for changes.\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/781/reactions",
    "total_count": 10,
    "+1": 10,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/781/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/351689743",
    "html_url": "https://github.com/ethereum/EIPs/issues/781#issuecomment-351689743",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/781",
    "id": 351689743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTY4OTc0Mw==",
    "user": {
      "login": "karalabe",
      "id": 129561,
      "node_id": "MDQ6VXNlcjEyOTU2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/129561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karalabe",
      "html_url": "https://github.com/karalabe",
      "followers_url": "https://api.github.com/users/karalabe/followers",
      "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
      "organizations_url": "https://api.github.com/users/karalabe/orgs",
      "repos_url": "https://api.github.com/users/karalabe/repos",
      "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karalabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T11:51:19Z",
    "updated_at": "2017-12-14T11:51:19Z",
    "author_association": "MEMBER",
    "body": "Geth 1.8 (not yet released) has a `debug.getModifiedAccountsByHash/Number` API endpoint that can produce a list of accounts modified by a block (https://github.com/ethereum/go-ethereum/pull/15512). It is based on state diffs as you suggested.\r\n\r\nAn important limitation of this approach however is that it cannot detect modifications that change a storage slot, and than change it back to its original value in the same block (e.g. either by the same transaction, subcalls, or even multiple transactions in the same block).\r\n\r\nThis is imho a problem from your perspective as it can result in modifications not being detected within a block.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/351689743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/384868716",
    "html_url": "https://github.com/ethereum/EIPs/issues/781#issuecomment-384868716",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/781",
    "id": 384868716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDg2ODcxNg==",
    "user": {
      "login": "fabioberger",
      "id": 2151492,
      "node_id": "MDQ6VXNlcjIxNTE0OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2151492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fabioberger",
      "html_url": "https://github.com/fabioberger",
      "followers_url": "https://api.github.com/users/fabioberger/followers",
      "following_url": "https://api.github.com/users/fabioberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/fabioberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fabioberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fabioberger/subscriptions",
      "organizations_url": "https://api.github.com/users/fabioberger/orgs",
      "repos_url": "https://api.github.com/users/fabioberger/repos",
      "events_url": "https://api.github.com/users/fabioberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fabioberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T05:33:02Z",
    "updated_at": "2018-04-27T05:35:08Z",
    "author_association": "NONE",
    "body": "@karalabe thanks for linking to those RPC endpoints. Indeed the way it's implemented is similar  to @Recmo's suggestion. Unlike this RFC however, they only give account level granularity, not individual state change granularity.\r\n\r\nI think it's important to plainly state the problem `eth_watchCall` is trying to solve:\r\n\r\n**Smart contract events != State changes**\r\n\r\nCurrently Ethereum developers are expected to subscribe to smart contract events if they wish to be notified about a state change. This is inherently unreliable since events are merely proxies for the underlying state change, not emitted by the state change itself. This is not good enough for financial applications which require a very high degree of reliability.\r\n\r\n**Example**: a 0x relayer wants to prune their orderbook of orders that become invalid. Many on-chain state changes can cause an order to become invalid. \r\n\r\n![order_state_deps](https://user-images.githubusercontent.com/2151492/39345837-d365a20c-4a25-11e8-8486-e3b3fd17aabb.png)\r\n\r\nFor a given 0x order, a relayer would like to watch for state changes to the order maker's balances and allowances of various tokens. This is currently not 100% possible with events (e.g ERC20 standard does not enforce `TransferFrom` events when tokens are minted/burned). If they could watch the maker's balance/allowance directly, it doesn't matter how a developer decides to implement their smart contract, either the balance/allowance changed or it didn't. The only way to currently do this is through polling over RPC which does not scale.\r\n\r\nApropos the limitation of not picking up intermediate state changes that occur within a block, I do not see this as an issue in many use-cases. In a lot of applications (including the relayer example above) what matters is the state of the world after a new blocks inclusion. I could see it being an issue in certain reporting use-cases, but this proposal remains a hugely valuable alternative to event watching for many applications requiring a high degree of reliability and performance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/384868716/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385132173",
    "html_url": "https://github.com/ethereum/EIPs/issues/781#issuecomment-385132173",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/781",
    "id": 385132173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTEzMjE3Mw==",
    "user": {
      "login": "tjayrush",
      "id": 5417918,
      "node_id": "MDQ6VXNlcjU0MTc5MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5417918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjayrush",
      "html_url": "https://github.com/tjayrush",
      "followers_url": "https://api.github.com/users/tjayrush/followers",
      "following_url": "https://api.github.com/users/tjayrush/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjayrush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjayrush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjayrush/subscriptions",
      "organizations_url": "https://api.github.com/users/tjayrush/orgs",
      "repos_url": "https://api.github.com/users/tjayrush/repos",
      "events_url": "https://api.github.com/users/tjayrush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjayrush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-28T02:09:19Z",
    "updated_at": "2018-04-28T02:09:19Z",
    "author_association": "NONE",
    "body": "For applications such as the ones we are working on (QuickBlocks), watching for events is inadequate. If you're trying to fully audit an Ethereum address, you need to watch everything. `debug.getModifiedAccountsByHash/Number` is okay (it's much better than what's available now), but what's really needed is `debug.getInvolvedAccountsByHash/Number`.\r\n\r\nAn example of where an address is 'involved' but does have its state modified is being involved in a token mint. Token mints modify the state of the token contract, not the address being granted ownership. If you're accounting for the recipient (the account being granted ownership) this will be missed with `getModified...` because that would hit on the token address which you're not watching.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385132173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/388034402",
    "html_url": "https://github.com/ethereum/EIPs/issues/781#issuecomment-388034402",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/781",
    "id": 388034402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODAzNDQwMg==",
    "user": {
      "login": "recmo",
      "id": 4532328,
      "node_id": "MDQ6VXNlcjQ1MzIzMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4532328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/recmo",
      "html_url": "https://github.com/recmo",
      "followers_url": "https://api.github.com/users/recmo/followers",
      "following_url": "https://api.github.com/users/recmo/following{/other_user}",
      "gists_url": "https://api.github.com/users/recmo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/recmo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/recmo/subscriptions",
      "organizations_url": "https://api.github.com/users/recmo/orgs",
      "repos_url": "https://api.github.com/users/recmo/repos",
      "events_url": "https://api.github.com/users/recmo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/recmo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-10T12:04:56Z",
    "updated_at": "2018-05-10T12:04:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@karalabe \r\n\r\nConsider a popular ERC20 contract such as WETH. Assume for the moment that the WETH implementer forgot to include events. Let's say I have three accounts that I want to monitor the WETH balance of. I want to avoid calling `balanceOf` for all addresses after every block.\r\n\r\nMonitoring the three addresses with `getModifiedAccountsByHash` has many false negatives. If someone sends me WETH, the state related to my account won't change. Neither will it change if some sends from these accounts using an allowance. In fact, it only works if the accounts transfer WETH directly. There is no good way to catch these false negatives, rendering this approach incorrect.\r\n\r\nOk, so obviously what is happening is that the state we are interested in is stored in WETH, so we need to monitor the WETH address with `getModifiedAccountsByHash`. This approach has many false positives. Any change of balances for any account will trigger a change in WETH. And these happen pretty much every block. So we will be calling `balanceOf` after every block anyway.\r\n\r\nAny API needs to be agnostic to the internal workings of the smart contract. For example, it can not assume that an ERC20 contract stores a particular balance in a particular storage location. The method proposed above is agnostic, and should give accurate results without false negatives in many common cases.\r\n\r\nAs it stands, the proposal pushes most of the work to Geth. This should give better performance as false positives are filtered closer to the source. The proposal can be modified to move most of the heavy lifting to the caller. For that you would need something like \"watchStorageSlots\" instead. The client can then do most of the work.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/388034402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997341501",
    "html_url": "https://github.com/ethereum/EIPs/issues/781#issuecomment-997341501",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/781",
    "id": 997341501,
    "node_id": "IC_kwDOAq426M47cjk9",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-19T07:11:43Z",
    "updated_at": "2021-12-19T07:11:43Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997341501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003679173",
    "html_url": "https://github.com/ethereum/EIPs/issues/781#issuecomment-1003679173",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/781",
    "id": 1003679173,
    "node_id": "IC_kwDOAq426M470u3F",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T08:13:58Z",
    "updated_at": "2022-01-02T08:13:58Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003679173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
