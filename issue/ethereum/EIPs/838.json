{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/838/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/838/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/838/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/838",
  "id": 290197730,
  "node_id": "MDU6SXNzdWUyOTAxOTc3MzA=",
  "number": 838,
  "title": "EIP 838: ABI specification for REVERT reason string",
  "user": {
    "login": "federicobond",
    "id": 138426,
    "node_id": "MDQ6VXNlcjEzODQyNg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/federicobond",
    "html_url": "https://github.com/federicobond",
    "followers_url": "https://api.github.com/users/federicobond/followers",
    "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
    "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
    "organizations_url": "https://api.github.com/users/federicobond/orgs",
    "repos_url": "https://api.github.com/users/federicobond/repos",
    "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
    "received_events_url": "https://api.github.com/users/federicobond/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 32,
  "created_at": "2018-01-20T14:53:48Z",
  "updated_at": "2022-01-02T03:12:39Z",
  "closed_at": "2022-01-02T03:12:39Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "    EIP: 838\r\n    Title: ABI specification for REVERT reason string\r\n    Author: Federico Bond\r\n    Status: Draft\r\n    Created: 2017-01-20\r\n\r\n\r\n## Simple Summary\r\n\r\nA proposal to extend the ABI specification to include typed errors in the REVERT reason string.\r\n\r\n## Abstract\r\n\r\nThis proposal specifies how to encode potential error conditions in the JSON ABI of a smart contract. A high-level language could then provide a syntax for declaring and throwing these errors. The compiler will encode these errors in the `reason` parameter of the `REVERT` opcode in a way that can be easily reconstructed by libraries such as web3.\r\n\r\n## Motivation\r\n\r\nIt's important to provide clear feedback to users (and developers) about what went wrong with their Ethereum transactions. The `REVERT` opcode is a step in the right direction, as it allows smart contract developers to encode a message describing the failure in the reason parameter. There is an [implementation](1) under review in Solidity that accepts a string, thus providing a low-level interface to this parameter. However, standardizing a method for passing errors from this parameter back to clients will bring many benefits to both users and developers.\r\n\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.\r\n\r\n## Specification\r\n\r\nTo conform to this specification, compilers producing JSON ABIs SHOULD include error declarations alongside functions and events. Each error object MUST contain the keys `name` (string) and `arguments` (same types as the function’s `inputs` list). The value of `type` MUST be \"error\".\r\n\r\nExample:\r\n```\r\n{ \"type\": \"error\", \"name\": \"InsufficientBalance\", \"arguments\": [ { \"name\": \"amount\", \"type\": \"uint256\" } ] }\r\n```\r\n\r\nA selector for this error can be computed from its signature (`InsufficientBalance()` for the example above) in the same way that it's currently done for public functions and events. This selector MUST be included in the reason string so that clients can perform a lookup. Any arguments for the error are [RLP](https://github.com/ethereum/wiki/wiki/RLP) encoded in the same way as return values from functions. The exact format in which both the selector and the arguments are encoded is to be defined. The Solidity implementation mentioned above leaves room for expansion by prefixing the free-form string with `uint256(0)`.\r\n\r\nA high-level language like Solidity can then implement a syntax like this:\r\n\r\n```\r\ncontract MyToken {\r\n  error InsufficientFunds(uint256 amount);\r\n\r\n  function transfer(address _to, uint256 _amount) {\r\n    if (balances[msg.sender] <= _amount)\r\n       throw InsufficientFunds(_amount);\r\n    ...\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n## Possible extensions\r\n\r\n1. A [NatSpec](https://github.com/ethereum/wiki/wiki/Ethereum-Natural-Specification-Format) comment above the error declaration can be used to provide a default error message. Arguments to the error can be interpolated in the message string with familiar NatSpec syntax.\r\n\r\n```\r\n/// @notice You don't have enough funds to transfer `amount`.\r\nerror InsufficientFunds(uint256 amount);\r\n```\r\n\r\n2. A function may declare to its callers which errors it can throw. A list of these errors must be included in the JSON ABI item for that function, under the `errors` key. Example:\r\n\r\n```\r\nfunction transfer(address _to, uint256 _amount) throws(InsufficientFunds);\r\n```\r\n\r\nSpecial consideration should be given to error overloading if we want to support a similar syntax in the future, as errors with same name but different arguments will produce a different selector.\r\n\r\n## Backwards Compatibility\r\n\r\nApps and tools that have not implemented this spec can ignore the encoded reason string when it's not prefixed by zero.\r\n\r\n## Revisions\r\n\r\n * 2018/01/23: Improved writing and clarified summary\r\n * 2018/01/10: Initial draft\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n\r\n[1]: https://github.com/ethereum/solidity/pull/3364",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/838/reactions",
    "total_count": 34,
    "+1": 26,
    "-1": 0,
    "laugh": 0,
    "hooray": 8,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/838/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359195082",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-359195082",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 359195082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTE5NTA4Mg==",
    "user": {
      "login": "sinzin91",
      "id": 4664043,
      "node_id": "MDQ6VXNlcjQ2NjQwNDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4664043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinzin91",
      "html_url": "https://github.com/sinzin91",
      "followers_url": "https://api.github.com/users/sinzin91/followers",
      "following_url": "https://api.github.com/users/sinzin91/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinzin91/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinzin91/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinzin91/subscriptions",
      "organizations_url": "https://api.github.com/users/sinzin91/orgs",
      "repos_url": "https://api.github.com/users/sinzin91/repos",
      "events_url": "https://api.github.com/users/sinzin91/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinzin91/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T19:15:09Z",
    "updated_at": "2018-01-20T19:15:09Z",
    "author_association": "NONE",
    "body": "Great idea!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359195082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359366236",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-359366236",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 359366236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTM2NjIzNg==",
    "user": {
      "login": "pirapira",
      "id": 44281,
      "node_id": "MDQ6VXNlcjQ0Mjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/44281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pirapira",
      "html_url": "https://github.com/pirapira",
      "followers_url": "https://api.github.com/users/pirapira/followers",
      "following_url": "https://api.github.com/users/pirapira/following{/other_user}",
      "gists_url": "https://api.github.com/users/pirapira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pirapira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pirapira/subscriptions",
      "organizations_url": "https://api.github.com/users/pirapira/orgs",
      "repos_url": "https://api.github.com/users/pirapira/repos",
      "events_url": "https://api.github.com/users/pirapira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pirapira/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-22T09:21:30Z",
    "updated_at": "2018-01-22T09:21:30Z",
    "author_association": "MEMBER",
    "body": "Pinging @axic: he had some ideas how to use `REVERT` when he proposed `REVERT`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359366236/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373211989",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-373211989",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 373211989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzIxMTk4OQ==",
    "user": {
      "login": "VoR0220",
      "id": 7756785,
      "node_id": "MDQ6VXNlcjc3NTY3ODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7756785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VoR0220",
      "html_url": "https://github.com/VoR0220",
      "followers_url": "https://api.github.com/users/VoR0220/followers",
      "following_url": "https://api.github.com/users/VoR0220/following{/other_user}",
      "gists_url": "https://api.github.com/users/VoR0220/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VoR0220/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VoR0220/subscriptions",
      "organizations_url": "https://api.github.com/users/VoR0220/orgs",
      "repos_url": "https://api.github.com/users/VoR0220/repos",
      "events_url": "https://api.github.com/users/VoR0220/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VoR0220/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-14T23:45:30Z",
    "updated_at": "2018-03-14T23:45:30Z",
    "author_association": "MEMBER",
    "body": "This is an excellent idea and is the perfect workaround to the problem with reverting on the chain while containing the exact errors. It makes it interpretive like event logs. I like it. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373211989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373759480",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-373759480",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 373759480,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzc1OTQ4MA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T15:58:48Z",
    "updated_at": "2018-03-16T15:58:48Z",
    "author_association": "MEMBER",
    "body": "Good idea. The term \"reason string\" is misleading, though - it's not a string, just return data.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373759480/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375779740",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-375779740",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 375779740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTc3OTc0MA==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T19:50:35Z",
    "updated_at": "2018-03-23T19:50:35Z",
    "author_association": "NONE",
    "body": "You are right. I took `string` from the type of the parameter in the Solidity implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375779740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379238333",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379238333",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379238333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTIzODMzMw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T12:29:30Z",
    "updated_at": "2018-04-06T12:31:31Z",
    "author_association": "MEMBER",
    "body": "We have discussed how this could be implemented and I think we are going on a path to have this in the future.\r\n\r\nThe current revert-with-reason proposal had a payload of `<version><ABI encoded string>`, which resulted in `00..00 00..20 <len> <data>`.\r\n\r\nNow we could instead just assume that there is a generic error with a signature of `Error(string)`, which hashes to `08c379a0` followed by an ABI encoded string, therefore `revert(\"oh noes\")` would result in the data `08c379a0 00...20 00..07 6f68206e6f6573..00`.\r\n\r\nWe could also have `Error(cstring)`, where `cstring` is encoded as `bytes32` in the ABI, but is assumed to be a C-string, where a zero denotes the end of the string. In that case for short messages we could save same space: `60ed0e86 6f68206e6f6573..00`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379238333/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379239602",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379239602",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379239602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTIzOTYwMg==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T12:35:00Z",
    "updated_at": "2018-04-06T12:35:00Z",
    "author_association": "MEMBER",
    "body": "Why not just allow functions to specify an error ABI just as they currently specify a return ABI?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379239602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379240084",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379240084",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379240084,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI0MDA4NA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T12:36:47Z",
    "updated_at": "2018-04-06T12:36:47Z",
    "author_association": "MEMBER",
    "body": "> Why not just allow functions to specify an error ABI just as they currently specify a return ABI?\r\n\r\nHopefully that will be possible in the future, but right now we only have a feature which supports passing an error string via `require()` and `revert()`. This way people can get started with a generic error reporting feature and if in the future we extend this to support something similar to what this EIP is proposing then it will be properly part of the ABI.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379240084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379242254",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379242254",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379242254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI0MjI1NA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T12:46:04Z",
    "updated_at": "2018-04-06T12:46:04Z",
    "author_association": "MEMBER",
    "body": "In that case, why not just return an ABI encoded string, and say that all functions implicitly have an error ABI of `string`? The function selector seems unnecessary here; we don't have 'return selectors'.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379242254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379243628",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379243628",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379243628,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI0MzYyOA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T12:51:30Z",
    "updated_at": "2018-04-06T12:51:30Z",
    "author_association": "MEMBER",
    "body": "Because if we have that generic selector for `Error(string)` then we can introduce the above EIP frictionlessly. The tools do not need to have a special case handling the non-selector based legacy messages.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379243628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379246827",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379246827",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379246827,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI0NjgyNw==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T13:04:23Z",
    "updated_at": "2018-04-06T13:04:23Z",
    "author_association": "MEMBER",
    "body": "I'm suggesting that having an error selector in general is needless.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379246827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379247717",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379247717",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379247717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI0NzcxNw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T13:07:53Z",
    "updated_at": "2018-04-06T13:09:43Z",
    "author_association": "MEMBER",
    "body": "Why do you think it is needless?\r\n\r\nI imagine that most errors can be encoded as a selector only, if it is exposed to the user, without any other ABI payload.\r\n\r\nFor example:\r\n```\r\ncontract Wallet {\r\n  error UnauthorisedUser();\r\n  error InsufficientBalance();\r\n\r\n  function authorise(bytes32 hash) errors(UnathorisedUser, InsufficientBalance) {\r\n    require(authorisedUsers[msg.sender], UnauthorisedUser); // encoded as a selector only\r\n    require(msg.balance >= pending[hash].amount, InsufficientBalance); // encoded as a selector only\r\n    revert(\"Unimplemented feature\"); // encoded as Error(string) + string\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379247717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379248960",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379248960",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379248960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI0ODk2MA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T13:12:40Z",
    "updated_at": "2018-04-06T13:12:40Z",
    "author_association": "MEMBER",
    "body": "I guess the question is whether we're implementing an exception mechanism, where uncaught exceptions propagate automatically to the caller, or whether it's a C- or Go-style error mechanism. If the latter, it seems to me that errors and return values should be encoded the same way, with an ABI; if you want to distinguish error types, you can return an enum.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379248960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379311451",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379311451",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379311451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTMxMTQ1MQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T16:49:25Z",
    "updated_at": "2018-04-06T16:49:25Z",
    "author_association": "MEMBER",
    "body": "@Arachnid my impression of this is the former, this is also the default implementation of function calls, errors are always propagated upwards. Otherwise you have to implement a handler for every single error type and this includes all EVM errors like stack overflow.\r\n\r\nSo since errors are propagated, we cannot use a fixed enum and thus use the function selector to distinguish the actual error types.\r\n\r\nI thought about using a function selector and basically forcing the name to be empty, but dropped it in the end because this would allow you to decode the data in more cases (you can guess most type combinations), but that still does not help you: Now you know the structure of the data, but you cannot handle it unless you also know the meaning. The meaning is provided by having an error type or name. This is of course still no silver bullet, but I think this is as far as we can go when we want to support both propagation of arbitrary errors and handling of some known errors.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379311451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379312549",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-379312549",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 379312549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTMxMjU0OQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T16:53:38Z",
    "updated_at": "2018-04-06T16:53:38Z",
    "author_association": "MEMBER",
    "body": "Okay; if the idea is that errors can be nonlocal and propagate to arbitrary callers, I can see how sending an identifier along with everything else makes sense.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379312549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389811333",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-389811333",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 389811333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTgxMTMzMw==",
    "user": {
      "login": "jacqueswww",
      "id": 6917456,
      "node_id": "MDQ6VXNlcjY5MTc0NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6917456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jacqueswww",
      "html_url": "https://github.com/jacqueswww",
      "followers_url": "https://api.github.com/users/jacqueswww/followers",
      "following_url": "https://api.github.com/users/jacqueswww/following{/other_user}",
      "gists_url": "https://api.github.com/users/jacqueswww/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jacqueswww/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jacqueswww/subscriptions",
      "organizations_url": "https://api.github.com/users/jacqueswww/orgs",
      "repos_url": "https://api.github.com/users/jacqueswww/repos",
      "events_url": "https://api.github.com/users/jacqueswww/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jacqueswww/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-17T09:51:48Z",
    "updated_at": "2018-05-17T09:51:48Z",
    "author_association": "MEMBER",
    "body": "Hey there!\r\nJust wanted to get clarity on what was decided in terms of this EIP, so I know what to do for vyper when I want to implement the same. Will the clients support decoding an error message from the ABI definitions? Which clients currently support this?\r\nBasically following <sig: 4 bytes><abi_arguments:x bytes> format?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389811333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389852400",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-389852400",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 389852400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTg1MjQwMA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-17T12:41:04Z",
    "updated_at": "2018-05-17T12:41:04Z",
    "author_association": "MEMBER",
    "body": "@jacqueswww for the current behaviour see: https://github.com/ethereum/EIPs/issues/838#issuecomment-379238333\r\n\r\nI'm writing up a proper description of this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389852400/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399632531",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-399632531",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 399632531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTYzMjUzMQ==",
    "user": {
      "login": "ricmoo",
      "id": 975687,
      "node_id": "MDQ6VXNlcjk3NTY4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/975687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ricmoo",
      "html_url": "https://github.com/ricmoo",
      "followers_url": "https://api.github.com/users/ricmoo/followers",
      "following_url": "https://api.github.com/users/ricmoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/ricmoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ricmoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ricmoo/subscriptions",
      "organizations_url": "https://api.github.com/users/ricmoo/orgs",
      "repos_url": "https://api.github.com/users/ricmoo/repos",
      "events_url": "https://api.github.com/users/ricmoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ricmoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-23T05:14:01Z",
    "updated_at": "2018-06-23T05:14:01Z",
    "author_association": "MEMBER",
    "body": "I have added this to the experimental TypeScript branch for [ethers.js](https://github.com/ethers-io/ethers.js) and currently I do not see any version byte.\r\n\r\nI might suggest the following, if the length (in decoded bytes) of the result is congruent to 4 mod 32, then it is the above <sig><standard abi>. 0 mod 32 indicates nothing special and that the abi should be parsed as usual. Version and additions in the future will change the remainder, but libraries can start inferring from the non-word sized-ness that the result is special, and fail with a generic error if they don’t understand how to interpret the specialness and if they do understand it, do the library specific thing.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399632531/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400492665",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-400492665",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 400492665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDQ5MjY2NQ==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T23:17:34Z",
    "updated_at": "2018-06-26T23:17:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please explain the caveat \"when it's not prefixed by zero\" in the backwards compatibility section.\r\n\r\nI am concerned what is the cost in practice of this EIP against deployed contract size. The contract size limit is at https://github.com/ethereum/EIPs/blob/master/EIPS/eip-170.md\r\n\r\nHere is a contract I am familiar with https://github.com/0xcert/ethereum-erc721/blob/master/contracts/tokens/NFToken.sol and there are 19 `require` statements and 6 or so require statements. What is the additional cost, in contract size, if each `require` did also include a descriptive statement with RLP-encoded reason arguments when appropriate?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400492665/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400635517",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-400635517",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 400635517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDYzNTUxNw==",
    "user": {
      "login": "federicobond",
      "id": 138426,
      "node_id": "MDQ6VXNlcjEzODQyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138426?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/federicobond",
      "html_url": "https://github.com/federicobond",
      "followers_url": "https://api.github.com/users/federicobond/followers",
      "following_url": "https://api.github.com/users/federicobond/following{/other_user}",
      "gists_url": "https://api.github.com/users/federicobond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/federicobond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/federicobond/subscriptions",
      "organizations_url": "https://api.github.com/users/federicobond/orgs",
      "repos_url": "https://api.github.com/users/federicobond/repos",
      "events_url": "https://api.github.com/users/federicobond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/federicobond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-27T11:10:52Z",
    "updated_at": "2018-06-27T11:10:52Z",
    "author_association": "NONE",
    "body": "Note that we are already moving towards having rich error reporting in contracts. This EIPs is intended to avoid the wastefulness of storing full strings like “The amount needs to be positive” instead of short 4-byte error selectors with optional arguments.\r\n\r\nI haven’t made any calculations on the increased storage requirements, I believe those belong in the discussion of REVERT itself.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400635517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401187474",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-401187474",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 401187474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTE4NzQ3NA==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T22:04:59Z",
    "updated_at": "2018-06-28T22:04:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Actually, even the 4-byte selectors are unnecessary. I could explain how that works but it might be a premature optimization. That's why I'm asking for some metrics.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401187474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401194101",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-401194101",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 401194101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTE5NDEwMQ==",
    "user": {
      "login": "ricmoo",
      "id": 975687,
      "node_id": "MDQ6VXNlcjk3NTY4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/975687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ricmoo",
      "html_url": "https://github.com/ricmoo",
      "followers_url": "https://api.github.com/users/ricmoo/followers",
      "following_url": "https://api.github.com/users/ricmoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/ricmoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ricmoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ricmoo/subscriptions",
      "organizations_url": "https://api.github.com/users/ricmoo/orgs",
      "repos_url": "https://api.github.com/users/ricmoo/repos",
      "events_url": "https://api.github.com/users/ricmoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ricmoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T22:38:18Z",
    "updated_at": "2018-06-29T04:36:50Z",
    "author_association": "MEMBER",
    "body": "Keep in mind one advantage of the 4 byte selector is determining error conditions vs correct operation. All results from a contract are currently congruent to 0 mod 32 bytes. The 4 bytes extra provides a nice safe way to detect something isn’t normal. Just something to keep in mind. :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/401194101/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458919375",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-458919375",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 458919375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODkxOTM3NQ==",
    "user": {
      "login": "LogvinovLeon",
      "id": 6204356,
      "node_id": "MDQ6VXNlcjYyMDQzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6204356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LogvinovLeon",
      "html_url": "https://github.com/LogvinovLeon",
      "followers_url": "https://api.github.com/users/LogvinovLeon/followers",
      "following_url": "https://api.github.com/users/LogvinovLeon/following{/other_user}",
      "gists_url": "https://api.github.com/users/LogvinovLeon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LogvinovLeon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LogvinovLeon/subscriptions",
      "organizations_url": "https://api.github.com/users/LogvinovLeon/orgs",
      "repos_url": "https://api.github.com/users/LogvinovLeon/repos",
      "events_url": "https://api.github.com/users/LogvinovLeon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LogvinovLeon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T12:01:06Z",
    "updated_at": "2019-01-30T12:01:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "## Current situation\r\n\r\nThis EIP was created on 20.01.2018 and last edited on 23.01.2018. Solidity since released [revert reasons](https://github.com/ethereum/solidity/pull/3364) in `v0.4.22` on the 17.04.2018 and people love them. Currently, the assumption is that every error has the implicit ABI `Error(string)`. And it's parameters gets encoded in the same way as function call arguments using ABI encoding.\r\nTherefore:\r\n\r\n```solidity\r\nrevert(\"Not enough Ether provided.\");\r\n```\r\n\r\nGets encoded as:\r\n\r\n```\r\n0x08c379a0                                                         // Function selector for Error(string)\r\n0x0000000000000000000000000000000000000000000000000000000000000020 // Data offset\r\n0x000000000000000000000000000000000000000000000000000000000000001a // String length\r\n0x4e6f7420656e6f7567682045746865722070726f76696465642e000000000000 // String data\r\n```\r\n\r\n## Motivation\r\n\r\nSometimes that is not enough and people want to include additional data in their on-chain error messages. This is overall consistent with the idea of:\r\n\r\n> moving towards having rich error reporting in contracts @federicobond\r\n\r\nIt's worth mentioning that as @chriseth wrote above this EIP is not intended to be a solution for go-style error handling. It's not a solution for a happy path. Therefore gas costs should not be of the highest priority here. User experience should be.\r\n\r\nBecause we're not talking about error-handling in the scope of the transaction (not separate functions) - it doesn't make sense, in my opinion, to define which errors does the function throw. In any real-life scenario, your function will be interacting with other functions so this list of errors will either become really long or if we introduce the hierarchy as in Java - every function will have the topmost error like `IOError` which is of no use.\r\n\r\nOn the contrary - errors are being thrown by the contracts and they're the one that should be exposing data about their error formats (ABIs).\r\n\r\n## Proposed solution\r\n\r\nEach solidity contract MAY define additional errors.\r\n```solidity\r\nerror UnauthorisedUser(uint userId);\r\nerror InsufficientBalance(uint userId, address token);\r\n```\r\nThe error schema that is used now MAY be explicitly defined:\r\n```solidity\r\nerror Error(string message);\r\n```\r\nbut it doesn't need to be. Similar to default constructor.\r\nThe ABI is described in the EIP itself. When a revert happens it's parameters are being ABI encoded as if it was the call data using the error ABI.\r\n\r\nA high-level language like Solidity can then implement a syntax like this:\r\n```solidity\r\nrevert UnauthorisedUser(userId);\r\nrevert InsufficientBalance(userId, token);\r\nrevert Error(\"Usual revert reason\"); // Results in the same behaviour as `revert(\"Usual revert reason\");`\r\n```\r\nIt can be also used in `require` calls\r\n```solidity\r\nrequire(isAuthorised[userId], UnauthorisedUser(userId));\r\nrequire(balance[userId][token] > 0, InsufficientBalance(userId, token));\r\n```\r\nAnd `revert`s\r\n```solidity\r\nrevert(UnauthorisedUser(userId));\r\nrevert(InsufficientBalance(userId, token));\r\n```\r\n\r\nThis is fully backwards compatible. Old smart contracts can just update to the new version of Solidity and the code will work.\r\n\r\nMoreover - if you don't need additional data and just want error codes - you can define errors without parameters and the revert reason will just be the 4-byte selector.\r\n\r\nClient-side libraries can decode those errors and their parameters with human-readable names if they have the ABI of the contract that initiated an error.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458919375/reactions",
      "total_count": 5,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/459999456",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-459999456",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 459999456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTk5OTQ1Ng==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-02T21:10:51Z",
    "updated_at": "2019-02-02T21:10:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@LogvinovLeon You've done a great job explaining the perspective of the implementing contract and specifying the language.\r\n\r\n# Point 1 -- do we actually need data?\r\n\r\nCould we also consider a few end-to-end use cases? Examples like \r\n\r\n* `throw InsufficientFunds(_amount);`\r\n* `require(isAuthorised[userId], UnauthorisedUser(userId));`\r\n* `require(balance[userId][token] > 0, InsufficientBalance(userId, token));`\r\n\r\ndon't look like any revert messages I've seen. Here are two contracts with revert messages we could consider:\r\n\r\n* https://github.com/0xcert/framework/blob/master/packages/0xcert-ethereum-erc20-contracts/src/contracts/token.sol (Java style, without hierarchy)\r\n* https://github.com/compound-finance/compound-money-market/blob/master/contracts/StableCoinInterestRateModel.sol (Golang style)\r\n\r\nIn both cases they are not passing back data.\r\n\r\nI think the above examples when implemented in code are much more likely to be:\r\n\r\n* `throw InsufficientFunds();` // Who cares what the amount is? The caller should know what value they entered!\r\n* `require(isAuthorised[userId], CallerNotAuthorized());` // I think the caller should know who they are, no need to tell them.\r\n* `require(balance[userId][token] > 0, InsufficientBalance());` // If this is an ERC-20 style product then I think the user knows who they are and what they are transferring. To return that information would be redundant.\r\n\r\n# Topic 2 -- try catch\r\n\r\nIf `revert` will send data in the same style of ABI as a `call` then we can expect developers will demand this syntax as well:\r\n\r\n```solidity\r\ninterface ERC20 {\r\n    error InsufficientBalance();\r\n    ...\r\n}\r\n\r\ncontract Faucet {\r\n    error FaucetEmpty();\r\n\r\n    ERC20 underlyingAsset;\r\n \r\n    function getAirDrop() external {\r\n        try {\r\n            token.transferFrom(address(self), msg.sender, 1)\r\n        } catch(InsufficientBalance /* theError */) {\r\n            throw FaucetEmpty();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf we are designing specifically with the goal of never having try catch then would should have a full argument on that presented in the EIP.\r\n\r\nPractically, there is also a namespacing issue here. Is an `ERC20.InsufficientBalance` equivalent to an error with the same name from a different interface/contract?\r\n\r\n# Point 3 -- error propagation\r\n\r\nTake for example he air drop contract. What if the underlying asset is an [0xcert implementation of ERC-20](https://github.com/0xcert/framework/blob/master/packages/0xcert-ethereum-erc20-contracts/src/contracts/token.sol), it also has the error condition `ALLOWANCE_ALREADY_SET`. It is a non-standard extension to ERC-20. This is an error that the caller will not expect. So will this propagate up to the human caller when it fails through the try/catch? The human will see an error like `ERROR: 4d24af38` in MetaMask because it could not be in the contract's ABI.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/459999456/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/460197498",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-460197498",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 460197498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDE5NzQ5OA==",
    "user": {
      "login": "LogvinovLeon",
      "id": 6204356,
      "node_id": "MDQ6VXNlcjYyMDQzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6204356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LogvinovLeon",
      "html_url": "https://github.com/LogvinovLeon",
      "followers_url": "https://api.github.com/users/LogvinovLeon/followers",
      "following_url": "https://api.github.com/users/LogvinovLeon/following{/other_user}",
      "gists_url": "https://api.github.com/users/LogvinovLeon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LogvinovLeon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LogvinovLeon/subscriptions",
      "organizations_url": "https://api.github.com/users/LogvinovLeon/orgs",
      "repos_url": "https://api.github.com/users/LogvinovLeon/repos",
      "events_url": "https://api.github.com/users/LogvinovLeon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LogvinovLeon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-04T10:27:24Z",
    "updated_at": "2019-02-04T10:27:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fulldecent Thanks for your comment. I'll try to address it.\r\n\r\nWith the simple contracts - we don't. When I send `ERC20` and I get `INSUFFICIENT_BALANCE` - I know I should get a bigger balance. Things start to get worse when I engage in larger more complex transactions. Where inside of that transaction multiple contracts send tokens/change state of each other. If I know that my transaction has 6-7 sends inside of it and I get `INSUFFICIENT_BALANCE` there's not much I can do. Who has sent it? Which token? At the same time - it's  wasteful for a token to throw `INSUFFICIENT_BALANCE(tokenAddress, senderAddress, ownerAddress)` because caller knows that data and can know better what to do with that. This EIP is not supposed to add `try-catch` functionality for Solidity. One can argue that for `REVERT`s it already exists on an inter-call level (you need to write assembly for that). You can catch a `REVERT` and rewrap it. Or ignore it. Or add addtional data. The problem is that now this is purely theoretical because you need to operate with strings. And as soon as you touch strings in solidity you run out of gas ;) Doing proper try-catch within a single call is much harder. I'm just saying that if we want `REVERT`s to be more usefull - we'd like to have more structure to them. This EIP does not define how will this flexibility and structure be used. It does not suggest programming patterns. It just gives a useful tool to experiment with patterns. Yes - I understand that there will be further EIPs about errors in Solidity and that this one is hardly the last one. It's not pretending to be. I'm cutting the scope on purpose. I think this small feature is useful. Do you agree?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/460197498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/462363456",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-462363456",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 462363456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjM2MzQ1Ng==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-11T15:13:27Z",
    "updated_at": "2019-02-11T15:13:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I hear the pain. It makes sense. Maybe the simple, and extensible way to do this is:\r\n\r\nA normal asset transfer. Already backwards compatible with EIPs like ERC-721.\r\n\r\n```solidity\r\nfunction transfer(address _to, uint256 _amount) throws(byte statusCode);\r\n```\r\n\r\nThis is how Compound Finance and others already work.\r\n\r\n```solidity\r\nfunction getOraclePrice(address asset, uint256 time) returns(uint256 price) throws(byte statusCode);\r\n```\r\n\r\nHere is how your batch transfer would work.\r\n\r\n```solidity\r\nfunction batchTransfer(address asset[], uint256 quantities[], address recipient) \r\n    returns(uint256 timestamp) \r\n    throws(byte statusCode, uint256 failedTransferIndex);\r\n```\r\n\r\nAnd all of these support the obvious try-catch syntax:\r\n\r\n```solidity\r\ncontract BankAgent {\r\n    function settleFunds() {\r\n        uint timestamp;\r\n        try {\r\n            timestamp = batchTransfer(...);\r\n        } catch (uint256 failedTransferIndex) {\r\n            pauseContract(); // block further actions until settlement is possible\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHere the try-catch only supports a single statement. The verbosity is justified by having an explicit code path for when a function call reverts. It is already much cleaner than using assembly.\r\n\r\nThen the scope of this EIP is limited a programming convention. To assign semantics to these status codes we need something else like #1066.\r\n\r\n---\r\n\r\nIf semantics (i.e. what exact message does MetaMask and other client software show end users) is important then we need to address the namespacing issue. And we should have buy-in from MetaMask. In contrast, the proposal in this comment is actionable without relying on anybody else.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/462363456/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/824717043",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-824717043",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 824717043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDcxNzA0Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-22T10:15:15Z",
    "updated_at": "2021-04-22T10:15:15Z",
    "author_association": "MEMBER",
    "body": "This has been implemented in Solidity 0.8.4.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/824717043/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/824718079",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-824718079",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 824718079,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDcxODA3OQ==",
    "user": {
      "login": "ricmoo",
      "id": 975687,
      "node_id": "MDQ6VXNlcjk3NTY4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/975687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ricmoo",
      "html_url": "https://github.com/ricmoo",
      "followers_url": "https://api.github.com/users/ricmoo/followers",
      "following_url": "https://api.github.com/users/ricmoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/ricmoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ricmoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ricmoo/subscriptions",
      "organizations_url": "https://api.github.com/users/ricmoo/orgs",
      "repos_url": "https://api.github.com/users/ricmoo/repos",
      "events_url": "https://api.github.com/users/ricmoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ricmoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-22T10:17:02Z",
    "updated_at": "2021-04-22T10:21:52Z",
    "author_association": "MEMBER",
    "body": "Can we get this added to the official EIPs branch so it is included in eips.ethereum.org? I'm not sure what it means if the initial draft is final. :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/824718079/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/824969837",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-824969837",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 824969837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDk2OTgzNw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-22T15:59:55Z",
    "updated_at": "2021-04-22T15:59:55Z",
    "author_association": "MEMBER",
    "body": "Oh by the way: Solidity reserved the following selectors for future use:\r\n - 0x00000000\r\n - 0xffffffff\r\n\r\nAnd those two currently cannot be defined in user code (which is maybe less relevant for the EIP):\r\n - `Error(string)`\r\n - `Panic(uint256)`\r\n\r\nSo maybe at least the first two could be added to the EIP.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/824969837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/829323389",
    "html_url": "https://github.com/ethereum/EIPs/issues/838#issuecomment-829323389",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/838",
    "id": 829323389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTMyMzM4OQ==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-29T15:13:49Z",
    "updated_at": "2021-04-29T15:13:49Z",
    "author_association": "MEMBER",
    "body": "Note that the way Solidity implemented EIP838 could be interpreted to deviate from the standard specified here. Specifically:\r\n\r\n> Any arguments for the error are RLP encoded in the same way as return values from functions. The exact format in which both the selector and the arguments are encoded is to be defined. The Solidity implementation mentioned above leaves room for expansion by prefixing the free-form string with uint256(0).\r\n\r\nEIP 838 does not specify how data is encoded but suggests RLP. At the same time, it says \"in the same way as return values from functions\" - which is the case for the Solidity implementation: It uses ABI encoding. More details can be found in the [Solidity documentation](https://docs.soliditylang.org/en/v0.8.4/abi-spec.html#errors)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/829323389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
