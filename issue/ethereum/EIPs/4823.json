{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/4823",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/4823/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/4823/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/4823/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/4823",
  "id": 1141702067,
  "node_id": "I_kwDOAq426M5EDP2z",
  "number": 4823,
  "title": "Royalty Bearing NFTs",
  "user": {
    "login": "Therecanbeonlyone1969",
    "id": 20665612,
    "node_id": "MDQ6VXNlcjIwNjY1NjEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/20665612?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Therecanbeonlyone1969",
    "html_url": "https://github.com/Therecanbeonlyone1969",
    "followers_url": "https://api.github.com/users/Therecanbeonlyone1969/followers",
    "following_url": "https://api.github.com/users/Therecanbeonlyone1969/following{/other_user}",
    "gists_url": "https://api.github.com/users/Therecanbeonlyone1969/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Therecanbeonlyone1969/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Therecanbeonlyone1969/subscriptions",
    "organizations_url": "https://api.github.com/users/Therecanbeonlyone1969/orgs",
    "repos_url": "https://api.github.com/users/Therecanbeonlyone1969/repos",
    "events_url": "https://api.github.com/users/Therecanbeonlyone1969/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Therecanbeonlyone1969/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-02-17T18:28:22Z",
  "updated_at": "2022-07-18T18:08:49Z",
  "closed_at": "2022-02-17T19:01:09Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "EIP: TBD\r\n\r\nTitle: Royalty Bearing NFTs\r\n\r\nDescription: This proposal outlines the structure of an extension of the ERC721 standard for NFTs to correctly define, process, and pay (hierarchical) onchain royalties from NFT sales, and goes beyond [EIP-2981](https://eips.ethereum.org/EIPS/eip-2981).\r\n\r\nAuthor: Andreas Freund (@Therecanbeonlyone1969) \r\n\r\nStatus: Draft\r\n\r\nType: Standards Track\r\n\r\nCategory: ERC\r\n\r\nCreated: Date of EIP PR\r\n\r\nRequires: ERC721\r\n\r\n## Abstract\r\nThe proposal directly connects NFTs and royalties in a smart contract architecture extending the ERC721 standard, with the aim of precluding central authorities from manipulating or circumventing payments to those who are legally entitled to them.\r\n\r\nThe proposal builds upon the [OpenZeppelin Smart Contract Toolbox](https://github.com/OpenZeppelin/openzeppelin-contracts) architecture, and extends it to include royalty account management (CRUD), royalty balance and payments management, simple trading capabilities -- Listing/Unlisting/Buying -- and capabilities to trace trading on exchanges. The royalty management capabilities allow for hierarchical royalty structures, referred to herein as royalty trees, to be established by logically connecting a \"parent\" NFT to its \"children\", and recursively enabling NFT \"children\" to have more children. \r\n\r\n## Motivation\r\nThe management of royalties is an age-old problem characterized by complex contracts, opaque management, plenty of cheating and fraud. \r\n\r\nThe above is especially true for a hierarchy of royalties, where one or more assets is derived from an original asset such as a print from an original painting, or a song is used in the creation of another song, or distribution rights and compensation are managed through a series of affiliates. \r\n\r\nIn the example below, the artist who created the original is eligible to receive proceeds from every sale, and resale, of a print. \r\n\r\n![Fig1](https://i.imgur.com/Py6bYQw.png)\r\n\r\n\r\nThe basic concept for hierarchical royalties utilizing the above \"ancestry concept\" is demonstrated in the figure below.\r\n\r\n![Fig2](https://i.imgur.com/7MtWzBV.png)\r\n\r\n\r\nIn order to solve for the complicated inheritance problem, this proposal breaks down the recursive problem of the hierarchy tree of depth N into N separate problems, one for each layer. This allows us to traverse the tree from its lowest level upwards to its root most efficiently.\r\n\r\nThis affords creators, and the distributors of art derived from the original, the opportunity to achieve passive income from the creative process, enhancing the value of an NFT, since it now not only has intrinsic value but also comes with an attached cash flow.\r\n\r\n## Outline\r\n\r\nThis proposal introduces several new concepts as extensions to the ERC721 standard:\r\n* **Royalty Account (RA)**\r\n    * A Royalty Account is attached to each NFT through its `tokenId` and consists of several subaccounts which can be accounts of individuals or other RAs. A royalty account is defined by an account identifier.\r\n* **Account Type**\r\n    * This specifies if an RA subaccount belongs to an individual (user) or is another RA. If there is another RA as an RA subaccount, the allocated balance needs to be reallocated to the subccounts making up the referenced RA.\r\n* **Royalty Split**\r\n    * The percentage each subaccount receives based on a sale of an NFT that is associated with an RA\r\n* **Royalty Balance**\r\n    * The royalty balance associated with an RA\r\n* **Subaccount Royalty Balance**\r\n    * The royalty balance associated to each RA subaccount. Note that only individual accounts can carry a balance that can be paid out. That means that if an RA subaccount is an RA, its final subaccount balance must be zero, since all RA balances must be allocated to individual accounts. \r\n* **Token Type**\r\n    * Token Type is given as either ETH or the symbol of the supported ERC 20/223/777 tokens such as `DAI`\r\n* **Asset ID**\r\n    * This is the `tokenId` the RA belongs to.\r\n* **Parent**\r\n    * This indicates which `tokenId` is the immediate parent of the `tokenId` to which an RA belongs.\r\n\r\n### Data Structures\r\n\r\nTo create an interconnected data structure linking NFTs to RAs that is search optimized requires the following additions to the global data structures of an ERC721:\r\n\r\n* Adding structs for a Royalty Account and associated Royalty Subaccounts to establish the concept of a Royalty Account with subaccounts.\r\n* Defining an `raAccountId` as the keccak256 hash of `tokenId`, the actual `owner` address, and the current block number, `block.blocknumber`\r\n* Mapping a `tokenId` to an `raAccountID` in order to connect an RA `raAccountId` to a `tokenId`\r\n* Mapping the `raAccountID` to a `RoyaltyAccount` in order to connect the account identifier to the actual account.\r\n* An `ancestry` mapping of the parent-to-child NFT relationship\r\n* A mapping of supported token types to their origin contracts and last validated balance (for trading and royalty payment purposes)\r\n* A mapping with a struct for a registered payment to be made in the `executePayment` function and validated in `safeTransferFrom`. This is sufficient, because a payment once received and distributed in the `safeTransferFrom` function will be removed from the mapping.\r\n* A mapping for listing NFTs to be sold\r\n\r\n### Royalty Account Functions\r\n\r\nDefinitions and interfaces for the Royalty Account RUD (Read-Update-Delete) functions. Because the RA is created in the minting function, there is no need to have a function to create a royalty account separately.\r\n\r\n### Minting of a royalty bearing NFT\r\n\r\nWhen an NFT is minted, an RA must be created and associated with the NFT and the NFT owner, and, if there is an ancestor, with the ancestor's RA. To this end the specification utilizes the `_safemint` function in a newly defined `mint` function and applies various business rules on the input variables.\r\n\r\n### Listing NFTs for Sale and removing a listing\r\n\r\nAuthorized user addresses can list NFTs for sale for non-exchange mediated NFT purchases.\r\n\r\n### Payment Function from Buyer to Seller\r\n\r\nTo avoid royalty circumvention, a buyer will always pay the NFT contract directly and not the seller. The seller is paid through the royalty distribution and can later request a payout.\r\n\r\nThe payment process depends on whether the payment is received in ETH or an ERC 20 token:\r\n* ERC 20 Token\r\n    1. The Buyer must `approve` the NFT contract for the purchase price, `payment` for the selected payment token (ERC20 contract address).\r\n    2. For an ERC20 payment token, the Buyer must then call the `executePayment` in the NFT contract -- the ERC20 is not directly involved.\r\n* For a non-ERC20 payment, the Buyer must send a protocol token (ETH) to the NFT contract, and is required to send `msg.data` encoded as an array of purchased NFTs `uint256[] tokenId`.\r\n\r\n### Modified NFT Transfer function including required Trade data to allocate royalties\r\n\r\nThe input parameters must satisfy several requirements for the NFT to be transferred AFTER the royalties have been properly distributed. Furthermore, the ability to transfer more than one token at a time is also considered.\r\n\r\nThe proposal defines:\r\n* Input parameter validation\r\n* Payment Parameter Validation\r\n* Distributing Royalties\r\n* Update RA ownership with payout\r\n* Transferring Ownership of the NFT \r\n* Removing the Payment entry in `registeredPayment` after successful transfer\r\n\r\n##### Distributing Royalties\r\n\r\nThe approach to distributing royalties is to break down the hierarchical structure of interconnected RAs into layers and then process one layer at time, where each relationship between a token and its ancestor is utilized to traverse the RA chain until the root ancestor and associated RA is reached.\r\n\r\n### Paying out Royalties to the NFT owner -- `from` address in `safeTransferFrom` function\r\n\r\nThis is the final part of the proposal.\r\n\r\nThere are two versions of the payout function -- a `public` function and an `internal` function.\r\n\r\nThe public function has the following interface:\r\n```\r\nfunction royaltyPayOut (uint256 tokenId, address _RAsubaccount, address payable _payoutaccount, payable uint256 _amount) public virtual reentrancyguard returns (bool)\r\n```\r\n\r\nwhere we only need the `tokenId`, the RA subaccount address, `_RAsubaccount` which is the `owner`, and the amount to be paid out, `_amount`. Note that the function has `reentrancy` protection, because funds are being payed out.\r\n\r\n#### Sending a Payout Payment\r\n\r\nThe following steps need to be taken:\r\n* find the RA subaccount based on `RAaccount` and the `subaccountPos` and extract the balance\r\n* extract `tokentype` from the subaccount\r\n* based on the token type, send the payout payment (not exceeding the available balance)\r\n\r\nEIP PR submission with the full specification, reference implementation and test suite will be submitted in the coming days.\r\n\r\nThis submission is dedicated to my children Lilith and Oliver, and is submitted on their 18th birthday.",
  "closed_by": {
    "login": "Therecanbeonlyone1969",
    "id": 20665612,
    "node_id": "MDQ6VXNlcjIwNjY1NjEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/20665612?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Therecanbeonlyone1969",
    "html_url": "https://github.com/Therecanbeonlyone1969",
    "followers_url": "https://api.github.com/users/Therecanbeonlyone1969/followers",
    "following_url": "https://api.github.com/users/Therecanbeonlyone1969/following{/other_user}",
    "gists_url": "https://api.github.com/users/Therecanbeonlyone1969/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Therecanbeonlyone1969/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Therecanbeonlyone1969/subscriptions",
    "organizations_url": "https://api.github.com/users/Therecanbeonlyone1969/orgs",
    "repos_url": "https://api.github.com/users/Therecanbeonlyone1969/repos",
    "events_url": "https://api.github.com/users/Therecanbeonlyone1969/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Therecanbeonlyone1969/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/4823/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/4823/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[

]
