{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/777/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/777/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/777/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/777",
  "id": 275515452,
  "node_id": "MDU6SXNzdWUyNzU1MTU0NTI=",
  "number": 777,
  "title": "ERC777 Token Standard",
  "user": {
    "login": "jbaylina",
    "id": 4180156,
    "node_id": "MDQ6VXNlcjQxODAxNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbaylina",
    "html_url": "https://github.com/jbaylina",
    "followers_url": "https://api.github.com/users/jbaylina/followers",
    "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
    "organizations_url": "https://api.github.com/users/jbaylina/orgs",
    "repos_url": "https://api.github.com/users/jbaylina/repos",
    "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbaylina/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 514,
  "created_at": "2017-11-20T22:07:03Z",
  "updated_at": "2022-07-06T19:09:05Z",
  "closed_at": "2022-01-02T08:14:09Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Please, see https://eips.ethereum.org/EIPS/eip-777 for further discussion.\r\n\r\n----\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/777/reactions",
    "total_count": 132,
    "+1": 76,
    "-1": 0,
    "laugh": 7,
    "hooray": 18,
    "confused": 0,
    "heart": 26,
    "rocket": 5,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/777/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/346215742",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-346215742",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 346215742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjIxNTc0Mg==",
    "user": {
      "login": "tjayrush",
      "id": 5417918,
      "node_id": "MDQ6VXNlcjU0MTc5MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5417918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjayrush",
      "html_url": "https://github.com/tjayrush",
      "followers_url": "https://api.github.com/users/tjayrush/followers",
      "following_url": "https://api.github.com/users/tjayrush/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjayrush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjayrush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjayrush/subscriptions",
      "organizations_url": "https://api.github.com/users/tjayrush/orgs",
      "repos_url": "https://api.github.com/users/tjayrush/repos",
      "events_url": "https://api.github.com/users/tjayrush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjayrush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-22T01:33:24Z",
    "updated_at": "2017-11-22T01:33:24Z",
    "author_association": "NONE",
    "body": "Was there discussion of adding a Mint/Burn pair of events and/or mint/burn functions to this proposed standard?\r\n\r\nIf this was discussed and rejected, what are the reasons for rejecting it? If it was not discussed, should it have been?\r\n\r\nWhile not foolproof (because a contract may neglect to call these events), it would make the automated accounting of ICO sales for token contracts that do comply a lot easier. To accurately account for existing ERC 20 token sales, one must read and understand the contract's code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/346215742/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348352553",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-348352553",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 348352553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODM1MjU1Mw==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T23:18:33Z",
    "updated_at": "2017-11-30T23:18:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "What is the use of `_to` while is obvious that is the TokenFallback reciever itself (the contract `address(this)`), and why is needed `_ref` if we can store a `_ref` data inside `_data` if application needs it?\r\n\r\nI would find better to stick to the needed stuff, such as:\r\n```\r\n    /**\r\n    * @notice ERC223 and ERC667 Token fallback \r\n    * @param _from sender of token\r\n    * @param _amount value sent\r\n    * @param _data data sent\r\n    **/    \r\n    function tokenFallback(\r\n        address _from,\r\n        uint _amount,\r\n        bytes _data\r\n    )\r\n```\r\n\r\nCan you describe situations where `_ref` and `_to `are important, or crucial? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348352553/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348643054",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-348643054",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 348643054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODY0MzA1NA==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-01T23:38:42Z",
    "updated_at": "2017-12-01T23:38:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@3esmit The `_to` is because the proxy that handles the interface for a specific address can be a different contract. Please see EIP https://github.com/ethereum/EIPs/issues/672 . \r\n\r\nFor the `_ref`, this should act as a reference, for example a check number, or an invoice number. In general the ref will be set by the `operator` and the `data` will be set for the sender and will be the equivalent to the `data` in an ethereum transaction.  \r\n\r\nMay be a good alternative would be to integrate this 2 parameters in `data` and define a standard for `data` This way we would maintain current compatibility with EIP223...\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348643054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348676536",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-348676536",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 348676536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODY3NjUzNg==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-02T08:12:19Z",
    "updated_at": "2017-12-02T08:12:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I suggest also adding a boolean return to tokenFallback, and token contract require a true return to accept transaction, in order to avoid this scenario: https://github.com/axiomzen/cryptokitties-bounty/issues/3",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348676536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348702005",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-348702005",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 348702005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODcwMjAwNQ==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-02T16:13:50Z",
    "updated_at": "2017-12-02T16:13:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@3esmit This is problematic. This function is called after the transfer is done. So returning false would mean to rollback the transfer. This can add a lot of reentrance issues, so I decided that the function ether executes or throws the full transaction.\r\nThe nice thing of this standard is that if the tokens a sent via `send` it eans the the receiver must register the interface in EIP672 way. If not, it fails.  Of course you can use the old `transfer` method for backwards compatibility. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348702005/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355274724",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355274724",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355274724,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTI3NDcyNA==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T12:52:01Z",
    "updated_at": "2018-01-04T12:52:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I propose renaming `operatorData` to `logData` to make more explicit that the purpose of that data is no other than being part of a log. The ability of adding context to token transfers is powerful, and the gas hit is minimal when they are not used.\r\n\r\nReally like and support this proposal, exactly the vision that made me excited about ERC223 10 months (!!!) ago. We are considering making ERC777 the base standard for all the tokens issued on @Aragon!\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355274724/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355286758",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355286758",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355286758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTI4Njc1OA==",
    "user": {
      "login": "onbjerg",
      "id": 8862627,
      "node_id": "MDQ6VXNlcjg4NjI2Mjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8862627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/onbjerg",
      "html_url": "https://github.com/onbjerg",
      "followers_url": "https://api.github.com/users/onbjerg/followers",
      "following_url": "https://api.github.com/users/onbjerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/onbjerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/onbjerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/onbjerg/subscriptions",
      "organizations_url": "https://api.github.com/users/onbjerg/orgs",
      "repos_url": "https://api.github.com/users/onbjerg/repos",
      "events_url": "https://api.github.com/users/onbjerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/onbjerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T13:50:45Z",
    "updated_at": "2018-01-04T13:51:22Z",
    "author_association": "NONE",
    "body": "This is an interesting proposal, but I worry about the entire ecosystem having to migrate to new multisig wallets in order to be able to receive ERC777 tokens.\r\n\r\nIt seems like there was an attempt made to create a whitelist of contracts that one can safely transfer to even if they do not implement `ITokenReceipient`:\r\n\r\n>The function MUST `throw` if:\r\n> - `to` is a contract that is not prepared to receive tokens. That is it is a contract that does not implements `ITokensReceived` interface and the hash of the sourcecode is not in between the whitilisted codes listed in the appendix of this code.\r\n\r\nBut there is no such appendix, I would love to see it 😊 \r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355286758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355394427",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355394427",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355394427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTM5NDQyNw==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T20:48:30Z",
    "updated_at": "2018-01-04T20:48:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@onbjerg We are working on it. We are thinking in keeping this list open for a while (centralized) and close the list at some point (make it decentralized).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355394427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355418702",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355418702",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355418702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQxODcwMg==",
    "user": {
      "login": "sohkai",
      "id": 4166642,
      "node_id": "MDQ6VXNlcjQxNjY2NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4166642?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sohkai",
      "html_url": "https://github.com/sohkai",
      "followers_url": "https://api.github.com/users/sohkai/followers",
      "following_url": "https://api.github.com/users/sohkai/following{/other_user}",
      "gists_url": "https://api.github.com/users/sohkai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sohkai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sohkai/subscriptions",
      "organizations_url": "https://api.github.com/users/sohkai/orgs",
      "repos_url": "https://api.github.com/users/sohkai/repos",
      "events_url": "https://api.github.com/users/sohkai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sohkai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T22:35:03Z",
    "updated_at": "2018-01-04T22:39:04Z",
    "author_association": "NONE",
    "body": "Was there any consideration over allowing users to specify how much an operator can control, e.g. changing `authorizeOperator()` to:\r\n\r\n`function authorizeOperator(address operator, uint authorizedAmount) public`?\r\n\r\nOne could use `2^256 - 1` (or hypothetically the `totalSupply()` if that never grows) to simulate the previous `true` behaviour and `0` for `false`.\r\n\r\n---------------\r\n\r\n> The only difference for new contracts implementing ERC20 is that registration of ITokenRecipient via EIP-672 takes precedence over ERC20. This means that even with on a ERC20 transfer call, the token contract MUST check via EIP-672 if the to address implements tokensReceived and call it if available. \r\n\r\nI find this somewhat confusing and unexpected. We'll have a dichotomy of \"ERC20\" tokens: ones that will never call the `tokensReceived()` callback, even if `ITokenRecipient` is registered; and ones that will always check. Even if the ERC20 functions are only _supposed_ to be called via old contracts, I think there'll be lots of confusion about this since the meaning of what an \"ERC20\" token will have essentially changed depending on if your token also supports EIP777.\r\n\r\nIt also feels odd because you don't _have_ to support the ERC20 interface with EIP777, but you most likely will to support prior contracts expecting that standard.\r\n\r\nWhat if EIP777 was instead a superset of ERC20's interface but overrided specific parts, e.g. `transfer()` and `transferFrom()`, to support the `ITokenRecipient` interface?\r\n\r\n--------------\r\n\r\nI kind of like and dislike the `send()` nomenclature. On one hand, it's nice how it parallel's ETH's `transfer()` and `send()` nomenclature. On the other, it's confusing because these two terms are now both overloaded with different meanings for ETH and tokens. It's confusing enough that we have both for ETH, but it's going to be even more confusing when there's the same names for tokens. I do like the naming for `transferAndCall()` because it's really obvious what it's probably going to do.\r\n\r\nI guess an alternative could be `transferToRecipient()`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355418702/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355425378",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355425378",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355425378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQyNTM3OA==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T23:08:16Z",
    "updated_at": "2018-01-04T23:16:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sohkai: \r\n1.- The idea o authorizeOperator is mainly to authorise a contract.\r\nThe maximum allowed limitation and many others limitations, like a daily limits, should be implemented in the operator contract and keep this standard as clean as possible. \r\n\r\n2.- The idea is that the receiver should have the warranty that the `tokensReceived()` method is ALWAYS called. Even if it is called via an obsolete ERC20 `transfer()` or `transferFrom()` method. This way, for example, allows a recipient to NEVER accept a specific token. or forward some tokens to a specific charity. \r\n\r\n3.- The big problem of maintaining `transfer()` name in the new standard is that if you use `transfer()` in an ERC20 only token, you will end up locking a lot of tokens. This mistake might become very common in a moment where 50% of the tokens are ERC20Only and 50%ERC777.  \r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355425378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355427401",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355427401",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355427401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQyNzQwMQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T23:19:09Z",
    "updated_at": "2018-01-16T00:19:25Z",
    "author_association": "MEMBER",
    "body": "As I have mentioned in other threads, I strongly recommend removing `decimals`.  Here is a cross post of what I have said elsewhere:\r\n\r\nDecimals are easily the number one source of confusion for both token authors and users of ERC20. I strongly recommend removing this as a variable and instead asserting that tokens must have a certain \"humanizing divisor\". Reasonable choices IMO are:\r\n\r\n* `0` - The purpose of decimals is to humanize a very large number, nothing more. If you issue a bunch of your tokens, then people can work with gigatokens instead of tokens. People are used to this already with hard drives (no one talks about hard drive size in bytes, it's gigabytes or terrabytes). This scales with the system and allows it to easily change with time.\r\n* `10^24` - This Allows the token to center on a range that is maximally within the accepted SI prefixes, ranging all the way from yoctotokens to yottatokens. From a scientific/mathematics standpoint, this is probably the best option.\r\n* `10^18` - 10^18 is the most common humanizing divisor, and it is what ETH used. In order to limit confusion, there may be value in asserting that everyone should just use this. While this isn't a particularly optimal choice, it is fairly compelling due to ETH choosing it.\r\n* `10^2` - Most fiat currencies use cents, in general, population is more used to currencies with 2 decimals than 0 or more than 2.  I'm including this for completeness, but it ends up being effectively the same as `0`.\r\n\r\nI think the worst option is to continue to allow for variable humanizing divisors. This doesn't actually solve any real problems, since any chosen unit is very likely to be a wrong choice at some point in time (too big or too small). Also, since the token author can pick the token supply, allowing them to also choose the humanizing divisor doesn't give them any more/less power to try to target a \"nice human-scale number\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355427401/reactions",
      "total_count": 17,
      "+1": 17,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355427531",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355427531",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355427531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQyNzUzMQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T23:20:06Z",
    "updated_at": "2018-01-04T23:20:06Z",
    "author_association": "MEMBER",
    "body": "You mention `function send(address to, uint256 value, bytes userData, bytes operatorData) public;` in the interface but it doesn't appear in the function descriptions below.  Perhaps it was meant to be replaced by `operatorSend` but you forgot to delete it from the interface?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355427531/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355429888",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355429888",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355429888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQyOTg4OA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T23:33:50Z",
    "updated_at": "2018-01-04T23:34:05Z",
    "author_association": "MEMBER",
    "body": "I recommend splitting `function authorizeOperator(address operator, bool authorized) public;` into:\r\n```\r\nfunction authorizeOperator(address operator) public;\r\nfunction revokeOperator(address operator) public;\r\n```\r\nAt the callsite, this will provide a lot more clarity as to what is happening.\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355429888/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355472356",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355472356",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355472356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQ3MjM1Ng==",
    "user": {
      "login": "bwheeler96",
      "id": 1840364,
      "node_id": "MDQ6VXNlcjE4NDAzNjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1840364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bwheeler96",
      "html_url": "https://github.com/bwheeler96",
      "followers_url": "https://api.github.com/users/bwheeler96/followers",
      "following_url": "https://api.github.com/users/bwheeler96/following{/other_user}",
      "gists_url": "https://api.github.com/users/bwheeler96/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bwheeler96/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bwheeler96/subscriptions",
      "organizations_url": "https://api.github.com/users/bwheeler96/orgs",
      "repos_url": "https://api.github.com/users/bwheeler96/repos",
      "events_url": "https://api.github.com/users/bwheeler96/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bwheeler96/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T04:49:13Z",
    "updated_at": "2018-01-05T04:49:13Z",
    "author_association": "NONE",
    "body": "This is rad. Its going to be a long, slow journey to move away from ERC20 but this is a good first step. Couple things:\r\n\r\n1. Why has spender authorization been moved to a boolean? I personally haven't found a use-case for allowing a spender to access a specific amount, but it seems like a nice feature to have since its already part of an existing standard.\r\n2. Why use the noun `operator`? I understand this is stupid-picky and certainly hair-splitty, but the work `spender` is, IMO, a really good descriptor of that particular actor. Operator just sounds like the person has more capability than they do (they aren't really \"operating\" on the tokens).\r\n\r\nAnyways, big 👍. ERC20 needs an upgrade.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355472356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355475166",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355475166",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355475166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQ3NTE2Ng==",
    "user": {
      "login": "nepalbitcoin",
      "id": 13423662,
      "node_id": "MDQ6VXNlcjEzNDIzNjYy",
      "avatar_url": "https://avatars.githubusercontent.com/u/13423662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nepalbitcoin",
      "html_url": "https://github.com/nepalbitcoin",
      "followers_url": "https://api.github.com/users/nepalbitcoin/followers",
      "following_url": "https://api.github.com/users/nepalbitcoin/following{/other_user}",
      "gists_url": "https://api.github.com/users/nepalbitcoin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nepalbitcoin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nepalbitcoin/subscriptions",
      "organizations_url": "https://api.github.com/users/nepalbitcoin/orgs",
      "repos_url": "https://api.github.com/users/nepalbitcoin/repos",
      "events_url": "https://api.github.com/users/nepalbitcoin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nepalbitcoin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T05:18:15Z",
    "updated_at": "2018-01-05T05:18:15Z",
    "author_association": "NONE",
    "body": "Public state variable for decimal is `string public decimals;`? \r\nI think that should be `uint8 public decimals;` based on `function decimals() public constant returns (uint8)`. Prolly a typo.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355475166/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355500999",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355500999",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355500999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTUwMDk5OQ==",
    "user": {
      "login": "GoldenDave",
      "id": 18424493,
      "node_id": "MDQ6VXNlcjE4NDI0NDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/18424493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GoldenDave",
      "html_url": "https://github.com/GoldenDave",
      "followers_url": "https://api.github.com/users/GoldenDave/followers",
      "following_url": "https://api.github.com/users/GoldenDave/following{/other_user}",
      "gists_url": "https://api.github.com/users/GoldenDave/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GoldenDave/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GoldenDave/subscriptions",
      "organizations_url": "https://api.github.com/users/GoldenDave/orgs",
      "repos_url": "https://api.github.com/users/GoldenDave/repos",
      "events_url": "https://api.github.com/users/GoldenDave/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GoldenDave/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T08:40:45Z",
    "updated_at": "2018-01-05T08:40:45Z",
    "author_association": "NONE",
    "body": "> As I have mentioned in other threads, I strongly recommend removing decimals. Here is a cross post of what I have said elsewhere:\r\n\r\nUnfortunately quite a few coins have a very good reason for selecting a different number of decimals. Many of them are in the wild already. Forcing all 10 n decimals would require internal restrictions that would, for example, force rounding of values or revert if an incorrect amount is specified.\r\n\r\nOur objective is seldom to expect people to interact directly with the blockchain but, as an example, MEW does a good job of removing the decimal confusion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355500999/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355564976",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355564976",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355564976,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU2NDk3Ng==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T14:18:20Z",
    "updated_at": "2018-01-05T14:18:47Z",
    "author_association": "NONE",
    "body": "Should the `ITokenRecipient` contract also have a function that always returns true stating it's capable of this? It's a way to allow wallet implementers to know which function to use, and therefore save gas. \r\n\r\n```\r\nfunction isITokenRecipient() returns (bool) { return true};\r\n```\r\n\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355564976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355577058",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355577058",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355577058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU3NzA1OA==",
    "user": {
      "login": "lyricalpolymath",
      "id": 516744,
      "node_id": "MDQ6VXNlcjUxNjc0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/516744?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lyricalpolymath",
      "html_url": "https://github.com/lyricalpolymath",
      "followers_url": "https://api.github.com/users/lyricalpolymath/followers",
      "following_url": "https://api.github.com/users/lyricalpolymath/following{/other_user}",
      "gists_url": "https://api.github.com/users/lyricalpolymath/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lyricalpolymath/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lyricalpolymath/subscriptions",
      "organizations_url": "https://api.github.com/users/lyricalpolymath/orgs",
      "repos_url": "https://api.github.com/users/lyricalpolymath/repos",
      "events_url": "https://api.github.com/users/lyricalpolymath/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lyricalpolymath/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T15:08:49Z",
    "updated_at": "2018-01-05T15:08:49Z",
    "author_association": "NONE",
    "body": "Great stuff!\r\n\r\n1- initially I too thought as @sohkai that `authorizeOperator()` would need a form of limiting the amount. In the end the [ERC20](https://github.com/ethereum/EIPs/issues/20) `approve` (which is a confusing name) does have a value up to which the spender is allowed.\r\n\r\nI understand and share what you say\r\n\r\n>  The idea o authorizeOperator is mainly to authorise a contract.\r\n> The maximum allowed limitation and many others limitations, like a daily limits, should be implemented in the operator contract and keep this standard as clean as possible\r\n\r\nBut I also think that it's an interesting addition to remind implementers to include optional limitation logic. \r\n\r\n-------------\r\n\r\n2- `operatorSend` `userData` vs `operatorData`\r\nwhat is the scenario you are imagining for `userData`? \r\nin any case it's a data that the operator has to input when calling the `operatorSend` function. Why couldn't both data points be contained in one?\r\n\r\n-------------\r\n\r\n3- Backwards Compatibility\r\nI also found this a bit confusing\r\n\r\n> The only difference for new contracts implementing ERC20 is that registration of ITokenRecipient via EIP-672 takes precedence over ERC20. This means that even with on a ERC20 transfer call, the token contract MUST check via EIP-672 if the to address implements tokensReceived and call it if available.\r\n\r\nI understand that new smart contracts will detect the right function to call (right?)\r\nbut what about users interacting directly with the contract? It will be confusing to see 2 functions that supposedly do more or less the same thing but have different names. \r\nconfusing UX and a potential source of problems if you say that \"tokens will probably be locked\"\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355577058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355610804",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355610804",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355610804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYxMDgwNA==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T17:14:22Z",
    "updated_at": "2018-01-05T17:14:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@lyricalpolymath  \r\n3- New contracts that use new tokens must use `send()` and not `transfer()`. `transfer()` is just for backwards compatibility.   mainly old smart contracts, as I expect that UI will be upgraded at some point.\r\nStay tunned for (1 & 2) ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355610804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355611808",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355611808",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355611808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYxMTgwOA==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T17:18:21Z",
    "updated_at": "2018-01-05T17:18:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexvandesande To know if a contract implements `ITokenRecipient`, the reverseENS is used (EIP672) which will never throw and you will know if it implements or not the Interface. The gas cost should be the same as the one you propose.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355611808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355617850",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355617850",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355617850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYxNzg1MA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T17:42:59Z",
    "updated_at": "2018-01-05T17:42:59Z",
    "author_association": "MEMBER",
    "body": "@GoldenDave Others have made the same argument in the past but were unable to provide (IMO) a compelling argument as to why forcing the humanizing divisor to the same for all tokens is bad.  The most common cited example is \"what if I have a token that is pegged to USD (or similar), which only has 2 decimals?\"  In this case, you can still have 24 decimals (or whatever the standard defines) exposed to the user and the contract can internally store however it likes.  In this case, you would simply multiply whatever internal value you have by `10^22` when it is returning to the user.  In all cases I have seen people come up with (including the USD peg) nothing is hurt by having a token be _more_ divisible.  There is really nothing fundamentally wrong with having `1 attousd`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355617850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355630150",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355630150",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355630150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYzMDE1MA==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T18:32:47Z",
    "updated_at": "2018-01-05T18:32:47Z",
    "author_association": "NONE",
    "body": "@jbaylina I support reverse ENS, but I don't see why not also add this to the contract itself. Is simpler to build, will work on any network, including test networks etc. Also, to check ens resolver you need to have multiple calls (see if there's a resolver, then check the resolver etc) AND to have an extra function on the constructor function to set the ens resolver info.\r\n\r\nAgain, I'm all for ENS, but why not add on the contract simple info like that? Reminds me of the debate on either tokens should have symbol and names on the contract or on a token registry: in contract won by the simplicity of it.\r\n\r\n----\r\n\r\nAlso: I'd like to propose to add a [provable](https://github.com/ethereum/EIPs/issues/662) standard to this token. One of the most requested features I get from token creators is how to send tokens without having ether and I think it makes sense that should be a core function of whatever is the next big token version.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355630150/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355644164",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355644164",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355644164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTY0NDE2NA==",
    "user": {
      "login": "DaveAppleton",
      "id": 1858302,
      "node_id": "MDQ6VXNlcjE4NTgzMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1858302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DaveAppleton",
      "html_url": "https://github.com/DaveAppleton",
      "followers_url": "https://api.github.com/users/DaveAppleton/followers",
      "following_url": "https://api.github.com/users/DaveAppleton/following{/other_user}",
      "gists_url": "https://api.github.com/users/DaveAppleton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DaveAppleton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DaveAppleton/subscriptions",
      "organizations_url": "https://api.github.com/users/DaveAppleton/orgs",
      "repos_url": "https://api.github.com/users/DaveAppleton/repos",
      "events_url": "https://api.github.com/users/DaveAppleton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DaveAppleton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T19:30:51Z",
    "updated_at": "2018-01-05T19:30:51Z",
    "author_association": "NONE",
    "body": "> Others have made the same argument in the past but were unable to provide (IMO) a compelling argument as to why forcing the humanizing divisor to the same for all tokens is bad.\r\n\r\nDuring the HelloGold token sale, contributors received HGT which entitled them to a share of a reward token GBT (our gold backed token) which is related to the amount of management fees that we receive for storing clients' gold pro rated to the person's HGT holding.\r\n\r\nIn order that anybody holding the minimum amount of HGT should receive GBT during a distribution we calculated that GBT would work with 18 decimals but as a result HGT would need to have 8 d.p. Any more precision would be pointless and misleading.\r\n\r\nIt it rather dictatorial to say that everybody needs to normalise everything to meet a number of decimal points that do not particularly agree with them, especially when we already have a method of handling it. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355644164/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355648704",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355648704",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355648704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTY0ODcwNA==",
    "user": {
      "login": "DaveAppleton",
      "id": 1858302,
      "node_id": "MDQ6VXNlcjE4NTgzMDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1858302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DaveAppleton",
      "html_url": "https://github.com/DaveAppleton",
      "followers_url": "https://api.github.com/users/DaveAppleton/followers",
      "following_url": "https://api.github.com/users/DaveAppleton/following{/other_user}",
      "gists_url": "https://api.github.com/users/DaveAppleton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DaveAppleton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DaveAppleton/subscriptions",
      "organizations_url": "https://api.github.com/users/DaveAppleton/orgs",
      "repos_url": "https://api.github.com/users/DaveAppleton/repos",
      "events_url": "https://api.github.com/users/DaveAppleton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DaveAppleton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T19:49:57Z",
    "updated_at": "2018-01-05T19:49:57Z",
    "author_association": "NONE",
    "body": "> Should the ITokenRecipient contract also have a function that always returns true stating it's capable of this? It's a way to allow wallet implementers to know which function to use, and therefore save gas.\r\n\r\nIt is great idea - but when I ran a quick test on remix, a contract with a simple fallback function would falsely satisfy your requirements.\r\n\r\n```\r\nfunction(){\r\n}\r\n```\r\n\r\nappears to return true when a non existent `function xyz() returns (bool)` is called.\r\n\r\nhttps://gist.github.com/DaveAppleton/ef44e9745b1f57c7ae0d6744a15bc5c6",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355648704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355730794",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355730794",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355730794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTczMDc5NA==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-06T07:56:14Z",
    "updated_at": "2018-01-06T07:56:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexvandesande One of the nicest think of this standard is that not only you can have functionality in smart contract recipients, but also in any regular account.  You can program for examle that you don't accept tokens sent to your public regular account. Or that you send half of it to a charity.\r\nI agree that using EIP672 is a little complicated, and what's the worst, ENS still is centralised in some way.  So that is why we plan to use EIP https://github.com/ethereum/EIPs/issues/820 which is equivalent to EIP672 but much more simpler and pure decentralised contract. (It still is a work in progress).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355730794/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355731160",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-355731160",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 355731160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTczMTE2MA==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-06T08:02:18Z",
    "updated_at": "2018-01-06T08:02:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexvandesande Regarding the `provable` functionality, the idea is to do that via an operator.  The operator can, for example, accept signed checks, which they are very much `provable` transfers.\r\n\r\nThis standard should allow for token contract creators to set some default operators to be authorised for everybody.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355731160/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/356036210",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-356036210",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 356036210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjAzNjIxMA==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T17:32:42Z",
    "updated_at": "2018-01-08T17:32:42Z",
    "author_association": "NONE",
    "body": "@DaveAppleton I just tested your code and got\r\n\r\n```\r\n{\r\n\t\"0\": \"bool: false\"\r\n}\r\n```\r\n\r\nSo it seems it should work.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/356036210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/356037745",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-356037745",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 356037745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjAzNzc0NQ==",
    "user": {
      "login": "GoldenDave",
      "id": 18424493,
      "node_id": "MDQ6VXNlcjE4NDI0NDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/18424493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GoldenDave",
      "html_url": "https://github.com/GoldenDave",
      "followers_url": "https://api.github.com/users/GoldenDave/followers",
      "following_url": "https://api.github.com/users/GoldenDave/following{/other_user}",
      "gists_url": "https://api.github.com/users/GoldenDave/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GoldenDave/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GoldenDave/subscriptions",
      "organizations_url": "https://api.github.com/users/GoldenDave/orgs",
      "repos_url": "https://api.github.com/users/GoldenDave/repos",
      "events_url": "https://api.github.com/users/GoldenDave/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GoldenDave/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T17:37:59Z",
    "updated_at": "2018-01-08T17:37:59Z",
    "author_association": "NONE",
    "body": "Remix or testnet?\r\n\r\nMaybe remix is not the best playground..\r\n![image](https://user-images.githubusercontent.com/18424493/34683645-9c72d9a6-f4dd-11e7-8c09-596344e70d6e.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/356037745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/356055815",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-356055815",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 356055815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjA1NTgxNQ==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T18:42:13Z",
    "updated_at": "2018-01-08T18:42:13Z",
    "author_association": "NONE",
    "body": "@jbaylina I like the approach of using the approved operator for that sort of thing. \r\n\r\nRegarding EIP672 or 820, I don't like the idea of requiring any registry contract: these will change depending on the network, the wallet must be aware of them and makes the whole code a lot less reusable. I would simply support introspection in the contract itself,  it's literally one line function and adding support for registering yourself on the register will certainly be more than that. I like having registry of addresses with more information, just don't like having to rely on them.\r\n\r\nIf you don't like `hasTokenFallback` then we can add a more general `hasSupportFor()` function. But I'd keep it simple.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/356055815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/356103528",
    "html_url": "https://github.com/ethereum/EIPs/issues/777#issuecomment-356103528",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/777",
    "id": 356103528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjEwMzUyOA==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-08T21:33:48Z",
    "updated_at": "2018-01-08T21:33:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexvandesande \r\n1.- How would you associate a piece of code to a regular account? I don't see any other way than a registry contract (ENS or notENS).   EIP820 is very interesting because it allows to execute a code every time that tokens are received. Even if the destination is a regular account.  For example, you can prevent receiving tokens, or send some of the tokens to a charity.  Using EIP-165, which is more or less what you propose, does not allow to define any code for regular accounts.\r\n2.- In the other side, I would like to highlight an incredible way that @Arachnid showed to me on how deploy EIP820Registry like contracts.  \r\nThe idea is that you create a deployment transaction. you change the signature to a deterministic value, for example 0xAAAAAAAA....  From this signature, you recover the address that would have generated the transaction.  Of course you don't know the private key of that address, but you can send Ether to that address and then just broadcast the transaction!!\r\nThis method, you can create the registry in any blockchain and you know for sure that the address will be the same in all the chains.\r\nYou can see the implementation of this here: https://github.com/jbaylina/eip820/blob/master/js/deployment.js  \r\nIt works!\r\nThis exciting technique is a great way to deploy any \"Pure decentralised\" contract. \r\nAn applause to @Arachnid please !!!.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/356103528/reactions",
      "total_count": 18,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
