{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/726/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/726/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/726/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/726",
  "id": 262359185,
  "node_id": "MDU6SXNzdWUyNjIzNTkxODU=",
  "number": 726,
  "title": "Execute EVM inside EVM",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 13,
  "created_at": "2017-10-03T09:23:18Z",
  "updated_at": "2022-06-01T15:53:51Z",
  "closed_at": "2022-01-16T00:43:41Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "Introduces a new precompile EXECTX at address TBD, which accepts input in the following format:\r\n\r\n    [32 bytes: PRE_STATE_ROOT] [32 bytes: witness start position] [32 bytes: tx start position] [witness length] [witness] [tx length] [transaction]\r\n\r\nNote that this is the ABI encoding of [bytes32, bytes, bytes], though here we are spelling it out in much more detail because there are currently not yet standards for exactly how \"strict\" ABI verification should be.\r\n\r\nThe precompile validates that:\r\n\r\n* `len(input) >= max(witness_start_position + witness_length, tx_start_position + tx_length)`\r\n* `input[witness_start_position: witness_start_position + witness_length]` is a valid depth-1 RLP list (ie. it's a list of binary blobs, NOT a single blob, a list of lists, a mixed list or invalid RLP)\r\n* `input[tx_start_position: tx_start_position + tx_length]` is a valid RLP-encoded transaction.\r\n\r\nFor simplicity of specification, oddities such as extraneous data or the witness and tx overlapping are not disallowed; anything that satisfies the above rules is okay.\r\n\r\nThe precompile then applies the specifies transaction to the specified pre_state_root. When a state query is required, it uses {sha3(x): x for x Ïµ witness} as a database. The precompile exits with an error if the transaction is invalid. If execution succeeds, it returns 32+N bytes as output containing the post_state_root in the first 32 bytes and the return data of the call in the remaining N bytes.\r\n\r\nThe precompile expects `1000 + len(input data) // 10` gas to perform the initial pre-execution checks, then if those checks pass it expects an additional amount of gas equal to the transaction's `startgas` to attempt to execute the transaction. If the initial pre-execution checks pass, but the tx execution fails, then all gas is charged; if the tx execution succeeds then `1000 + len(input data) // 10 + gasused` is charged.\r\n\r\nNote that this precompile is a pure function; it operates entirely on the \"state\" provided by the given state root and witness data, NOT on the \"current\" state.\r\n\r\n### Rationale\r\n\r\nThis allows the EVM to be executed inside the EVM, opening the door for a number of applications involving the Ethereum blockchain verifying other EVM-based blockchains, a simpler implementation of read-only cross-shard calls, an interface for making calls to historical state, and other similar applications. This particularly makes the EVM friendly to verifying Plasma chains whose consensus rules, including transaction execution and the chain's PoW/PoS/PoA, are themselves EVM-based.\r\n\r\nCurrently any of these applications would require essentially creating a full ethereum client inside EVM code, which would add an unacceptably high amount of overhead.\r\n\r\nMore detailed user stories include:\r\n\r\n* User wants to create a contract that queries the historical state of other contracts, or possibly itself, without having to store this entire historical data in storage. The user does so by simply making the query calls use EXECTX, with the right ABI data to make the call specified inside the transaction, and requiring the user to pass in (i) the header of the historical block, which contains the stateroot and can be verified against the hash provided by the BLOCKHASH opcode, and (ii) the witness data.\r\n* User wants to create a Plasma chain, where if the Plasma chain's consensus publishes any invalid block then a fraud proof, consisting of executing that block, can be verified inside the Ethereum main chain using this opcode.\r\n* User wants to make a read-only call to shard 57 from inside shard 43. We can assume that in this sharding scheme each shard has delayed access to the state roots of all other shards (this is not difficult to implement), and so we can use EXECTX to simulate in shard 43 the execution of a transaction that makes the call on top of the state root from shard 57.\r\n\r\n### Alternative approaches\r\n\r\nAn alternative and more thorough approach would be to make \"witness data\" be a first-class concept in Ethereum, perhaps being part of each transaction, and adding other opcodes that take advantage of it. For example, we can imagine TRIE_GET and TRIE_SET as precompiles that use witness data, as well as the simpler GET_SHA3_PREIMAGE. In the most extreme version of this paradigm, the entire state of the ethereum blockchain would always be a 32 byte root hash and *everything* would be implemented with first-class witness data and opcodes such as EXECTX, TRIE_GET and TRIE_SET. However, this would require much more research to create an optimal model.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/726/reactions",
    "total_count": 61,
    "+1": 43,
    "-1": 0,
    "laugh": 0,
    "hooray": 10,
    "confused": 0,
    "heart": 8,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/726/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/333788770",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-333788770",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 333788770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzc4ODc3MA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-03T09:28:13Z",
    "updated_at": "2017-10-03T09:28:13Z",
    "author_association": "MEMBER",
    "body": "It's worth noting that the input format specification is exactly the ABI encoding of `(bytes32, bytes32[], bytes)`; would it be clearer to specify it as such?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/333788770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/334022384",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-334022384",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 334022384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDAyMjM4NA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-04T01:05:39Z",
    "updated_at": "2017-10-04T01:05:39Z",
    "author_association": "MEMBER",
    "body": "Added a note.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/334022384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/334795717",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-334795717",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 334795717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDc5NTcxNw==",
    "user": {
      "login": "mattdf",
      "id": 11067114,
      "node_id": "MDQ6VXNlcjExMDY3MTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11067114?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattdf",
      "html_url": "https://github.com/mattdf",
      "followers_url": "https://api.github.com/users/mattdf/followers",
      "following_url": "https://api.github.com/users/mattdf/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattdf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattdf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattdf/subscriptions",
      "organizations_url": "https://api.github.com/users/mattdf/orgs",
      "repos_url": "https://api.github.com/users/mattdf/repos",
      "events_url": "https://api.github.com/users/mattdf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattdf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-06T15:54:15Z",
    "updated_at": "2017-10-06T15:54:15Z",
    "author_association": "MEMBER",
    "body": "I like this EIP (and more generally the concept) as it is useful for easily implementing turing complete state-channels, e.g., where the money gets sent depends on the execution of a counter-signed string of EVM bytecode, and/or the application of multiple of these strings for more complex channels. Also useful for dynamic programming tasks. :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/334795717/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/335094102",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-335094102",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 335094102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTA5NDEwMg==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-09T08:29:48Z",
    "updated_at": "2017-10-09T08:29:48Z",
    "author_association": "MEMBER",
    "body": "I like this EIP a lot, but I'm a bit uneasy about the implications of this specific proposal: It fixes many details of the protocol that were always a little hidden from the EVM up to now. Smart contracts could use blockhash to access some past block hashes, but that was about it. If we change anything in the encoding of transactions in the future, this change will be relevant to the semantics of this precompile.\r\n\r\nAlso concerning some of the specific use-cases: I don't think you can use this precompiled contract to verify a plasma change and have a hard fork on the main chain. The fork times would have to be synchronized and it would be impossible to verify a plasma transaction that happened before the fork (which is required at least for some transition period).\r\n\r\nThe only solution I see here is to add some kind of version field as another parameter, which has the drawback that dropping an ancient version is something that has to be specified or cannot be done.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/335094102/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/337749339",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-337749339",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 337749339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzc0OTMzOQ==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-18T22:45:09Z",
    "updated_at": "2017-10-18T22:45:09Z",
    "author_association": "MEMBER",
    "body": "On the `TRIE_GET` and `TRIE_SET` topic:\r\n\r\nOne idea that I have had recently that would be interesting to move Ethereum towards is the \"stateless client, first-class witness data\" paradigm. In this paradigm, miners/validators would not store state, and it would be the responsibility of the transaction senders to attach a \"witness\" to their transaction - essentially, a Merkle branch that provides and proves the state of any accounts accessed by the transaction. For a full-scale implementation, see https://github.com/ethereum/EIPs/issues/726, but we can also consider a more limited implementation applying to just storage roots.\r\n\r\nNote that the witness would be sent by the transaction sender, but it would not be committed to (ie. signed) by the sender; it would be sent alongside the transaction (yes, this is segwit for ethereum, heh heh heh). Actually committing to the witness, by PoW'ing or signing the block that contains the entire transaction package, would be the responsibility of the miner/block proposer. The reason is that one or blocks could have appeared since the sender sent the transaction, and so the storage root that the transaction would _actually_ apply to would be different from the storage root that the sender saw when first packaging the transaction. However, a miner/proposer that saw the original witness, and that was active as a full node in the intervening blocks, would see all the instances where storage roots were changed, and so would easily be able to get the new Merkle tree nodes from a cache and thereby reconstruct the witness appropriate for inclusion into a new block. This cache could expire after, say, 5000 blocks, so if a transaction does not get in within that time it would need to be resent (actually, there's a usability rationale for making the cache last even longer, possibly 3+ months).\r\n\r\nThe only requirement for this is that the specific set of storage keys that could get accessed _is_ part of the data signed by the transaction sender, and attempts to access other keys throw an exception. Otherwise, a miner could run a transaction, then realize that it is attempting to access data that is not available, and thus lose cycles processing the transaction and not be able to validly include the transaction and hence not get revenue.\r\n\r\nAt first glance (thanks @chriseth for bringing this up), it _seems_ harder to extend this to state roots provided by TRIE_GET and TRIE_SET. The reason is that state roots for these opcodes could come from anywhere, and so it may well be possible that a contract could try running TRIE_SET with a witness that does not exist or is not available.\r\n\r\nThe versions of TRIE_GET and TRIE_SET provided above get around the problem by requiring the witness to be committed to _in consensus_, and fail if they are not there, but this is very bad for usability, because it means that if a contract does use these \"dynamic tries\" to store application state (eg. balances of an ERC20 token), then it would be very hard for two senders to interact with the contract at the same time.\r\n\r\nThese \"dynamic tries\" do not have a static location, so one cannot make a \"stable pointer\" to them in signed transaction data the same way that one can with storage roots. One could solve the front-running problem by moving witness data outside of the signed tx data, but then the lack of \"stable pointers\" means that either (i) the locations are still in the signed tx data, in which case miners may try to include a tx but get a \"witness data not found\" error halfway through execution, or (ii) the locations are not in the signed tx data, in which case a miner can make arbitrary state queries fail by taking them out of the transaction when including it.\r\n\r\nThere may be a clever solution to this, but I am still thinking about it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/337749339/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/338003274",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-338003274",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 338003274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODAwMzI3NA==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-19T18:53:59Z",
    "updated_at": "2017-10-19T18:53:59Z",
    "author_association": "MEMBER",
    "body": "The \"stateless client, first-class witness data\" idea was also suggested in the Least Authority [analysis](https://github.com/LeastAuthority/ethereum-analyses/blob/master/GasEcon.md#reducing-minerverifier-storage-costs):\r\n\r\n> Further reductions could be obtained by only storing the root of the entire account tree, and require senders to include the Merkle-tree \"uncle\" nodes necessary to verify the claimed dataset's presence in that tree.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/338003274/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381188172",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-381188172",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 381188172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTE4ODE3Mg==",
    "user": {
      "login": "void4",
      "id": 11392207,
      "node_id": "MDQ6VXNlcjExMzkyMjA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/11392207?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/void4",
      "html_url": "https://github.com/void4",
      "followers_url": "https://api.github.com/users/void4/followers",
      "following_url": "https://api.github.com/users/void4/following{/other_user}",
      "gists_url": "https://api.github.com/users/void4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/void4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/void4/subscriptions",
      "organizations_url": "https://api.github.com/users/void4/orgs",
      "repos_url": "https://api.github.com/users/void4/repos",
      "events_url": "https://api.github.com/users/void4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/void4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T16:23:05Z",
    "updated_at": "2018-04-13T16:23:05Z",
    "author_association": "NONE",
    "body": "Is anyone working on this or alternatively, on a language that supports recursive nesting/sandboxing?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381188172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381189563",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-381189563",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 381189563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTE4OTU2Mw==",
    "user": {
      "login": "Magicking",
      "id": 284088,
      "node_id": "MDQ6VXNlcjI4NDA4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/284088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Magicking",
      "html_url": "https://github.com/Magicking",
      "followers_url": "https://api.github.com/users/Magicking/followers",
      "following_url": "https://api.github.com/users/Magicking/following{/other_user}",
      "gists_url": "https://api.github.com/users/Magicking/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Magicking/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Magicking/subscriptions",
      "organizations_url": "https://api.github.com/users/Magicking/orgs",
      "repos_url": "https://api.github.com/users/Magicking/repos",
      "events_url": "https://api.github.com/users/Magicking/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Magicking/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T16:28:02Z",
    "updated_at": "2018-04-13T16:28:02Z",
    "author_association": "NONE",
    "body": "I've started https://github.com/Magicking/solidity-evm for https://ethresear.ch/t/state-channel-toy-implementation/1495 I have to find time to work more on that",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381189563/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/390522390",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-390522390",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 390522390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDUyMjM5MA==",
    "user": {
      "login": "void4",
      "id": 11392207,
      "node_id": "MDQ6VXNlcjExMzkyMjA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/11392207?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/void4",
      "html_url": "https://github.com/void4",
      "followers_url": "https://api.github.com/users/void4/followers",
      "following_url": "https://api.github.com/users/void4/following{/other_user}",
      "gists_url": "https://api.github.com/users/void4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/void4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/void4/subscriptions",
      "organizations_url": "https://api.github.com/users/void4/orgs",
      "repos_url": "https://api.github.com/users/void4/repos",
      "events_url": "https://api.github.com/users/void4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/void4/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-20T23:53:05Z",
    "updated_at": "2022-03-22T13:01:25Z",
    "author_association": "NONE",
    "body": "This proposal has some interesting implications, one of which is that it becomes necessary to support these calls recursively (VM executing VM executing VM... etc.). Another interesting property is this:\r\n\r\nAs of now, the EVM only supports \"complete\" transactions, if it runs out of gas, everything is reverted. Such an instruction could only run subcomputations with fewer resources (gas limit) than it has itself. I'd call this objective/absolute behaviour. Example:\r\n\r\n`100->30->10`\r\n\r\nA system supporting partial execution, state serialization and task resumption could support subjective/relative behaviour: a node in the execution chain/tree can run a child with a higher gas limit, but control reverts back to the parent of the earliest tree node that ran out of gas. The VM can be built in a way such that a node doesn't notice it ran out of resources. Example:\r\n\r\nSquare brackets denote the node which currently has control.\r\n\r\n```\r\nChild of child is currently running:\r\n100->50->[80]\r\nControl reverts back to parent of node:\r\n[50]->0->30\r\nParent of node decides to refuel child, control is immediately transferred back to where it was\r\n50->40->[30]\r\n```\r\n\r\nAt first, this approach seems inefficient, since all parent nodes have to be checked every instruction step, but this can be optimized by ordering them and only checking the one with the lowest resources.\r\n\r\nI figured this would be interesting, which is why I spent a few months creating a resource aware recursive virtual machine that shows that this proposal is not only possible, but opens up a wide range of further semantics: https://esolangs.org/wiki/RarVM\r\n\r\nAt first, I specified and implemented it recursively: ~ https://gist.github.com/void4/ccbfbf5293c474b971c2a9559cbc0a53 This resulted in a tree traversal (root->current node) every instruction step. The current implementations (RPython, Rust) are optimized and only switch between nodes if there is a transfer of control.\r\n\r\nI'm using separate resource limits/resource vectors: gas for instruction steps and a memory limit (alternatively, memory*gas=memory seconds).\r\n\r\nAdmittedly, it would be very difficult to implement this on the current EVM, so I'm hoping that the EWASM environment will enable it some day.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/390522390/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/445656644",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-445656644",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 445656644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTY1NjY0NA==",
    "user": {
      "login": "qbig",
      "id": 5563225,
      "node_id": "MDQ6VXNlcjU1NjMyMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5563225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qbig",
      "html_url": "https://github.com/qbig",
      "followers_url": "https://api.github.com/users/qbig/followers",
      "following_url": "https://api.github.com/users/qbig/following{/other_user}",
      "gists_url": "https://api.github.com/users/qbig/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qbig/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qbig/subscriptions",
      "organizations_url": "https://api.github.com/users/qbig/orgs",
      "repos_url": "https://api.github.com/users/qbig/repos",
      "events_url": "https://api.github.com/users/qbig/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qbig/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-10T03:36:47Z",
    "updated_at": "2018-12-10T03:44:24Z",
    "author_association": "NONE",
    "body": "Could anyone explain how we could achieve this?  I mean how could we recover an old state from \"stateRoot+txs\" ? Does witness data include snapshot of previous state?\r\n> User wants to create a contract that queries the historical state of other contracts, or possibly itself, without having to store this entire historical data in storage. The user does so by simply making the query calls use EXECTX, with the right ABI data to make the call specified inside the transaction, and requiring the user to pass in (i) the header of the historical block, which contains the stateroot and can be verified against the hash provided by the BLOCKHASH opcode, and (ii) the witness data.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/445656644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003642746",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-1003642746",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 1003642746,
    "node_id": "IC_kwDOAq426M470l96",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T00:42:30Z",
    "updated_at": "2022-01-02T00:42:30Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003642746/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013783556",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-1013783556",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 1013783556,
    "node_id": "IC_kwDOAq426M48bRwE",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-16T00:43:41Z",
    "updated_at": "2022-01-16T00:43:41Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013783556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1143787721",
    "html_url": "https://github.com/ethereum/EIPs/issues/726#issuecomment-1143787721",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/726",
    "id": 1143787721,
    "node_id": "IC_kwDOAq426M5ELNDJ",
    "user": {
      "login": "santakrosbom",
      "id": 35353560,
      "node_id": "MDQ6VXNlcjM1MzUzNTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/35353560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/santakrosbom",
      "html_url": "https://github.com/santakrosbom",
      "followers_url": "https://api.github.com/users/santakrosbom/followers",
      "following_url": "https://api.github.com/users/santakrosbom/following{/other_user}",
      "gists_url": "https://api.github.com/users/santakrosbom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/santakrosbom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/santakrosbom/subscriptions",
      "organizations_url": "https://api.github.com/users/santakrosbom/orgs",
      "repos_url": "https://api.github.com/users/santakrosbom/repos",
      "events_url": "https://api.github.com/users/santakrosbom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/santakrosbom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-01T15:53:51Z",
    "updated_at": "2022-06-01T15:53:51Z",
    "author_association": "NONE",
    "body": "0",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1143787721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
