{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/3641",
  "id": 938536220,
  "node_id": "MDU6SXNzdWU5Mzg1MzYyMjA=",
  "number": 3641,
  "title": "[EIP-3525]Proposal of Semi Fungible Token Standard",
  "user": {
    "login": "Will42W",
    "id": 82493955,
    "node_id": "MDQ6VXNlcjgyNDkzOTU1",
    "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Will42W",
    "html_url": "https://github.com/Will42W",
    "followers_url": "https://api.github.com/users/Will42W/followers",
    "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
    "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
    "organizations_url": "https://api.github.com/users/Will42W/orgs",
    "repos_url": "https://api.github.com/users/Will42W/repos",
    "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Will42W/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2021-07-07T06:28:43Z",
  "updated_at": "2022-06-27T07:41:29Z",
  "closed_at": "2022-06-27T07:37:34Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "eip: 3525\r\ntitle: Fractionalized NFT Standard\r\nauthor: Will Wang (@will-edge), Mike Meng <myan@solv.finance>, TsaiYee <yee.tsai@gmail.com>, Ryan Chow <ryanchow@solv.finance>, Zhongxin Wu <wuzhongxin@solv.finance>, AlvisDu <dujincai@solv.finance>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/3641\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2020-12-01\r\nrequires: 165, 721\r\n\r\n## Simple Summary\r\n\r\nThis is a standard for semi-fungible tokens. The set of smart contract interfaces described in this document defines an ERC-721 extension, which enhances ERC-721 by adding a 'units' property to represent the quantitative nature of a token and enabling some quantitative operations for the token, most notably splitting and merging.\r\n\r\n## Abstract\r\n\r\nVNFT is ERC-721 compatible, which means, as an ERC-721 token, each VNFT contains an ID property to identify itself as a universally unique entity. What empowers a VNFT is that it contains a 'units' property, representing the quantitative nature of the token. Thus, this VNFT can be split into several different VNFTs, with certain properties maintained unchanged but the sum of the units of all split-out VNFTs equals that of the original one. Nevertheless, each VNFT has a 'SLOT' attribute, which labels its logical category. Several VNFTs can be merged into one VNFT if their SLOT attributes indicate that they are of the same category.\r\n\r\n## Motivation\r\n\r\nTokenization of assets is one of the most important applications in crypto. Normally there are two options when tokenizing assets: fungible and non-fungible. The first one generally uses the ERC-20 standard, in the case that every unit of assets is identical to each other, ERC-20 standard provides a flexible and efficient way to manipulate fungible tokens. The second one predominately uses the ERC-721 token standard, for that each asset needs to be described by one or more customized properties. For example, when a decentralized exchange that supports the Automatic Market-Making model allows its liquidity providers to specify their positions at different price ranges, an LP token can be implemented in ERC-721, since this token standard has the capability to identify each position as an entity, with different attributes for each entity.\r\n\r\nBoth options have significant drawbacks. In the fungible way, one needs to create a separate ERC-20 contract for each different value or combination of customizable properties, which can easily require an unacceptable number of ERC-20 contracts in practice. On the other hand, there is no quantitative feature in an ERC-721, hence significantly reducing the computability, liquidity, and manageability. For example, when we want to stake part of the position LP in some smart contract, the liquidity has to be withdrawn from the LP to create a new one, causes inconvenience and temporary decrease of liquidity.\r\n\r\nAn intuitive and direct way to solve the problem is to add a property to represent the quantitative nature directly to an ERC-721 token, making it best for both property customization and semi-fungibility. Furthermore, the ERC-721 compatibility would help the new standard easily utilize existing infrastructures and gain fast adoption.\r\n\r\nFor further design motivations, see papers and documents below:\r\n\r\n**Articles & Discussions**\r\n\r\n- [How vnft can improve position management in uniswap-v3](https://solvprotocol.medium.com/how-vnft-can-improve-position-management-in-uniswap-v3-221ab49a8cb2)\r\n- [What are digital assets](https://unizon.pro/en/7632.html)\r\n- [Vnft tokens vs.erc-20 vs. erc-721](https://medium.com/solv-blog/vnft-tokens-vs-erc-20-vs-erc-721-e75843053786)\r\n\r\n\r\n## Specification\r\n\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.\r\n\r\n\r\n**Related Standards**\r\n- [ERC-721 Non-Fungible Token Standard](./eip-721.md)\r\n- [ERC-165 Standard Interface Detection](./eip-165.md)\r\n- [JSON Schema](https://json-schema.org/)\r\n- [RFC 2119 Key words for use in RFCs to Indicate Requirement Levels](https://www.ietf.org/rfc/rfc2119.txt)\r\n\r\n\r\n**Every contract implementing the VNFT standard MUST implement the `VNFT` interfaces as follows:**\r\n\r\n```solidity\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * @title VNFT Versatile Non-Fungible Token Standard\r\n * @dev See https://eips.ethereum.org/EIPS/eip-VNFT\r\n * Note: the ERC-165 identifier for this interface is 0x1487d183.\r\n */\r\ninterface VNFT /* is ERC-721 */{\r\n\r\n    /**\r\n     * @dev This emits when partial units of a token are transferred to another.\r\n     * @param _from The address of the owner of `_tokenId`\r\n     * @param _to The address of the owner of `_targetTokenId`\r\n     * @param _tokenId The token to partially transfer\r\n     * @param _targetTokenId The token to receive the units transferred\r\n     @ @param _transferUnits The amount of units to transfer\r\n     */\r\n    event PartialTransfer(address indexed _from, address indexed _to, uint256 indexed _tokenId, uint256 _targetTokenId, uint256 _transferUnits);\r\n\r\n    /**\r\n     * @dev This emits when a token is split into two.\r\n     * @param _owner The address of the owner of both `_tokenId` and `_newTokenId`\r\n     * @param _tokenId The token to be split\r\n     * @param _newTokenId The new token created after split\r\n     @ @param _splitUnits The amount of units to be split from `_tokenId` to `_newTokenId`\r\n     */\r\n    event Split(address indexed _owner, uint256 indexed _tokenId, uint256 _newTokenId, uint256 _splitUnits);\r\n    \r\n    /**\r\n     * @dev This emits when a token is merged into another.\r\n     * @param _owner The address of the owner of both `_tokenId` and `_targetTokenId`\r\n     * @param _tokenId The token to be merged into `_targetTokenId`\r\n     * @param _targetTokenId The token to receive all units of `_tokenId`\r\n     @ @param _mergeUnits The amount of units to be merged from `_tokenId` to `_targetTokenId`\r\n     */\r\n    event Merge(address indexed _owner, uint256 indexed _tokenId, uint256 indexed _targetTokenId, uint256 _mergeUnits);\r\n    \r\n    /**\r\n     * @dev This emits when the approved units of the approved address for a token is set or changed.\r\n     * @param _owner The address of the owner of the token\r\n     * @param _approved The address of the approved operator\r\n     * @param _tokenId The token to approve\r\n     @ @param _approvalUnits The amount of approved units for the operator\r\n     */\r\n    event ApprovalUnits(address indexed _owner, address indexed _approved, uint256 indexed _tokenId, uint256 _approvalUnits);\r\n\r\n    /**\r\n     * @dev Find the slot of a token.\r\n     * @param _tokenId The identifier for a token\r\n     * @return The slot of the token\r\n     */\r\n    function slotOf(uint256 _tokenId)  external view returns(uint256);\r\n\r\n    /**\r\n     * @dev Count all tokens holding the same slot.\r\n     * @param _slot The slot of which to count tokens\r\n     * @return The number of tokens of the specified slot\r\n     */\r\n    function supplyOfSlot(uint256 _slot) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Find the number of decimals a token uses for units - e.g. 6, means the user representation of the units of a token can be calculated by dividing it by 1,000,000.\r\n     * @return The number of decimals for units of a token\r\n     */\r\n    function decimals() external view return (uint8);\r\n    /**\r\n     * @dev Enumerate all tokens of a slot.\r\n     * @param _slot The slot of which to enumerate tokens\r\n     * @param _index The index in the token list of the slot\r\n     * @return The id for the `_index`th token in the token list of the slot\r\n     */\r\n    function tokenOfSlotByIndex(uint256 _slot, uint256 _index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Find the amount of units of a token.\r\n     * @param _tokenId The token to query units\r\n     * @return The amount of units of `_tokenId`\r\n     */\r\n    function unitsInToken(uint256 _tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Set or change the approved units of an operator for a token.\r\n     * @param _to The address of the operator to be approved\r\n     * @param _tokenId The token to approve\r\n     * @param _units The amount of approved units for the operator\r\n     */\r\n    function approve(address _to, uint256 _tokenId, uint256 _units) external;\r\n\r\n    /**\r\n     * @dev Find the approved units of an operator for a token.\r\n     * @param _tokenId The token to find the operator for\r\n     * @param _spender The address of an operator\r\n     * @return The approved units of `_spender` for `_tokenId`\r\n     */\r\n    function allowance(uint256 _tokenId, address _spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Split a token into several by separating its units and assigning each portion to a new created token.\r\n     * @param _tokenId The token to split\r\n     * @param _units The amounts to split, i.e., the units of the new tokens created after split\r\n     * @return The ids of the new tokens created after split\r\n     */\r\n    function split(uint256 _tokenId, uint256[] calldata _units) external returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Merge several tokens into one by merging their units into a target token before burning them.\r\n     * @param _tokenIds The tokens to merge\r\n     * @param _targetTokenId The token to receive all units of the merged tokens\r\n     */\r\n    function merge(uint256[] calldata _tokenIds, uint256 _targetTokenId) external;\r\n\r\n    /**\r\n     * @dev Transfer partial units of a token to a newly created token. When transferring to a smart contract, the caller SHOULD check if the recipient is capable of receiving VNFTs.\r\n     * @param _from The address of the owner of the token to transfer\r\n     * @param _to The address of the owner the newly created token\r\n     * @param _tokenId The token to partially transfer\r\n     * @param _units The amount of units to transfer\r\n     * @return The token created after transfer containing the transferred units\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId, uint256 _units) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfer partial units of a token to a newly created token. If `_to` is a smart contract, this function MUST call `onVNFTReceived` on `_to` after transferring and then verify the return value.\r\n     * @param _from The address of the owner of the token to transfer\r\n     * @param _to The address of the owner the newly created token\r\n     * @param _tokenId The token to partially transfer\r\n     * @param _units The amount of units to transfer\r\n     * @param _data\r\n     * @return The token created after transfer containing the transferred units\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, uint256 _units, bytes calldata _data) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfer partial units of a token to an existing token. When transferring to a smart contract, the caller SHOULD check if the recipient is capable of receiving VNFTs.\r\n     * @param _from The address of the owner of the token to transfer\r\n     * @param _to The address of the owner the token to receive units\r\n     * @param _tokenId The token to partially transfer\r\n     * @param _targetTokenId The token to receive units\r\n     * @param _units The amount of units to transfer\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId, uint256 _targetTokenId, uint256 _units) external;\r\n\r\n    /**\r\n     * @dev Transfer partial units of a token to an existing token. If `_to` is a smart contract, this function MUST call `onVNFTReceived` on `_to` after transferring and then verify the return value.\r\n     * @param _from The address of the owner of the token to transfer\r\n     * @param _to The address of the owner the token to receive units\r\n     * @param _tokenId The token to partially transfer\r\n     * @param _targetTokenId The token to receive units\r\n     * @param _units The amount of units to transfer\r\n     * @param _data\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, uint256 _targetTokenId, uint256 _units, bytes calldata _data) external;\r\n}\r\n```\r\n\r\n### VNFT Token Receiver\r\n\r\nSmart contracts MUST implement all of the functions in the IVNFTReceiver interface to accept transfers. See “Safe Transfer Rules” for further detail. \r\n\r\n```javascript\r\n /**\r\n        @notice Handle the receipt of a VNFT token type.\r\n        @dev A VNFT-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \r\n        This function MUST return `bytes4(keccak256(\"onVNFTReceived(address,address,uint256,uint256,bytes)\"))` (i.e. 0xb382cdcd) if it accepts the transfer.\r\n        This function MUST revert if it rejects the transfer.\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param operator  The address which initiated the transfer (i.e. msg.sender)\r\n        @param from      The address which previously owned the token\r\n        @param id        The ID of the token being transferred\r\n        @param units     The units of tokenId being transferred\r\n        @param data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"onVNFTReceived(address,address,uint256,uint256,bytes)\"))`\r\n\tNote: the ERC-165 identifier for this interface is 0xb382cdcd.\r\n */\r\ninterface IVNFTReceiver {\r\n    function onVNFTReceived(address operator, address from, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (bytes4);\r\n}\r\n```\r\n\r\n\r\n### Token Manipulation\r\n\r\n\r\n#### Scenarios\r\n\r\n**_Transfer:_**\r\n\t\r\nSince a VNFT token is ERC-721 compatible, it has ID level transfer and units level transfer.\r\n\r\nThe ID level transfer SHOULD obey ERC-721 transfer rules with neither extra restrictions nor special treatments.\r\n\r\nThe units level transfer has two types of interfaces, and both have safe and unsafe versions:\r\n\r\n```solidity\r\n\t\r\n1. function transferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId, uint256 units) external; \r\n   function safeTransferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId, uint256 units, \r\n\t    bytes calldata data) external; \r\n\r\n2. function transferFrom(address from, address to, uint256 tokenId, uint256 units) external returns (uint256 newTokenId);\r\n   function safeTransferFrom(address from, address to, uint256 tokenId, uint256 units, bytes calldata data) \r\n\t    external returns (uint256 newTokenId);\r\n\r\n```\r\nThe main difference between the two kinds of interface is whether the application or the contract is responsible for determining/generating the target token ID in the transfer.\r\n\r\nSince partial transfer of a token will possibly result in new token id creation, it's important to give the implementing contract the ability to do that. On the other hand, since part of a token can be transferred to a token with the same slot, we want to keep the flexibility for dapps to determine whether to use this ability, resulting in less contract complexity and less gas consumption.\r\n\r\n\r\n**_Merge:_**\r\n\r\nSeveral tokes with the same SLOT can be merged together using `merge(uint256[] calldata tokenIds, uint256 targetTokenId);`. `targetTokenId` should already exist, and cannot be one of `tokenIds`. After merging, `targetTokenId` owns all the units from the merged tokens, and the merged tokens will be burned.\r\n\r\n\r\n**_Split:_**\r\n\r\nOne token can be split into several tokens, using`split(uint256 tokenId, uint256[] calldata units) returns (uint256[] memory newTokenIds);`. This will result in several newly generated tokens containing units equal to the parameter `units`.\r\n\r\n\r\n\r\n#### Rules\r\n\r\n**_approving rules:_**\r\n\r\n- For being compatible with ERC721, there are three kinds of approving operations, which SHOULD be used to indicate different levels of approval.\r\n- `setApprovalForAll` SHOULD indicate the top level of approval, the authorized operators are capable of handling all tokens, including their units, owned by the owner.\r\n- The ID level `approve` SHOULD indicate that the `_tokenId` is approved to the operator, but not the units of that token.\r\n- The units level `approve` with the `_units` parameter SHOULD indicate that only the specified amount of units are approved to the operator, but not the whole token.\r\n- Any `approve` MUST revert if `msg.sender` is equal to `_to` or `_operator`.\r\n- The units level `approve` MUST revert if `msg.sender` is not the owner of `_tokenId` nor set approval for all tokens.\r\n- The units level `approve` MUST emit the `ApprovalUnits` event.\r\n\r\n**_splitting rules:_**\r\n\r\n- MUST revert if `_tokenId` is not a valid token.\r\n- MUST revert if `msg.sender` is neither the owner of `_tokenId` nor set approval for all.\r\n- MUST revert if the sum of all `_units` exceeds the actual amount of units in `_tokenId`.\r\n- MUST return an array containing the ids of the generated tokens after splitting.\r\n- MUST emit the `Split` event.\r\n\r\n**_merging rules:_**\r\n\r\n- MUST revert if `_targetTokenId` or any of `_tokenIds` is not a valid token.\r\n- MUST revert if the owner of `tokenId` is not the owner of `_targetTokenId`.\r\n- MUST revert if `msg.sender` is neither the owner of all `_tokenIds` and `targetTokenId` nor having been set approval for all.\r\n- MUST revert if any of `_tokenIds` is equal to `_targetTokenId`.\r\n- Each of `_tokenIds` MUST be burnt after being merged.\r\n- MUST emit the `Merge` event.\r\n\r\n**_transferFrom rules:_**\r\n\r\n- The ERC721 level `transferFrom` without the `_units` and the `_targetTokenId` parameters SHOULD indicate transferring a whole token, including all of its units.\r\n\t- MUST revert unless `msg.sender` is the owner of `_tokenId`, or the ERC721 level approved address, or having been set approval for all tokens.\r\n\t- MUST revert if `_tokenId` is not a valid token\r\n\t- MUST revert if `_from` is not the current owner of `_tokenId`\r\n\t- MUST revert if `_to` is the zero address\r\n\t- MUST emit the ERC721 level `Transfer` event\r\n\t\r\n- The VNFT level `transferFrom` without the `_targetTokenId` parameter SHOULD indicate transferring partial units to a new token of the recipient.\r\n\t- MUST revert unless `msg.sender` is the owner of `_tokenId`, or having been set approval for all tokens, or having been VNFT approved a certain number units of `_tokenId`.\t\r\n\t- MUST revert if `_tokenId` is not a valid token.\r\n\t- MUST revert if `_from` is not the current owner of `_tokenId`.\r\n\t- MUST revert if `_to` is the zero address.\r\n\t- MUST revert if the transfer amount exceeds the actual amount of units in `_tokenId`.\r\n\t- MUST revert if the transfer amount exceeds the VNFT approved units limit.\r\n\t- MUST return the newly created token of the recipient containing the transferred units.\r\n\t- MUST emit the VNFT level `PartialTransfer` event.\r\n\t\r\n- The VNFT level `transferFrom` with both the `_units` and the `_targetTokenId` parameters SHOULD indicate transferring partial units to an existing token of the recipient.\r\n\t- MUST revert unless `msg.sender` is the owner of `_tokenId`, or having been set approval for all tokens, or the transfer amount is within the VNFT approved units limit.\r\n\t- MUST revert if either `_tokenId` or `_targetTokenId` is not a valid token.\r\n\t- MUST revert if `_from` is not the current owner of `_tokenId`.\r\n\t- MUST revert if `_to` is not the current owner of `_targetTokenId`.\r\n\t- MUST revert if `_to` is the zero address.\r\n\t- MUST revert if the transfer amount exceeds the actual amount of units in `_tokenId`.\r\n\t- MUST revert if the transfer amount exceeds the VNFT approved units limit.\r\n\t- MUST emit the VNFT level `PartialTransfer` event.\r\n\r\n**_safeTransferFrom rules:_**\r\n\r\n- `safeTransferFrom` SHOULD be used to implement the same function as `transferFrom`, with an extra step to check if the recipient is capable of receiving VNFTs by implementing the `onVNFTReceived` interface.\r\n- MUST obey the above rules set for `transferFrom`.\r\n- MUST check if `_to` is a smart contract (code size > 0). If so, `safeTransferFrom` MUST call `onVNFTReceived` on `_to` and MUST revert if the return value does not match `bytes4(keccak256(\"onVNFTReceived(address,address,uint256,uint256,bytes)\"))`\r\n\r\n\r\n\r\n\r\n### Metadata \r\n\r\n\r\n#### Metadata Extensions\r\n\r\nVNFT metadata extensions are compatible ERC-721 metadata extensions.\r\n\r\n\r\n#### VNFT Metadata URI JSON Schema\r\n\r\nThis is the \"VNFT Metadata JSON Schema\" referenced above.\r\n\r\n```json\r\n{\r\n    \"title\": \"Asset Metadata\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"name\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"Identifies the asset to which this NFT represents\"\r\n        },\r\n        \"description\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"Describes the asset to which this NFT represents\"\r\n        },\r\n        \"image\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\"\r\n        },\r\n         \"decimals\": {\r\n            \"type\": \"integer\",\r\n            \"description\": \"The number of decimal places that the token amount should display - e.g. 18, means to divide the token amount by 1000000000000000000 to get its user representation.\"\r\n        },\r\n        \"properties\": {\r\n            \"type\": \"object\",\r\n            \"description\": \"Arbitrary properties. Values may be strings, numbers, object or arrays.\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Approval\r\n\r\nVNFT adds a new approval model, that is, one can approve operators to partial transfer units from a token with certain ID, the new interface is:\r\n```function approve(address to, uint256 tokenId, uint256 units); ```\r\n\r\n\r\n\r\n## Rationale \r\n\r\n### Metadata generation\r\n\r\nSince VNFT is designed for representing underlying assets, rather than artifacts for gaming or arts, the implementation should give out the metadata directly from contract code, rather than give a URL of a server for returning metadata.\r\n\r\n\r\n### Design decision: Keep unsafe transfer\r\n\r\nThere are mainly two reasons we keep the unsafe transfer interfaces:\r\n\r\n1. Since VNFT is ERC-721 compatible, we must keep compatibility for all wallets and contracts that are still calling unsafe transfer interfaces for ERC-721 tokens.\r\n2. We want to keep the ability that dapps can trigger business logic on contracts by simply transferring VNFT tokens to them, that is, a contract can put business logic in `onVNFTReceived` function so that it can be called whenever a token is transferred using `safeTransferFrom`. However, in this situation, an approved contract with customized transfer functions like deposit etc. SHOULD never call `safeTransferFrom` since it will result in confusion that whether `onVNFTReceived` is called by itself or other dapps that safe transfer a token to it.\r\n\r\n\r\n### Approval\r\n\r\nFor maximum semantical compatibility with ERC-721, as well as simplifying the approval model, we decided to make the relationship between two levels of approval like that:\r\n\r\n1. Approval of an id does not result in the ability to partial transfer units from this id by the approved operator;\r\n2. Approval of all units in a token does not result in the ability to transfer the token entity by the approved operator;\r\n3. `setApprovalForAll` will result in the ability to transfer any tokens from the owner, as well as the ability to partial transfer units from any token.\r\n3. `setApprovalForAll` will result in the ability to approve any tokens of the owner to third parties, as well as the ability to approve partial transfer units of any token to third parties.\r\n\r\n\r\n## Backwards Compatibility\r\n\t\r\nAs mentioned at the very beginning, a VNFT contract is basically an ERC721 contract, hence it is 100% compatible with ERC-721.\r\n\r\n\r\n## Reference Implementation\r\n\r\n- [SOLV Vouchers - VNFT-core](https://github.com/solv-finance/solv-v2-voucher/tree/main/packages/solv-vnft-core/contracts)\r\n\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "Will42W",
    "id": 82493955,
    "node_id": "MDQ6VXNlcjgyNDkzOTU1",
    "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Will42W",
    "html_url": "https://github.com/Will42W",
    "followers_url": "https://api.github.com/users/Will42W/followers",
    "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
    "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
    "organizations_url": "https://api.github.com/users/Will42W/orgs",
    "repos_url": "https://api.github.com/users/Will42W/repos",
    "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Will42W/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/3641/reactions",
    "total_count": 25,
    "+1": 9,
    "-1": 1,
    "laugh": 0,
    "hooray": 5,
    "confused": 0,
    "heart": 5,
    "rocket": 5,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/875324290",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-875324290",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 875324290,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NTMyNDI5MA==",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-07-07T06:29:22Z",
    "updated_at": "2021-07-07T06:29:22Z",
    "author_association": "NONE",
    "body": "Since this is your first issue, we kindly remind you to check out [EIP-1](https://eips.ethereum.org/EIPS/eip-1) for guidance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/875324290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/876942446",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-876942446",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 876942446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3Njk0MjQ0Ng==",
    "user": {
      "login": "wschwab",
      "id": 31592931,
      "node_id": "MDQ6VXNlcjMxNTkyOTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/31592931?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wschwab",
      "html_url": "https://github.com/wschwab",
      "followers_url": "https://api.github.com/users/wschwab/followers",
      "following_url": "https://api.github.com/users/wschwab/following{/other_user}",
      "gists_url": "https://api.github.com/users/wschwab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wschwab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wschwab/subscriptions",
      "organizations_url": "https://api.github.com/users/wschwab/orgs",
      "repos_url": "https://api.github.com/users/wschwab/repos",
      "events_url": "https://api.github.com/users/wschwab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wschwab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-09T06:13:58Z",
    "updated_at": "2021-07-09T06:13:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi!\r\n\r\nI was reading through your EIP, and was curious why you're extending ERC-721 as opposed to [EIP-1155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md). The NFTs in 1155 already have the concept of each `tokenId` being able to have a number associated to it, meaning that you would need to extend the 1155 standard less than 721. \r\n\r\nAs I see it, you'd need to implement something tracking the total supply of each `tokenId` individually, and then you would likely want to add the `split` and `merge`. In addition, `split` would essentially be a restricted mint function - while there is no `mint` in the canonical 1155 standard, the standard is often implemented with one [here](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol#L262) is a link to OpenZeppelin's implementation, for example. `split` could be a call to something like OpenZeppelin's `_mint` with a require, something like `require(totalSupply(tokenId) == 1);`.\r\n\r\nInterested in hearing your thoughts!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/876942446/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877018060",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-877018060",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 877018060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzAxODA2MA==",
    "user": {
      "login": "danielzhou82",
      "id": 7507396,
      "node_id": "MDQ6VXNlcjc1MDczOTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7507396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielzhou82",
      "html_url": "https://github.com/danielzhou82",
      "followers_url": "https://api.github.com/users/danielzhou82/followers",
      "following_url": "https://api.github.com/users/danielzhou82/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielzhou82/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielzhou82/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielzhou82/subscriptions",
      "organizations_url": "https://api.github.com/users/danielzhou82/orgs",
      "repos_url": "https://api.github.com/users/danielzhou82/repos",
      "events_url": "https://api.github.com/users/danielzhou82/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielzhou82/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-09T08:36:25Z",
    "updated_at": "2021-07-09T08:36:25Z",
    "author_association": "NONE",
    "body": "The implementation links seem broken?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877018060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877564568",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-877564568",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 877564568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzU2NDU2OA==",
    "user": {
      "login": "Will42W",
      "id": 82493955,
      "node_id": "MDQ6VXNlcjgyNDkzOTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Will42W",
      "html_url": "https://github.com/Will42W",
      "followers_url": "https://api.github.com/users/Will42W/followers",
      "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
      "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
      "organizations_url": "https://api.github.com/users/Will42W/orgs",
      "repos_url": "https://api.github.com/users/Will42W/repos",
      "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Will42W/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-10T04:41:15Z",
    "updated_at": "2021-07-10T04:41:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hi!\r\n> \r\n> I was reading through your EIP, and was curious why you're extending ERC-721 as opposed to [EIP-1155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md). The NFTs in 1155 already have the concept of each `tokenId` being able to have a number associated to it, meaning that you would need to extend the 1155 standard less than 721.\r\n\r\n> ...\r\n\r\nHi, thanks for the comments.\r\n\r\nFirst of all, ERC1155 and ERC721 is totally different asset standard, the key point is that the meaning of 'ID' in these two standard is not the same. In ERC721, ID is used to distinguish two entities, whereas described in ERC1155, ID is actually a token type. The simple truth is, in certain/standard implementation of ERC1155, two or more addresses can hold tokens with same ID, while this cannot happen in ERC721.\r\n\r\nGiven the above, VNFT is to make ERC721 tokens semi-fungible, which means IDs are still identifications of entities, thats the key idea of this new standard. Hence the generation of new ID is sometime necessary for transferring amount within a token, and also a split function is needed.\r\n\r\nFor other details, yes split and partial transfer may result in calling _mint functions internally.\r\n\r\nHope this will explain our idea more clearly.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877564568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877615464",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-877615464",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 877615464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzYxNTQ2NA==",
    "user": {
      "login": "Will42W",
      "id": 82493955,
      "node_id": "MDQ6VXNlcjgyNDkzOTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Will42W",
      "html_url": "https://github.com/Will42W",
      "followers_url": "https://api.github.com/users/Will42W/followers",
      "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
      "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
      "organizations_url": "https://api.github.com/users/Will42W/orgs",
      "repos_url": "https://api.github.com/users/Will42W/repos",
      "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Will42W/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-10T10:37:46Z",
    "updated_at": "2021-07-10T10:37:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The implementation links seem broken?\r\n\r\nWell yes, we are still preparing the repo, since original development is based on another one. It will be ok at 7.15 as planned.\r\n\r\nThanks alot.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877615464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877788361",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-877788361",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 877788361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3Nzc4ODM2MQ==",
    "user": {
      "login": "wschwab",
      "id": 31592931,
      "node_id": "MDQ6VXNlcjMxNTkyOTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/31592931?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wschwab",
      "html_url": "https://github.com/wschwab",
      "followers_url": "https://api.github.com/users/wschwab/followers",
      "following_url": "https://api.github.com/users/wschwab/following{/other_user}",
      "gists_url": "https://api.github.com/users/wschwab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wschwab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wschwab/subscriptions",
      "organizations_url": "https://api.github.com/users/wschwab/orgs",
      "repos_url": "https://api.github.com/users/wschwab/repos",
      "events_url": "https://api.github.com/users/wschwab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wschwab/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-11T12:07:44Z",
    "updated_at": "2021-07-11T12:07:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> in certain/standard implementation of ERC1155, two or more addresses can hold tokens with same ID, while this cannot happen in ERC721\r\n\r\nbut you would want this to be possible with a \"versatile\" NFT that has been split, no? An unsplit NFT could have an amount of 1, which would then not be able to be held by more than one address, and only once it was split would it be able to be held by more than one address - isn't this what you're trying to accomplish?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877788361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877826125",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-877826125",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 877826125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3NzgyNjEyNQ==",
    "user": {
      "login": "Will42W",
      "id": 82493955,
      "node_id": "MDQ6VXNlcjgyNDkzOTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Will42W",
      "html_url": "https://github.com/Will42W",
      "followers_url": "https://api.github.com/users/Will42W/followers",
      "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
      "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
      "organizations_url": "https://api.github.com/users/Will42W/orgs",
      "repos_url": "https://api.github.com/users/Will42W/repos",
      "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Will42W/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-11T16:08:39Z",
    "updated_at": "2021-07-11T16:08:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "> \r\n> but you would want this to be possible with a \"versatile\" NFT that has been split, no? An unsplit NFT could have an amount of 1, which would then not be able to be held by more than one address, and only once it was split would it be able to be held by more than one address - isn't this what you're trying to accomplish?\r\n\r\nWell, as designed in this standard, the new tokens split out from original one will have new IDs, different from the original ID, so that ERC-721 compatibility is kept. The new tokens might have some relationship with the original one, that is, the same SLOT ID. To put it another way, SLOT is kind of token type in ERC-3525, whereas ID is kept for entity identifier as ERC-721, this mechanism combines capabilities both  of ERC-1155 and ERC-721, which is the key idea of ERC-3525.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/877826125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/883217920",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-883217920",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 883217920,
    "node_id": "IC_kwDOAq426M40pNYA",
    "user": {
      "login": "hangfo",
      "id": 4573293,
      "node_id": "MDQ6VXNlcjQ1NzMyOTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4573293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hangfo",
      "html_url": "https://github.com/hangfo",
      "followers_url": "https://api.github.com/users/hangfo/followers",
      "following_url": "https://api.github.com/users/hangfo/following{/other_user}",
      "gists_url": "https://api.github.com/users/hangfo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hangfo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hangfo/subscriptions",
      "organizations_url": "https://api.github.com/users/hangfo/orgs",
      "repos_url": "https://api.github.com/users/hangfo/repos",
      "events_url": "https://api.github.com/users/hangfo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hangfo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-20T08:48:26Z",
    "updated_at": "2021-07-20T08:49:44Z",
    "author_association": "NONE",
    "body": "I think [EIP-998](https://eips.ethereum.org/EIPS/eip-998) did the same thing. The fact is ERC-721 plus ERC-20 attributes actually. And no need to issue a new token with your project. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/883217920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/884715324",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-884715324",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 884715324,
    "node_id": "IC_kwDOAq426M40u688",
    "user": {
      "login": "Will42W",
      "id": 82493955,
      "node_id": "MDQ6VXNlcjgyNDkzOTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Will42W",
      "html_url": "https://github.com/Will42W",
      "followers_url": "https://api.github.com/users/Will42W/followers",
      "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
      "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
      "organizations_url": "https://api.github.com/users/Will42W/orgs",
      "repos_url": "https://api.github.com/users/Will42W/repos",
      "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Will42W/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-22T07:40:26Z",
    "updated_at": "2021-07-22T07:40:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think [EIP-998](https://eips.ethereum.org/EIPS/eip-998) did the same thing. The fact is ERC-721 plus ERC-20 attributes actually. And no need to issue a new token with your project.\r\n\r\nThank you for the comments, from this point of view, there are two aspects to be discussed.\r\n\r\nFirst of all, the PURPOSE of the two EIPs are quite different, EIP-998 is designed for composition, that is, to give the implementing token contract the ability to integrate with an EXISTING token contract. The top-down pattern  is designed for integrating an existing ERC721/ERC20(ERC223) contract as 'child', and the bottom-up pattern is for integrating an existing ERC721 contract as 'parent'. While for proposed VNFT standard, it is a single token standard with ID and units attribute, alone with other necessary concepts like SLOTs, splitting and merging, the integration with other token standard is left at implementation level, just like Compound's cToken which is a ERC20 containing an Existing ERC20, or Uniswap V3 LP which is a ERC721 with a pair of existing ERC20.\r\n\r\nSecondly, it's a good question that whether one can use one of the EIP-998 interfaces to SIMULATE the capability of VNFT, maybe this is your point. It is obvious that the ERC998ERC20BottomUp combined with ERC721 is the most likely way, however, it is far from doing the same thing: 1) if one directly uses EIP-998, then there are two token contracts integrated at runtime, hence the ownership, function-calling and approval model is totally different from a single contract. 2) if one implement a new single token contract to do the simulation, it will be like this:\r\n\r\n```solidity\r\ncontract DEMOTOKEN is IERC721, ERC998ERC20BottomUp {\r\n...\r\n}\r\n```\r\nActually it is not EIP-998 token any more, and many problems still exists: the approval model, the unnecessary of some parameters(e.g. the contract parameter in transfer function), besides some wasted functions like 'transferAsChild'. So the simulation is far from feasible and elegant.\r\n\r\nOne more thing, 'The fact is ERC-721 plus ERC-20 attributes actually' some how makes sense, just as we described at very beginning of the proposal, we are designing a semi-fungible token standard, by adding quantity attributes to ERC721. So that the argument could be whether it is valuable as a standard, from our opinion, the answer is yes, mainly depends on the fact that the design and implementation of such standard is far from trivial -- easily derived from or combined by existing ERC token standards.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/884715324/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/903085464",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-903085464",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 903085464,
    "node_id": "IC_kwDOAq426M410_2Y",
    "user": {
      "login": "aug2uag",
      "id": 1901195,
      "node_id": "MDQ6VXNlcjE5MDExOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1901195?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aug2uag",
      "html_url": "https://github.com/aug2uag",
      "followers_url": "https://api.github.com/users/aug2uag/followers",
      "following_url": "https://api.github.com/users/aug2uag/following{/other_user}",
      "gists_url": "https://api.github.com/users/aug2uag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aug2uag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aug2uag/subscriptions",
      "organizations_url": "https://api.github.com/users/aug2uag/orgs",
      "repos_url": "https://api.github.com/users/aug2uag/repos",
      "events_url": "https://api.github.com/users/aug2uag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aug2uag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-21T08:56:34Z",
    "updated_at": "2021-08-21T08:56:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "does your count decrement to zero? is semi-fungible as in consumption or redundancy, and how it is used?\r\n\r\nit's a little off-putting to me since NFT is the \"none\" in an all or none situation of fungibility, otherwise may need to have some mechanism to transform the object in some automated manner wherein each \"token\" of a \"semi-fungible\" asset remains unique, hence 721; otherwise, what would be the significant advantage over a limited set ERC20?\r\n\r\nsome thoughts, hope to hear your response(s)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/903085464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/913463037",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-913463037",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 913463037,
    "node_id": "IC_kwDOAq426M42clb9",
    "user": {
      "login": "Will42W",
      "id": 82493955,
      "node_id": "MDQ6VXNlcjgyNDkzOTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Will42W",
      "html_url": "https://github.com/Will42W",
      "followers_url": "https://api.github.com/users/Will42W/followers",
      "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
      "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
      "organizations_url": "https://api.github.com/users/Will42W/orgs",
      "repos_url": "https://api.github.com/users/Will42W/repos",
      "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Will42W/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-06T08:42:48Z",
    "updated_at": "2021-09-06T08:42:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> does your count decrement to zero? is semi-fungible as in consumption or redundancy, and how it is used?\r\n> \r\n> it's a little off-putting to me since NFT is the \"none\" in an all or none situation of fungibility, otherwise may need to have some mechanism to transform the object in some automated manner wherein each \"token\" of a \"semi-fungible\" asset remains unique, hence 721; otherwise, what would be the significant advantage over a limited set ERC20?\r\n> \r\n> some thoughts, hope to hear your response(s)\r\n\r\nThe scenario where semi-fungible token matters is that they represent certain kind of assets rather than simple arts. For example, Uniswap v3 Position LPs actually represent the ownership of underlying liquidity, the value should better be measured based on the amount of token issued, and the owner should have the ability to stake whole/part of the token to some DEFI protocols, just as Uniswap V2 can do(since its a ERC20). On the other hand, ERC20 cannot be used because it will result in creating a new contract for each position, which is un-acceptable. The only way to solve this problem is semi-fungible token, which both have amount property and is individually customizable for each position. \r\n\r\nFor detailed explanation of the above idea, please visit https://solvprotocol.medium.com/how-vnft-can-improve-position-management-in-uniswap-v3-221ab49a8cb2, for more general discussion, please visit https://unizon.pro/en/7632.html \r\n\r\nThanks for your concern.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/913463037/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/926377133",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-926377133",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 926377133,
    "node_id": "IC_kwDOAq426M43N2St",
    "user": {
      "login": "superdcc",
      "id": 8504592,
      "node_id": "MDQ6VXNlcjg1MDQ1OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8504592?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/superdcc",
      "html_url": "https://github.com/superdcc",
      "followers_url": "https://api.github.com/users/superdcc/followers",
      "following_url": "https://api.github.com/users/superdcc/following{/other_user}",
      "gists_url": "https://api.github.com/users/superdcc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/superdcc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/superdcc/subscriptions",
      "organizations_url": "https://api.github.com/users/superdcc/orgs",
      "repos_url": "https://api.github.com/users/superdcc/repos",
      "events_url": "https://api.github.com/users/superdcc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/superdcc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-24T06:21:57Z",
    "updated_at": "2021-09-24T06:21:57Z",
    "author_association": "NONE",
    "body": "Asking, how is the stage of this proposal ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/926377133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/927007257",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-927007257",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 927007257,
    "node_id": "IC_kwDOAq426M43QQIZ",
    "user": {
      "login": "Will42W",
      "id": 82493955,
      "node_id": "MDQ6VXNlcjgyNDkzOTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Will42W",
      "html_url": "https://github.com/Will42W",
      "followers_url": "https://api.github.com/users/Will42W/followers",
      "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
      "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
      "organizations_url": "https://api.github.com/users/Will42W/orgs",
      "repos_url": "https://api.github.com/users/Will42W/repos",
      "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Will42W/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-25T04:12:46Z",
    "updated_at": "2021-09-25T04:12:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Under discussion right here :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/927007257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1023034855",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-1023034855",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 1023034855,
    "node_id": "IC_kwDOAq426M48-kXn",
    "user": {
      "login": "McKean",
      "id": 517851,
      "node_id": "MDQ6VXNlcjUxNzg1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/517851?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/McKean",
      "html_url": "https://github.com/McKean",
      "followers_url": "https://api.github.com/users/McKean/followers",
      "following_url": "https://api.github.com/users/McKean/following{/other_user}",
      "gists_url": "https://api.github.com/users/McKean/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/McKean/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/McKean/subscriptions",
      "organizations_url": "https://api.github.com/users/McKean/orgs",
      "repos_url": "https://api.github.com/users/McKean/repos",
      "events_url": "https://api.github.com/users/McKean/events{/privacy}",
      "received_events_url": "https://api.github.com/users/McKean/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-01-27T09:56:18Z",
    "updated_at": "2022-01-27T09:56:18Z",
    "author_association": "NONE",
    "body": "since the discussion is happening right here. What are the concerns? or what is the \"discussion\"?\r\nIs it a question of not reinventing and trying to standardize a DAO?\r\nShould fractionalized NFTs be handled by specific applications by introducing a standard within a specific use case?\r\n\r\nJust throwing in some questions, to understand what it is we are discussing ;)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1023034855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1035636847",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-1035636847",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 1035636847,
    "node_id": "IC_kwDOAq426M49upBv",
    "user": {
      "login": "h0tw4t3r",
      "id": 35642018,
      "node_id": "MDQ6VXNlcjM1NjQyMDE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/35642018?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h0tw4t3r",
      "html_url": "https://github.com/h0tw4t3r",
      "followers_url": "https://api.github.com/users/h0tw4t3r/followers",
      "following_url": "https://api.github.com/users/h0tw4t3r/following{/other_user}",
      "gists_url": "https://api.github.com/users/h0tw4t3r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h0tw4t3r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h0tw4t3r/subscriptions",
      "organizations_url": "https://api.github.com/users/h0tw4t3r/orgs",
      "repos_url": "https://api.github.com/users/h0tw4t3r/repos",
      "events_url": "https://api.github.com/users/h0tw4t3r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h0tw4t3r/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-10T23:25:09Z",
    "updated_at": "2022-02-10T23:25:09Z",
    "author_association": "NONE",
    "body": "@will-edge Thanks for the proposal.\r\n\r\nIn the context of ERC721 and its non-fungibility people rather say not ERC721 but NFT due to its nature.\r\nHowever, your proposal doesn't really intersect with it as I think.\r\n\r\n\r\n\r\n> First of all, ERC1155 and ERC721 is totally different asset standard, the key point is that the meaning of 'ID' in these two standards is not the same.\r\n\r\nTo me, it rather sounds that this proposal delegates the abstraction of fungibility to \"units\". \"Units\" in the context of the same \"ID\" are actually fungible, as you can send/receive **multiple** units and split one single **non-fungible** token into **non-fungible** token with **fungible** units.\r\n\r\nAnd finally, I think once a thing is fungible, all overlying abstractions that were non-fungible become fungible as well.\r\n\r\nAlso can you please tell me what does letter \"V\" in \"VNFT\" stands for?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1035636847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1058889181",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-1058889181",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 1058889181,
    "node_id": "IC_kwDOAq426M4_HV3d",
    "user": {
      "login": "Will42W",
      "id": 82493955,
      "node_id": "MDQ6VXNlcjgyNDkzOTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Will42W",
      "html_url": "https://github.com/Will42W",
      "followers_url": "https://api.github.com/users/Will42W/followers",
      "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
      "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
      "organizations_url": "https://api.github.com/users/Will42W/orgs",
      "repos_url": "https://api.github.com/users/Will42W/repos",
      "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Will42W/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-03-04T06:58:45Z",
    "updated_at": "2022-03-04T06:58:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi, h0tw4t3r, thanks for the comments\r\n\r\n> To me, it rather sounds that this proposal delegates the abstraction of fungibility to \"units\". \"Units\" in the context of the same \"ID\" are actually fungible, as you can send/receive **multiple** units and split one single **non-fungible** token into **non-fungible** token with **fungible** units.\r\n\r\nYes, this is exactly why we name this standard as Semi Fungible Token, with both fungible units and non-fungible IDs. Combining these two aspects, the standard is best for describing certain digital assets other than normal FTs and NFTs.\r\n\r\n> \r\n> And finally, I think once a thing is fungible, all overlying abstractions that were non-fungible become fungible as well.\r\n> \r\n\r\nYes, so we must have the ability to identify which ones are fungible, and which are not, for this purpose we introduce the SLOT concept, actually SLOT is the category of the fungibles, since IDs are different for those fungible tokens.\r\n\r\n> Also can you please tell me what does letter \"V\" in \"VNFT\" stands for?\r\n\r\nOriginally VNFT stands for Voucher NFT, because we describe the digital assets which has this semi-fungibility as a kind of \"voucher\". However, now we decide to separate these two concepts. We will only call these tokens ERC-3525 token or ERC-3525 NFT, while Voucher can be used at product level.\r\n\r\nAs you can see, \"VNFT\" had been removed from the proposal, it only existed in the original version of implementation. We will propose an upgrade later in this month(March, 2022), with some enhancements and modifications, as well as a new reference implementation, and the VNFT symbol will no longer exist.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1058889181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1139768684",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-1139768684",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 1139768684,
    "node_id": "IC_kwDOAq426M5D731s",
    "user": {
      "login": "abhi3700",
      "id": 16472948,
      "node_id": "MDQ6VXNlcjE2NDcyOTQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/16472948?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abhi3700",
      "html_url": "https://github.com/abhi3700",
      "followers_url": "https://api.github.com/users/abhi3700/followers",
      "following_url": "https://api.github.com/users/abhi3700/following{/other_user}",
      "gists_url": "https://api.github.com/users/abhi3700/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abhi3700/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abhi3700/subscriptions",
      "organizations_url": "https://api.github.com/users/abhi3700/orgs",
      "repos_url": "https://api.github.com/users/abhi3700/repos",
      "events_url": "https://api.github.com/users/abhi3700/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abhi3700/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-27T16:22:04Z",
    "updated_at": "2022-05-27T16:22:04Z",
    "author_association": "NONE",
    "body": "Can we use an existing NFT (ERC-721 or ERC-1155) & fractionalize using this EIP-3525 standard?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1139768684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1166997130",
    "html_url": "https://github.com/ethereum/EIPs/issues/3641#issuecomment-1166997130",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3641",
    "id": 1166997130,
    "node_id": "IC_kwDOAq426M5FjvaK",
    "user": {
      "login": "Will42W",
      "id": 82493955,
      "node_id": "MDQ6VXNlcjgyNDkzOTU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/82493955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Will42W",
      "html_url": "https://github.com/Will42W",
      "followers_url": "https://api.github.com/users/Will42W/followers",
      "following_url": "https://api.github.com/users/Will42W/following{/other_user}",
      "gists_url": "https://api.github.com/users/Will42W/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Will42W/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Will42W/subscriptions",
      "organizations_url": "https://api.github.com/users/Will42W/orgs",
      "repos_url": "https://api.github.com/users/Will42W/repos",
      "events_url": "https://api.github.com/users/Will42W/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Will42W/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-06-27T07:41:14Z",
    "updated_at": "2022-06-27T07:41:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "The thread is closed, for discussion of EIP-3525, please refer to https://github.com/ethereum/EIPs/issues/5183",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1166997130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
