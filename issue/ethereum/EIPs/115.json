{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/115/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/115/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/115/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/115",
  "id": 161048110,
  "node_id": "MDU6SXNzdWUxNjEwNDgxMTA=",
  "number": 115,
  "title": "Eliminate side effects from failed transactions.",
  "user": {
    "login": "destenson",
    "id": 282538,
    "node_id": "MDQ6VXNlcjI4MjUzOA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/destenson",
    "html_url": "https://github.com/destenson",
    "followers_url": "https://api.github.com/users/destenson/followers",
    "following_url": "https://api.github.com/users/destenson/following{/other_user}",
    "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
    "organizations_url": "https://api.github.com/users/destenson/orgs",
    "repos_url": "https://api.github.com/users/destenson/repos",
    "events_url": "https://api.github.com/users/destenson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/destenson/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2016-06-18T23:22:30Z",
  "updated_at": "2016-06-25T02:24:04Z",
  "closed_at": "2016-06-24T22:58:45Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "The recent exploitation in a bug in the DAO's contract showed a massive deficiency in Ethereum that I was not aware of. The [Solidity documentation](http://solidity.readthedocs.io/en/latest/solidity-by-example.html?highlight=throw) says that `throw`\n\n> ```\n>         // `throw` terminates and reverts all changes to\n>         // the state and to Ether balances. It is often\n>         // a good idea to use this if functions are\n>         // called incorrectly. But watch out, this\n>         // will also consume all provided gas.\n> ```\n\nThe DAO's contract code and other code that is vulnerable to the same bug are written to rely on that statement being true. We think that if we throw, the transaction will be voided & nulled (minus spent gas). Apparently this is not the case. Can you make it be please? Otherwise, Ethereum will never be taken seriously again.\n",
  "closed_by": {
    "login": "destenson",
    "id": 282538,
    "node_id": "MDQ6VXNlcjI4MjUzOA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/destenson",
    "html_url": "https://github.com/destenson",
    "followers_url": "https://api.github.com/users/destenson/followers",
    "following_url": "https://api.github.com/users/destenson/following{/other_user}",
    "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
    "organizations_url": "https://api.github.com/users/destenson/orgs",
    "repos_url": "https://api.github.com/users/destenson/repos",
    "events_url": "https://api.github.com/users/destenson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/destenson/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/115/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/115/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226970635",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-226970635",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 226970635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk3MDYzNQ==",
    "user": {
      "login": "JasonCoombs",
      "id": 16699430,
      "node_id": "MDQ6VXNlcjE2Njk5NDMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16699430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JasonCoombs",
      "html_url": "https://github.com/JasonCoombs",
      "followers_url": "https://api.github.com/users/JasonCoombs/followers",
      "following_url": "https://api.github.com/users/JasonCoombs/following{/other_user}",
      "gists_url": "https://api.github.com/users/JasonCoombs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JasonCoombs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JasonCoombs/subscriptions",
      "organizations_url": "https://api.github.com/users/JasonCoombs/orgs",
      "repos_url": "https://api.github.com/users/JasonCoombs/repos",
      "events_url": "https://api.github.com/users/JasonCoombs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JasonCoombs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-18T23:28:44Z",
    "updated_at": "2016-06-18T23:28:44Z",
    "author_association": "NONE",
    "body": "That documentation is a recommendation for well-behaved code. There are other technical issues also which pose existential risks for Ethereum as a \"contract-oriented\" platform and for Solidity as a \"contract-oriented programming language\" intended to be taken seriously and used widely... See https://github.com/ethereum/solidity/issues/598#issuecomment-226631381\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226970635/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226973638",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-226973638",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 226973638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk3MzYzOA==",
    "user": {
      "login": "taoteh1221",
      "id": 1760489,
      "node_id": "MDQ6VXNlcjE3NjA0ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1760489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taoteh1221",
      "html_url": "https://github.com/taoteh1221",
      "followers_url": "https://api.github.com/users/taoteh1221/followers",
      "following_url": "https://api.github.com/users/taoteh1221/following{/other_user}",
      "gists_url": "https://api.github.com/users/taoteh1221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taoteh1221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taoteh1221/subscriptions",
      "organizations_url": "https://api.github.com/users/taoteh1221/orgs",
      "repos_url": "https://api.github.com/users/taoteh1221/repos",
      "events_url": "https://api.github.com/users/taoteh1221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taoteh1221/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T01:08:23Z",
    "updated_at": "2016-06-19T01:10:28Z",
    "author_association": "NONE",
    "body": "@destenson  I think the root issue here is that ALL transaction-related calls in higher level languages like Solidity in Ethereum should ALWAYS have a boolean == false return value if things like the stack limit reached, etc happen in the virtual machine...my understanding is that this is not the case right now. Therefore I don't believe 'throw' is the issue if I'm understanding this correctly (somebody please correct me if I am wrong), but rather the conditional statement _that calls the 'throw'_ getting a reliable return value. If transaction-related calls always returned boolean == false reliably, then programmers of the higher level smart contract languages like Solidity do not need to do anything except look for a boolean == false value to 'throw'. \n\nExample: Currently a programmer can get into a lot of trouble using 'send', _without checking if the stack limit in the virtual machine is reached yet_ (I believe this is exactly what happened to TheDAO if I am not mistaken?). Checking if the stack limit has been reached has to be done explicitly in Solidity, with Solidity code. Surely not EVERYONE does or will EVER do that. \n\nI created an issue for this in the Solidity repo earlier today: https://github.com/ethereum/solidity/issues/663\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226973638/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226973683",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-226973683",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 226973683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk3MzY4Mw==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T01:09:40Z",
    "updated_at": "2016-06-19T01:09:40Z",
    "author_association": "NONE",
    "body": "@JasonCoombs Code will not always be well-behaved, I can guarantee you that. Isn't that the reason for a throw in the first place? To say \"No way, something's wrong. We can't proceed. Undo everything!\" At least that's what the documentation told me.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226973683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226973830",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-226973830",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 226973830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk3MzgzMA==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T01:14:53Z",
    "updated_at": "2016-06-19T01:49:06Z",
    "author_association": "NONE",
    "body": "@taoteh1221, I am no expert, but I think the attacker intentionally caused it to end before the stack limit was reached, after about 28000 transactions in total. I did see your issue on Solidity as well. I think the exception-handling code needs to do a better job of rolling-back transactions, as should occur in the event of a stack overflow.\n\nI think the root issue here is that a cryptocurrency, which is intended to be a modern and advanced bookkeeping system with computational capabilities deployed as smart contracts, failed to do the fundamental bookkeeping expected of it on a large and visible scale. If that's not fixed on the blockchain level eventually, Ethereum is done.\n\nEthereum 2.0 (or whatever may succeed it) will need provide bookkeeping functions to smart contract code instead of leaving it up to smart contract authors. I assumed from the documentation that this was already done behind the scenes by the compiler and enforced by the EVM.\n\nAlso, this is not purely a compiler issue, since the compiler doesn't have knowledge of code from deployed contracts that may or may not fail unexpectedly.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226973830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226974780",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-226974780",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 226974780,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk3NDc4MA==",
    "user": {
      "login": "taoteh1221",
      "id": 1760489,
      "node_id": "MDQ6VXNlcjE3NjA0ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1760489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taoteh1221",
      "html_url": "https://github.com/taoteh1221",
      "followers_url": "https://api.github.com/users/taoteh1221/followers",
      "following_url": "https://api.github.com/users/taoteh1221/following{/other_user}",
      "gists_url": "https://api.github.com/users/taoteh1221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taoteh1221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taoteh1221/subscriptions",
      "organizations_url": "https://api.github.com/users/taoteh1221/orgs",
      "repos_url": "https://api.github.com/users/taoteh1221/repos",
      "events_url": "https://api.github.com/users/taoteh1221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taoteh1221/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T01:51:52Z",
    "updated_at": "2016-06-19T01:54:48Z",
    "author_association": "NONE",
    "body": "@destenson Honestly I do not know the complete details of TheDAO attack. I was just looking over Christian Reitwiessner's blog post a few minutes ago on blog.ethereum.org from June 10th, and it actually looks like 'throw' is VERY dangerous to use, because it can stall a function in the middle of it running: https://blog.ethereum.org/2016/06/10/smart-contract-security/\nDid TheDAO use 'throw' in the vulnerable code? This 'throw' function should probably be eliminated completely, the less proficient Solidity programmers out there will likely shoot themselves in the foot with this again and again. There has to be a better way to rollback a failed contract execution, like in the VM or something.\n\nEDIT: Maybe they don't contract execution failure rollback in the VM because of the consequences of an endless loop in a contract call on the entire network. Not sure.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226974780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226974927",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-226974927",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 226974927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk3NDkyNw==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T01:57:57Z",
    "updated_at": "2016-06-19T08:15:35Z",
    "author_association": "NONE",
    "body": "@taoteh1221, I think one cause is that the transaction that ends up throwing may occur in a different block from the one that originated it. In that case, a failed transaction can't successfully undo a block since it's already been accepted into the blockchain.\n\nEDIT: As pointed out by vbuterin, I am mistaken about this. The exploit took advantage of the DAO contract not updating its internal state variables before calling a function that withdraws ETH and re-entered `splitDAO()`. Each time `splitDAO()` was entered it acted as if it were the first time. (I still don't quite understand why it ended when it did, though.)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226974927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226978150",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-226978150",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 226978150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk3ODE1MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T04:01:46Z",
    "updated_at": "2016-06-19T04:01:46Z",
    "author_association": "MEMBER",
    "body": ">  I think one cause is that the transaction that ends up throwing may occur in a different block from the one that originated it. \n\nThis is false. The effect of a transaction happens fully synchronously, within the block that includes the transaction and before processing any future transactions.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226978150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226979739",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-226979739",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 226979739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjk3OTczOQ==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-19T05:01:42Z",
    "updated_at": "2016-06-19T08:31:15Z",
    "author_association": "NONE",
    "body": "@vbuterin, hmm, I understand the recursive nature of the exploit more than I do now when I wrote that. I apologize for that. Should functions on contracts be re-entrant by default? Was it designed to allow that so easily without intention? Or is that an unintended \"feature\"?\n\nAlso, I'm glad to know that transactions are intended to be fully synchronous. Some of the reports I read implied that was not the case. Why did the attack take so long? I would've expected it to be finished in a few blocks, not dragged out over the course of hundreds or thousands of blocks. Help me understand, theoretically, if someone emptied the contract's balance before the attacker did, would it have stopped the attack, or would Ethereum have prevented another transaction from empty the it since the Ether were already reserved by the attack?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/226979739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228483436",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-228483436",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 228483436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODQ4MzQzNg==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-24T22:58:45Z",
    "updated_at": "2016-06-24T22:58:45Z",
    "author_association": "NONE",
    "body": "I'm going to close this, because it seems that it was not a legitimate issue to begin with. I misunderstood the nature of the exploit & it doesn't look like this is the appropriate place to fix it. Thanks.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228483436/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228501956",
    "html_url": "https://github.com/ethereum/EIPs/issues/115#issuecomment-228501956",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/115",
    "id": 228501956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODUwMTk1Ng==",
    "user": {
      "login": "destenson",
      "id": 282538,
      "node_id": "MDQ6VXNlcjI4MjUzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/282538?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/destenson",
      "html_url": "https://github.com/destenson",
      "followers_url": "https://api.github.com/users/destenson/followers",
      "following_url": "https://api.github.com/users/destenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/destenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/destenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/destenson/subscriptions",
      "organizations_url": "https://api.github.com/users/destenson/orgs",
      "repos_url": "https://api.github.com/users/destenson/repos",
      "events_url": "https://api.github.com/users/destenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/destenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-25T02:18:35Z",
    "updated_at": "2016-06-25T02:24:04Z",
    "author_association": "NONE",
    "body": "@vbuterin, I'm not sure where to ask this, but your comment provokes the question: if a transaction always occurs fully synchronously, is there a way for a contract to cause another transaction to occur in a future block, say the next one? Is a contract possible that could receive a payment, and return it on the next block, and not the same block?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228501956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
