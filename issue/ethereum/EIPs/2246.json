{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2246",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2246/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2246/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2246/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2246",
  "id": 482143391,
  "node_id": "MDU6SXNzdWU0ODIxNDMzOTE=",
  "number": 2246,
  "title": "EIP-1808: A Non-homogenous digital asset data sharing standard",
  "user": {
    "login": "ypenghui6",
    "id": 23307278,
    "node_id": "MDQ6VXNlcjIzMzA3Mjc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/23307278?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ypenghui6",
    "html_url": "https://github.com/ypenghui6",
    "followers_url": "https://api.github.com/users/ypenghui6/followers",
    "following_url": "https://api.github.com/users/ypenghui6/following{/other_user}",
    "gists_url": "https://api.github.com/users/ypenghui6/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ypenghui6/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ypenghui6/subscriptions",
    "organizations_url": "https://api.github.com/users/ypenghui6/orgs",
    "repos_url": "https://api.github.com/users/ypenghui6/repos",
    "events_url": "https://api.github.com/users/ypenghui6/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ypenghui6/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-08-19T07:11:49Z",
  "updated_at": "2021-12-04T20:12:05Z",
  "closed_at": "2021-12-04T20:12:05Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "---\r\neip: 1808\r\ntitle: ERC-1808 Token Standard\r\nauthor: Ypenghui<<ypenghui6@163.com>>\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2019-08-14\r\nrequires: 165\r\n---\r\n\r\n## Simple Summary\r\n\r\nA Non-homogenous digital asset data sharing standard.\r\n\r\n## Abstract\r\n\r\n**Multiverse**  \r\n\r\n Each blockchain game can be considered a game universe, and several game universes with similar basic settings can be considered to have a common multiverse.  \r\n\r\n**1808**  \r\n\r\n ERC-1808 Standard (hereinafter referred to as \"1808 Standard\") is a non-homogeneous digital assets data sharing standard that applied to decentralized distributed ledger network. As the perfect way to represent various non-fungible items, non-homogeneous digital assets can cover the field of game items, gears, characters, map data, and even expansion pack in the game industry. This manual also focus on the multiverse system based on 1808 Standard, such as universe traveling, multiverse, and etc.  \r\n   \r\n## Motivation\r\n\r\n  Combining the needs of gaming industry, we reviewed a number of existing non-homogeneous digital asset standards and defined ERC1808 to be the one to standardize all non-homogeneous digital assets data sharing.  \r\n  At present, ERC-721, ERC-1155, and ERC-998 of Ethereum network are the popular non-homogeneous digital asset standards, which are used in different scenarios and for different needs on the Ethereum network:\r\n  * ERC-721  \r\n    It is an officially accepted non-homogeneous digital asset standard defined by smart contracts in the Ethereum network. It has a customizable data zone, which makes it possible to digitize items or records.  \r\n    Typical applications are: Crypto Kitties, Crypto Celebrities, etc   \r\n  * ERC-1155  \r\n    It is a standard interface proposed by Enjin to define multiple non-homogenous assets in Ethereum's single smart contract, serving mainly the virtual props in blockchain games.   \r\n    Typical application: War of Crypto.  \r\n  * ERC-998  \r\n    It is a combination of non-homologous tokens (CNFT, Composable NFTs) defined in Ethereum's smart contracts proposed by Matt Lockyer.   \r\n    \r\n   Game items are a kind of non-homogeneous digital assets used in blockchain games. The process of items “travelling” across different universes is that of applying and changing of a non-homogeneous digital asset in different games and services under the same multiverse.  \r\n    \r\n   The 1808 Standard makes it possible for on-chain games to design the multiverse/parallel universes. Different game multiverses are also different game universes, which forms the multiverse of on-chain games. The game items in each universe can be freely circulated, and are written with different attributes, skills, etc. in different games. These items do not affect each other. This is what we mentioned as the item design in the \"parallel universes\".  \r\n    \r\n   Scalable custom data enables game designers to create unique game assets. Non-interfering zone data allows game assets to be given new properties that are an immune while \"travelling\" the universes and the multiverse, while also making it possible of data linkage between games (such as skill gain/reduction).             \r\n      \r\n## Specification\r\n\r\nThe key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.\r\n\r\nSmart contracts implementing the ERC-1808 standard MUST implement all of the functions in the ERC1808 interface.\r\n\r\n```solidity\r\npragma solidity ^0.5.0;\r\n\r\n/// @title ERC-1808 Non homogeneous assets standard \r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1808.md\r\ninterface IRCNFT {\r\n    /// @dev This emits when a NFT is added.\r\n    event AddNFT(address indexed addAddress, uint256 indexed nftId, string nftName);\r\n\r\n    /// @dev This emits When the state of nft changes.\r\n    event ChangeNFTState(address indexed businessAddress, uint256 indexed nftId, bool indexed state);\r\n\r\n    /// @dev This emits When the extra attribute's count of nft changes.\r\n    event ChangeNFTExtAttrCount(address indexed businessAddress, uint256 indexed nftId, uint256 indexed extAttrCount);\r\n\r\n    /// @dev This emits When the extra attribute of token changes.\r\n    event ChangeTokenExtAttr(address indexed businessAddress,uint256 indexed nftId, uint256 indexed tokenId, uint256 index, string extData );\r\n\r\n    /// @dev This emits When the extra attributes of token changes.\r\n    event ChangeTokenExtAttrs(address indexed businessAddress,uint256 indexed nftId, uint256 indexed tokenId, string[] extDatas );\r\n        \r\n    /// @notice add new nft.\r\n    /// @dev  Throws if the length of `_nftName` less than zero.\r\n    /// Throws if the length of `_nftName` is greater than 32.\r\n    /// Throws unless an authorized operator of the current owner.\r\n    /// @param _nftName The new nft name.\r\n    /// @param _extAttrCount The NFT extra attribute's count.\r\n    function addNFT(string memory _nftName, uint256 _extAttrCount) public;\r\n    \r\n    /// @notice set nft state.\r\n    /// @dev  Throws if the `_state` equal to the nft state.\r\n    /// Throws if the `_nftId` is valid.\r\n    /// Throws unless an authorized operator of the current owner.\r\n    /// @param `_nftId` The nft id.\r\n    /// @param `_state` The nft state.\r\n    function setNFTState(uint256 _nftId, bool _state) public;\r\n\r\n    /// @notice set nft extra attribute's count.\r\n    /// @dev  Throws if the `_extAttrCount` less than the nft extAttrCount.\r\n    /// Throws if the `_nftId` is valid.\r\n    /// Throws unless an authorized operator of the current owner.\r\n    /// @param `_nftId` The nft id.\r\n    /// @param `_extAttrCount` The NFT extra attribute's count.\r\n    function setNFTExtAttrCount(uint256 _nftId, uint256 _extAttrCount) public;\r\n\r\n    /// @notice get nfts info.\r\n    /// @return nftIds, nftNames and flags\r\n    function getNFTs() public view returns(uint256[] memory nftId,string[] memory nftName, bool[] memory flags);\r\n\r\n    /// @notice get nft counts.\r\n    /// @return the nft counts.\r\n    function getNFTCount() public view returns(uint256);\r\n    \r\n    /// @notice get nft.\r\n    /// @dev  Throws if the `_nftId` - 1 is greater than the nft array length.\r\n    /// Throws if the `_nftId` less than 0.\r\n    /// @param `_nftId` The nft id.\r\n    /// @return the nft name and state.\r\n    function getNFT(uint256 _nftId) public view returns(string memory nftName, bool state);\r\n\r\n    /// @notice check the nft state.\r\n    /// @dev  Throws if the `_nftId` - 1 is greater than the nft array length.\r\n    /// Throws if the `_nftId` less than 0.\r\n    /// @param `_nftId` The nft id.\r\n    /// @return the nft state.\r\n    function isEnableNFT(uint256 _nftId) public view returns(bool flag);\r\n\r\n    /// @notice set the nft extra data.\r\n    /// @dev  Throws if the `_nftId` - 1 is greater than the nft array length.\r\n    /// Throws if the contract is paused.\r\n    /// Throws if the `_nftId` is valid.\r\n    /// Throws if the `_tokenId` is valid.\r\n    /// Throws if the `_index` is greater than the nft extra attribute count.\r\n    /// Throws if the nft extra data count less than 0.\r\n    /// @param `_nftId` The nft id.\r\n    /// @param `_tokenId` The token id.\r\n    /// @param `_index` The array index.\r\n    /// @param `_extData` The extra data.\r\n    function setExtData(uint256 _nftId, uint256 _tokenId, uint256 _index, string memory _extData) public;\r\n\r\n    /// @notice set the nft extra data.\r\n    /// @dev  Throws if the `_nftId` - 1 is greater than the nft array length.\r\n    /// Throws if the contract is paused.\r\n    /// Throws if the `_nftId` is valid.\r\n    /// Throws if the `_tokenId` is valid.\r\n    /// Throws if the length of `_extDataArray` is greater than the nft extra attribute count.\r\n    /// Throws if the length of `_extDataArray` less than 0.\r\n    /// Throws if the nft extra data count less than 0.\r\n    /// @param `_nftId` The nft id.\r\n    /// @param `_tokenId` The token id.\r\n    /// @param `_extDataArray` The array of extra data.\r\n    function setExtData(uint256 _nftId, uint256 _tokenId, string[] memory _extDataArray) public;\r\n\r\n    /// @notice get the nft extra data.\r\n    /// @param `_nftId` The nft id.\r\n    /// @param `_tokenId` The token id.\r\n    /// @param `_index` The array index.\r\n    /// @return the nft tokenAttr.\r\n    function getExtData(uint256 _nftId, uint256 _tokenId, uint256 _index) public view  returns(string memory tokenAttr);\r\n\r\n    /// @notice get all nft extra datas\r\n    /// @dev  Throws if the `_nftId` is valid.\r\n    /// Throws if the `_tokenId` is valid.\r\n    /// Throws if the nft extra data count less than 0.\r\n    /// @param `_nftId` The nft id.\r\n    /// @param `_tokenId` The token id.\r\n    /// @return the nft attributes.\r\n    function getExtDatas(uint256 _nftId, uint256 _tokenId) public view isValidToken(_tokenId) isValidNFTId(_nftId) returns(string[] memory attrs);\r\n}\r\n```\r\n\r\n## Rationale\r\n\r\n**NFT Identifiers**\r\n\r\nEvery NFT is identified by a struct of `string` nftName, `uint256` extAttrCount and `bool` state; inside the ERC-1808 smart contract.\r\n\r\n**management mechanism**\r\n\r\nIn order to organize different games under the same world view, we have established a simple management mechanism.\r\n\r\nERC-1808 standardizes a add function `addNFT`; a logic delete function `setNFTState`; some inquiry function `getNFTs`, `getNFTCount`, `getNFT`; and a option function  isEnableNFT. \r\n\r\n**NFT data sharing mechanism**  \r\n\r\nThe game prop itself is a non-homogeneous digital asset whose characteristic data should remain unchanged. The process of proposing \"traversing\" the world line is the process of applying and changing a non-homogeneous digital asset in different games, business, and business under the same world view; it will inevitably involve data sharing and data update issues. We share other data by setting additional data for the current game.\r\n\r\nERC1808 standardizes a set of extra data functions `setExtData`, and the gets the extra data function `getExtData` or `getExtDatas`.\r\n\r\n## Backwards Compatibility\r\n\r\nAn implementation contracts must implement the ERC1808 interface.\r\n\r\n## Test Cases\r\n\r\nERC-1808 Token includes test cases written using Truffle.\r\n\r\n## Implementations\r\n\r\nAn implementation can be found here: https://github.com/Cocos-BCX/ERC-1808\r\n\r\n## References\r\n\r\n**Standards**\r\n\r\n1. ERC-20 Token Standard. https://eips.ethereum.org/EIPS/eip-20\r\n1. ERC-165 Standard Interface Detection. https://eips.ethereum.org/EIPS/eip-165\r\n1. ERC-721 Non-Fungible Token Standard. https://eips.ethereum.org/EIPS/eip-721\r\n1. ERC-998 Composable Non-Fungible Token Standard. https://eips.ethereum.org/EIPS/eip-998\r\n1. ERC-1155 Multi Token Standard. https://eips.ethereum.org/EIPS/eip-1155\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2246/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2246/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705347",
    "html_url": "https://github.com/ethereum/EIPs/issues/2246#issuecomment-974705347",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2246",
    "id": 974705347,
    "node_id": "IC_kwDOAq426M46GNLD",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-20T20:11:36Z",
    "updated_at": "2021-11-20T20:11:36Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086289",
    "html_url": "https://github.com/ethereum/EIPs/issues/2246#issuecomment-986086289",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2246",
    "id": 986086289,
    "node_id": "IC_kwDOAq426M46xnuR",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T20:12:04Z",
    "updated_at": "2021-12-04T20:12:04Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
