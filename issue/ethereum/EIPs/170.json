{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/170/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/170/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/170/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/170",
  "id": 187221797,
  "node_id": "MDU6SXNzdWUxODcyMjE3OTc=",
  "number": 170,
  "title": "Contract code size limit",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 37,
  "created_at": "2016-11-04T00:02:45Z",
  "updated_at": "2018-08-03T03:44:07Z",
  "closed_at": "2017-06-28T14:32:29Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "EDITOR UPDATE (2017-08-15): This EIP is now located at https://github.com/ethereum/EIPs/blob/master/EIPS/eip-170.md. Please go there for the correct specification. The text below may be incorrect or outdated, and is not maintained.\r\n-----\r\n\r\n### Specification\r\n\r\nIf `block.number >= FORK_BLKNUM`, then if contract creation initialization returns data with length of **at least** 24577 bytes, contract creation fails. Equivalently, one could describe this change as saying that the contract initialization gas cost is changed from `200 * len(code)` to `200 * len(code) if len(code) < 24577 else 2**256 - 1`.\r\n\r\n### Rationale\r\n\r\nCurrently, there remains one slight quadratic vulnerability in ethereum: when a contract is called, even though the call takes a constant amount of gas, the call can trigger O(n) cost in terms of reading the code from disk, preprocessing the code for VM execution, and also adding O(n) data to the Merkle proof for the block's proof-of-validity. At current gas levels, this is acceptable even if suboptimal. At the higher gas levels that could be triggered in the future, possibly very soon due to dynamic gas limit rules, this would become a greater concern - not nearly as serious as recent denial of service attacks, but still inconvenient especially for future light clients verifying proofs of validity or invalidity. The solution is to put a hard cap on the size of an object that can be saved to the blockchain, and do so non-disruptively by setting the cap at a value slightly higher than what is feasible with current gas limits (an pathological worst-case contract can be created with ~23200 bytes using 4.7 million gas, and a normally created contract can go up to ~18 kb).\r\n\r\nIf this is to be added, it should be added as soon as possible, or at least before any periods of higher than 4.7 million gas usage allow potential attackers to create contracts larger than 24000 bytes.",
  "closed_by": {
    "login": "Arachnid",
    "id": 17865,
    "node_id": "MDQ6VXNlcjE3ODY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Arachnid",
    "html_url": "https://github.com/Arachnid",
    "followers_url": "https://api.github.com/users/Arachnid/followers",
    "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
    "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
    "organizations_url": "https://api.github.com/users/Arachnid/orgs",
    "repos_url": "https://api.github.com/users/Arachnid/repos",
    "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Arachnid/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/170/reactions",
    "total_count": 16,
    "+1": 4,
    "-1": 12,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/170/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258335785",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258335785",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258335785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODMzNTc4NQ==",
    "user": {
      "login": "mchlmicy",
      "id": 1360928,
      "node_id": "MDQ6VXNlcjEzNjA5Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1360928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mchlmicy",
      "html_url": "https://github.com/mchlmicy",
      "followers_url": "https://api.github.com/users/mchlmicy/followers",
      "following_url": "https://api.github.com/users/mchlmicy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mchlmicy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mchlmicy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mchlmicy/subscriptions",
      "organizations_url": "https://api.github.com/users/mchlmicy/orgs",
      "repos_url": "https://api.github.com/users/mchlmicy/repos",
      "events_url": "https://api.github.com/users/mchlmicy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mchlmicy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-04T03:20:02Z",
    "updated_at": "2016-11-04T03:20:02Z",
    "author_association": "NONE",
    "body": "What kind of implications would this have for contracts which call each other? Would there be a limitation to the number of contracts you can chain together, or would the limit reflect the total bytes size of the contracts that are chained together.\n\nFurther, is there potential for optimization in the case where contracts call each other (ie. only read in functions that will be used in the contract call stack)? I don't know how difficult something like this would be, but it might optimize VM disk reads.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258335785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258341719",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258341719",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258341719,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODM0MTcxOQ==",
    "user": {
      "login": "Itshalffull",
      "id": 6272591,
      "node_id": "MDQ6VXNlcjYyNzI1OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6272591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Itshalffull",
      "html_url": "https://github.com/Itshalffull",
      "followers_url": "https://api.github.com/users/Itshalffull/followers",
      "following_url": "https://api.github.com/users/Itshalffull/following{/other_user}",
      "gists_url": "https://api.github.com/users/Itshalffull/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Itshalffull/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Itshalffull/subscriptions",
      "organizations_url": "https://api.github.com/users/Itshalffull/orgs",
      "repos_url": "https://api.github.com/users/Itshalffull/repos",
      "events_url": "https://api.github.com/users/Itshalffull/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Itshalffull/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-04T04:18:38Z",
    "updated_at": "2016-11-04T04:18:38Z",
    "author_association": "NONE",
    "body": "Hard limits can become significant political bottlenecks in governance, as we've seen with Bitcoin. \n\nCould we add a uniform linear price increase to opcode costs that scales with contract size?  `If (len(code) > 2400) {gasprice += (len(code) - 2400)/10}`\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258341719/reactions",
      "total_count": 18,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258345791",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258345791",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258345791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODM0NTc5MQ==",
    "user": {
      "login": "yaronvel",
      "id": 19823963,
      "node_id": "MDQ6VXNlcjE5ODIzOTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaronvel",
      "html_url": "https://github.com/yaronvel",
      "followers_url": "https://api.github.com/users/yaronvel/followers",
      "following_url": "https://api.github.com/users/yaronvel/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaronvel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaronvel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaronvel/subscriptions",
      "organizations_url": "https://api.github.com/users/yaronvel/orgs",
      "repos_url": "https://api.github.com/users/yaronvel/repos",
      "events_url": "https://api.github.com/users/yaronvel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaronvel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-04T05:04:33Z",
    "updated_at": "2016-11-04T09:14:47Z",
    "author_association": "NONE",
    "body": "Could you explain where is the quadratic blowup?\nYou only describe several O(n) operations. \n\nEdit:\nQuestion was answered [here](https://www.reddit.com/r/ethereum/comments/5b0f3o/eip_highlight_contract_code_size_limit_debating/d9l95zu/)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258345791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258345968",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258345968",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258345968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODM0NTk2OA==",
    "user": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-04T05:06:29Z",
    "updated_at": "2016-11-04T05:06:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "You could make a contract a vector of 24 Kbytes pages. The first page is loaded for free when a CALL is received, while jumping or running into another page pays a fee (500 gas) because the page must be fetched from disk. This way you still maintain the possibility of arbitrary sized contracts.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258345968/reactions",
      "total_count": 15,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258366600",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258366600",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258366600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODM2NjYwMA==",
    "user": {
      "login": "julian1",
      "id": 4312379,
      "node_id": "MDQ6VXNlcjQzMTIzNzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4312379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/julian1",
      "html_url": "https://github.com/julian1",
      "followers_url": "https://api.github.com/users/julian1/followers",
      "following_url": "https://api.github.com/users/julian1/following{/other_user}",
      "gists_url": "https://api.github.com/users/julian1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/julian1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/julian1/subscriptions",
      "organizations_url": "https://api.github.com/users/julian1/orgs",
      "repos_url": "https://api.github.com/users/julian1/repos",
      "events_url": "https://api.github.com/users/julian1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/julian1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-04T08:05:21Z",
    "updated_at": "2016-11-04T08:05:21Z",
    "author_association": "NONE",
    "body": "> You only describe several O(n) operations. \n\nAgree, O(n) + O(n) = O(n)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258366600/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258416413",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258416413",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258416413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODQxNjQxMw==",
    "user": {
      "login": "jbaylina",
      "id": 4180156,
      "node_id": "MDQ6VXNlcjQxODAxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4180156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbaylina",
      "html_url": "https://github.com/jbaylina",
      "followers_url": "https://api.github.com/users/jbaylina/followers",
      "following_url": "https://api.github.com/users/jbaylina/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbaylina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbaylina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbaylina/subscriptions",
      "organizations_url": "https://api.github.com/users/jbaylina/orgs",
      "repos_url": "https://api.github.com/users/jbaylina/repos",
      "events_url": "https://api.github.com/users/jbaylina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbaylina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-04T12:15:40Z",
    "updated_at": "2016-11-04T12:15:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "The first time you call a specific contract in a transaction should not have the same price that the next ones. The first one implies a fetch from disk, the subsequent ones, the contract will be already in the client memory cache.\n\nIn other words, it should not cost the same to do 1000 calls to 1000 different contracts that 1000 calls to one single contract.\n\nThe high cost of the call, disincentives the use of libraries.\n\nMy proposition is to take all opcodes that access disk and split the cost in FETCH cost and EXECUTION cost. The FETCH cost would be accounted only the first time it's accessed the object in the transaction.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258416413/reactions",
      "total_count": 15,
      "+1": 15,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258588199",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258588199",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258588199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODU4ODE5OQ==",
    "user": {
      "login": "DominiLux",
      "id": 19860466,
      "node_id": "MDQ6VXNlcjE5ODYwNDY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19860466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DominiLux",
      "html_url": "https://github.com/DominiLux",
      "followers_url": "https://api.github.com/users/DominiLux/followers",
      "following_url": "https://api.github.com/users/DominiLux/following{/other_user}",
      "gists_url": "https://api.github.com/users/DominiLux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DominiLux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DominiLux/subscriptions",
      "organizations_url": "https://api.github.com/users/DominiLux/orgs",
      "repos_url": "https://api.github.com/users/DominiLux/repos",
      "events_url": "https://api.github.com/users/DominiLux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DominiLux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-05T03:30:41Z",
    "updated_at": "2016-11-05T03:30:41Z",
    "author_association": "NONE",
    "body": "I'm for any improvements to the network during this fork.  Anything that stabilizes the network, it's nodes, and helps to secure the underlying protocol needs to be implemented before we can move out of this phase of the project.  I'm currently working on some of my own clever bytes of Solidity but am stuck in development due to the changes in progress.  So yes, I’m all for going ahead with any and all changes that benefit the future of the Ethereum protocol.  I call it a protocol because so many people fail to realize that this project is going to accomplish what Java never could....  Applications that are written once on chain and the developer doesn’t even have to think about OS compatibility because its a built in feature.\n\nI will be very excited to submit a press release for the project i'm currently working on which will run on the public ethereum blockchain and supply a service that is needed in exchange for eth tokens.  I have the overall concept behind it and am now in the pre development planning stages.  Big projects have to be broken down into smaller ones.\n\nOne suggestion:  Forgive my ignorance if it's already being done but just as any other programming language includes a series of Libraries pre-programmed to do various things, perhaps Solidty should have this as well.  Let me elaborate...  Since solidity is designed to run on chain, if a person where to write an open source library to do something like find the square root of number XYZ...  That library would not need to be compiled again and should be called upon by your current code to obtain the results.  By having precompiled white listed libraries of code that are considered \"nice\" by the protocol's standards, that code could be used by all programmers thereby minimizing excessive bloat of the blockchain.  Additionally a caching mechanism could be put in place for certain library contracts that are dynamically determined to be called the most across the network to substantially increase the execution of code.  Think of it as a way of doing object oriented programming on a block chain.  Over time as more white listed libraries are created and IDE could be generated that would simply allow the coder to drag and drop in these libraries as needed.  However, the compiled code would simply be a pointer to the pre-compiled library that exists on the transaction ledger.  These libraries would have to be treated differently than normal contracts and be given gas exceptions to attract developers to use them over reinventing the wheel every time.  Hence the library white list.  This design will keep solidity as simple from a syntax perspective as c++ and the expansion would be done through the addition of precompiled libraries that others code can point to.  I believe this concept would fit well with the sharding of the blockchain because when your code calls another library, that portion of the code would probabley get executed on a different node completely.  Now that I have gotten onto the concept of sharding the blockchain; allow me to provide the solution.\n\nHow To Shard A BlockChain:\nThrough my lifes experiences one thing i've realized is that a problem you may be facing now has at some point already been solved.  It may not even be in the same area as your problem.  Nevertheless, the same solution can be revised to fit a new problem.  The same is true of sharding the blockchain.  To properly shard a trustless block chain requires the following:\n1. Nodes should be able to come and go as they please without interuption of the blockchain\n2. If half the network suddenly went out at once the blockchain MUST remain intact\n3. At any given point if someone desired, they should be able to make a full copy of the unsharded blockchain\n4. It must remain decentralized (Which in fact sharding would naturally promote even more)\n5. It needs to allow for multi threading (A solution for this was presented in earlier concepts within my post)\n6. It must have a track record of proven resiliancy.\n\nI'm sure there are many points that i'm missing but the solution is simple and has been around for some time.  It just needs to be designed to be more dynamic.\n\nThe Sharding Solution:\nRAIN (Atleast that's the acronym for it)\nRedundant Array of Inexpensive Nodes\n\nFor this to work on a block chain it would need to incorporate all of the concepts of RAID but thinking of nodes as disks.  It would also need to use striping, mirroring, and parity, and nodes have to be dynamic and the array infinitley scalable (To the extent of available address spacing).\n\nIn a normal striped array you have something like this\nNode1(DataPortionA) Node2 (DataPortionB) Node3 (DataPortionC) Node4 (DataPortionD)\nand all data is scattered equally across all nodes.  Unfortunatley this solution does not meet our criteria set beforehand.\n\nIn a striped mirrored array it would look like this...\nNode1(DataPortionA) Node2 (DataPortionB) Node3 (MirroredDataPortionA) Node4 (MirroredDataPortionB)\n\nWhile this offers redudancy it's not enough.  However when you start adding parity mixes between the nodes while they are stripped and mirrored that's when it becomes a decentralized sharded block chain.  Below is a simplified model of this.\n\nNode A  Node B  Node C  Node D\nDataA    Data B  Data C    Data D  \nParityB  Parity C Parity D  Parity A\nParityC  Parity D Parity A  Parity B\n\nWhen a node connects it will by default try to continue on as the node type it was before.  However, if after connecting it determines that the balance of nodes is off it will become a different node and rebuild it's data based on the parity data that exhists instead of trying to download everything.  Parity data can be easily compressed with effecient algorithms and since they only contain enough data to compute and rebuild the chain the node would not need to download very much information.  Also, the node would build from the top down from the parity data so that a particular node would be online in seconds instead of hours, it would just lack being fully synched with all the parity data.\n\nIf the size of the balanced nodes databases reaches a \"Critical Mass\" the system would automatically increase the number of node types.  As a simple example, earlier I showed nodes A B C and D.  But if the database were to get too large the system could dynamically double the number of node types to A B C D E F G H.  Each containing a data partition and two parity partitions of other nodes that it never reads from and only writes to unless it determines it needs to become that node type based on earlier criteria.\n\nConclusion:\nWell that should give all of you some interesting things to discuss.  I hope it helps.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258588199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258589093",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258589093",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258589093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODU4OTA5Mw==",
    "user": {
      "login": "DominiLux",
      "id": 19860466,
      "node_id": "MDQ6VXNlcjE5ODYwNDY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19860466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DominiLux",
      "html_url": "https://github.com/DominiLux",
      "followers_url": "https://api.github.com/users/DominiLux/followers",
      "following_url": "https://api.github.com/users/DominiLux/following{/other_user}",
      "gists_url": "https://api.github.com/users/DominiLux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DominiLux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DominiLux/subscriptions",
      "organizations_url": "https://api.github.com/users/DominiLux/orgs",
      "repos_url": "https://api.github.com/users/DominiLux/repos",
      "events_url": "https://api.github.com/users/DominiLux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DominiLux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-05T03:57:00Z",
    "updated_at": "2016-11-05T03:57:00Z",
    "author_association": "NONE",
    "body": "For documentation purposes I almost left out the mirroring part.  Although it is obvious each node type would be able to have identical node types across the network.  When the database get's too large triggering a node expansion those would get mirrored as well.  In theory you could easily keep the work load of single nodes to such a minimal amount of storage and computational power that people wouldn’t notice it running and wouldn’t mind just leaving it on all the time.  Also, you could go for a complex algorithm for node balancing by assigning each node type a \"weight\" based on it's density (I believe weight and density formulas already exist so it would be easy to accomplish).  Or you could use chaos theory and have nodes assigned at random and watch in amazement as the system just magically balances itself out with hardly any code ;)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258589093/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258590011",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258590011",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258590011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODU5MDAxMQ==",
    "user": {
      "login": "DominiLux",
      "id": 19860466,
      "node_id": "MDQ6VXNlcjE5ODYwNDY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19860466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DominiLux",
      "html_url": "https://github.com/DominiLux",
      "followers_url": "https://api.github.com/users/DominiLux/followers",
      "following_url": "https://api.github.com/users/DominiLux/following{/other_user}",
      "gists_url": "https://api.github.com/users/DominiLux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DominiLux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DominiLux/subscriptions",
      "organizations_url": "https://api.github.com/users/DominiLux/orgs",
      "repos_url": "https://api.github.com/users/DominiLux/repos",
      "events_url": "https://api.github.com/users/DominiLux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DominiLux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-05T04:23:40Z",
    "updated_at": "2016-11-05T04:23:40Z",
    "author_association": "NONE",
    "body": "`// A function that determines if nodes need rebalancing based on their densities\n// In this example I use an array of objects called NodeDensity\nstruct NodeDensity\n{\n    int NodeType; // An integer representation for a group of mirrored nodes\n   int NodeCount; // The number of nodes of the type specified to be weighed\n};\n\nbool BalanceNodes(NodeDensity)\n{\n    // From here it's just looping through the struct array to get the average,\n    //  Deciding on a standard deviation of the absolute value of NodeCount-NodeAverages\n    // If nodes are falling outside of the standard deviation it returns true\n    // else it returns false\n}\n\n//  The next step would be to start broadcasting for a rebalance until the majority of nodes are in agreement.  This will get rid of random rebalancing anamolies\n//  Ran out of time didnt have enough time to fill in the code above.  But the structure is their and pseudo code.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258590011/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258633866",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258633866",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258633866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODYzMzg2Ng==",
    "user": {
      "login": "BlameByte",
      "id": 6662327,
      "node_id": "MDQ6VXNlcjY2NjIzMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6662327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlameByte",
      "html_url": "https://github.com/BlameByte",
      "followers_url": "https://api.github.com/users/BlameByte/followers",
      "following_url": "https://api.github.com/users/BlameByte/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlameByte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlameByte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlameByte/subscriptions",
      "organizations_url": "https://api.github.com/users/BlameByte/orgs",
      "repos_url": "https://api.github.com/users/BlameByte/repos",
      "events_url": "https://api.github.com/users/BlameByte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlameByte/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-05T19:06:17Z",
    "updated_at": "2016-11-05T19:06:17Z",
    "author_association": "NONE",
    "body": "I am not a fan of limiting the max gas limit of a contract I feel it will harm those who are currently or are planning on making larger contracts which cost 3-4 million gas. (I am currently developing such a large contract, been unable to deploy due to current 2m gas limit so I am unsure if it would be affected by this change).\n\nInstead would it not make more sense to make it cost more gas to load a bigger contract? I feel that capping a hard cap on contract code to 24kb will likely become an issue in the future.\n\nI am aware there would be workarounds such as making multiple contracts or storing code in storage, however both of these would make such a contract considerably harder to develop and increase the fees dramatically. As well as make it harder to verify the code as you would have to review multiple contracts, and you would have to keep in mind this while developing and pass on any variables as well as make sure you do checks to make sure the call is coming from the correct place.\n\nSo while I understand this might become an issue if someone were to several create large contracts and call them but I do not feel that is more harmful to those current under development contracts (like mine) which would likely have to have considerable changes made to split up between different contracts. (it already has 3 needed). Plus the added work on future development and requiring review of multiple contracts instead of one.\n\nPersonally I feel that contract development should be as easy as possible to encourage more developers to join in and imposing hard limits on the code or storage would make development harder and would likely cause a lot of confusion. People reviewing would have to look at multiple contracts and make sure that the correct variables are being passed and that only the main contract can make calls.\n\nI just feel that this will bring more harm than good, I am aware that most contracts will be under this however should we really be punishing those trying to make something big and advanced?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258633866/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258637776",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258637776",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258637776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODYzNzc3Ng==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-05T20:14:35Z",
    "updated_at": "2016-11-05T20:14:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just weighting in my own use case :\nI am also developing a contract that currently cost around 3.1 million gas and looking at the code I do not consider it a very complex one. Breaking it would complexify it for no good reason.\nAnything that forbid big contract is not very welcome from my point of view :)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258637776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258651308",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258651308",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258651308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODY1MTMwOA==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-06T00:17:01Z",
    "updated_at": "2016-11-06T00:17:01Z",
    "author_association": "NONE",
    "body": "I, too, have created gargantuan contracts. It's amazing how fast it can grow.\n\nSome of it is alleviated by using libraries, but libraries can only do so much. If, for example, a library was being used for the psuedopolymorphism of a data type in another contract, that library has to contain _all_ the code for that type. I don't think it's impossible that a single library would break the limit.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258651308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258722278",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258722278",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258722278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODcyMjI3OA==",
    "user": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-07T00:08:24Z",
    "updated_at": "2016-11-07T00:08:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "You could make a contract a vector of 24 Kbytes pages. The first page is loaded for free when a CALL is received, while jumping or running into another page pays a fee (500 gas) because the page must be fetched from disk. This way you still maintain the possibility of arbitrary sized contracts.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258722278/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258740934",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-258740934",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 258740934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODc0MDkzNA==",
    "user": {
      "login": "DominiLux",
      "id": 19860466,
      "node_id": "MDQ6VXNlcjE5ODYwNDY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19860466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DominiLux",
      "html_url": "https://github.com/DominiLux",
      "followers_url": "https://api.github.com/users/DominiLux/followers",
      "following_url": "https://api.github.com/users/DominiLux/following{/other_user}",
      "gists_url": "https://api.github.com/users/DominiLux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DominiLux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DominiLux/subscriptions",
      "organizations_url": "https://api.github.com/users/DominiLux/orgs",
      "repos_url": "https://api.github.com/users/DominiLux/repos",
      "events_url": "https://api.github.com/users/DominiLux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DominiLux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-07T03:41:30Z",
    "updated_at": "2016-11-07T03:41:30Z",
    "author_association": "NONE",
    "body": "Whatever solution you have, I am willing to donate some of my servers resources to running a testnet on the code.  I have two servers right now that are dedicated bare metal full nodes which run 24/7 and have a 50 peer connection limit (Which always stays maxed out) plus a dedicated slot for me to synch my personal node.  These have 0 problems with the transaction spam and I put them in place prior to the previous fork to help support the network.  However, these nodes barely put a dent in the two servers resources.  I have 8 extra IP's and could easily launch 8 VM's (4 per server) to run a small test net.  Let me know if these resources are needed to assist with testing concepts for this upgrade.  An IPSec tunnel could be configured between the 8 test nodes to \"JAIL\" it from the rest of the network.\n\nSpeaking of tunnelling over a public network, to have a pinpoint vpn buildt into the nodes software for private ethereum blockchains would be a great feature to add and could attract a lot of extra developers to the network and the utilization of the technology.  Setting up a large scale site to site ipsec that's securely tunnelled over the public internet is expensive but less expensive than running direct fibre from one site to another.  To have the feature built into the nodes to communicate between each other through an encrypted tunnel, with minimal configuration except for some basic command line parameters. and a shared key that could be generated by the first node and copied over to additional nodes would make it easier for large organizations to launch their own private blockchains.  I believe this could easily be integrated because the nodes already have commonly used encryption algorithms built in as classes and functions.  One would only re-call the same function for the purposes of encrypting IP Packets instead of using it to \"brute force attack\" a nonce(Mining).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/258740934/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/259021822",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-259021822",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 259021822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTAyMTgyMg==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-08T01:51:03Z",
    "updated_at": "2016-11-08T01:51:03Z",
    "author_association": "MEMBER",
    "body": "So, regarding paging, note that if you want to make a \"contract\" larger than 24kb, you can still make a contraption using delegatecall (and HLLs eventually should have functionality to make this automatic), and get an almost equivalent effect except for higher gas costs (and if pagination was done, then that same effect would exist too). I'd also argue that this limit is more like a transaction size limit than a contract size limit.\n\nIn the long term, we could do pagination, but doing that properly would require changing the hash algorithm used to store contract code - specifically, making it a Patricia tree rather than a simple sha3 hash - and that would increase protocol complexity, so I'm not sure that would actually create significant improvements on top of the delegatecall approach.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/259021822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/259933671",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-259933671",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 259933671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTkzMzY3MQ==",
    "user": {
      "login": "gavofyork",
      "id": 138296,
      "node_id": "MDQ6VXNlcjEzODI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/138296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavofyork",
      "html_url": "https://github.com/gavofyork",
      "followers_url": "https://api.github.com/users/gavofyork/followers",
      "following_url": "https://api.github.com/users/gavofyork/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavofyork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavofyork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavofyork/subscriptions",
      "organizations_url": "https://api.github.com/users/gavofyork/orgs",
      "repos_url": "https://api.github.com/users/gavofyork/repos",
      "events_url": "https://api.github.com/users/gavofyork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavofyork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T10:59:19Z",
    "updated_at": "2016-11-11T10:59:40Z",
    "author_association": "MEMBER",
    "body": "Rather than having a maximum allowable code size of 23,999 bytes, I would propose we follow in the convention of the `max_depth` and `stack_limit` parameters and nominal a power of two (or at least even) number for it.\n\nTwo options:\n- 24,576 (`2**13 + 2**14`);\n- 32,768 (`2**15`, also happens to be exactly the size of two 16k I/O blocks).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/259933671/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/260176718",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-260176718",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 260176718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDE3NjcxOA==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-13T10:01:50Z",
    "updated_at": "2016-11-13T10:01:50Z",
    "author_association": "MEMBER",
    "body": "Proposed update to the spec:\n\n### Specification\n\nIf `block.number >= FORK_BLKNUM`, then if contract creation initialization returns data with length of **more than** `0x6000` (`2**14 + 2**13`) bytes, contract creation fails with an out of gas error.\n\n### Rationale\n\nCurrently, there remains one slight quadratic vulnerability in ethereum: when a contract is called, even though the call takes a constant amount of gas, the call can trigger O(n) cost in terms of reading the code from disk, preprocessing the code for VM execution, and also adding O(n) data to the Merkle proof for the block's proof-of-validity. At current gas levels, this is acceptable even if suboptimal. At the higher gas levels that could be triggered in the future, possibly very soon due to dynamic gas limit rules, this would become a greater concern - not nearly as serious as recent denial of service attacks, but still inconvenient especially for future light clients verifying proofs of validity or invalidity. The solution is to put a hard cap on the size of an object that can be saved to the blockchain, and do so non-disruptively by setting the cap at a value slightly higher than what is feasible with current gas limits.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/260176718/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/260184292",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-260184292",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 260184292,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDE4NDI5Mg==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-13T12:48:02Z",
    "updated_at": "2016-11-13T12:48:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vbuterin @SergioDemianLerner I think paging cost is the right solution here. delegatecall is not an elegant solution for some contract. While breaking down code into library makes perfect sense in some case and improve readability, this is not always the case.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/260184292/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/260495904",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-260495904",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 260495904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDQ5NTkwNA==",
    "user": {
      "login": "BlameByte",
      "id": 6662327,
      "node_id": "MDQ6VXNlcjY2NjIzMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6662327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlameByte",
      "html_url": "https://github.com/BlameByte",
      "followers_url": "https://api.github.com/users/BlameByte/followers",
      "following_url": "https://api.github.com/users/BlameByte/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlameByte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlameByte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlameByte/subscriptions",
      "organizations_url": "https://api.github.com/users/BlameByte/orgs",
      "repos_url": "https://api.github.com/users/BlameByte/repos",
      "events_url": "https://api.github.com/users/BlameByte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlameByte/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-14T23:19:06Z",
    "updated_at": "2016-11-14T23:19:56Z",
    "author_association": "NONE",
    "body": "After some reviewing of the contracts I have been working on I am very close to the 24000 limit and I plan on adding some user friendly functions (such as being able to withdraw to a separate account), therefore I can not support this proposal in its current state.\n\nAs for splitting up my contract, I already have 2 separate which are used for creation of various parts which helps moves some of that logic away from the main contract. As this contract is nearing completion I do not want to increase the complexity by splitting the base contract up or omitting various parts to better suit this change.\n\nAlso due to the fact that I have not yet tested all functions to ensure they are secure and likely some might need additional code to prevent / just to improve them I feel I would have to remove existing code to incorporate this, with my only solution to be simply create an additional contract and complicate the logic even more.\n\nI am open to other changes such as charging additional gas if the contract is more than 24000 bytes would be a better change, which could fix this attack and still allow developers to create what they want and be charged adequately. \n\nI feel as though lately people in Ethereum have little regard for people developing contracts: The miners keeping the gas limit low for the past couple of months, baring larger contracts and now a permanent ban on such big contracts with little regard to those developing them. I know people like and want simple contracts, but some I like to think big and really test what the platform is capable of.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/260495904/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/260573577",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-260573577",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 260573577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDU3MzU3Nw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-15T08:03:06Z",
    "updated_at": "2016-11-15T08:03:06Z",
    "author_association": "MEMBER",
    "body": "@BlameByte reach out for me on gitter, I can take a look at your contract, if you want.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/260573577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263875960",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-263875960",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 263875960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mzg3NTk2MA==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T13:42:10Z",
    "updated_at": "2016-11-30T14:29:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, what is the final consesus about max size? Seems like geth & parity is 24576.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263875960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263877577",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-263877577",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 263877577,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mzg3NzU3Nw==",
    "user": {
      "login": "hrishikeshio",
      "id": 1659870,
      "node_id": "MDQ6VXNlcjE2NTk4NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1659870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrishikeshio",
      "html_url": "https://github.com/hrishikeshio",
      "followers_url": "https://api.github.com/users/hrishikeshio/followers",
      "following_url": "https://api.github.com/users/hrishikeshio/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrishikeshio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrishikeshio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrishikeshio/subscriptions",
      "organizations_url": "https://api.github.com/users/hrishikeshio/orgs",
      "repos_url": "https://api.github.com/users/hrishikeshio/repos",
      "events_url": "https://api.github.com/users/hrishikeshio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrishikeshio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-30T13:49:38Z",
    "updated_at": "2016-11-30T13:49:38Z",
    "author_association": "NONE",
    "body": "Please allow increasing max contract size for private networks. Our Eris contracts are not deployable on ethereum private network because of this limit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/263877577/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264092813",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-264092813",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 264092813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDA5MjgxMw==",
    "user": {
      "login": "ethernomad",
      "id": 161566,
      "node_id": "MDQ6VXNlcjE2MTU2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/161566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernomad",
      "html_url": "https://github.com/ethernomad",
      "followers_url": "https://api.github.com/users/ethernomad/followers",
      "following_url": "https://api.github.com/users/ethernomad/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernomad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernomad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernomad/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernomad/orgs",
      "repos_url": "https://api.github.com/users/ethernomad/repos",
      "events_url": "https://api.github.com/users/ethernomad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernomad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T06:51:02Z",
    "updated_at": "2016-12-01T06:51:02Z",
    "author_association": "NONE",
    "body": "@hrishikeshio you can configure private networks anyway you like",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264092813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264092979",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-264092979",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 264092979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDA5Mjk3OQ==",
    "user": {
      "login": "ethernomad",
      "id": 161566,
      "node_id": "MDQ6VXNlcjE2MTU2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/161566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernomad",
      "html_url": "https://github.com/ethernomad",
      "followers_url": "https://api.github.com/users/ethernomad/followers",
      "following_url": "https://api.github.com/users/ethernomad/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernomad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernomad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernomad/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernomad/orgs",
      "repos_url": "https://api.github.com/users/ethernomad/repos",
      "events_url": "https://api.github.com/users/ethernomad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernomad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T06:52:23Z",
    "updated_at": "2016-12-01T06:52:23Z",
    "author_association": "NONE",
    "body": "Why has this EIP been accepted before FORK_BLKNUM has been defined?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264092979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264164162",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-264164162",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 264164162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDE2NDE2Mg==",
    "user": {
      "login": "hrishikeshio",
      "id": 1659870,
      "node_id": "MDQ6VXNlcjE2NTk4NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1659870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrishikeshio",
      "html_url": "https://github.com/hrishikeshio",
      "followers_url": "https://api.github.com/users/hrishikeshio/followers",
      "following_url": "https://api.github.com/users/hrishikeshio/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrishikeshio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrishikeshio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrishikeshio/subscriptions",
      "organizations_url": "https://api.github.com/users/hrishikeshio/orgs",
      "repos_url": "https://api.github.com/users/hrishikeshio/repos",
      "events_url": "https://api.github.com/users/hrishikeshio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrishikeshio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T12:41:52Z",
    "updated_at": "2016-12-01T12:41:52Z",
    "author_association": "NONE",
    "body": "@ethernomad As far as I know, there is not command line option or genesis file config to increase this limit. I guess the only option is to modify the source and compile manually.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264164162/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264164765",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-264164765",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 264164765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDE2NDc2NQ==",
    "user": {
      "login": "ethernomad",
      "id": 161566,
      "node_id": "MDQ6VXNlcjE2MTU2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/161566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernomad",
      "html_url": "https://github.com/ethernomad",
      "followers_url": "https://api.github.com/users/ethernomad/followers",
      "following_url": "https://api.github.com/users/ethernomad/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernomad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernomad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernomad/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernomad/orgs",
      "repos_url": "https://api.github.com/users/ethernomad/repos",
      "events_url": "https://api.github.com/users/ethernomad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernomad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T12:45:01Z",
    "updated_at": "2016-12-01T12:45:01Z",
    "author_association": "NONE",
    "body": "@hrishikeshio this repo is not specific to any particular implementation. It seems with Parity at least it is configurable: https://github.com/ethcore/parity/blob/master/ethcore/res/ethereum/frontier.json#L138",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/264164765/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309933631",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-309933631",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 309933631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTkzMzYzMQ==",
    "user": {
      "login": "iamtheghostlove",
      "id": 19823539,
      "node_id": "MDQ6VXNlcjE5ODIzNTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19823539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iamtheghostlove",
      "html_url": "https://github.com/iamtheghostlove",
      "followers_url": "https://api.github.com/users/iamtheghostlove/followers",
      "following_url": "https://api.github.com/users/iamtheghostlove/following{/other_user}",
      "gists_url": "https://api.github.com/users/iamtheghostlove/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iamtheghostlove/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iamtheghostlove/subscriptions",
      "organizations_url": "https://api.github.com/users/iamtheghostlove/orgs",
      "repos_url": "https://api.github.com/users/iamtheghostlove/repos",
      "events_url": "https://api.github.com/users/iamtheghostlove/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iamtheghostlove/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-21T01:07:00Z",
    "updated_at": "2017-06-21T01:07:00Z",
    "author_association": "NONE",
    "body": "In this still the case?\r\n\r\nIs there a plan to change this in the future?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309933631/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309934987",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-309934987",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 309934987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTkzNDk4Nw==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-21T01:16:43Z",
    "updated_at": "2017-06-21T01:16:43Z",
    "author_association": "NONE",
    "body": "@iamtheghostlove: It is definitely currently the case. I am personally unaware of any plans to change it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309934987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/310853723",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-310853723",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 310853723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg1MzcyMw==",
    "user": {
      "login": "eolszewski",
      "id": 3613197,
      "node_id": "MDQ6VXNlcjM2MTMxOTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3613197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eolszewski",
      "html_url": "https://github.com/eolszewski",
      "followers_url": "https://api.github.com/users/eolszewski/followers",
      "following_url": "https://api.github.com/users/eolszewski/following{/other_user}",
      "gists_url": "https://api.github.com/users/eolszewski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eolszewski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eolszewski/subscriptions",
      "organizations_url": "https://api.github.com/users/eolszewski/orgs",
      "repos_url": "https://api.github.com/users/eolszewski/repos",
      "events_url": "https://api.github.com/users/eolszewski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eolszewski/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-24T17:53:29Z",
    "updated_at": "2017-06-24T17:53:29Z",
    "author_association": "NONE",
    "body": "@chriseth can we close this issue given [this PR](https://github.com/ethereum/cpp-ethereum/pull/3410) was merged?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/310853723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322494637",
    "html_url": "https://github.com/ethereum/EIPs/issues/170#issuecomment-322494637",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/170",
    "id": 322494637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjQ5NDYzNw==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T15:03:16Z",
    "updated_at": "2017-08-15T15:03:16Z",
    "author_association": "MEMBER",
    "body": "## This EIP is now located at https://github.com/ethereum/EIPs/blob/master/EIPS/eip-170.md. Please go there for the correct specification. The text in this issue may be incorrect or outdated, and is not maintained.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/322494637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
