{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1203",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1203",
  "id": 339325102,
  "node_id": "MDU6SXNzdWUzMzkzMjUxMDI=",
  "number": 1203,
  "title": "ERC-1203 Multi-Class Token Standard (ERC-20 Extension)",
  "user": {
    "login": "jeffishjeff",
    "id": 5304123,
    "node_id": "MDQ6VXNlcjUzMDQxMjM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5304123?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jeffishjeff",
    "html_url": "https://github.com/jeffishjeff",
    "followers_url": "https://api.github.com/users/jeffishjeff/followers",
    "following_url": "https://api.github.com/users/jeffishjeff/following{/other_user}",
    "gists_url": "https://api.github.com/users/jeffishjeff/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jeffishjeff/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jeffishjeff/subscriptions",
    "organizations_url": "https://api.github.com/users/jeffishjeff/orgs",
    "repos_url": "https://api.github.com/users/jeffishjeff/repos",
    "events_url": "https://api.github.com/users/jeffishjeff/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jeffishjeff/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-07-09T06:51:24Z",
  "updated_at": "2018-09-25T02:01:47Z",
  "closed_at": "2018-09-25T02:01:47Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\neip: 1203\r\ntitle: ERC-1203 Multi-Class Token Standard (ERC-20 Extension)\r\nauthor: Jeff Huang <jeffishjeff@gmail.com>, Min Zu <crawlregister@gmail.com>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/1203\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-07-01\r\n```\r\n\r\n## Simple Summary\r\n\r\nA standard interface for multi-class tokens (MCTs).\r\n\r\n## Abstract\r\n\r\nThe following standard allows for the implementation of a standard API for MCTs within smart contracts. This standard provides basic functionality to track, transfer, and convert MCTs.\r\n\r\n## Motivation\r\n\r\nThis standard is heavily inspired by ERC-20 Token Standard and ERC-721 Non-Fungible Token Standard. However, whereas these standards are chiefly concerned with representation of items/value in a single class, fungible or note, this proposed standard focus on that of a more complexed, multi-class system. It is fair to think of MCTs as a hybrid of fungible tokens (FT) and non-fungible tokens (NFTs), that is tokens are fungible within the same class but non-fungible with that from a different class. And conversions between classes may be optionally supported.\r\n\r\nMCTs are useful in representing various structures with heterogeneous components, such as:\r\n\r\n- **Abstract Concepts:** A company may have different classes of stocks (e.g. senior preferred, junior preferred, class A common, class B common) that together make up its outstanding equities. A shareholder's position of such company composites of zero or more shares in each class.\r\n\r\n- **Virtual Items:** A sandbox computer game may have many types of resources (e.g. rock, wood, berries, cows, meat, knife, etc.) that together make up that virtual world. A player's inventory has any combination and quantity of these resources\r\n\r\n- **Physical Items:** A supermarket may have many SKUs it has available for purchase (e.g. eggs, milk, beef jerky, beer, etc.). Things get added or removed from a shopper's cart as it moves down the aisle.\r\n\r\nIt's sometimes possible, especially with regard to abstract concepts or virtual items, to convert from one class to another, at a specified conversion ratio. When it comes to physical items, such conversion essentially is the implementation of bartering. Though it might generally be easier to introduce a common intermediary class, i.e. money.\r\n\r\n## Specification\r\n\r\n```solidity\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ERC1203 is ERC20 {\r\n    function totalSupply(uint256 _class) public view returns (uint256);\r\n    function balanceOf(address _owner, uint256 _class) public view returns (uint256);\r\n    function transfer(address _to, uint256 _class, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _class, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender, uint256 _class) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _class, uint256 _value) public returns (bool);\r\n\r\n    function fullyDilutedTotalSupply() public view returns (uint256);\r\n    function fullyDilutedBalanceOf(address _owner) public view returns (uint256);\r\n    function fullyDilutedAllowance(address _owner, address _spender) public view returns (uint256);\r\n    function convert(uint256 _fromClass, uint256 _toClass, uint256 _value) public returns (bool);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _class, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _class, uint256 _value);\r\n    event Convert(uint256 indexed _fromClass, uint256 indexed _toClass, uint256 _value);\r\n}\r\n```\r\n\r\n### ERC-20 Methods and Events (fully compatible)\r\n\r\nPlease see [ERC-20 Token Standard](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md) for detailed specifications. Do note that these methods and events only work on the \"default\" class of an MCT.\r\n\r\n```solidity\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n```\r\n\r\n### Tracking and Transferring\r\n\r\n**totalSupply**\r\n\r\nReturns the total number of tokens in the specified `_class`\r\n\r\n```solidity\r\n    function totalSupply(uint256 _class) public view returns (uint256);\r\n```\r\n\r\n**balanceOf**\r\n\r\nReturns the number of tokens of a specified `_class` that the `_owner` has\r\n\r\n```solidity\r\n    function balanceOf(address _owner, uint256 _class) public view returns (uint256);\r\n```\r\n\r\n**transfer**\r\n\r\nTransfer `_value` tokens of `_class` to address specified by `_to`, return `true` if successful\r\n\r\n```solidity\r\n    function transfer(address _to, uint256 _class, uint256 _value) public returns (bool);\r\n```\r\n\r\n**approve**\r\n\r\nGrant `_spender` the right to transfer `_value` tokens of `_class`, return `true` if successful\r\n\r\n```solidity\r\n    function approve(address _spender, uint256 _class, uint256 _value) public returns (bool);\r\n```\r\n\r\n**allowance**\r\n\r\nReturn the number of tokens of `_class` that `_spender` is authorized to transfer on the behalf of `_owner`\r\n\r\n```solidity\r\n    function allowance(address _owner, address _spender, uint256 _class) public view returns (uint256);\r\n```\r\n\r\n**transferFrom**\r\n\r\nTransfer `_value` tokens of `_class` from address specified by `_from` to address specified by `_to` as previously approved, return `true` if successful\r\n\r\n```solidity\r\n    function transferFrom(address _from, address _to, uint256 _class, uint256 _value) public returns (bool);\r\n```\r\n\r\n**Transfer**\r\n\r\nTriggered when tokens are transferred or created, including zero value transfers\r\n\r\n```solidity\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _class, uint256 _value);\r\n```\r\n\r\n**Approval**\r\n\r\nTriggered on successful `approve`\r\n\r\n```solidity\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _class, uint256 _value);\r\n```\r\n\r\n### Conversion and Dilution\r\n\r\n**fullyDilutedTotalSupply**\r\n\r\nReturn the total token supply as if all converted to the lowest common denominator class\r\n\r\n```solidity\r\n    function fullyDilutedTotalSupply() public view returns (uint256);\r\n```\r\n\r\n**fullyDilutedBalanceOf**\r\n\r\nReturn the total token owned by `_owner` as if all converted to the lowest common denominator class\r\n\r\n```solidity\r\n    function fullyDilutedBalanceOf(address _owner) public view returns (uint256);\r\n```\r\n\r\n**fullyDilutedAllowance**\r\n\r\nReturn the total token `_spender` is authorized to transfer on behalf of `_owner` as if all converted to the lowest common denominator class\r\n\r\n```solidity\r\n    function fullyDilutedAllowance(address _owner, address _spender) public view returns (uint256);\r\n```\r\n\r\n**convert**\r\n\r\nConvert `_value` of `_fromClass` to `_toClass`, return `true` if successful\r\n\r\n```solidity\r\n    function convert(uint256 _fromClass, uint256 _toClass, uint256 _value) public returns (bool);\r\n```\r\n\r\n**Conversion**\r\n\r\nTriggered on successful `convert`\r\n\r\n```solidity\r\n    event Conversion(uint256 indexed _fromClass, uint256 indexed _toClass, uint256 _value);\r\n```\r\n\r\n## Rationale\r\nThis standard purposely extends ERC-20 Token Standard so that new MCTs following or existing ERC-20 tokens extending this standard are fully compatible with current wallets and exchanges. In addition, new methods and events are kept as closely to ERC-20 conventions as possible for ease of adoption.\r\n\r\nWe have considered alternative implementations to support the multi-class structure, as discussed below, and we found current token standards incapable or inefficient in deal with such structures.\r\n\r\n**Using multiple ERC-20 tokens**\r\n\r\nIt is certainly possible to create an ERC-20 token for each class, and a separate contract to coordinate potential conversions, but the short coming in this approach is clearly evident. The rationale behind this standard is to have a single contract to manage multiple classes of tokens.\r\n\r\n**Shoehorning ERC-721 token**\r\n\r\nTreating each token as unique, the non-fungible token standard offers maximum representational flexibility arguably at the expense of convenience. The main challenge of using ERC-721 to represent multi-class token is that separate logic is required to keep track of which tokens belongs to which class, a hacky and unnecessary endeavor.\r\n\r\n**Using ERC-1178 token**\r\n\r\nWe came across ERC-1178 as we were putting final touches on our own proposal. The two ERCs look very similar on the surface but we believe there're a few key advantages this one has over ERC-1178.\r\n\r\n- ERC-1178 offers no backward compatibility whereas this proposal is an extension of ERC-20 and therefore fully compatible with all existing wallets and exchanges\r\n- By the same token, existing ERC-20 contracts can extend themselves to adopt this standard and support additional classes without affecting their current behaviors\r\n- This proposal introduces the concept of cross class conversion and dilution, making each token class integral part of a whole system rather than many silos\r\n\r\n## Backwards Compatibility\r\nThis EIP is fully compatible with the mandatory methods of ERC20 Token Standard so long as the implementation includes a \"lowest common denominator\" class, which may be class B common/gold coin/money in the abstract/virtual/physical examples above respectively. Where it is not possible to implement such class, then the implementation should specify a default class for tracking or transferring unless otherwise specified, e.g. US dollar is transferred unless other currency is explicitly specified.\r\n\r\nWe find it contrived to require the optional methods of ERC20 Token Standard, `name()`, `symbol()`, and `decimals()`, but developers are certainly free to implement these as they wish.\r\n\r\n## Test Cases\r\nThe repository at [jeffishjeff/ERC-1203](https://github.com/jeffishjeff/ERC-1203) contains the [sample test cases](https://github.com/jeffishjeff/ERC-1203/blob/master/token.test.js).\r\n\r\n## Implementation\r\nThe repository at [jeffishjeff/ERC-1203](https://github.com/jeffishjeff/ERC-1203) contains the [sample implementation](https://github.com/jeffishjeff/ERC-1203/blob/master/token.sol).\r\n\r\n## References\r\n- ERC-20 Token Standard. https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n- ERC-721 Non-Fungible Token Standard. https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n- ERC-1178 Multi-class Token Standard. https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1178.md\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "jeffishjeff",
    "id": 5304123,
    "node_id": "MDQ6VXNlcjUzMDQxMjM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5304123?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jeffishjeff",
    "html_url": "https://github.com/jeffishjeff",
    "followers_url": "https://api.github.com/users/jeffishjeff/followers",
    "following_url": "https://api.github.com/users/jeffishjeff/following{/other_user}",
    "gists_url": "https://api.github.com/users/jeffishjeff/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jeffishjeff/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jeffishjeff/subscriptions",
    "organizations_url": "https://api.github.com/users/jeffishjeff/orgs",
    "repos_url": "https://api.github.com/users/jeffishjeff/repos",
    "events_url": "https://api.github.com/users/jeffishjeff/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jeffishjeff/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1203/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/403506896",
    "html_url": "https://github.com/ethereum/EIPs/issues/1203#issuecomment-403506896",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203",
    "id": 403506896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzUwNjg5Ng==",
    "user": {
      "login": "xinbenlv",
      "id": 640325,
      "node_id": "MDQ6VXNlcjY0MDMyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/640325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinbenlv",
      "html_url": "https://github.com/xinbenlv",
      "followers_url": "https://api.github.com/users/xinbenlv/followers",
      "following_url": "https://api.github.com/users/xinbenlv/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinbenlv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinbenlv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinbenlv/subscriptions",
      "organizations_url": "https://api.github.com/users/xinbenlv/orgs",
      "repos_url": "https://api.github.com/users/xinbenlv/repos",
      "events_url": "https://api.github.com/users/xinbenlv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinbenlv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-09T14:53:04Z",
    "updated_at": "2018-07-09T14:53:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "So if I read it correctly, this is a competing proposal against #1178, right?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/403506896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/403546501",
    "html_url": "https://github.com/ethereum/EIPs/issues/1203#issuecomment-403546501",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203",
    "id": 403546501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzU0NjUwMQ==",
    "user": {
      "login": "jeffishjeff",
      "id": 5304123,
      "node_id": "MDQ6VXNlcjUzMDQxMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5304123?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffishjeff",
      "html_url": "https://github.com/jeffishjeff",
      "followers_url": "https://api.github.com/users/jeffishjeff/followers",
      "following_url": "https://api.github.com/users/jeffishjeff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffishjeff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffishjeff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffishjeff/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffishjeff/orgs",
      "repos_url": "https://api.github.com/users/jeffishjeff/repos",
      "events_url": "https://api.github.com/users/jeffishjeff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffishjeff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-09T16:54:30Z",
    "updated_at": "2018-07-09T16:54:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@xinbenlv that wasn't our original intent but, yes, looks like we're independently trying to address the same issue.\r\n\r\nWe only became aware of ERC-1178 when doing a final sync before creating the new pull request today. And after studying ERC-1178 in detail, we felt that our proposal still contains enough merits and differences (as described in the Rationale section) that warranted community consideration.\r\n\r\nLove to hear your thoughts on either or both of the ERCs :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/403546501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/403547813",
    "html_url": "https://github.com/ethereum/EIPs/issues/1203#issuecomment-403547813",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203",
    "id": 403547813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzU0NzgxMw==",
    "user": {
      "login": "xinbenlv",
      "id": 640325,
      "node_id": "MDQ6VXNlcjY0MDMyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/640325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinbenlv",
      "html_url": "https://github.com/xinbenlv",
      "followers_url": "https://api.github.com/users/xinbenlv/followers",
      "following_url": "https://api.github.com/users/xinbenlv/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinbenlv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinbenlv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinbenlv/subscriptions",
      "organizations_url": "https://api.github.com/users/xinbenlv/orgs",
      "repos_url": "https://api.github.com/users/xinbenlv/repos",
      "events_url": "https://api.github.com/users/xinbenlv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinbenlv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-09T16:58:59Z",
    "updated_at": "2018-07-09T16:59:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, coming from a \"traditional\" Internet background, I can see how important it's for a latter protocol/standard to be backward compatible to a widely accepted existing standard(ERC-20 in this case), so I think that's a very strong advantage of ERC-1203 \r\n@jeffishjeff great idea~",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/403547813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408551055",
    "html_url": "https://github.com/ethereum/EIPs/issues/1203#issuecomment-408551055",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203",
    "id": 408551055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODU1MTA1NQ==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T22:09:34Z",
    "updated_at": "2018-07-27T22:09:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello! \r\n\r\nThis sounds very similar to #1155 and #888 as well. Would it be possible for you to chime in there so we can all collaborate on a single standard? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408551055/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/410503114",
    "html_url": "https://github.com/ethereum/EIPs/issues/1203#issuecomment-410503114",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203",
    "id": 410503114,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDUwMzExNA==",
    "user": {
      "login": "jeffishjeff",
      "id": 5304123,
      "node_id": "MDQ6VXNlcjUzMDQxMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5304123?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffishjeff",
      "html_url": "https://github.com/jeffishjeff",
      "followers_url": "https://api.github.com/users/jeffishjeff/followers",
      "following_url": "https://api.github.com/users/jeffishjeff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffishjeff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffishjeff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffishjeff/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffishjeff/orgs",
      "repos_url": "https://api.github.com/users/jeffishjeff/repos",
      "events_url": "https://api.github.com/users/jeffishjeff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffishjeff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-05T07:59:49Z",
    "updated_at": "2018-08-05T07:59:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @PhABC for the heads up. #1155 seem to have evolved a lot since I last visited it and I agree it's becoming a superset of what I wanted to do with this proposal. Yes, I'd be happy to join the discussion there",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/410503114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423714468",
    "html_url": "https://github.com/ethereum/EIPs/issues/1203#issuecomment-423714468",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203",
    "id": 423714468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzcxNDQ2OA==",
    "user": {
      "login": "HassanFahmy",
      "id": 40380244,
      "node_id": "MDQ6VXNlcjQwMzgwMjQ0",
      "avatar_url": "https://avatars.githubusercontent.com/u/40380244?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HassanFahmy",
      "html_url": "https://github.com/HassanFahmy",
      "followers_url": "https://api.github.com/users/HassanFahmy/followers",
      "following_url": "https://api.github.com/users/HassanFahmy/following{/other_user}",
      "gists_url": "https://api.github.com/users/HassanFahmy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HassanFahmy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HassanFahmy/subscriptions",
      "organizations_url": "https://api.github.com/users/HassanFahmy/orgs",
      "repos_url": "https://api.github.com/users/HassanFahmy/repos",
      "events_url": "https://api.github.com/users/HassanFahmy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HassanFahmy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-22T03:58:04Z",
    "updated_at": "2018-09-22T03:58:04Z",
    "author_association": "NONE",
    "body": "Why not add a safe transfer function?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/423714468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424182458",
    "html_url": "https://github.com/ethereum/EIPs/issues/1203#issuecomment-424182458",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1203",
    "id": 424182458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE4MjQ1OA==",
    "user": {
      "login": "jeffishjeff",
      "id": 5304123,
      "node_id": "MDQ6VXNlcjUzMDQxMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5304123?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffishjeff",
      "html_url": "https://github.com/jeffishjeff",
      "followers_url": "https://api.github.com/users/jeffishjeff/followers",
      "following_url": "https://api.github.com/users/jeffishjeff/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffishjeff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffishjeff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffishjeff/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffishjeff/orgs",
      "repos_url": "https://api.github.com/users/jeffishjeff/repos",
      "events_url": "https://api.github.com/users/jeffishjeff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffishjeff/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-25T02:01:47Z",
    "updated_at": "2018-09-25T02:01:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@HassanFahmy I agree, safe transfer together with token fallback/received is becoming expected features in token standards. I would definitely in favor of adding them. But as stated above, I've been working more with #1155 as I believe that standard provides all features of this one and more.\r\n\r\nClosing the issue for now. Thanks everyone for chiming in, and anyone who wishes to re-open or take the proposal further is certainly free to do so. Cheers!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/424182458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
