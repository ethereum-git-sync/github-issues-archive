{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1594",
  "id": 382147100,
  "node_id": "MDU6SXNzdWUzODIxNDcxMDA=",
  "number": 1594,
  "title": "ERC 1594: Core Security Token Standard",
  "user": {
    "login": "adamdossa",
    "id": 2633913,
    "node_id": "MDQ6VXNlcjI2MzM5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adamdossa",
    "html_url": "https://github.com/adamdossa",
    "followers_url": "https://api.github.com/users/adamdossa/followers",
    "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
    "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
    "organizations_url": "https://api.github.com/users/adamdossa/orgs",
    "repos_url": "https://api.github.com/users/adamdossa/repos",
    "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adamdossa/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2018-11-19T10:24:10Z",
  "updated_at": "2021-12-06T12:18:00Z",
  "closed_at": "2021-12-06T12:18:00Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "---\r\n\r\neip: ERC-1594\r\ntitle: Core Security Token Standard (part of the ERC-1400 Security Token Standards)\r\nauthor: Adam Dossa (@adamdossa), Pablo Ruiz (@pabloruiz55), Fabian Vogelsteller (@frozeman), Stephane Gosselin (@thegostep)\r\ndiscussions-to: #1411\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-09-09\r\nrequire: ERC-20 (#20), ERC-1066 (#1066)\r\n\r\n---\r\n\r\n## Simple Summary\r\n\r\nThis standard sits under the ERC-1400 (#1411) umbrella set of standards related to security tokens.\r\n\r\nProvides a standard to support off-chain injection of data into transfers / issuance / redemption and the ability to check the validity of a transfer distinct from it's execution.\r\n\r\n## Abstract\r\n\r\nIncorporates error signalling, off-chain data injection and issuance / redemption semantics.\r\n\r\nThis standard inherits from ERC-20 (#20) and could be easily extended to meet the ERC-777 (#777) standard if needed.\r\n\r\n## Motivation\r\n\r\nAccelerate the issuance and management of securities on the Ethereum blockchain by specifying a standard interface through which security tokens can be operated on and interrogated by all relevant parties.\r\n\r\nSecurity tokens differ materially from other token use-cases, with more complex interactions between off-chain and on-chain actors, and considerable regulatory scrutiny.\r\n\r\nThe ability to provide data (e.g. signed authorisation) alongside transfer, issuance and redemption functions allows security tokens to more flexibly implement transfer restrictions without depending on on-chain whitelists exclusively.\r\n\r\nUsing ERC-1066 (#1066) to provide reason codes as to why a transfer would fail, without requiring a user to actually try and execute a transfer, allows for improved UX and potentially saves gas on what would otherwise be failed transfers.\r\n\r\nFormalising issuance and redemption semantics (similar to minting / burning) provides visibility into the total supply of the token and how it has changed over time.\r\n\r\n## Requirements\r\n\r\nSee ERC-1400 (#1411) for a full set of requirements across the library of standards.\r\n\r\nThe following requirements have been compiled following discussions with parties across the Security Token ecosystem.\r\n\r\n- MUST have a standard interface to query if a transfer would be successful and return a reason for failure.\r\n- MUST emit standard events for issuance and redemption.\r\n- MAY require signed data to be passed into a transfer transaction in order to validate it on-chain.\r\n- SHOULD NOT restrict the range of asset classes across jurisdictions which can be represented.\r\n- MUST be ERC-20 (#20) compatible.\r\n- COULD be ERC-777 (#777) compatible.\r\n\r\n## Rationale\r\n\r\n### Transfer Restrictions\r\n\r\nTransfers of securities can fail for a variety of reasons in contrast to utility tokens which generally only require the sender to have a sufficient balance.\r\n\r\nThese conditions could be related to metadata of the securities being transferred (i.e. whether they are subject to a lock-up period), the identity of the sender and receiver of the securities (i.e. whether they have been through a KYC process, whether they are accredited or an affiliate of the issuer) or for reasons unrelated to the specific transfer but instead set at the token level (i.e. the token contract enforces a maximum number of investors or a cap on the percentage held by any single investor).\r\n\r\nFor ERC-20 / ERC-777 tokens, the `balanceOf` and `allowance` functions provide a way to check that a transfer is likely to succeed before executing the transfer, which can be executed both on and off-chain.\r\n\r\nFor tokens representing securities the standard introduces a function `canTransfer` which provides a more general purpose way to achieve this when the reasons for failure are more complex; and a function of the whole transfer (i.e. includes any data sent with the transfer and the receiver of the securities).\r\n\r\nIn order to support off-chain data inputs to transfer functions, transfer functions are extended to `transferWithData` / `transferFromWithData` which can optionally take an additional `bytes _data` parameter.\r\n\r\nIn order to provide a richer result than just true or false, a byte return code is returned. This allows us to give a reason for why the transfer failed, or at least which category of reason the failure was in. The ability to query documents and the expected success of a transfer is included in Security Token section.\r\n\r\n## Specification\r\n\r\n### Restricted Transfers\r\n\r\n#### canTransfer / canTransferFrom\r\n\r\nTransfers of securities may fail for a number of reasons, for example relating to:\r\n  - the identity of the sender or receiver of the tokens\r\n  - limits placed on the specific tokens being transferred (i.e. lockups on certain quantities of token)\r\n  - limits related to the overall state of the token (i.e. total number of investors)\r\n\r\nThe standard provides an on-chain function to determine whether a transfer will succeed, and return details indicating the reason if the transfer is not valid.\r\n\r\nThese rules can either be defined using smart contracts and on-chain data, or rely on `_data` passed as part of the `transferWithData` function which could represent authorisation for the transfer (e.g. a signed message by a transfer agent attesting to the validity of this specific transfer).\r\n\r\nThe function will return both a ESC (Ethereum Status Code) following the EIP-1066 standard, and an additional `bytes32` parameter that can be used to define application specific reason codes with additional details (for example the transfer restriction rule responsible for making the transfer operation invalid).\r\n\r\nIf `bytes _data` is empty, then this corresponds to a check on whether a `transfer` (or `transferFrom`) request will succeed, if `bytes _data` is populated, then this corresponds to a check on `transferWithData` (or `transferFromWithData`) will succeed.\r\n\r\n`canTransfer` assumes the sender of tokens is `msg.sender` and will be executed via `transfer` or `transferWithData` whereas `canTransferFrom` allows the specification of the sender of tokens and that the transfer will be executed via `transferFrom` or `transferFromWithData`.\r\n\r\n``` solidity\r\nfunction canTransfer(address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);\r\nfunction canTransferFrom(address _from, address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);\r\n```\r\n\r\n#### transferWithData\r\n\r\nTransfer restrictions can take many forms and typically involve on-chain rules or whitelists. However for many types of approved transfers, maintaining an on-chain list of approved transfers can be cumbersome and expensive. An alternative is the co-signing approach, where in addition to the token holder approving a token transfer, and authorised entity provides signed data which further validates the transfer.\r\n\r\nThe `bytes _data` allows arbitrary data to be submitted alongside the transfer, for the token contract to interpret or record. This could be signed data authorising the transfer (e.g. a dynamic whitelist) but is flexible enough to accomadate other use-cases.\r\n\r\n`transferWithData` MUST emit a `Transfer` event with details of the transfer.\r\n\r\n``` solidity\r\nfunction transferWithData(address _to, uint256 _value, bytes _data) external;\r\n```\r\n\r\n#### transferFromWithData\r\n\r\nThis is the analogy to the `transferWithData` function.\r\n\r\n`msg.sender` MUST have a sufficient `allowance` set and this `allowance` must be debited by the `_value`.\r\n\r\n``` solidity\r\nfunction transferFromWithData(address _from, address _to, uint256 _value, bytes _data) external;\r\n```\r\n\r\n### Token Issuance\r\n\r\n#### isIssuable\r\n\r\nA security token issuer can specify that issuance has finished for the token (i.e. no new tokens can be minted or issued).\r\n\r\nIf a token returns FALSE for `isIssuable()` then it MUST always return FALSE in the future.\r\n\r\nIf a token returns FALSE for `isIssuable()` then it MUST never allow additional tokens to be issued.\r\n\r\n``` solidity\r\nfunction isIssuable() external view returns (bool);\r\n```\r\n\r\n#### issue\r\n\r\nThis function must be called to increase the total supply.\r\n\r\nThe `bytes _data` parameter can be used to inject off-chain data (e.g. signed data) to authorise or authenticate the issuance and receiver of issued tokens.\r\n\r\nWhen called, this function MUST emit the `Issued` event.\r\n\r\n``` solidity\r\nfunction issue(address _tokenHolder, uint256 _value, bytes _data) external;\r\n```\r\n\r\n### Token Redemption\r\n\r\n#### redeem\r\n\r\nAllows a token holder to redeem tokens.\r\n\r\nThe redeemed tokens must be subtracted from the total supply and the balance of the token holder. The token redemption should act like sending tokens and be subject to the same conditions.\r\n\r\nThe `Redeemed` event MUST be emitted every time this function is called.\r\n\r\nAs with `transferWithData` this function has a `bytes _data` parameter that can be used in the token contract to authenticate the redemption.\r\n\r\n``` solidity\r\nfunction redeem(uint256 _value, bytes _data) external;\r\n```\r\n\r\n#### redeemFrom\r\n\r\nThis is the analogy to the `redeem` function.\r\n\r\n`msg.sender` MUST have a sufficient `allowance` set and this `allowance` must be debited by the `_value`.\r\n\r\nThe `Redeemed` event MUST be emitted every time this function is called.\r\n\r\n``` solidity\r\nfunction redeemFrom(address _tokenHolder, uint256 _value, bytes _data) external;\r\n```\r\n\r\n## Interface\r\n\r\n``` solidity\r\n/// @title IERC1594 Security Token Standard\r\n/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\r\n\r\ninterface IERC1594 is IERC20 {\r\n\r\n    // Transfers\r\n    function transferWithData(address _to, uint256 _value, bytes _data) external;\r\n    function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) external;\r\n\r\n    // Token Issuance\r\n    function isIssuable() external view returns (bool);\r\n    function issue(address _tokenHolder, uint256 _value, bytes _data) external;\r\n\r\n    // Token Redemption\r\n    function redeem(uint256 _value, bytes _data) external;\r\n    function redeemFrom(address _tokenHolder, uint256 _value, bytes _data) external;\r\n\r\n    // Transfer Validity\r\n    function canTransfer(address _to, uint256 _value, bytes _data) external view returns (bool, byte, bytes32);\r\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes _data) external view returns (bool, byte, bytes32);\r\n\r\n    // Issuance / Redemption Events\r\n    event Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\r\n    event Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\r\n\r\n}\r\n```\r\n\r\n## References\r\n- [EIP 1400: Security Token Standard With Partitions](https://github.com/ethereum/EIPs/issues/1411)\r\n- [EIP Draft](https://github.com/SecurityTokenStandard/EIP-Spec)",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1594/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/446914819",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-446914819",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 446914819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjkxNDgxOQ==",
    "user": {
      "login": "ritzdorf",
      "id": 10403309,
      "node_id": "MDQ6VXNlcjEwNDAzMzA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10403309?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ritzdorf",
      "html_url": "https://github.com/ritzdorf",
      "followers_url": "https://api.github.com/users/ritzdorf/followers",
      "following_url": "https://api.github.com/users/ritzdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ritzdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ritzdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ritzdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/ritzdorf/orgs",
      "repos_url": "https://api.github.com/users/ritzdorf/repos",
      "events_url": "https://api.github.com/users/ritzdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ritzdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-13T10:15:40Z",
    "updated_at": "2018-12-13T10:15:40Z",
    "author_association": "NONE",
    "body": "Hey,\r\n\r\nthanks for all of your efforts. \r\n\r\nI have a question: Isn't\r\n```solidity\r\nfunction canTransferFrom(address _from, address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);\r\n```\r\nunderspecified? Consider the following scenario:\r\n\r\n* A approves B to withdraw 1 token\r\n* B is blacklisted and therefore shouldn't be allowed to do any transfers => `canTransferFrom(A, B, 1)` would deny a transfer (return`0x10`)\r\n* To withdraw the token, B simply calls `transferFrom(A, C, 1)` to some\r\naddress `C` it controls\r\n* This triggers `canTransferFrom(A, C, 1)` which allows the transfer (returns `0x11`)\r\n* => the policy inside `canTransferFrom` cannot detect that B triggered this even though B was\r\nblacklisted\r\n\r\nTherefore, my proposal would be to extend `canTransferFrom` to:\r\n\r\n```solidity\r\nfunction canTransferFrom(address _from, address _to, address _forwarder, uint256 _value, bytes _data) external view returns (byte, bytes32);\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/446914819/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/446967755",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-446967755",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 446967755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Njk2Nzc1NQ==",
    "user": {
      "login": "0age",
      "id": 37939117,
      "node_id": "MDQ6VXNlcjM3OTM5MTE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/37939117?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0age",
      "html_url": "https://github.com/0age",
      "followers_url": "https://api.github.com/users/0age/followers",
      "following_url": "https://api.github.com/users/0age/following{/other_user}",
      "gists_url": "https://api.github.com/users/0age/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0age/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0age/subscriptions",
      "organizations_url": "https://api.github.com/users/0age/orgs",
      "repos_url": "https://api.github.com/users/0age/repos",
      "events_url": "https://api.github.com/users/0age/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0age/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-13T13:27:29Z",
    "updated_at": "2018-12-13T13:27:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can’t you infer B from `msg.sender`? It seems to me that this actually highlights an important distinction: forwarders / operators should have their own blacklist policy independent of blacklisted receivers. (However, this is more of an implementation detail than an interface requirement.)\r\n\r\n*However*, there may be an argument for including an overloaded version of `canTransferFrom` (and probably `canTransfer` as well) in order to allow third parties to check if a transfer would succeed when originating from a different caller. As the caller will generally be the same for both, keeping things simple for the default case and avoiding duplication of `msg.sender` in calldata seems like a good idea.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/446967755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/446976500",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-446976500",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 446976500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Njk3NjUwMA==",
    "user": {
      "login": "ritzdorf",
      "id": 10403309,
      "node_id": "MDQ6VXNlcjEwNDAzMzA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10403309?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ritzdorf",
      "html_url": "https://github.com/ritzdorf",
      "followers_url": "https://api.github.com/users/ritzdorf/followers",
      "following_url": "https://api.github.com/users/ritzdorf/following{/other_user}",
      "gists_url": "https://api.github.com/users/ritzdorf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ritzdorf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ritzdorf/subscriptions",
      "organizations_url": "https://api.github.com/users/ritzdorf/orgs",
      "repos_url": "https://api.github.com/users/ritzdorf/repos",
      "events_url": "https://api.github.com/users/ritzdorf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ritzdorf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-13T13:55:56Z",
    "updated_at": "2018-12-13T13:55:56Z",
    "author_association": "NONE",
    "body": "> Can’t you infer B from msg.sender?\r\n\r\nSure. `msg.sender` can be inferred as long as you stay within the same contract, but I thought it would be more explicit to include it, to show that it might influence the check.\r\n\r\nYou are right that `canTransfer` would then also have to be adjusted.\r\n\r\nI am just envisioning a scenario where these checks are done by a separate contract which might make sense for reasons of modularity, reusability and upgradability. But I definitely also see your point about simplicity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/446976500/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/447178846",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-447178846",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 447178846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzE3ODg0Ng==",
    "user": {
      "login": "pakaplace",
      "id": 19257612,
      "node_id": "MDQ6VXNlcjE5MjU3NjEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/19257612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pakaplace",
      "html_url": "https://github.com/pakaplace",
      "followers_url": "https://api.github.com/users/pakaplace/followers",
      "following_url": "https://api.github.com/users/pakaplace/following{/other_user}",
      "gists_url": "https://api.github.com/users/pakaplace/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pakaplace/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pakaplace/subscriptions",
      "organizations_url": "https://api.github.com/users/pakaplace/orgs",
      "repos_url": "https://api.github.com/users/pakaplace/repos",
      "events_url": "https://api.github.com/users/pakaplace/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pakaplace/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-14T01:13:56Z",
    "updated_at": "2018-12-14T01:14:19Z",
    "author_association": "NONE",
    "body": "Great work @adamdossa . We're pretty in line with this design at Meridio, and the community's move to decompose ERC-1400.  A few comments around issuance/redemption as part of the standard:\r\n* If issuance/redemption is part of the required interface and `isIssuable()` is defined, then shouldn't  a`finishIssuance()` function be included in the standard? Even if you deem its inclusion out of the scope of an interface, I think it would help explain a non-intuitive concept for readers of the standard. \r\n* Curious to hear why \"issue\" and \"redeem\" were chosen terminology given the prominence of \"mint\" and \"burn.\" I understand it may be more in line with industry terminology, but on the other hand I would argue \"redemption\" does not imply convey burn/destroy-tokens functionality at first glance. \r\n* I'm still hesitant to vie for 1066 status codes in a core standard given their WIP status. Including a `Bool` as the first returned variable of `canTransfer()` would be much easier to implement and adopt, and it would still allow people to query transfer success. With a `bool` as a first parameter, you could still allow for optional 1066 and application specific status codes. Dependency on 1066 comes with an uncertain ETA for completion, and security token projects are going to market **soon**.\r\n \r\ni.e. ```function canTransfer(address _to, uint256 _value, bytes _data) external view returns (bool success, byte statusCode, bytes32 reason);```\r\n\r\n\r\nA peer at Meridio (Asha Dakshi) pointed out that from an audit perspective, `controllerTransfer` might be preferable for fund recovery, since events could be emitted on `controllerTransfer` would show matching debits/credits and sender/recipient. Not sure if `controllerTransfer()` should necessarily be part of the base standard, but I guess the same could be argued for issuance/redemption. In either case, I'm okay with this being in the standard. The implementation decision should probably be left to the issuer and regulator. @0age interested to hear your thoughts on this. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/447178846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458007793",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-458007793",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 458007793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODAwNzc5Mw==",
    "user": {
      "login": "dmihal",
      "id": 1661138,
      "node_id": "MDQ6VXNlcjE2NjExMzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1661138?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dmihal",
      "html_url": "https://github.com/dmihal",
      "followers_url": "https://api.github.com/users/dmihal/followers",
      "following_url": "https://api.github.com/users/dmihal/following{/other_user}",
      "gists_url": "https://api.github.com/users/dmihal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dmihal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dmihal/subscriptions",
      "organizations_url": "https://api.github.com/users/dmihal/orgs",
      "repos_url": "https://api.github.com/users/dmihal/repos",
      "events_url": "https://api.github.com/users/dmihal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dmihal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T06:00:40Z",
    "updated_at": "2019-01-28T06:00:40Z",
    "author_association": "NONE",
    "body": "Is there consensus on whether `canTransfer`/`canTransferFrom` should include a bool as a return parameter?\r\n\r\nThe boolean is included in the \"Interface\" section of this document, but omitted in the \"canTransfer / canTransferFrom\" section.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458007793/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/465560460",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-465560460",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 465560460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTU2MDQ2MA==",
    "user": {
      "login": "ravachol70",
      "id": 16898182,
      "node_id": "MDQ6VXNlcjE2ODk4MTgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/16898182?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ravachol70",
      "html_url": "https://github.com/ravachol70",
      "followers_url": "https://api.github.com/users/ravachol70/followers",
      "following_url": "https://api.github.com/users/ravachol70/following{/other_user}",
      "gists_url": "https://api.github.com/users/ravachol70/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ravachol70/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ravachol70/subscriptions",
      "organizations_url": "https://api.github.com/users/ravachol70/orgs",
      "repos_url": "https://api.github.com/users/ravachol70/repos",
      "events_url": "https://api.github.com/users/ravachol70/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ravachol70/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-20T12:49:11Z",
    "updated_at": "2019-02-20T12:49:11Z",
    "author_association": "NONE",
    "body": "Where are the Jurisdictions defined/registered?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/465560460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/467762703",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-467762703",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 467762703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Nzc2MjcwMw==",
    "user": {
      "login": "cyberience",
      "id": 2595073,
      "node_id": "MDQ6VXNlcjI1OTUwNzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2595073?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cyberience",
      "html_url": "https://github.com/cyberience",
      "followers_url": "https://api.github.com/users/cyberience/followers",
      "following_url": "https://api.github.com/users/cyberience/following{/other_user}",
      "gists_url": "https://api.github.com/users/cyberience/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cyberience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cyberience/subscriptions",
      "organizations_url": "https://api.github.com/users/cyberience/orgs",
      "repos_url": "https://api.github.com/users/cyberience/repos",
      "events_url": "https://api.github.com/users/cyberience/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cyberience/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-27T08:03:25Z",
    "updated_at": "2019-02-27T08:03:25Z",
    "author_association": "NONE",
    "body": "I think canTransferTo would make more sense, since it is the receiver who is restricted rather than the sender. so if the receiver is in the white list, then the transfer can complete.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/467762703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/475332331",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-475332331",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 475332331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTMzMjMzMQ==",
    "user": {
      "login": "ppoliani",
      "id": 1389619,
      "node_id": "MDQ6VXNlcjEzODk2MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1389619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ppoliani",
      "html_url": "https://github.com/ppoliani",
      "followers_url": "https://api.github.com/users/ppoliani/followers",
      "following_url": "https://api.github.com/users/ppoliani/following{/other_user}",
      "gists_url": "https://api.github.com/users/ppoliani/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ppoliani/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ppoliani/subscriptions",
      "organizations_url": "https://api.github.com/users/ppoliani/orgs",
      "repos_url": "https://api.github.com/users/ppoliani/repos",
      "events_url": "https://api.github.com/users/ppoliani/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ppoliani/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-21T17:40:14Z",
    "updated_at": "2019-03-21T17:40:14Z",
    "author_association": "NONE",
    "body": "@cyberience A transfer can fail for various reasons. A whitelisted address is definitely one of those reasons, which essentially add restrictions to who you can send the tokens to. At the same time, a transfer can fail due to insufficient balance from the sender.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/475332331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/483113370",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-483113370",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 483113370,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MzExMzM3MA==",
    "user": {
      "login": "yosriady",
      "id": 1084226,
      "node_id": "MDQ6VXNlcjEwODQyMjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1084226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yosriady",
      "html_url": "https://github.com/yosriady",
      "followers_url": "https://api.github.com/users/yosriady/followers",
      "following_url": "https://api.github.com/users/yosriady/following{/other_user}",
      "gists_url": "https://api.github.com/users/yosriady/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yosriady/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yosriady/subscriptions",
      "organizations_url": "https://api.github.com/users/yosriady/orgs",
      "repos_url": "https://api.github.com/users/yosriady/repos",
      "events_url": "https://api.github.com/users/yosriady/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yosriady/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-15T05:35:11Z",
    "updated_at": "2019-04-15T05:35:11Z",
    "author_association": "NONE",
    "body": "Hi folks, we've recently open sourced our implementation of ERC1594 (and ERC1644) here: http://github.com/tenx-tech/tenx-token\r\n\r\nCheers!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/483113370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974757166",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-974757166",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 974757166,
    "node_id": "IC_kwDOAq426M46GZ0u",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-21T05:10:13Z",
    "updated_at": "2021-11-21T05:10:13Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974757166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986723660",
    "html_url": "https://github.com/ethereum/EIPs/issues/1594#issuecomment-986723660",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1594",
    "id": 986723660,
    "node_id": "IC_kwDOAq426M460DVM",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-06T12:17:59Z",
    "updated_at": "2021-12-06T12:17:59Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986723660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
