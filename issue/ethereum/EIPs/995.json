{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/995",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/995/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/995/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/995/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/995",
  "id": 313928571,
  "node_id": "MDU6SXNzdWUzMTM5Mjg1NzE=",
  "number": 995,
  "title": "ERC995 Token Standard",
  "user": {
    "login": "ProphetDaniel",
    "id": 5958020,
    "node_id": "MDQ6VXNlcjU5NTgwMjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5958020?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ProphetDaniel",
    "html_url": "https://github.com/ProphetDaniel",
    "followers_url": "https://api.github.com/users/ProphetDaniel/followers",
    "following_url": "https://api.github.com/users/ProphetDaniel/following{/other_user}",
    "gists_url": "https://api.github.com/users/ProphetDaniel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ProphetDaniel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ProphetDaniel/subscriptions",
    "organizations_url": "https://api.github.com/users/ProphetDaniel/orgs",
    "repos_url": "https://api.github.com/users/ProphetDaniel/repos",
    "events_url": "https://api.github.com/users/ProphetDaniel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ProphetDaniel/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2018-04-13T00:13:31Z",
  "updated_at": "2022-01-01T23:11:30Z",
  "closed_at": "2022-01-01T23:11:30Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\nEIP: 995\r\nTitle: ERC995 Token Standard (ERC20 Extension)\r\nAuthor: Prophet Daniel <prophetdaniel@ethereumclassic.org>\r\nType: Token Standard\r\nCategory: ERC\r\nCreated: 2018-04-12\r\n```\r\n\r\n## Simple Summary\r\nAn extension of the standard interface ERC https://github.com/ethereum/EIPs/issues/20 for tokens with methods that allows the execution of calls inside transfer and approvals based on ERC https://github.com/ethereum/EIPs/issues/827.\r\n\r\n## Abstract\r\nThis standard provides an augmented token transfer functionality besides legacy proven ERC20 functionality. It allows to execute calls on transfers and approvals both before and after tokens are transferred regardless if the receiving address is a contract or not.\r\n\r\n## Motivation\r\nThis extension of the ERC20 interface allows any tokens on Ethereum to be re-used by other applications: from wallets to decentralized exchanges. The ERC20 token standard is widely accepted but it only allows the transfer of value, Ethereum users are available to transfer value and data on transactions, with this extension of the ERC20 token standard they will be able to do the same with ERC20 tokens.\r\n\r\nThere are a lot of new standards being proposed in the community. The natural evolution of ERC20 standard starts with compatibility with the original standard and also add new methods, but keeping it simple at the same time, the new functions proposed are still less than 100 lines of code taking in count the documentation.\r\n\r\n### When to use each function\r\n\r\n- approve: Probably the one that you will need, maybe the only one since it allows the receiver contract to use authenticated/approved balance. The best practice is to check the allowance of the sender and then do your stuff using the `transferFrom` method.\r\n\r\n- `transfer`: There is no way to check that the balance that will be transferred is the correct one, this function is useful when a function doesn't need to check any transfer of value.\r\n\r\n- `transferFrom`: Same as `transfer`, only useful when there is no need to check the transferred amount of tokens and caller wants to spend approved balance.\r\n\r\n## Specification\r\n## Token\r\n### Methods\r\nNOTE: Callers MUST handle `false` from `returns (bool success)`. Callers MUST NOT assume that `false` is never returned!\r\n\r\n#### name - ERC20\r\nReturns the name of the token - e.g. `\"MyToken\"`.\r\n\r\nOPTIONAL - This method can be used to improve usability,\r\nbut interfaces and other contracts MUST NOT expect these values to be present.\r\n```javascript\r\nfunction name() constant returns (string name)\r\n```\r\n#### symbol - ERC20\r\nReturns the symbol of the token. E.g. `\"HIX\"`.\r\n\r\nOPTIONAL - This method can be used to improve usability,\r\nbut interfaces and other contracts MUST NOT expect these values to be present.\r\n```javascript\r\nfunction symbol() constant returns (string symbol)\r\n```\r\n#### decimals - ERC20\r\nReturns the number of decimals the token uses - e.g. `8`, means to divide the token amount by `100000000` to get its user representation.\r\n\r\nOPTIONAL - This method can be used to improve usability,\r\nbut interfaces and other contracts MUST NOT expect these values to be present.\r\n```javascript\r\nfunction decimals() constant returns (uint8 decimals)\r\n```\r\n#### totalSupply - ERC20\r\nReturns the total token supply.\r\n```javascript\r\nfunction totalSupply() constant returns (uint256 totalSupply)\r\n```\r\n#### balanceOf - ERC20\r\nReturns the account balance of another account with address `_owner`.\r\n```javascript\r\nfunction balanceOf(address _owner) constant returns (uint256 balance)\r\n```\r\n#### transfer - ERC20\r\nTransfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.\r\nThe function SHOULD `revert` if the `_from` account balance does not have enough tokens to spend.\r\n\r\nA token contract which creates new tokens SHOULD trigger a Transfer event with the `_from` address set to `0x0` when tokens are created.\r\n\r\nNote Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.\r\n```javascript\r\nfunction transfer(address _to, uint256 _value) returns (bool success)\r\n```\r\n#### transferFrom - ERC20\r\nTransfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.\r\n\r\nThe `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.\r\nThis can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.\r\nThe function SHOULD `revert` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.\r\n\r\nNote Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.\r\n```javascript\r\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success)\r\n```\r\n#### approve - ERC20\r\nAllows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.\r\n\r\nUsers SHOULD make sure to create user interfaces in such a way that they set the allowance first to `0` before setting it to another value for the same spender.\r\nTHOUGH The contract itself shouldn't enforce it, to allow backward compatibility with contracts deployed before\r\n```javascript\r\nfunction approve(address _spender, uint256 _value) returns (bool success)\r\n```\r\n#### allowance - ERC20\r\nReturns the amount which `_spender` is still allowed to withdraw from `_owner`.\r\n```javascript\r\nfunction allowance(address _owner, address _spender) constant returns (uint256 remaining)\r\n```\r\n------\r\n### ERC995 methods\r\n#### transfer - ERC995\r\nExecute two functions on `_dataContract` with the `_preData` and `_posData` parameters respectively one before and one after the `transfer`. If both functions end successfully execute the transfer of `_value` amount of tokens to address `_to` and MUST fire the `Transfer` event.\r\n\r\nThe function SHOULD `revert` if any of the two calls to `_dataContract` address fails or if `_from` account balance does not have enough tokens to spend.\r\nThe ERC20 `transfer` method is called after `_dataContract.call(_preData)` and before the `_dataContract.call(_posData)`.\r\n\r\n*Note:* The `_to` address cant be the token address itself.\r\n*Note:* Transfers of `0` values MUST be treated as normal transfers and fire the `Transfer` event.\r\n\r\n*Important Note:* Do not use this method with fallback functions that receive the value transferred as a parameter, there is no way to verify how much value was really transferred.\r\n```javascript\r\n  function transfer(\r\n    address _to,\r\n    address _dataContract,\r\n    uint256 _value,\r\n    bytes _preData,\r\n    bytes _posData\r\n  )\r\n    public onlyAnotherAddress(_to) returns (bool)\r\n  {\r\n    require(_dataContract.call(_preData));\r\n    super.transfer(_to, _value);\r\n    require(_dataContract.call(_posData));\r\n    return true;\r\n  }\r\n```\r\n#### transferFrom - ERC995\r\nExecute two functions on `_dataContract` with the `_preData` and `_posData` parameters respectively one before and one after the `transferFrom`, If both functions end successfully execute the transfer of `_value`  amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.\r\n\r\nThe `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf after executing a function.\r\nThe ERC20 `transferFrom` method is called after `_dataContract.call(_preData)` and before the `_dataContract.call(_posData)`.\r\nThis can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.\r\nThe function SHOULD `revert` if any of the two calls to `_dataContract` address fails or if the `_from` approved balance by `_from` to `msg.sender` is not enough to execute the transfer.\r\n\r\n*Note:* The `_to` address cant be the token address itself.\r\n*Note:* Transfers of `0` values MUST be treated as normal transfers and fire the `Transfer` event.\r\n\r\n*Important Note:* Do not use this method with fallback functions that receive the value transferred as a parameter, there is no way to verify how much value was really transferred.\r\n```javascript\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    address _dataContract,\r\n    uint256 _value,\r\n    bytes _preData,\r\n    bytes _posData\r\n  )\r\n    public onlyAnotherAddress(_to) returns (bool)\r\n  {\r\n    require(_dataContract.call(_preData));\r\n    super.transferFrom(_from, _to, _value);\r\n    require(_dataContract.call(_posData));\r\n    return true;\r\n  }\r\n```\r\n#### approve - ERC995\r\nExecute a function on `_dataContract` with the `_preData` and `_posData` parameters respectively one before and one after the `approve`, if both two calls to `_dataContract` address end successfully, `_spender` is allowed to withdraw from owner's account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.\r\n\r\nClients SHOULD make sure to create user interfaces in such a way that they set the allowance first to `0` before setting it to another value for the same spender.\r\nThe ERC20 `approve` method is called  after `_dataContract.call(_preData)` and before the `_dataContract.call(_posData)`.\r\nThe function SHOULD `revert` if any of the two calls to `_dataContract` address fails.\r\nTHOUGH The contract itself shouldn't enforce it, to allow backward compatibility with contracts deployed before\r\n\r\n*Note:* The `_spender` address cant be the token address itself.\r\n```javascript\r\nfunction approve(\r\n    address _spender,\r\n    address _dataContract,\r\n    uint256 _value,\r\n    bytes _preData,\r\n    bytes _posData\r\n  )\r\n    public onlyAnotherAddress(_spender) returns (bool)\r\n  {\r\n    require(_dataContract.call(_preData));\r\n    super.approve(_spender, _value);\r\n    require(_dataContract.call(_posData));\r\n    return true;\r\n  }\r\n```\r\n### Events\r\n#### Transfer - ERC20\r\nMUST trigger when tokens are transferred, including zero value transfers.\r\n```javascript\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\r\n```\r\n#### Approval - ERC20\r\nMUST trigger on any successful call to `approve(address _spender, uint256 _value)`.\r\n```javascript\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)\r\n```\r\n## Revisions\r\n2018/02/04: Initial Draft\r\n## Implementation\r\n\r\n## Copyright\r\nCopy left, copy down, copy right: sonic boom",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/995/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/995/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381047892",
    "html_url": "https://github.com/ethereum/EIPs/issues/995#issuecomment-381047892",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/995",
    "id": 381047892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTA0Nzg5Mg==",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T07:22:56Z",
    "updated_at": "2018-04-13T07:23:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why `_dataContract` argument appears is before `_value` in every function? I think it is better to add new arguments after existing ones.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381047892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381048222",
    "html_url": "https://github.com/ethereum/EIPs/issues/995#issuecomment-381048222",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/995",
    "id": 381048222,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTA0ODIyMg==",
    "user": {
      "login": "k06a",
      "id": 702124,
      "node_id": "MDQ6VXNlcjcwMjEyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/702124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k06a",
      "html_url": "https://github.com/k06a",
      "followers_url": "https://api.github.com/users/k06a/followers",
      "following_url": "https://api.github.com/users/k06a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k06a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k06a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k06a/subscriptions",
      "organizations_url": "https://api.github.com/users/k06a/orgs",
      "repos_url": "https://api.github.com/users/k06a/repos",
      "events_url": "https://api.github.com/users/k06a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k06a/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T07:24:32Z",
    "updated_at": "2018-04-13T07:24:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "What do you think about making these methods `payble` to transfer value to `_dataContract`? In which of 2 calls value should be passed? I am working on adding `payable` to ERC827 implementation: https://github.com/OpenZeppelin/zeppelin-solidity/pull/838",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381048222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381344630",
    "html_url": "https://github.com/ethereum/EIPs/issues/995#issuecomment-381344630",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/995",
    "id": 381344630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM0NDYzMA==",
    "user": {
      "login": "ProphetDaniel",
      "id": 5958020,
      "node_id": "MDQ6VXNlcjU5NTgwMjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5958020?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ProphetDaniel",
      "html_url": "https://github.com/ProphetDaniel",
      "followers_url": "https://api.github.com/users/ProphetDaniel/followers",
      "following_url": "https://api.github.com/users/ProphetDaniel/following{/other_user}",
      "gists_url": "https://api.github.com/users/ProphetDaniel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ProphetDaniel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ProphetDaniel/subscriptions",
      "organizations_url": "https://api.github.com/users/ProphetDaniel/orgs",
      "repos_url": "https://api.github.com/users/ProphetDaniel/repos",
      "events_url": "https://api.github.com/users/ProphetDaniel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ProphetDaniel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-14T17:16:14Z",
    "updated_at": "2018-04-14T17:16:14Z",
    "author_association": "NONE",
    "body": "> Why _dataContract argument appears is before _value in every function? I think it is better to add new arguments after existing ones.\r\n\r\nBecause if you try, for example, to reorder existing parameters for transfer method the following test fails:\r\n```javascript\r\n  it('should return correct balances after transfer', async function () {\r\n    await token.transfer(accounts[1], 100);\r\n    let balance0 = await token.balanceOf(accounts[0]);\r\n    assert.equal(balance0, 0);\r\n\r\n    let balance1 = await token.balanceOf(accounts[1]);\r\n    assert.equal(balance1, 100);\r\n  });\r\n```\r\n\r\nwith the additional info:\r\n```bash\r\n  1) Contract: ERC995 Token should return correct balances after transfer:\r\n     Error: Invalid number of arguments to Solidity function\r\n      at Object.InvalidNumberOfSolidityArgs (C:\\Users\\ProphetDaniel\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\errors.js:25:1)\r\n      at SolidityFunction.validateArgs (C:\\Users\\ProphetDaniel\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\function.js:74:1)\r\n      at SolidityFunction.toPayload (C:\\Users\\ProphetDaniel\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\function.js:90:1)\r\n      at SolidityFunction.sendTransaction (C:\\Users\\ProphetDaniel\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\function.js:163:1)\r\n      at SolidityFunction.execute (C:\\Users\\ProphetDaniel\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\web3\\lib\\web3\\function.js:256:1)\r\n      at C:\\Users\\ProphetDaniel\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-contract\\contract.js:204:1\r\n      at new Promise (<anonymous>)\r\n      at C:\\Users\\ProphetDaniel\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\~\\truffle-contract\\contract.js:155:1\r\n      at <anonymous>\r\n      at process._tickCallback (internal/process/next_tick.js:118:7)\r\n```\r\n\r\nIt is a weird situation were the signature of the function with extra parameters is influencing on the function with less parameters, in this case the ERC20 transfer function.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381344630/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381345045",
    "html_url": "https://github.com/ethereum/EIPs/issues/995#issuecomment-381345045",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/995",
    "id": 381345045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM0NTA0NQ==",
    "user": {
      "login": "ProphetDaniel",
      "id": 5958020,
      "node_id": "MDQ6VXNlcjU5NTgwMjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5958020?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ProphetDaniel",
      "html_url": "https://github.com/ProphetDaniel",
      "followers_url": "https://api.github.com/users/ProphetDaniel/followers",
      "following_url": "https://api.github.com/users/ProphetDaniel/following{/other_user}",
      "gists_url": "https://api.github.com/users/ProphetDaniel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ProphetDaniel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ProphetDaniel/subscriptions",
      "organizations_url": "https://api.github.com/users/ProphetDaniel/orgs",
      "repos_url": "https://api.github.com/users/ProphetDaniel/repos",
      "events_url": "https://api.github.com/users/ProphetDaniel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ProphetDaniel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-14T17:21:01Z",
    "updated_at": "2018-04-14T17:21:01Z",
    "author_association": "NONE",
    "body": "> What do you think about making these methods payble to transfer value to _dataContract? In which of 2 calls value should be passed? I am working on adding payable to ERC827 implementation: OpenZeppelin/zeppelin-solidity#838\r\n\r\n@k06a , it looks a great functionality to be added later on after the implementation is merged on Open Zeppelin. Right now I believe we should await their review of the current implementation. Later on I suggest you to open a pull request as well for ERC995.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381345045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788773859",
    "html_url": "https://github.com/ethereum/EIPs/issues/995#issuecomment-788773859",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/995",
    "id": 788773859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODc3Mzg1OQ==",
    "user": {
      "login": "jtakalai",
      "id": 16594664,
      "node_id": "MDQ6VXNlcjE2NTk0NjY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16594664?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtakalai",
      "html_url": "https://github.com/jtakalai",
      "followers_url": "https://api.github.com/users/jtakalai/followers",
      "following_url": "https://api.github.com/users/jtakalai/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtakalai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtakalai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtakalai/subscriptions",
      "organizations_url": "https://api.github.com/users/jtakalai/orgs",
      "repos_url": "https://api.github.com/users/jtakalai/repos",
      "events_url": "https://api.github.com/users/jtakalai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtakalai/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-02T09:45:18Z",
    "updated_at": "2021-03-02T09:45:18Z",
    "author_association": "NONE",
    "body": "Are there ERC995 tokens in the mainnet?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788773859/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/789000392",
    "html_url": "https://github.com/ethereum/EIPs/issues/995#issuecomment-789000392",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/995",
    "id": 789000392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTAwMDM5Mg==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-02T15:40:12Z",
    "updated_at": "2021-03-02T15:40:12Z",
    "author_association": "MEMBER",
    "body": "Seeing as how this isn't a final EIP (https://eips.ethereum.org/EIPS/eip-995) I would hope not.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/789000392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291723",
    "html_url": "https://github.com/ethereum/EIPs/issues/995#issuecomment-997291723",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/995",
    "id": 997291723,
    "node_id": "IC_kwDOAq426M47cXbL",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T22:11:00Z",
    "updated_at": "2021-12-18T22:11:00Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003634007",
    "html_url": "https://github.com/ethereum/EIPs/issues/995#issuecomment-1003634007",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/995",
    "id": 1003634007,
    "node_id": "IC_kwDOAq426M470j1X",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-01T23:11:30Z",
    "updated_at": "2022-01-01T23:11:30Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003634007/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
