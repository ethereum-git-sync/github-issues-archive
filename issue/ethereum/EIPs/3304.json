{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/3304",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/3304",
  "id": 818723339,
  "node_id": "MDU6SXNzdWU4MTg3MjMzMzk=",
  "number": 3304,
  "title": "Contract-scoped state replication for layer 2 applications and infrastructure",
  "user": {
    "login": "TimDaub",
    "id": 2758453,
    "node_id": "MDQ6VXNlcjI3NTg0NTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2758453?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TimDaub",
    "html_url": "https://github.com/TimDaub",
    "followers_url": "https://api.github.com/users/TimDaub/followers",
    "following_url": "https://api.github.com/users/TimDaub/following{/other_user}",
    "gists_url": "https://api.github.com/users/TimDaub/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TimDaub/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TimDaub/subscriptions",
    "organizations_url": "https://api.github.com/users/TimDaub/orgs",
    "repos_url": "https://api.github.com/users/TimDaub/repos",
    "events_url": "https://api.github.com/users/TimDaub/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TimDaub/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2021-03-01T10:30:42Z",
  "updated_at": "2021-11-07T02:29:02Z",
  "closed_at": "2021-11-07T02:29:02Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Hi,\r\n\r\nin numerous past projects, I have used web3 in combination with a full node to build a decentralized app. A repeated observation I've been able to make is the unavailability of a contract's current state. While web3 and other libraries make it easy to query for a particular piece of state in a contract, e.g. all owners of an ERC20 token, it's challenging getting a contract's full state. Here's what happens in most front ends right now:\r\n\r\n- JS app is loaded and the web3 provider is inserted\r\n- Hardcoded values (e.g. contract address) are used to query a third-party full node through their JSON RPC interface\r\n- Individual state values are returned to the user. Having successfully synced all necessary state, they can start interacting with the on-chain contract.\r\n\r\nBut this leads to some problems:\r\n\r\n- In case a developer is only retrieving the latest state, it can quickly turn outdated (e.g. leaving a page for > 1h open) and stop the user from interactions as all inputs will be deemed out-of-date by the contract. A developer will have to foresee this and continuously update the state block by block\r\n- Most calls to the chain are reliant on the user's internet connection. Through the usage of JSON RPC, they're additionally stateful. This can make building a reliable app difficult. Offline-first approaches seem technically difficult too.\r\n- The retrieved state is ephemeral. It could change any minute. Additionally, though, it's useless after invalidation. Why does this matter? It matters because if state would be passed on not as values but as atomic transactions (which is a technical possibility), it'd be _reusable_. In the sense that all transactions of a contract give its current value.\r\n- Testing contracts in composability scenarios is really difficult. Imagine having to build a contract that interacts with a DeFi application's state. At specific values of its state, it'd trigger an action. Since having to have control over the specific state of the contract in a particular situation (e.g. an action that only triggers when the MakerDAO DAI System goes in an emergency mode) is only inaccurately replicable by e.g. retrieving all contract's storage via `getStorage(address, i)`, testing becomes difficult too.\r\n\r\nLastly, there's to point out that having to rely on a full node additionally assumes either being happy with the full node provider's performance or either hosting a dedicated full node for a project. However, both of these approaches are rather unhappy as:\r\n\r\n- [full nodes now start to cost money](https://infura.io/pricing). Dedicated full nodes also require money. Hence, if I was to try to set up a truly decentralized application I probably wouldn't be able to without entering my credit card information somewhere.\r\n- Having to provide payment credentials additionally defeats the point of a decentralized application as it'd mean that I as the developer am responsible for keeping the application alive.\r\n\r\nLastly, there's the problem of some contracts not allowing the efficient retrieval of a particular state at all. Two years ago when [I attempted to build a fully-decentralized ERC721 wallet](https://github.com/TimDaub/ERC721-wallet) I found that for some ERC721 contracts, retrieval wasn't possible as nodes stopped processing the JSON RPC call as it was too computationally intense. I later scrapped the project as here too, only a centralized approach was possible (e.g. opensea).\r\n\r\nSo by now, it should be relatively clear that building front ends that rely on full nodes is rather difficult and can hardly be achieved just using the JSON RPC endpoints. At least not while trying to build a great user experience. So what can we do to improve the situation?\r\n\r\n## Proposal: Make contract-scoped state replication possible\r\n\r\nWhat is meant by contract-scoped state replication? To properly understand, I'd like you to free yourself of the current web3 architecture of Ethereum. What if instead of directly calling for a contract's state value through an ABI in web3.js, what if a front-end application was able to independently replicate the state of a contract by replaying all relevant transactions? How would this work?\r\n\r\nHardcoded in the frontend would be the contract's address as well as its creation transaction. From this data, a block range of transactions to replicate the contract's state would become apparent. Hence, the client would now ask the server something along the lines of:\r\n\r\n- Give me all transactions starting from block X that have had any interaction with contract C.\r\n- The server would now start streaming all those transactions to a client.\r\n- On the client, a local EVM is running that can take in these transactions. For each run transaction, the local state is persistent on the client's drive somehow.\r\n- In fact, transactions could be globally cached at the client. Transaction's content never changes and through a transaction's hash, its content can be authenticated. Hence, there could be a situation where a client e.g. already has downloaded half of all needed transactions when using e.g. 1inch as half of them are also manipulating the state of e.g. uniswap.\r\n- Finally, running the last relevant transaction, the client has successfully synched up with the tip of the chain and can now allow a user to do interactions.\r\n\r\nI understand that this model would bring its technical challenges too as for a contract with lots of transactions, syndicating all transactions and running them locally could become computationally intensive. But think about it in another way. By making atomic transactions the de-facto representation for state changes in the frontend also would allow much-improved syndication. Transaction's are topologically orderable and they're uniquely addressable. I can hence see large application's front ends talking via WebRTC and syndicating transactions through e.g. CRDTs. It would allow scaling the partial replication of state not through increasing a single full node's server capacity but likely scale linearly by adding more users (compare to seeders in Bittorrent).\r\n\r\n## So how do we get there?\r\n\r\nI'm probably not the right person to ask, unfortunately. I understand well how to write applications that use Ethereum and web3. But I'm a noob when it comes to the design and architecture of the Ethereum full node clients. I've started toying around with the EVM and I thought about building a library that would allow replication of state for a simple contract. However, I believe there's a big technical challenge in finding the transactions involved in state changes or isn't there?\r\nFrom what I understand, another contract's internal call could as well manipulate my contract's state. But full node wouldn't allow me to query for these transactions. Right?\r\n\r\nWhat's left to say is that I've looked at the [light client protocol](https://eth.wiki/concepts/light-client-protocol) and [the graph](https://thegraph.com/). But neither of these solves the above-described problems. I want something simple and I want something that is decentralized from an architectural viewpoint.\r\n\r\nAny leads? What would you recommend me looking at?\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/3304/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/787841288",
    "html_url": "https://github.com/ethereum/EIPs/issues/3304#issuecomment-787841288",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304",
    "id": 787841288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4Nzg0MTI4OA==",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-03-01T10:33:40Z",
    "updated_at": "2021-03-01T10:33:40Z",
    "author_association": "NONE",
    "body": "Since this is your first issue, we kindly remind you to check out [EIP-1](https://eips.ethereum.org/EIPS/eip-1) for guidance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/787841288/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788952362",
    "html_url": "https://github.com/ethereum/EIPs/issues/3304#issuecomment-788952362",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304",
    "id": 788952362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODk1MjM2Mg==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-02T14:34:48Z",
    "updated_at": "2021-03-02T14:34:48Z",
    "author_association": "MEMBER",
    "body": "You can achieve this by using events in your contract that record all contract calls.  However, projects that have tried this tend to run into the problem of the cost of recreating state increases with time since you need to walk through more and more blocks and transactions as time and usage progress forward.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788952362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788980831",
    "html_url": "https://github.com/ethereum/EIPs/issues/3304#issuecomment-788980831",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304",
    "id": 788980831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODk4MDgzMQ==",
    "user": {
      "login": "TimDaub",
      "id": 2758453,
      "node_id": "MDQ6VXNlcjI3NTg0NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2758453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TimDaub",
      "html_url": "https://github.com/TimDaub",
      "followers_url": "https://api.github.com/users/TimDaub/followers",
      "following_url": "https://api.github.com/users/TimDaub/following{/other_user}",
      "gists_url": "https://api.github.com/users/TimDaub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TimDaub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TimDaub/subscriptions",
      "organizations_url": "https://api.github.com/users/TimDaub/orgs",
      "repos_url": "https://api.github.com/users/TimDaub/repos",
      "events_url": "https://api.github.com/users/TimDaub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TimDaub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-02T15:13:31Z",
    "updated_at": "2021-03-02T15:19:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> You can achieve this by using events in your contract that record all contract calls.\r\n\r\nI'd consider this more of a work-around today for a project where I have control over a contract. A colleague of mine and I have worked on ERC721s in the past, where querying through events became so slow that nodes gave up while executing the RPC call [1]. But in any case, using events is not a viable option for any contract I, as a developer, am not in control of. E.g., with another project, I'd like to give users an overview of all balancer pools in a particular ecosystem. However, parts of these contracts' states don't emit events, and where I have no guarantee over them emitting events in the future either.\r\n\r\nFinally, if possible I would like to NOT rely on heavy backends as they reduce the autonomy of the system I'm building. Ideally, all logic is handled in the frontend (e.g. in a user's browser).\r\n\r\n> However, projects that have tried this tend to run into the cost of recreating state increases with time since you need to walk through more and more blocks and transactions as time and usage progress forward.\r\n\r\nI'm aware of that problem. However, I think it's one that front-end developers can address themselves once a  future Ethereum architecture has been proposed that addresses their needs. Optimistic updates, snapshotting, and other approaches come to mind readily. As I've said before too, the web is starting to evolve towards peer 2 peer too. WebRTC is here. WebTorrents exist. There are decentralized databases like OrbitDB etc. [3]. Right now, forcing heavy reliance on the RPC endpoint limits a front-end developer's exploration radius significantly. \r\n\r\nI've originally posted here out of pragmatism towards real problems as a front-end developer. I'd love to drive my ideas here further if there's interest. What do you propose as a first step towards a change @MicahZoltu? I could imagine gathering information from front-end developers in the field and showing it here.\r\n\r\n### References\r\n\r\n- 1: https://github.com/vrde/erc721-benchmark\r\n- 2: https://rugpullindex.com/\r\n- 3: https://rugpullindex.com/blog#ScalingEthereumOneTxAtATime",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788980831/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/789025175",
    "html_url": "https://github.com/ethereum/EIPs/issues/3304#issuecomment-789025175",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304",
    "id": 789025175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTAyNTE3NQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-02T16:15:29Z",
    "updated_at": "2021-03-02T16:15:29Z",
    "author_association": "MEMBER",
    "body": "Ideally most dapps move to layer 2, where they have a lot more freedom to build things how they like.  😄 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/789025175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/789028921",
    "html_url": "https://github.com/ethereum/EIPs/issues/3304#issuecomment-789028921",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304",
    "id": 789028921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTAyODkyMQ==",
    "user": {
      "login": "TimDaub",
      "id": 2758453,
      "node_id": "MDQ6VXNlcjI3NTg0NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2758453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TimDaub",
      "html_url": "https://github.com/TimDaub",
      "followers_url": "https://api.github.com/users/TimDaub/followers",
      "following_url": "https://api.github.com/users/TimDaub/following{/other_user}",
      "gists_url": "https://api.github.com/users/TimDaub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TimDaub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TimDaub/subscriptions",
      "organizations_url": "https://api.github.com/users/TimDaub/orgs",
      "repos_url": "https://api.github.com/users/TimDaub/repos",
      "events_url": "https://api.github.com/users/TimDaub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TimDaub/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-02T16:20:34Z",
    "updated_at": "2021-03-02T16:21:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> dapps move to layer 2\r\n\r\nI'm attempting to build on layer 2 too. It's just that instead of relying on general-purpose technology (which has failed me in the past, e.g. Plasma), I'm now trying to build an application-specific layer 2 solution designed around my app's use case. Hence the prompt for easier data sharing between full nodes and clients.\r\n\r\nIn any case, though, having worked on layer 2 myself with https://leapdao.org (minimum viable plasma), getting useful data from a full node wasn't exactly easy there either. So also layer 2 solutions could benefit from making L1 on-chain data more accessible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/789028921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/950248936",
    "html_url": "https://github.com/ethereum/EIPs/issues/3304#issuecomment-950248936",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304",
    "id": 950248936,
    "node_id": "IC_kwDOAq426M44o6Xo",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-10-24T02:27:12Z",
    "updated_at": "2021-10-24T02:27:12Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/950248936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962541412",
    "html_url": "https://github.com/ethereum/EIPs/issues/3304#issuecomment-962541412",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3304",
    "id": 962541412,
    "node_id": "IC_kwDOAq426M45Xzdk",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-07T02:29:01Z",
    "updated_at": "2021-11-07T02:29:01Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962541412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
