{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/5062",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/5062/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/5062/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/5062/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/5062",
  "id": 1222031539,
  "node_id": "I_kwDOAq426M5I1riz",
  "number": 5062,
  "title": "EIP-644: A standard for permission token",
  "user": {
    "login": "chiro-hiro",
    "id": 8078873,
    "node_id": "MDQ6VXNlcjgwNzg4NzM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8078873?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chiro-hiro",
    "html_url": "https://github.com/chiro-hiro",
    "followers_url": "https://api.github.com/users/chiro-hiro/followers",
    "following_url": "https://api.github.com/users/chiro-hiro/following{/other_user}",
    "gists_url": "https://api.github.com/users/chiro-hiro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chiro-hiro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chiro-hiro/subscriptions",
    "organizations_url": "https://api.github.com/users/chiro-hiro/orgs",
    "repos_url": "https://api.github.com/users/chiro-hiro/repos",
    "events_url": "https://api.github.com/users/chiro-hiro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chiro-hiro/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2022-05-01T05:44:28Z",
  "updated_at": "2023-01-19T17:22:21Z",
  "closed_at": "2023-01-19T13:50:27Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "eip: 644\r\ntitle: Permission Token Standard\r\nauthor: Chiro <chiro@orochi.network>\r\ntype: Standards Track\r\ncategory: ERC\r\nstatus: Draft\r\ncreated: 2022-01-19\r\n\r\n\r\n## Simple Summary\r\n\r\nA standard interface for permission tokens.\r\n\r\n## Abstract\r\n\r\nA new token standard that held the permission of an address in an ecosystem. A permission token can be transferred/granted/revoked by the permission owner to an grantee's address.\r\n\r\n## Motivation\r\n\r\nYou may still encounter special roles like `Owner`, `Operator`, `Manager`, and `Validator` in many existing smart contracts because people still using permissioned addresses to construct and manage them. It is difficult to audit and maintain security since these permissions are not managed centrally in a single smart contract. \r\n\r\nTo secure the communication between smart contracts, this EIP provides a straightforward, centralized, and scalable method for managing permissions.\r\n\r\n## Specification\r\n\r\n## Token\r\n\r\n### Methods\r\n\r\n**NOTES**:\r\n\r\n- The following specifications use syntax from Solidity `0.8.7` (or above)\r\n\r\n#### name\r\n\r\nReturns the name of the token - e.g. `\"OpenPermissionToken\"`.\r\n\r\nOPTIONAL - This method can be used to improve usability,\r\nbut interfaces and other contracts MUST NOT expect these values to be present.\r\n\r\n```solidity\r\nfunction name() external view returns (string memory)\r\n```\r\n\r\n#### symbol\r\n\r\nReturns the symbol of the token. E.g. `\"OPT\"`.\r\n\r\nOPTIONAL - This method can be used to improve usability,\r\nbut interfaces and other contracts MUST NOT expect these values to be present.\r\n\r\n```solidity\r\nfunction symbol() external view returns (string memory)\r\n```\r\n\r\n#### permissionOf\r\n\r\nReturns the account permission of the given `_owner` address.\r\n\r\n```solidity\r\nfunction permissionOf(address _owner) external view returns (uint256 permission)\r\n```\r\n\r\n#### transfer\r\n\r\nTransfers a subset of `_permission` permission to address `_to`, and MUST emit the `Transfer` event.\r\nThe function SHOULD `revert` if the message caller's account permission does not have the subset of the transferring permission.\r\n\r\n_Note_ Transfers of `0` permission MUST be treated as normal transfers and emit the `Transfer` event.\r\n\r\n```solidity\r\nfunction transfer(address _to, uint256 _permission) external returns (bool success)\r\n```\r\n\r\n#### approve\r\n\r\nAllows `_delegatee` to act for the permission owner's behalf, up to the `_permission` permission. If this function is called again it overwrites the current granted with `_permission`.\r\n\r\n**Note**:\r\n\r\n- `_permission` MUST be a subset of all available permission of permission owner.\r\n- `approve()` method SHOULD `revert` if granting `_permission` permission is not a subset of all available permission of permission owner.\r\n\r\n```solidity\r\nfunction approve(address _delegatee, uint256 _permission) external returns (bool success)\r\n```\r\n\r\n#### delegated\r\n\r\nReturns the subset permission of the `_owner` address were granted to `_delegatee` address.\r\n\r\n```solidity\r\nfunction delegated(address _owner, address _delegatee) external view returns (uint256 permission)\r\n```\r\n\r\n### Events\r\n\r\n#### Transfer\r\n\r\nMUST trigger when permission are transferred, including zero permission transfers.\r\n\r\nA token contract which creates new tokens SHOULD emit a `Transfer` event with the `_from` address set to `address(0x00)` when tokens are created.\r\n\r\n```solidity\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\r\n```\r\n\r\n#### Approval\r\n\r\nMUST trigger on any successful call to `approve(address _delegatee, uint256 _permission)`.\r\n\r\n```solidity\r\nevent Approval(address indexed _owner, address indexed _delegatee, uint256 _permission)\r\n```\r\n\r\n## Implementation\r\n\r\n### Storage\r\n\r\nA `mapping` is used to store 256 bits of permission of an given address:\r\n\r\n```solidity\r\nmapping (address => uint256) permissions;\r\n```\r\n\r\nEach permission MUST be defined as a power of 2, the important permission SHOULD greater than the less important one.\r\n\r\n_Note_ `0` value SHOULD use to represent none permission.\r\n\r\n```solidity\r\nuint256 constant PERMISSION_NONE = 0;\r\nuint256 constant PERMISSION_CREATE = 2**0;\r\nuint256 constant PERMISSION_SIGN = 2**1;\r\nuint256 constant PERMISSION_EXECUTE = 2**2;\r\n```\r\n\r\n_Note_ You can define roles by combining defined permissions, e.g: `uint256 constant ROLE_OPERATOR = PERMISSION_SIGN|PERMISSION_EXECUTE`.\r\n\r\n### Checking\r\n\r\nWe can check a permission of a subset permission by using `AND` operator with bitmark.\r\n\r\n```solidity\r\nif (permissionToken.permissionOf(msg.sender) & permission != permission) {\r\n    revert AccessDenied();\r\n}\r\n```\r\n\r\n### Implement\r\n\r\n`ERC-644`'s interface in `./IERC644.sol`.\r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC644 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  event Approval(address indexed _owner, address indexed _delegatee, uint256 _permission);\r\n\r\n  function transfer(address _to, uint256 _permission) external returns (bool success);\r\n\r\n  function approve(address _delegatee, uint256 _permission) external returns (bool success);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function permissionOf(address _owner) external view returns (uint256 permission);\r\n\r\n  function delegated(address _owner, address _delegatee) external view returns (uint256 permission);\r\n}\r\n```\r\n\r\nSimplest implement of Permission Token\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\nimport \"./IERC644.sol\";\r\n\r\ncontract ERC644 is IERC644 {\r\n  error AccessDenied(address actor, uint256 permission);\r\n\r\n  mapping(address => uint256) internal permissions;\r\n\r\n  mapping(address => mapping(address => uint)) internal delegations;\r\n\r\n  modifier onlyHasPermission(uint256 _permission) {\r\n    if (permissions[msg.sender] & _permission != _permission) {\r\n      revert AccessDenied(msg.sender, _permission);\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _permission\r\n  ) external override onlyHasPermission(_permission) returns (bool success) {\r\n    address owner = msg.sender;\r\n    // Clean subset of permission from owner\r\n    permissions[owner] = (permissions[owner] | _permission) ^ _permission;\r\n    // Set subset of permission to new owner\r\n    permissions[_to] = permissions[_to] | _permission;\r\n    emit Transfer(owner, _to, _permission);\r\n    return true;\r\n  }\r\n\r\n  function approve(\r\n    address _delegatee,\r\n    uint256 _permission\r\n  ) external override onlyHasPermission(_permission) returns (bool success) {\r\n    address owner = msg.sender;\r\n    delegations[owner][_delegatee] = _permission;\r\n    emit Approval(owner, _delegatee, _permission);\r\n    return true;\r\n  }\r\n\r\n  function name() external pure override returns (string memory) {\r\n    return 'OpenPermissionToken';\r\n  }\r\n\r\n  function symbol() external pure override returns (string memory) {\r\n    return 'OPT';\r\n  }\r\n\r\n  function permissionOf(address _owner) external view override returns (uint256 permission) {\r\n    return permissions[_owner];\r\n  }\r\n\r\n  function delegated(address _owner, address _delegatee) external view override returns (uint256 permission) {\r\n    // Delegated permission can't be the superset of owner's permission\r\n    return (delegations[_owner][_delegatee] | permissions[_owner]) & permissions[_owner];\r\n  }\r\n}\r\n```\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](../LICENSE.md).\r\n",
  "closed_by": {
    "login": "Pandapip1",
    "id": 45835846,
    "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
    "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Pandapip1",
    "html_url": "https://github.com/Pandapip1",
    "followers_url": "https://api.github.com/users/Pandapip1/followers",
    "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
    "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
    "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
    "repos_url": "https://api.github.com/users/Pandapip1/repos",
    "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/5062/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/5062/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1397011562",
    "html_url": "https://github.com/ethereum/EIPs/issues/5062#issuecomment-1397011562",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/5062",
    "id": 1397011562,
    "node_id": "IC_kwDOAq426M5TRLRq",
    "user": {
      "login": "Pandapip1",
      "id": 45835846,
      "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pandapip1",
      "html_url": "https://github.com/Pandapip1",
      "followers_url": "https://api.github.com/users/Pandapip1/followers",
      "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
      "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
      "repos_url": "https://api.github.com/users/Pandapip1/repos",
      "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T13:51:19Z",
    "updated_at": "2023-01-19T13:51:19Z",
    "author_association": "MEMBER",
    "body": "First: EIP numbers are chosen by editors, not by authors\r\nSecond: The new place for discussion links is https://ethereum-magicians.org/. Please create a thread there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1397011562/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1397309339",
    "html_url": "https://github.com/ethereum/EIPs/issues/5062#issuecomment-1397309339",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/5062",
    "id": 1397309339,
    "node_id": "IC_kwDOAq426M5TST-b",
    "user": {
      "login": "chiro-hiro",
      "id": 8078873,
      "node_id": "MDQ6VXNlcjgwNzg4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8078873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chiro-hiro",
      "html_url": "https://github.com/chiro-hiro",
      "followers_url": "https://api.github.com/users/chiro-hiro/followers",
      "following_url": "https://api.github.com/users/chiro-hiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/chiro-hiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chiro-hiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chiro-hiro/subscriptions",
      "organizations_url": "https://api.github.com/users/chiro-hiro/orgs",
      "repos_url": "https://api.github.com/users/chiro-hiro/repos",
      "events_url": "https://api.github.com/users/chiro-hiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chiro-hiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T17:01:35Z",
    "updated_at": "2023-01-19T17:01:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @Pandapip1 ! thank you.\r\n1/ So please let me keep the `644` since it's help people memorize permission related EIP.\r\n2/ I created a thread in 2022 https://ethereum-magicians.org/t/eip-644-a-standard-for-permission-token/9105",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1397309339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1397339339",
    "html_url": "https://github.com/ethereum/EIPs/issues/5062#issuecomment-1397339339",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/5062",
    "id": 1397339339,
    "node_id": "IC_kwDOAq426M5TSbTL",
    "user": {
      "login": "Pandapip1",
      "id": 45835846,
      "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pandapip1",
      "html_url": "https://github.com/Pandapip1",
      "followers_url": "https://api.github.com/users/Pandapip1/followers",
      "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
      "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
      "repos_url": "https://api.github.com/users/Pandapip1/repos",
      "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T17:21:53Z",
    "updated_at": "2023-01-19T17:21:53Z",
    "author_association": "MEMBER",
    "body": "Sorry, but the current consensus is that the EIP number is equal to the PR number unless manipulation is suspected, in which case a random unassigned EIP number is given at the editors' discretion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1397339339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1397339897",
    "html_url": "https://github.com/ethereum/EIPs/issues/5062#issuecomment-1397339897",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/5062",
    "id": 1397339897,
    "node_id": "IC_kwDOAq426M5TSbb5",
    "user": {
      "login": "Pandapip1",
      "id": 45835846,
      "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pandapip1",
      "html_url": "https://github.com/Pandapip1",
      "followers_url": "https://api.github.com/users/Pandapip1/followers",
      "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
      "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
      "repos_url": "https://api.github.com/users/Pandapip1/repos",
      "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-01-19T17:22:21Z",
    "updated_at": "2023-01-19T17:22:21Z",
    "author_association": "MEMBER",
    "body": "Also, if you wish to create an EIP, please read https://eips.ethereum.org/EIPS/eip-1",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1397339897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
