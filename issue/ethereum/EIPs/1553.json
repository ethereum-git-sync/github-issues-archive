{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1553",
  "id": 377285035,
  "node_id": "MDU6SXNzdWUzNzcyODUwMzU=",
  "number": 1553,
  "title": "ERC1540: Asset Token Standard",
  "user": {
    "login": "hack1t",
    "id": 6410982,
    "node_id": "MDQ6VXNlcjY0MTA5ODI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6410982?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hack1t",
    "html_url": "https://github.com/hack1t",
    "followers_url": "https://api.github.com/users/hack1t/followers",
    "following_url": "https://api.github.com/users/hack1t/following{/other_user}",
    "gists_url": "https://api.github.com/users/hack1t/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hack1t/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hack1t/subscriptions",
    "organizations_url": "https://api.github.com/users/hack1t/orgs",
    "repos_url": "https://api.github.com/users/hack1t/repos",
    "events_url": "https://api.github.com/users/hack1t/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hack1t/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2018-11-05T07:51:55Z",
  "updated_at": "2022-06-06T11:02:29Z",
  "closed_at": "2022-06-06T11:02:29Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "---\r\neip: 1540\r\ntitle: Asset Token Standard\r\nauthor: Axe Jiang <jzw@hashfuture.pro>, Yinghao Jia <jiayinghao@hashworld.pro>, Yong Ren <yongren@hashworld.pro>, Jiaqing Dong <jiaqing@hashworld.pro>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/1553\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-10-25\r\nrequires: 20\r\n---\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\nThis Asset Token Standard defines a smart contract legally representing the ownership and corresponding privileges of a real-world asset.\r\nThe Asset token corresponding to the ownership of real-world asset can be issued into Asset keys representing shares of the asset privileges. Any holders of Asset keys can collect dividends, earn income, and receive consumer services according to their shares. Asset keys can be regarded as the standard ERC20 tokens, which exist only after an Asset token is issued into keys.\r\n\r\nThis standard keeps backward compatibility with [ERC20].\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\nThis standard defines the ownership of a real-world asset as an Asset token according to the unique verifiable identification and corresponding rights agreement. The Asset token is a unique digital legal certificate for non-specific transfer objects, which could transfer on Ethereum freely. The transfer of Asset Token represents the transfer of ownership of assets in the real world. The whole process greatly reduces transaction costs, improves efficiency and realizes disintermediation.\r\nIn accordance with the general Token-based mandatory delivery (TBD) agreement, any holder with this Asset token can forcibly claim for the real-world asset from the asset keeper (assigned when the Asset token is created). The Asset token will be destructed after the real-world asset has been claimed. In addition, the Asset token can be issued into a designated number of Asset keys. After key issuance, the Asset token will be in 'locked' status, under which any operations on Asset token are not permitted. Holders of Asset keys can collect dividends, earn income, and receive consumer services of the corresponding real-world asset according to their shares.\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\n\r\nThis standard realizes the tokenization for real-world assets. In compliance with national laws and regulations, the mapping of the on-chain assets and off-chain assets is confirmed by the untampered programmable asset token generated on blockchain, which combines the unique verifiable identification and corresponding rights agreement of a real-world asset. The standard realizes the decentralized property verification for more real-world assets. This standard will endow Ethereum with greater value for the real world.\r\nThis standard promotes the conversion of primary and secondary real-world assets. The Asset token represents a kind of holistic property, any holder of the Asset token can lock the token and issue the designated number of Asset keys. The profit from the real-world asset appreciation will be distributed to the holders of Asset keys. Meanwhile, any holder of all the Asset keys can convert into the Asset token to claim for the real-world asset. Through this process, we can achieve the free conversion of primary assets and secondary assets, greatly reducing transaction costs and promoting the efficient of assets circulation.\r\nThis standard achieves intelligent management of programmable assets. This standard designs the function of Key issuance and Buyback price, applying smart contracts instead of corporate governance, shareholder vote, merger, acquisition, etc. Firstly, this standard can avoid big shareholders from doing evil. In reality, the major shareholders may encroach on the dividend income of the minority shareholders through the majority rule. On the other hand, it can also prevent small shareholders from extorting the holder who wants to collect all the keys to claim for the real asset, credit to the ‘collectAllForce’ function. In this way, the Situation described in “[property is only another name for monopoly](https://chicagounbound.uchicago.edu/cgi/viewcontent.cgi?referer=&httpsredir=1&article=12668&context=journal_articles)” will be refrained.\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\n\r\n### Asset Status Brief\r\nThere are three metrics describing the status of the Asset token.\r\nThe first one is 'valid'. The Asset token is in 'valid' status by default and will be 'invalid' once the owner explicitly executes the 'cancelContract' function, which is not reversible.\r\n\r\nThe second one is 'issued'. The Asset token is 'unissued' by default, and will be 'issued' after the owner locks the Asset token and issues the Asset keys. This status is reversible. A holder with all Asset keys can convert them into the original Asset token.\r\n\r\n### Preferred Stable Token\r\nThe contract specifies a stable token at the initialization phase by assigning the address of a preferred stable token.\r\n\r\nThe stable token will be used to distribute dividends to the Asset keys holders or to collect Asset keys forcibly at the price the owner designated at when issuing the Asset keys.\r\n\r\n### Asset File Management\r\n#### getAssetFile / setAssetFile\r\nAssetFile includes two parts, one file describing features of the real-world asset and the other containing legal documents. These two files are open to the public and can be set at the constructing phase of the smart contract or by explicitly executing 'setAssetFile' or 'setLegalFile' functions by the owner. These two operations require 'unissued' and 'valid' status.\r\n\r\n```solidity\r\nfunction initAssetFile(\r\n    string _assetFileUrl, string _assetFileHashType, string _assetFileHashValue,\r\n    string _legalFileUrl, string _legalFileHashType, string _legalFileHashValue\r\n    ) internal;\r\n\r\nfunction setAssetFileLink(string url) public onlyOwner onlyValid onlyUnissued;\r\n\r\nfunction setLegalFileLink(string url) public onlyOwner onlyValid onlyUnissued;\r\n```\r\n\r\nAssetFile: indicates the unique verifiable identification of real-world assets. Generally, AssetFile includes assets’ detailed description, photos of full angle, certification authority of value, quality, availability, etc. Different types of assets have different asset templates. [Case Link](https://hashfuture.io/static/data/Asset_Info.pdf)\r\n\r\nassetFileHashValue: indicates the digital fingerprint of the asset. According to the binary data of ‘AssetFile’, applying the ‘assetFileHashType’, generate the unique and untampered ‘assetFileHashValue’, thus realizing effective registration of Asset information consistency.\r\n\r\nLegalFile: indicates the Token-based mandatory delivery (TBD) agreement of real-world assets. This agreement publicly declares that any holder of the Asset token, that is, the owner of the real-world assets off-chain, can at any time enforce the settlement of the real-world assets described in the document ‘AssetFile’. [Case Link](https://hashfuture.io/static/data/Term.pdf)\r\n\r\nLegalFileHashValue: indicates the effective registration of the Token-based mandatory delivery (TBD) agreement. According to the binary data of ‘LegalFile’, applying the ‘legalFileHashType’, generate the untampered ‘legalFileHashValue’.\r\n\r\n### Asset Trading Management\r\nThe Asset token has an ETH-denominated price specified at initialization, with a 'tradeable' status set to false.\r\nOnly the owner can change the 'tradeable' status and set the asset price by calling the function:\r\n\r\n```solidity\r\nfunction setTradeable(bool status) public onlyOwner onlyValid onlyUnissued;\r\n\r\nfunction setAssetPrice(uint newAssetPrice) public onlyOwner onlyValid onlyUnissued;\r\n```\r\n\r\nIf 'tradeable' is set to true, anyone can acquire the ownership of the Asset token by sending ETH to a payable function:\r\n\r\n```solidity\r\nfunction buy() public payable onlyValid onlyUnissued;\r\n```\r\n\r\nThis function requires 'valid' and 'unissued' status.\r\n\r\n### Asset Ownership Management\r\nThe owner of an Asset token can transfer the ownership to another holder under 'valid' and 'unissued' status.\r\n\r\n```solidity\r\nfunction transferOwnership(address newowner) public onlyOwner onlyValid onlyUnissued;\r\n```\r\n\r\n### Asset Cancellation\r\nThe cancellation is tightly related to the 'onlyValid' modifier.\r\nAfter cancellation, the Asset token enters 'invalid' status.\r\nOnly the owner can execute the cancellation function once after the smart contract is initialized, under unissued and valid status.\r\nThis operation is not reversible.\r\n\r\n```solidity\r\nfunction cancelContract() public onlyOwner onlyValid onlyUnissued;\r\n```\r\n\r\n### Key Issuance Management\r\nThe holder of an Asset token can issue a fixed number of Asset keys, specifying a buy-back price, an initial Asset token distribution in the meantime.\r\nNote that the buy-back price is stable-token denominated.\r\n\r\n```solidity\r\nfunction issue (uint _supply, uint8 _decim, uint _price, address[] _address, uint[] _amount) public onlyValid onlyOwner onlyUnissued;\r\n```\r\n\r\nThis operation requires 'valid' and 'unissued' status and can only be executed by the owner.\r\n\r\n\r\nAfter issuing, Asset keys appear and are compatible with ERC20 standards:\r\n\r\n\r\n```solidity\r\n/**\r\n * Standard ERC 20 interface.\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n```\r\n\r\nIf a holder collects all Asset keys, he/she can convert them into the original Asset token by executing the 'convert' function:\r\n```solidity\r\nfunction convert() public onlyValid onlyIssued;\r\n```\r\nThis function requires that the Asset token is 'issued' and the executor (i.e, msg.sender) has all the Asset keys.\r\n\r\nOne can forcibly collect Asset keys from given holders by calling the 'collectAllForce' function at the buy-back price, if guaranteed that he/she has approved enough stable token to this contract.\r\nHowever, due to the gas limitation of Ethereum, he/she cannot collect all Asset keys with only one call. Hence an agent that can be trusted is needed.\r\nThe operator is such an agent who will first receive a request to collect all Asset keys, and then collect them with the stable tokens provided by the claimer.\r\n\r\n```solidity\r\nfunction collectAllForce(address[] _address) public onlyOperator;\r\n```\r\n\r\n### Asset Dividends Management\r\nIf the real-world asset gains income and the corresponding Asset token has been issued, then the dividends will be distributed to holders of Asset keys according to their shares.\r\nThe dividend is denominated by the designated stable token.\r\nTo distribute dividends, one can call the 'distributeDividend' function, if guaranteed that he/she has approved enough stable token to this contract.\r\nIn addition, due to the limitation of Ethereum, one might not be able to distribute all dividends to all holders by one call, people can call 'partialDistributeDividend' instead, which specifies the amount and corresponding holders to distribute to.\r\n\r\n```solidity\r\nfunction distributeDivident(uint amount) public;\r\n\r\nfunction partialDistributeDivident(uint amount, address[] _address) public;\r\n```\r\n\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\nThe Asset token standard expresses the uniqueness of assets, similar to the exclusive characteristics of ERC721, and promotes the mutual conversion between Asset token and Asset keys. Asset keys keep backward compatibility with ERC20.\r\n\r\nBased on the asset information documents and legal agreements, a bridge linking the real asset in the physical world and tokens in the blockchain world will be established. Compliance with the legal agreements under the laws and regulations of various countries will help holders of Asset token or keys to obtain the rights and interests of real assets appreciation and dividends in a legal and compliant manner. At the same time, Asset keys will be given the voucher of asset consumption and VIP services, which will facilitate their circulation in the real world.\r\n\r\n\r\n## Backwards Compatibility\r\n<!--All EIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EIP must explain how the author proposes to deal with these incompatibilities. EIP submissions without a sufficient backwards compatibility treatise may be rejected outright.-->\r\nAsset keys can be regarded as standard ERC20 tokens, which can only exist after the Asset token is issued.\r\n\r\n## Test Cases\r\n<!--Test cases for an implementation are mandatory for EIPs that are affecting consensus changes. Other EIPs can choose to include links to test cases if applicable.-->\r\nPlease check the link repository for the Process of Asset Tokenization test suite\r\n[Link](https://etherscan.io/address/0x565b7bd8056322f96dac28345245aead44f24ff2)\r\n\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\nThe implementation is available in the repo: link.\r\n[Link](https://etherscan.io/address/0x565b7bd8056322f96dac28345245aead44f24ff2)\r\n\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1553/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435793336",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-435793336",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 435793336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTc5MzMzNg==",
    "user": {
      "login": "Axejiang",
      "id": 19562936,
      "node_id": "MDQ6VXNlcjE5NTYyOTM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19562936?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Axejiang",
      "html_url": "https://github.com/Axejiang",
      "followers_url": "https://api.github.com/users/Axejiang/followers",
      "following_url": "https://api.github.com/users/Axejiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/Axejiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Axejiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Axejiang/subscriptions",
      "organizations_url": "https://api.github.com/users/Axejiang/orgs",
      "repos_url": "https://api.github.com/users/Axejiang/repos",
      "events_url": "https://api.github.com/users/Axejiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Axejiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T08:35:56Z",
    "updated_at": "2018-11-05T08:35:56Z",
    "author_association": "NONE",
    "body": "Feedback about this proposal is appreciated.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/435793336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436112690",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-436112690",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 436112690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjExMjY5MA==",
    "user": {
      "login": "davesag",
      "id": 387098,
      "node_id": "MDQ6VXNlcjM4NzA5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/387098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesag",
      "html_url": "https://github.com/davesag",
      "followers_url": "https://api.github.com/users/davesag/followers",
      "following_url": "https://api.github.com/users/davesag/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesag/subscriptions",
      "organizations_url": "https://api.github.com/users/davesag/orgs",
      "repos_url": "https://api.github.com/users/davesag/repos",
      "events_url": "https://api.github.com/users/davesag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T02:46:01Z",
    "updated_at": "2018-11-06T02:46:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have a number of questions about this but first I think there are some issues with the use of wording that need to be fixed.\r\n\r\nFirstly the past tense of 'split' is also just 'split' not 'splitted' which is not a word.  References to `onlySplitted` and `onlyUnplitted` need to be changed to `onlySplit` and `onlyUnsplit`.\r\n\r\nSecondly there is no such word as 'divitent'. The author means 'dividend' so functions like `distributeDivident` and `partialDistributeDivident` need to be changed to `distributeDividend` and `partialDistributeDividend` respectively.\r\n\r\n`setassetPrice` should be `setAssetPrice`.\r\n\r\nI appreciate that the author is likely not a native English speaker and this in no way implies a criticism of the author, however I do think that the whole proposal needs going over by someone with a stronger grasp of English as it's quite hard to make sense of.  I'd also like to see the Author's GitHub profile fleshed out as right now it's very anonymous. (That's just a personal preference however)\r\n\r\n> The profit from the asset appreciation will be distributed to the holders of small tokens.\r\n\r\nWhat about losses in the case where the real-world asset loses value or is destroyed?\r\n\r\nAs the 'big' token and 'small' derivative tokens are all ERC20 tokens, what happens if the tradable value of the 'big' token diverges from the underlying asset value?\r\n\r\nWhat happens if the value of the small tokens diverge to the point that they no longer sum to the value of the big token?\r\n\r\nCan a small token also be split? (Is this recursive?)\r\n\r\nWhat happens to the small tokens if the owner of the big token loses their address / keys and is thus prevented from interacting with the big token again (say due to hard drive crash or loss of hardware wallet, or some other disaster outside of the control of the owner of a small token)?\r\n\r\nWhat's to stop a fraudulent actor from splitting a big token, selling the small tokens, then just absconding with the money?\r\n\r\n> One can forcely collect small tokens from given hoders by calling the 'collectAllForce' function, guaranteed that he/she has approved this contract enough stable token to by the small tokens at the buy-back price.\r\n\r\nHow would this actually work in an implementation?\r\n\r\nHow does the big token keep track of who owns the small tokens?\r\n\r\nAs an owner of a small token, how do I know which big token my small token is part of?\r\n\r\nWhat about assets that have on-going storage costs such as whisky barrels, rare metals, or frozen concentrated orange juice? How are the on-going storage costs apportioned to the owners of the small tokens?\r\n\r\nI have many more questions but these are the first things that spring to mind when I read the proposal.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436112690/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436790063",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-436790063",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 436790063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjc5MDA2Mw==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T21:49:52Z",
    "updated_at": "2018-11-07T21:49:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@hack1t What do you think of the idea of implementing ERC1540 using an upgradeable, transparent contract as given in [ERC1538](https://github.com/ethereum/EIPs/issues/1538)? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436790063/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/437285623",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-437285623",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 437285623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzI4NTYyMw==",
    "user": {
      "login": "hack1t",
      "id": 6410982,
      "node_id": "MDQ6VXNlcjY0MTA5ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6410982?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hack1t",
      "html_url": "https://github.com/hack1t",
      "followers_url": "https://api.github.com/users/hack1t/followers",
      "following_url": "https://api.github.com/users/hack1t/following{/other_user}",
      "gists_url": "https://api.github.com/users/hack1t/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hack1t/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hack1t/subscriptions",
      "organizations_url": "https://api.github.com/users/hack1t/orgs",
      "repos_url": "https://api.github.com/users/hack1t/repos",
      "events_url": "https://api.github.com/users/hack1t/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hack1t/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-09T08:25:30Z",
    "updated_at": "2018-11-09T08:25:30Z",
    "author_association": "NONE",
    "body": "> @hack1t What do you think of the idea of implementing ERC1540 using an upgradeable, transparent contract as given in [ERC1538](https://github.com/ethereum/EIPs/issues/1538)?\r\n\r\nThat would be a nice feature if the contract is transparently upgradeable!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/437285623/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441565844",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-441565844",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 441565844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTU2NTg0NA==",
    "user": {
      "login": "apguerrera",
      "id": 10974422,
      "node_id": "MDQ6VXNlcjEwOTc0NDIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10974422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apguerrera",
      "html_url": "https://github.com/apguerrera",
      "followers_url": "https://api.github.com/users/apguerrera/followers",
      "following_url": "https://api.github.com/users/apguerrera/following{/other_user}",
      "gists_url": "https://api.github.com/users/apguerrera/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apguerrera/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apguerrera/subscriptions",
      "organizations_url": "https://api.github.com/users/apguerrera/orgs",
      "repos_url": "https://api.github.com/users/apguerrera/repos",
      "events_url": "https://api.github.com/users/apguerrera/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apguerrera/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-26T09:05:33Z",
    "updated_at": "2018-11-26T09:05:33Z",
    "author_association": "NONE",
    "body": "The reference implementation links appear to be incorrect?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441565844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441569260",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-441569260",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 441569260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTU2OTI2MA==",
    "user": {
      "login": "Axejiang",
      "id": 19562936,
      "node_id": "MDQ6VXNlcjE5NTYyOTM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19562936?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Axejiang",
      "html_url": "https://github.com/Axejiang",
      "followers_url": "https://api.github.com/users/Axejiang/followers",
      "following_url": "https://api.github.com/users/Axejiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/Axejiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Axejiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Axejiang/subscriptions",
      "organizations_url": "https://api.github.com/users/Axejiang/orgs",
      "repos_url": "https://api.github.com/users/Axejiang/repos",
      "events_url": "https://api.github.com/users/Axejiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Axejiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-26T09:17:19Z",
    "updated_at": "2018-11-26T09:17:19Z",
    "author_association": "NONE",
    "body": "> The reference implementation links appear to be incorrect?\r\n\r\nMuch thanks for your comments!\r\nThe reference implementation links just a case, defining a smart contract legally representing the ownership and corresponding privileges of a real-world asset. \r\n\r\nKey Issuance management, collectAllForce, and other functions have been described as above, the totally complete implement would be done if necessary.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441569260/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441617768",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-441617768",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 441617768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTYxNzc2OA==",
    "user": {
      "login": "Axejiang",
      "id": 19562936,
      "node_id": "MDQ6VXNlcjE5NTYyOTM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/19562936?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Axejiang",
      "html_url": "https://github.com/Axejiang",
      "followers_url": "https://api.github.com/users/Axejiang/followers",
      "following_url": "https://api.github.com/users/Axejiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/Axejiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Axejiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Axejiang/subscriptions",
      "organizations_url": "https://api.github.com/users/Axejiang/orgs",
      "repos_url": "https://api.github.com/users/Axejiang/repos",
      "events_url": "https://api.github.com/users/Axejiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Axejiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-26T12:11:16Z",
    "updated_at": "2018-11-26T12:11:16Z",
    "author_association": "NONE",
    "body": "> I have a number of questions about this but first I think there are some issues with the use of wording that need to be fixed.\r\n\r\nThank you for your kind feedback, very helpful!\r\nThe 'big' token changed into  'Asset token',\r\nThe 'small' token changed into 'Asset key',\r\nThe 'split' changed into 'issue'.\r\n\r\n> \r\n> Firstly the past tense of 'split' is also just 'split' not 'splitted' which is not a word. References to `onlySplitted` and `onlyUnplitted` need to be changed to `onlySplit` and `onlyUnsplit`.\r\n> \r\n> Secondly there is no such word as 'divitent'. The author means 'dividend' so functions like `distributeDivident` and `partialDistributeDivident` need to be changed to `distributeDividend` and `partialDistributeDividend` respectively.\r\n> \r\n> `setassetPrice` should be `setAssetPrice`.\r\n> \r\n> I appreciate that the author is likely not a native English speaker and this in no way implies a criticism of the author, however I do think that the whole proposal needs going over by someone with a stronger grasp of English as it's quite hard to make sense of. I'd also like to see the Author's GitHub profile fleshed out as right now it's very anonymous. (That's just a personal preference however)\r\n> \r\n\r\nThank you very much for your contribution. We have revised the proposal and submitted it to the native English speaker for revision and improvement. I hope to help you read and understand.\r\nAuthor's GitHub (McGrady00H, @hack1t, etc.) \r\n\r\n\r\n> > The profit from the asset appreciation will be distributed to the holders of small tokens.\r\n> \r\n> What about losses in the case where the real-world asset loses value or is destroyed?\r\n> \r\n\r\nFirst, when the assets are on the chain, we will evaluate the reliability of the assets. Second, after the assets are on the chain, the physical assets need to be mortgaged on a third-party platform, which may be the government, the bank, or other institutions in the industry; Mainly to reduce the probability of asset loss. In the event of accidental accidents, physical assets are lost or damaged, all Token\\key holders may be forced to pay or claim under the Token-based mandatory deliver（TBD) Agreement.\r\n\r\n\r\n> As the 'big' token and 'small' derivative tokens are all ERC20 tokens, what happens if the tradable value of the 'big' token diverges from the underlying asset value?\r\n> \r\n\r\nThe Asset Token ('big' token) is not ERC20, more similar to the Non-Fungible Token Standard ERC721.\r\n\r\n> What happens if the value of the small tokens diverge to the point that they no longer sum to the value of the big token?\r\n> \r\n\r\nIn the event of a fork, the chain-service provider needs to publicly declare which chain's contract assets are recognized for the first time.\r\n\r\n> Can a small token also be split? (Is this recursive?)\r\n> \r\n\r\nFor the time being, we have not considered the lock-in and split of the Asset key (small token). At present, we mainly design it into primary and secondary assets. In the future, there may be recursive asset-winding. For example, more than a dozen houses are linked together, and each house is Non-Fungible smart contract, Split the smart contract, each contract can be split into Fungible Token ERC20.\r\n\r\n\r\n> What happens to the small tokens if the owner of the big token loses their address / keys and is thus prevented from interacting with the big token again (say due to hard drive crash or loss of hardware wallet, or some other disaster outside of the control of the owner of a small token)?\r\n> \r\n\r\nIf the private key is lost, it may not be possible to provide a recovery task. However, If a holder collects all Asset keys, he/she can convert them into the original Asset token by executing the 'convert' function.\r\n\r\n\r\nThis is the first section of the reply, the next question, as soon as possible to give you a continuous reply, thank you for your guidance！",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/441617768/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/977593334",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-977593334",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 977593334,
    "node_id": "IC_kwDOAq426M46ROP2",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-24T07:11:37Z",
    "updated_at": "2021-11-24T07:11:37Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/977593334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/977652711",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-977652711",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 977652711,
    "node_id": "IC_kwDOAq426M46Rcvn",
    "user": {
      "login": "davesag",
      "id": 387098,
      "node_id": "MDQ6VXNlcjM4NzA5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/387098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davesag",
      "html_url": "https://github.com/davesag",
      "followers_url": "https://api.github.com/users/davesag/followers",
      "following_url": "https://api.github.com/users/davesag/following{/other_user}",
      "gists_url": "https://api.github.com/users/davesag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davesag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davesag/subscriptions",
      "organizations_url": "https://api.github.com/users/davesag/orgs",
      "repos_url": "https://api.github.com/users/davesag/repos",
      "events_url": "https://api.github.com/users/davesag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davesag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T08:39:48Z",
    "updated_at": "2021-11-24T08:39:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Axejiang how is progress on this spec?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/977652711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1134467292",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-1134467292",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 1134467292,
    "node_id": "IC_kwDOAq426M5Dnpjc",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-05-23T10:03:04Z",
    "updated_at": "2022-05-23T10:03:04Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1134467292/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1147324947",
    "html_url": "https://github.com/ethereum/EIPs/issues/1553#issuecomment-1147324947",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1553",
    "id": 1147324947,
    "node_id": "IC_kwDOAq426M5EYsoT",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-06-06T11:02:29Z",
    "updated_at": "2022-06-06T11:02:29Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1147324947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
