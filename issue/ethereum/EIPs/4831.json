{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/4831",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/4831/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/4831/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/4831/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/4831",
  "id": 1146999947,
  "node_id": "I_kwDOAq426M5EXdSL",
  "number": 4831,
  "title": "ERC: CallistoNFT standard",
  "user": {
    "login": "Dexaran",
    "id": 26142412,
    "node_id": "MDQ6VXNlcjI2MTQyNDEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Dexaran",
    "html_url": "https://github.com/Dexaran",
    "followers_url": "https://api.github.com/users/Dexaran/followers",
    "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
    "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
    "organizations_url": "https://api.github.com/users/Dexaran/orgs",
    "repos_url": "https://api.github.com/users/Dexaran/repos",
    "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Dexaran/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2022-02-22T14:43:36Z",
  "updated_at": "2022-07-18T18:08:46Z",
  "closed_at": "2022-02-23T04:27:11Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# ERC - CallistoNFT\r\n\r\n## Preamble\r\n\r\n```\r\nEIP: <to be assigned>\r\nTitle: Non-fungible Container Token Standard\r\nAuthor: Dexaran <dexaran@ethereumclassic.org / dexaran820@gmail.com>\r\nType: Standard\r\nCategory: ERC\r\nStatus: Draft\r\nCreated: 2022-22-02\r\n```\r\n\r\n## Simple Summary\r\n\r\nAn interface for non-fungible tokens and minor behavior logic standardisation.\r\n\r\n## Abstract\r\n\r\nThis standard allows for the implementation of a standard API for non-fungible tokens (henceforth referred to as \"NFTs\") within smart contracts. This standard introduces the following features:\r\n\r\n- **Built-in trades** - user's no longer need a 3d party markets to exchange NFTs of this standard. NFTs allow users to place \"bids\" and \"asks\" directly on desired NFT through the token contract.\r\n- **Creators fee system** - NFT creators can define a fee that will be subtracted from each built-in trade therefore monetizing their NFTs.\r\n- **NFT Content** - each NFT allows a piece of unique data to be written to it. \r\n- **User-defined content** - owner  of a NFT can record their own data to this NFT.\r\n\r\nThink of your NFTs as containers. Each container is unique. A manufacturer (creator of the token) can determine its initial properties: color, shape, put labels. If you own a container then you can place whatever you want inside it.\r\n\r\n## Motivation\r\n\r\nThis standard extends the functionality of [ERC721](https://eips.ethereum.org/EIPS/eip-721). This standard addresses the problem of reliance on third party exchanges and NFT monetization and standardizes metadata storage methods which is essential in some specific cases.\r\n\r\n1. **Security**. Giving third party exchange access to your NFT is a security risk. Every exchange is subject to hacks.\r\n2. **Monetization for NFT creators.** Currently, NFT creators sell their NFTs in most cases - this is a one-time income. Built-in trades allow content creators to develop an additional revenue stream that scales with the number of deals a particular NFT faces.\r\n3. **Metadata storage.** ERC721 introduces `tokenURI` function that suggests to store metadata off-chain. This proposal standardizes a method of on-chain metadata storing and accessing.\r\n\r\n## Specification\r\n\r\n```js\r\n\r\n/// @title CallistoNFT standard\r\n/// @dev   This is an alternative standard that provides NFT creators with additional features that ERC721 does not implement by default. This standard is NOT a set of features that extends ERC721 but a separate standard that defines alternative mechanisms. A token can be both ERC721 and CallistoNFT at the same time if it implements all functions required by both standards.\r\n\r\ninterface ICallistoNFT {\r\n\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer     (address indexed from, address indexed to, uint256 indexed tokenId);\r\n    \r\n    /// @dev This emits when transfer occurs and records \"data\" parameter of this transfer.\r\n    /// Exception: this event only triggers when an external party calls the contract\r\n    /// to transfer tokens. If there are any internal mechanisms that change ownership of tokens\r\n    /// then this event may be bypassed.\r\n    /// Data assignment may be important to document financial operations on-chain.\r\n    /// For example  this piece of data 54686973206973206D7920646F6E6174696F6E20746F204A6F65.\r\n    /// is a Hex-encoded message \"This is my donation to Joe\"\r\n    event TransferData (bytes data);\r\n    \r\n    /// @dev This emits when a new Bid is placed on an NFT.\r\n    event NewBid       (uint256 indexed tokenID, uint256 indexed bidAmount, bytes bidData);\r\n    \r\n    /// @dev This emits when a requirements for Built-In trade are met i.e.\r\n    /// a new Bid matched Ask or a new Ask matched existing Bid.\r\n    event TokenTrade   (uint256 indexed tokenID, address indexed new_owner, address indexed previous_owner, uint256 priceInWEI);\r\n    \r\n    /// @dev A structure to store NFT metadata.\r\n    struct Properties {\r\n        \r\n        // In this example properties of the given NFT are stored\r\n        // in a dynamically sized array of strings\r\n        // properties can be re-defined for any specific info\r\n        // that a particular NFT is intended to store.\r\n        \r\n        /* Properties could look like this:\r\n        bytes   bytes_property1;\r\n        bytes   bytes_property2;\r\n        address address_property3;\r\n        */\r\n        \r\n        // NFTs of this standard MUST contain \"properties\" string array in their Properties structure\r\n        // properties[0] is allocated for user-defined content.\r\n        string[] properties;\r\n    }\r\n   \r\n    /// @dev Returns a name of the token.\r\n    function name() external view returns (string memory);\r\n    \r\n    /// @dev Returns a shortened version of the token name.\r\n    function symbol() external view returns (string memory);\r\n    \r\n    /// @dev Returns the name of this standard if the contract implements all standardized functions.\r\n    //  Can be useful for some UI implementations.\r\n    function standard() external view returns (string memory);\r\n    \r\n    /// @notice Count all NFTs assigned to an owner\r\n    ///  this function is compatible with ERC721 `balanceOf`\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _who An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_who`\r\n    function balanceOf(address _who) external view returns (uint256);\r\n    \r\n    /// @notice Find the owner of an NFT\r\n    ///  this function is compatible with ERC721 `ownerOf`\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    \r\n    /// @notice Transfers the ownership of an NFT from sender address to another address.\r\n    ///  this function calls the onERC721Received on the receiver\r\n    ///  because this NFT handler function is widely adopted already.\r\n    /// @dev Throws unless `msg.sender` is the current owner of this NFT. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n    /// @param _to Recipient of the transfer\r\n    /// @param _tokenId The ID of NFT to transfer\r\n    /// @param _data Additional data with no specified format, sent in call to `_to`\r\n    /// @return Returns `true` if the transfer was successful\r\n    function transfer(address _to, uint256 _tokenId, bytes calldata _data) external returns (bool);\r\n    \r\n    /// @notice This function is optional. Transfers the ownership of an NFT from sender address to another address\r\n    ///  without notifying recipient of the transfer.\r\n    /// @dev This function may be necessary in some specific situations\r\n    ///  where it may be known that the address `_to` is designed to receive NFTs\r\n    ///  but for some reason it is not clear if it implements `INFTReceived` interface.\r\n    ///  For example during the initial token sale it is known that anyone who contributes the funds\r\n    ///  must receive an NFT in exchange.\r\n    /// @param _to Recipient of the transfer\r\n    /// @param _tokenId The ID of NFT to transfer\r\n    /// @param _data Additional data with no specified format, sent in call to `_to`\r\n    /// @return Returns `true` if the transfer was successful\r\n    function silentTransfer(address _to, uint256 _tokenId) external returns (bool);\r\n    \r\n    /// @notice Returns the value of the price specified by the owner of this NFT\r\n    ///  at this price the NFT can be sold immediately if a bid matching this price is placed.\r\n    /// @dev Returns 0 if there is no price specified by the owner of the NFT.\r\n    ///  Also price automatically resets when NFT is transferred to a new owner.\r\n    /// @param _tokenId The ID of NFT for which the price is queried\r\n    /// @return Returns the amount of WEI that must be paid for this NFT in order to buy it automatically.\r\n    function priceOf(uint256 _tokenId) external view returns (uint256);\r\n    \r\n    /// @notice Returns the value of highest placed bid for a queried NFT.\r\n    /// @dev In reference implementation a token can only have highest bid and it returns the funds\r\n    ///  to the previous bidder in case he is outbidded. There can be a more complex system of bidding\r\n    ///  but this function returns the value of highest bid in WEI. \r\n    ///  0 is returned if there are no bids for the queried NFT.\r\n    ///  Bid value can not be higher than `priceOf(_tokenId)`\r\n    /// @param _tokenId The ID of NFT for which the value of highest bid is queried.\r\n    /// @return Returns the amount of WEI that bidder wants to pay in order to acquire this NFT.\r\n    ///  The funds are deposited to the NFT contract upon bid placement.\r\n    function bidOf(uint256 _tokenId) external view returns (uint256 price, address payable bidder, uint256 timestamp);\r\n    \r\n    /// @notice Returns the metadata for a queried NFT.\r\n    /// @dev This function returns the whole `Properties` structure for given NFT.\r\n    ///  `Properties` structure can contain custom set of variables specific for a particular NFT\r\n    ///  and an array of strings called `properties`.\r\n    /// @param _tokenId The ID of NFT for which Properties structure is queried.\r\n    /// @return Returns the whole Properties structure for a given NFT. \r\n    ///  This structure contains all metadata related to this specific token.\r\n    ///  There can be another type of metadata related to a group of tokens (see Classified Extension)\r\n    function getTokenProperties(uint256 _tokenId) external view returns (Properties memory);\r\n    \r\n    /// @notice Returns a specified piece of metadata for a queried NFT.\r\n    /// @dev This function returns the value of `properties[_propertyId]`\r\n    ///  for a NFT.\r\n    ///  `properties[0]` is user-defined content. The owner of NFT can define value of `properties[0]`.\r\n    ///  `properties[0]` does not reset when the NFT is transferred form one owner to another.\r\n    ///  The new owner can overwrite the value of `properties[0]`.\r\n    /// @param _tokenId The ID of NFT for which the value of metadata chunk is queried.\r\n    /// @param _propertyId The index of queried metadata chunk in `properties[]` array.\r\n    /// @return Returns the value of properties corresponding to _propertyId index (in text format)\r\n    ///  it is recommended to store metadata in JSON format using properties.\r\n    ///  It is important that the value of this properties[_propertyId] is a chunk of metadata\r\n    ///  which is only specific for this unique NFT.\r\n    function getTokenProperty(uint256 _tokenId, uint256 _propertyId) external view returns (string memory);\r\n    \r\n    /// @notice Returns NFT metadata that is defined by the owner of the NFT.\r\n    /// @dev This function returns the value of `properties[0]` in reference implementation.\r\n    ///  It is advised to use `properties[0]` for user-defined content.\r\n    ///  In some cases an owner of NFT may have write access to multiple `properties` indexes\r\n    ///  in this case the function MUST return the concatenated value of all user-defined strings\r\n    ///  appended to each other without separators in index progression order\r\n    ///  if it is possible within the scope of that NFT contract. \"true\" value of `_all` must be returned\r\n    ///  if the function is capable of returning a full value of all user-defined content.\r\n    /// \"false\" can be returned as `_all` return variable if it was not possible\r\n    ///  to return all user-defined content. If \"false\" was returned as `_all` then\r\n    ///  only value of `properties[0]` must be returned by this function.\r\n    /// @param _tokenId The ID of NFT for which the value of metadata chunk is queried.\r\n    /// @return _content Text value of the metadata that an owner of the queried NFT assigned to it.\r\n    /// @return _all True if the function returns all metadata assigned by the owner of the NFT.\r\n    ///  False if it is not possible to return all the user-defined metadata and only value of\r\n    ///  `properties[0]` was returned.\r\n    function getUserContent(uint256 _tokenId) external view returns (string memory _content, bool _all);\r\n    \r\n    /// @notice Assigns text metadata to a NFT.\r\n    /// @dev Only an owner of the NFT can write data to that NFT.\r\n    /// @param _tokenId The ID of NFT for which the value of metadata chunk is assigned.\r\n    /// @param _content Text value that will be assigned to the specified NFT.\r\n    /// @return Returns true if metadata assignment was successful.\r\n    function setUserContent(uint256 _tokenId, string calldata _content) external returns (bool);\r\n    \r\n    /// @notice Creates an offer for a token. Only native currency can be used by default ($ETH for Ethereum Chain)\r\n    /// @dev Funds must be deposited alongside this function call.\r\n    ///  The deposit remains in the contract and can be withdrawn by the depositor.\r\n    ///  If the amount of `msg.value` is higher or equal to `priceOf(_tokenId)`\r\n    ///  then the bidder automatically becomes an owner of token with `_tokenId`\r\n    ///  and the amount of `msg.value` is transferred to the previous owner of `_tokenId`.\r\n    ///  New bid MUST be higher than the previous one in order to be placed.\r\n    /// @param _tokenId The ID of NFT for which the offer is created.\r\n    /// @param _data Metadata of the bid. Can be used for on-chain documenting of transactions\r\n    ///  or as `_data` parameter of the `transfer(...)` performed in case of successful NFT purchase.\r\n    function setBid(uint256 _tokenId, bytes calldata _data) payable external; // bid amount is defined by msg.value\r\n    \r\n    /// @notice Specifies the price at which the owner of NFT would automatically sell it\r\n    ///  to whoever offers these funds.\r\n    /// @dev The token MUST be sold at the price of highest bid if `priceOf(NFT)`\r\n    ///  and `bidOf(NFT)` are not equal.\r\n    ///  Example: Alice places `bid` = 10 ETH for NFT,\r\n    ///  owner of the NFT calls `setPrice` = 7 ETH\r\n    ///  the NFT must be sold at a price of 10 ETH.\r\n    ///  Price resets to 0 when the automated trade is executed within smart-contract.\r\n    ///  Price resets to 0 when NFT is transferred to a new owner.\r\n    ///  Price value 0 makes NFT not tradeable (within smart-contract)\r\n    ///  meaning that whatever the bid is placed for it - the NFT will not be sold.\r\n    /// @param _tokenId The ID of NFT for which the price is assigned.\r\n    /// @param _amountInWEI Amount of WEI that a bidder must pay\r\n    ///  in order to automatically acquire this NFT.\r\n    function setPrice(uint256 _tokenId, uint256 _amountInWEI) external;\r\n    \r\n    /// @notice Depositor can withdraw the amount of Bid that he placed earlier.\r\n    /// @dev By default there is no order book in reference implementation of this token standard.\r\n    ///  Therefore if the highest bid is withdrawn then the value of `bidOf(NFT)` becomes zero.\r\n    ///  If token implements order book then the value of next bid in the orderbook must become\r\n    ///  the `bidOf(NFT`.\r\n    /// @param _tokenId The ID of NFT for which the bid is withdrawn.\r\n    function withdrawBid(uint256 _tokenId) external returns (bool);\r\n}\r\n\r\n```\r\n\r\nA token designed to receive NFTs must implement the following handler function\r\n\r\n```js\r\ninterface INFTReceiver {\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The NFT smart contract calls this function on the recipient\r\n    ///  after a `transfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. Permissive fallback function MAY handle this function call\r\n    ///  on the recipients side. No return values will be provided in case of\r\n    ///  fallback function execution.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _operator The address which called `transfer` function\r\n    ///  _operator and _from are always the same address when the transfer\r\n    ///  is performed by CallistoNFT contract.\r\n    /// @param _from The address which previously owned the token\r\n    /// @param _tokenId The NFT identifier which is being transferred\r\n    /// @param _data Additional data with no specified format\r\n    /// @return ERC721 requires return value of `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    ///  This standard does not require any return values. Successful execution of the `onERC721Received` function\r\n    ///  must be considered a successful transfer handling unless the receiver `throw`s on their side.\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\r\n}\r\n```\r\n\r\n### Classified Extension\r\n\r\nCode: https://github.com/Dexaran/CallistoNFT/blob/main/Extensions/ClassifiedNFT.sol\r\n\r\nIn some cases there can be groups of NFTs that have some of their properties shared and other properties specific to each unique token. Example: Collectibles with \"rarity\" where each rarity class can have its own metadata shared across all tokens with the same rarity\r\n\r\nFor optimization reasons it can be useful to store class-specific metadata only once and then assign a reference to the Class metadata for each NFT instead of writing the metadata to each separate unit.\r\n\r\n```js\r\ninterface IClassifiedNFT is INFT {\r\n    function setClassForTokenID(uint256 _tokenID, uint256 _tokenClass) external;\r\n    function addNewTokenClass() external;\r\n    function addTokenClassProperties(uint256 _propertiesCount) external;\r\n    function modifyClassProperty(uint256 _classID, uint256 _propertyID, string memory _content) external;\r\n    function getClassProperty(uint256 _classID, uint256 _propertyID) external view returns (string memory);\r\n    function addClassProperty(uint256 _classID) external;\r\n    function getClassProperties(uint256 _classID) external view returns (string[] memory);\r\n    function getClassForTokenID(uint256 _tokenID) external view returns (uint256);\r\n    function getClassPropertiesForTokenID(uint256 _tokenID) external view returns (string[] memory);\r\n    function getClassPropertyForTokenID(uint256 _tokenID, uint256 _propertyID) external view returns (string memory);\r\n    function mintWithClass(address _to, uint256 _tokenId, uint256 _classId)  external;\r\n    function appendClassProperty(uint256 _classID, uint256 _propertyID, string memory _content) external;\r\n}\r\n```\r\n\r\nClassified Extension can also change the way of token deployment. Instead of deploying a new token contract for each new NFT it is possible to deploy the token contract just once and then allow NFT creators to add new \"classes\" to this one token contract. Each new class in the contract may represent a class of collectibles with its own metadata defined by the class creator without a need to push a new token contract to the chain.\r\n\r\nIn most cases token contracts have little to no differences from each other which means that the chain could be optimized by making tokens a \"state\" of one contract instead of multiple instances of one contract.\r\n\r\n## Rationale\r\n\r\nAs the industry develops, new problems become more apparent and new demands arise.\r\n\r\nWith wider popularisation of NFTs it became obvious that uniqueness of each certain token makes it possible to distinguish one from another off-chain and therefore users may want to express interest in one particular token that they can find with a wide variety of ways using token explorers, blockchain browsers or other custom software.\r\n\r\nIt is not possible to express a desire to BUY a NFT a user is interested in unless the NFT is placed to a marketplace or the user knows the owner of the NFT.\r\n\r\nIt is not possible to express the desire to SELL a NFT that the user owns unless it is placed to a marketplace.\r\n\r\nIf a NFT is placed to the marketplace then it may not be placed to another at the same time without external risks.\r\n\r\nToken uniqueness allows for attaching specific \"price\" to each particular unit.\r\n\r\nSometimes it is important to have some data recorded to a token in a trustless way directly through the contract.\r\n\r\nIt is also possible to give users the ability to record their own data to their owner NFTs which opens up multiple opportunities such as user authorisation based on NFT ownership. With this feature it is possible for a  user to define some \"secret\" and record it to an owned NFT opening up the opportunity for \"membership NFTs\" implementations.\r\n\r\nThis standard extends the uniqueness of NFTs by adding the functionality on top of that.\r\n\r\n## Backwards Compatibility\r\n\r\n[ERC721](https://eips.ethereum.org/EIPS/eip-721) is the most widely used NFT standard. CallistoNFT uses the same communication model as ERC721 and `onERC721Received(...)` function for transfers handling.\r\n\r\nStandards do not interfere and a token can support both at the same time.\r\n\r\n## References\r\n\r\n#### Reference implementation\r\n\r\nhttps://github.com/Dexaran/CallistoNFT/blob/main/CallistoNFT.sol\r\n\r\n#### Projects that support this standard\r\n\r\n<a list of links to token implementation projects will be added / contact author by email listed above>\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/)",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/4831/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/4831/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1048439742",
    "html_url": "https://github.com/ethereum/EIPs/issues/4831#issuecomment-1048439742",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/4831",
    "id": 1048439742,
    "node_id": "IC_kwDOAq426M4-feu-",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-02-23T04:27:11Z",
    "updated_at": "2022-02-23T04:27:11Z",
    "author_association": "MEMBER",
    "body": "Please pose ideas for future EIPs at Ethereum Magicians forum (bot linked it above).  If you are ready to create an actual EIP, you'll need to create a pull request and follow the template (see EIP-1 for details).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1048439742/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
