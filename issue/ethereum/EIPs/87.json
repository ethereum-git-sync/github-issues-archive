{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/87/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/87/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/87/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/87",
  "id": 145483896,
  "node_id": "MDU6SXNzdWUxNDU0ODM4OTY=",
  "number": 87,
  "title": "Blockchain rent: exponential rent-to-own edition",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2016-04-03T11:33:47Z",
  "updated_at": "2022-01-30T11:08:20Z",
  "closed_at": "2022-01-30T11:08:20Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "A [previous EIP](https://github.com/ethereum/EIPs/issues/35) discussed the possibility of introducing a notion of \"blockchain rent\": paying not just a one-time fee for adding storage and getting a one-time refund for removing it, but actually paying per unit time. This was met with the primary criticism that users liked the aspect of Ethereum that contracts sit on the chain forever, and once a contract is placed there is no risk of the contract suddenly disappearing due to no longer being able to afford rent.\n\nThis EIP describes a mechanism where contracts can purchase storage in a \"rent-to-own\" model, where a contract may purchase storage and pay a small fee if they clear the storage in a limited amount of time, with the fee being roughly proportional to the amount of time that the storage is used, but if a contract holds onto a storage key for a long time the storage fee reduces exponentially. Unlike traditional such agreements, however, the \"lease\" is collateralized, and so there is no possibility of storage being \"repoed\".\n### Mechanism\n\nTo see how this works, consider a model where there is one storage key, and two parameters: F, the fee for using storage, and I, the inverse per-block interest rate. A contract can write to a previously blank storage key by paying F gas (or ether; there are two versions of this scheme where one uses gas as the \"currency\" and the other uses ether), and records the current block number `B_0` into a special storage slot. Changing a non-blank storage key would take ~5,000 gas, just as now, although one may also consider a provision where if the key in question has already been changed during that block the cost goes down to 500 gas; this makes \"cheque\" mechanisms much cheaper. Emptying a storage key would refund `F * 1/e ** ((B - B_0) / I)`, where `B` is the block number at the time storage is cleared. Hence, filling a previously blank storage key would always require up-front payment equal to the cost of \"owning\" that key outright, but the excess payment is refunded when the storage is cleared.\n\nA chart of what this cost structure looks like in practice can be found here: http://vitalik.ca/files/costchart.jpg\n\n<img src=\"http://vitalik.ca/files/costchart.jpg\"></img>\n\nFor a contract storing multiple keys, the above method could be applied on a per-slot basis; however, this would be too inefficient. Hence, we provide a simpler alternative. Suppose that each contract keeps track of two values, `D` (\"deposit\"), `T` (\"last timestamp\") and `S` (\"slot count\"). Filling an unused storage key costs `F`, sets `D += F`, `S += 1` and `T = block.timestamp`. Clearing a storage key sets `D *= 1/e ** ((block.timestamp - T) / I) * (S-1) / S`, and refunds `D / S` (after reducing `D`); it then also sets`S -= 1` and `T = block.timestamp`. Effectively, rather than tracking time stored on a per-slot basis, this scheme tracks it for the entire contract, and uses a kind of average cost basis accounting to perform refunds.\n\nFor example, consider a case where one slot is filled at time 0, one slot at time I \\* 0.693 (the constant selected since `1/e ** 0.693 = 0.5`), then one slot is cleared at time I \\* 0.693 \\* 2 and one at time I \\* 0.693 \\* 4. Suppose F = 1 for simplicity. After the first slot is filled, we have D = 1, T = 0, S = 1. After the second slot is filled, we have D = 1.5, T = I \\* 0.693, S = 2. After the first slot is cleared, we have D = 0.375, T = I \\* 0.693 \\* 2, S = 1, and a refund of 0.375 is paid. After the second slot is cleared, we have D = 0, T = I \\* 0.693 \\* 4, S = 0, and a refund of 0.09375 is paid. An equivalent formulation of this would be accounting for the deposit of each slot separately, except when a slot is deleted it instead refunds an equal portion of the deposits for all slots: after the first slot is cleared, we refund 50% of the deposit for both the first and the second slot, and after the second slot is cleared we refund the remainder. If there are insertions after deletions, then deletion is proportional: if one deposit is already 60% refunded (ie. 40% remaining) while another is 20% refunded (ie. 80% remaining), then if one out of ten extant slots is cleared, the first slot receives an additional 4% refund out of its current remaining balance, and the second receives an additional 8% refund out of its current remaining balance. This kind of average cost basis accounting is likely the best that can be achieved while keeping low overhead requirements: a FIFO or LIFO scheme would require tracking additional data for each storage key.\n### Ether vs Gas\n\nF can be charged, and refunded, in either ether or gas. The arguments for both sides are as follows:\n- If F is in gas, then it is easier to set a fixed price, and not have to deal with market mechanics for determining its cost: the market mechanic is already baked into the gas limit.\n- If F is in ether, then it becomes easier to economically decouple the cost of storage and the cost of computation, as the physical costs of these two resources may vary disproportionately over time, and price-fixing between them as gas-based schemes are bound to do will necessarily introduce inefficiencies/Pareto suboptimalities.\n- If F is in ether, this creates a stable source of demand for ETH, perhaps reducing volatility.\n- If F is in gas, then there may arise opportunities for inter-temporal gas arbitrage (ie. buying storage when gas is cheap and releasing when gas is expensive); this expands the de-facto gas limit to unintended levels during peak usage time. On the other hand, this may arguably be good, as there is no hard limit on what transactional load a blockchain can technologically handle; rather, there are centralization risks and security concerns that increase steadily with increasing throughput, and so at peak time when the benefits of increasing throughput are greater we may actually _want_ a scheme that flexibly picks a higher point on the throughput/decentralization tradeoff curve.\n- If F is in gas, then any attempt to call a \"cleanup mechanism\" will need to be paired with other transactions that consume the gas that gets refunded; this makes it more difficult to benefit from refunds in practice, and so particularly reduces the incentive to clean out entire contracts via the self-destruct opcode.\n### Benefits\n\nMany uses of contracts in Ethereum actually do not need to use storage for a long time; in the extreme case, we have use cases like cheques where a storage key is filled, read, and can then be deleted all within a single block. These uses should not have to pay as much as those who fill storage up forever; blockchain rent schemes accomplish this. However, the exponential rent-to-own scheme does this in such a way that it allows those who _do_ want to own storage forever to do so.\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/87/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/87/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204949040",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-204949040",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 204949040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDk0OTA0MA==",
    "user": {
      "login": "rfikki",
      "id": 1055929,
      "node_id": "MDQ6VXNlcjEwNTU5Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1055929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rfikki",
      "html_url": "https://github.com/rfikki",
      "followers_url": "https://api.github.com/users/rfikki/followers",
      "following_url": "https://api.github.com/users/rfikki/following{/other_user}",
      "gists_url": "https://api.github.com/users/rfikki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rfikki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rfikki/subscriptions",
      "organizations_url": "https://api.github.com/users/rfikki/orgs",
      "repos_url": "https://api.github.com/users/rfikki/repos",
      "events_url": "https://api.github.com/users/rfikki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rfikki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-03T11:44:21Z",
    "updated_at": "2016-04-03T11:44:21Z",
    "author_association": "NONE",
    "body": "So, in laymen's terms what would the relationship in cost actually be of temporary rental vs. permanent storage? What is the proposed basis for coming up with the actual value proposition? How does one know the calculation makes economic sense over the long term? Is this being instituted as an alternative to the \"suicide\" option?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204949040/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204983090",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-204983090",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 204983090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDk4MzA5MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-03T14:09:07Z",
    "updated_at": "2016-04-03T14:18:27Z",
    "author_association": "MEMBER",
    "body": "> So, in laymen's terms what would the relationship in cost actually be of temporary rental vs. permanent storage? \n\nDepends on I. For example, suppose I is set to 2 years. Then, renting for 1 day would cost ~462 times less than filling and never emptying, and renting for 1 minute would cost ~665395 times less; however, these figures aren't quite adequate because each individual change to storage also still has its own gas cost that is independent of the cost of renting storage itself.\n\nAlso, for the true layman, here's a chart :)\n\n![](http://vitalik.ca/files/costchart.jpg)\n\n> What is the proposed basis for coming up with the actual value proposition?\n\nYou mean what is the basis for determining F and I? IMO I should just be fixed at some value decided by developers; ideally, F would be market-based in some way. One idea that I had was targeting a linearly growing state size, eg. 1 million storage keys + 100,000 per year, and increasing F hyperbolically as we approach that, ie. F = x if storage is empty, 2x if storage is at 50% of the maximum, 3x if it's 67%, 10x if it's 90%, etc.\n\n> Is this being instituted as an alternative to the \"suicide\" option?\n\nThis is being proposed as a replacement for the current refund mechanism (for both sstore clears and suicide).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204983090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/205329126",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-205329126",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 205329126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTMyOTEyNg==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-04T14:46:51Z",
    "updated_at": "2016-04-04T14:46:51Z",
    "author_association": "NONE",
    "body": "The advantage (and I think it's a very big one) of this proposal is its elegance and (if F is paid in gas) backwards-compatibility. For the latter, every old contract will continue to work, and at worst will become uneconomical, which is no different than synchronous calls with binary sharding.\n\nIf we could wave a magic wand and implement an ether-based scheme originally, then we have an easily-grokked use of ether. You \"harden\" ether into a contract, and when you're done with it you \"melt\" it back into ether. But getting old contracts to work in a world where store operations no longer use gas is nontrivial. Brute force method: write a cheque to the contract to pay for any store operations, cancel it after the call, and figure out some way to ensure contracts aren't tricked into paying with their own ETH. (But then what about subcalls? Does the original account write cheques to every future contract, or do we rewrite all old code to force it to write subcheques? (new code, can, obviously, specify))\n\nThe disadvantage is that old contracts without self-destruct are permanent. Blockchain spam may be expensive, but it can never be cleaned up. I believe that if this is implemented, there will be a sense that data is permanent, and therefore there will never afterwards be a successful movement to implement protocol-level state pruning, for better or worse.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/205329126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/205819323",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-205819323",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 205819323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTgxOTMyMw==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-05T13:58:41Z",
    "updated_at": "2016-04-05T13:58:41Z",
    "author_association": "NONE",
    "body": "Assuming (a) an ether-based scheme, and (b), the market-based F scheme as proposed above, I foresee a potential attack vector: A deep-pocketed attacker spams the state with large numbers of useless keys, driving up storage costs for everyone. In a gas-based scheme, all the attacker would do is expand the gas limit.\n\nWith an F scheme that adapts to changes in rates of usage (like the default miner gas formula, or heck, if the miners are allowed to vote on F in their block) this may be mitigated.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/205819323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/206127740",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-206127740",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 206127740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjEyNzc0MA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T05:42:40Z",
    "updated_at": "2016-04-06T05:42:48Z",
    "author_association": "MEMBER",
    "body": "Now that I think about it more, at least in a non-scalable context a fixed ETH-denominated fee, or at least a fixed fee that declines according to an inverse linear schedule, could potentially work well. The simple reason is that you could agree on some maximum state size (eg. 1 TB) ahead of time, and work backwards to compute the fee in such a way that the total quantity of ether maps to that amount (eg. in this case the price of \"owning\" 1 byte would be 0.1 finney, so 10 kb = 1 eth and 1 TB = 10^8 eth, which is roughly the total supply). This way, an attacker would not be able to drive up fees for anyone; it would also give an interesting value proposition to ether as you could call it \"virtual land on the world computer's hard drive\".\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/206127740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/207084254",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-207084254",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 207084254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzA4NDI1NA==",
    "user": {
      "login": "psionic81",
      "id": 238328,
      "node_id": "MDQ6VXNlcjIzODMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/238328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/psionic81",
      "html_url": "https://github.com/psionic81",
      "followers_url": "https://api.github.com/users/psionic81/followers",
      "following_url": "https://api.github.com/users/psionic81/following{/other_user}",
      "gists_url": "https://api.github.com/users/psionic81/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/psionic81/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/psionic81/subscriptions",
      "organizations_url": "https://api.github.com/users/psionic81/orgs",
      "repos_url": "https://api.github.com/users/psionic81/repos",
      "events_url": "https://api.github.com/users/psionic81/events{/privacy}",
      "received_events_url": "https://api.github.com/users/psionic81/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-07T20:57:02Z",
    "updated_at": "2016-04-07T20:57:02Z",
    "author_association": "NONE",
    "body": "y'all should really consider looking into the graph sequencing & isomorphism checks more.\n\nbreaking down a circuit diagram into components:\nhttp://www.wired.com/2015/12/outsiders-crack-a-50-year-old-math-problem/\n\nthen measure and attribute by relative \"novelty\":\nhttp://www.wired.com/2015/12/landmark-algorithm-breaks-30-year-impasse/\n\nThat would both optimize and ensure that the contracts' subcomponents were never more than a single dictionary call in the forever-long-run and getting exponentially close to this in the short to medium term. Plus any subcomponent that does stuff in the same way would be the exact same dictionary index, since it's based on graphs instead of rearrangeable evm code. The concept of \"function primitives\" comes into play (like a bridge rectifier in circuit land.)\n\nHaving a system that loses the ability to be audited on the long term because parts of it need to \"melt\" to ensure anti-spam simply means that attackers can destroy the system's coherence whenever they feel like it. Thus these DDOS tradeoffs mean censorship is easily possible.\n\nConsiderately, the data and circuit pathways are separated in the flow model I propose we implement here. I have a fundamental disagreement with losing the logic elements, ever. Maybe something snarky can be done with the data itself.\n\nI'll write up a full thesis on what would happen here in the next few weeks after I discuss the estimation functions with my crew. I understand that many are not considering this methodology, and I don't expect them to at this point.. the primary research papers were only mass broadcast in the last few months of 2015.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/207084254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/218556927",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-218556927",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 218556927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODU1NjkyNw==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-11T19:00:44Z",
    "updated_at": "2016-05-11T19:00:44Z",
    "author_association": "NONE",
    "body": "After thought, I think this is the best option so far. It's easily backwards compatible, for one. Further, I realized there are many dapps, particularly registries, where users mainly read from the chain, but do not often write. In a system where a contract could involuntarily be deleted, someone would have to pay for the free use of others.   \n\nThe big question in my mind is fixed ETH fee vs. gas. If it wasn't for the additional technical issues related to retrofitting a fixed ETH fee, I'd lean towards it more.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/218556927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/286683204",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-286683204",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 286683204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjY4MzIwNA==",
    "user": {
      "login": "tawaren",
      "id": 22982658,
      "node_id": "MDQ6VXNlcjIyOTgyNjU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/22982658?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tawaren",
      "html_url": "https://github.com/tawaren",
      "followers_url": "https://api.github.com/users/tawaren/followers",
      "following_url": "https://api.github.com/users/tawaren/following{/other_user}",
      "gists_url": "https://api.github.com/users/tawaren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tawaren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tawaren/subscriptions",
      "organizations_url": "https://api.github.com/users/tawaren/orgs",
      "repos_url": "https://api.github.com/users/tawaren/repos",
      "events_url": "https://api.github.com/users/tawaren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tawaren/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T09:14:35Z",
    "updated_at": "2017-03-15T09:14:35Z",
    "author_association": "NONE",
    "body": "I wrote a comment on #35 before I read this proposal. This one has none of the drawbacks that #35 had and I thus agree with @Smithgift that this is the best option so far if there has to be changed anything at all.\r\nSomething that was unclear to me is if the cost would be payed in ETH, who does pay it.\r\n\r\nI assume it would be the sender of the transaction and then I assume the refound would go to the sender of the current transaction too, which would incentivice to call state cleaning methods on contracts. The Drawback may be that this is in conflict with ongoing abstractions, that would allow a dynamic payment system where contracts can pay for gas instead of transaction senders, as well as introducing the possibility of attacks where a contract steels money from the transaction sender by allocating storage and then freeing the storage himself to get the ETH, so this variant would need something like a rent_limit (similar to max_gas)\r\n\r\nIf on the other hand it would be payed from the contracts balance then this incentive would not be their and it would become complicated to track balances and manage ETH, because any SSTORE could change that balance in a non-local predictable way (with non-local I mean we need to know F,S,T and can't just infer it from only knowing the current code), this would make static analysis of the ETH balance nearly impossible beside just assuming that it changes on each SSTORE.  Further it would enforce each contract to manage ETH in some way, a contract that does not plan to hold any ETH at all would be impossible and not backwards compatible at all.\r\n\r\nSo in my opinion the only options would be gas or ETH payed by the transaction sender with a rent_limit because contract paying would not be backwards compatible and would force each contract to hold ETH and makes contract that do manage ETH a lot more complicated as it already is, what would introduce new sources for bugs and exploits.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/286683204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/286767971",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-286767971",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 286767971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njc2Nzk3MQ==",
    "user": {
      "login": "Smithgift",
      "id": 10504499,
      "node_id": "MDQ6VXNlcjEwNTA0NDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10504499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Smithgift",
      "html_url": "https://github.com/Smithgift",
      "followers_url": "https://api.github.com/users/Smithgift/followers",
      "following_url": "https://api.github.com/users/Smithgift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Smithgift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Smithgift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Smithgift/subscriptions",
      "organizations_url": "https://api.github.com/users/Smithgift/orgs",
      "repos_url": "https://api.github.com/users/Smithgift/repos",
      "events_url": "https://api.github.com/users/Smithgift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Smithgift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-15T14:57:43Z",
    "updated_at": "2017-03-15T14:57:43Z",
    "author_association": "NONE",
    "body": "Last I heard, the latest rent plan was simply for storing a new key to be very expensive (in ordinary gas), thus incentivizing contracts to store more temporary data in \"landlord\" contracts, which charge rent.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/286767971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309236926",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-309236926",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 309236926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTIzNjkyNg==",
    "user": {
      "login": "amazingandyyy",
      "id": 7886068,
      "node_id": "MDQ6VXNlcjc4ODYwNjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7886068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amazingandyyy",
      "html_url": "https://github.com/amazingandyyy",
      "followers_url": "https://api.github.com/users/amazingandyyy/followers",
      "following_url": "https://api.github.com/users/amazingandyyy/following{/other_user}",
      "gists_url": "https://api.github.com/users/amazingandyyy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amazingandyyy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amazingandyyy/subscriptions",
      "organizations_url": "https://api.github.com/users/amazingandyyy/orgs",
      "repos_url": "https://api.github.com/users/amazingandyyy/repos",
      "events_url": "https://api.github.com/users/amazingandyyy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amazingandyyy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-17T20:02:25Z",
    "updated_at": "2017-06-17T20:02:25Z",
    "author_association": "NONE",
    "body": "This is really interesting. Follow up.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309236926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/343363121",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-343363121",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 343363121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzM2MzEyMQ==",
    "user": {
      "login": "jamesray1",
      "id": 16969914,
      "node_id": "MDQ6VXNlcjE2OTY5OTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16969914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesray1",
      "html_url": "https://github.com/jamesray1",
      "followers_url": "https://api.github.com/users/jamesray1/followers",
      "following_url": "https://api.github.com/users/jamesray1/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesray1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesray1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesray1/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesray1/orgs",
      "repos_url": "https://api.github.com/users/jamesray1/repos",
      "events_url": "https://api.github.com/users/jamesray1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesray1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-10T03:14:31Z",
    "updated_at": "2017-11-10T03:17:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Referenced here: https://ethresear.ch/t/the-stateless-client-concept/172.\r\n\r\nWith a stateless client concept an advantage is: \"All of the thorny questions about state storage economics that lead to the need for designs like rent (eg. https://github.com/ethereum/EIPs/issues/35 http://github.com/ethereum/EIPs/issues/872 http://github.com/ethereum/EIPs/issues/882) and even the current complex SSTORE cost/refund scheme disappear, and blockchain economics can focus purely on pricing bandwidth and computation, a much simpler problem)\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/343363121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368473894",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-368473894",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 368473894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODQ3Mzg5NA==",
    "user": {
      "login": "gitcnd",
      "id": 4301826,
      "node_id": "MDQ6VXNlcjQzMDE4MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4301826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitcnd",
      "html_url": "https://github.com/gitcnd",
      "followers_url": "https://api.github.com/users/gitcnd/followers",
      "following_url": "https://api.github.com/users/gitcnd/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitcnd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitcnd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitcnd/subscriptions",
      "organizations_url": "https://api.github.com/users/gitcnd/orgs",
      "repos_url": "https://api.github.com/users/gitcnd/repos",
      "events_url": "https://api.github.com/users/gitcnd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitcnd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-26T11:40:37Z",
    "updated_at": "2018-02-26T11:40:37Z",
    "author_association": "NONE",
    "body": "At today's storage prices, you can hold 153,846,153 average-sized transactions for $1 - or in other words, each transaction costs $0.0000000065 - and this cost is falling *Extremely* rapidly.\r\nProposing to pay rent on something that's worth $0.0000000065 which you already paid more than a million times it's worth to store in the first place is not sensible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/368473894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/370196600",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-370196600",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 370196600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDE5NjYwMA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-04T02:28:18Z",
    "updated_at": "2018-03-04T02:28:18Z",
    "author_association": "MEMBER",
    "body": "20,000 gas per 256-bits = 625 gas per byte = 640,000 gas per KB = 655,360,000 per MB\r\n1 megabyte * 36,000 nodes (replication factor) = 655,360,000 gas per 36,000 MB of disk space consumed = 18,204 gas per MB of disk space consumed\r\n1 nanoeth per gas = 0.000018204 ETH per MB\r\n850 USD per ETH = 0.0154734 USD per MB = 16 USD per GB\r\n\r\nCost of storage (AWS S3, bulk): 0.021 USD per GB per month\r\n\r\n16 USD/GB gets you ~63 years of storage before you are a net drain on the system, if you accept the numbers above as being reasonable.  While this is a bit of buffer, it certainly isn't paid a million times.  It also assumes replication factor remains at around 36,000 RF and does not grow, and gas prices do not decrease.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/370196600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013846948",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-1013846948",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 1013846948,
    "node_id": "IC_kwDOAq426M48bhOk",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-16T10:12:38Z",
    "updated_at": "2022-01-16T10:12:38Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013846948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025119705",
    "html_url": "https://github.com/ethereum/EIPs/issues/87#issuecomment-1025119705",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/87",
    "id": 1025119705,
    "node_id": "IC_kwDOAq426M49GhXZ",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-30T11:08:19Z",
    "updated_at": "2022-01-30T11:08:19Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025119705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
