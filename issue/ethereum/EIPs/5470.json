{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/5470",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/5470/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/5470/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/5470/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/5470",
  "id": 1341010200,
  "node_id": "I_kwDOAq426M5P7jEY",
  "number": 5470,
  "title": "ERC 2000: Escrow Token Standard",
  "user": {
    "login": "StartfundInc",
    "id": 111301211,
    "node_id": "U_kgDOBqJSWw",
    "avatar_url": "https://avatars.githubusercontent.com/u/111301211?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/StartfundInc",
    "html_url": "https://github.com/StartfundInc",
    "followers_url": "https://api.github.com/users/StartfundInc/followers",
    "following_url": "https://api.github.com/users/StartfundInc/following{/other_user}",
    "gists_url": "https://api.github.com/users/StartfundInc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/StartfundInc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/StartfundInc/subscriptions",
    "organizations_url": "https://api.github.com/users/StartfundInc/orgs",
    "repos_url": "https://api.github.com/users/StartfundInc/repos",
    "events_url": "https://api.github.com/users/StartfundInc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/StartfundInc/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-08-17T00:26:41Z",
  "updated_at": "2022-08-18T00:31:31Z",
  "closed_at": "2022-08-18T00:31:31Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\n\r\neip: 2000\r\ntitle: Escrow Token Standard\r\nauthor: <dev@startfund.io>\r\ntype: Standards Track\r\ncategory: ERC\r\nstatus: Draft\r\ncreated: 2022-08-16\r\n\r\n---\r\n\r\n## Simple Summary\r\n\r\nA standard interface for Escrow Token.\r\n\r\n## Abstract\r\n\r\nThe value of a token can be the total sum of the linked currencyâ€™s value. For example, in the Token issuing process, the issuer can receive money from buyers( or investors) and transfer issuing token to buyers. . If the offering process is completed, there is no issue. But buyers can change their plan, or the offering is failed(or be canceled) cause of misfitting the compliance rules or other rules. There is no way guarantee to pay back (refund) to the buyer in the on-chain network.\r\nWe have suggested this process make possible in on-chain network with a payable currency like token(ex: USDT)\r\n\r\n\r\n## Motivation\r\n\r\nA standard interface allows the payable token contract to interact with ERC-2000 interface within smart contracts.\r\n\r\nAny payable token contract call ERC-2000 interface to exchange with issuing token based on constraint built in ERC-2000 smart contract to validate transactions.\r\n\r\nNote: Refund is only available in certain conditions(ex: period, oracle value, etc) based on implementations.\r\n\r\n\r\n## Requirements\r\n\r\nExchanging tokens requires having an escrow like the standard way in the on-chain network.\r\n\r\nThe following stand interfaces should be provided on ERC-2000 interface.\r\n  - MUST support querying texted-based compliance for transactions. ex: period, max number of buyers, minimum and maximum tokens to hold, refund period, etc.\r\n  - exchange(or purchase) with success or failed return code.\r\n  - refund(or cancel the transaction) with a success or failed return code.\r\n  - withdraw when the escrow process has been a success.\r\n\r\n\r\n## Specification\r\n\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.\r\n\r\nThere are 3 contracts for the escrow process: `Buyer Contract`, `Seller Contract` and `Escrow Contract`.\r\n - Buyer Contract: Buyers will pay to an escrow account to exchange with `Seller Token`.\r\n - Seller Contract: The seller will pay to the escrow account to exchange with `Buyer Token`.\r\n - Escrow Contract: Will be created by the seller. Agent to co-operate between buyers and sellers based on constraint rules. Instead of a simple address mapped balance variable in ERC20 tokens, this balance should have (Seller, Buyer).\r\n\r\n**Every ERC-2000 compliant contract must implement the `ERC2000` interfaces**\r\n\r\n```solidity\r\npragma solidity ^0.4.20;\r\n\r\n/// @title ERC-2000 Escrow Token Standard\r\n\r\ninterface ERC2000 {\r\n\r\n    /// @notice escrow balance of owner\r\n    /// @dev assigned to the zero address are considered invalid, and this\r\n    ///   function throws for queries about the zero address.\r\n    ///   in case of escrow contract,\r\n    ///       recommend return buyer's token balance.\r\n    ///       used for backward compatibility with ERC20 standard.\r\n    /// @param\r\n    ///   - _owner: An address for whom to query the balance\r\n    /// @return amount of current escrow account balance. can be seller's token or buyer's token\r\n    function balanceOf(address account) public view returns (uint256);\r\n\r\n\r\n    /// @notice escrow balance of owner\r\n    /// @dev assigned to the zero address are considered invalid, and this\r\n    ///   function throws for queries about the zero address.\r\n    /// @param\r\n    ///   - _owner: An address for whom to query the balance\r\n    /// @return amount of current escrow account balance. First is buyer token , and seconds is seller token\r\n    function escrowBalanceOf(address account) public view returns (uint256, uint256);\r\n\r\n\r\n    /// @notice simple query to return simple description of compliance.\r\n    /// @dev must implemented in Escrow-Contract and optional for other contracts.\r\n    function escrowComplianceDescription() external view returns (string);\r\n\r\n    /// simple query to return string based on error code. if code is zero, return can be 'success'\r\n    /// @dev must implemented in Escrow-Contract and optional for other contracts.\r\n    function escrowErrorCodeDescription(uint32 _code) external view returns (string);\r\n\r\n\r\n    /// @notice deposit fund(token) into escrow account.\r\n    /// @dev\r\n    ///   - seller/buyer contract should call escrow contract's function before _transfer.\r\n    ///   - escrow contract should update (Seller, Buyer) balance.\r\n    ///   - seller can call this function to fund initial supply.\r\n    /// @param\r\n    ///   - to:\r\n    ///     In case of buyer/seller contract, must be escrow contract address.\r\n    ///     In case of escrow contract, must be user address who is triggered this transaction.\r\n    ///   - _valuePayed: payable token amount\r\n    /// @return reason code. 0 is success, otherwise is failure code.\r\n    function escrowFund(address to, uint256 amount) public returns (uint32);\r\n\r\n\r\n    /// @notice refund from escrow account.\r\n    /// @dev\r\n    ///   - seller/buyer contract should call escrow contract's function before _transfer.\r\n    ///   - escrow contract should update (Seller, Buyer) balance.\r\n    ///   - seller should not call this function.\r\n    /// @param\r\n    ///   - to:\r\n    ///     In case of buyer/seller contract, must be escrow contract address.\r\n    ///     In case of escrow contract, must be user address who is triggered this transaction.\r\n    ///   - _valuePayed: payable token amount\r\n    /// @return reason code. 0 is success, otherwise is failure code.\r\n    function escrowRefund(address to, uint256 amount) public returns (uint32);\r\n\r\n    /// @notice withdraw token from escrow account.\r\n    /// @dev\r\n    ///   - must implemented in Escrow-Contract and optional for other contracts.\r\n    ///   - buyer is only available when escrow is success, otherwise should call escrowRefund.\r\n    ///   - in case of escrow failed, seller can refund seller-token.\r\n    ///   - if escrow is success, seller and buyer can get exchanged token on their own wallet.\r\n    /// @return reason code. 0 is success, otherwise is failure code.\r\n    function escrowWithdraw() public returns (uint32);\r\n\r\n}\r\n\r\n\r\n```\r\n\r\n## Rationale\r\nThe standard proposes interfaces on top of the ERC-20 standard.\r\nEach function should include constraint check logic.\r\nIn escrow-contract, should implemented internal constraint logic such as period, maximum investors, etc.\r\nThe buyer-contract and seller-contract should not have constraint rules.\r\n\r\nLet's discuss the following functions.\r\n\r\n1. **constructor**\r\n\r\nAn escrow contract will define success/failure conditions. It means constraint rules might not be changed forever (might be changed after being created for the market exchange rate.), so it guarantees escrow policy.\r\n\r\n2. **escrowFund**\r\n\r\nThis function should run differently for buyers and sellers.\r\n\r\n[Seller]\r\n- The seller calls this function to be escrow-ready. Seller's token ownership(balance) will be transferred to escrow-contract and the escrow balance will be (Seller: amount, Buyer: 0).\r\n- The seller can call this function multiple times depending on implementation, but preferred just one time.\r\n[buyer]\r\n- When escrow is running (not successful or failed), the buyer can call this function to deposit funds into the escrow account.\r\n- The escrow balance will be (Seller: amount x exchange-rate, Buyer: amount). The Buyer: the amount will be used for the refund process.\r\n- Once it is a success, the seller's escrow balance will be (Seller: -= amount x exchange-rate, Buyer: += amount).\r\n\r\n3. **escrowRefund**\r\n\r\nThis function should be invoked by buyers only.\r\nThe buyer can call this function in the running state only. In the state of failure or success, could not be a success.\r\nThe escrow balances of seller and buyer will be updated reverse way of `escrowFund`\r\n\r\n\r\n4. **escrowWithdraw**\r\n\r\nBuyers and sellers can withdraw tokens from the escrow account to their own account.\r\nThe following processes are recommended.\r\n- Buyer can withdraw in escrow-success state only. Ownership of seller tokens can be transferred to the buyer from escrow-contract. In an escrow-failed state, the buyer should call `escrowRefund` function.\r\n- When the seller calls this function in the escrow-success state, remained seller token will be transferred to the seller, and earned buyer's token will be also transferred from escrow-account.\r\n- In the case of escrow-failed, the seller only gets a refund seller token.\r\n\r\n\r\n\r\n## Backwards Compatibility\r\n\r\nBy design ERC-2000 is fully backward compatible with ERC-20.\r\n\r\n\r\n\r\n## Test Cases & Implementations\r\n\r\n1. [Seller/Buyer Token example](https://github.com/StartfundInc/erc-refundable-token-standard/blob/main/contracts/examples/ERC20Mockup.sol)\r\n\r\n2. [Escrow contract example](https://github.com/StartfundInc/erc-refundable-token-standard/blob/main/contracts/examples/ErcEscrowAccount.sol)\r\n\r\n3. [Unit test example](https://github.com/StartfundInc/erc-refundable-token-standard/blob/main/test/escrow-test.js).\r\n\r\n## Security Considerations\r\n\r\nSince the external contract(Escrow Contract) will control seller or buyer rights, flaws within the escrow contract directly lead to the standardâ€™s unexpected behavior.\r\n\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://eips.ethereum.org/LICENSE).\r\n",
  "closed_by": {
    "login": "StartfundInc",
    "id": 111301211,
    "node_id": "U_kgDOBqJSWw",
    "avatar_url": "https://avatars.githubusercontent.com/u/111301211?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/StartfundInc",
    "html_url": "https://github.com/StartfundInc",
    "followers_url": "https://api.github.com/users/StartfundInc/followers",
    "following_url": "https://api.github.com/users/StartfundInc/following{/other_user}",
    "gists_url": "https://api.github.com/users/StartfundInc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/StartfundInc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/StartfundInc/subscriptions",
    "organizations_url": "https://api.github.com/users/StartfundInc/orgs",
    "repos_url": "https://api.github.com/users/StartfundInc/repos",
    "events_url": "https://api.github.com/users/StartfundInc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/StartfundInc/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/5470/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/5470/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1217951767",
    "html_url": "https://github.com/ethereum/EIPs/issues/5470#issuecomment-1217951767",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/5470",
    "id": 1217951767,
    "node_id": "IC_kwDOAq426M5ImHgX",
    "user": {
      "login": "xinbenlv",
      "id": 640325,
      "node_id": "MDQ6VXNlcjY0MDMyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/640325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinbenlv",
      "html_url": "https://github.com/xinbenlv",
      "followers_url": "https://api.github.com/users/xinbenlv/followers",
      "following_url": "https://api.github.com/users/xinbenlv/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinbenlv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinbenlv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinbenlv/subscriptions",
      "organizations_url": "https://api.github.com/users/xinbenlv/orgs",
      "repos_url": "https://api.github.com/users/xinbenlv/repos",
      "events_url": "https://api.github.com/users/xinbenlv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinbenlv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-17T12:35:44Z",
    "updated_at": "2022-08-17T12:36:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @StartfundInc thank you for your EIP.\r\n\r\n1. Please change ERC number from `2000` to `5470`.\r\n2. Consider use the eip-template.md in which it help you to keep up-to-date to the new editorial rules, such as some preamble fields and sections.\r\n3. Consider send as a PR rather than an issue. If it is just for starting some EIP ideas, etheruem-magician.org provide a better discussion venue. You can come back create a PR once the brainstorm settle to an idea. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1217951767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1218154144",
    "html_url": "https://github.com/ethereum/EIPs/issues/5470#issuecomment-1218154144",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/5470",
    "id": 1218154144,
    "node_id": "IC_kwDOAq426M5Im46g",
    "user": {
      "login": "StartfundInc",
      "id": 111301211,
      "node_id": "U_kgDOBqJSWw",
      "avatar_url": "https://avatars.githubusercontent.com/u/111301211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StartfundInc",
      "html_url": "https://github.com/StartfundInc",
      "followers_url": "https://api.github.com/users/StartfundInc/followers",
      "following_url": "https://api.github.com/users/StartfundInc/following{/other_user}",
      "gists_url": "https://api.github.com/users/StartfundInc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StartfundInc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StartfundInc/subscriptions",
      "organizations_url": "https://api.github.com/users/StartfundInc/orgs",
      "repos_url": "https://api.github.com/users/StartfundInc/repos",
      "events_url": "https://api.github.com/users/StartfundInc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StartfundInc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-17T15:20:24Z",
    "updated_at": "2022-08-17T15:20:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @xinbenlv \r\nI will make this topic in PR(Pull Request) and based on eip-template.md format.\r\n\r\nCan you tell me what is the naming rules for ERC?\r\nYou said use 5470, but it is issue numbering. When I make PR, How can I choose the ERC Number?\r\n\r\nThanks\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1218154144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1218375900",
    "html_url": "https://github.com/ethereum/EIPs/issues/5470#issuecomment-1218375900",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/5470",
    "id": 1218375900,
    "node_id": "IC_kwDOAq426M5InvDc",
    "user": {
      "login": "Pandapip1",
      "id": 45835846,
      "node_id": "MDQ6VXNlcjQ1ODM1ODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/45835846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pandapip1",
      "html_url": "https://github.com/Pandapip1",
      "followers_url": "https://api.github.com/users/Pandapip1/followers",
      "following_url": "https://api.github.com/users/Pandapip1/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pandapip1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pandapip1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pandapip1/subscriptions",
      "organizations_url": "https://api.github.com/users/Pandapip1/orgs",
      "repos_url": "https://api.github.com/users/Pandapip1/repos",
      "events_url": "https://api.github.com/users/Pandapip1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pandapip1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-17T18:50:50Z",
    "updated_at": "2022-08-17T18:50:50Z",
    "author_association": "MEMBER",
    "body": "> How can I choose the ERC Number?\r\n\r\nYou don't. Editors assign it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1218375900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1218398061",
    "html_url": "https://github.com/ethereum/EIPs/issues/5470#issuecomment-1218398061",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/5470",
    "id": 1218398061,
    "node_id": "IC_kwDOAq426M5In0dt",
    "user": {
      "login": "xinbenlv",
      "id": 640325,
      "node_id": "MDQ6VXNlcjY0MDMyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/640325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinbenlv",
      "html_url": "https://github.com/xinbenlv",
      "followers_url": "https://api.github.com/users/xinbenlv/followers",
      "following_url": "https://api.github.com/users/xinbenlv/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinbenlv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinbenlv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinbenlv/subscriptions",
      "organizations_url": "https://api.github.com/users/xinbenlv/orgs",
      "repos_url": "https://api.github.com/users/xinbenlv/repos",
      "events_url": "https://api.github.com/users/xinbenlv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinbenlv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-17T19:17:13Z",
    "updated_at": "2022-08-17T19:17:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Thanks @xinbenlv I will make this topic in PR(Pull Request) and based on eip-template.md format.\r\n> \r\n> Can you tell me what is the naming rules for ERC? You said use 5470, but it is issue numbering. When I make PR, How can I choose the ERC Number?\r\n> \r\n> Thanks\r\n\r\n@StartfundInc \r\nThanks for your question.\r\n\r\nTo put it simply: currently you can use github issue number which is `5470`.\r\nWe are still in discussion of other way of numbering, but that has not converge to a consensus.\r\nA existing consensus is that a new EIP proposer cannot try to snipe a \"good\" number but what number is considered a good number is up to debate. IMHO, the rule of thumb is that the value of EIP shall depend on its content, not the number, an EIP proposer shall generally be happy witch whatever number the EIP get.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1218398061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1218765945",
    "html_url": "https://github.com/ethereum/EIPs/issues/5470#issuecomment-1218765945",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/5470",
    "id": 1218765945,
    "node_id": "IC_kwDOAq426M5IpOR5",
    "user": {
      "login": "StartfundInc",
      "id": 111301211,
      "node_id": "U_kgDOBqJSWw",
      "avatar_url": "https://avatars.githubusercontent.com/u/111301211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StartfundInc",
      "html_url": "https://github.com/StartfundInc",
      "followers_url": "https://api.github.com/users/StartfundInc/followers",
      "following_url": "https://api.github.com/users/StartfundInc/following{/other_user}",
      "gists_url": "https://api.github.com/users/StartfundInc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StartfundInc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StartfundInc/subscriptions",
      "organizations_url": "https://api.github.com/users/StartfundInc/orgs",
      "repos_url": "https://api.github.com/users/StartfundInc/repos",
      "events_url": "https://api.github.com/users/StartfundInc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StartfundInc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-08-18T00:31:31Z",
    "updated_at": "2022-08-18T00:31:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@xinbenlv \r\n\r\nThanks for your reply.\r\n\r\nI will work on PR sections, and close this issue.\r\n\r\nThanks again.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1218765945/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
