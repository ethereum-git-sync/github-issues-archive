{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2802",
  "id": 660691501,
  "node_id": "MDU6SXNzdWU2NjA2OTE1MDE=",
  "number": 2802,
  "title": "Discussion: New ERC for deposit forwarding (Centralized Exchanges and Merchants)",
  "user": {
    "login": "junderw",
    "id": 11246316,
    "node_id": "MDQ6VXNlcjExMjQ2MzE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/junderw",
    "html_url": "https://github.com/junderw",
    "followers_url": "https://api.github.com/users/junderw/followers",
    "following_url": "https://api.github.com/users/junderw/following{/other_user}",
    "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
    "organizations_url": "https://api.github.com/users/junderw/orgs",
    "repos_url": "https://api.github.com/users/junderw/repos",
    "events_url": "https://api.github.com/users/junderw/events{/privacy}",
    "received_events_url": "https://api.github.com/users/junderw/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2020-07-19T08:28:11Z",
  "updated_at": "2020-08-13T05:49:08Z",
  "closed_at": "2020-08-13T05:49:08Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Edit: Please check the POC I created here: https://github.com/junderw/deposit-contract-poc\r\n\r\nThe README there is much more precise on one possible method of fulfilling this idea.\r\n\r\n---\r\n\r\nPlease let me know if this has been discussed before.\r\n\r\n# Abstract\r\n\r\nWith exchanges and merchants, accepting ETH deposits is complicated to perform securely. The Bitstamp hack shows that deposit addresses can not be hot wallets if you want any semblance of security in an emergency situation, yet having each user with one individual address requires one of two things:\r\n\r\n1. You (or your engineers) have the ability and know-how to write a smart contract and deploy it. Then create some sort of event emitting + ETH forwarding contract for each user. (Expensive, each new user costs a dollar or two)\r\n2. You have all the addresses be cold, develop your own way of securely managing tens of thousands of addresses with your cold wallet, and batch together all the value txes of your cold/deposit addresses occasionally causing spikes in the value transactions on the network waiting to get in a block.\r\n\r\nThere is a need for a standard where there is only one contract being deployed, but you can accept payments from tens of thousands of users and still differentiate.\r\n\r\n# Overall Idea\r\n\r\nThis idea will be split into two parts.\r\n\r\n1. A contract interface that wallets can use when sending money to a wallet using this ERC.\r\n2. An address format that encodes the account address along with an 8-byte identifier. (total 28 bytes)\r\n\r\n# Interface\r\n\r\n```solidity\r\ninterface DepositForwarder {\r\n    function deposit(bytes8 id) external payable returns (bool);\r\n}\r\n```\r\n\r\nA contract fulfilling this interface SHOULD emit an event that contains the `id` and the `msg.value` for proper deposit checking. A contract fulfilling this interface MUST NOT have any payable fallback/receive function. (So any pure value transactions should fail when sent to the contract). This contract SHOULD immediately foward the full value to a secure cold wallet designated at deployment time.\r\n\r\n# Address Format\r\n\r\nI personally don't care much on how the 28 bytes are encoded. Perhaps it should be just a concatenation of the 8 bytes to the 20 address bytes, since a 28 byte address is invalid anyways there is no danger in sending to a blackhole address.\r\n\r\n# Conclusion\r\n\r\nOnce this interface and address format are decided and formalized, I could help get exchanges on board once enough wallets support sending to these addresses.\r\n\r\nI could help open source a basic implementation and documentation on how to support sending to these contracts.\r\n\r\nAny thoughts and comments are appreciated.",
  "closed_by": {
    "login": "junderw",
    "id": 11246316,
    "node_id": "MDQ6VXNlcjExMjQ2MzE2",
    "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/junderw",
    "html_url": "https://github.com/junderw",
    "followers_url": "https://api.github.com/users/junderw/followers",
    "following_url": "https://api.github.com/users/junderw/following{/other_user}",
    "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
    "organizations_url": "https://api.github.com/users/junderw/orgs",
    "repos_url": "https://api.github.com/users/junderw/repos",
    "events_url": "https://api.github.com/users/junderw/events{/privacy}",
    "received_events_url": "https://api.github.com/users/junderw/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2802/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660619081",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-660619081",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 660619081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDYxOTA4MQ==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-19T09:57:55Z",
    "updated_at": "2020-07-19T09:57:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wallet support could be as simple as:\r\n\r\n> \"If the address is of this type, take the extra 8 bytes, turn them into a hex string, and place them into the following string where the 16 Ns are, and add it to the data section when sending.\"\r\n\r\n`0x3ef8e69aNNNNNNNNNNNNNNNN000000000000000000000000000000000000000000000000`\r\n\r\nWhich I think would be straightforward to implement for almost any wallet regardless of the dev's knowledge of how Ethereum works.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660619081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660624985",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-660624985",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 660624985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDYyNDk4NQ==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-19T10:50:30Z",
    "updated_at": "2020-07-19T10:50:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Note: Perhaps the 8 bytes could be 5 byte id + 3 byte checksum of the 5 byte id.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660624985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660633837",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-660633837",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 660633837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDYzMzgzNw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-19T12:06:56Z",
    "updated_at": "2020-07-19T12:06:56Z",
    "author_association": "MEMBER",
    "body": "This solution only works for ETH I believe, and since most exchanges who support ETH also support tokens, they will still need to solve the problem of receiving tokens in a different way.  If you have to solve for receiving tokens, you might as well use the same solution for tracking ETH receipts rather than having separate solutions to the problem.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660633837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660634055",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-660634055",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 660634055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDYzNDA1NQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-19T12:09:00Z",
    "updated_at": "2020-07-19T12:09:00Z",
    "author_association": "MEMBER",
    "body": "What is the motivation for making this a standard rather than just \"a good idea\"?  Interface standards are useful when you have a many-to-many relationship of people on both sides of the interface. This means you have many different contracts that implement the interface, and many tools/contracts that make calls into a variety of those implementations and need to be able to interoperate with any of them (past or future).\r\n\r\nA good example of a useful interface standard is a token interface, because there are thousands of tokens and probably just as many unique tools that benefit from being able to interop with any token (rather than just a specific token).\r\n\r\nA good example of something that has no need for a standard is ENS. There is a single ENS registry on Ethereum and there are many tools that integrate with it. There is no standard for the ENS registry, instead it is just well documented and published publicly and anyone can integrate with it by reading the docs or code for it.\r\n\r\nMy first instinct is that this is something that would perhaps better match the ENS example than the token example, but maybe I'm missing something?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660634055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660642216",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-660642216",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 660642216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDY0MjIxNg==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-19T13:14:34Z",
    "updated_at": "2020-07-19T13:14:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What is the motivation for making this a standard rather than just \"a good idea\"?\r\n\r\n> **There is a need for a standard where there is only one contract being deployed, but you can accept payments from tens of thousands of users and still differentiate.**\r\n\r\n> If you have to solve for receiving tokens, you might as well use the same solution for tracking ETH receipts rather than having separate solutions to the problem.\r\n\r\n1. Exchanges usually separate deposit addresses for separate coins (even if on the same blockchain) for various reasons, this standard is not meant to be a \"catch-all\" solution, and creating any \"single-solution\" contract that handles ETH and ERC20 will soon be replaced by a need to handle another token protocol some day.\r\n2. ERC20 as a limitation can only be transferred to an account, so as you say, a one-(invoice|user) one-account (whether it be external or contract) is unavoidable, but this ignores merchants / exchanges who only want to serve ETH, and the simplicity of this protocol.\r\n\r\nThe hurdle of \"learning to create and maintain smart contracts and pay for a new contract every time you generate a deposit address\" is a huge hurdle, and for instance, is a major reason why most exchanges and payment processors have hot wallets as deposit addresses that wait for a balance change and then create a second value tx to send the received funds somewhere rather than learn solidity etc....\r\n\r\nOn the other hand, if this standard is set, and the community can come to a consensus on a basic implementation, it could be as easy as:\r\n\r\n1. Deploy this with your (cold) address as a constructor parameter.\r\n2. Generate addresses like this (20 byte of contract address deployed in 1, 8 bytes of per-user id.)\r\n3. Watch the events of the contract and mark down any deposits from each id in your database attributable to your user(s).\r\n\r\nThe contract could be extremely simple, require deploying only one contract for the whole service (instead of one-per-user), and even if your wallet didn't support the new address protocol, tinkerers could get around it by self-decoding and creating the data field on their own (as long as their wallet supports entering the data field manually, like Ledger etc.) but tbh, supporting the new address format would be incentivised if exchanges start using it.\r\n\r\nMentioning ERC20 in the abstract may be misleading. I was using it to explain the problem, but the solution only pertains to ETH. I will remove it to lower confusion.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660642216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660646592",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-660646592",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 660646592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDY0NjU5Mg==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-19T13:51:24Z",
    "updated_at": "2020-07-19T13:51:24Z",
    "author_association": "MEMBER",
    "body": "> There is a need for a standard where there is only one contract being deployed, but you can accept payments from tens of thousands of users and still differentiate.\r\n\r\nI think you may be confusing a standard and a documented API.  ENS is used by thousands of people, yet it has no standard.  It only has a well documented API that people can interface with.\r\n\r\n> exchanges who only want to serve ETH\r\n\r\nDo such exchanges still exist in sufficient numbers to make this a compelling argument?  I don't spend much time in trading, but my vague understanding is that ERC20 tokens are traded just about everywhere ETH is traded these days.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660646592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660653914",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-660653914",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 660653914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDY1MzkxNA==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-19T14:34:27Z",
    "updated_at": "2020-07-19T14:45:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think you may be confusing a standard and a documented API.\r\n\r\nNo. A documented API would mean 1 service/contract/whatever for all exchanges and their users. (Like ENS)\r\n\r\nA standard is something like the base58check address standard in Bitcoin. We all need to communicate 20 byte pubkey/script hashes to each other, but if you're using base58check and I'm using base64 and that guy is using carrier pidgeons then an \"address\" my base64 app generates can not be read by your base58check address based app.\r\n\r\nYou wouldn't call the base58check address standard an API.\r\n\r\nIn a similar way, Exchange A and B both deploying a contract with the above interface for their deposits, and then supporting the parsing of the new address format would allow them to send ETH back and forth.\r\n\r\nThey are not using some centralized contract. The exchanges A and B are both deploying only one contract each (as compared to one-contract-per-exchange-user as is the only current way to do things without solely relying on value txes).\r\n\r\nIf my deposit-receiving contract and yours are different interfaces, then a wallet like Ledger would need to add suport for \"Depositing to Exchange A\" and \"Depositing to Exchange B\" separately... whereas if all the exchanges deployed contracts with the above interface and _standardize_ the way in which wallets (like their own hot (withdrawal) wallets and outside wallets like Ledger) interact with their depositing contract, then they won't have to go back to using value txes in order to make sure people can deposit to their exchange.\r\n\r\nI think you are confused by my explanation. I know the difference between an API and a standard. This is a standard.\r\n\r\nJust out of curiosity, how many centralized exchanges and/or merchants have you used that accept ETH? Have you ever watched the blockchain to see how they manage the funds you deposit to them?\r\n\r\nEspecially exchanges based in Japan (where almost all the ERC20 tokens are not legal yet) are using value txes to forward deposits using some sort of hot wallet app sitting on the cloud somewhere that creates a new value tx after a deposit is detected.\r\n\r\nIf this standard is adopted, exchanges no longer need to clog the blockchain with the excess gas usage. (21000 from user deposit + 21000 from their hot wallet manually forwarding via value tx, as compared to 30k-ish for a simple ETH forwarding contract with the above interface) There will also be less instances of \"Exchange A doesn't accept txes sent from Exchange B because Exchange B sends via multisig contract but Exchange A only accepts value txes as deposits\" (This is a common problem and a huge customer-support problem for exchanges)\r\n\r\n> Do such exchanges still exist in sufficient numbers to make this a compelling argument?\r\n\r\nSince almost all exchanges separate ETH wallets from any other ERC20 wallets (Mostly for security and to mitigate certain customer service issues), there is no argument against creating a standard for the ETH wallet, as it will not adversely affect their existing ERC20 wallet(s) and it will greatly decrease the amount of gas their ETH deposit system utilizes on the network by about 27% total for each exchange that adopts it. (Not to mention it simplifies the development of ETH deposit system development for new exchanges looking to list ETH)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/660653914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/664955427",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-664955427",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 664955427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDk1NTQyNw==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-28T10:13:15Z",
    "updated_at": "2020-07-28T10:13:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Extra memo: Perhaps we should also define a way for merchants to know if a `bytes8 id` has already been used...\r\n\r\nThat way maybe Ledger could generate these contracts for their users (one for each wallet) and a trustless merchant app (like BTCPayServer) could just accept the address of the contract, then automatically generate the 8 byte ids without knowing if they've used them before (they could just check via checking event logs or storage or something)...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/664955427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/670930932",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-670930932",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 670930932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDkzMDkzMg==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-08T13:45:16Z",
    "updated_at": "2020-08-08T13:45:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have created a POC repository here:\r\n\r\nhttps://github.com/junderw/deposit-contract-poc\r\n\r\nLet me know what you think.\r\n\r\n1. Exchange or Merchant creates a wallet \"A\" (Ledger or something)\r\n2. They deploy one of the contracts in my POC using address \"A\" as the constructor parameter.\r\n3. They generate a new address for each customer using the new address format shown in the POC. (This is up for discussion, I just picked a method to get the ball rolling) The first 20 bytes will be the deployed contract's address, and the last 8 bytes will be a 5 byte id of the customer with an 3 byte checksum over the previous 25 bytes.\r\n4. 5 bytes gives over 1 trillion ids for use. More than enough for any exchange or merchant.\r\n5. Now they don't need a hot wallet to accept deposits anymore, and they can use Events to detect deposits and link them to the id of which user.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/670930932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/670936354",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-670936354",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 670936354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDkzNjM1NA==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-08T14:37:17Z",
    "updated_at": "2020-08-08T14:37:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "(btw the V2 with the checksum check in the contract only adds about 0.8% increase in gas requirement.)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/670936354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673275449",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-673275449",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 673275449,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzI3NTQ0OQ==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T05:48:55Z",
    "updated_at": "2020-08-13T05:48:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Made a draft for this proposal: #2876 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673275449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673275521",
    "html_url": "https://github.com/ethereum/EIPs/issues/2802#issuecomment-673275521",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2802",
    "id": 673275521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzI3NTUyMQ==",
    "user": {
      "login": "junderw",
      "id": 11246316,
      "node_id": "MDQ6VXNlcjExMjQ2MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junderw",
      "html_url": "https://github.com/junderw",
      "followers_url": "https://api.github.com/users/junderw/followers",
      "following_url": "https://api.github.com/users/junderw/following{/other_user}",
      "gists_url": "https://api.github.com/users/junderw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junderw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
      "organizations_url": "https://api.github.com/users/junderw/orgs",
      "repos_url": "https://api.github.com/users/junderw/repos",
      "events_url": "https://api.github.com/users/junderw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junderw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T05:49:08Z",
    "updated_at": "2020-08-13T05:49:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please move discussion to the PR. Thanks.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673275521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
