{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/948/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/948/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/948/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/948",
  "id": 308367965,
  "node_id": "MDU6SXNzdWUzMDgzNjc5NjU=",
  "number": 948,
  "title": "Recurring Subscription Models are a Good Thing and should be viable on Ethereum (Merit + Architecture ERC)",
  "user": {
    "login": "owocki",
    "id": 513929,
    "node_id": "MDQ6VXNlcjUxMzkyOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/513929?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/owocki",
    "html_url": "https://github.com/owocki",
    "followers_url": "https://api.github.com/users/owocki/followers",
    "following_url": "https://api.github.com/users/owocki/following{/other_user}",
    "gists_url": "https://api.github.com/users/owocki/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/owocki/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/owocki/subscriptions",
    "organizations_url": "https://api.github.com/users/owocki/orgs",
    "repos_url": "https://api.github.com/users/owocki/repos",
    "events_url": "https://api.github.com/users/owocki/events{/privacy}",
    "received_events_url": "https://api.github.com/users/owocki/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 89,
  "created_at": "2018-03-25T17:22:19Z",
  "updated_at": "2022-01-08T15:54:48Z",
  "closed_at": "2022-01-01T23:11:38Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "I am opening this ERC as a means of discussing (a) the merits and (b) the viability of creating a standard way of managing recurring payments on the blockchain, both (1) for tokens, and (2) for Eehereum.\r\n\r\n# Merit\r\n\r\nMonthly subscriptions are a key monetization channel for legacy web, and arguably they are the most healthy monetization channel for businesses on the legacy web (especially when compared to ad/surveillance) based models.  They are arguably more healthy than a token based economic system (depending upon the vesting model of the ICO).\r\n\r\nFor these reasons, I think it's worth talking about the viability of creating a standard way to do 'subscriptions' on Ethereum.  I'm envisioning an \r\n\r\nFrom UX standpoint, it would be pretty nice if you could manage all your ethereum-based SAAS subscriptions from one service like an on-chain keychain, if privacy was respected. \r\n\r\n\r\n# Viability\r\n\r\n## Opt in every month model\r\n\r\nThis is already viable if a service were to send an email (or other notification) to a user to every month sign a transaction.  \r\n\r\nBut it creates a lot of *churn* in the subscriber base because the steps of \r\n\r\n1. sending the email.\r\n1. receiving the email\r\n1. opening the email\r\n1. signing a tx\r\n1. broadcasting the tx\r\n\r\nis a lot of friction for the user.\r\n\r\nIt is also suboptimal from a cash flow perspective from the business, because the trickle of exchange of a value to the user and revenue for the business requires each party to reaffirm their relationship every month.\r\n\r\nIn a world in which there are 100s of Ethereum based dapps, it would simply be untenable from an attention standpoint for a consumer to manage all of their subscriptions in this world.\r\n\r\n### Opt out model\r\n\r\nFor the above reasons, I think it's optimal for Ethereum to support opt out subscription models.  I am defining an *opt out subscription model* as \r\n\r\n1. User consents to having `price` worth of ETH (or tokens) withdrawn every `time_period` by `service_address`.\r\n2. The user may remove consent at any time. \r\n3. The owner of `service_address` may remove `price` worth of ETH/tokens every `time_period`.  If those tokens are available and the users consent is active and its been at least `time_period` since last withdrawal, then the tx will be successful.  If not it will `throw()`.\r\n\r\n### Case Studies\r\n\r\nTake the case study of [Adobe Creative Cloud](https://www.cnet.com/news/survey-is-adobe-creative-cloud-subscription-worth-the-price/). Prior to 2013, you had to pay $1000 for creative suite, and it was a massive barrier to entry.  Now you just pay $40 per month, and you can learn the software and continue to pay if you use it.  And Adobe can manage their cash flow over time.\r\n\r\nOr the case of Amazon Prime.  For $80 per year, one can simply (1) not have to pay shipping for their goods (2) receive a ton of benefits related to their content.    And now amazon can do revenue forecasts more accurately because they're managing a consistent voume of cash flow.\r\n\r\n![virtuous-cycle-of-the-saas-business-model-e1497454519597](https://user-images.githubusercontent.com/513929/37877929-e0eed55e-301e-11e8-8d75-5f31267d8f33.png)\r\n\r\n\r\n## Technical Viability\r\n\r\nRight now, it is not technically viable to do opt out recurring subscriptions on the blockchain.  The best workaround would be to present a user with an `approve(x)` where x = price * n, where price is the monthly price of the service and n is a number of months, and then call `transfer(x/n)` every month or so.  \r\n\r\nUntil (and if) ETH becomes a token, it would not be viable to do this at all with ETH.\r\n\r\n## Proposal.\r\n\r\nI am not at a point yet with this idea where I feel comfortable presenting an interface.  A discussion on (a) merit should precede the discussion on viability and proposal design.\r\n\r\nMy only strongly held beliefs for the 'proposal' stage of this ERC at this point is \r\n\r\n1. that subscription payments are a core piece of infrastructure for the Ethereum ecossytem and thereby should not be subject to the rent-seeking nature of any tokenized product (other than gas payments setup already active in the Ethereum protocol)\r\n1. The system should be architected such that a subscription product can be managed in a completely trustless way.  (i.e. no trusted intermediary in between the two parties).\r\n\r\nðŸ‘‹ \r\n@owocki and the @gitcoinco team.\r\n\r\n\r\n\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/948/reactions",
    "total_count": 142,
    "+1": 97,
    "-1": 0,
    "laugh": 0,
    "hooray": 12,
    "confused": 0,
    "heart": 33,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/948/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375994242",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-375994242",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 375994242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTk5NDI0Mg==",
    "user": {
      "login": "djosey",
      "id": 9030566,
      "node_id": "MDQ6VXNlcjkwMzA1NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9030566?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djosey",
      "html_url": "https://github.com/djosey",
      "followers_url": "https://api.github.com/users/djosey/followers",
      "following_url": "https://api.github.com/users/djosey/following{/other_user}",
      "gists_url": "https://api.github.com/users/djosey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djosey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djosey/subscriptions",
      "organizations_url": "https://api.github.com/users/djosey/orgs",
      "repos_url": "https://api.github.com/users/djosey/repos",
      "events_url": "https://api.github.com/users/djosey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djosey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-25T18:56:54Z",
    "updated_at": "2018-03-25T18:56:54Z",
    "author_association": "NONE",
    "body": "I like this. SAAS subscriptions aren't usually just a binary thing where they're just either active or not -- you might pick a service level or price point or number of users or whatever options to configure the sub & maybe that's done in the service's traditional web application.  But it seems like if you're basically signing a contract, the various terms beyond whether the sub is active/inactive as well as pricing details etc should be somehow linked to this abstraction for the purpose of recording what the user signs for. So, to break it down, it seems to me like you could have terms parameters(which could be adjusted potentially with implications on payment), payment calculation, and a signature working together on this. Although for an MVP, would probably be good to just focus on as though the terms are just binary -- user is subscribed, user is unsubscribed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375994242/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375995928",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-375995928",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 375995928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTk5NTkyOA==",
    "user": {
      "login": "jrmoreau",
      "id": 1614127,
      "node_id": "MDQ6VXNlcjE2MTQxMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1614127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrmoreau",
      "html_url": "https://github.com/jrmoreau",
      "followers_url": "https://api.github.com/users/jrmoreau/followers",
      "following_url": "https://api.github.com/users/jrmoreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrmoreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrmoreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrmoreau/subscriptions",
      "organizations_url": "https://api.github.com/users/jrmoreau/orgs",
      "repos_url": "https://api.github.com/users/jrmoreau/repos",
      "events_url": "https://api.github.com/users/jrmoreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrmoreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-25T19:20:50Z",
    "updated_at": "2018-03-25T19:20:50Z",
    "author_association": "NONE",
    "body": "Do you feel you'd want to make sure the user signed a transaction associated with the subscription every time a payment was due? This is basically like a double opt-in, which is better for the consumer. If they don't approve/sign the transaction requesting, the service or product does not go to them. Out-out by default?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375995928/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376000451",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376000451",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376000451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjAwMDQ1MQ==",
    "user": {
      "login": "eshon",
      "id": 1017762,
      "node_id": "MDQ6VXNlcjEwMTc3NjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1017762?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eshon",
      "html_url": "https://github.com/eshon",
      "followers_url": "https://api.github.com/users/eshon/followers",
      "following_url": "https://api.github.com/users/eshon/following{/other_user}",
      "gists_url": "https://api.github.com/users/eshon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eshon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eshon/subscriptions",
      "organizations_url": "https://api.github.com/users/eshon/orgs",
      "repos_url": "https://api.github.com/users/eshon/repos",
      "events_url": "https://api.github.com/users/eshon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eshon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-25T20:23:32Z",
    "updated_at": "2018-03-25T20:23:32Z",
    "author_association": "NONE",
    "body": "Maybe this was already in the plan but yeah it'd be nice ux to have a subscription registry service for all your subscriptions (with updates aggregated in 1 sweep / notification / single monthly or annual transaction by the user then auto-paid to each service). Might be more of a dapp tho like http://scroogeup.com or a budgeting app or advanced wallet but maybe it could be an ERC.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376000451/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376013593",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376013593",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376013593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjAxMzU5Mw==",
    "user": {
      "login": "ptrwtts",
      "id": 497330,
      "node_id": "MDQ6VXNlcjQ5NzMzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/497330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptrwtts",
      "html_url": "https://github.com/ptrwtts",
      "followers_url": "https://api.github.com/users/ptrwtts/followers",
      "following_url": "https://api.github.com/users/ptrwtts/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptrwtts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptrwtts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptrwtts/subscriptions",
      "organizations_url": "https://api.github.com/users/ptrwtts/orgs",
      "repos_url": "https://api.github.com/users/ptrwtts/repos",
      "events_url": "https://api.github.com/users/ptrwtts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptrwtts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-25T23:48:15Z",
    "updated_at": "2018-03-25T23:48:15Z",
    "author_association": "NONE",
    "body": "For the case of tokens, couldn't you do something similar to 0x, where you give an unlimited allowance to a smart contract which has clearly bounded functionality (to only allow withdrawals of amounts you approve, on a certain interval)?\r\n\r\n- Service deploys a smart contract that can withdraw tokens from users (or even better, it's a shared contract for all subscriptions). The contract could be audited to see that it will only withdraw amounts that the user approves\r\n- The user \"approves\" the contract for an unlimited allowance\r\n- The user calls the createSubscription() function, allowing `price` tokens to be withdrawn from them every `time_period` by `service_address`, until they cancel\r\n- Every month, the `service_address` calls withdrawSubscription(), which uses transferFrom() to collect the tokens that have been authorized\r\n\r\nThis would allow the user to authorize an ongoing subscription with one-time setup, and no need to escrow funds. Would this satisfy your requirements? \r\n\r\nDoing this with ETH is probably harder, as there's nothing like the \"approve\" function that I'm aware of.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376013593/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376013725",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376013725",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376013725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjAxMzcyNQ==",
    "user": {
      "login": "niran",
      "id": 106437,
      "node_id": "MDQ6VXNlcjEwNjQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/106437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/niran",
      "html_url": "https://github.com/niran",
      "followers_url": "https://api.github.com/users/niran/followers",
      "following_url": "https://api.github.com/users/niran/following{/other_user}",
      "gists_url": "https://api.github.com/users/niran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/niran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/niran/subscriptions",
      "organizations_url": "https://api.github.com/users/niran/orgs",
      "repos_url": "https://api.github.com/users/niran/repos",
      "events_url": "https://api.github.com/users/niran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/niran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-25T23:50:34Z",
    "updated_at": "2018-03-25T23:50:41Z",
    "author_association": "NONE",
    "body": "Recurring payments are very important. One unaddressed issue in this model is volatility. For users to grant price-based withdrawals to a contract, the oracle needs to be able to disable withdrawals during periods of high volatility.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376013725/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376014777",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376014777",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376014777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjAxNDc3Nw==",
    "user": {
      "login": "ScottStevenson",
      "id": 60775,
      "node_id": "MDQ6VXNlcjYwNzc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60775?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ScottStevenson",
      "html_url": "https://github.com/ScottStevenson",
      "followers_url": "https://api.github.com/users/ScottStevenson/followers",
      "following_url": "https://api.github.com/users/ScottStevenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ScottStevenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ScottStevenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ScottStevenson/subscriptions",
      "organizations_url": "https://api.github.com/users/ScottStevenson/orgs",
      "repos_url": "https://api.github.com/users/ScottStevenson/repos",
      "events_url": "https://api.github.com/users/ScottStevenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ScottStevenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T00:05:33Z",
    "updated_at": "2018-03-26T00:05:33Z",
    "author_association": "NONE",
    "body": "Love this idea. An important discussion to have is whether this should be baked into Ethereum or whether this should be it's own project built on top of Ethereum.\r\n\r\nPersonally I believe it's so critical to the development of the dapp ecosystem that a core standard or new functionality that enables this sort of subscription with a consistent method that the user can understand, is warranted.\r\n\r\nOne difference to note in the model discussed here and the typical model is that the credit card model uses credit - you don't need to have money sitting on your credit card for payments to go through - and many people (if not most) do manually pay their credit cards. So you could envision a model where multiple apps request charges and then a user can approve them at all at once at the end of each month. Apps could decide themselves how long to allow the user to go without approving. \r\n\r\nBut maybe that's pointlessly carrying over the legacy mechanics. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376014777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376016291",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376016291",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376016291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjAxNjI5MQ==",
    "user": {
      "login": "owocki",
      "id": 513929,
      "node_id": "MDQ6VXNlcjUxMzkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/513929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/owocki",
      "html_url": "https://github.com/owocki",
      "followers_url": "https://api.github.com/users/owocki/followers",
      "following_url": "https://api.github.com/users/owocki/following{/other_user}",
      "gists_url": "https://api.github.com/users/owocki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/owocki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/owocki/subscriptions",
      "organizations_url": "https://api.github.com/users/owocki/orgs",
      "repos_url": "https://api.github.com/users/owocki/repos",
      "events_url": "https://api.github.com/users/owocki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/owocki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T00:27:19Z",
    "updated_at": "2018-03-26T00:27:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So, to break it down, it seems to me like you could have terms parameters(which could be adjusted potentially with implications on payment), payment calculation, and a signature working together on this. \r\n\r\nThis is a neat idea.. I hadnt even though of encapsulating the TOS as a smart contract and linking it but it makes total sense!\r\n\r\n> Although for an MVP, would probably be good to just focus on as though the terms are just binary -- user is subscribed, user is unsubscribed.\r\n\r\nAgree\r\n\r\n> Do you feel you'd want to make sure the user signed a transaction associated with the subscription every time a payment was due?\r\n\r\nI don't feel like it's better for the consumer in all cases.  See the 'opt in ever month' vs 'opt out' models above\r\n\r\n> Maybe this was already in the plan but yeah it'd be nice ux to have a subscription registry service for all your subscriptions (with updates aggregated in 1 sweep / notification / single monthly or annual transaction by the user then auto-paid to each service).\r\n\r\nI agree!\r\n\r\n> Might be more of a dapp tho like http://scroogeup.com or a budgeting app or advanced wallet but maybe it could be an ERC.\r\n\r\nThe reason I ERC'd it is that I think this is a core enough piece of infrastructure that it shouldnt be written by a rent seeking ICO or token based model.  It should be a core piece of the infrastructure.\r\n\r\n> For the case of tokens, couldn't you do something similar to 0x,\r\n\r\nThis is interesting.. Thanks I didnt know about 0x doing this!\r\n\r\n> The user \"approves\" the contract for an unlimited allowance\r\n\r\nIt scares me to have the contract approved for an unlimited allowance.  I get that you can mitigate it by code reviewing the smart contract that it's called for the unlimited allowance, but I still think the trust model is funny.\r\n\r\nThe other thing that \r\n\r\n> Doing this with ETH is probably harder, as there's nothing like the \"approve\" function that I'm aware of.\r\n\r\nI have heard rumours of ETH being moved to being an ERC20 token, but am unsure of the status there.  Does anyone know?\r\n\r\n\r\n> For users to grant price-based withdrawals to a contract, the oracle needs to be able to disable withdrawals during periods of high volatility.\r\n\r\nCould you articulate what you mean by 'price based withdrawals'? Do you mean $20 worth of token X every month?  \r\n\r\nI had not envisioned this protocol being priced based, if thats what you meant.  Only use case I had envisioned being in scope was \"X tokens per TIME_PERIOD\", aka \"10 tokens per mont\"\r\n.\r\n\r\n> An important discussion to have is whether this should be baked into Ethereum or whether this should be it's own project built on top of Ethereum.\r\n\r\nYep!  My only two core beliefs so far are that I dont want to see a rent seeking token powering this (so thats a vote in favor of being built into Ethereum) and that the system shoudl be trustless (which I think could go eitehr way.)\r\n\r\n> Personally I believe it's so critical to the development of the dapp ecosystem that a core standard or new functionality that enables this sort of subscription with a consistent method that the user can understand, is warranted.\r\n\r\nyes!  it fundamentally aligns incentives between user and dapp.\r\n\r\n> you could envision a model where multiple apps request charges and then a user can approve them at all at once at the end of each month. Apps could decide themselves how long to allow the user to go without approving.\r\n\r\nInteresting, I had not though of this.  Will noodle on it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376016291/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376021163",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376021163",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376021163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjAyMTE2Mw==",
    "user": {
      "login": "marclijour",
      "id": 4466879,
      "node_id": "MDQ6VXNlcjQ0NjY4Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4466879?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marclijour",
      "html_url": "https://github.com/marclijour",
      "followers_url": "https://api.github.com/users/marclijour/followers",
      "following_url": "https://api.github.com/users/marclijour/following{/other_user}",
      "gists_url": "https://api.github.com/users/marclijour/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marclijour/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marclijour/subscriptions",
      "organizations_url": "https://api.github.com/users/marclijour/orgs",
      "repos_url": "https://api.github.com/users/marclijour/repos",
      "events_url": "https://api.github.com/users/marclijour/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marclijour/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T01:23:50Z",
    "updated_at": "2018-03-26T01:23:50Z",
    "author_association": "NONE",
    "body": "I like the idea and the premises. Industry does have come to like steady cash flow streams vs one-time payments. The second benefit is that such feature will enable businesses processes common to e-commerce and sales. I would argue it is best practice to enforce some ground rules in the lowest protocol where that makes sense vs the dapp layer.\r\n\r\nOne situation to be avoided is an intermediary could make payment decision on behalf of a customer. The person who is paying should be the one committing the payment directly.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376021163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376027517",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376027517",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376027517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjAyNzUxNw==",
    "user": {
      "login": "ptrwtts",
      "id": 497330,
      "node_id": "MDQ6VXNlcjQ5NzMzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/497330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptrwtts",
      "html_url": "https://github.com/ptrwtts",
      "followers_url": "https://api.github.com/users/ptrwtts/followers",
      "following_url": "https://api.github.com/users/ptrwtts/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptrwtts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptrwtts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptrwtts/subscriptions",
      "organizations_url": "https://api.github.com/users/ptrwtts/orgs",
      "repos_url": "https://api.github.com/users/ptrwtts/repos",
      "events_url": "https://api.github.com/users/ptrwtts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptrwtts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T02:16:54Z",
    "updated_at": "2018-03-26T02:16:54Z",
    "author_association": "NONE",
    "body": "> It scares me to have the contract approved for an unlimited allowance\r\n\r\nIt's true, but unlimited allowances make for a much better UX. That's why with the new #777 standard, unlimited is the only sort of allowance supported (via authorizeOperator). In reality, it's not unlimited, because there are very strict rules coded into the contract about when tokens can be moved. It works best with a shared contract (like 0x), that you only need to audit / approve once, rather than everyone deploying their own.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376027517/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376084255",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376084255",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376084255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjA4NDI1NQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T08:21:01Z",
    "updated_at": "2018-03-26T08:21:01Z",
    "author_association": "MEMBER",
    "body": "Consider: Pre-paid vs post-paid.  Pre-paid puts trust in the service provider, post-paid puts trust in the subscriber.  Post-paid allows for things like pro-rated subscriptions on cancellation and some other UX benefits, but subscribers generally can't be trusted compared to service providers (one to many relationships tend to by much more Sybil attackable by the many vs the one).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376084255/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376165058",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376165058",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376165058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjE2NTA1OA==",
    "user": {
      "login": "owocki",
      "id": 513929,
      "node_id": "MDQ6VXNlcjUxMzkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/513929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/owocki",
      "html_url": "https://github.com/owocki",
      "followers_url": "https://api.github.com/users/owocki/followers",
      "following_url": "https://api.github.com/users/owocki/following{/other_user}",
      "gists_url": "https://api.github.com/users/owocki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/owocki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/owocki/subscriptions",
      "organizations_url": "https://api.github.com/users/owocki/orgs",
      "repos_url": "https://api.github.com/users/owocki/repos",
      "events_url": "https://api.github.com/users/owocki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/owocki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T13:27:00Z",
    "updated_at": "2018-03-26T13:27:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Consider: Pre-paid vs post-paid\r\n\r\nHi!  It's not clear to me what you mean by 'pre paid' vs 'post paid'.  Are you using a different verbage vs opt in/opt out verbage that I used in the OP issue desc?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376165058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376213214",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376213214",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376213214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjIxMzIxNA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T15:45:27Z",
    "updated_at": "2018-03-29T16:33:57Z",
    "author_association": "MEMBER",
    "body": "Here are a few thoughts:\r\n\r\nI think that *price* should be out-of-scope for this standard.  This feels a lot like scope creep to me and doesn't need to be part of the core API.  Ideally whatever protocol rules are decided *allow* for this type of behavior.\r\n\r\nFrom the subscriber's side:\r\n\r\n- I want strong **guarantees** on when I can cancel my subscription.\r\n- I will **normally** want payments to happen automatically without any action on my part.\r\n- In some cases it **might** be valuable to require an approval process.\r\n- For *dynamically* priced subscriptions I want to be able to set limits (require authorization if subscription is more than X).\r\n\r\nFrom the providers's side:\r\n\r\n- I need the ability to charge a fixed fee per subscription time unit (netflix, pandora, etc).\r\n- I need the ability to charge a dynamic fee per subscription time unit (aws, twilio, etc).\r\n- I need to be able to create reasonably accurate forecasts for upcoming subscriptions: Programatic checks that subscription accounts have available balance and that subscription is active.\r\n\r\nAnd to think a bit about protocol:\r\n\r\nBuilding on the token ERCs seems valuable here since they already setup primatives for transferring and approving.  What's missing is the concept of time based approvals.  I *think* that we can get very close to hitting **all** of the use cases above with the following API\r\n\r\n### Subscription API\r\n\r\nI think we need the following minimal API\r\n\r\n- `triggerPayment() returns bool` : Triggers payment of the subscription.  This spec does not specify the behavior of this function, leaving it up to the implementer.\r\n- `cancel() returns bool`: Immediately cancels the subscription.  Implementations **should** ensure that any unpaid subscription payments are paid to the provider as part of cancellation to ensure providers are able to let subscriptions fees *fill up* for arbitrary lengths of time, allowing them to reduce overhead from transaction costs.\r\n\r\nThese probably have `Payment` and `Cancelled` events that would get fired.\r\n\r\n### An ERC20 token based subscription contract.\r\n\r\nWith the above, we can now think about what a subscription paid in ERC20 tokens might look like.  A minimal implementation would require the following fields.\r\n\r\n- `address token`: defines the token contract which payments are paid from.\r\n- `address provider`: the address of the provider\r\n- `uint256 time_unit`:  the number of seconds per time unit.\r\n- `uint256 tokens_per_time_unit`:  the number of `tokens` that can be paid towards the subscription per `time_unit`.\r\n- `uint256 last_payment_at`: the timestamp when the last payment was made.\r\n\r\nThe `triggerPayment` method would call `token.transfer(provider, (now - last_payment_at) * tokens_per_time_unit / time_unit`)`.\r\n\r\n### Closing Thoughts\r\n\r\nGiven the wide set of use cases for subscriptions and the wide array of different business requirements, I think this specification will be **most** useful if it sticks to trying to define an interface, and leaves the exact implementation up to the provider.  A provider would either provide their own implementation of a subscription contract, requiring the user to fund the contract once it was created for them, **or** they might delegate to a 3rd party service which offers pre-built subscription contracts that fit their business requirements.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376213214/reactions",
      "total_count": 31,
      "+1": 31,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376685586",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376685586",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376685586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjY4NTU4Ng==",
    "user": {
      "login": "niran",
      "id": 106437,
      "node_id": "MDQ6VXNlcjEwNjQzNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/106437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/niran",
      "html_url": "https://github.com/niran",
      "followers_url": "https://api.github.com/users/niran/followers",
      "following_url": "https://api.github.com/users/niran/following{/other_user}",
      "gists_url": "https://api.github.com/users/niran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/niran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/niran/subscriptions",
      "organizations_url": "https://api.github.com/users/niran/orgs",
      "repos_url": "https://api.github.com/users/niran/repos",
      "events_url": "https://api.github.com/users/niran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/niran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T21:42:46Z",
    "updated_at": "2018-03-27T21:42:46Z",
    "author_association": "NONE",
    "body": "I think most tokens are too volatile for people to be comfortable denominating subscriptions in, (e.g. all crypto subscriptions would've been cancelled last fall) but let's find out",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376685586/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376741027",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376741027",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376741027,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njc0MTAyNw==",
    "user": {
      "login": "abunsen",
      "id": 93429,
      "node_id": "MDQ6VXNlcjkzNDI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/93429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abunsen",
      "html_url": "https://github.com/abunsen",
      "followers_url": "https://api.github.com/users/abunsen/followers",
      "following_url": "https://api.github.com/users/abunsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/abunsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abunsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abunsen/subscriptions",
      "organizations_url": "https://api.github.com/users/abunsen/orgs",
      "repos_url": "https://api.github.com/users/abunsen/repos",
      "events_url": "https://api.github.com/users/abunsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abunsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T02:37:37Z",
    "updated_at": "2018-03-28T03:22:23Z",
    "author_association": "NONE",
    "body": "> Hi! It's not clear to me what you mean by 'pre paid' vs 'post paid'. Are you using a different verbage vs opt in/opt out verbage that I used in the OP issue desc?\r\n\r\nI'm not speaking on his behalf, but my read on it was that _pre-paid_ means paying upfront for service and _post-paid_ at the end of the period. Like how you have to pay your rent up front, but you pay your Netflix subscription at the end of the month. It's independent of opt-in/opt-out.\r\n\r\n> Until (and if) ETH becomes a token, it would not be viable to do this at all with ETH.\r\n\r\nExcuse my ignorance, but why is this not viable to do with ETH?\r\n\r\n---\r\n\r\nI love this proposal & have been thinking about it for a few months. It could really put the power in the hands of the consumer / customer - right now if I want to cancel my Netflix, I have to log in to my Netflix account or worse (e.g. get on the phone ðŸ˜² ). Rinse and repeat for any other poor choices I've made with my credit card info (e.g. my Knit-Wise.com subscription or my XtremeNitroShred.com subscription).\r\n\r\nThe way I've been thinking about this is as follows (keep in mind, I'm an ETH hobbyist, not a professional solidity dev):\r\n\r\n1. Subscriber creates a single \"subscriptions contract\" that will manage their subscriptions\r\n2. Subscriber funds that contract\r\n3. The subscriptions contract manages subscriptions by having something like an array of \"approved subscription\" structs (name, web domain, ETH address, amount, interval)\r\n4. External  \"vendor contracts\" can make a request to become a vendor in the \"approved subscription\" array\r\n5. Vendor contracts that are in the \"approved subscription\" array can make calls to withdraw based on the previously agreed upon amount and interval\r\n6. A user can cancel a subscription at any time by removing the vendor from the array\r\n7. Subscriber should be able to destroy entire subscriptions contract and have remaining ETH sent back to their address\r\n\r\nThe assumptions this is based on:\r\n- Priced in ETH, not USD (so no need for Oracles)\r\n- The subscriptions are based on paying up-front like the pricing presented on https://quiknode.io/\r\n\r\nSome things I thought might be worth considering:\r\n- How can I verify that I'm actually getting a request from Netflix? This might be as simple as having netflix.com host a netflix.com/subscriptions.eth file with their approved vendor contract addresses\r\n- How could we update the code? Well since each user is deploying one of these contracts on an as needed basis, we could have versions & make improvements to the standard.\r\n- How private should this be? I think to start, not that private. We can iterate on standard (see line above) & add in these features as people build a desire to maintain privacy.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376741027/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376741255",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376741255",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376741255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njc0MTI1NQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T02:38:48Z",
    "updated_at": "2018-03-28T02:39:16Z",
    "author_association": "MEMBER",
    "body": "> I think most tokens are too volatile for people to be comfortable denominating subscriptions in\r\n\r\n[one particular token comes to mind](https://dai.makerdao.com/) which may prove to be an illustrative counter-example.  Even if *most* are not suitable for this, it only takes a few that are stable and fungible to make it worthwhile.  (my 2 cents)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376741255/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376822482",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376822482",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376822482,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjgyMjQ4Mg==",
    "user": {
      "login": "nieldlr",
      "id": 965976,
      "node_id": "MDQ6VXNlcjk2NTk3Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/965976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nieldlr",
      "html_url": "https://github.com/nieldlr",
      "followers_url": "https://api.github.com/users/nieldlr/followers",
      "following_url": "https://api.github.com/users/nieldlr/following{/other_user}",
      "gists_url": "https://api.github.com/users/nieldlr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nieldlr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nieldlr/subscriptions",
      "organizations_url": "https://api.github.com/users/nieldlr/orgs",
      "repos_url": "https://api.github.com/users/nieldlr/repos",
      "events_url": "https://api.github.com/users/nieldlr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nieldlr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T09:30:11Z",
    "updated_at": "2018-03-28T09:30:11Z",
    "author_association": "NONE",
    "body": "Heya everyone,\r\n\r\ndig this discussion a lot @owocki! Thanks for kicking this off. \r\n\r\nI'm the creator of [StakeTree](https://staketree.com) a crypto equivalent of [Patreon](https://patreon.com). It's still early days, but I've got some pilot projects running to test market interest and there seems to be quite a neat demand for this. (I'm even funding myself through this!). I've thought a bit on this and tried some contract variants on how to make some kind of pseudo-subscription system. I'm a new solidity dev so there's still lots that I might miss here.\r\n\r\nTo @owocki's point, on the merit of a subscription standard, I'm fully onboard with this. Having previously worked in SaaS, it's a massive industry and having subscriptions could be hugely beneficial for crypto projects.\r\n\r\nMy naive implementation to get this working was to have a contract where funders can pool money into the contract and the beneficiary can then withdraw 10% from the pool every week. Funders can refund whatever is left of their funds at any time. For example, if they put in 1 eth, and two withdrawals have occurred, they can then refund themselves 0.81 eth if they want to or continue funding the beneficiary.\r\n\r\nSee code [here](https://github.com/StakeTree/contracts/blob/master/contracts/StakeTreeWithTokenization.sol). \r\n\r\nThere's an additional tokenization aspect I added which is unrelated to this discussion (it allows you to reward funders for their contribution).\r\n\r\nThis implementation is sub-optimal in my view because it requires a big capital upfront cost for the subscription. 1 eth only generates 0.1 eth of \"payment\", then diminishes every week by 10%. Although this could be useful for a Patreon-style subscription where the exact funds aren't the issue, but rather that funds are there. In cases where an exact payment amount is needed, this doesn't work.\r\n\r\nI then tried to do a cleaner version where you could commit to X amount of ether over Y weeks. I called it X-Over-Y subscriptions. So let's say I want to use Netflix for 12 weeks, I can pay upfront and then the beneficiary can withdraw the allocated funds each week. However, I ran into gas cost issues very quickly due to iteration. In most cases, this was my concern technically with subscriptions on smart contracts. I was working on these before CryptoKitties arrived and then it was just barely plausible for gas costs, but soon, the network congested and it became incredibly unfeasible. (To reiterate, I'm not the best solidity dev here, so I might have missed something).\r\n\r\nI might be reading these wrong (please do correct me!), but it seems like @pipermerriam, @ptrwtts & @abunsen's possible implementations would require the provider/beneficiary (the project/person receiving the funds) to send a transaction for each subscriber. This kind of scalability might be solved in future, but at the moment, this has been a big blocker for me because of inherent costs and potential uncertainty regarding fluctuating gas price. This is also a tricky UX issue. If the provider runs a withdraw action on a front-end and triggers multiple transactions, what's the easiest way to have that run without someone sitting there signing each transaction? \r\n\r\nThe other kind of scalability that iterates within a contract, let's say, all there's some kind of aggregation where all subscribers gather in one contract for the provider/beneficiary, could lead to gas limit issues. I solved this by using some math to calculate the totals for funders on the fly and only store how many withdrawals occurred and at what withdrawal they started their funding. But this might lead to the 10% issue, where all funders would have the pay the same amount. (I might look into this again in the future).\r\n\r\nAt the risk of not letting this get too technical & sorry for being a bit late to this discussion. I'm in agreement that a common interface would be really amazing here, but the reason I go a bit deeper here is so that I can urge proposers to please consider the usability & scalability of a subscriptions standard as well. When proposals are put forth, can we also discuss scenarios of how it would work for 1 subscriber, 10 subscribers, 500 subscribers, 1000 subscribers etc. If it doesn't scale, any subscription can be trivially DOSd. Never mind the possibility of a sybil attack added on top of this.\r\n\r\nI'm hugely excited for this. I'd love to hear more thoughts here. And again sorry if I misunderstood some of the suggested implementations (y'all are all probably much smarter than me!). If either we create a scalable subscriptions standard on the smart contract level or we look at the core ethereum level, this will be huge. Thanks again @owocki! Let's do this!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376822482/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376829421",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376829421",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376829421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjgyOTQyMQ==",
    "user": {
      "login": "Josephrp",
      "id": 18212928,
      "node_id": "MDQ6VXNlcjE4MjEyOTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/18212928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Josephrp",
      "html_url": "https://github.com/Josephrp",
      "followers_url": "https://api.github.com/users/Josephrp/followers",
      "following_url": "https://api.github.com/users/Josephrp/following{/other_user}",
      "gists_url": "https://api.github.com/users/Josephrp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Josephrp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Josephrp/subscriptions",
      "organizations_url": "https://api.github.com/users/Josephrp/orgs",
      "repos_url": "https://api.github.com/users/Josephrp/repos",
      "events_url": "https://api.github.com/users/Josephrp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Josephrp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T09:54:15Z",
    "updated_at": "2018-03-28T09:54:15Z",
    "author_association": "NONE",
    "body": "I'm not sure I'm fully convinced by the rational for the EIP. In fiat country subscription services are in fact highly regulated via amongst other things something called a \"clearing house\". It might be the case that a service provider eg \"ClearETH\" could be the intermediary between users and their subscription providers and solve much of this while not reducing a user's control.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376829421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376932113",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-376932113",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 376932113,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjkzMjExMw==",
    "user": {
      "login": "charlieknoll",
      "id": 1767009,
      "node_id": "MDQ6VXNlcjE3NjcwMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1767009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charlieknoll",
      "html_url": "https://github.com/charlieknoll",
      "followers_url": "https://api.github.com/users/charlieknoll/followers",
      "following_url": "https://api.github.com/users/charlieknoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/charlieknoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charlieknoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charlieknoll/subscriptions",
      "organizations_url": "https://api.github.com/users/charlieknoll/orgs",
      "repos_url": "https://api.github.com/users/charlieknoll/repos",
      "events_url": "https://api.github.com/users/charlieknoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charlieknoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T15:37:24Z",
    "updated_at": "2018-03-28T15:37:24Z",
    "author_association": "NONE",
    "body": "Regarding @pipermerriam's spec, it should be required that the `cancel` function should trigger unpaid payment. This way payments can be accumulated and the `provider` only needs to call the `triggerPayment` function when they need access to their accumulated Dai.  This will help with scalability such that the `provider` can time their payments to times of low network usage and gas prices.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376932113/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377294990",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-377294990",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 377294990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzI5NDk5MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T16:35:30Z",
    "updated_at": "2018-03-29T16:35:30Z",
    "author_association": "MEMBER",
    "body": "> Regarding @pipermerriam's spec, it should be required that the `cancel` function should trigger unpaid payment.\r\n\r\nI've updated my post to include this.  Note that my spec makes no requirements on what the underlying implementation does in terms of functionality, so this was added as a \"**should**\" to ensure that implementers are aware of this use case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377294990/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377296645",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-377296645",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 377296645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzI5NjY0NQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T16:41:08Z",
    "updated_at": "2018-03-29T16:41:08Z",
    "author_association": "MEMBER",
    "body": "@nieldlr I think I understand your concerns, however, from the complexity/security/optimization/efficiency trade-off perspective, I think that a contract-per-subscription is the right choice.  \r\n\r\nProviders can still batch their withdrawals which should have a noticeable effect on reducing transaction overhead.  In theory calls to the `triggerPayment` should be able to be optimized to be well within a 100k gas budget which puts it close enough to the *fully optimized* threshold that to achieve any more significant gains will require protocol level scalability. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377296645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377305613",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-377305613",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 377305613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzMwNTYxMw==",
    "user": {
      "login": "ptrwtts",
      "id": 497330,
      "node_id": "MDQ6VXNlcjQ5NzMzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/497330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptrwtts",
      "html_url": "https://github.com/ptrwtts",
      "followers_url": "https://api.github.com/users/ptrwtts/followers",
      "following_url": "https://api.github.com/users/ptrwtts/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptrwtts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptrwtts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptrwtts/subscriptions",
      "organizations_url": "https://api.github.com/users/ptrwtts/orgs",
      "repos_url": "https://api.github.com/users/ptrwtts/repos",
      "events_url": "https://api.github.com/users/ptrwtts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptrwtts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T17:10:31Z",
    "updated_at": "2018-03-29T17:10:31Z",
    "author_association": "NONE",
    "body": "@pipermerriam wouldn't a single shared contract be better than a contract per subscription? this way, you can have confidence around what it will do, without having to audit every single subscription you do. i'm guessing it would also be cheaper to setup, if you used a createSubscription() function instead of deploying a contract every time. \r\n\r\nit could either be one universal contract, or at least one contract per service (similar to tokens).\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377305613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377308980",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-377308980",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 377308980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzMwODk4MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-29T17:21:43Z",
    "updated_at": "2018-03-29T17:21:43Z",
    "author_association": "MEMBER",
    "body": "@ptrwtts My preference for a contract-per-subscription model is fueled by the same reason that ENS uses stand-alone deed contracts.  Since these contracts hold user funds, by keeping them in separate contracts you reduce the attack surface area by eliminating an entire class of attack since user's funds are not intermingled.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377308980/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377947036",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-377947036",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 377947036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Nzk0NzAzNg==",
    "user": {
      "login": "cryppadotta",
      "id": 34892728,
      "node_id": "MDQ6VXNlcjM0ODkyNzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/34892728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cryppadotta",
      "html_url": "https://github.com/cryppadotta",
      "followers_url": "https://api.github.com/users/cryppadotta/followers",
      "following_url": "https://api.github.com/users/cryppadotta/following{/other_user}",
      "gists_url": "https://api.github.com/users/cryppadotta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cryppadotta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cryppadotta/subscriptions",
      "organizations_url": "https://api.github.com/users/cryppadotta/orgs",
      "repos_url": "https://api.github.com/users/cryppadotta/repos",
      "events_url": "https://api.github.com/users/cryppadotta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cryppadotta/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-02T14:53:09Z",
    "updated_at": "2018-04-02T14:53:09Z",
    "author_association": "NONE",
    "body": "I've implemented pre-paid \"subscriptions\" in [dotta-license](https://github.com/cryppadotta/dotta-license) by setting an expiration time on an ERC721 token. \r\n\r\nAt checkout, users select the length of time they want to pre-pay:\r\n\r\n![screenshot 2018-04-02 09 44 20](https://user-images.githubusercontent.com/34892728/38200563-796bb068-365a-11e8-97db-2a9968d8c72f.png)\r\n \r\nWhen the token is issued, it sets an expiration according the number of \"cycles\" the user paid for. Users can renew at any time.\r\n\r\nMy client-side app verifies that the token has not expired. (You could do this with a desktop app, mobile, or SaaS service.) Because the verification is client-side you can provide any sort of \"grace\" period you want, such as not disabling until it's been unpaid for a certain amount of time. \r\n\r\nAlso, because there is a client-side app, I'm using that app for reminders when the subscription is near-due.\r\n\r\nFrom a sellers perspective, credit-card based subscriptions are be beneficial in that users are default-pay (for example, if they forget or just do nothing, you still retain the subscriber). Obviously, we don't have that in Ethereum today. \r\n\r\nFor pricing, there is [code that will sync a list of products](https://github.com/cryppadotta/dotta-license/blob/a35a1ae51e808672ff36ab1a1eb64d2acabc040f/dot-license-cli/doc/example-products.js) and their prices. I update prices periodically to be reasonable within conversion rates. \r\n\r\nHowever, the downside(?) to this (optional) process is that a subscription's price isn't \"fixed\" (or grandfathered) to a particular price in ETH. I tell my customers that it they want a fixed rate, then they ought to pre-pay for a longer time period. There are interesting incentive dynamics here.\r\n\r\nThe [code](https://github.com/cryppadotta/dotta-license) is all open-source/MIT, including the contracts, commandline management tools, and React UI widget.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377947036/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378205523",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-378205523",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 378205523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODIwNTUyMw==",
    "user": {
      "login": "tjayrush",
      "id": 5417918,
      "node_id": "MDQ6VXNlcjU0MTc5MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5417918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjayrush",
      "html_url": "https://github.com/tjayrush",
      "followers_url": "https://api.github.com/users/tjayrush/followers",
      "following_url": "https://api.github.com/users/tjayrush/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjayrush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjayrush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjayrush/subscriptions",
      "organizations_url": "https://api.github.com/users/tjayrush/orgs",
      "repos_url": "https://api.github.com/users/tjayrush/repos",
      "events_url": "https://api.github.com/users/tjayrush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjayrush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T10:36:27Z",
    "updated_at": "2018-04-03T10:36:27Z",
    "author_association": "NONE",
    "body": "@cryppadotta \r\n\r\n> However, the downside(?) to this (optional) process is that a subscription's price isn't \"fixed\" (or grandfathered) to a particular price in ETH\r\n\r\nI actually see this as a benefit. If you build in a short waiting period during which time your client could either quit your service (because the price you set is too high) or make a counter-offer (because he/she believes the exchange rate is not fair), then you actually have a model that might work. As it is, I don't like that only you can change the rate.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378205523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378301039",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-378301039",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 378301039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODMwMTAzOQ==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-03T15:56:13Z",
    "updated_at": "2018-04-03T15:56:13Z",
    "author_association": "MEMBER",
    "body": "@tjayrush / @cryppadotta \r\n\r\nI believe the schemes your both mentioning can be accomplished under the spec I proposed [here](https://github.com/ethereum/EIPs/issues/948#issuecomment-376213214).  Please correct me if I'm wrong.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378301039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378509586",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-378509586",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 378509586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODUwOTU4Ng==",
    "user": {
      "login": "nieldlr",
      "id": 965976,
      "node_id": "MDQ6VXNlcjk2NTk3Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/965976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nieldlr",
      "html_url": "https://github.com/nieldlr",
      "followers_url": "https://api.github.com/users/nieldlr/followers",
      "following_url": "https://api.github.com/users/nieldlr/following{/other_user}",
      "gists_url": "https://api.github.com/users/nieldlr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nieldlr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nieldlr/subscriptions",
      "organizations_url": "https://api.github.com/users/nieldlr/orgs",
      "repos_url": "https://api.github.com/users/nieldlr/repos",
      "events_url": "https://api.github.com/users/nieldlr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nieldlr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T07:39:23Z",
    "updated_at": "2018-04-04T07:39:23Z",
    "author_association": "NONE",
    "body": "> @nieldlr I think I understand your concerns, however, from the complexity/security/optimization/efficiency trade-off perspective, I think that a contract-per-subscription is the right choice.\r\n\r\n> Providers can still batch their withdrawals which should have a noticeable effect on reducing transaction overhead. In theory calls to the triggerPayment should be able to be optimized to be well within a 100k gas budget which puts it close enough to the fully optimized threshold that to achieve any more significant gains will require protocol level scalability.\r\n\r\nHeya @pipermerriam, could you explain a bit more on how this works? I'm not quite familiar with batching and how this exactly works here. Eager to learn if this could solve our challenge.\r\n\r\nAgain, from a purely practical point of view, having multiple tx costs to the provider is not scalable. My focus is primarily on people building up support from their communities/fans/supporters and this type of funding can be much smaller. Here's the income distribution on Patreon for example:\r\n![image](https://user-images.githubusercontent.com/965976/38293892-6a86b10c-37e9-11e8-97d7-06378f71a757.png)\r\n\r\nMy withdraw function is currently sitting about ~50k gas cost & back during the network spike in December/January I ended up paying $0.50 per withdrawal. https://etherscan.io/tx/0xe6e5534baee4a6d91c2d288dfb803199d0e1dcb8c3798162dc2a4bb11935a8df\r\n\r\nBack then I had about 20 funders, which means that if I ran a ~100k gas cost withdrawal for all of them, it would've cost me $1*20 = $20. This is unfortunately not a reasonable cost for a provider & I would call that a failure of Ethereum to be able to handle subscriptions and rather prefer using centralized providers like Patreon. I'm taking the extreme case here in terms of network congestion, but this is by far not the most extreme in terms of how many funders one could get for a project/app etc. It's just not a user experience risk that I'm comfortable with taking for an app/service\r\n\r\nI'm fully aware that we might need to make some tradeoffs here somewhere, but my hunch is that perhaps there's a different way to solve this. Eager to hear if batching (or any other solution) might solve this.\r\n\r\nThanks for exploring this with me (and everyone else here!). I'm passionate about this, because I believe this opens up so many opportunities.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378509586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378674197",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-378674197",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 378674197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY3NDE5Nw==",
    "user": {
      "login": "owocki",
      "id": 513929,
      "node_id": "MDQ6VXNlcjUxMzkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/513929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/owocki",
      "html_url": "https://github.com/owocki",
      "followers_url": "https://api.github.com/users/owocki/followers",
      "following_url": "https://api.github.com/users/owocki/following{/other_user}",
      "gists_url": "https://api.github.com/users/owocki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/owocki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/owocki/subscriptions",
      "organizations_url": "https://api.github.com/users/owocki/orgs",
      "repos_url": "https://api.github.com/users/owocki/repos",
      "events_url": "https://api.github.com/users/owocki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/owocki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T17:07:08Z",
    "updated_at": "2018-04-04T17:07:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I wonder if the optimal interface for `1:many` subscriptions (neil's point above) is different than the optimal interface for`1:1` subscription contract (piper's interface). \r\n\r\nthere is certainly a tradeoff from an attack surface perspective, as it's a nice best practice from a security perspective to be able to keep funds for different subscriptions in seperate contracts to make each contract less of a honeypot",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378674197/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378725504",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-378725504",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 378725504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODcyNTUwNA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T19:56:45Z",
    "updated_at": "2018-04-04T19:56:45Z",
    "author_association": "MEMBER",
    "body": "> Heya @pipermerriam, could you explain a bit more on how this works? I'm not quite familiar with batching and how this exactly works here. Eager to learn if this could solve our challenge.\r\n\r\nEach user would have their own subscription contract.  The naive approach would be to send 1 transaction for each subscriber, calling `triggerPayment` on each subscription contract.\r\n\r\nTo batch these, you would do this with another contract layer.  Here's a psuedo-solidity implementation.\r\n\r\n```javascript\r\ncontract SubscriptionInterface {\r\n  function triggerPayment() returns (bool);\r\n}\r\ncontract BatchTriggerPayment {\r\n  function triggerBatchPayments(address[] subscriptions) returns (bool success) {\r\n    for (uint i=0; i<subscriptions.length; i++) {\r\n        success = SubscriptionInterface(subscriptions[i]).triggerPayment();\r\n        if (!success) {\r\n          revert();\r\n        }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis should save you `21000` gas of overhead for each subscription, reducing the gas footprint to the overhead of a single transaction + the cost of triggering a payment for each subscription.\r\n\r\nIt's still an O(n) cost, but it's reduced by an O(n) factor due to the savings on transaction overhead.\r\n\r\nRemember that *true* scalability is something that will happen at the protocol level, after which most of this gas accounting and optimization **should** matter way less.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378725504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379300972",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-379300972",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 379300972,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTMwMDk3Mg==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T16:09:14Z",
    "updated_at": "2018-04-06T16:09:14Z",
    "author_association": "NONE",
    "body": "Can't this be done by signing some time-locked erc20 cheques somehow? Ideally the user should sign a message saying \"after block X, transfer N tokens to Bob\". They could do it 12 times for all months and renew the subscription next month. The scope and how to do time lock cheques is what should be is debate in this ERC.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379300972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379316388",
    "html_url": "https://github.com/ethereum/EIPs/issues/948#issuecomment-379316388",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/948",
    "id": 379316388,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTMxNjM4OA==",
    "user": {
      "login": "leafcutterant",
      "id": 7106231,
      "node_id": "MDQ6VXNlcjcxMDYyMzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7106231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leafcutterant",
      "html_url": "https://github.com/leafcutterant",
      "followers_url": "https://api.github.com/users/leafcutterant/followers",
      "following_url": "https://api.github.com/users/leafcutterant/following{/other_user}",
      "gists_url": "https://api.github.com/users/leafcutterant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leafcutterant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leafcutterant/subscriptions",
      "organizations_url": "https://api.github.com/users/leafcutterant/orgs",
      "repos_url": "https://api.github.com/users/leafcutterant/repos",
      "events_url": "https://api.github.com/users/leafcutterant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leafcutterant/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T17:08:04Z",
    "updated_at": "2018-04-06T17:08:04Z",
    "author_association": "NONE",
    "body": ">Until (and if) ETH becomes a token, it would not be viable to do this at all with ETH.\r\n\r\nThrough [WETH](https://weth.io/), ETH already is (can be) a token. I'm not familiar with the WETH contract, but maybe the conversion can be automated by the subscription contract(s).\r\n\r\nSide note: I think subscriptions can benefit greatly from a stablecoin like [Dai](https://coinmarketcap.com/currencies/dai/). Most people probably won't want to commit to a subscription or get payments in a currency which they don't know the future value of.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379316388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
