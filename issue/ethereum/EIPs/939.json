{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/939/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/939/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/939/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/939",
  "id": 307012097,
  "node_id": "MDU6SXNzdWUzMDcwMTIwOTc=",
  "number": 939,
  "title": "ERC 939: Identity Claim Holder",
  "user": {
    "login": "Agusx1211",
    "id": 12701942,
    "node_id": "MDQ6VXNlcjEyNzAxOTQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Agusx1211",
    "html_url": "https://github.com/Agusx1211",
    "followers_url": "https://api.github.com/users/Agusx1211/followers",
    "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
    "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
    "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
    "repos_url": "https://api.github.com/users/Agusx1211/repos",
    "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 19,
  "created_at": "2018-03-20T19:44:51Z",
  "updated_at": "2022-01-01T23:11:42Z",
  "closed_at": "2022-01-01T23:11:42Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\nEIP: <to be assigned>\r\nTitle: ERC-939 Identity Claim Holder\r\nAuthor: Agustin Esteban Aguilar <agustin@ripiocredit.network>\r\nType: Standard\r\nCategory: ERC\r\nStatus: Discussion\r\nCreated: 2018-03-20\r\n```\r\n# Abstract\r\n\r\nThe following describes standard functions for adding claims about a subject; a contract or an EOA could make these claims.\r\n\r\n# Motivation\r\n\r\nThis standard aims to allow dapps and networks to connect and exchange information using claims.  These claims are generic and could be used to communicate different types of data.\r\n\r\nUsing a bytes field for the data parameter allows the claims to hold complex statements.\r\n\r\n# Rationale\r\n\r\nThe idea of a registry of claims it is not new to the community, this approach has the following differences:\r\n\r\n### Multiple claims by type\r\n\r\nAn issuer could emit multiple claims of the same type to the same subject; this is useful to make the model even more flexible. \r\n\r\nFor example, a payment processor could issue a claim every time a subject request a payment, this claim will always contain the same subject, issuer, and type.\r\n\r\n### Everything is a claim!\r\n\r\nThere is no method to reject, modify or remove claims, that operations should be implemented as further claims. \r\n\r\nThis allows to have a more flexible platform and keeps the history of what claims existed in the past.\r\n\r\n### What is an identity?\r\n\r\nIn this standard claims are not necessarily done against an ethereum address; a virtual identity could be created at any time and with any scheme. \r\n\r\nThese virtual identities could only interact with claims; for example, an identity could be built on top of a passport number of an email address. This identity \"keys\" are outside the realm of the EVM, but could still exist and represent users.\r\n\r\n# Definition\r\n\r\n`issuer`: Another contract or EOA that generates the claim. \r\n\r\n`subject`: Identity who receives the claim, a bytes32 field allows it to be an ethereum address or an identifier.\r\n\r\n`claimType`: The type of the claim defines how the data should be interpreted, it has the following structure: `keccak256(string prefix + string key)`.\r\n\r\n`timestamp`: Unix time of when the contract saw the claim for the first time. \r\n\r\n`data`: Bytes data of the claim, the `claimType` field defines the structure.\r\n\r\n## Claim\r\n\r\nThe claims issued to the identity\r\n\r\n``` solidity\r\nstruct Claim {\r\n    bytes32 subject;\r\n    bytes32 claimType;\r\n    address issuer;\r\n    uint64 timestamp;\r\n    bytes data;\r\n}\r\n```\r\n\r\n### addClaim\r\nCreates a new claim directly on-chain, the msg.sender becomes the issuer.\r\n``` solidity\r\nfunction addClaim(bytes32 subject, bytes32 claimType, bytes data) public returns (uint256 index);\r\n```\r\n\r\n### validateClaim (signed claims)\r\nValidates a given claim signed by an issuer and saves it.\r\n\r\nIt allows transferring the cost of making claims to the beneficiary of the claim itself, allowing the issuer to make it without any fee.\r\n\r\nIt should be kept in mind that this claim does not have a fixed timestamp, the timestamp saved is the first time that the claim is validated.\r\n\r\n``` solidity\r\nfunction validateClaims(bytes32[] subjects, bytes32[] claimTypes, bytes[] data, uint8 v, bytes32 r, bytes32 s) returns (bool)\r\n```\r\nTo generate a signed claim, the issuer should sign the output of one of the following formulas\r\n\r\n**Single claim**\r\n``` solidity\r\nkeccak256(bytes32 subject, bytes32 claimType, bytes data);\r\n```\r\n\r\n### getClaim\r\nAllows to retrieve a claim using the identity and index of the claim, it returns the hash of the claim.\r\n\r\n``` solidity\r\nfunction getClaim(bytes32 subject, uint256 index) public view returns (bytes32 claimHash);\r\n```\r\n\r\nAllows to retrieve a claim using the unique hash of that claim, the one is calculated with this formula: `keccak256(bytes32 subject, address issuer, bytes32 claimType, bytes32 dataHash)`\r\n\r\n``` solidity\r\nfunction getClaim(bytes32 claimHash) public view returns (address subject, address issuer, bytes32 claimType, uint64 timestamp, bytes32 dataHash);\r\n```\r\n\r\n### claimsOf\r\nReturn the number of claims done about a given subject. \r\n\r\n``` solidity\r\nfunction claimsOf(bytes32 subject) public view returns (uint256 number);\r\n```\r\n\r\n### findClaims\r\nSearch all the claims with the given parameters.\r\n\r\nIf any of the parameters is 0x0, it should be interpreted as \"all\". \r\n\r\nThis is an expensive gas method that it should not be called from another contract.\r\n``` solidity\r\nfunction findClaims(bytes32 subject, address issuer, bytes32 claimType) public view returns (bytes32[] claims);\r\n```\r\n\r\n### readData\r\nAllows to read the data field of a claim\r\n``` solidity\r\nfunction readData(bytes32 claimHash) public view returns (bytes data);\r\n```\r\n\r\nAllows to read the data field of a claim from a smart contract, it takes padding to read the bytes array using bytes32 words. The padding 0 should return the length of the data field.\r\n\r\n``` solidity\r\nfunction readData(bytes32 claimHash, uint256 padding) public view returns (bytes32);\r\n```\r\n## Standard claim types\r\n\r\n### Subject ownership\r\nClaims that the issuer is the owner of the subject.\r\n``` solidity\r\nbytes32 public constant TYPE_SUBJECT_OWNERSHIP = keccak256(\"pub_subject_ownership\");\r\n```\r\nThe data field should be empty.\r\n\r\n### Retracted claim\r\nAims to \"remove\" a previous claim, the subject and the issuer should be the same as the claim to remove. \r\n``` solidity\r\nbytes32 public constant TYPE_RETRACTED_CLAIM = keccak256(\"pub_retract_claim\");\r\n```\r\nThe data field contains the hash of the removed claim in the first position.\r\n\r\n### Standard claim prefixes\r\n\r\n`pub_`: The data field should contain readable public information, for example, an encoded email or a full name.\r\n\r\n`priv_`: The data field should contain the hash of the information of the claim; this is intended for sensible information. For example a physical address or a phone number.\r\n\r\n_TODO: Add more standard claim types_\r\n\r\n## Events\r\n\r\n### claimAdded\r\nShould be triggered when a claim is saved in the contract.\r\n``` solidity\r\nevent ClaimAdded(bytes32 subject, bytes32 issuer, bytes32 claimType, bytes data);\r\n```\r\n\r\n# Solidity Interface\r\n``` solidity\r\npragma solidity ^0.4.19;\r\n\r\ncontract ERC939 {\r\n    bytes32 public constant TYPE_SUBJECT_OWNERSHIP = keccak256(\"pub_subject_ownership\");\r\n    bytes32 public constant TYPE_RETRACTED_CLAIM = keccak256(\"pub_retract_claim\");\r\n\r\n    event ClaimAdded(bytes32 subject, bytes32 issuer, bytes32 claimType, bytes data);\r\n\r\n    struct Claim {\r\n        bytes32 subject;\r\n        bytes32 claimType;\r\n        address issuer;\r\n        uint64 timestamp;\r\n        bytes data;\r\n    }\r\n\r\n    function addClaim(bytes32 subject, bytes32 claimType, bytes data) public returns (uint256 index);\r\n    function validateClaim(bytes32 subject, bytes32 claimType, bytes data, uint8 v, bytes32 r, bytes32 s) public returns (bool);\r\n    function getClaim(bytes32 subject, uint256 index) public view returns (bytes32 claimHash);\r\n    function getClaim(bytes32 claimHash) public view returns (address subject, address issuer, bytes32 claimType, uint64 timestamp, bytes32 dataHash);\r\n    function readData(bytes32 claimHash) public view returns (bytes data);\r\n    function readData(bytes32 claimHash, uint256 padding) public view returns (bytes32);\r\n    function claimsOf(bytes32 subject) public view returns (uint256 number);\r\n    function findClaims(bytes32 subject, address issuer, bytes32 claimType) public view returns (bytes32[] claims);\r\n}\r\n```",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/939/reactions",
    "total_count": 10,
    "+1": 8,
    "-1": 0,
    "laugh": 0,
    "hooray": 2,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/939/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/374935998",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-374935998",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 374935998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDkzNTk5OA==",
    "user": {
      "login": "c0chi",
      "id": 23640660,
      "node_id": "MDQ6VXNlcjIzNjQwNjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/23640660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/c0chi",
      "html_url": "https://github.com/c0chi",
      "followers_url": "https://api.github.com/users/c0chi/followers",
      "following_url": "https://api.github.com/users/c0chi/following{/other_user}",
      "gists_url": "https://api.github.com/users/c0chi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/c0chi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/c0chi/subscriptions",
      "organizations_url": "https://api.github.com/users/c0chi/orgs",
      "repos_url": "https://api.github.com/users/c0chi/repos",
      "events_url": "https://api.github.com/users/c0chi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/c0chi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T13:28:39Z",
    "updated_at": "2018-03-21T13:28:39Z",
    "author_association": "NONE",
    "body": "Good point, @Agusx1211!  I can imagine so many uses for what you are proposing.\r\n\r\nYou could consider 2 additional optional arguments for ClaimOf, in order to get the count of a certain [type of claim] that occurred after a [given date] (0x0 interpreted as \"all”).\r\n\r\nI mean, I think in certain cases it's more useful to know if an identity has had \"bad claims\" (eg: \"defaulted debts\", \"identity theft\", etc.) or \"good claims\" (eg: \"verified passport\"; \" completed course \", etc).\r\n\r\nIn some cases, it could be interesting to know if a certain type of claim have “ever” occurred (e.g.: ”identity theft”), in other cases only the claims that have occurred \"lately\" (e.g.: ”defaults occurred in the last 24 months”).\r\n\r\nIt’s just a suggestion, of course there is always the possibility of using findClaims to get all the data.\r\nGreat work!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/374935998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375485753",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-375485753",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 375485753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTQ4NTc1Mw==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-22T23:03:47Z",
    "updated_at": "2018-03-22T23:06:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "The claims don't mean anything without knowing who is the issuer, it will be a bad practice for a contract to check only if an address has \"bad claims\" because that \"bad claims\" could be put there by anyone; so that call wouldn't return meaningful information. \r\n\r\nBut is not a bad idea to be able to check if an issuer did make claims on a subject in the past, the search should be gas efficient. Maybe we could keep track of the last claim of a subject from an issuer (with its corresponding type). ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375485753/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375892853",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-375892853",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 375892853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTg5Mjg1Mw==",
    "user": {
      "login": "c0chi",
      "id": 23640660,
      "node_id": "MDQ6VXNlcjIzNjQwNjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/23640660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/c0chi",
      "html_url": "https://github.com/c0chi",
      "followers_url": "https://api.github.com/users/c0chi/followers",
      "following_url": "https://api.github.com/users/c0chi/following{/other_user}",
      "gists_url": "https://api.github.com/users/c0chi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/c0chi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/c0chi/subscriptions",
      "organizations_url": "https://api.github.com/users/c0chi/orgs",
      "repos_url": "https://api.github.com/users/c0chi/repos",
      "events_url": "https://api.github.com/users/c0chi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/c0chi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-24T14:20:57Z",
    "updated_at": "2018-03-26T07:57:53Z",
    "author_association": "NONE",
    "body": "I agree. However, I think the biggest gain of what I mentioned is efficiency when identities have any or don't have at all claims of certain types. In some of these cases, you don't need to verify anything else.\r\nBut I agree, since anyone can issue a claim and there is no \"official\" list of issuers, it is always necessary to verify who has made the claim",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/375892853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376266466",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-376266466",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 376266466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjI2NjQ2Ng==",
    "user": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-26T18:31:26Z",
    "updated_at": "2018-03-26T18:31:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "1) Does the expression:\r\n(bytes32[] subjects, bytes32[] claimTypes, bytes[] data)\r\nhas an unique concatenation for\r\nkeccak256(bytes32[] subjects, bytes32[] claimTypes, bytes[] data) ?\r\n\r\nI remember Solidity keccak256() does concatenate all fields without separators or prefixed lengths.\r\n\r\nIf I'm correct,then the signature would also sign alternante versions of the claims where some values are moved between fields. Transaction front-running could be used to claim these alternate versions.\r\n\r\n2) I would like to have a more concrete examples of the use cases.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376266466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376372728",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-376372728",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 376372728,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjM3MjcyOA==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T02:12:14Z",
    "updated_at": "2018-03-27T02:12:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> 1. Does the expression:\r\n> (bytes32[] subjects, bytes32[] claimTypes, bytes[] data)\r\n> has an unique concatenation for\r\n> keccak256(bytes32[] subjects, bytes32[] claimTypes, bytes[] data) ?\r\n\r\nThe concatenation is wrong; It could be fixed adding a separator between the parameters of keccak256, maybe the length of the arrays. But this will only work for the first two inputs, bytes[] data it's a two-dimensional array, so the bytes could be re-arranged and still we would get the same hash.\r\n\r\nAlso, we have the limitation of Solidity not supporting multi-dimensional inputs in functions; this forces us to use the experimental ABI Encoder (not ready for production) or create our custom encoding for the data.\r\n\r\nI don't see a clean fix for this; we could store the length of every data entry on a different array, receive the data field as flat bytes and then split it using the length of every entry, this would be gas heavy, obscure and a kind of a hack.\r\n\r\nMaybe we should leave that feature out, at least until Solidity has better support for multi-dimensional arrays.\r\n\r\n> 2. I would like to have a more concrete examples of the use cases.\r\n\r\nThe use case, at least from our perspective, is to have a dynamic way to exchange identity and scoring information.\r\n\r\nThis kind of data varies between countries, companies, and use-cases; some companies could validate only emails, others proof of residency, passport, biometric data, social profiles, SSNs, etc. Each type of validation should have a claim type associated.\r\n\r\nEntities and apps on the network could search on the claim registry for all the claims that a subject has and with that build a profile. They could also emit claims if they have something to say about that profile. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/376372728/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377015666",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-377015666",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 377015666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzAxNTY2Ng==",
    "user": {
      "login": "gatra",
      "id": 4691170,
      "node_id": "MDQ6VXNlcjQ2OTExNzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4691170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gatra",
      "html_url": "https://github.com/gatra",
      "followers_url": "https://api.github.com/users/gatra/followers",
      "following_url": "https://api.github.com/users/gatra/following{/other_user}",
      "gists_url": "https://api.github.com/users/gatra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gatra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gatra/subscriptions",
      "organizations_url": "https://api.github.com/users/gatra/orgs",
      "repos_url": "https://api.github.com/users/gatra/repos",
      "events_url": "https://api.github.com/users/gatra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gatra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T19:56:55Z",
    "updated_at": "2018-03-28T19:56:55Z",
    "author_association": "NONE",
    "body": "Hi!\r\n\r\nYou have a typo here:\r\n    function findClaims(bytes32 sucject, address issuer, bytes32 claimType) public view returns (bytes32[] claims);\r\n\r\nthe first parameter should be \"subject\" instead of \"sucject\"",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377015666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377022872",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-377022872",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 377022872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzAyMjg3Mg==",
    "user": {
      "login": "gatra",
      "id": 4691170,
      "node_id": "MDQ6VXNlcjQ2OTExNzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4691170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gatra",
      "html_url": "https://github.com/gatra",
      "followers_url": "https://api.github.com/users/gatra/followers",
      "following_url": "https://api.github.com/users/gatra/following{/other_user}",
      "gists_url": "https://api.github.com/users/gatra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gatra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gatra/subscriptions",
      "organizations_url": "https://api.github.com/users/gatra/orgs",
      "repos_url": "https://api.github.com/users/gatra/repos",
      "events_url": "https://api.github.com/users/gatra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gatra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T20:21:07Z",
    "updated_at": "2018-03-28T20:21:33Z",
    "author_association": "NONE",
    "body": "just a comment: the interface seems sufficient, but using this interface it could be cumbersome to know if a claim was retracted or not. You would need to get all retractions for the subject (from the issuer) and then filter.\r\nSimilar thing if I wanted to get only un-retracted claims.\r\nDo I make sense? What other claim types did you have in mind?\r\n\r\nbtw, I like the idea of validateClaim. I wish ERC-20 had something like that...",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377022872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377046784",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-377046784",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 377046784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzA0Njc4NA==",
    "user": {
      "login": "MrTibbles",
      "id": 6398008,
      "node_id": "MDQ6VXNlcjYzOTgwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6398008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrTibbles",
      "html_url": "https://github.com/MrTibbles",
      "followers_url": "https://api.github.com/users/MrTibbles/followers",
      "following_url": "https://api.github.com/users/MrTibbles/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrTibbles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrTibbles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrTibbles/subscriptions",
      "organizations_url": "https://api.github.com/users/MrTibbles/orgs",
      "repos_url": "https://api.github.com/users/MrTibbles/repos",
      "events_url": "https://api.github.com/users/MrTibbles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrTibbles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T21:41:21Z",
    "updated_at": "2018-03-28T21:41:21Z",
    "author_association": "NONE",
    "body": "@Agusx1211 can you please explain the motivation behind this proposal over #735 ? Sure, refinement can be put toward both proposals, but unsure of reasoning behind a new _rival_ proposal. I have been waiting for someone to pose this question, but no one has done so, which i fear means i am missing something in regards to the crucial differing factor between this and #735. 🤷‍♂️",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377046784/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377533437",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-377533437",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 377533437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzUzMzQzNw==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-30T14:16:02Z",
    "updated_at": "2018-03-30T14:16:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gatra Currently, the only way of knowing that a claim was retracted is to search trow all the subject claims. This search is not possible for a smart contract and may be a limitation. \r\n\r\nTo allow claims to be deleted we should evaluate the pros and cons, and also define how to handle the signed claims (validateClaim).\r\n\r\nThe pros I see is that claims are permanent, in that is not the case, an issuer could emit a claim, use that claim to prove something and then delete it to mitigate the risk of making non-true claims\r\n\r\nThat is not healthy for the network and makes tricky to reference a claim from another contract because that reference could become invalid at any moment, maybe that could be fixed by not deleting it but just setting a flag.\r\n\r\nAnother approach to knowing if a claim is valid is to look at the timestamp; for some claim types would be a good idea to take into account if it was recent or not, for example, a proof of address should be recent to be valid, a proof of email not.\r\n\r\n@MrTibbles The key factor between this and #735 is that we unlink the identity of the subject from an ethereum address, in a sense is more a rival of #780, because it defines the subject of the claim in the claim itself.\r\n\r\nWhat we found working in RCN is that a lot of times we cannot rely on the final user having a private key to hold his identity, so we must generate a new identifier and build an abstract identity on that.\r\n\r\nAnother main difference is that here the claims are not limited to one per address + type, this is a huge limitation when you want to make claims that a given identity did something multiple times, for example, requested credit, paid a debt, made a payment, etc. \r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377533437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377692593",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-377692593",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 377692593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzY5MjU5Mw==",
    "user": {
      "login": "MrTibbles",
      "id": 6398008,
      "node_id": "MDQ6VXNlcjYzOTgwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6398008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrTibbles",
      "html_url": "https://github.com/MrTibbles",
      "followers_url": "https://api.github.com/users/MrTibbles/followers",
      "following_url": "https://api.github.com/users/MrTibbles/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrTibbles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrTibbles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrTibbles/subscriptions",
      "organizations_url": "https://api.github.com/users/MrTibbles/orgs",
      "repos_url": "https://api.github.com/users/MrTibbles/repos",
      "events_url": "https://api.github.com/users/MrTibbles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrTibbles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-31T13:21:34Z",
    "updated_at": "2018-03-31T13:21:34Z",
    "author_association": "NONE",
    "body": "@Agusx1211 i see, thanks. I can understand the source of motivation to handle subjects *not* having an EOA, ie. less friction for on-boarding. But does this not mean that the issuer and subject *must* have a trusted relationship? If the issuer is signing claims on behalf of the subject it could lead to misrepresentation, this could be seen as a red flag in a trustless environment.\r\n\r\nIn order for a disgruntled subject to assert a previously made claim about themselves was not accurate they would have to create an EOA, add a claim (`TYPE_RETRACTED_CLAIM`, i think) and then validate it? However, would that be wasted effort, considering the below?\r\n> the subject and the issuer should be the same as the claim to remove.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/377692593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378943166",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-378943166",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 378943166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODk0MzE2Ng==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T13:51:22Z",
    "updated_at": "2018-04-05T13:51:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MrTibbles Any entity can issue claims about any other subject. The validity of that claim does not have to do with the trust between the issuer and the subjet, but between the trust of the entity who is using that claim. The \"reputation\" of the issuer is in the stake.\r\n\r\nThe subject should not be able to remove claims made on itself, that feature would allow a subject to delete bad claims about them, making the system invalid for identity proof or credit scoring... \r\n\r\nA Subject could issue a claim with the type `TYPE_RETRACTED_CLAIM`, but that would create a situation like \"your word against mine,\" making the dispute pointless; maybe the subject could add a proof in the data.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/378943166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379645820",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-379645820",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 379645820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTY0NTgyMA==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T06:19:53Z",
    "updated_at": "2018-04-09T06:20:03Z",
    "author_association": "CONTRIBUTOR",
    "body": ">There is no method to reject, modify or remove claims, that operations should be implemented as further claims.\r\n\r\nI fairly disagree with this: we should work our contracts to use less resource possible, bloating state is not a good idea, especially when storage of information at Casper would be paid yearly, so keeping all this state in identity would become costy as more its used. \r\nYou can keep record of transactions if you want to rebuild history.  \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379645820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379684063",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-379684063",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 379684063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTY4NDA2Mw==",
    "user": {
      "login": "MrTibbles",
      "id": 6398008,
      "node_id": "MDQ6VXNlcjYzOTgwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6398008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrTibbles",
      "html_url": "https://github.com/MrTibbles",
      "followers_url": "https://api.github.com/users/MrTibbles/followers",
      "following_url": "https://api.github.com/users/MrTibbles/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrTibbles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrTibbles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrTibbles/subscriptions",
      "organizations_url": "https://api.github.com/users/MrTibbles/orgs",
      "repos_url": "https://api.github.com/users/MrTibbles/repos",
      "events_url": "https://api.github.com/users/MrTibbles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrTibbles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-09T09:01:47Z",
    "updated_at": "2018-04-09T09:01:47Z",
    "author_association": "NONE",
    "body": "@Agusx1211 \r\n> What we found working in RCN is that a lot of times we cannot rely on the final user having a private key to hold his identity, so we must generate a new identifier and build an abstract identity on that.\r\n\r\n> The validity of that claim does not have to do with the trust between the issuer and the subjet, but between the trust of the entity who is using that claim. The \"reputation\" of the issuer is in the stake.\r\n\r\nSo the end user/subject does not control the private key/the means for signing? That sounds trust-based.\r\n\r\n> The subject should not be able to remove claims made on itself, that feature would allow a subject to delete bad claims about them, making the system invalid for identity proof or credit scoring...\r\n\r\nI know, i agree, i did not suggest otherwise.\r\n\r\n> create a situation like \"your word against mine,\" making the dispute pointless\r\n\r\nIs that not the whole point of a claims system? Web-of-trust systems and staking mechanics come into play in order to surface the **most commonly accepted** claim.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/379684063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380913734",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-380913734",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 380913734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDkxMzczNA==",
    "user": {
      "login": "Agusx1211",
      "id": 12701942,
      "node_id": "MDQ6VXNlcjEyNzAxOTQy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12701942?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Agusx1211",
      "html_url": "https://github.com/Agusx1211",
      "followers_url": "https://api.github.com/users/Agusx1211/followers",
      "following_url": "https://api.github.com/users/Agusx1211/following{/other_user}",
      "gists_url": "https://api.github.com/users/Agusx1211/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Agusx1211/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Agusx1211/subscriptions",
      "organizations_url": "https://api.github.com/users/Agusx1211/orgs",
      "repos_url": "https://api.github.com/users/Agusx1211/repos",
      "events_url": "https://api.github.com/users/Agusx1211/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Agusx1211/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T19:10:52Z",
    "updated_at": "2018-04-12T19:10:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@3esmit We could not store the claims or add to them an expiration date, but I don't see how a \"remove claim\" function would mitigate the bloating problem.\r\n\r\nOn a side note, lots of projects are \"bloating\" the state, with the current version of Ethereum this is not a problem, the gas is only paid at the allocation of the storage. \r\n\r\nIF the Casper update ends up adding rent, that will change the whole ecosystem, not only this claim standard but also practically all the ERC721 and ERC20 tokens, I wouldn't think this standard with optimizations against the rest of the ecosystem.\r\n\r\n@MrTibbles Yes, it is a trust-based system, maybe a dispute claim would make sense if the issuer of the disputed claim is also trusted. In that scenario is up to the \"reader\" of the claims to decide which one is valid.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/380913734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382567016",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-382567016",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 382567016,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjU2NzAxNg==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-19T00:05:24Z",
    "updated_at": "2018-04-19T00:05:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Agusx1211 Good luck bloating your contracts when storage fee gets implemented in mainnet ;)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/382567016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400577463",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-400577463",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 400577463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDU3NzQ2Mw==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-27T07:52:41Z",
    "updated_at": "2018-06-27T07:52:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Agusx1211 the proposal looks the same like #735 as @MrTibbles mentioned. I see the point of having claims which would not need to go through an approval process. But 735 could also allow that, as its not enforced that it must be approved. I would like to put work on getting the standard for claims right once, even if you create a sub standard later, but at least know how to interact with those. So joining efforts makes more sense imo.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400577463/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426446958",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-426446958",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 426446958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjQ0Njk1OA==",
    "user": {
      "login": "bitcoinbrisbane",
      "id": 8411406,
      "node_id": "MDQ6VXNlcjg0MTE0MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8411406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoinbrisbane",
      "html_url": "https://github.com/bitcoinbrisbane",
      "followers_url": "https://api.github.com/users/bitcoinbrisbane/followers",
      "following_url": "https://api.github.com/users/bitcoinbrisbane/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitcoinbrisbane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitcoinbrisbane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitcoinbrisbane/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoinbrisbane/orgs",
      "repos_url": "https://api.github.com/users/bitcoinbrisbane/repos",
      "events_url": "https://api.github.com/users/bitcoinbrisbane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitcoinbrisbane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-02T22:08:06Z",
    "updated_at": "2018-10-02T22:08:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've looked at this and 735 too.  Why don't we have a field for expiry date?  Claim types like passport the document has an expiry.  A method hasExpired() could then assert if the document has etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426446958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291748",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-997291748",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 997291748,
    "node_id": "IC_kwDOAq426M47cXbk",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T22:11:13Z",
    "updated_at": "2021-12-18T22:11:13Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003634046",
    "html_url": "https://github.com/ethereum/EIPs/issues/939#issuecomment-1003634046",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/939",
    "id": 1003634046,
    "node_id": "IC_kwDOAq426M470j1-",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-01T23:11:41Z",
    "updated_at": "2022-01-01T23:11:41Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003634046/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
