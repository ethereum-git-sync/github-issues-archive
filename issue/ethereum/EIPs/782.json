{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/782",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/782/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/782/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/782/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/782",
  "id": 278387516,
  "node_id": "MDU6SXNzdWUyNzgzODc1MTY=",
  "number": 782,
  "title": "Killable Models for Recoverable Systems",
  "user": {
    "login": "3esmit",
    "id": 224810,
    "node_id": "MDQ6VXNlcjIyNDgxMA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/3esmit",
    "html_url": "https://github.com/3esmit",
    "followers_url": "https://api.github.com/users/3esmit/followers",
    "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
    "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
    "organizations_url": "https://api.github.com/users/3esmit/orgs",
    "repos_url": "https://api.github.com/users/3esmit/repos",
    "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
    "received_events_url": "https://api.github.com/users/3esmit/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2017-12-01T08:06:56Z",
  "updated_at": "2022-01-02T08:13:57Z",
  "closed_at": "2022-01-02T08:13:57Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n    EIP: 728\r\n    Title: Killable Models for Recoverable Systems\r\n    Author: @3esmit\r\n    Type: <Standard Track | Informational | Meta>\r\n    Category (*only required for Standard Track): <Core | Networking | Interface | ERC> \r\n    Status: Draft\r\n    Created: 2017-01-12\r\n\r\n\r\n\r\n## Simple Summary\r\nForwarder contracts that can be safely upgraded on selfdestruct of target contract model.\r\n\r\n## Abstract\r\nA simple and clear way of providing updatability+emergency stop in a smart contract consisting in:\r\n- A contract model is deployed and can be killed only by an authorized watchdog address. \r\n- A recoverer contract containing fixed rules of who can overwrite the model address\r\n- A forwarder contract that forwards to one address if its a contract and to another if not.\r\n\r\n## Motivation\r\nProvide a framework that can make any contract easily and safely upgradeable.\r\n\r\n## Specification\r\n\r\n```javascript\r\npragma solidity ^0.4.17;\r\n\r\n\r\n/**\r\n * @title BasicSystemStorage\r\n * @author Ricardo Guilherme Schmidt (Status Research & Development GmbH) \r\n * @dev Defines system vars in a shared library among Stub and SystemLibraries to \r\n * avoid overwriting wrong storage pointers\r\n */\r\ncontract BasicSystemStorage {    \r\n    address public system;\r\n    address public recover;\r\n    address public watchdog;\r\n}\r\n```\r\n\r\n```javascript\r\n/**\r\n * @title DelegatedCall\r\n * @author Ricardo Guilherme Schmidt (Status Research & Development GmbH) \r\n * @dev Abstract contract that delegates calls by `delegated` modifier to result of `_target()`\r\n */\r\ncontract DelegatedCall {\r\n    /**\r\n     * @dev delegates the call of this function\r\n     */\r\n    modifier delegated {\r\n        //require successfull delegate call to remote `_target()`\r\n        require(_target().delegatecall(msg.data));\r\n        assembly {\r\n            let outSize := returndatasize \r\n            let outDataPtr := mload(0x40) //load memory\r\n            mstore(0x40, add(outDataPtr, outSize)) //load up to return size\r\n            returndatacopy(outDataPtr, 0, outSize) //copy last return into pointer\r\n            return(outDataPtr, outSize) \r\n        }\r\n        _; //never will execute local logic\r\n    }\r\n\r\n    /**\r\n     * @dev defines the address for delegation of calls\r\n     */\r\n    function _target()\r\n        internal\r\n        constant\r\n        returns(address);\r\n\r\n}\r\n```\r\n\r\n```javascript\r\n/**\r\n* @title RecoverableSystem\r\n* @author Ricardo Guilherme Schmidt (Status Research & Development GmbH) \r\n* @dev Contract that recovers from dead system to recoverer.\r\n*/\r\ncontract RecoverableSystem is BasicSystemStorage, DelegatedCall {\r\n\r\n/**\r\n    * @dev Requires at least valid _recoverer, that can elect the first system.\r\n    * @param _system the first system\r\n    * @param _recover the recoverer contract \r\n    */\r\nfunction RecoverableSystem(address _system, address _recover) public {\r\n    require(isOk(_recover));\r\n    system = _system;\r\n    recover = _recover;\r\n}\r\n\r\n/**\r\n    * @dev delegatecall everything (but declared functions) to `_target()`\r\n    */\r\nfunction () external payable delegated {\r\n    //all goes to system (or recover)\r\n}\r\n\r\n/**\r\n    * @dev checks if system is not in recovery mode\r\n    */\r\nfunction isOk() public constant returns(bool a) {\r\n    return isOk(system);\r\n}\r\n\r\n/**\r\n    * @dev checks if `_a` contains code\r\n    */\r\nfunction isOk(address _a) internal constant returns(bool r) {\r\n    assembly{\r\n        r := gt(extcodesize(_a), 0)\r\n    }\r\n}\r\n\r\n    /**\r\n    * @dev returns system if system has code, otherwise return recover\r\n    */\r\nfunction _target()\r\n    internal\r\n    constant\r\n    returns(address)\r\n{\r\n\r\n    return isOk() ? system : recover;\r\n}\r\n\r\n}\r\n```\r\n\r\n```javascript\r\n/**\r\n * @title KillableModel\r\n * @author Ricardo Guilherme Schmidt (Status Research & Development GmbH) \r\n * @dev A contract model that can be killed by a watchdog\r\n */\r\ncontract KillableModel is BasicSystemStorage {\r\n\r\n     /**\r\n     * @dev Library contract constructor initialize watchdog, able to kill the Library in case of \r\n     */\r\n    function KillableModel(address _watchdog) public {\r\n        watchdog = _watchdog;\r\n    }\r\n\r\n    function emergencyStop() public {\r\n        require(msg.sender == watchdog);\r\n        selfdestruct(watchdog);\r\n    }\r\n\r\n}\r\n```\r\n\r\n```javascript\r\n/**\r\n * @title AbstractRecoverer\r\n * @author Ricardo Guilherme Schmidt (Status Research & Development GmbH) \r\n * @dev Abstract recoverer contract that should be crafted to alter `address system` storage \r\n * in delegated logic contracts.\r\n */\r\ncontract AbstractRecoverer is BasicSystemStorage {\r\n    \r\n     /**\r\n     * @dev will be callable in emergency state of RecorverableSystem\r\n     */\r\n    function recoverSystem(address newSystem) public {\r\n        require(msg.sender == consensusContract());\r\n        require(isOk(newSystem));\r\n        system = newSystem;\r\n    }\r\n    \r\n    /**\r\n     * @dev checks if `_a` contains code\r\n     */\r\n    function isOk(address _a) internal constant returns(bool r) {\r\n        assembly{\r\n            r := gt(extcodesize(_a), 0)\r\n        }\r\n    }\r\n    \r\n     /**\r\n     * @dev returns the consesus contract, can be a multisig or other DAO\r\n     * should be implemented by a child contract\r\n     */\r\n    function consensusContract() public constant returns(address);\r\n\r\n\r\n}\r\n```\r\n\r\n```javascript\r\n/**\r\n* @title ENSRecoverer\r\n* @author Ricardo Guilherme Schmidt (Status Research & Development GmbH) \r\n* @dev Common abstract recoverer resolved from ens.\r\n*/\r\ncontract ENSRecoverer is AbstractRecoverer {\r\n    /**\r\n    * @dev resolves consensusContract from ens.\r\n    */\r\n    function consensusContract() public constant returns(address) {\r\n        bytes32 node = ensNode();\r\n        return ensRoot().resolver(node).addr(node);\r\n    }\r\n\r\n    function ensNode() public constant returns(bytes32);\r\n    function ensRoot() public constant returns(ENS);\r\n\r\n}\r\n\r\n```\r\n\r\n\r\n## Rationale\r\nThe selfdestruct of old model grantee that emergency stop indeed stops everything, also that updatability are managed outside of the main contract definition, allowing a consistent behavior of updatability notwithstanding of the model definitions. \r\nThe model perhmits that the develop of application contracts can simply be ported through the heritance of KilliableModel and a rewrite of constructor in a initialization function, that must be taken care of do some kind of verifiation on initialization variables, or even including a \"initializated\" private boolean to enforce. \r\nAdopting a standard, such as \r\n```\r\n    address public system;  //should be 0x0 at KillableModel instances\r\n    address public recover; //should be 0x0 at KillableModel instances\r\n    address public watchdog; //should be 0x0 for RecoverableSystem instances\r\n    function isOk() public constant returns(bool ok);\r\n``` \r\nthe block explorers could better handle the forwarder contracts that use this (or similar) specification, such as grabbing the ABI from the target model. \r\n\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/782/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/782/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997341495",
    "html_url": "https://github.com/ethereum/EIPs/issues/782#issuecomment-997341495",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/782",
    "id": 997341495,
    "node_id": "IC_kwDOAq426M47cjk3",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-19T07:11:41Z",
    "updated_at": "2021-12-19T07:11:41Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997341495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003679167",
    "html_url": "https://github.com/ethereum/EIPs/issues/782#issuecomment-1003679167",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/782",
    "id": 1003679167,
    "node_id": "IC_kwDOAq426M470u2_",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T08:13:56Z",
    "updated_at": "2022-01-02T08:13:56Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003679167/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
