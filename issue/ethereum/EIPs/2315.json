{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2315",
  "id": 508779729,
  "node_id": "MDU6SXNzdWU1MDg3Nzk3Mjk=",
  "number": 2315,
  "title": "Simple Subroutines for the EVM",
  "user": {
    "login": "gcolvin",
    "id": 16827129,
    "node_id": "MDQ6VXNlcjE2ODI3MTI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gcolvin",
    "html_url": "https://github.com/gcolvin",
    "followers_url": "https://api.github.com/users/gcolvin/followers",
    "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
    "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
    "organizations_url": "https://api.github.com/users/gcolvin/orgs",
    "repos_url": "https://api.github.com/users/gcolvin/repos",
    "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gcolvin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 20,
  "created_at": "2019-10-17T23:58:56Z",
  "updated_at": "2022-01-30T02:32:37Z",
  "closed_at": "2021-09-23T18:26:34Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\neip: 2315\r\ntitle: Simple Subroutines for the EVM\r\ndescription: Introduces two opcodes to support simple subroutines\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: Core\r\nauthor: Greg Colvin (@gcolvin), Greg Colvin <greg@colvin.org>, Martin Holst Swende (@holiman), Brooklyn Zelenka (@expede)\r\ndiscussions-to: https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941\r\ncreated: 2019-10-17\r\nrequires: 3540, 3670, 3779, 4200\r\n---\r\n\r\n## Abstract\r\n\r\nThis proposal introduces two opcodes to support simple subroutines: `RJUMPSUB` and `RETURNSUB`.\r\n\r\nTaken together with other recent propoposals it provides an _efficient_, _static_, and _safe_ control-flow facility.\r\n\r\n## Motivation\r\n\r\nThe EVM does not provide subroutines as primitives.\r\n\r\nInstead, calls can be synthesized by fetching and pushing the return address and subroutine address on the data stack and executing a `JUMP` to the subroutine; returns can be synthesized by getting the return address to the top of the stack and jumping back to it.  These conventions cost gas and use stack slots unnecessarily.  And they create unnecessary complexity that is borne by the humans and programs writing, reading, and analyzing EVM code.\r\n\r\n### Subroutines \r\n\r\nAs an alternative, we propose to provide for subroutines with two simple operations:\r\n* `RJUMPSUB` to call a subroutine and\r\n* `RETURNSUB` to return from it.\r\n\r\nTaken together with other required propoposals they provide an _efficient, static, complete, and safe_ control-flow facility.\r\n\r\n_Efficient_.  Substantial reductions in the complexity and the gas costs of calling and optimizing simple subroutines -- as much as 56% savings in gas in the analysis below.  Substantial performance advantages for static jumps are [reported elsewhere](./eip-4200.md).\r\n\r\n_Static_.  All possible jumps are known at contract creation time.\r\n\r\n_Complete_.  Together with EIP-4200 it provides a minimal set of control structures for implementing programs -- jumps, conditional jumps, and subroutines.\r\n\r\n_Safe_.  Valid programs will not halt with an exception unless they run out of gas or recursively overflow stack.\r\n\r\n### Prior Art\r\n\r\nFacilities to directly support subroutines are provided by all but one of the real and virtual machines we have programmed. This includes physical machines like the Burroughs 5000, CDC 7600, IBM 360, DEC PDP 11 and VAX, Motorola 68000, Sun SPARC, ARM, and a few generations of Intel x86; as well as virtual machines for Lisp, Pascal, Java, Wasm, and the sole exception -- the EVM.  The details and complexity vary, but in whatever form these facilities provide for\r\n* capturing the current context of execution,\r\n* transferring control to a new context, and \r\n* returning to the original context\r\n   * after possible further transfers of control\r\n   * to some arbitrary depth.\r\n\r\nOver the years, for the machines we have programmed, native subroutine operations have proven their value for efficient implementation and simple coding of subroutines.\r\n\r\n#### Original Design\r\n\r\nThe [first specification](https://academic.oupnne.com/comjnl/article/20/3/269/751954) of subroutines for a real machine goes back to [Turing's Automatic Computing Engine of 1946](http://www.alanturing.net/turing_archive/archive/p/p01/P01-001.html):\r\n> We also wish to be able to arrange for the splitting up of operations into subsidiary operations.  This should be done in such a way that once we have written down how an operation is done we can use it as a subsidiary to any other operation.\r\n>  ... \r\n> When we wish to start on a subsidiary operation we need only make a note of where we left off the major operation and then apply the first instruction of the subsidiary.  When the subsidiary is over we look up the note [on] a list of these notes in one or more standard size delay lines, (1024) with the most recent last.\r\n\r\nTurings's machine held data in delay lines made of mercury-filled crystals.  We have better hardware now, but the concept is simple and by now familiar.  In less archaic language, Turing's full specification is that:\r\n* The \"subsidiary operations\" are subroutines.\r\n* The \"list of notes\" is a stack of return addresses.\r\n* When a subroutine is called\r\n  * the current program address is pushed on the stack, and\r\n  * control transfers to \"apply the first instruction of the subsidiary\" at the subroutine address.\r\n* When a subroutine returns\r\n  * the return address is popped off of the stack and\r\n  * control transfers to the instruction at the return address.\r\n\r\nThis design still sees use by virtual machines for Lisp, Forth, Java, Wasm and others.\r\n\r\n## Specification\r\n\r\nWe propose to follow Turing's original specification, as applied to the EVM architecture.  We support calls and returns with a `return stack` of return addresses. The EVM`return stack`, like the EVM `data stack`, is limited to `1024` items. This `return stack` is accessed via two new subroutine instructions.\r\n\r\n### Instructions\r\n\r\n#### `RJUMPSUB (0x5e) jmpdest`\r\n\r\n> Transfers control to a subroutine.  The destination address is relative to the current PC. \r\n>\r\n> * Decode the `jmpdest` from the immediate data.\r\n>    * The data is encoded as a two-byte, twos-complement signed integer, stored MSB-first.\r\n> * Push `PC + 1` on the `return stack`.\r\n> * Set `PC` to `PC + jmpdest`.\r\n\r\nThe cost is _low_.\r\n\r\n#### `RETURNSUB (0x5f)`\r\n\r\n> Returns control to the caller of a subroutine.\r\n> \r\n> *  Pop `PC` off the `return stack`.\r\n>\r\n> The cost is _verylow_.\r\n\r\n_Notes:_\r\n* _If a resulting `PC` to be executed is beyond the last instruction then the opcode is implicitly a `STOP`, which is not an error._\r\n* _Values popped off the `return stack` do not need to be validated, since they are alterable only by `RJUMPSUB` and `RETURNSUB`._ \r\n* _The description above lays out the semantics of these instructions in terms of a `return stack`.  But the actual state of the `return stack` is not observable by EVM code or consensus-critical to the protocol.  (For example, a node implementer may code `RJUMPSUB` to unobservably push `PC` on the `return stack` rather than `PC + 1`, which is allowed so long as `RETURNSUB` observably returns control to the `PC + 1` location.)_\r\n* _The `return stack` is the functional equivalent of Turing's \"delay line\"._\r\n\r\nThe _low_ cost of `RJUMPSUB` versus `JUMP` is justified by needing only to add the immediate two byte destination to the `PC` and push the return address on the `return stack`, all using native arithmetric, versus using the data stack with emulated 256-bit instructions.\r\n\r\nThe _verylow_ cost of `RETURNSUB` is justified by needing only to pop the `return stack` into the `PC`.  Benchmarking will be needed to tell if the costs are well-balanced.\r\n\r\n### Safety\r\n\r\nWe define safety here as avoiding exceptional halting states, as defined in the Yellow Paper.  A validator can always detect three of these states at _validation time_:\r\n* Insufficient stack items\r\n* Invalid jump destination\r\n* Invalid instruction\r\n\r\nA validator can detect stack overflow only for non-recursive programs, so two states will still require tests at _runtime_:\r\n* Stack overflow\r\n* Insufficient gas \r\n\r\n[EIP-3779: Safer Control Flow for the EVM](./eip-3779.md) specifies initialization-time validation to detect invalid contracts.\r\n\r\n## Rationale\r\n\r\nBelow we explore the advantages of have a subroutines as primitives, design alternatives, and the reasons for our choice of specification.\r\n\r\n### Efficiency Analysis\r\n\r\nWe show here how subroutine instructions can be used to reduce the complexity and gas costs of both ordinary and optimized subroutine calls compared to using `JUMP`.\r\n\r\n#### **Simple Subroutine Call**\r\n\r\nConsider this example of calling a fairly minimal subroutine.\r\n\r\nSubroutine call, using `JUMP`:\r\n```\r\nTEST_SQUARE:\r\n    jumpdest        ; 1 gas\r\n    RTN_SQUARE      ; 3 gas\r\n    0x02            ; 3 gas\r\n    SQUARE          ; 3 gas\r\n    jump            ; 8 gas\r\nRTN_SQUARE:\r\n    jumpdest        ; 1 gas\r\n    swap1           ; 3 gas\r\n    jump            ; 8 gas\r\n\r\nSQUARE:\r\n    jumpdest        ; 1 gas\r\n    dup1            ; 3 gas\r\n    mul             ; 5 gas\r\n    swap1           ; 3 gas\r\n    jump            ; 8 gas\r\n```\r\n_Total: 50 gas_\r\n\r\nSubroutine call, using `RJUMPSUB`:\r\n```\r\nTEST_SQUARE:\r\n    0x02            ; 3 gas\r\n    rjumpsub SQUARE ; 5 gas\r\n    returnsub       ; 3 gas\r\n\r\nSQUARE:\r\n    dup1            ; 3 gas\r\n    mul             ; 5 gas\r\n    returnsub       ; 3 gas\r\n```\r\n_Total 22 gas._\r\n\r\nUsing `RJUMPSUB` versus `JUMP` saves _50 - 22 = 28 gas_ -- a _56%_ improvement.\r\n\r\n#### **Tail Call Optimization**\r\n\r\nOf course in cases like this one we can optimize the tail call, so that the return from `SQUARE` actually returns from `TEST_SQUARE`.\r\n\r\nTail call optimization, using `JUMP`:\r\n```\r\nTEST_SQUARE:\r\n    jumpdest        ; 1 gas\r\n    0x02            ; 3 gas\r\n    SQUARE          ; 3 gas\r\n    jump            ; 8 gas\r\n\r\nSQUARE:\r\n    jumpdest        ; 1 gas\r\n    dup1            ; 3 gas\r\n    mul             ; 5 gas\r\n    swap1           ; 3 gas\r\n    jump            ; 8 gas\r\n```\r\n_Total: 33 gas_\r\n\r\nTail call optimization, using `RJUMP` and `RETURNSUB`:\r\n```\r\nTEST_SQUARE:\r\n    0x02            ; 3 gas\r\n    rjump SQUARE    ; 3 gas\r\n\r\nSQUARE:\r\n    dup1            ; 3 gas\r\n    mul             ; 5 gas\r\n    returnsub       ; 3 gas\r\n```\r\n\r\n_Total: 17 gas_\r\n\r\nUsing `RJUMPSUB` versus `JUMP` saves _33 - 17 = 16_ gas -- a _48%_ improvement.\r\n\r\n####  **Call Using Data Stack**\r\n\r\nWe can also consider an alternative call mechanism -- call it `DATASUB` -- that pushes its return address on the `data_stack`:\r\n```\r\nTEST_SQUARE:\r\n    0x02            ; 3 gas\r\n    datasub SQUARE  ; 6 gas\r\n    returnsub       ; 3 gas\r\n\r\nSQUARE:\r\n    dup1            ; 3 gas\r\n    mul             ; 5 gas\r\n    swap1           ; 3 gas\r\n    returnsub       ; 3 gas\r\n```\r\n\r\n_Total 26 gas._\r\n\r\nUsing `DATASUB` versus `JUMP` saves _50 - 26 = 24 gas_ -- a _48%_ improvement.\r\n\r\nBy comparison, the `RJUMPSUB` version saves _28 gas_ -- a _56%_ improvement.\r\n\r\n_Note: The gas cost for `DATASUB` is 6 here versus 5 for `RJUMPSUB` because using the wide-integer `data_stack` is less efficient than using a stack of native integers._\r\n\r\n#### Conlusion\r\n\r\nWe can see that these instructions provide a simpler and more gas-efficient subroutine mechanism than using `JUMP`.\r\n\r\nClearly, the benefits of these efficiencies are greater for programs that have been factored into smaller subroutines, but a routine could use _200 more gas_ than our first example and `RJUMPSUB` would still use better than _10% less gas_ than `JUMP`.\r\n\r\n_Note:  A _stack rotation_ operator to move items on the stack and implicitly shift the intervening items could simplify code using `JUMP`. It would be a potentionally expensive operation with a dynamic gas cost._\r\n\r\n### Design Alternatives\r\n\r\nThere are at least two designs for a subroutine facility.\r\n\r\n**Turing's design** keeps return addresses on a dedicated stack.\r\n\r\nAs specified above, the instruction to call a subroutine will\r\n* Push the return address onto the return address stack.\r\n* Jump to the first instruction of the subroutine.\r\n\r\nAnd the instruction to return from a subroutine will\r\n* Jump to the address popped off of the return address stack.\r\n\r\nWe have chosen Turing's design, as have Forth, Java, Wasm, and others.  On a stack machine almost all computation is done on the stack, and on these machines the return information is not conveniently \r\n\r\nFor these machines, an advantage of keeping a separate return stack is that it leaves to the implementation the representation of the data stack, which can remain opaque to the user.  All that matters is that calls and returns work.\r\n\r\n**An alternative design** is to keep return addresses on the `data stack`. \r\n\r\nThe instruction to call a subroutine will:\r\n* Push the return address onto the `data stack`.\r\n* Jump to the first instruction of the subroutine.\r\n\r\nThe instruction to return from a subroutine will:\r\n* _Ensure that the return address is the first element on the stack._\r\n* Jump to the address popped off of the `data stack`.\r\n\r\nThis design became popular on silicon in the 1970's and remains so.  Examples include the PDP 11, VAX, M68000, SPARC, and x86.  These are all register machines, not stack machines.  The registers are used for computation, and the stack is used by subroutine calls for return addresses and call frames.\r\n\r\nFor all of these machines instruction addresses fit efficiently into machine words on the `data stack`.\r\n\r\nWe give an example of this alternative design above.\r\n\r\n**We prefer** Turing's design for a few reasons.\r\n* It maintains a clear separation between calculation and flow of control: the data stack is uncluttered with vulnerable return addresses and it's impossible to overwrite the return stack.\r\n* It improves efficiency by\r\n  * using native arithmetic rather than 256-bit EVM instructions for the return address,\r\n  * not using a `data stack` slot for the return address,\r\n  * and not imposing a need to swap items around return addresses and return addresses around items.\r\n* It has a 76-year history of success, especially on stack machines.\r\n\r\nKeeping code simple is good.  And keeping control flow opaque has clear safety advantages -- the state of the VM -- the stack, frame, and instruction pointers -- is not made visible or mutable as data.  \r\n\r\nFinally, given that the EVM is a stack machine with very wide words, the performance advantages and the decades of successful use of Turing's design by similar machines weighed heavily in our decision.\r\n\r\n## Backwards Compatibility\r\n\r\nThese changes affect the semantics of existing EVM code: bytes that would have been interpreted as valid jump destinations may now be interpreted as immediate data.  Since this proposal depends on the Ethereum Object Format to signal the change this is not a practical issue. \r\n\r\n## Test Cases\r\n\r\n### Simple routine\r\n\r\nThis should jump into a subroutine, back out and stop.\r\n\r\nBytecode: `0x60045e005b5d` (`PUSH1 0x04, JUMPSUB, STOP, JUMPDEST, RETURNSUB`)\r\n\r\n|  Pc   |      Op     | Cost |   Stack   |   RStack  |\r\n|-------|-------------|------|-----------|-----------|\r\n|    0  |    JUMPSUB  |    5 |        [] |        [] |\r\n|    3  |  RETURNSUB  |    5 |        [] |       [0] |\r\n|    4  |       STOP  |    0 |        [] |        [] |\r\n\r\nOutput: 0x\r\nConsumed gas: `10`\r\n\r\n### Two levels of subroutines\r\n\r\nThis should execute fine, going into one two depths of subroutines\r\n\r\nBytecode: `0x\r\n00000000000000c5e005b60115e5d5b5d` (`PUSH9 0x00000000000000000c, JUMPSUB, STOP, JUMPDEST, PUSH1 0x11, JUMPSUB, RETURNSUB, JUMPDEST, RETURNSUB`)\r\n\r\n|  Pc   |      Op     | Cost |   Stack   |   RStack  |\r\n|-------|-------------|------|-----------|-----------|\r\n|    0  |    JUMPSUB  |    5 |        [] |        [] |\r\n|    3  |    JUMPSUB  |    5 |        [] |       [0] |\r\n|    4  |  RETURNSUB  |    5 |        [] |     [0,3] |\r\n|    5  |  RETURNSUB  |    5 |        [] |       [3] |\r\n|    6  |       STOP  |    0 |        [] |        [] |\r\n\r\nConsumed gas: `20`\r\n\r\n### Failure 1: invalid jump\r\n\r\nThis should fail, since the given location is outside of the code-range. The code is the same as previous example, \r\nexcept that the pushed location is `0x01000000000000000c` instead of `0x0c`.\r\n\r\nBytecode: (`PUSH9 0x01000000000000000c, JUMPSUB, `0x6801000000000000000c5e005b60115e5d5b5d`, STOP, JUMPDEST, PUSH1 0x11, JUMPSUB, RETURNSUB, JUMPDEST, RETURNSUB`)\r\n\r\n|  Pc   |      Op     | Cost |   Stack   |   RStack  |\r\n|-------|-------------|------|-----------|-----------|\r\n|    0  |    JUMPSUB  |   10 |[18446744073709551628] |        [] |\r\n\r\n```\r\nError: at pc=10, op=JUMPSUB: invalid jump destination\r\n```\r\n\r\n### Failure 2: shallow `return stack`\r\n\r\nThis should fail at first opcode, due to shallow `return_stack`\r\n\r\nBytecode: `0x5d5858` (`RETURNSUB, PC, PC`)\r\n\r\n|  Pc   |      Op     | Cost |   Stack   |   RStack  |\r\n|-------|-------------|------|-----------|-----------|\r\n|    0  |  RETURNSUB  |    5 |        [] |        [] |\r\n\r\n```\r\nError: at pc=0, op=RETURNSUB: invalid retsub\r\n```\r\n\r\n### Subroutine at end of code\r\n\r\nIn this example. the JUMPSUB is on the last byte of code. When the subroutine returns, it should hit the 'virtual stop' _after_ the bytecode, and not exit with error\r\n\r\nBytecode: `0x6005565b5d5b60035e` (`PUSH1 0x05, JUMP, JUMPDEST, RETURNSUB, JUMPDEST, PUSH1 0x03, JUMPSUB`)\r\n\r\n|  Pc   |      Op     | Cost |   Stack   |   RStack  |\r\n|-------|-------------|------|-----------|-----------|\r\n|    0  |      PUSH1  |    3 |        [] |        [] |\r\n|    2  |       JUMP  |    8 |       [5] |        [] |\r\n|    5  |   JUMPDEST  |    1 |        [] |        [] |\r\n|    6  |    JUMPSUB  |    5 |        [] |        [] |\r\n|    2  |  RETURNSUB  |    5 |        [] |       [2] |\r\n|    7  |       STOP  |    0 |        [] |        [] |\r\n\r\nConsumed gas: `30`\r\n\r\n## Security Considerations\r\n\r\nThese changes introduce new flow control instructions.  They do not introduce any new security considerations. In concert with [EIP-3779: Safer Control Flow for the EVM](./eip-3779.md) they will increase security by providing for validated control flow.\r\n\r\n## References\r\n\r\nA.M. Turing, \"Proposals for the development in the Mathematics Division of an Automatic Computing Engine (ACE).\" Report E882, Executive Committee, NPL February 1946.  Available: http://www.alanturing.net/turing_archive/archive/p/p01/P01-001.htm\r\n\r\nB.E. Carpenter, R.W. Doran, \"The other Turing machine.\"\r\nThe Computer Journal, Volume 20, Issue 3, January 1977.  Available: https://doi.org/10.1093/comjnl/20.3.269\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "gcolvin",
    "id": 16827129,
    "node_id": "MDQ6VXNlcjE2ODI3MTI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gcolvin",
    "html_url": "https://github.com/gcolvin",
    "followers_url": "https://api.github.com/users/gcolvin/followers",
    "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
    "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
    "organizations_url": "https://api.github.com/users/gcolvin/orgs",
    "repos_url": "https://api.github.com/users/gcolvin/repos",
    "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gcolvin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2315/reactions",
    "total_count": 11,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 5,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543713409",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-543713409",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 543713409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MzcxMzQwOQ==",
    "user": {
      "login": "lialan",
      "id": 450283,
      "node_id": "MDQ6VXNlcjQ1MDI4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/450283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lialan",
      "html_url": "https://github.com/lialan",
      "followers_url": "https://api.github.com/users/lialan/followers",
      "following_url": "https://api.github.com/users/lialan/following{/other_user}",
      "gists_url": "https://api.github.com/users/lialan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lialan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lialan/subscriptions",
      "organizations_url": "https://api.github.com/users/lialan/orgs",
      "repos_url": "https://api.github.com/users/lialan/repos",
      "events_url": "https://api.github.com/users/lialan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lialan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-18T12:24:50Z",
    "updated_at": "2019-10-18T12:24:50Z",
    "author_association": "NONE",
    "body": "After EIP615 died, here is another chance to improve this archaic-ish VM architecture. I myself wholeheartedly wish this can be accepted. \r\n\r\nI work on compilers and virtual machines. Here is my personal evaluation:\r\n* **Compiler support** : very, very simple\r\n* **VM support**: simple and backward compatible\r\n* **Impact**: HUGE, though not as big as EIP615, but let's take baby steps\r\n* **Gas impact**: slightly saves gas. \r\n\r\nI also wish `SUB` could take a parameter -- making it a 3 byte instruction. I don't understand people's fear of instructions longer than one byte.\r\n\r\n\r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543713409/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543764326",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-543764326",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 543764326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0Mzc2NDMyNg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-18T14:08:52Z",
    "updated_at": "2019-10-18T14:08:52Z",
    "author_association": "MEMBER",
    "body": "> I also wish SUB could take a parameter -- making it a 3 byte instruction.\r\n\r\nThis is one of the reasons EIP-615 run into issues.\r\n\r\n> I don't understand people's fear of instructions longer than one byte.\r\n\r\nI'm really in favor of having multi-byte instructions, but that requires EVM versioning. An example why doing it without versioning is risky is demonstrated here: https://ethereum-magicians.org/t/eip-663-unlimited-swap-and-dup-instructions/3346/11",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543764326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543830662",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-543830662",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 543830662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MzgzMDY2Mg==",
    "user": {
      "login": "lialan",
      "id": 450283,
      "node_id": "MDQ6VXNlcjQ1MDI4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/450283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lialan",
      "html_url": "https://github.com/lialan",
      "followers_url": "https://api.github.com/users/lialan/followers",
      "following_url": "https://api.github.com/users/lialan/following{/other_user}",
      "gists_url": "https://api.github.com/users/lialan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lialan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lialan/subscriptions",
      "organizations_url": "https://api.github.com/users/lialan/orgs",
      "repos_url": "https://api.github.com/users/lialan/repos",
      "events_url": "https://api.github.com/users/lialan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lialan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-18T16:45:19Z",
    "updated_at": "2019-10-18T16:45:19Z",
    "author_association": "NONE",
    "body": "@axic That specific problem exists already because we have variable opcodes (`PUSH`) from the beginning. Also, if the analysis is smart enough, it should be able to detect that we are jumping into the middle of an instruction.\r\n\r\nAnd what is the best way to avoid that? Make dynamic jumps obsolete -- that was in the EIP615 proposal!\r\n\r\nI also think EVM versioning will happen sooner or later, unless we want to forever keep EVM as is. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/543830662/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544142798",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-544142798",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 544142798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDE0Mjc5OA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-19T13:16:14Z",
    "updated_at": "2019-10-19T13:16:14Z",
    "author_association": "MEMBER",
    "body": "> That specific problem exists already because we have variable opcodes (PUSH) from the beginning.\r\n\r\nAs you say that opcode is there since the beginning, which means every VM and tool is prepared for it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544142798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544274109",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-544274109",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 544274109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDI3NDEwOQ==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-20T17:40:20Z",
    "updated_at": "2019-10-20T17:40:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, the PUSH opcodes specify how much immediate data to push, whereas BEGINSUB needs a variable amount of immediate data because different subroutines can take different numbers of arguments.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544274109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544274312",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-544274312",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 544274312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDI3NDMxMg==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-20T17:42:50Z",
    "updated_at": "2019-10-20T17:43:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Edited for longer names, and to give `RETURNSUB` the same semantics as #615 -- restoring `SP` to that of the caller.  This makes it much easier to use and increases forwards compatibility.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544274312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544319777",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-544319777",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 544319777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDMxOTc3Nw==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-21T01:56:38Z",
    "updated_at": "2019-10-21T03:03:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nope, can't use RETURNSUB semantics without BEGINSUB.  Sigh.  Upside is you can write functions that take and return a variable number of arguments.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544319777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544756400",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-544756400",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 544756400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDc1NjQwMA==",
    "user": {
      "login": "lialan",
      "id": 450283,
      "node_id": "MDQ6VXNlcjQ1MDI4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/450283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lialan",
      "html_url": "https://github.com/lialan",
      "followers_url": "https://api.github.com/users/lialan/followers",
      "following_url": "https://api.github.com/users/lialan/following{/other_user}",
      "gists_url": "https://api.github.com/users/lialan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lialan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lialan/subscriptions",
      "organizations_url": "https://api.github.com/users/lialan/orgs",
      "repos_url": "https://api.github.com/users/lialan/repos",
      "events_url": "https://api.github.com/users/lialan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lialan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-21T23:59:04Z",
    "updated_at": "2019-10-21T23:59:04Z",
    "author_association": "NONE",
    "body": "> BEGINSUB needs a variable amount of immediate data because different subroutines can take different numbers of arguments.\r\n\r\nI think only the 2-byte jump target address as immediate operand is good enough, or we can have an additional \"number of arguments pushed on stack\" byte in `BEGINSUB`.\r\n\r\nHaving static subroutine jumps is big deal, the good thing is that if we do it now, it will not break the existing convention.\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544756400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545141818",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-545141818",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 545141818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTE0MTgxOA==",
    "user": {
      "login": "lialan",
      "id": 450283,
      "node_id": "MDQ6VXNlcjQ1MDI4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/450283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lialan",
      "html_url": "https://github.com/lialan",
      "followers_url": "https://api.github.com/users/lialan/followers",
      "following_url": "https://api.github.com/users/lialan/following{/other_user}",
      "gists_url": "https://api.github.com/users/lialan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lialan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lialan/subscriptions",
      "organizations_url": "https://api.github.com/users/lialan/orgs",
      "repos_url": "https://api.github.com/users/lialan/repos",
      "events_url": "https://api.github.com/users/lialan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lialan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T20:34:09Z",
    "updated_at": "2019-10-22T20:34:09Z",
    "author_association": "NONE",
    "body": "So another opcode for tagging the target address of subroutines. This will deliberately disallow previous internal calling convention (using `JUMP`/`JUMPI`) using the subroutine.\r\n\r\nWe know that we definitely don't want this kinds of backward compatibilities, but I feel that it will create a little bit of inconsistency. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545141818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/548303696",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-548303696",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 548303696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODMwMzY5Ng==",
    "user": {
      "login": "MrChico",
      "id": 8930559,
      "node_id": "MDQ6VXNlcjg5MzA1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8930559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrChico",
      "html_url": "https://github.com/MrChico",
      "followers_url": "https://api.github.com/users/MrChico/followers",
      "following_url": "https://api.github.com/users/MrChico/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrChico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrChico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrChico/subscriptions",
      "organizations_url": "https://api.github.com/users/MrChico/orgs",
      "repos_url": "https://api.github.com/users/MrChico/repos",
      "events_url": "https://api.github.com/users/MrChico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrChico/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-31T10:24:28Z",
    "updated_at": "2019-10-31T10:24:28Z",
    "author_association": "MEMBER",
    "body": "@gcolvin can you clarify a few things? \r\nThe current wording mentions how `SP` is initially set but then never mentions it again. Is `SP` still relevant to this proposal?\r\nAm I correct in understanding that when encountering a `GOSUB`, the entire data stack is pushed to the return stack and then cleared? \r\nAnd that upon a `RETSUB`, the current data stack is disregarded and the entire return stack is pushed to the data stack and cleared? Or only the part of it that came from the last `GOSUB`? If so, how are we keeping track of this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/548303696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/548970451",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-548970451",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 548970451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODk3MDQ1MQ==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T22:22:36Z",
    "updated_at": "2019-11-01T22:22:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@lialan Thanks.\r\nThere is now a SUBDEST opcode to tag valid GOSUB targets.  There are no restrictions here on how these instructions are used.  E.g. multiple entry points, jumps into and out of subroutines, and other abominations are allowed.  It's up to language and tool implementers to establish best practices.  To the extent that they can be statically checked some things could be validated before runtime per @shemnon' s https://github.com/shemnon/EIPs/pull/1.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/548970451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/548970660",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-548970660",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 548970660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODk3MDY2MA==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T22:23:33Z",
    "updated_at": "2019-11-01T22:23:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MrChico Thanks.\r\nSP is unused, so I've removed it.  It's unused because GOSUB and RETSUB have no effect on the data stack--it's up to the caller.  This often happens by default on a stack machine:  the caller pushes arguments which are consumed by the callee, leaving any results on the stack.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/548970660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/549421804",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-549421804",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 549421804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTQyMTgwNA==",
    "user": {
      "login": "shemnon",
      "id": 38109,
      "node_id": "MDQ6VXNlcjM4MTA5",
      "avatar_url": "https://avatars.githubusercontent.com/u/38109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shemnon",
      "html_url": "https://github.com/shemnon",
      "followers_url": "https://api.github.com/users/shemnon/followers",
      "following_url": "https://api.github.com/users/shemnon/following{/other_user}",
      "gists_url": "https://api.github.com/users/shemnon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shemnon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shemnon/subscriptions",
      "organizations_url": "https://api.github.com/users/shemnon/orgs",
      "repos_url": "https://api.github.com/users/shemnon/repos",
      "events_url": "https://api.github.com/users/shemnon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shemnon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-04T16:02:12Z",
    "updated_at": "2019-11-04T16:02:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "The PR mentioned two comments above is now #2348",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/549421804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/549888652",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-549888652",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 549888652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTg4ODY1Mg==",
    "user": {
      "login": "MrChico",
      "id": 8930559,
      "node_id": "MDQ6VXNlcjg5MzA1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8930559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrChico",
      "html_url": "https://github.com/MrChico",
      "followers_url": "https://api.github.com/users/MrChico/followers",
      "following_url": "https://api.github.com/users/MrChico/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrChico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrChico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrChico/subscriptions",
      "organizations_url": "https://api.github.com/users/MrChico/orgs",
      "repos_url": "https://api.github.com/users/MrChico/repos",
      "events_url": "https://api.github.com/users/MrChico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrChico/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-05T16:04:47Z",
    "updated_at": "2019-11-05T16:04:47Z",
    "author_association": "MEMBER",
    "body": "> @MrChico Thanks.\r\n> SP is unused, so I've removed it. It's unused because GOSUB and RETSUB have no effect on the data stack--it's up to the caller. This often happens by default on a stack machine: the caller pushes arguments which are consumed by the callee, leaving any results on the stack.\r\n\r\nI'm confused. The issue still refers to `SP`:\r\n\r\n> Execution of EVM bytecode begins with SP set to 0,\r\n\r\nand your claim that `GOSUB` have no effect on the data stack seems to contradict the semantics section which claims:\r\n\r\n> [GOSUB] sets PC to the address on top of the data stack and pops the data stack.\r\n\r\nIf this was a PR instead of an issue it would be easier to review and track changes to this proposal\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/549888652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/553221961",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-553221961",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 553221961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzIyMTk2MQ==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-13T03:26:28Z",
    "updated_at": "2019-11-13T03:26:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "You are right on all counts @MrChico.  I thought I had removed the SP reference, but it was still there--it's gone now.  My comment on GOSUB was wrong, it's only RETSUB that leaves SP unchanged--I think the semantics section is right.  And a PR is needed, but earning a living is taking priority, and editing an issue is easier than dealing with Git.  I appreciate your patience.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/553221961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/577001656",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-577001656",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 577001656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzAwMTY1Ng==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-22T04:26:18Z",
    "updated_at": "2020-01-22T04:26:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MrChico @shemnon @lialan @axic\r\nI've pared this down, cleaned it up, and submitted it as a draft:\r\nhttps://github.com/ethereum/EIPs/pull/2484",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/577001656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/630387274",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-630387274",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 630387274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDM4NzI3NA==",
    "user": {
      "login": "fanlong",
      "id": 4642548,
      "node_id": "MDQ6VXNlcjQ2NDI1NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4642548?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanlong",
      "html_url": "https://github.com/fanlong",
      "followers_url": "https://api.github.com/users/fanlong/followers",
      "following_url": "https://api.github.com/users/fanlong/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanlong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanlong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanlong/subscriptions",
      "organizations_url": "https://api.github.com/users/fanlong/orgs",
      "repos_url": "https://api.github.com/users/fanlong/repos",
      "events_url": "https://api.github.com/users/fanlong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanlong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-18T19:21:21Z",
    "updated_at": "2020-05-18T19:21:21Z",
    "author_association": "NONE",
    "body": "@gcolvin \r\n\r\nThere is some inconsistency between the test case and the spec in EIP-2315. Particularly,\r\n\r\nThe spec says that BEGINSUB is not supposed to be executed and its execution will cause error.  JUMPSUB will land on the next instruction after BEGINSUB. \r\n\r\nHowever, the test case (and the current open-ethereum implementation) assumes BEGINSUB can be executed as a noop. JUMPSUB will land on the BEGINSUB instead of the next.\r\n\r\nNote that I believe the spec makes more sense from the security perspective. It prevents unintended control flow behavior in EVM crossing routine boundaries.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/630387274/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/630407273",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-630407273",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 630407273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQwNzI3Mw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-18T20:05:25Z",
    "updated_at": "2020-05-18T20:05:25Z",
    "author_association": "MEMBER",
    "body": "Can you please comment this on https://ethereum-magicians.org/t/eip-2315-simple-subroutines-for-the-evm/3941 which is the discussion url?\r\n\r\n(This issue here should be closed.)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/630407273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/807048898",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-807048898",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 807048898,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNzA0ODg5OA==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-25T16:28:10Z",
    "updated_at": "2021-03-25T18:01:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Reopened as working draft.  Will push to EIP repo at stable points.  I'm coming to see that more can be achieved by way of safety and ease of static analysis with this proposal than I even realized, and am working it out here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/807048898/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/809079257",
    "html_url": "https://github.com/ethereum/EIPs/issues/2315#issuecomment-809079257",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2315",
    "id": 809079257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTA3OTI1Nw==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-29T05:32:31Z",
    "updated_at": "2021-03-29T06:58:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "A good summary of the history of subroutines, from Lovelace and Turing onward\r\n>https://people.cs.clemson.edu/~mark/subroutines.html\r\n\r\nand the subroutine facilities provided by many CPUs\r\n> https://people.cs.clemson.edu/~mark/subroutines/\r\n\r\nincluding the following:\r\n- 704\r\n- 709x\r\n- alpha\r\n- amd29k \r\n- b5000\r\n- cdc6600\r\n- i960\r\n- itanium\r\n- m68k\r\n- m88k\r\n- mips\r\n- pdp8\r\n- pdp11\r\n- ppc\r\n- s360\r\n- sparc\r\n- vax\r\n- x86",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/809079257/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
