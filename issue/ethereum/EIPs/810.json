{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/810",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/810/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/810/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/810/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/810",
  "id": 284734439,
  "node_id": "MDU6SXNzdWUyODQ3MzQ0Mzk=",
  "number": 810,
  "title": "ERC: Account Reputation System",
  "user": {
    "login": "pabloruiz55",
    "id": 526558,
    "node_id": "MDQ6VXNlcjUyNjU1OA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/526558?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pabloruiz55",
    "html_url": "https://github.com/pabloruiz55",
    "followers_url": "https://api.github.com/users/pabloruiz55/followers",
    "following_url": "https://api.github.com/users/pabloruiz55/following{/other_user}",
    "gists_url": "https://api.github.com/users/pabloruiz55/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pabloruiz55/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pabloruiz55/subscriptions",
    "organizations_url": "https://api.github.com/users/pabloruiz55/orgs",
    "repos_url": "https://api.github.com/users/pabloruiz55/repos",
    "events_url": "https://api.github.com/users/pabloruiz55/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pabloruiz55/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2017-12-27T14:34:30Z",
  "updated_at": "2022-01-02T08:13:46Z",
  "closed_at": "2022-01-02T08:13:46Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n    EIP: <to be assigned>\r\n    Title: Account Reputation System\r\n    Author: Pablo Ruiz <me@pabloruiz.co>\r\n    Type: Standard Track\r\n    Category: ERC\r\n    Status: Draft\r\n    Created: 2017-12-27\r\n\r\n## Simple Summary\r\nThe proposed idea provides a system for smart contracts to retrieve the reputation of another account so they can decide how to interact -or whether or not to interact- with said account.\r\n\r\n## Abstract\r\nThe following discusses the implementation of a system that can be accessed by any other smart contracts or EOA to provide and/or retrieve reputation data regarding another smart contract or EOA.\r\n\r\nThe idea behind this system is to provide a way for smart contracts to trust other smart contracts when they have to interact with them without having to manually review their code, which in a system where contract addresses might be submitted by users, doing so is unfeasible.\r\n\r\nAccounts can each give a score to another account on a scale from 0 to 10 . Each score counts towards a negative/neutral/positive count (using the same scale as the Net Promoter Score) and that data can be used by other smart contracts to decide how to interact with the target smart contract, however they choose.\r\n\r\n## Motivation\r\nIt is very common to need a smart contract to either call a function in another smart contract or have its functions being called by other smart contracts.\r\n\r\nWhen interacting with untrusted smart contracts, as developers, we have to make sure we don't open our own smart contracts to vulnerabilities like reentrancy. The only way to prevent vulnerabilities is either not interacting with other 3rd party smart contracts altogether, which sometimes can't be helped; or manually reviewing the code of the smart contract/s we wish to interact with, if they are public, in order to make sure there is no malicious code.\r\n\r\nAnother use case for this might be in a system where users can submit the address of smart contracts for our own smart contract to interact with. In such cases, the only way to prevent executing malicious code would be to establish a whitelist and make sure the submitted smart contracts are not malicious before accepting them into the whitelist.\r\n\r\nFor example, in a system that accepts 3rd party ERC20 tokens and  \"airdrops\" them to subscribed users, we wouldn't be able to let just anyone \"upload\" their token contract to start distributing them without passing by some sort of verification where it is needed to make sure that the ERC20 methods are being implemented without malicious intents.\r\n\r\nThis Account Reputation System would provide an additional layer of security by letting the calling smart contract know what's the reputation of the target smart contract (or EOA) and letting it act upon it however it chooses. _Read Rationale section below for more information about this._\r\n\r\n## Specification\r\n### Methods\r\n#### negativeCount / neutralCount / PositiveCount\r\nReturns the amount of either negative, neutral or positive scores for a given account. \r\nA negative score is a score given from the range of 0 to 6. (According to NPS)\r\nA neutral score is a score given from the range of 7 to 8. (According to NPS)\r\nA positive score is a score given from the range of 9 to 10. (According to NPS)\r\n\r\n``` js\r\nfunction negativeCount(address _account) view returns (uint negativeCount)\r\nfunction neutralCount(address _account) view returns (uint neutralCount)\r\nfunction positiveCount(address _account) view returns (uint positiveCount)\r\n```\r\n\r\n#### totalCount\r\nReturns the total amount of ratings for a given account. This can be used by the calling contract to calculate averages or ratios, as well as for specifying certain amount of ratings threshold required to start taking the ratings into account.\r\n\r\n``` js\r\nfunction totalCount(address _account) view returns (uint totalCount)\r\n```\r\n\r\n#### scoreSum\r\nReturns the sum of all ratings for a given account. This can be used to calculate average scores, or for requiring a contract to have certain accumulated reputation before a contract can interact with it.\r\n\r\n``` js\r\nfunction scoreSum(address _account) view returns (uint scoreSum)\r\n```\r\n\r\n#### submitFeedback\r\nThis method allows any account to provide feedback for any other account. This function can only be called once per account for a single target account. \r\n`_account` is the target account that the caller is providing feedback for.\r\n`_score` is the score that is going to be assigned to the target account (ranging from 0 to 10).\r\n`_message` **optional** is an accompanying message for the score. It can be used as a review, or indication of why the score was given.\r\n\r\nThis method receives the score and applies it to the internal state variables of the Reputation contract in order to keep track of positive / neutral / negative ratings, total ratings, the sum of the scores, etc.\r\n\r\n``` js\r\nfunction submitFeedback(address _account, uint _score, string _message) public\r\n```\r\n\r\n#### Helper methods\r\nThe following methods allow accounts to get actionable data about a particular account from the ARS.\r\n\r\n``` js\r\n// Returns the percentage of ratings that correspond to a negative reputation for a given account\r\nfunction getNegativeRatio(address _account) view public returns (uint) \r\n\r\n// Returns the percentage of ratings that correspond to a neutral reputation for a given account    \r\nfunction getNeutralRatio(address _account) view public returns (uint) \r\n   \r\n// Returns the percentage of ratings that correspond to a positive reputation for a given account\r\nfunction getPositiveRatio(address _account) view public returns (uint) \r\n\r\n// Returns the score average for a given account    \r\nfunction getScoreAverage(address _account) view public returns (uint)\r\n```\r\n\r\n### Events\r\n\r\n#### SubmitFeedback\r\nMUST trigger when a rating is submitted.\r\nLogs the feedback given by an account to another account.\r\n\r\n``` js\r\nevent SubmitFeedback(address indexed _from, address indexed _to, uint indexed date, uint _score, string _message);\r\n```\r\n\r\n## Rationale\r\nThe Account Reputation System (ARS) allows accessing reputation data about any smart contract (if it exists) which is previously provided by other users or smart contracts.\r\n\r\nBy calling the ARS' `submitFeedback()` method, any account can provide reputation data (a score from 0 to 10 and an optional message) about another target account. This feedback CAN only be submitted once (One account -> One submission for target account).\r\n\r\nThen, another smart contract wanting to base its logic on the ARS can access the data by calling any of the defined methods. For example, a smart contract could retrieve the amount of negative ratings a target contract has by calling `negativeCount(address)` or the percentage of positive ratings by calling `getPositiveRatio(address)`. \r\n\r\nThe ARS only provides the raw data. The calling smart contract would then decide how to use that data as it sees fit. For example, a smart contract may decide to only allow interacting with a smart contract that has a 80% positive rating ratio and no more than 5 negative score count.  Another smart contract could be laxer and allow transactions with smart contracts with a lower positive rating ratio.\r\n\r\n### Some issues I've yet to solve / I'd like to openly discuss:\r\n**1. Spamming / false data:** Even though we accept only one rating per account for every contract, there's nothing stopping someone using multiple accounts to spam or provide false data. For example, a competitor could submit hundreds of negative ratings for our smart contract to make it seem like a bad actor. Conversely, the owner of a malicious smart contract could submit any number of positive ratings to make it look like a good actor.\r\n\r\nI've found no immediate solution for this, other maybe establishing a system where the ratings of accounts with positive ratings have more weight than accounts with negative or no ratings.\r\n\r\n## Implementation\r\nExample implementation:\r\nhttps://github.com/pabloruiz55/AccountReputationSystem\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/810/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/810/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354167009",
    "html_url": "https://github.com/ethereum/EIPs/issues/810#issuecomment-354167009",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/810",
    "id": 354167009,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDE2NzAwOQ==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-27T19:39:52Z",
    "updated_at": "2017-12-27T19:39:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think reputation of account is interesting to be standardized. But from my point of view, what you described is an application, not a standard.\r\n\r\nI would however be very interested by a reputation standard like\r\n`function reputation(address _target) returns(uint rep)`\r\nwhere you could get a reputation score for any account according to the reputation contract.\r\n(It's just an idea, I haven't looked into details).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354167009/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354168336",
    "html_url": "https://github.com/ethereum/EIPs/issues/810#issuecomment-354168336",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/810",
    "id": 354168336,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDE2ODMzNg==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-27T19:50:22Z",
    "updated_at": "2017-12-27T19:50:22Z",
    "author_association": "MEMBER",
    "body": "Without solving the Sybil attack you mentioned I don't think this really has any value.  Trust/reputation networks are a _very_ hard problem and largely unsolved.  Without solving that problem, any trust/reputation system is doomed to be attacked trivially.  See eBay's rating system, where you can just buy whatever rating you want.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354168336/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354169771",
    "html_url": "https://github.com/ethereum/EIPs/issues/810#issuecomment-354169771",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/810",
    "id": 354169771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDE2OTc3MQ==",
    "user": {
      "login": "pabloruiz55",
      "id": 526558,
      "node_id": "MDQ6VXNlcjUyNjU1OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/526558?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pabloruiz55",
      "html_url": "https://github.com/pabloruiz55",
      "followers_url": "https://api.github.com/users/pabloruiz55/followers",
      "following_url": "https://api.github.com/users/pabloruiz55/following{/other_user}",
      "gists_url": "https://api.github.com/users/pabloruiz55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pabloruiz55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pabloruiz55/subscriptions",
      "organizations_url": "https://api.github.com/users/pabloruiz55/orgs",
      "repos_url": "https://api.github.com/users/pabloruiz55/repos",
      "events_url": "https://api.github.com/users/pabloruiz55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pabloruiz55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-27T20:01:01Z",
    "updated_at": "2017-12-27T20:01:09Z",
    "author_association": "NONE",
    "body": "@clesaege I did describe it as a system / application, yes. What would make it more like a standard and less like an application, from your point of view?\r\nThe idea indeed would be for accounts to hold some kind of reputation within the Reputation Contract, which other contracts could consult before transacting with them in order to change how that transaction is approached depending on the reputation each account has. \r\n\r\nEven though I was thinking more in terms of Smart contracts interacting with each other, in the case of what you guys are building, such data could be useful as an additional data point when trying to rule in favor of one or the other party. Additionally, the Reputation Standard could get data from Kleros. If a given account was proved right or wrong by a ruling from Kleros, their Reputation could be affected positively or negatively.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354169771/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354184964",
    "html_url": "https://github.com/ethereum/EIPs/issues/810#issuecomment-354184964",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/810",
    "id": 354184964,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDE4NDk2NA==",
    "user": {
      "login": "clesaege",
      "id": 8873352,
      "node_id": "MDQ6VXNlcjg4NzMzNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8873352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clesaege",
      "html_url": "https://github.com/clesaege",
      "followers_url": "https://api.github.com/users/clesaege/followers",
      "following_url": "https://api.github.com/users/clesaege/following{/other_user}",
      "gists_url": "https://api.github.com/users/clesaege/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clesaege/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clesaege/subscriptions",
      "organizations_url": "https://api.github.com/users/clesaege/orgs",
      "repos_url": "https://api.github.com/users/clesaege/repos",
      "events_url": "https://api.github.com/users/clesaege/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clesaege/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-27T22:09:26Z",
    "updated_at": "2017-12-27T23:17:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pabloruiz55 Like I told in my first comment. A standard allowing different kind of contracts giving a reputation scores. Which may not use the same algorithm.\r\nReputation is hard, you can look at the Trust is Risk work of Open Bazaar: https://www.openbazaar.org/blog/trust-is-risk-a-decentralized-trust-system/\r\n\r\nYou could also investigate a trust system where trust is not an absolute value, but depends of the observer. For that you could get inspiration from the maximum flow problem: https://en.wikipedia.org/wiki/Maximum_flow_problem\r\nWhich would give you a relative, but sybil proof trust system.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354184964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997341475",
    "html_url": "https://github.com/ethereum/EIPs/issues/810#issuecomment-997341475",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/810",
    "id": 997341475,
    "node_id": "IC_kwDOAq426M47cjkj",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-19T07:11:31Z",
    "updated_at": "2021-12-19T07:11:31Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997341475/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003679146",
    "html_url": "https://github.com/ethereum/EIPs/issues/810#issuecomment-1003679146",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/810",
    "id": 1003679146,
    "node_id": "IC_kwDOAq426M470u2q",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T08:13:45Z",
    "updated_at": "2022-01-02T08:13:45Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003679146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
