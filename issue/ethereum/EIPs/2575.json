{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2575",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2575/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2575/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2575/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2575",
  "id": 589781418,
  "node_id": "MDU6SXNzdWU1ODk3ODE0MTg=",
  "number": 2575,
  "title": "ERC: Creators' Royalty Token standard",
  "user": {
    "login": "naomasabit",
    "id": 31416389,
    "node_id": "MDQ6VXNlcjMxNDE2Mzg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/31416389?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/naomasabit",
    "html_url": "https://github.com/naomasabit",
    "followers_url": "https://api.github.com/users/naomasabit/followers",
    "following_url": "https://api.github.com/users/naomasabit/following{/other_user}",
    "gists_url": "https://api.github.com/users/naomasabit/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/naomasabit/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/naomasabit/subscriptions",
    "organizations_url": "https://api.github.com/users/naomasabit/orgs",
    "repos_url": "https://api.github.com/users/naomasabit/repos",
    "events_url": "https://api.github.com/users/naomasabit/events{/privacy}",
    "received_events_url": "https://api.github.com/users/naomasabit/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2020-03-29T12:31:47Z",
  "updated_at": "2020-03-31T15:58:44Z",
  "closed_at": "2020-03-31T15:58:44Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\n---\r\neip: 2575\r\ntitle: Creators' Royalty Token standard\r\nauthor: Nao Hanamura(@naomasabit),\r\n       Shoji Fukunaga(@mogya2) <s.fukunaga@conata.world>,\r\n       Wataru Shinohara(@wshino),\r\n       Shumpei Koike(@shunp), \r\n       Akira Tsuruoka(@akira-19)\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/2575\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2020-03-29\r\n---\r\n```\r\n\r\n## Simple Summary\r\nA standard interface for non-fungible tokens that enables artwork creators to receive a fee not only when their works are sold for the first time, but also their works are resold. \r\n\r\n## Abstract\r\nThis standard outlines a smart contract interface based on ERC-721, which is a standard for non-fungible tokens. The key issue of using it is that an original author who creates an item cannot receive any fees after giving or selling it to another.  Creator’s Royalty Token enables creators to get a fee whenever the token is transferred, which has a function of the decentralized exchange. Hence, a partial amount of the transaction value will always be paid to the creator. \r\n\r\n\r\n## Motivation\r\nIt is predicted that a lot of creators who design a piece of artwork would associate their items with non-fungible tokens based on ERC-721.  The expected issue in this case is that the artwork would be resold on the secondary market, such as OpenSea, even though the artist cannot get any fees.  This problem often happens even in the real world, and that makes creators disappointed. \r\nThe new functionality is possible with the design of receiving a fee for the sale whenever non-fungible tokens are transferred. You do not need to embed any code but use this interface instead of ERC-721 so that artwork creators can receive a fee. Currently, we are developing a product called [Conata](https://conata.world/) and will implement the token based on this standard.\r\n\r\n## Specification\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.\r\n\r\n**Smart contracts implementing the ERC-2575 standard MUST implement all of the functions in the ERC-2575 interface.**\r\n\r\n**Smart contracts implementing the ERC-2575 standard MUST implement the ERC-721.**\r\n\r\n```solidity\r\ncontract IERC2575 is ERC721Full, ERC721Mintable, Ownable {\r\n\r\n    event ReadyForSale(\r\n        address buyer,\r\n        uint256 tokenId,\r\n        uint256 price,\r\n        uint256 expireBlockNumber);\r\n\r\n    function getPublisherFeeRate() public view returns (uint256);\r\n\r\n    function getCreator(uint256 tokenId) public view returns (address payable);\r\n\r\n    function getCreatorFeeRate(uint256 tokenId) public view returns (uint256);\r\n\r\n    function getTradeExpires(bytes32 tradeHash) public view returns (uint256);\r\n\r\n    function getTradePrices(bytes32 tradeHash) public view returns (uint256);\r\n\r\n    function setPublisherFeeRate(uint256 feeRate) external;\r\n\r\n    function setCreator(uint256 tokenId, address payable creator) public;\r\n\r\n    function setCreatorFeeRate(uint256 tokenId, uint256 feeRate) external;\r\n\r\n    function readyForSale(address buyer, uint256 tokenId, uint256 price, uint256 expireBlockNumber) external;\r\n\r\n    function cancelTradeOrder(address buyer, uint256 tokenId) external;\r\n\r\n    function tradeAndDistributeFees(address payable seller, uint256 tokenId) external payable;\r\n}\r\n\r\n```\r\n\r\n\r\nThe token contract MUST implement the above contract. The implementation MUST follow the specifications described below.\r\n\r\n\r\n**Creator’s Royalty Token Overview**\r\n\r\n<img width=\"518\" alt=\"Creator’s Royalty Token Overview\" src=\"https://user-images.githubusercontent.com/31416389/77847492-516ac000-71f8-11ea-8c40-009acbcefef8.png\">\r\n\r\n## Creator’s Royalty Token\r\n\r\n**Buyer**\r\nEveryone can buy non-fungible tokens via Creator’s Royalty Token contract. The buyer pays ETH as the token price. Paid ETH is distributed to Publisher and Creator as a trade fee.\r\n\r\n**Seller** \r\nThe owner of a non-fungible token can sell it via Creator’s Royalty Token contract. The seller sends the non-fungible token to a buyer.\r\n\r\n**Creator**\r\nCreators produce artworks such as characters, music and digital arts. Their artworks are published as non-fungible tokens.\r\n\r\n**Publisher**\r\nPublishers mint a creator's token instead of the creator. The role of them is to advertise artworks and enhance their brand images. The Creator’s address should be set if there is no publisher. In this case, creators manage their token themselves.\r\n\r\n## View Functions\r\n\r\nThe view functions detailed below MUST be implemented.\r\n\r\n\r\n**getPublisherFeeRate function**\r\n\r\n`function getPublisherFeeRate() public view returns (uint256)`\r\n\r\nGet the fee rate used on a publisher.\r\nreturns: Fee rate of the publisher\r\n\r\n**getCreator function**\r\n\r\n`function getCreator(uint256 tokenId) public view returns (address payable)`\r\n\r\nGet the creator’s address.\r\nparams: tokenId: tokenID used on ERC721\r\nreturns: Address of the creator\r\n\r\n\r\n**getCreatorFeeRate function**\r\n\r\n`function getCreatorFeeRate(uint32 tokenId) public view returns (uint256)`\r\n\r\nGet the fee rate according to the tokenId.\r\n\r\nparams: tokenIdassetType: tokenID used on ERC721\r\nreturns: Fee rate of the asset type\r\n\r\nNOTE: If the contract has a large number of tokenIDs, you can optionally set the classification as an asset type by token digits and link the classification to the creator instead of using the tokenID. In that case, the contract has to have a state valuable that plays a role as a filter.\r\n\r\nNOTE: If the contract has a large number of tokenIDs, you can optionally set the classification as an asset type by token digits and link the classification to the creator instead of using the tokenID. In that case, the contract has to have a state valuable that plays a role as a filter.\r\n\r\n\r\n\r\n- The buyer argument MUST be the address of an account/contract that wants to buy the asset (is not the same as msg.sender, which is the publisher’s address)\r\n- The price argument MUST be more than zero.\r\n- The expireBlockNumber MUST be between more than zero and less than the number of the current block. \r\n- The keccak256 hash, which is calculated by msg.sender, buyer and tokenId,  is stored as state value to use in the TradeAndDistributionFees function.\r\n\r\n(implementation)\r\n```solidity\r\nfunction readyForSale(\r\n   address buyer,\r\n   uint256 tokenId,\r\n   uint256 price,\r\n   uint256 expireBlockNumber) external {\r\n        require(buyer != address(0), \"Buyer doesn't exist\");\r\n        require(price > 0, \"Price argument must be more than zero\");\r\n        require(expireBlockNumber > 0, \"ExpireBlockNumber must be more than zero\");\r\n        require(expireBlockNumber > block.number, \"ExpireBlockNumber is expired\");\r\n        bytes32 tradeHash = keccak256(abi.encodePacked(msg.sender, buyer, tokenId));\r\n        _setTradeExpires(tradeHash, expireBlockNumber);\r\n        _setTradePrices(tradeHash, price);\r\n        TradeOrders[tradeHash]._isCancelled = false;\r\n        emit ReadyForSale(buyer, tokenId, price, expireBlockNumber);\r\n    }\r\n```\r\nNOTE: This function emits the event named ReadyForSale.\r\n\r\n\r\n**Trade and Distribution Fees**\r\n\r\n`function tradeAndDistributeFees(address payable seller, uint256 tokenId) external payable`\r\n\r\nCall this function to transfer the ownership of the artwork and distribute fees to the author. In this function, the two functions are invoked; _signAndPayTransfer and _changeTransfer.\r\n\r\n- The seller argument MUST be the address of an account/contract that wants to sell the asset.\r\n- The block number, when being called, MUST NOT exceed the limit data that can be fetched by the getTradeExpires function. -- - The block number is associated with a hash value, which is created by the seller address, the msg.sender address and tokenId.\r\n- The msg.value MUST be more than the trade price, which is set through the _setTradePrices function.\r\n- The hash value, which is calculated from the seller, msg.sender and tokenId, is used for checking whether or not it matches the value that is created in the ReadyForSale function.\r\n- _tradeAndDistributeFees is a private function that distributes fees, which are computed in this function, to the creator, and the publisher. The code below is the implementation example.\r\n\r\n```solidity\r\nfunction _tradeAndDistributeFees(address payable seller, uint256 tokenId, uint256 price) internal {\r\n        uint256 creatorFeeRate = getCreatorFeeRate(tokenId);\r\n        uint256 creatorFee = _computeCreatorFee(price, creatorFeeRate);\r\n        uint256 publisherFee = _computePublisherFee(price);\r\n        uint256 payment = uint256(price.sub(creatorFee).sub(publisherFee));\r\n\r\n        address payable creator = getCreator(tokenId);\r\n\r\n        _transferFrom(seller, msg.sender, tokenId);\r\n        creator.transfer(creatorFee);\r\n        _publisher.transfer(publisherFee);\r\n        seller.transfer(payment);\r\n }\r\n\r\n```\r\n\r\n`_changeTransfer` is a private function that returns ETH to the sender, which is the remaining number of the transaction. The code below is the implementation example.\r\n\r\n```solidity\r\nfunction _changeTransfer(uint256 tradePrice) internal {\r\n        if (msg.value > tradePrice) {\r\n            uint256 change = msg.value.sub(tradePrice);\r\n            msg.sender.transfer(change);\r\n        }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\nNOTE: The Transfer event, which is defined on the ERC-721, is emitted by this function.\r\n\r\nExample) Creator’s Royalty Tokens related sequence flow on Conata Project.\r\n\r\n![conata (1)](https://user-images.githubusercontent.com/31416389/77844506-5cb2f100-71e2-11ea-93ea-6369a517fcbc.jpg)\r\n\r\n\r\n**Cancel TradeOrder**\r\n\r\n`function cancelTradeOrder(address buyer, uint256 tokenId) external`\r\n\r\nCall this function so that the buyer could cancel the order of the trade.\r\n- The buyer argument MUST be the address of an account/contract that ordered the request for buying the token ID.\r\n- The tokenId argument MUST be the number that the buyer has chosen.\r\n\r\n**Setter Function**\r\n\r\n`function setPublisherFeeRate(uint256 feeRate) external`\r\n\r\nThe feeRate argument CAN be set as a publisher fee rate by the owner of the contract.\r\n\r\n`function setCreator(uint256 tokenId, address payable creator) public`\r\n\r\nThe creator argument MUST be the address of an account that created the artwork. The owner of the contract CAN map the tokenId and creator address.\r\n\r\n`function setCreatorFeeRate(uint256 tokenId, uint256 feeRate) external`\r\n\r\nThe feeRate argument CAN be set as a creator fee rate by the owner of the contract.\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n## Rationale\r\n**Based on ERC721**\r\n\r\nERC-721 is widely applied to many projects that use non-fungible tokens such as CryptoKitties. Since a creator’s artwork is registered as non-fungible tokens, this standard inherits ERC-721. \r\n\r\nEach artwork has a unique token ID. Also, the token will be transferred through ERC-721 _transferFrom function in tradeAndDistributeFee function, though there are some restrictions to transfer tokens as explained in the following section.\r\n\r\n**Limited Transfer**\r\n\r\nThis standard doesn’t provide a general transfer function, by which non-fungible tokens holders can transfer their non-fungible tokens freely whenever they want. This is because creators can’t get royalties if it is possible. Transfer is executed with tradeAndDistributeFees function, and every time holders transfer their non-fungible tokens, the creators can get royalties through the function.\r\n\r\n\r\n**Decentralized Exchange Function**\r\n\r\nThis standard provides DEX through readyForSale function and tradeAndDistributeFee function. In order to allow a buyer to purchase a non-fungible token, the token’s holder (seller) passes a buyer’s address and a token ID as arguments to readyForSale function, and stores the hash value of the arguments with the seller’s own address. After that, the buyer calls tradeAndDistributeFee, which checks the hash value, and transfers the NFT and distributes the fees if the hash value is correct.\r\n\r\n\r\n**Fee Distribution**\r\n\r\nIn this standard, not only creators but also publishers can get some fees. Furthermore, publishers can set the fee rate like OpenSea, which is one of the most famous non-fungible token secondary markets. A fee rate for publishers is set through setPublisherFeeRate and A fee rate for creators is set through setCreatorFeeRate.\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n\r\n\r\n",
  "closed_by": {
    "login": "naomasabit",
    "id": 31416389,
    "node_id": "MDQ6VXNlcjMxNDE2Mzg5",
    "avatar_url": "https://avatars.githubusercontent.com/u/31416389?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/naomasabit",
    "html_url": "https://github.com/naomasabit",
    "followers_url": "https://api.github.com/users/naomasabit/followers",
    "following_url": "https://api.github.com/users/naomasabit/following{/other_user}",
    "gists_url": "https://api.github.com/users/naomasabit/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/naomasabit/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/naomasabit/subscriptions",
    "organizations_url": "https://api.github.com/users/naomasabit/orgs",
    "repos_url": "https://api.github.com/users/naomasabit/repos",
    "events_url": "https://api.github.com/users/naomasabit/events{/privacy}",
    "received_events_url": "https://api.github.com/users/naomasabit/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2575/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2575/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/606315572",
    "html_url": "https://github.com/ethereum/EIPs/issues/2575#issuecomment-606315572",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2575",
    "id": 606315572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjMxNTU3Mg==",
    "user": {
      "login": "leohio",
      "id": 5285950,
      "node_id": "MDQ6VXNlcjUyODU5NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5285950?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leohio",
      "html_url": "https://github.com/leohio",
      "followers_url": "https://api.github.com/users/leohio/followers",
      "following_url": "https://api.github.com/users/leohio/following{/other_user}",
      "gists_url": "https://api.github.com/users/leohio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leohio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leohio/subscriptions",
      "organizations_url": "https://api.github.com/users/leohio/orgs",
      "repos_url": "https://api.github.com/users/leohio/repos",
      "events_url": "https://api.github.com/users/leohio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leohio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-31T00:02:38Z",
    "updated_at": "2020-03-31T00:07:12Z",
    "author_association": "NONE",
    "body": "So nice to see EIP focusing on specific social problems!! \r\nvery well documented.\r\n\r\n> Limited Transfer\r\nThis standard doesn’t provide a general transfer function, by which non-fungible tokens holders can transfer their non-fungible tokens freely whenever they want.\r\n\r\nHow would we make this feature with your contract inheriting transfer() of ERC721Full?\r\nDo we ban transfer() or recommend codes transfer() with some restrictions? \r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/606315572/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/606380243",
    "html_url": "https://github.com/ethereum/EIPs/issues/2575#issuecomment-606380243",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2575",
    "id": 606380243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjM4MDI0Mw==",
    "user": {
      "login": "nphsu",
      "id": 24355719,
      "node_id": "MDQ6VXNlcjI0MzU1NzE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/24355719?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nphsu",
      "html_url": "https://github.com/nphsu",
      "followers_url": "https://api.github.com/users/nphsu/followers",
      "following_url": "https://api.github.com/users/nphsu/following{/other_user}",
      "gists_url": "https://api.github.com/users/nphsu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nphsu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nphsu/subscriptions",
      "organizations_url": "https://api.github.com/users/nphsu/orgs",
      "repos_url": "https://api.github.com/users/nphsu/repos",
      "events_url": "https://api.github.com/users/nphsu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nphsu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-31T03:39:34Z",
    "updated_at": "2020-03-31T03:39:34Z",
    "author_association": "NONE",
    "body": "@leohio Thanks for your comment!\r\n\r\nAt the moment, we recommend using _tradeAndDistributionFee, in which transferFrom() is called internally, instead of calling transfer() or transferFrom() of ERC721 directly. In the case of calling ERC721's functions, a publisher and a creator cannot benefit from the system. As you mentioned, I would say it’s better to consider banning ERC721 stuff directly by overriding them if inheriting this interface.\r\n\r\nIn our produce code of out service: Conata, we’re actually implementing them not to call directly.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/606380243/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/606615019",
    "html_url": "https://github.com/ethereum/EIPs/issues/2575#issuecomment-606615019",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2575",
    "id": 606615019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjYxNTAxOQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-31T13:07:40Z",
    "updated_at": "2020-03-31T13:07:40Z",
    "author_association": "MEMBER",
    "body": "![Screenshot 2020-03-29 at 14 23 09](https://user-images.githubusercontent.com/20340/77850215-e0f87a80-71c8-11ea-9afa-2c95d2e86f08.png)\r\n\r\nI suggest this EIP to take the number 2571 (the first \"noop\" post) to send a message that this behaviour is not acceptable.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/606615019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/606718576",
    "html_url": "https://github.com/ethereum/EIPs/issues/2575#issuecomment-606718576",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2575",
    "id": 606718576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjcxODU3Ng==",
    "user": {
      "login": "naomasabit",
      "id": 31416389,
      "node_id": "MDQ6VXNlcjMxNDE2Mzg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/31416389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naomasabit",
      "html_url": "https://github.com/naomasabit",
      "followers_url": "https://api.github.com/users/naomasabit/followers",
      "following_url": "https://api.github.com/users/naomasabit/following{/other_user}",
      "gists_url": "https://api.github.com/users/naomasabit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naomasabit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naomasabit/subscriptions",
      "organizations_url": "https://api.github.com/users/naomasabit/orgs",
      "repos_url": "https://api.github.com/users/naomasabit/repos",
      "events_url": "https://api.github.com/users/naomasabit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naomasabit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-31T15:58:43Z",
    "updated_at": "2020-03-31T15:58:43Z",
    "author_association": "NONE",
    "body": "Sorry for this. I will close this issue and reopen #2571 and conitunue to discuss there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/606718576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
