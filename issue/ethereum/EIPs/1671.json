{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1671",
  "id": 393804755,
  "node_id": "MDU6SXNzdWUzOTM4MDQ3NTU=",
  "number": 1671,
  "title": "Bonded Fungible Tokens",
  "user": {
    "login": "lsaether",
    "id": 25539605,
    "node_id": "MDQ6VXNlcjI1NTM5NjA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/25539605?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsaether",
    "html_url": "https://github.com/lsaether",
    "followers_url": "https://api.github.com/users/lsaether/followers",
    "following_url": "https://api.github.com/users/lsaether/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsaether/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsaether/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsaether/subscriptions",
    "organizations_url": "https://api.github.com/users/lsaether/orgs",
    "repos_url": "https://api.github.com/users/lsaether/repos",
    "events_url": "https://api.github.com/users/lsaether/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsaether/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2018-12-24T03:47:37Z",
  "updated_at": "2021-12-04T20:13:24Z",
  "closed_at": "2021-12-04T20:13:24Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "# Bonded Fungible Tokens\r\n\r\n```\r\n---\r\neip: <to be assigned>\r\ntitle: Bonded Fungible Tokens\r\nauthor: lsaether <logan@convergent.cx>\r\ndiscussions-to: <URL>\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: Interface\r\ncreated: 2018-12-23\r\n---\r\n```\r\n\r\n## Simple Summary\r\n\r\nA bonded fungible token is an ERC20 standard compliant token with a price and supply controlled by an automated market maker known as a [bonding curve](https://medium.com/@simondlr/tokens-2-0-curved-token-bonding-in-curation-markets-1764a2e0bee5). \r\n\r\nThe bonding curve is a smart contract which holds a `reserve` asset and increases or decreases the supply of a token, always determining the price based on the total supply and the amount held of the reserve asset.\r\n\r\nFrom a user perspective, it is a method of buying or selling a token directly from a smart contract and which the price of purchase or reward for sells follows a pre-defined and determined price path.\r\n\r\n## Abstract\r\nAlthough the concepts of an automated market maker and bonding curve to control the price and supply of tokens is not new, it has been used most notably in the [Bancor protocol](https://bancor.network), it has yet to be given a standard interface that developers can follow in implementations. \r\n\r\n## Motivation\r\nBonding curves are a promising mechanism for the tokenized future. By standardizing the interface, we can begin to allow community tools such as Etherscan and other block explorers to integrate information about these tokens automatically. Since the token is traded through the contract, we should be able to pull details such as the market cap of the token or the current price to display on UIs. A standard interface will further allow developers to build bonding curve tokens into more complex systems such as nested curves.\r\n\r\n## Specification\r\n```\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Bonded Fungible Token Interface\r\n * @dev A bonded fungible token is a token \"bonded\" to a reserve asset and\r\n *      continuously generated or destroyed by staking or withdrawing this\r\n *      asset.\r\n */\r\ninterface IBondedFungibleToken {\r\n\r\n    // Logs when `purchaser` buys `amount` of tokens for `paid` in reserve asset.\r\n    event CurveBuy(uint256 amount, uint256 paid, address indexed purchaser);\r\n\r\n    // Logs when `seller` sells `amount` of tokens for `rewarded` in reserve asset.\r\n    event CurveSell(uint256 amount, uint256 rewarded, address indexed seller);\r\n\r\n    // Returns the price for buying `forTokens` amount of bonded tokens.\r\n    function price(uint256 forTokens) public view returns (uint256 thePrice);\r\n\r\n    // Returns the reward for selling `forTokens` amount of bonded tokens.\r\n    function reward(uint256 forTokens) public view returns (uint256 theReward);\r\n\r\n    // Buys `tokens` amount of bonded tokens and returns how much `paid` in reserve.\r\n    function buy(uint256 tokens) external returns (uint256 paid);\r\n\r\n    // Sells `tokens` amount of bonded tokens and returns how much `rewarded` in reserve.\r\n    function sell(uint256 tokens) external returns (uint256 rewarded);\r\n\r\n    // Returns the current price of the token. Mostly useful for reference.\r\n    function currentPrice() public view returns (uint256 theCurrentPrice);\r\n\r\n    // Returns the address of the asset smart contract or 0x0 for ether.\r\n    function reserveAsset() public view returns (address asset);\r\n\r\n    // Returns the amount of `reserveAsset` held in reserve in contract. \r\n    function reserve() public view returns (uint256 amount);\r\n}\r\n\r\n```\r\n\r\n## Rationale\r\nImagine using Dai as the reserve asset for an example bonded fungible token, EXP. Community tools such as block explorers could include the current price of EXP straight in their interface by keeping up to date with the return value of the `currentPrice` function. \r\n\r\nBesides front-end conveniences, there are also low-level interoperability constraints that we should keep in mind as more developers start to build systems which use bonded tokens and bonding curves.\r\n\r\n## Test Cases\r\nExample source code and some test cases have been implemented in [milky-way](https://github.com/convergentcx/milky-way)\r\n\r\n## Implementation\r\n[milky-way](https://github.com/convergentcx/milky-way)\r\nPlease suggest others.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1671/reactions",
    "total_count": 9,
    "+1": 7,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/450832795",
    "html_url": "https://github.com/ethereum/EIPs/issues/1671#issuecomment-450832795",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
    "id": 450832795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDgzMjc5NQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-02T10:43:24Z",
    "updated_at": "2019-01-02T10:43:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "The `function buy(uint256 tokens)` will make UX really bad. If two users tries to buy tokens in the same block with the correct amount of payment only the first tx will be valid. This makes the experience of buying tokens from the bonding curve really confusing since you txs are likely to fail frequently if there is high demand.\r\nThe way around this is to either send a larger payment than you expect to pay when you buy, or don't specify then number of tokens and get whatever is caluclated by the curve (both which opens up to front running attacks). \r\nOther interesting approaches include batch auctions (see gnosis dutchX) but I'm not sure that is safe in this context, and commit reveal schemes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/450832795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/452234164",
    "html_url": "https://github.com/ethereum/EIPs/issues/1671#issuecomment-452234164",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
    "id": 452234164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjIzNDE2NA==",
    "user": {
      "login": "GriffGreen",
      "id": 14945613,
      "node_id": "MDQ6VXNlcjE0OTQ1NjEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14945613?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GriffGreen",
      "html_url": "https://github.com/GriffGreen",
      "followers_url": "https://api.github.com/users/GriffGreen/followers",
      "following_url": "https://api.github.com/users/GriffGreen/following{/other_user}",
      "gists_url": "https://api.github.com/users/GriffGreen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GriffGreen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GriffGreen/subscriptions",
      "organizations_url": "https://api.github.com/users/GriffGreen/orgs",
      "repos_url": "https://api.github.com/users/GriffGreen/repos",
      "events_url": "https://api.github.com/users/GriffGreen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GriffGreen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-08T09:37:56Z",
    "updated_at": "2019-01-08T09:37:56Z",
    "author_association": "NONE",
    "body": "I wonder if there is value in using #777 as a base... the operator functionality could be very useful.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/452234164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454143345",
    "html_url": "https://github.com/ethereum/EIPs/issues/1671#issuecomment-454143345",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
    "id": 454143345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDE0MzM0NQ==",
    "user": {
      "login": "miller46",
      "id": 4724196,
      "node_id": "MDQ6VXNlcjQ3MjQxOTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4724196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miller46",
      "html_url": "https://github.com/miller46",
      "followers_url": "https://api.github.com/users/miller46/followers",
      "following_url": "https://api.github.com/users/miller46/following{/other_user}",
      "gists_url": "https://api.github.com/users/miller46/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miller46/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miller46/subscriptions",
      "organizations_url": "https://api.github.com/users/miller46/orgs",
      "repos_url": "https://api.github.com/users/miller46/repos",
      "events_url": "https://api.github.com/users/miller46/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miller46/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-14T20:06:58Z",
    "updated_at": "2019-01-14T20:08:30Z",
    "author_association": "NONE",
    "body": "I have a few thoughts on the spec:\r\n\r\n1) The buy function should not accept the # of tokens as a parameter. The number of tokens purchased should be determined by the amount of ether sent in the transaction and the current buy price, i.e. set by the msg.sender value inside the buy function and the current price at the time of execution. This will solve @oed 's objection\r\n\r\n2) There should be two functions for the buy price and sell price instead of one function returning a single value in 'currentPrice'. It's possible that the curve will have a spread between its buy price and sell price that makes the buy and sell price have different values. It's also possible that the buy price and sell price could be defined using different curves, for example if you wanted to make something like a \"Continuous Organization\" or DAO that has the sell curve use a lower slope than the buy price to accumulate a reserve of excess capital in the contract that the organization can decide to spend as it pleases. In either case, the point is that the buy price and sell price can be different, even wildly different.\r\n\r\n3) It's not clear to me what 'reward' is doing or what it's purpose is.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454143345/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454295280",
    "html_url": "https://github.com/ethereum/EIPs/issues/1671#issuecomment-454295280",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
    "id": 454295280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDI5NTI4MA==",
    "user": {
      "login": "mrdavey",
      "id": 2453007,
      "node_id": "MDQ6VXNlcjI0NTMwMDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2453007?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrdavey",
      "html_url": "https://github.com/mrdavey",
      "followers_url": "https://api.github.com/users/mrdavey/followers",
      "following_url": "https://api.github.com/users/mrdavey/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrdavey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrdavey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrdavey/subscriptions",
      "organizations_url": "https://api.github.com/users/mrdavey/orgs",
      "repos_url": "https://api.github.com/users/mrdavey/repos",
      "events_url": "https://api.github.com/users/mrdavey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrdavey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T07:41:42Z",
    "updated_at": "2019-01-15T07:41:42Z",
    "author_association": "NONE",
    "body": "I agree with the previous comments. Some other things to consider:\r\n\r\n- Similar to Bancor, the buy/sell function should have a 'maxSlippage' parameter which can revert a buy/sell during front running attacks or if the price slips too far from what the user wants. This also helps resolve @oed 's point.\r\n - Consider a 'sweep' function, where any remaining reserveAsset can be transferred to a different address. The use case for this is if the price function results in some left over reserveAssets when all tokens have been sold/burned.\r\n - This draft assumes 1 dimensional bonding curves. It may be worth considering if/how higher dimensional bonding curves can also fit into the standard. A problem in this case would be getting the price for say, dynamic bonding curves where the price is different per token holder. Other higher dimensional bonding curves may require other parameters to determine the price function.\r\n\r\nP.S. nice work on kick-starting this EIP!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454295280/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454580379",
    "html_url": "https://github.com/ethereum/EIPs/issues/1671#issuecomment-454580379",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
    "id": 454580379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDU4MDM3OQ==",
    "user": {
      "login": "lsaether",
      "id": 25539605,
      "node_id": "MDQ6VXNlcjI1NTM5NjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25539605?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsaether",
      "html_url": "https://github.com/lsaether",
      "followers_url": "https://api.github.com/users/lsaether/followers",
      "following_url": "https://api.github.com/users/lsaether/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsaether/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsaether/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsaether/subscriptions",
      "organizations_url": "https://api.github.com/users/lsaether/orgs",
      "repos_url": "https://api.github.com/users/lsaether/repos",
      "events_url": "https://api.github.com/users/lsaether/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsaether/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-15T22:42:49Z",
    "updated_at": "2019-01-15T22:50:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the comments! It's good to see more people here :)\r\n\r\n@GriffGreen \r\n>I wonder if there is value in using #777 as a base... the operator functionality could be very useful.\r\n\r\nI have thought about this! One point this brings up is whether the bonding curve should be separate from the token. That is, should a bonded fungible token be permanently bonded, or can it be unbonded? If it was ERC777 operator then it would imply that one could remove the operator and \"unbond\" the token.\r\n\r\n@miller46 @oed \r\n> The buy function should not accept the # of tokens as a parameter. \r\n\r\nThis is a good point.. but one issue @acrdlph and I have discussed is the UX hurdle of sending value without knowing the amount of tokens that they are getting back for it. From a technical perspective it can be more \"fair\" to the user (especially in the case of batch transactions) but how do we communicate this to the end user?\r\n\r\n@miller46 \r\n> There should be two functions for the buy price and sell price instead of one function returning a single value in 'currentPrice'.\r\n\r\nI agree about this. Do you think `buyPrice` and `sellPrice` are good names for these functions?\r\n\r\n@miller46 \r\n> It's not clear to me what 'reward' is doing or what it's purpose is.\r\n\r\nI intended the 'reward' to be the amount of the `reserve asset` sent back to the user when they burn tokens during a sell. It may not be the best name. Some other ones that could be substituted instead are `return`, or `withdrawAmount`. I'm open to other suggestions as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454580379/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454707621",
    "html_url": "https://github.com/ethereum/EIPs/issues/1671#issuecomment-454707621",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
    "id": 454707621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDcwNzYyMQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T09:17:54Z",
    "updated_at": "2019-01-16T09:17:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@lsaether Yeah, that's a fair point and I'm unsure how to best solve it. The reason I'm very opinionated in this is that I've implemented it in the way you are suggested and played around with it in a UI that allowed you to specify the # tokens you buy. It happened frequently that two people would buy some tokens in the same block and for one of the users the tx would fail. This is really bad UX and only one buy tx per block is not going to work for popular tokens.\r\n\r\nI'm actually leaning towards not talking about the number of tokens you have in the bonding curve to the user. Instead the UX would be something like \"Invest `n` DAI in this curve\" then you'd only be shown your investments worth in DAI when the total amount of reserve changes. Then maybe you could optionally show the number of tokens you have for power users?\r\nI guess this all depends on the use case of your bonding curve though.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/454707621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/456918072",
    "html_url": "https://github.com/ethereum/EIPs/issues/1671#issuecomment-456918072",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
    "id": 456918072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NjkxODA3Mg==",
    "user": {
      "login": "miller46",
      "id": 4724196,
      "node_id": "MDQ6VXNlcjQ3MjQxOTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4724196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miller46",
      "html_url": "https://github.com/miller46",
      "followers_url": "https://api.github.com/users/miller46/followers",
      "following_url": "https://api.github.com/users/miller46/following{/other_user}",
      "gists_url": "https://api.github.com/users/miller46/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miller46/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miller46/subscriptions",
      "organizations_url": "https://api.github.com/users/miller46/orgs",
      "repos_url": "https://api.github.com/users/miller46/repos",
      "events_url": "https://api.github.com/users/miller46/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miller46/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-23T18:40:24Z",
    "updated_at": "2019-01-23T18:40:24Z",
    "author_association": "NONE",
    "body": "> This is a good point.. but one issue @acrdlph and I have discussed is the UX hurdle of sending value without knowing the amount of tokens that they are getting back for it.\r\n\r\nI just think specs should contain the bare minimum that is required. There are a number of ways this could be implemented based on the use case. I just don't think this is so critical to the definition of a bonding curve that it must be hardcoded in to the spec for every implementation. \r\n\r\nAlternative ways to solve the slippage issue would be have the user optionally set some `maxSlippage` value like the `approve` mechanism in ERC-20 (except set the default to be MAX_INT instead of 0) or have the contract hardcode some absolute max slippage, among others.  \r\n\r\nI also think for many use cases that users would rather just accept some slippage than have their transaction fail. If the transaction fails, it's like they lost their spot in line and they might have to try again at an even higher price than they would have if they just took the slippage on the first transaction, if the price is going up. In the reverse case, of one or more sells happening right before them, they likely would not mind receiving more tokens than they expected.\r\n\r\n> Do you think buyPrice and sellPrice are good names for these functions?\r\n\r\nThat's what I'd use.\r\n\r\n> I intended the 'reward' to be the amount of the reserve asset sent back to the user when they burn tokens during a sell.\r\n\r\nI can't think of a concise name for this. When I come across this situation in my own code, I usually jam many words together, for better or for worse. So, my inclination is something like `calculateReserveAssetReceived` but not everyone likes that type of convention.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/456918072/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705564",
    "html_url": "https://github.com/ethereum/EIPs/issues/1671#issuecomment-974705564",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
    "id": 974705564,
    "node_id": "IC_kwDOAq426M46GNOc",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-20T20:12:55Z",
    "updated_at": "2021-11-20T20:12:55Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086513",
    "html_url": "https://github.com/ethereum/EIPs/issues/1671#issuecomment-986086513",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1671",
    "id": 986086513,
    "node_id": "IC_kwDOAq426M46xnxx",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T20:13:23Z",
    "updated_at": "2021-12-04T20:13:23Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
