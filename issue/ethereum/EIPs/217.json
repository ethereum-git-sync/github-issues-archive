{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/217/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/217/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/217/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/217",
  "id": 207979198,
  "node_id": "MDU6SXNzdWUyMDc5NzkxOTg=",
  "number": 217,
  "title": "Universal specs for JSON-RPC API methods",
  "user": {
    "login": "cdetrio",
    "id": 997681,
    "node_id": "MDQ6VXNlcjk5NzY4MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cdetrio",
    "html_url": "https://github.com/cdetrio",
    "followers_url": "https://api.github.com/users/cdetrio/followers",
    "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
    "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
    "organizations_url": "https://api.github.com/users/cdetrio/orgs",
    "repos_url": "https://api.github.com/users/cdetrio/repos",
    "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cdetrio/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 22,
  "created_at": "2017-02-16T00:53:50Z",
  "updated_at": "2022-01-16T09:11:25Z",
  "closed_at": "2022-01-16T09:11:25Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Universal specs for JSON-RPC API methods\r\n\r\nThis is a pre-draft outline of a [Hive](https://github.com/karalabe/hive)-based multi-client test suite for the [JSON-RPC API](https://github.com/ethereum/wiki/wiki/JSON-RPC). The specification format is [JSON schema](http://json-schema.org/) (inspired by the [Kodi](http://kodi.wiki/view/JSON-RPC_API/v4) API description).\r\n\r\nExisting RPC test suites include [ethereum/rpc-tests](https://github.com/ethereum/rpc-tests) and [bas-vk/hive/tree/rpc](https://github.com/bas-vk/hive/tree/rpc/simulators/ethereum/rpc/eth). The former is based on mocha.js and the latter on go-ethereum's `ethclient.Client` api. This proposal intends to be a language and client-agnostic test and specification format.\r\n\r\nHere's an example JSON schema specification, for [eth_getBlockTransactionCountByHash](https://github.com/cdetrio/interfaces/blob/master/rpc-specs-tests/schemas/eth_getBlockTransactionCountByHash.json), annotated for explanation:\r\n\r\n```\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n    \"id\": \"eth_getBlockTransactionCountByHash\",\r\n    \"title\": \"eth_getBlockTransactionCountByHash\",\r\n    \"description\": \"eth_getBlockTransactionCountByHash JSON-RPC method request and response schema.\",\r\n\r\n    \"request\": {\r\n      \"id\": \"#request\",\r\n      \"allOf\": [ // allOf means the request must pass both sub-schemas\r\n        { \"$ref\": \"jsonrpc-request.json\" }, // first-pass generic validation, see file https://github.com/cdetrio/interfaces/blob/master/rpc-specs-tests/schemas/jsonrpc-request.json\r\n        { \"$ref\": \"#/definitions/request-obj\" } // second-pass validation, specific to the RPC method\r\n      ],\r\n      \"definitions\": {\r\n        \"request-obj\": {\r\n          \"id\": \"#request-obj\",\r\n          \"properties\": {\r\n            \"method\": {\r\n              \"type\": \"string\",\r\n              \"enum\": [\"eth_getBlockTransactionCountByHash\"]\r\n            },\r\n            \"params\": {\r\n              \"type\": \"array\",\r\n              \"items\": [\r\n                {\r\n                  \"type\": \"string\",\r\n                  \"description\": \"DATA, 32 Bytes - Hash of a block.\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    \"response\": {\r\n      \"id\": \"#response\",\r\n      \"allOf\": [\r\n        { \"$ref\": \"jsonrpc-response.json\" },\r\n        { \"$ref\": \"#/definitions/response-obj\" }\r\n      ],\r\n      \"definitions\": {\r\n        \"response-obj\": {\r\n          \"id\": \"#response-obj\",\r\n          \"properties\": {\r\n        \t\t\"result\": {\r\n              \"type\": \"string\",\r\n              \"description\": \"QUANTITY - integer of the number of transactions in this block.\"\r\n        \t\t}\r\n        \t}\r\n        }\r\n      }\r\n    }\r\n}\r\n```\r\n\r\nThe `description` fields are not used for validation, but for generating RPC API method documentation as seen on the [wiki](https://github.com/ethereum/wiki/wiki/JSON-RPC).\r\n\r\nThe JSON schema specifications are paired with test cases. Here's an example file with test cases for [eth_getBlockTransactionCountByHash](https://github.com/cdetrio/interfaces/blob/master/rpc-specs-tests/tests/eth_getBlockTransactionCountByHash.json):\r\n\r\n```\r\n{\r\n  \"title\" : \"eth_getBlockTransactionCountByHash\",\r\n\r\n  \"schema\": {\r\n    \"$ref\": \"../schemas/eth_getBlockTransactionCountByHash.json\"\r\n  },\r\n\r\n  \"chainConfig\" : {\r\n    \"$ref\": \"../configs/bcRPC_API_Test.json\"\r\n  },\r\n\r\n  \"tests\": [\r\n    {\r\n      \"title\": \"eth_getBlockTransactionCountByHash for block with one tx\",\r\n      \"request\" : {\r\n        \"method\" : \"eth_getBlockTransactionCountByHash\",\r\n        \"params\" : [\"0x4e9a67b663f9abe03e7e9fd5452c9497998337077122f44ee78a466f6a7358de\"]\r\n      },\r\n      \"expectedResponse\" : {\r\n        \"result\": \"0x1\"\r\n      },\r\n      \"asserts\": [\r\n        {\r\n          \"description\": \"response is not empty\",\r\n          \"program\": \".receivedResponse.result != null\"\r\n        },\r\n        {\r\n          \"description\" : \"transaction count should be equal\",\r\n          \"program\" : \".receivedResponse.result == .expectedResponse.result\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThe `asserts` array specifies [jq programs](https://stedolan.github.io/jq/manual/) or \"filters\", which are used to compare the received response against the expected response.\r\n\r\nThe `chainConfig` option points to a set of blocks/transactions to import. The current chain configuration is inherited from [ethereum/rpc-tests](https://github.com/ethereum/rpc-tests/tree/master/lib), which in turn borrows from the [state tests](https://github.com/ethereum/tests/blob/25912e023e7cf25c33ed6dff078df0c941f2c7d6/BlockchainTests/bcRPC_API_Test.json) repo. This configuration file is loaded by the [test runner](https://github.com/cdetrio/hive/blob/master/simulators/ethereum/rpeecee/simulator.py#L52-L58), and [imported by](https://github.com/cdetrio/hive/blob/master/clients/go-ethereum:master/geth.sh#L82-L94) the hive clients.\r\n\r\nAfter hive runs the RPC tests against a set of clients, the results are displayed as a compatibility table: [http://cdetrio.github.io/eth-compat-table/](http://cdetrio.github.io/eth-compat-table/) (inspired by the table for [ES6](https://kangax.github.io/compat-table/es6/)).\r\n\r\n## Todos\r\n\r\nOne remaining task is to specify a test format for the [pub/sub](https://github.com/ethereum/go-ethereum/wiki/RPC-PUB-SUB) methods. One possibility is a `transitionEvent` field to specify an event (e.g. arrival of a block or a pending transaction), and an `onTransition` field to describe the expected notifications.\r\n\r\n## Test suite maintenance\r\n\r\nAn automated maintenance process for the RPC test suite will be described in a forthcoming Meta-EIP. The current plan is to maintain updates to the RPC test suite through a [voting contract](https://github.com/MetaMask/IPFS-Ethereum-Hackathon/issues/14), with one-developer one-vote where developer identities are verified using [devcon2 tokens](https://www.devcon2-token.com/). (There is a separate plan to expand the Devcon2 tokens into a web of trust, in order to enable participation by any and all Ethereum developers/stakeholders). Tentatively named `EipSignal`, this automated governance process is somewhat in the spirit of the [Yellow Paper Committee](https://github.com/gavofyork/curly-engine); however, the outcome of `EipSignal` votes will only mandate changes to the RPC API specification and test suite as described above, and will NOT govern \"core/consensus\" protocol changes. The work-in-progress on `EipSignal` can seen here: [https://github.com/MetaMask/IPFS-Ethereum-Hackathon/issues/14](https://github.com/MetaMask/IPFS-Ethereum-Hackathon/issues/14).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/217/reactions",
    "total_count": 24,
    "+1": 14,
    "-1": 0,
    "laugh": 1,
    "hooray": 3,
    "confused": 0,
    "heart": 6,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/217/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/280194888",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-280194888",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 280194888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDE5NDg4OA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-16T01:00:02Z",
    "updated_at": "2017-02-16T01:02:41Z",
    "author_association": "MEMBER",
    "body": "👍 \r\n\r\n> The asserts array specifies jq programs or \"filters\", which are used to compare the received response against the expected response.\r\n\r\nIs it possible to include strict verifications, such as a subset of regular expressions on some data fields? Thinking here about validating that an actual address was returned for example by `personal_newAccount`.\r\n\r\n> The chainConfig option points to a set of blocks/transactions to import. The current chain configuration is inherited from ethereum/rpc-tests, which in turn borrows from the state tests repo.\r\n\r\nHave you seen cpp-ethereum's `test_setChainParams` RPC method? I think that might be the successor of that format.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/280194888/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/280200489",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-280200489",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 280200489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDIwMDQ4OQ==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-16T01:29:15Z",
    "updated_at": "2017-02-16T01:29:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is very exciting to me. Developers need a place they can look up stable methods, and client devs need a smooth way to evolve their interfaces.\r\n\r\nOther clients that will be nice to add to the tested columns:\r\n\r\n- [testrpc](https://github.com/ethereumjs/testrpc)\r\n- [provider-engine](https://github.com/MetaMask/provider-engine) (Wrapped with an RPC server, backed by different clients)\r\n\r\nAnd I'm sure others, too. Once we have a strong singular test suite like this, building new RPC providers should become a much more stable process.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/280200489/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/280489935",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-280489935",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 280489935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDQ4OTkzNQ==",
    "user": {
      "login": "bobsummerwill",
      "id": 3788156,
      "node_id": "MDQ6VXNlcjM3ODgxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3788156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bobsummerwill",
      "html_url": "https://github.com/bobsummerwill",
      "followers_url": "https://api.github.com/users/bobsummerwill/followers",
      "following_url": "https://api.github.com/users/bobsummerwill/following{/other_user}",
      "gists_url": "https://api.github.com/users/bobsummerwill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bobsummerwill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bobsummerwill/subscriptions",
      "organizations_url": "https://api.github.com/users/bobsummerwill/orgs",
      "repos_url": "https://api.github.com/users/bobsummerwill/repos",
      "events_url": "https://api.github.com/users/bobsummerwill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bobsummerwill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-16T22:54:08Z",
    "updated_at": "2017-02-16T22:54:08Z",
    "author_association": "NONE",
    "body": "Really great to see this happening, @cdetrio, @flyswatter!\r\n\r\nStarting with the RPCs makes sense, and I hope that the patterns which are built can be extended to broader specifications over time.   We've had discussions along very similar lines for Enterprise using Boardroom.\r\n\r\nSee also http://html5test.com.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/280489935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/281016842",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-281016842",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 281016842,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTAxNjg0Mg==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-20T08:32:18Z",
    "updated_at": "2017-02-20T08:32:18Z",
    "author_association": "MEMBER",
    "body": "> Is it possible to include strict verifications, such as a subset of regular expressions on some data fields?\r\n\r\nYes, actually there's two ways to enforce a regexp. It can be done in the JSON schema using [`pattern`](http://json-schema.org/latest/json-schema-validation.html#rfc.section.3.3), or as a test case using a [jq filter](https://stedolan.github.io/jq/manual/#RegularexpressionsPCRE).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/281016842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/281021173",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-281021173",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 281021173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTAyMTE3Mw==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-20T08:54:27Z",
    "updated_at": "2017-02-20T08:54:27Z",
    "author_association": "MEMBER",
    "body": "> Have you seen cpp-ethereum's test_setChainParams RPC method? I think that might be the successor of that format.\r\n\r\nAh, here's an issue on that: https://github.com/ethereum/interfaces/issues/4",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/281021173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/281023266",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-281023266",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 281023266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTAyMzI2Ng==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-20T09:04:28Z",
    "updated_at": "2017-02-20T09:04:28Z",
    "author_association": "MEMBER",
    "body": "There's also https://github.com/ethcore/ethereum-rpc-json, which generates documentation but doesn't include tests to run against clients.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/281023266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287824488",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-287824488",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 287824488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzgyNDQ4OA==",
    "user": {
      "login": "rphmeier",
      "id": 10121380,
      "node_id": "MDQ6VXNlcjEwMTIxMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/10121380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rphmeier",
      "html_url": "https://github.com/rphmeier",
      "followers_url": "https://api.github.com/users/rphmeier/followers",
      "following_url": "https://api.github.com/users/rphmeier/following{/other_user}",
      "gists_url": "https://api.github.com/users/rphmeier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rphmeier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rphmeier/subscriptions",
      "organizations_url": "https://api.github.com/users/rphmeier/orgs",
      "repos_url": "https://api.github.com/users/rphmeier/repos",
      "events_url": "https://api.github.com/users/rphmeier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rphmeier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T16:56:13Z",
    "updated_at": "2017-03-20T16:56:18Z",
    "author_association": "NONE",
    "body": "> http://cdetrio.github.io/eth-compat-table/ \r\n\r\nSeems like it measures compatibility against Geth, not against any spec.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287824488/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287833803",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-287833803",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 287833803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzgzMzgwMw==",
    "user": {
      "login": "bobsummerwill",
      "id": 3788156,
      "node_id": "MDQ6VXNlcjM3ODgxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3788156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bobsummerwill",
      "html_url": "https://github.com/bobsummerwill",
      "followers_url": "https://api.github.com/users/bobsummerwill/followers",
      "following_url": "https://api.github.com/users/bobsummerwill/following{/other_user}",
      "gists_url": "https://api.github.com/users/bobsummerwill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bobsummerwill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bobsummerwill/subscriptions",
      "organizations_url": "https://api.github.com/users/bobsummerwill/orgs",
      "repos_url": "https://api.github.com/users/bobsummerwill/repos",
      "events_url": "https://api.github.com/users/bobsummerwill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bobsummerwill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T17:24:13Z",
    "updated_at": "2017-03-20T17:25:46Z",
    "author_association": "NONE",
    "body": "Hey @rphmeier.\r\n\r\nSee \"Test suite maintenance\" at the very top of this issue.\r\n\r\nThe existing tests are incomplete placeholders.   The plan is to expand/refine those to become the missing client-neutral executable specification.\r\n\r\n*An automated maintenance process for the RPC test suite will be described in a forthcoming Meta-EIP. The current plan is to maintain updates to the RPC test suite through a voting contract, with one-developer one-vote where developer identities are verified using devcon2 tokens. (There is a separate plan to expand the Devcon2 tokens into a web of trust, in order to enable participation by any and all Ethereum developers/stakeholders). Tentatively named EipSignal, this automated governance process is somewhat in the spirit of the Yellow Paper Committee; however, the outcome of EipSignal votes will only mandate changes to the RPC API specification and test suite as described above, and will NOT govern \"core/consensus\" protocol changes. The work-in-progress on EipSignal can seen here: MetaMask/IPFS-Ethereum-Hackathon#14.*",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287833803/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287834531",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-287834531",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 287834531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzgzNDUzMQ==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T17:26:31Z",
    "updated_at": "2017-03-20T17:26:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bobsummerwill beat me to it, but I'll still reword:\r\n\r\n@rphmeier \r\n> Seems like it measures compatibility against Geth, not against any spec.\r\n\r\nThere is no current spec to measure against, which is why this EIP exists.\r\n\r\nThe current plan is to [manage this test suite with a form of governance](https://github.com/MetaMask/IPFS-Ethereum-Hackathon/issues/14), at which point non-geth-compliant specs may emerge, or even become dominant.\r\n\r\nUntil then, the linked test suite should be treated as a template for specs, not as a proposed spec itself.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287834531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287840683",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-287840683",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 287840683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Nzg0MDY4Mw==",
    "user": {
      "login": "rphmeier",
      "id": 10121380,
      "node_id": "MDQ6VXNlcjEwMTIxMzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/10121380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rphmeier",
      "html_url": "https://github.com/rphmeier",
      "followers_url": "https://api.github.com/users/rphmeier/followers",
      "following_url": "https://api.github.com/users/rphmeier/following{/other_user}",
      "gists_url": "https://api.github.com/users/rphmeier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rphmeier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rphmeier/subscriptions",
      "organizations_url": "https://api.github.com/users/rphmeier/orgs",
      "repos_url": "https://api.github.com/users/rphmeier/repos",
      "events_url": "https://api.github.com/users/rphmeier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rphmeier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T17:45:18Z",
    "updated_at": "2017-03-20T17:45:18Z",
    "author_association": "NONE",
    "body": "A test suite isn't a specification, it just tests conformity to some specification. The schema described here is not sufficient to specify certain primitives which all methods rely upon. This is exactly how you get into the situation of strange corner cases that each client implements differently while still being \"to-spec\".\r\n\r\nThe places where I see the current documentation lacking the most:\r\n  - definition of pending state\r\n  - definition of error messages\r\n  - lack of consensus between client devs over changes\r\n\r\nI'm glad that this EIP is working on point 3. But we need strong definitions of the primitives used to build the RPC methods rather than specific test cases which will just lead to overfitting.\r\n\r\nIt's misleading to label one specific implementation of ambiguous methods as \"correct\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287840683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287879809",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-287879809",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 287879809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Nzg3OTgwOQ==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T20:00:06Z",
    "updated_at": "2017-03-20T20:14:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rphmeier \r\n\r\nI think we're actually starting to stray beyond the scope of this issue, but there isn't a better place for it.  This issue is really about an RPC test format.  We're beginning to talk about the governance process of managing those tests.\r\n\r\nI understand the initial alarm, it could sound like someone is trying to hijack what \"correct\" means, but that's not our intention at all.  We're not trying to shame Parity over a specific difference from Geth, we're trying to create a tool for all client devs to better coordinate their implementations.\r\n\r\nThe (current, in flux) plan is that a given suite of tests would *accompany* an EIP spec, not replace it. For example, for a given EIP, a variety of accompanying test suites could be nominated, and the most popular one(s?) could be displayed on the compatibility table.\r\n\r\nSince the most popular test suite for a given EIP would be displayed, the test would not itself be an endorsement of that EIP spec, it would merely be a representation of it, and a way of automatically measuring compliance to it, which better represents the sort of ad-hoc standards process we actually have, where endorsement is almost solely represented through client implementation.\r\n\r\nIt certainly would not be a spec itself, since the table could include distinct, incompatible implementations of the same method, but it *would* provide a singular place to view and compare those incompatibilities. This table *would not be about labeling any one implementation as correct*, but instead, be a way of highlighting differences of implementation, for the benefit of both dapp and client developers.\r\n\r\nI don't think a test suite has to encourage over-fitting, either.  In the test format that @cdetrio has proposed, specific values of the response can be used to validate results, so it does not need to blindly enforce bit-conformity.\r\n\r\nIn the case of `personal_sign`, a reasonable test might check if a certain account with a published private key, given a certain message, produces a consistent signed output, and no more.  This is not a spec, but adhering to it, and publishing this sample data, could have alleviated many headaches that came from having an under-specified feature adopted by a client.\r\n\r\nI'm very interested in seeing solutions to 1 & 2 as well, and while a test suite may not be a complete solution for them, I think it may still be a useful tool for even those issues, when combined with EIP specifications.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287879809/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/292341466",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-292341466",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 292341466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjM0MTQ2Ng==",
    "user": {
      "login": "cdetrio",
      "id": 997681,
      "node_id": "MDQ6VXNlcjk5NzY4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/997681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdetrio",
      "html_url": "https://github.com/cdetrio",
      "followers_url": "https://api.github.com/users/cdetrio/followers",
      "following_url": "https://api.github.com/users/cdetrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdetrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdetrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdetrio/subscriptions",
      "organizations_url": "https://api.github.com/users/cdetrio/orgs",
      "repos_url": "https://api.github.com/users/cdetrio/repos",
      "events_url": "https://api.github.com/users/cdetrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdetrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-06T22:22:29Z",
    "updated_at": "2017-04-06T22:22:29Z",
    "author_association": "MEMBER",
    "body": "@rphmeier Good points, I agree that pending state and error messages are two important areas to address.\r\n\r\nEIP https://github.com/ethereum/EIPs/issues/136 addresses RPC error messages, and I think the schema here is sufficient to incorporate those error messages.\r\n\r\nPending state is trickier. Do you have any suggestions for how to define the pending state as a primitive?\r\n\r\nI'm still unsure about this, but one thought is that perhaps an additional [testing-specific](https://github.com/ethereum/interfaces/issues/4) RPC method would be useful, such as a `test_setPendingBlock(block_rlp)` method, similar to the `test_addBlock(block_rlp)` already supported by cpp-ethereum. Such RPC methods would make it easy to test assertions in a `transitionEvent` field (mentioned in the Todos above). On the other hand, I dislike the idea of test-specific RPC methods because it could lead to clients implementing the correct behavior for the test methods, but unexpected behavior in normal use. An example of this is https://github.com/ethereum/go-ethereum/issues/2897, where `eth_sendTransaction` applies tx's to the pending block only if the client is not mining (if the client is mining, then you have to wait a block before the tx is applied to the pending state). Preventing these kinds of corner cases is the goal of black-box testing using Hive (as opposed to unit tests). I'd prefer to just use `eth_sendTransaction` and assert that the tx is applied immediately, specifying it as incorrect behavior if not, regardless of whether the client is mining.\r\n\r\nOn the third point, \"lack of consensus between client devs over changes\", that will be addressed by a separate EIP/meta-EIP, which will propose a governance/maintenance process. However, I wouldn't mind bootstrapping it with an initial test suite of \"compatible/correct\" behavior, determined informally by pre-existing standards and rough consensus. The current examples were generated against geth (two incompatible geth branches, in fact), but they are certainly only meant as examples.\r\n\r\nThe discussion here should focus on the spec or test schema/format. The term \"spec\" is used loosely, in the sense of an [API spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md), where the aim is to enable black-box testing of RPC method behavior. We want to settle on a format that is sufficient to specify behavior (at least implicitly if not explicitly) that is currently ambiguous, and test compliance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/292341466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/296492415",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-296492415",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 296492415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjQ5MjQxNQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-23T22:09:36Z",
    "updated_at": "2017-04-23T22:09:36Z",
    "author_association": "MEMBER",
    "body": "What I see as a major hole in these tests is that they don't appear to have a mechanism for setting up starting state.  What these tests really should be testing is along the lines of:\r\n> Given state A; call RPC method B then C; expect result D\r\n\r\nThis means tests necessarily need to be more complex than a simple \"given request, expect result\".  One way to achieve this (pseudocode only):\r\n```\r\ninitializeGenesisBlock()\r\ntransactionHash = submitTransaction(myTransaction)\r\nexpect(transactionHash).to.not.be.null\r\nmineAllTransactions()\r\nnewBlock = rpc_eth_getBlockByNumber(\"latest\")\r\nexpect(newBlock.transactions).to.contain(transactionHash)\r\n```\r\n\r\nAlternatively, the test could explicitly setup expected state.  For example:\r\n```\r\nstartingState: [\r\n\taccounts: [\r\n\t\t{ address: \"0x1234abcd\", eth: \"5\", signingStrategy: \"SIGN_EVERYTHING\" },\r\n\t],\r\n\tblocks: [\r\n\t\t{ transactions: [], uncles: [], hash: \"0xabcd1234\", ... },\r\n\t\t{ transactions: [...], uncles: [...], hash: \"...\", ... },\r\n\t],\r\n\tcontractState: [\r\n\t\t...\r\n\t],\r\n\t...\r\n]\r\n```\r\nThen the test would call a one or more RPC methods and assert that it gets back a very well defined response.\r\n\r\nThe key here is that all tests should setup the current full chain state, then call a particular RPC method and assert on the results.  Building a test suite like this is expensive, but is also valuable for multi-implementation compatibility.  Note that this test doesn't care _how_ an implementation achieves the result (implementation details), but it is well defined that given a particular state and an RPC call, an expected outcome is achieved.\r\n\r\nAs to how to codify \"setup\", I'll leave that up for discussion but I do think it is critical that __COMPLETE__ setup is included in the test.  The test should assume nothing about the current state of the world when it executes.\r\n\r\nPersonally, I'm a fan of the first style because it is generally easier to write tests when the test defines the path to the expected state, rather than requiring that the thing under test has the ability to set the current state.  The first mechanism also allows true black box testing, where the test can be run against an endpoint without knowing its implementation.  The second mechanism requires that the test have a back-door mechanism to setup current state.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/296492415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/365870918",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-365870918",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 365870918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTg3MDkxOA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T09:29:43Z",
    "updated_at": "2018-02-15T09:29:43Z",
    "author_association": "MEMBER",
    "body": "I just now stumled upon this when searching for something like [swagger](https://swagger.io/swagger-editor/) to define and generate documentation for our json-rpc apis. Unfortunately, swagger isn't for json-rpc. \r\n\r\n@cdetrio Have you found any good editors to write/generate the specifications above? Or did you do it by hand? \r\nI also found [jrgen](https://github.com/mzernetsch/jrgen), which is more geared towards our usecase, but doesn't appear quite as handy as the swagger editor. \r\n\r\nI'd really like to have not only a specification, but also an editor which makes writing/validating the specification intuitive and simple. If it involves writing files by hand, then running some npm script to validate and generate docs based on our custom specification file, then I'm afraid it will just bitrot after a while. \r\n ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/365870918/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/395500055",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-395500055",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 395500055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTUwMDA1NQ==",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-07T17:22:59Z",
    "updated_at": "2018-06-07T17:23:10Z",
    "author_association": "MEMBER",
    "body": "Totally up for this. \r\nI could write the boost test cases and you could run retesteth tool against any client to check request-response schemas. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/395500055/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407906136",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-407906136",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 407906136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzkwNjEzNg==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T21:42:54Z",
    "updated_at": "2018-07-25T21:42:54Z",
    "author_association": "MEMBER",
    "body": "@holiman I think I'd like to pick this up on my team.  My thought was that we could add these schemas to the `ethereum/tests` repository and document how they should be run against the client's JSON-RPC responses.  It'd still be up to each client to implement the tests.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407906136/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407925085",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-407925085",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 407925085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzkyNTA4NQ==",
    "user": {
      "login": "bobsummerwill",
      "id": 3788156,
      "node_id": "MDQ6VXNlcjM3ODgxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3788156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bobsummerwill",
      "html_url": "https://github.com/bobsummerwill",
      "followers_url": "https://api.github.com/users/bobsummerwill/followers",
      "following_url": "https://api.github.com/users/bobsummerwill/following{/other_user}",
      "gists_url": "https://api.github.com/users/bobsummerwill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bobsummerwill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bobsummerwill/subscriptions",
      "organizations_url": "https://api.github.com/users/bobsummerwill/orgs",
      "repos_url": "https://api.github.com/users/bobsummerwill/repos",
      "events_url": "https://api.github.com/users/bobsummerwill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bobsummerwill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T23:11:04Z",
    "updated_at": "2018-07-25T23:11:04Z",
    "author_association": "NONE",
    "body": "Do it, @pipermerriam.  That would be awesome!\r\n\r\nWhen I spoke at the launch event for the EEA back in February 2017, 17 months ago, this was actually one of the areas of protocol specification which I highlighted as being most needed and highest impact - both for public Ethereum and for enterprise scenarios.\r\n\r\nThe lack of clear and testable JSON-RPC specifications really hurts everyone trying to build on top of Ethereum.\r\n\r\nWhat are PegaSys doing for RPCs in Pantheon, @shahankhatch?   Are you just trying to be close to Geth?   Or did you do some modal thing like Parity have?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407925085/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407926058",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-407926058",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 407926058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzkyNjA1OA==",
    "user": {
      "login": "bobsummerwill",
      "id": 3788156,
      "node_id": "MDQ6VXNlcjM3ODgxNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3788156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bobsummerwill",
      "html_url": "https://github.com/bobsummerwill",
      "followers_url": "https://api.github.com/users/bobsummerwill/followers",
      "following_url": "https://api.github.com/users/bobsummerwill/following{/other_user}",
      "gists_url": "https://api.github.com/users/bobsummerwill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bobsummerwill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bobsummerwill/subscriptions",
      "organizations_url": "https://api.github.com/users/bobsummerwill/orgs",
      "repos_url": "https://api.github.com/users/bobsummerwill/repos",
      "events_url": "https://api.github.com/users/bobsummerwill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bobsummerwill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-25T23:16:33Z",
    "updated_at": "2018-07-25T23:16:33Z",
    "author_association": "NONE",
    "body": "@rphmeier What do you see as the best path towards standardization of RPC specs across the various Ethereum clients, Robert?\r\n\r\nAs you said last year, there is a balance here to ensure that we don't \"over-fit\", and to ensure that any automated tests that we build are encoding unambiguous *original* specifications.\r\n\r\nAny thoughts, @gavofyork?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407926058/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408071139",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-408071139",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 408071139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODA3MTEzOQ==",
    "user": {
      "login": "winsvega",
      "id": 4492341,
      "node_id": "MDQ6VXNlcjQ0OTIzNDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4492341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winsvega",
      "html_url": "https://github.com/winsvega",
      "followers_url": "https://api.github.com/users/winsvega/followers",
      "following_url": "https://api.github.com/users/winsvega/following{/other_user}",
      "gists_url": "https://api.github.com/users/winsvega/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winsvega/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winsvega/subscriptions",
      "organizations_url": "https://api.github.com/users/winsvega/orgs",
      "repos_url": "https://api.github.com/users/winsvega/repos",
      "events_url": "https://api.github.com/users/winsvega/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winsvega/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-26T11:50:31Z",
    "updated_at": "2018-07-26T11:50:31Z",
    "author_association": "MEMBER",
    "body": "retesteth is capable of running response requests check against clients via RPC \r\nwe just need to come up with default parameters that node will report to those commands. \r\neg.  peercount 0.  accounts - empty   and so on. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408071139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/429594791",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-429594791",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 429594791,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU5NDc5MQ==",
    "user": {
      "login": "ethers",
      "id": 6937903,
      "node_id": "MDQ6VXNlcjY5Mzc5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6937903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethers",
      "html_url": "https://github.com/ethers",
      "followers_url": "https://api.github.com/users/ethers/followers",
      "following_url": "https://api.github.com/users/ethers/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethers/subscriptions",
      "organizations_url": "https://api.github.com/users/ethers/orgs",
      "repos_url": "https://api.github.com/users/ethers/repos",
      "events_url": "https://api.github.com/users/ethers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethers/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T04:04:47Z",
    "updated_at": "2018-10-14T04:04:47Z",
    "author_association": "MEMBER",
    "body": "Proposal: https://ethereum-magicians.org/t/eip-remote-procedure-call-specification/1537",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/429594791/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003685317",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-1003685317",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 1003685317,
    "node_id": "IC_kwDOAq426M470wXF",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T09:11:11Z",
    "updated_at": "2022-01-02T09:11:11Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003685317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013838166",
    "html_url": "https://github.com/ethereum/EIPs/issues/217#issuecomment-1013838166",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/217",
    "id": 1013838166,
    "node_id": "IC_kwDOAq426M48bfFW",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-16T09:11:24Z",
    "updated_at": "2022-01-16T09:11:24Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013838166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
