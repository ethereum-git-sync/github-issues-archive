{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2567",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2567/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2567/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2567/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2567",
  "id": 586436654,
  "node_id": "MDU6SXNzdWU1ODY0MzY2NTQ=",
  "number": 2567,
  "title": "Human-Readable Parameters for Contract Function Execution ",
  "user": {
    "login": "jstoxrocky",
    "id": 5459666,
    "node_id": "MDQ6VXNlcjU0NTk2NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5459666?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jstoxrocky",
    "html_url": "https://github.com/jstoxrocky",
    "followers_url": "https://api.github.com/users/jstoxrocky/followers",
    "following_url": "https://api.github.com/users/jstoxrocky/following{/other_user}",
    "gists_url": "https://api.github.com/users/jstoxrocky/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jstoxrocky/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jstoxrocky/subscriptions",
    "organizations_url": "https://api.github.com/users/jstoxrocky/orgs",
    "repos_url": "https://api.github.com/users/jstoxrocky/repos",
    "events_url": "https://api.github.com/users/jstoxrocky/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jstoxrocky/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2020-03-23T18:48:43Z",
  "updated_at": "2021-11-21T03:11:32Z",
  "closed_at": "2021-11-21T03:11:32Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Hey all, hope everyone is staying safe out there! \r\nI understand my PR is in draft form and that posting a draft form issue here is discouraged. However, as a new user to Ethereum Magicians I am not able to post a topic with more than one link or image so I am using this repo's issues section for the discussion.\r\n\r\n[PR here](https://github.com/ethereum/EIPs/pull/2566)\r\n\r\n---\r\neip: 2566\r\ntitle: Human-Readable Parameters for Contract Function Execution \r\nauthor: Joseph Stockermans (@jstoxrocky)\r\ndiscussions-to: https://ethereum-magicians.org/t/human-readable-parameters-for-contract-function-execution/4154, https://github.com/ethereum/EIPs/issues/2567\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory (*only required for Standard Track): Interface\r\ncreated: 2020-03-23\r\n---\r\n\r\n## Simple Summary\r\nThis EIP proposes a new Ethereum RPC method `eth_sendTransactionToContract` that accepts a human readable version of `eth_sendTransaction`'s `data` field. This change will allow ProviderWallets (hybrid Ethereum provider / wallet software) like Metamask and Geth to display confirmation screens with human readable details of a function call to a contract.\r\n\r\n## Abstract\r\nWhen a dapp prompts a user to execute a smart contract function via a ProviderWallet, confirmation screens displayed in the ProviderWallet layer cannot display the human readable details of the function to be called and the arguments to be passed. This is because the Ethereum RPC method used for contract function execution (`eth_sendTransaction`) accepts information about what function to call in a non-human readable (and non-recoverable) format. As such, when a ProviderWallet receives this non-human readable information from a dapp, they are unable to display a human readable version since they never received one and cannot recover one from the data.\r\n\r\nThis creates a poor and potentially dangerous user experience. For example, a malicious dapp could swap out the `address` argument in a token contract's `transfer(address,uint256)` function and reroute the tokens intended for someone else to themselves. This slight-of-hand would be quiet and unlikely to be picked up by a casual user glancing over the non-human readable data. By adding a new Ethereum RPC method (`eth_sendTransactionToContract`) that accepts a human readable version of the function-executing data, ProviderWallets can display the human readable details of contract function execution to users.\r\n\r\n## Motivation\r\n### ProviderWallet Definition\r\nProviderWallets like Metamask and Geth are hybrid software that combine an Ethereum API provider with an Ethereum wallet. This allows them to sign transactions on behalf of their users and also broadcast those signed transactions to the Ethereum network. ProviderWallets are used for both convenience and for the protection they give users through human readable confirmation prompts.\r\n\r\n### Existing Solutions\r\nMuch discussion has been made in the past few years on the topic of human readable Ethereum transaction data. Aragon's [Radspec](https://github.com/aragon/radspec) addresses this issue by requiring contract developers to amend their contract functions with human readable comments. ProviderWallets can then use Aragon's Radspec software to parse these comments from the contract code and display them to the end user - substituting in argument values where necessary. Unfortunately, this approach cannot work with contracts that do not have Radspec comments (and may require integration with IPFS(?)).\r\n\r\n[EIP 1138](https://github.com/ethereum/EIPs/issues/1138) also addresses this issue directly but contains serious security issues - allowing untrusted dapps to generate the human readable message displayed to users. In a similar train of thought, Geth's #2940 PR](https://github.com/ethereum/go-ethereum/pull/2940) and [EIPs 191](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-191.md), [712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md) all highlight the Ethereum community's desire for ProviderWallets to better inform users about what data they are actually acting upon. \r\n\r\nFinally, The ProviderWallet Metamask already includes some built-in magic for interactions with ERC20 contracts that allows confirmation prompts to display the intended *token* recipient and *token* value. Although this is accomplished in an ad hoc fashion for ERC20-like contracts only, the motivation is the same: users deserve better information about the execution of contract functions they are relying on ProviderWallets to perform. \r\n\r\n### Background\r\nAt one point or another, a dapp will ask a user to interact with a contract. The interaction between dapps and contracts is a large part of the Ethereum ecosystem and is most commonly brokered by a ProviderWallet. When a dapp asks a user to interact with a contract, it will do so by sending the `eth_sendTransaction` method name to the Ethereum API exposed by a ProviderWallet along with the relevant transaction data. The `data` field of the transaction data contains the information necessary for the Ethereum virtual machine to identify and execute the contract's function. This field has a specific formatting that is both non-human readable and non-recoverable to its human readable state.\r\n\r\nThe accepted format for `eth_sendTransaction`'s `data` field is the hexadecimal encoding of the first four bytes of the keccak256 digest of the function signature. This abbreviated hash is then concatenated with the ABI encoded arguments to the function. Since the keccak256 digest of the function signature cannot be converted back into the function signature, the `data` field is not only not non-human readable, its non-recoverable as well. On top of this, additional insight into the concatenated argument values is further obfuscated as information about their data types are held in the function signature preimage.\r\n\r\n### Illustrated Example\r\nWhen a ProviderWallet receives an `eth_sendTransaction` method call, it has the opportunity to display an information-rich confirmation prompt before signing and broadcasting the transaction to the Ethereum network. Unfortunately, as mentioned above, human readable contract function-execution data is not available at this stage. To illustrate, below we see a Metamask confirmation prompt. For context, this transaction executes the function `transferTokens(address,uint256)` at contract address `0xe44127f6fA8A00ee0228730a630fc1F3162C4d52`. The `from` address is aliased as `Account`, the value for the `address` argument passed to the function is `0x6Aa89e52c9a826496A8f311c1a9db62fd477E256`, and the `uint256` value is `100000000000`.\r\n\r\n<img src=\"https://raw.githubusercontent.com/ethereum/EIPs/9f1b3c4dfc05436e871b03ad397b85c7cc865673/assets/eip-2566/tx.png\" style=\"padding-bottom: 20px; padding-top: 20px\" width=\"35%\" />\r\n\r\nThere are a two main issues with what we are seeing. First, the recipient address shown is the destination contract - not the token recipient. While this is technically correct, the user might not think about their action in this way. In their mind, they might think of the recipient as the address to which they are attempting to transfer tokens to. This distinction can become clear with human readable function-execution data. Second, the hexadecimal encoded function-execution data is not very readable. In fact it's very unlikely that a regular user will even look at this information - let alone parse any insight from it.\r\n\r\nLet's compare what we see in the images above with what a user would see if a malicious dapp swaps out the address argument for one of their own. We will leave all other information the same but replace `0x6Aa89e52c9a826496A8f311c1a9db62fd477E256` with `0x9e0A8333984D617562a29a935123F17257aD4dEc`.\r\n\r\n<img src=\"https://raw.githubusercontent.com/ethereum/EIPs/9f1b3c4dfc05436e871b03ad397b85c7cc865673/assets/eip-2566/compromised_tx.png\" style=\"padding-bottom: 20px; padding-top: 20px\" width=\"35%\" />\r\n\r\nYou can see how quiet this slight-of-hand is. The hexadecimal encoded function-execution data has changed to include the new address but it is very unlikely that this non-human readable data field would cause any user to suspect that a dapp is stealing from them. Although this attack would likely be obvious to many examining the dapps front end source code, we cannot assume that all users have the ability to identify such an attack. We should strive to give end users much better security when interacting with contracts. Something like the following can be easily imagined with the `eth_sendTransactionToContractFunction` method.\r\n\r\n<img src=\"https://raw.githubusercontent.com/ethereum/EIPs/9f1b3c4dfc05436e871b03ad397b85c7cc865673/assets/eip-2566/human_readable_tx.png\" style=\"padding-bottom: 20px; padding-top: 20px\" width=\"35%\" />\r\n\r\nThe Ethereum community is trending toward tools that better inform users about their actions. ProviderWallets will remain an integral part of the Ethereum community - serving as the backbone for dapp interconnectivity. The Ethereum RPC API specs should be augmented with methods like `eth_sendTransactionToContract` that allow ProviderWallets to better inform users.\r\n\r\n## Specification\r\nThis EIP proposes increasing the set of Ethereum RPC methods to include a new  method - `eth_sendTransactionToContractFunction`. This method roughly parallels `eth_sendTransaction` with the only difference being the omission of the optional, non-human readable `data` field and the inclusion of the required, human readable `function` field.\r\n\r\nParameters\r\n\r\n1. `Object` - The transaction object\r\n  * `from`: `DATA`, 20 Bytes - The address the transaction is send from.\r\n  * `to`: `DATA`, 20 Bytes - (optional when creating new contract) The address the transaction is directed to.\r\n  * `gas`: `QUANTITY` - (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas.\r\n  * `gasPrice`: `QUANTITY` - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas\r\n  * `value`: `QUANTITY` - (optional) Integer of the value sent with this transaction\r\n  * `function`: `Object`\r\n    * `abi`: `DATA` - The function ABI\r\n    * `args`: `DATA` - The arguments to the function (not ABI encoded)\r\n  * `nonce`: `QUANTITY` - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.\r\n\r\nExample Parameters\r\n```\r\n  params: [{\r\n    \"from\": \"0x69e6F1b01f34A702Ce63bA6EF83c64fAEC37a227\",\r\n    \"to\": \"0xe44127f6fA8A00ee0228730a630fc1F3162C4d52\",\r\n    \"gas\": \"0x76c0\", // 30400\r\n    \"gasPrice\": \"0x9184e72a000\", // 10000000000000\r\n    \"value\": \"0x9184e72a\", // 2441406250\r\n    \"function\": {\r\n      \"abi\": \"{\r\n        \"inputs\": [{\r\n          \"name\": \"_address\",\r\n          \"type\": \"address\"\r\n        }, {\r\n          \"name\": \"_value\",\r\n          \"type\": \"uint256\"\r\n        }],\r\n        \"name\": \"transferTokens\",\r\n        \"outputs\": [{\r\n          \"name\": \"success\",\r\n          \"type\": \"bool\"\r\n        }],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n      }\",\r\n      \"args\": [\r\n        \"0x6Aa89e52c9a826496A8f311c1a9db62fd477E256\",\r\n        100000000000\r\n      ]\r\n    }\r\n}]\r\n```\r\n\r\nReturns\r\nDATA, 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.\r\n\r\nExample\r\n// Request\r\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendTransactionToContractFunction\",\"params\":[{see above}],\"id\":1}'\r\n\r\n// Result\r\n{\r\n  \"id\":1,\r\n  \"jsonrpc\": \"2.0\",\r\n  \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"\r\n}\r\n\r\n## Rationale\r\nWith backwards compatibility in mind, this EIP proposes augmenting the set of Ethereum RPC methods with an additional method instead of mutating the existing paralleled method. Precedent for adding a new RPC method comes from [EIP 712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md) in which adding the method `eth_signTypedData` is proposed for confirmation prompt security. As an alternate approach, the `eth_sendTransaction` method could be changed to accept its `data` argument in a human readable format, but this would break all existing code attempting to execute a contract function. Breaking this backwards compatibility would be a far bigger issue than the readability of an `data` argument so this EIP does not recommended this approach.\r\n\r\nThis EIP's proposed `eth_sendTransactionToContractFunction` method is intended to parallel `eth_sendTransaction` as much as possible since both methods result in the same behaviour when executing a contract function. This slightly vague `data` field was renamed to `function` to improve specificity. The `function` field accepts an object of its own with two required fields: `abi` and `args`. The `abi` field is an element of the contract's ABI that corresponds to the intended function. The `args` field is a non ABI-encoded array of arguments to be passed to the contract function. Dapps need not ABI-encode arguments as the data types of these arguments can be inferred from the `abi` field on the ProviderWallet side and encoded at that time.  \r\n\r\n## Backwards Compatibility\r\nThis EIP does not break backwards compatibility and addresses that point above.\r\n\r\n## Implementation\r\nThe `data` field from `eth_sendTransaction` can be reconstructed in its non-human readable format from the `abi` and `args` fields in `eth_sendTransactionToContractFunction`. This allows implementations to broadcast a transaction with data in the correct format for the Ethereum virtual machine. The function signature can be built and hashed from the function ABI, and the arguments can be ABI-encoded according to the data types specified in the function ABI.\r\n\r\n## Security Considerations\r\nDisplaying the contract address, function name, and argument name/values can provide additional security to users but it is not a guarantee that a function will execute as the user expects. A poorly implemented contracy can still name its function `transfer` and accept `address` and `uint256` arguments - but there is nothing short of contract examination that will let a user know that this contract is indeed a valid ERC20 contract. This EIP does not intend to solve the larger problem around trust in a contract's code, but instead intends to give users better tools to understand exactly what is contained within the data they are broadcasting to the Ethereum network.\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2567/reactions",
    "total_count": 9,
    "+1": 9,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2567/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962544736",
    "html_url": "https://github.com/ethereum/EIPs/issues/2567#issuecomment-962544736",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2567",
    "id": 962544736,
    "node_id": "IC_kwDOAq426M45X0Rg",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-07T03:11:15Z",
    "updated_at": "2021-11-07T03:11:15Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962544736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974747963",
    "html_url": "https://github.com/ethereum/EIPs/issues/2567#issuecomment-974747963",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2567",
    "id": 974747963,
    "node_id": "IC_kwDOAq426M46GXk7",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-21T03:11:31Z",
    "updated_at": "2021-11-21T03:11:31Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974747963/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
