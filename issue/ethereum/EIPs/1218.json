{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1218",
  "id": 341060070,
  "node_id": "MDU6SXNzdWUzNDEwNjAwNzA=",
  "number": 1218,
  "title": "Simpler alternative to BLOCKHASH extension (#210)",
  "user": {
    "login": "vbuterin",
    "id": 2230894,
    "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vbuterin",
    "html_url": "https://github.com/vbuterin",
    "followers_url": "https://api.github.com/users/vbuterin/followers",
    "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
    "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
    "organizations_url": "https://api.github.com/users/vbuterin/orgs",
    "repos_url": "https://api.github.com/users/vbuterin/repos",
    "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vbuterin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2018-07-13T15:20:53Z",
  "updated_at": "2021-12-18T21:12:19Z",
  "closed_at": "2021-12-18T21:12:19Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "### Summary\r\n\r\nAllows blocks to be directly aware of block hashes much older than the current hash.\r\n\r\n### Parameters\r\n\r\n* `BLOCKHASH_CONTRACT_ADDR`: 0xf0 (ie. 240)\r\n\r\n### Specification\r\n\r\nAt the start of processing any block, run the following algorithm, where `store(x, y)` stores value y in key x of `BLOCKHASH_CONTRACT_ADDR`:\r\n\r\n```python\r\n\r\ni = 0\r\nwhile (not (block.number-1) & 2**i) and i < 32:\r\n    store(i, block.prevhash)\r\n    i += 1\r\n```\r\n\r\nExtends the BLOCKHASH opcode so that if a given block height's hash is available in one of these storage keys, then this value is returned (ie. so sometimes block hashes with heights more than 256 blocks ago can be returned). That is, if BLOCKHASH is called with height equal to `block.number - (block.number % 2**k)` for some k < 32, then `sload(k)` is returned.\r\n\r\n### Explanation\r\n\r\nStorage key 0 always stores the last blockhash, storage key 1 stores the last blockhash with an even blockheight, storage key 2 stores the last blockhash with a blockheight of 0 mod 4, etc etc.\r\n\r\n### Use cases\r\n\r\n1. Some contracts may want to use block hashes as a source of randomness, with an inclusion window larger than 256 blocks for safety. With this EIP, an application would be able to use a block hash with a 2^k window during which that hash could be called, at the cost of a [0...2^k] block delay until the hash is accessible.\r\n2. This EIP ensures that it's possible to prove the hash of block N to the chain at height N2 with `~log2(N2 - N) - 8` Merkle branches. It should not be too hard to use existing libraries to write a utility contract and library that produces and verifies these proofs.\r\n3. The above makes it possible to make trustless light clients, as one can make a subchain of the main chain that contains all of its lowest-hash-value blocks, proving to a client that some particular checkpoint actually is the best available checkpoint in O(log(n)) space/time.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1218/reactions",
    "total_count": 6,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408437609",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-408437609",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 408437609,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODQzNzYwOQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T14:35:49Z",
    "updated_at": "2018-07-27T14:35:49Z",
    "author_association": "MEMBER",
    "body": "Even if the client writes the account storage directly, it would be nice to still have a \"precompile\" at the address so that the semantics from user contract's perspective remain the same as in EIP210:\r\n- `blockhash` opcode only support the last 256\r\n- calling the contract has access to the entire range\r\n\r\nIn this case there are two options:\r\n1) keep it as a precompile for retrieving the data\r\n2) implementing the retrieval (should be super simple) in EVM bytecode directly\r\n\r\nThe main benefit of all this is that without any significant protocol change at a future time the \"precompile\" could be rewritten in for example wasm.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408437609/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408439100",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-408439100",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 408439100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODQzOTEwMA==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-27T14:40:53Z",
    "updated_at": "2018-07-27T14:40:53Z",
    "author_association": "MEMBER",
    "body": "So the address would have code that could be called to read any particular storage key? Seems reasonable to me.\r\n\r\nI suppose we can also add a `store(1024 + block.number % 256, block.prevhash)` command the the EIP so the contract also stores the last 256 hashes directly.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/408439100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412798000",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-412798000",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 412798000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjc5ODAwMA==",
    "user": {
      "login": "holiman",
      "id": 142290,
      "node_id": "MDQ6VXNlcjE0MjI5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/142290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/holiman",
      "html_url": "https://github.com/holiman",
      "followers_url": "https://api.github.com/users/holiman/followers",
      "following_url": "https://api.github.com/users/holiman/following{/other_user}",
      "gists_url": "https://api.github.com/users/holiman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/holiman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/holiman/subscriptions",
      "organizations_url": "https://api.github.com/users/holiman/orgs",
      "repos_url": "https://api.github.com/users/holiman/repos",
      "events_url": "https://api.github.com/users/holiman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/holiman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T08:38:48Z",
    "updated_at": "2018-08-14T08:38:48Z",
    "author_association": "MEMBER",
    "body": "> This EIP ensures that it's possible to prove the hash of block N to the chain at height N2 with ~log2(N2 - N) - 8 Merkle branches. It should not be too hard to use existing libraries to write a utility contract and library that produces and verifies these proofs.\r\n\r\nIn theory yes, but let's say it's not actually created until block 7M, and without 'stuffing' it with old values, at what point in time can it actually be relied upon to provide such data? It will be messy if contracts have to mess about with determining if a certain blocknumber is in the registry or not, by checking against `CONSTANTINOPLE_BLOCK`, and then have to handle that situation aswell, won't it?  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412798000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413030984",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-413030984",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 413030984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzAzMDk4NA==",
    "user": {
      "login": "AlexeyAkhunov",
      "id": 13686139,
      "node_id": "MDQ6VXNlcjEzNjg2MTM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/13686139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexeyAkhunov",
      "html_url": "https://github.com/AlexeyAkhunov",
      "followers_url": "https://api.github.com/users/AlexeyAkhunov/followers",
      "following_url": "https://api.github.com/users/AlexeyAkhunov/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexeyAkhunov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexeyAkhunov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexeyAkhunov/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexeyAkhunov/orgs",
      "repos_url": "https://api.github.com/users/AlexeyAkhunov/repos",
      "events_url": "https://api.github.com/users/AlexeyAkhunov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexeyAkhunov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-14T22:03:15Z",
    "updated_at": "2018-08-14T22:03:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@holiman To solve the problem of 'stuffing', I suggest making a contract that is able to accept historical blockhashes (backwards, one by one), write them into storage, and send a fixed small payment (lets say, 0.0001 ETH) back to tx.origin if the new entry has been created. The dominant gas cost of such operation is SSTORE (20k). So 0.0001 ETH (100'000 GWei) can buy 20'000 gas for 5 GWei per unit of gas. And to stuff 7m block hashes, you'd need a bit more than 700 ETH. These 700 ETH can be dropped into the contract and the rest will be done by the miners... (it is literally throwing money at the problem)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413030984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/415558630",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-415558630",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 415558630,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTU1ODYzMA==",
    "user": {
      "login": "zsfelfoldi",
      "id": 9884311,
      "node_id": "MDQ6VXNlcjk4ODQzMTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9884311?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zsfelfoldi",
      "html_url": "https://github.com/zsfelfoldi",
      "followers_url": "https://api.github.com/users/zsfelfoldi/followers",
      "following_url": "https://api.github.com/users/zsfelfoldi/following{/other_user}",
      "gists_url": "https://api.github.com/users/zsfelfoldi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zsfelfoldi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zsfelfoldi/subscriptions",
      "organizations_url": "https://api.github.com/users/zsfelfoldi/orgs",
      "repos_url": "https://api.github.com/users/zsfelfoldi/repos",
      "events_url": "https://api.github.com/users/zsfelfoldi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zsfelfoldi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-23T20:22:00Z",
    "updated_at": "2018-08-23T20:22:00Z",
    "author_association": "MEMBER",
    "body": "I have given it some thought and I do not think that \"stuffing\" 7M old block hashes into storage is worth the effort. I can not think of a use case where a contract would require proof of a block hash older than its own existence (and any such contract should only exist after the fork which includes this EIP). Proving old hashes might be useful for light clients but LES (and AFAIK also Parity's version) already uses checkpoints that enables servers to prove any block hash in a single step with a single Merkle proof:\r\nhttps://github.com/zsfelfoldi/go-ethereum/wiki/Canonical-Hash-Trie\r\nRight now these checkpoints are hardcoded and this EIP would help a lot in implementing a trustless verification algorithm that would enable clients to always obtain the latest checkpoint. Hardcoding the last checkpoint after the fork is perfectly fine though since it is only a single hash and will never change. Light clients will always be able to verify old block hashes and with this EIP they will also be able to verify them after the hardcoded checkpoint.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/415558630/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/415565581",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-415565581",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 415565581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTU2NTU4MQ==",
    "user": {
      "login": "zsfelfoldi",
      "id": 9884311,
      "node_id": "MDQ6VXNlcjk4ODQzMTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9884311?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zsfelfoldi",
      "html_url": "https://github.com/zsfelfoldi",
      "followers_url": "https://api.github.com/users/zsfelfoldi/followers",
      "following_url": "https://api.github.com/users/zsfelfoldi/following{/other_user}",
      "gists_url": "https://api.github.com/users/zsfelfoldi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zsfelfoldi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zsfelfoldi/subscriptions",
      "organizations_url": "https://api.github.com/users/zsfelfoldi/orgs",
      "repos_url": "https://api.github.com/users/zsfelfoldi/repos",
      "events_url": "https://api.github.com/users/zsfelfoldi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zsfelfoldi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-23T20:46:34Z",
    "updated_at": "2018-08-23T20:46:34Z",
    "author_association": "MEMBER",
    "body": "I also have a small extension proposal for this EIP: I think we should add the current TD (total difficulty) value to this contract. The main reason I'd like to champion this EIP is because it enables trustless checkpoint syncing of light clients. This process would look roughly like this:\r\n\r\n- pick a server node with the highest advertised TD\r\n- download the end of the header chain (a section which contains at least 1% of the advertised TD) and do PoW verification there\r\n- do some random sample checking of the rest of the chain\r\n\r\nUnfortunately it is really easy for an attacker to advertise a fake high TD while clients could only realize after a sufficient amount of random sampling that even though the chain PoWs are valid, the TD was a lie and the chain is probably an invalid fork or an attacker chain. Also since random sampling is a statistical method, small differences in TD could never be detected so the client could never be sure about the exact TD value belonging to a given block (which might also be imporant in some use cases). Having the TD as a part of the consensus would allow them to know the exact value and permit them to detect fraud very early in the second phase of the checkpoint syncing process.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/415565581/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/464357180",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-464357180",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 464357180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM1NzE4MA==",
    "user": {
      "login": "zmitton",
      "id": 6954889,
      "node_id": "MDQ6VXNlcjY5NTQ4ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6954889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmitton",
      "html_url": "https://github.com/zmitton",
      "followers_url": "https://api.github.com/users/zmitton/followers",
      "following_url": "https://api.github.com/users/zmitton/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmitton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmitton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmitton/subscriptions",
      "organizations_url": "https://api.github.com/users/zmitton/orgs",
      "repos_url": "https://api.github.com/users/zmitton/repos",
      "events_url": "https://api.github.com/users/zmitton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmitton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-16T15:46:23Z",
    "updated_at": "2019-02-16T15:46:23Z",
    "author_association": "NONE",
    "body": "what is the status of this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/464357180/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/466702754",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-466702754",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 466702754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjcwMjc1NA==",
    "user": {
      "login": "zmitton",
      "id": 6954889,
      "node_id": "MDQ6VXNlcjY5NTQ4ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6954889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmitton",
      "html_url": "https://github.com/zmitton",
      "followers_url": "https://api.github.com/users/zmitton/followers",
      "following_url": "https://api.github.com/users/zmitton/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmitton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmitton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmitton/subscriptions",
      "organizations_url": "https://api.github.com/users/zmitton/orgs",
      "repos_url": "https://api.github.com/users/zmitton/repos",
      "events_url": "https://api.github.com/users/zmitton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmitton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-23T22:11:27Z",
    "updated_at": "2019-02-23T22:11:27Z",
    "author_association": "NONE",
    "body": "Here are 3 other issues discussing this:\r\n\r\nhttps://github.com/ethereum/EIPs/pull/210 -> says _merged_ (last comment Aug3)\r\nthis thread -> says _open_\r\nhttps://github.com/ethereum/EIPs/pull/1094 -> _merged_ (last comment sep 20th)\r\nand https://github.com/ethereum/EIPs/pull/641 -> has been _closed_ (commented oct 16)\r\n\r\nFrom what I can tell, this never made it past draft status as an EIP. Does anyone have a clear reason why?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/466702754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469083407",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-469083407",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 469083407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTA4MzQwNw==",
    "user": {
      "login": "Matthalp-zz",
      "id": 1238969,
      "node_id": "MDQ6VXNlcjEyMzg5Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1238969?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Matthalp-zz",
      "html_url": "https://github.com/Matthalp-zz",
      "followers_url": "https://api.github.com/users/Matthalp-zz/followers",
      "following_url": "https://api.github.com/users/Matthalp-zz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Matthalp-zz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Matthalp-zz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Matthalp-zz/subscriptions",
      "organizations_url": "https://api.github.com/users/Matthalp-zz/orgs",
      "repos_url": "https://api.github.com/users/Matthalp-zz/repos",
      "events_url": "https://api.github.com/users/Matthalp-zz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Matthalp-zz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-04T00:37:27Z",
    "updated_at": "2019-03-04T00:38:39Z",
    "author_association": "NONE",
    "body": "@zmitton This came up on a Core Devs call a while back. Here is the agenda [from where it got dropped(https://github.com/ethereum/pm/blob/7d1028a632033e2b10e7ada6a97efa7b4ac20e59/All%20Core%20Devs%20Meetings/Meeting%2045.md) as a few potential implementations had been proposed but no commitment to thoroughly investigating was made. Recently this [\"Fly Paper\"](https://eprint.iacr.org/2019/226.pdf) publication using this concept has started making its rounds.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469083407/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093532",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-986093532",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 986093532,
    "node_id": "IC_kwDOAq426M46xpfc",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:12:01Z",
    "updated_at": "2021-12-04T21:12:01Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285386",
    "html_url": "https://github.com/ethereum/EIPs/issues/1218#issuecomment-997285386",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1218",
    "id": 997285386,
    "node_id": "IC_kwDOAq426M47cV4K",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T21:12:18Z",
    "updated_at": "2021-12-18T21:12:18Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
