{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1530",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1530/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1530/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1530/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1530",
  "id": 374508136,
  "node_id": "MDU6SXNzdWUzNzQ1MDgxMzY=",
  "number": 1530,
  "title": "ERC XXXX - Standard Contract Upgrade Events",
  "user": {
    "login": "PhABC",
    "id": 9306422,
    "node_id": "MDQ6VXNlcjkzMDY0MjI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PhABC",
    "html_url": "https://github.com/PhABC",
    "followers_url": "https://api.github.com/users/PhABC/followers",
    "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
    "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
    "organizations_url": "https://api.github.com/users/PhABC/orgs",
    "repos_url": "https://api.github.com/users/PhABC/repos",
    "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PhABC/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-10-26T18:59:40Z",
  "updated_at": "2019-01-29T19:26:08Z",
  "closed_at": "2019-01-29T19:26:07Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\neip: XXXX \r\ntitle: Standard for Contract Upgrade Events Proposal\r\nauthors:  ???\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-10-26\r\n---\r\n\r\n<!--You can leave these HTML comments in your merged EIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new EIPs. Note that an EIP number will be assigned by an editor. When opening a pull request to submit your EIP, please use an abbreviated title in the filename, `eip-draft_title_abbrev.md`. The title should be 44 characters or less.-->\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\nVarious third parties rely on events to track the state of contracts, such as token contracts. By listening to events, these parties can update their local database accordingly to suit their needs. For instance, Etherscan keeps track of ERC-20 and ERC-721 token transfer events to properly reflect users balances. However, contract upgrades can break the event traces if the events are now emitted in a new contract. This break in the event trace forces third parties to manually modify their local database and could easily be avoided if every contract upgrade used a standard event indicating where the new events will be.\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\nEstablishing a standard on event emitted when contracts are upgraded to ensure contiguous event traces. This will enable third parties to efficiently follow event traces without having to manually intervene in case of a contract upgrade. \r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\n\r\nEvent traces can be very helpful for third parties to maintain a local database that is more efficient to query from. For instance, this should be the case for token balances, where one should be able to maintain a valid representation of the current balances of any given token contract by simply listening to events and updating the database accordingly. However, contracts that upgrade their logic while keeping the storage identical will lead to having events emitted in the new proxy contracts. If no standard events are emitted, third parties will be unaware that the events of a given contracts are now happening elsewhere and will be unable to adjust accordingly without manual intervention. This proposal aims to standardize the events emitted during contract upgrades to ensure that all other events can be track in a bidirectional matter.\r\n\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\n\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC 2119](https://www.ietf.org/rfc/rfc2119.txt).\r\n\r\nWe will refer to the **storage contract** as the contract that maintains all the storage variable and that can't be migrated. We will refer to **logic contract** as the contract that has write and read permission to the storage contract. \r\n\r\n**Every ERC-XXXX compliant contract must implement the ERC721 and ERC165 interfaces**\r\n\r\n```solidity\r\npragma solidity ^0.4.25;\r\n\r\ninterface ERCXXXX is ERC165 {\r\n  /**\r\n   * @dev Emitted on the Storage Contract when its logic implementation is upgraded. \r\n   * MUST be triggered when the first logic contract is set (i.e. `Upgraded(0x0, firstImplementation)`  ). \r\n   * MUST be triggered everytime a storage contract is upgraded \r\n   * @param oldImplementation Address of the logic implementation being deprecated.\r\n   * @param oldImplementation Address of the new logic implementation.\r\n   */\r\n  event Upgraded(address indexed oldImplementation, address indexed newImplementation);\r\n}\r\n\r\n/**  \r\n * Note: The ERC-165 identifier for this interface is 0xUNKNOWN \r\n *          0xUNKNOWN MUST be set to true if ERC-XXXX is implemented.\r\n */\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n```\r\n\r\n## Rationale\r\n<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->\r\n\r\nImposing this event should be sufficient to allow any third party to track the events describing updates to a storage contract in a forward and backward manner. \r\n\r\nProperly using ERC-165 is necessary such that third parties can automatically know that storage related events will be in a separate contract, a contract that can change. \r\n\r\n## Backwards Compatibility\r\n<!--All EIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EIP must explain how the author proposes to deal with these incompatibilities. EIP submissions without a sufficient backwards compatibility treatise may be rejected outright.-->\r\n\r\n?\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\n\r\n## To potentially include : \r\n* Logic contract pointing to their respective storage contract?\r\n\r\n* Logic contract signal via ERC-165 that they only a logic contract?\r\n\r\n## Questions\r\n* What happen when multiple storage contracts use the same logic contract? How to best distinguish which storage contract is a given event triggered for?\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "PhABC",
    "id": 9306422,
    "node_id": "MDQ6VXNlcjkzMDY0MjI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PhABC",
    "html_url": "https://github.com/PhABC",
    "followers_url": "https://api.github.com/users/PhABC/followers",
    "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
    "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
    "organizations_url": "https://api.github.com/users/PhABC/orgs",
    "repos_url": "https://api.github.com/users/PhABC/repos",
    "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PhABC/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1530/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1530/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/433530406",
    "html_url": "https://github.com/ethereum/EIPs/issues/1530#issuecomment-433530406",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1530",
    "id": 433530406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzUzMDQwNg==",
    "user": {
      "login": "coinfork",
      "id": 2774008,
      "node_id": "MDQ6VXNlcjI3NzQwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2774008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coinfork",
      "html_url": "https://github.com/coinfork",
      "followers_url": "https://api.github.com/users/coinfork/followers",
      "following_url": "https://api.github.com/users/coinfork/following{/other_user}",
      "gists_url": "https://api.github.com/users/coinfork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coinfork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coinfork/subscriptions",
      "organizations_url": "https://api.github.com/users/coinfork/orgs",
      "repos_url": "https://api.github.com/users/coinfork/repos",
      "events_url": "https://api.github.com/users/coinfork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coinfork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T20:15:31Z",
    "updated_at": "2018-10-26T20:40:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I support this ERC. We need to have a standard way to detect migrations and upgrades to new versions of smart contracts. Watching this thread.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/433530406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/433568309",
    "html_url": "https://github.com/ethereum/EIPs/issues/1530#issuecomment-433568309",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1530",
    "id": 433568309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzU2ODMwOQ==",
    "user": {
      "login": "JamesTherien",
      "id": 39470646,
      "node_id": "MDQ6VXNlcjM5NDcwNjQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/39470646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JamesTherien",
      "html_url": "https://github.com/JamesTherien",
      "followers_url": "https://api.github.com/users/JamesTherien/followers",
      "following_url": "https://api.github.com/users/JamesTherien/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesTherien/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JamesTherien/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesTherien/subscriptions",
      "organizations_url": "https://api.github.com/users/JamesTherien/orgs",
      "repos_url": "https://api.github.com/users/JamesTherien/repos",
      "events_url": "https://api.github.com/users/JamesTherien/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JamesTherien/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T23:24:06Z",
    "updated_at": "2018-10-26T23:27:37Z",
    "author_association": "NONE",
    "body": "Yes, this ERC is critical for contract migrations and event-based semantics to work. We need something like this to standardize event scraping.\r\n\r\nI think you want events for both the retired contract (pointing to the new one) and the new contract (pointing to the retired one).\r\n\r\nI am not sure you even need/want ERC165 since you don't have an API to call. As soon as a contract is live/relevant it should have done an emit already.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/433568309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/433644662",
    "html_url": "https://github.com/ethereum/EIPs/issues/1530#issuecomment-433644662",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1530",
    "id": 433644662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzY0NDY2Mg==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-27T18:33:55Z",
    "updated_at": "2018-10-27T18:36:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Does it makes sense to have a third argument to the event which is a reason string, giving some information about why the contract was upgraded? Kind of like a commit message.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/433644662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/433654426",
    "html_url": "https://github.com/ethereum/EIPs/issues/1530#issuecomment-433654426",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1530",
    "id": 433654426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzY1NDQyNg==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-27T20:53:55Z",
    "updated_at": "2018-10-27T21:26:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Adding from an offline conversation:\r\n\r\nIf you want to do the delegate call to a contract that sends the events, your API contract will have to have a \"this is where my events will come from\" function that returns the constant address you will always use to emit your events. Then you can upgrade from v1Logic to v2Logic but both of those return eventsAddress.\r\n\r\nSo, to me seems like the above ERC should have the retire(old,new) event and both old and new contracts should have a function that returns the events address then that can return \"this\" or a separate/common contract.\r\n\r\n    /// @notice Return the address from which this API contract emits its events.\r\n    /// @return Address of events contract\r\n    function eventsAddress() external view returns (address);\r\n\r\n\r\nThis de-couples API from (delegate) events address/contract so third parties can see where they should subscribe for events without knowing specifics about your particular implementation.\r\n\r\nNote: this _could_ maybe return an array of addresses, then you could return your entire chain of upgraded event contracts addresses through this and/or use the retire event + function.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/433654426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458673434",
    "html_url": "https://github.com/ethereum/EIPs/issues/1530#issuecomment-458673434",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1530",
    "id": 458673434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODY3MzQzNA==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T19:26:07Z",
    "updated_at": "2019-01-29T19:26:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing this as I don't think standardizing this is currently relevant considering most upgradable contract relay on delegate call methods.\r\n\r\nIf anyone is interested in taking this forward, please free to reply and I can re-open it.  ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458673434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
