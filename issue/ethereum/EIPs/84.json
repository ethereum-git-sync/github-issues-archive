{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/84/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/84/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/84/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/84",
  "id": 143651804,
  "node_id": "MDU6SXNzdWUxNDM2NTE4MDQ=",
  "number": 84,
  "title": "Standardizing of HD wallet derivation paths (BIP32, BIP39, BIP44)",
  "user": {
    "login": "christianlundkvist",
    "id": 6892901,
    "node_id": "MDQ6VXNlcjY4OTI5MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/christianlundkvist",
    "html_url": "https://github.com/christianlundkvist",
    "followers_url": "https://api.github.com/users/christianlundkvist/followers",
    "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
    "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
    "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
    "repos_url": "https://api.github.com/users/christianlundkvist/repos",
    "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
    "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 75,
  "created_at": "2016-03-26T02:13:05Z",
  "updated_at": "2022-01-30T11:08:24Z",
  "closed_at": "2022-01-30T11:08:24Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "References:\n\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n[BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)\n[BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)\n\nWe are now seeing a few different Ethereum HD wallet implementations with different HD derivation paths.\n\nWhen we wrote [Lightwallet](https://github.com/ConsenSys/eth-lightwallet) I considered using the BIP44 specification defined by\n\n```\nm / purpose' / coin_type' / account' / change / address_index \n```\n\nwhich gives a default path of `m/44'/60'/0'/0` for Ethereum. I felt at the time that this was very UTXO-coin specific and didn't make that much sense for Ethereum, so I had a scheme that was based on having different paths for different keys (like signing keys, encryption keys etc) and different identities, and the focus was not on sending/receiving Ether. The default path became `m/0'/0'/0'` (`Purpose/ID index/key_type`), but we included the ability to specify a path of your choice.\n\nThe Jaxx wallet used lightwallet (at first) under the hood and chose an HD path of `m/44'/60/0'` which is _almost_ BIP44, except the `change` path is not used.\n\nThere is this BIP44 HD wallet\n\nhttps://github.com/trapp/ethereum-bip44\n\nby @trapp which uses the full BIP44 path `m/44'/60'/0'/0`.\n\n@axic created an HD wallet library which is used in ethereumjs/testrpc here:\n\nhttps://github.com/ethereumjs/testrpc/pull/44/files#diff-f3d2a8282458e5cf231eee263cd57075R32\n\nThis also uses the full BIP44 path `m/44'/60'/0'/0`.\n\nUPDATE: Clarification: The ethereumjs-wallet library from @axic does not impose any path, rather that when integrated in ethereumjs/testrpc the path used is the standard BIP44 one.\n\nSo in the spirit of trying to have some interoperability between HD wallets I would ask for some input: \n- Should we just settle on the full BIP44 path `m/44'/60'/0'/0` (which seems to be the most popular based on my unscientific sample)?\n- Does it matter that `change` doesn't make much sense for an account-based architecture like Ethereum?\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/84/reactions",
    "total_count": 34,
    "+1": 30,
    "-1": 0,
    "laugh": 0,
    "hooray": 4,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/84/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201746154",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201746154",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201746154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTc0NjE1NA==",
    "user": {
      "login": "jprichardson",
      "id": 150063,
      "node_id": "MDQ6VXNlcjE1MDA2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/150063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jprichardson",
      "html_url": "https://github.com/jprichardson",
      "followers_url": "https://api.github.com/users/jprichardson/followers",
      "following_url": "https://api.github.com/users/jprichardson/following{/other_user}",
      "gists_url": "https://api.github.com/users/jprichardson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jprichardson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jprichardson/subscriptions",
      "organizations_url": "https://api.github.com/users/jprichardson/orgs",
      "repos_url": "https://api.github.com/users/jprichardson/repos",
      "events_url": "https://api.github.com/users/jprichardson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jprichardson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T09:41:30Z",
    "updated_at": "2016-03-26T09:41:30Z",
    "author_association": "NONE",
    "body": "For Exodus, we use `m/44'/60'/0'/0/0`, we'll probably just stick with this since it's a solved problem. Please let me know if I'm missing anything.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201746154/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201784582",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201784582",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201784582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTc4NDU4Mg==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T11:54:29Z",
    "updated_at": "2016-03-26T11:54:29Z",
    "author_association": "NONE",
    "body": "@jprichardson Your path refers to the first address created, right? So in general `m/44'/60'/0'/0/n` for the nth wallet created. So your project is another data point favoring the standard BIP44 path.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201784582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201803049",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201803049",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201803049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTgwMzA0OQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T12:36:07Z",
    "updated_at": "2016-03-26T12:36:07Z",
    "author_association": "NONE",
    "body": "From testing the Jaxx Chrome plugin I can verify that Jaxx uses the HD root `m/44'/60'/0'` which makes the single derived Ether address `m/44'/60'/0'/0`. So this is not really compliant with BIP44. Would be nice to have Jaxx on board with the standard since it's a high-profile wallet.\n\nI believe @chrisforrester is currently working on full HD-support for Ether, will you be using the full HD path when this is released?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201803049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201806431",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201806431",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201806431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTgwNjQzMQ==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T12:43:46Z",
    "updated_at": "2016-03-26T12:45:39Z",
    "author_association": "MEMBER",
    "body": "For the record, my library is at https://github.com/axic/ethereumjs-wallet and it is used in a few places, not only testrpc, however it doesn't impose any path restrictions, in fact it doesn't have any path in the source code as it is only a toolkit to build wallets.\n\nI have used the BIP44 path on Quorum just for the reasoning that should work well with current Bitcoin wallets. It turned out Trezor itself doesn't have any restrictions either. No idea about the others.\n\n@christianlundkvist I understand your point and I think I'm in favour of that reasoning, with the exception of different number for `purpose`. I simply don't think `0'` is a good one. Maybe it would be useful fleshing out a few use cases and how those fit into your scheme.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201806431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201811313",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201811313",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201811313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTgxMTMxMw==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T12:52:54Z",
    "updated_at": "2016-03-26T12:52:54Z",
    "author_association": "NONE",
    "body": "@axic Yes, I should have been more clear that your library is completely agnostic, I updated the original post with this.\n\nPersonally I think I was overthinking things a bit in my HD path reasoning and that it's too soon to start looking for some optimal HD scheme that will cover all cases. Sticking with BIP44 makes sense at this early stage I think since most use cases at this point are about sending/receiving Ether.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201811313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201816856",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201816856",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201816856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTgxNjg1Ng==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T13:05:42Z",
    "updated_at": "2016-03-26T13:05:42Z",
    "author_association": "MEMBER",
    "body": "It might be early to make a decision, nevertheless can you describe your scheme in depth?  It can be a good starting point.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201816856/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201824599",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201824599",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201824599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTgyNDU5OQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T13:35:47Z",
    "updated_at": "2016-03-26T13:35:47Z",
    "author_association": "NONE",
    "body": "@axic Sure, it was not really that advanced: The main idea is that you can have one seed for different identities or Personas. For persona nr `n` (at the path `n'`) you have one branch for Ethereum signing keys `m/0'/n'/0'`, one branch for keys to be used for asymmetric encryption `m/0'/n'/1'`, one branch to be used for symmetric encryption `m/0'/n'/2'`. That's about as far as I got :smile: \n\nI was also thinking about separating signing keys used to mainly hold Ether with keys mainly used to interact with smart contracts, so in this case I would probably use something like BIP44 for holding and transacting Ether and the above paths for interacting with contracts.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201824599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201832379",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201832379",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201832379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTgzMjM3OQ==",
    "user": {
      "login": "chrisforrester",
      "id": 16688316,
      "node_id": "MDQ6VXNlcjE2Njg4MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16688316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisforrester",
      "html_url": "https://github.com/chrisforrester",
      "followers_url": "https://api.github.com/users/chrisforrester/followers",
      "following_url": "https://api.github.com/users/chrisforrester/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisforrester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisforrester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisforrester/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisforrester/orgs",
      "repos_url": "https://api.github.com/users/chrisforrester/repos",
      "events_url": "https://api.github.com/users/chrisforrester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisforrester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T14:20:33Z",
    "updated_at": "2016-03-26T14:21:58Z",
    "author_association": "NONE",
    "body": "@christianlundkvist Hi everyone :) Chris here.\n\nI'm deep into the ethereum HD side of things. As Christian mentioned, our existing Jaxx project only uses the root conventional \"account\" node, which is obviously \"wrong\", however given the nature of the contract ecosystem, I don't think the bitcoin send + change really applies.\n\nA lot of this is user expectation handling. Obviously privacy for conventional transfers of ether around the network are a good use-case, and for this I'm using the following standard:\n\nm/44'/60'/0' is the \"account\" node.\nm/44'/60'/0'/0/x is the \"receive\" node.\nm/44'/60'/0'/1/y is the \"change\" node.\n\nIf the user receives ether into the current public receive node index, the x index will increase.\n\nSending ether from the wallet, I'm sorting through all the receive nodes, seeing if any specific node has the balance to cover the transaction, and sending directly as a single TX from that node. any change, gas price differences etc, will be returned to this address.\n\nIn the event that this highest-balance node cannot cover the send request cost, I'm appending tx together into a batch. Obviously the tx cost increases simply from the extra gas cost required. If requested, I'm going to build some sort of smarty-pants optimizer to give people some options with this (tx completion time to cost and so on)\n\nTo give users their total \"spendable\" balance, I take a look at the address they're trying to send to, calculate the total gas cost per tx, and subtract those from the user's \"spendable\" amount.\n\nAny nodes that don't have the ability to send 1 + 21000x50Gwei are below the finite dust limit, and so aren't taken into account. They still have minor utility however as they can be swept completely if they had another deposit into that specific node.\n\nThe other option I considered was the complete reverse, always packaging the smallest amount account into an internal \"change\" node and sending from there. benefits to the user would be that anyone seeing a tx from them would always have a single tx on their list from the \"change\" node address.\n\nHowever, this will cost gas to do, and has a delay in the case where a user receives a few tx at nearly the same block, and wants to send out immediately.\n\nSo I'm not doing this \"proactive\" packaging, instead I'm doing a \"lazy\" methodology. It should work fairly well.\n\nAs I need to support previous users, I'm going to apply that original node balance (yes I should have done a bit more thought about that earlier on :D) optionally to the first \"receive\" node index. Otherwise it'll be kept as a virtual node and used in that \"lazy\" passthrough system. Our existing pipeline includes transferring funds from an ethereum paper wallet, and this should be a rational analog to that system.\n\nMy thoughts on where to go from here re: contract watch addresses, contract ownership accounts, are that people are also going to want token support, so the UI is really the big undetermined factor right now. Since Mist has a basic support for this there's no huge rush, and since this process will form the expectation of how users go about accessing their accounts it's best to do this correctly instead of hacking something together that will have major ramifications in the next year as onboarding continues.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201832379/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201907981",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201907981",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201907981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTkwNzk4MQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T18:12:06Z",
    "updated_at": "2016-03-26T18:12:06Z",
    "author_association": "NONE",
    "body": "@chrisforrester Thanks for the detailed run-through! So it seems most HD wallets are now using the full BIP44 path. Support for tokens are a good question, I have some thoughts about which paths to use for that, but that's for another EIP. :smiley: \n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201907981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201925926",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-201925926",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 201925926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTkyNTkyNg==",
    "user": {
      "login": "chrisforrester",
      "id": 16688316,
      "node_id": "MDQ6VXNlcjE2Njg4MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16688316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisforrester",
      "html_url": "https://github.com/chrisforrester",
      "followers_url": "https://api.github.com/users/chrisforrester/followers",
      "following_url": "https://api.github.com/users/chrisforrester/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisforrester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisforrester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisforrester/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisforrester/orgs",
      "repos_url": "https://api.github.com/users/chrisforrester/repos",
      "events_url": "https://api.github.com/users/chrisforrester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisforrester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-26T20:20:37Z",
    "updated_at": "2016-03-26T20:20:37Z",
    "author_association": "NONE",
    "body": "I was thinking that we could extend the metaphor logically.. we could use\nm'/60000'->70000' or the like.\n\nOn Sat, Mar 26, 2016 at 2:12 PM, Christian Lundkvist <\nnotifications@github.com> wrote:\n\n> @chrisforrester https://github.com/chrisforrester Thanks for the\n> detailed run-through! So it seems most HD wallets are now using the full\n> BIP44 path. Support for tokens are a good question, I have some thoughts\n> about which paths to use for that, but that's for another EIP. [image:\n> :smiley:]\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/ethereum/EIPs/issues/84#issuecomment-201907981\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/201925926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202230380",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-202230380",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 202230380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjIzMDM4MA==",
    "user": {
      "login": "kumavis",
      "id": 1474978,
      "node_id": "MDQ6VXNlcjE0NzQ5Nzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1474978?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kumavis",
      "html_url": "https://github.com/kumavis",
      "followers_url": "https://api.github.com/users/kumavis/followers",
      "following_url": "https://api.github.com/users/kumavis/following{/other_user}",
      "gists_url": "https://api.github.com/users/kumavis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kumavis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kumavis/subscriptions",
      "organizations_url": "https://api.github.com/users/kumavis/orgs",
      "repos_url": "https://api.github.com/users/kumavis/repos",
      "events_url": "https://api.github.com/users/kumavis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kumavis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-28T04:52:27Z",
    "updated_at": "2016-03-28T04:52:27Z",
    "author_association": "MEMBER",
    "body": "linking [SLIP44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md) (used by jaxx) which proposes constants for different coins.\n\nThat said, is there a requirement for the branches to be numbers? seems like using a name would work just as well: \"ethereum\" or \"eth\"\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202230380/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202344117",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-202344117",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 202344117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjM0NDExNw==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-28T11:17:03Z",
    "updated_at": "2016-03-28T11:20:13Z",
    "author_association": "MEMBER",
    "body": "BIP32 is the one defining the derivation:\n\n`ser32(i): serialize a 32-bit unsigned integer i as a 4-byte sequence, most significant byte first.`\n\nand see the usage for `ser32`.\n\nAdditionally the private-to-private derivation (_hardened key_) has a condition to only accept `i ≥ 2^31`. If you would use your text encoded as hex, that would always be a hardened derivation.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202344117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202604861",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-202604861",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 202604861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjYwNDg2MQ==",
    "user": {
      "login": "subtly",
      "id": 6557250,
      "node_id": "MDQ6VXNlcjY1NTcyNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6557250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subtly",
      "html_url": "https://github.com/subtly",
      "followers_url": "https://api.github.com/users/subtly/followers",
      "following_url": "https://api.github.com/users/subtly/following{/other_user}",
      "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
      "organizations_url": "https://api.github.com/users/subtly/orgs",
      "repos_url": "https://api.github.com/users/subtly/repos",
      "events_url": "https://api.github.com/users/subtly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subtly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-28T22:31:57Z",
    "updated_at": "2016-03-28T22:31:57Z",
    "author_association": "MEMBER",
    "body": "Ethereum doesn't have change addresses and, realistically, BIP32 is far from ideal for Ethereum. That said, its not a bad bridge until Serenity.\n\nI would like to +1 the idea of only using hardened addresses. This facilitates privacy by default and requires that a developer or user manually do something in order to disable privacy. Moreover, the linkable nature of non-hardened addresses is out-of-scope for ethereum – with bitcoin it makes sense because there are change addresses. With ethereum, and especially with smart contracts, the feature is moot.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202604861/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202618004",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-202618004",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 202618004,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjYxODAwNA==",
    "user": {
      "login": "chrisforrester",
      "id": 16688316,
      "node_id": "MDQ6VXNlcjE2Njg4MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16688316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisforrester",
      "html_url": "https://github.com/chrisforrester",
      "followers_url": "https://api.github.com/users/chrisforrester/followers",
      "following_url": "https://api.github.com/users/chrisforrester/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisforrester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisforrester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisforrester/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisforrester/orgs",
      "repos_url": "https://api.github.com/users/chrisforrester/repos",
      "events_url": "https://api.github.com/users/chrisforrester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisforrester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-28T23:04:44Z",
    "updated_at": "2016-03-29T15:17:22Z",
    "author_association": "NONE",
    "body": "I'd like to bring up an interesting use-case.\n\n(caution, my absorption of this is still quite new, someone please correct me if I'm wrong :D )\nIf I use non-hardened addresses, I can derive all of the public keys from the receive node's extended path.\n(caution ended, the stuff below is legit)\nUsing this, as I sometimes have to batch transactions together, I can create a method of determining if, from any given one address, another address is associated with that batch, as long as they came from the same HD wallet.\n\nIn the case where this is desired, a user can send an \"audit requestable\" hd batch that have some data in them relating to a common nature(# of transactions in a batch, extended public key, username), that will make it really easy for the receiver to be able to hook into our one-name integration and say \"yep all these transactions came from _dudewiththehatnonotthatdudetheotherdude_\" and even then, be able to in the UI batch these as a single item. \n\nand even better, if I hook this into the ethereum contract mechanism, I can have a way of batching transactions together to be \"counted\" as coming from a single source by contracts, and also allow, optionally, easy auditing of bank activity.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202618004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202909174",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-202909174",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 202909174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjkwOTE3NA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-29T14:05:41Z",
    "updated_at": "2016-03-29T14:07:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Whats then the advantage of using HD wallet here at all? Why then not reusing addresses?\n\nThis sending multiple tx from many accounts with dust, doesn't seem smart of efficient to me.\n\n[offtopic]\nbtw does jaxx now finally provide enough gas? we had a lot of users who can't send from jaxx to kryptokit to a wallet contract..\n[/offtopic]\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202909174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202931137",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-202931137",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 202931137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjkzMTEzNw==",
    "user": {
      "login": "chrisforrester",
      "id": 16688316,
      "node_id": "MDQ6VXNlcjE2Njg4MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16688316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisforrester",
      "html_url": "https://github.com/chrisforrester",
      "followers_url": "https://api.github.com/users/chrisforrester/followers",
      "following_url": "https://api.github.com/users/chrisforrester/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisforrester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisforrester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisforrester/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisforrester/orgs",
      "repos_url": "https://api.github.com/users/chrisforrester/repos",
      "events_url": "https://api.github.com/users/chrisforrester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisforrester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-29T14:42:44Z",
    "updated_at": "2016-03-29T14:42:44Z",
    "author_association": "NONE",
    "body": "advanced mode for ethereum contract support has been out for a few weeks :)\n\nyou're partially correct. it's not super efficient if you have to batch a bunch of small transactions. it's also not super efficient on the BTC side of things either since you have to pay for the data itself in the uxto transaction.\n\nwhat you're giving up for efficiency is privacy. I'd like to make it as private as you'd desire it to be. \n\nhaving a single address and then sending that out for mixing etc. involves a ton of middlemen, and I'm not sure of the logistics of the payment routing to keep privacy. immediately you can see that you've sent to a mixing service, and if you ever don't do that, and one of the end points leaks information about your origin address, you've lost all privacy anyhow, and have paid for the efficiency loss the entire time.\n\nif part of an HD wallet becomes compromised re: privacy, I should only be exposing (with the user's opt-in! and when the network is more understood, opt-out, maybe.) the batched transactions themselves.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/202931137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204389734",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-204389734",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 204389734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDM4OTczNA==",
    "user": {
      "login": "chrisforrester",
      "id": 16688316,
      "node_id": "MDQ6VXNlcjE2Njg4MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16688316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisforrester",
      "html_url": "https://github.com/chrisforrester",
      "followers_url": "https://api.github.com/users/chrisforrester/followers",
      "following_url": "https://api.github.com/users/chrisforrester/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisforrester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisforrester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisforrester/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisforrester/orgs",
      "repos_url": "https://api.github.com/users/chrisforrester/repos",
      "events_url": "https://api.github.com/users/chrisforrester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisforrester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T12:59:40Z",
    "updated_at": "2016-04-01T12:59:40Z",
    "author_association": "NONE",
    "body": "So we're coming to the end of the Ethereum HD development, and I'm going to use the recommended pathing. While there is a risk of undermining the entire account chain if they lose a private key from one of the HD nodes, it won't go below that, so our Ethereum and Bitcoin sides (along with whatever else coin-type we'll implement using the HD schema) are isolated.\n\nThe main reason is the hardware wallet functionalities. Though there aren't any Ethereum compatible models on the market that I'm aware of, I'm building our product to take their existence-in-the-future into account.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204389734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204431381",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-204431381",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 204431381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDQzMTM4MQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T15:05:30Z",
    "updated_at": "2016-04-01T15:05:30Z",
    "author_association": "NONE",
    "body": "@chrisforrester OK great! Looks like it's BIP44 all around then! :smile: \n\n> While there is a risk of undermining the entire account chain if they lose a private key from one of the HD nodes\n\nSo I didn't quite understand the \"audit requestable\" HD branch idea, does it require you to share the master pub key for the account chain?\n\nI'm going to write up a proposal for HD paths for Ethereum tokens now also.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204431381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204526896",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-204526896",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 204526896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDUyNjg5Ng==",
    "user": {
      "login": "chrisforrester",
      "id": 16688316,
      "node_id": "MDQ6VXNlcjE2Njg4MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16688316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisforrester",
      "html_url": "https://github.com/chrisforrester",
      "followers_url": "https://api.github.com/users/chrisforrester/followers",
      "following_url": "https://api.github.com/users/chrisforrester/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisforrester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisforrester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisforrester/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisforrester/orgs",
      "repos_url": "https://api.github.com/users/chrisforrester/repos",
      "events_url": "https://api.github.com/users/chrisforrester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisforrester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T19:07:56Z",
    "updated_at": "2016-04-01T19:07:56Z",
    "author_association": "NONE",
    "body": "@christianlundkvist \n\nGiven the nature of the privacy concerns, I'm thinking that the audit feature would be such that if you desired, you could encode the:\n(for batchItemAddress1) \"sha3(batchItemAddress2 + batchItemAddress3 + batchCodeGeneratedFromTheApp)\" into the data field for the transactions.\n\nthen if you'd like to have an audit done, you'd provide the batchCodeGeneratedFromTheApp and the three addresses from the transaction batch to the auditor, so they could confirm that each of the transactions that were marked by this conformed to the other info in the batch code (things like a salt, and a block + block hash to do a proof of existence).\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204526896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204598401",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-204598401",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 204598401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDU5ODQwMQ==",
    "user": {
      "login": "subtly",
      "id": 6557250,
      "node_id": "MDQ6VXNlcjY1NTcyNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6557250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subtly",
      "html_url": "https://github.com/subtly",
      "followers_url": "https://api.github.com/users/subtly/followers",
      "following_url": "https://api.github.com/users/subtly/following{/other_user}",
      "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
      "organizations_url": "https://api.github.com/users/subtly/orgs",
      "repos_url": "https://api.github.com/users/subtly/repos",
      "events_url": "https://api.github.com/users/subtly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subtly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T22:53:37Z",
    "updated_at": "2016-04-01T22:53:37Z",
    "author_association": "MEMBER",
    "body": "@christianlundkvist @chrisforrester \nWhat is being proposed?  A few thoughts...\n\nForemost, the linked BIPs are for Bitcoin and the design of the data structure is built around the idea of change addresses. Without change addresses, what is the point, and why not use a KDF?\n\nTo be more specific, and as noted by @frozeman, Ethereum choose not to adopt an HD wallet scheme. Two reasons, 1) the hashing/kdf scheme is different than anything else in ethereum, and 2) we have contracts. Contracts can send and receive multiple transactions which makes change addresses moot. For example, if you create Address /0/0 and /0/1 and then derive a contract from /0/0 and a contract from /0/1, the contract addresses don't follow the HD scheme and their transactions aren't linkable.\n\n```\nSo in the spirit of trying to have some interoperability between HD wallets I would ask for some input:\n```\n\nWhat interoperability?  Its one thing to extend Bitcoins wallet standard to \"support\" interoperating with Ethereum. Its different to implicitly extend the Bitcoin wallet standard to be an Etheruem standard. Instead, if I can make a recommendation, it would be to propose an Ethereum wallet standard along with an interoperability standard.\n\nAll together, Bitcoin's HD wallet standard is _incompatible_ with Ethereum and is specific both to Bitcoin and the secp256k1 curve. Ethereum applications need more than what's proposed here. I don't mean to hinder progress or dismiss a proposal, and I'm happy to submit solutions, however I think its worth discussing whether BIP32/39/44 should be used to begin with.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204598401/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204634457",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-204634457",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 204634457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDYzNDQ1Nw==",
    "user": {
      "login": "chrisforrester",
      "id": 16688316,
      "node_id": "MDQ6VXNlcjE2Njg4MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16688316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisforrester",
      "html_url": "https://github.com/chrisforrester",
      "followers_url": "https://api.github.com/users/chrisforrester/followers",
      "following_url": "https://api.github.com/users/chrisforrester/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisforrester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisforrester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisforrester/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisforrester/orgs",
      "repos_url": "https://api.github.com/users/chrisforrester/repos",
      "events_url": "https://api.github.com/users/chrisforrester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisforrester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T02:44:48Z",
    "updated_at": "2016-04-02T02:46:05Z",
    "author_association": "NONE",
    "body": "@subtly with Jaxx, we're not using change addresses, everything is running off of the receive node path. Interoperability standard is on the context of the node derivation and the ability to create extended nodes for only being able to generate the public addresses, ethereum wallet standard is being able to have the same context of enhanced privacy for transactions.\n\nmaybe there could be a benefit from writing a mixer inside of a contract, and having everything funnelling through there, but AML regulations and the like are quite real. No company operating in areas where proactive AML practices are the the way things need to be done can really write a mixer.\n\nin association to that, even if it was cheap enough to run the contract itself, which I haven't seen any hard evidence for, it's not like you can do it with the entirety being visible on the blockchain, without something like ring signatures, which have their own lower-bounds on how many users are required to make things actually not stall out while waiting to fill enough of a mix order.\n\nhttp://ethereum.stackexchange.com/questions/387/is-it-possible-to-achieve-anonymous-mixing-through-the-ethereum-protocol\nhttps://www.reddit.com/r/ethereum/comments/41m5ox/ethereum_mixer/\n\nin regards to your claims of incompatibility.. really not so. using the exact same node structure:\n\n```\nfor private keys:\n\nbitcoin:\ntempPair[0] = this.getPrivateKey(false, lastIndex + 1).toWIF();\n\nethereum:\ntempPair[0] = this.getPrivateKey(false, lastIndex).d.toBuffer(32).toString('hex');\n\nwith \"getPrivateKey\" basically being:\n\nHDWalletPouch._derive(this._receiveNode, index, false).keyPair;\n\nand for addresses: \n\nHDWalletPouch.getCoinAddress = function(coinType, node) {\n    if (coinType === COIN_BITCOIN) {\n        var pubKey = node.keyPair.getPublicKeyBuffer();\n\n        var pubKeyHash = thirdparty.bitcoin.crypto.hash160(pubKey);\n\n        var payload = new Buffer(21);\n        payload.writeUInt8(node.keyPair.network.pubKeyHash, 0);\n        pubKeyHash.copy(payload, 1);\n\n        var address = thirdparty.bs58check.encode(payload);\n\n        return address;\n    } else if (coinType === COIN_ETHEREUM) {\n        var ethKeyPair = node.keyPair;\n\n        ethKeyPair.compressed = false;\n\n        var ethKeyPairPublicKey = ethKeyPair.getPublicKeyBuffer();\n\n        var pubKeyHexEth = ethKeyPairPublicKey.toString('hex').slice(2);\n\n        var pubKeyWordArrayEth = thirdparty.CryptoJS.enc.Hex.parse(pubKeyHexEth);\n\n        var hashEth = thirdparty.CryptoJS.SHA3(pubKeyWordArrayEth, { outputLength: 256 });\n\n        var addressEth = hashEth.toString(thirdparty.CryptoJS.enc.Hex).slice(24);\n\n        return \"0x\" + addressEth;\n    }\n}\n\n\n\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204634457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204787391",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-204787391",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 204787391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDc4NzM5MQ==",
    "user": {
      "login": "subtly",
      "id": 6557250,
      "node_id": "MDQ6VXNlcjY1NTcyNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6557250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subtly",
      "html_url": "https://github.com/subtly",
      "followers_url": "https://api.github.com/users/subtly/followers",
      "following_url": "https://api.github.com/users/subtly/following{/other_user}",
      "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
      "organizations_url": "https://api.github.com/users/subtly/orgs",
      "repos_url": "https://api.github.com/users/subtly/repos",
      "events_url": "https://api.github.com/users/subtly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subtly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-02T19:33:56Z",
    "updated_at": "2016-04-02T19:35:50Z",
    "author_association": "MEMBER",
    "body": "BIP32 specifies compressed keys and, instead of simply deriving the pubk from a keypath, the posted code has to derive the public key from a secret. Thus, I see this proposal as extending BIP32 which makes it a BIP not an EIP. Issue #85 is a good example as to why BIP32 simply isn't sufficient for ethereum – having to do 5 KDF operations for interop is redundant, a hack, and also a BIP32 extension.\n\nNot sure how Jaxx is relevant; I'm also using BIP32 but I'd rather see us develop an improvement rather than adopting the status quo.\n\nIf there isn't interest in discussing an improvement then please concisely state the proposal, e.g. that BIP32 is adopted, the purpose, and supporting use-case as to why a scheme which supports CKDpub((Kpar, cpar), i) → (Ki, ci) is a necessity for Ethereum (vs using contract code or privacy-by-default).\n\n**Please do not discuss AML here.** This isn't R3 or HyperLedger.\n\n/cc @chrisforrester @frozeman @vbuterin @alexvandesande @obscuren @Gustav-Simonsson @gavofyork   @christianlundkvist @fjl @wanderer (CC'ing devs involved in secure key storage scheme used by official Ethereum clients)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204787391/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204844710",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-204844710",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 204844710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDg0NDcxMA==",
    "user": {
      "login": "chrisforrester",
      "id": 16688316,
      "node_id": "MDQ6VXNlcjE2Njg4MzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/16688316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisforrester",
      "html_url": "https://github.com/chrisforrester",
      "followers_url": "https://api.github.com/users/chrisforrester/followers",
      "following_url": "https://api.github.com/users/chrisforrester/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisforrester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisforrester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisforrester/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisforrester/orgs",
      "repos_url": "https://api.github.com/users/chrisforrester/repos",
      "events_url": "https://api.github.com/users/chrisforrester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisforrester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-03T01:14:40Z",
    "updated_at": "2016-04-03T01:14:40Z",
    "author_association": "NONE",
    "body": "honestly, your tone is disparaging and I haven't heard from you about the\nother options I said would be possible but are completely unproven.\n\nbasically, my thought is such.. either we follow how bitcoin does stuff, or\nwe'll end up building something that if we desire interoperability, we'll\nhave to backport it back to bitcoin. then we'll have the same complaint\nfrom the other side.\n\nand yes, I'll discuss AML if I feel it's appropriate. whatever fantasies\nyou may be engaged in have to be grounded into the real world at some\npoint, and explicitly building something otherwise in a country that has\nthese laws in effect, is about a step and a half away from being shut down.\nI understand that you may not feel it's a concern, but a lot of other\npeople do and when it comes down to it, it's about integrating these\nblockchain technologies with the real world, not the other way around.\n\nregardless of anything else, having something running client side that\nprovides\n1) better privacy in the general case\n2) the ability to reduce that privacy for outside inspection\n3) no additional contract cost\n4) no additional contract storage\n5) the ability to regenerate in a deterministic way a bunch of individual\nsubaccounts\n6) said deterministic regeneration also working for different core projects\n\nseems like a win to me. I'm done having this pedantic conversation, you've\nmade your point and I don't believe there's any substance there.\n\nOn Sat, Apr 2, 2016 at 3:33 PM, subtly notifications@github.com wrote:\n\n> BIP32 specifies compressed keys and, instead of simply deriving the pubk\n> from a keypath, the posted code has to derive the public key from a secret.\n> Thus, I see this proposal as extending BIP32 which makes it a BIP not an\n> EIP. Issue #85 https://github.com/ethereum/EIPs/issues/85 is also a\n> perfect example as to why BIP32 simply isn't sufficient for ethereum\n> – having to do 5 KDF operations for interop is redundant, a hack, and also\n> a BIP32 extension.\n> \n> Not sure how Jaxx is relevant; I'm also using BIP32 but I'd rather see us\n> develop an improvement rather than adopting the status quo.\n> \n> If there isn't interest in discussing an improvement then please concisely\n> state the proposal, e.g. that BIP32 is adopted, the purpose, and supporting\n> use-case as to why a scheme which supports CKDpub((Kpar, cpar), i) → (Ki,\n> ci) is a necessity for Ethereum (vs using contract code or\n> privacy-by-default).\n> \n> _Please do not discuss AML here._ This is Ethereum, not R3 or HyperLedger.\n> \n> /cc @chrisforrester https://github.com/chrisforrester @frozeman\n> https://github.com/frozeman @vbuterin https://github.com/vbuterin\n> @alexvandesande https://github.com/alexvandesande @obscuren\n> https://github.com/obscuren @Gustav-Simonsson\n> https://github.com/Gustav-Simonsson @gavofyork\n> https://github.com/gavofyork @christianlundkvist\n> https://github.com/christianlundkvist @fjl https://github.com/fjl\n> (CC'ing devs involved in secure key storage scheme used by official\n> Ethereum clients)\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/ethereum/EIPs/issues/84#issuecomment-204787391\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204844710/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204847250",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-204847250",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 204847250,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDg0NzI1MA==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-03T01:36:14Z",
    "updated_at": "2016-04-03T01:36:14Z",
    "author_association": "NONE",
    "body": "Thanks for the input @subtly. I totally agree that Ethereum key management in general is a huge question that is bigger than Bitcoin and will not be solved in the short term by BIP32, BIP44 or any other BIP. Also agree that change addresses are a feature of UTXO-based blockchains and are not intrinsic to Ethereum (hence why I initially chose a different HD path for Lightwallet).\n\nThis was meant simply as a proposal that attempts to introduce a short-term suggested scheme for the limited case of Ether wallets that currently use BIP32 HD derivation. Several such wallets already exists and there are good reasons for using HD schemes. For instance, HD wallets allow cold wallet/payment solutions where you can export a master public key, safely generate an unlimited amount of unique payment addresses on an online computer and have payments go directly into cold storage. This is an example of things that are being built right now. Furthermore there are many mature bitcoin HD libraries that can be and have been repurposed for Ether wallets.\n\n_Standardization_ might be a bit of a misnomer here, since I'm not trying to impose a key management solution for general Ethereum interactions or stifle experimentation. This is merely a suggestion that if you have a wallet focused exclusively on sending/receiving/holding Ether, then this is a HD path that you can use that other wallets are also using. I fully expect other innovative key management solutions to arrive, and I've been thinking a lot on this topic myself.\n\n> I'm also using BIP32 but I'd rather see us develop an improvement rather than adopting the status quo.\n\nWholeheartedly agree that developing an improvement is necessary long-term, and I'm interested in any ideas you might have. However, until everyone agrees on such an improved system this gives a concrete suggestion that one can use today, with mature (bitcoin) libraries.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/204847250/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/205079862",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-205079862",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 205079862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTA3OTg2Mg==",
    "user": {
      "login": "subtly",
      "id": 6557250,
      "node_id": "MDQ6VXNlcjY1NTcyNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6557250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subtly",
      "html_url": "https://github.com/subtly",
      "followers_url": "https://api.github.com/users/subtly/followers",
      "following_url": "https://api.github.com/users/subtly/following{/other_user}",
      "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
      "organizations_url": "https://api.github.com/users/subtly/orgs",
      "repos_url": "https://api.github.com/users/subtly/repos",
      "events_url": "https://api.github.com/users/subtly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subtly/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-04T00:04:10Z",
    "updated_at": "2016-04-04T00:04:10Z",
    "author_association": "MEMBER",
    "body": "@christianlundkvist \nIf I understand correctly the proposal is to, short-term, establish that BIP32 is used as a KDF for generating ethereum addresses because A) it exists, and B) its being used. BIP32 and BIP44 specify a scheme which imply certain functionality and that's why I think this proposal is a BIP extension and not an EIP or Ethereum issue. In any case, the majority of \"clients\" are likely to be Mist or exchanges and whether or not BIP32 is being \"used\" is subjective and unlikely – so I really think the best course of action is discussing and writing an EIP rather than a smattering of bitcoin. I have nothing against Bitcoin or BIP32 but we can all agree Ethereum isn't Bitcoin.\n\nCKDpub (BIP32) is a very sharp knife and I strongly discourage its adoption as a standard without clearly notating implications, use cases, and specifications (usability is important too).\n\nPrior to this proposal, accounts aren't traceable and users expect this – they can move funds via sweeps or have the wallet export secrets. There is interoperability in that core clients use an agreed upon KDF scheme (found here: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition). If this particular proposal were accepted there would be an expectation of interoperability via BIP32 – hence, why I inquire as to specifications for interoperability and not a temporary solution.\n\n@chrisforrester I don't mean to be disparaging. I simply don't see BIP32 as an improvement; I've used BIP32 and I know it can makes things easier however I'm interested to discuss a proposal which addresses interoperability and clear specifications which improve upon ethereum and gives us flexibility going forward so we're not stuck w/BIP32. The idea of opt-in audibility is laudable, though, I'm not sure how that is in support of BIP32.\n\nAdvantages of BIP32:\nExisting libraries, adds advanced public key derivation functionality, provides hierarchical kdf. Facilitates further advanced functionality such as BIP45. (aka traceable and read only wallets)\n\nDisadvantages of BIP32:\nNot used by ethereum clients. Public keys can be derived from other public keys; Ethereum doesn't have UTXO transactions and can't utilise changes addresses which makes this feature moot. As pointed out, a user must also sign two transactions to send part of a balance to one address and part of a balance to a second address – this doubles the cost and the second transaction may not end up in the same block. BIP32 adds complexity, affects user privacy, and increases transaction costs.\n\nCan we get these features out of ethereum? Yes.\nAudits: Use ethereum contracts\nRead-Only: Use CKDpub directly w/hardened parent pubk and no change addresses\nRead-Only: Use mixer contracts\nRead-Only: Use BIP32 as extension\n\nAs I understand issue #84, the use-case is \"creating public keys via KDF\" and _not_ to utilize the derivation features provided by BIP32. (@christianlundkvist please correct me if I'm wrong)\n\nWhat specific use cases is this proposal intended to address?\n\nCan a simple KDF be used instead? Why / Why not? ex: sha3(secret | rlpList(...keypath...))\n\nAre change addresses used, and if so, why and for what use cases?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/205079862/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/207816503",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-207816503",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 207816503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzgxNjUwMw==",
    "user": {
      "login": "kumavis",
      "id": 1474978,
      "node_id": "MDQ6VXNlcjE0NzQ5Nzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1474978?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kumavis",
      "html_url": "https://github.com/kumavis",
      "followers_url": "https://api.github.com/users/kumavis/followers",
      "following_url": "https://api.github.com/users/kumavis/following{/other_user}",
      "gists_url": "https://api.github.com/users/kumavis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kumavis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kumavis/subscriptions",
      "organizations_url": "https://api.github.com/users/kumavis/orgs",
      "repos_url": "https://api.github.com/users/kumavis/repos",
      "events_url": "https://api.github.com/users/kumavis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kumavis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-09T16:36:22Z",
    "updated_at": "2016-04-09T16:36:22Z",
    "author_association": "MEMBER",
    "body": "as a client implementor ( https://metamask.io ) I mostly want a standard for seed+KDF\n\nan aside:\n\n> Ethereum doesn't have UTXO transactions and can't utilise changes addresses which makes this feature moot. As pointed out, a user must also sign two transactions to send part of a balance to one address and part of a balance to a second address – this doubles the cost and the second transaction may not end up in the same block\n\nthis can be remedied by a generic tx de-batching contract, made possible by `DELEGATE_CALL`, though I don't know if anyone has built one yet\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/207816503/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/208226206",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-208226206",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 208226206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODIyNjIwNg==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-11T08:27:47Z",
    "updated_at": "2016-04-11T08:27:47Z",
    "author_association": "NONE",
    "body": "> As pointed out, a user must also sign two transactions to send part of a balance to one address and part of a balance to a second address – this doubles the cost and the second transaction may not end up in the same block\n\nOr do the Ethereum way and use a simple contract. What are you trying to accomplish?\n\n> On Apr 9, 2016, at 23:36, kumavis notifications@github.com wrote:\n> \n> As pointed out, a user must also sign two transactions to send part of a balance to one address and part of a balance to a second address – this doubles the cost and the second transaction may not end up in the same block\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/208226206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/208384835",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-208384835",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 208384835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwODM4NDgzNQ==",
    "user": {
      "login": "erasmospunk",
      "id": 944152,
      "node_id": "MDQ6VXNlcjk0NDE1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/944152?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erasmospunk",
      "html_url": "https://github.com/erasmospunk",
      "followers_url": "https://api.github.com/users/erasmospunk/followers",
      "following_url": "https://api.github.com/users/erasmospunk/following{/other_user}",
      "gists_url": "https://api.github.com/users/erasmospunk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erasmospunk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erasmospunk/subscriptions",
      "organizations_url": "https://api.github.com/users/erasmospunk/orgs",
      "repos_url": "https://api.github.com/users/erasmospunk/repos",
      "events_url": "https://api.github.com/users/erasmospunk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erasmospunk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-11T14:55:43Z",
    "updated_at": "2016-06-07T10:15:24Z",
    "author_association": "NONE",
    "body": "Some input from the Coinomi wallet. In our account based coins we use the following BIP32/44 path:\n\n```\nm/44'/coin_type'/account'\n```\n\nThat private key is used directly without further derivations or processing. This makes things simple as only a single private key is needed per account (and many accounts can be created from a single master key).\n\nFor wallets that use the `m/44'/60'/account'/0/0` private key, what is the use case of the extra keys that can be derived? Is there a use case of an account having several associated private keys?\n\nUpdate: we are going to use the path `m/44'/coin_type'/account'/0` for the account private key.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/208384835/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/210036848",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-210036848",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 210036848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDAzNjg0OA==",
    "user": {
      "login": "psionic81",
      "id": 238328,
      "node_id": "MDQ6VXNlcjIzODMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/238328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/psionic81",
      "html_url": "https://github.com/psionic81",
      "followers_url": "https://api.github.com/users/psionic81/followers",
      "following_url": "https://api.github.com/users/psionic81/following{/other_user}",
      "gists_url": "https://api.github.com/users/psionic81/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/psionic81/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/psionic81/subscriptions",
      "organizations_url": "https://api.github.com/users/psionic81/orgs",
      "repos_url": "https://api.github.com/users/psionic81/repos",
      "events_url": "https://api.github.com/users/psionic81/events{/privacy}",
      "received_events_url": "https://api.github.com/users/psionic81/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-14T16:32:42Z",
    "updated_at": "2016-04-14T16:32:42Z",
    "author_association": "NONE",
    "body": "Just a quick update, we've released our Ethereum HD update for Jaxx (0.0.17->current). The backend code is up on our website at jaxx.io, upper right \"view source\".\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/210036848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/211871837",
    "html_url": "https://github.com/ethereum/EIPs/issues/84#issuecomment-211871837",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/84",
    "id": 211871837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTg3MTgzNw==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T11:39:29Z",
    "updated_at": "2016-04-19T11:39:29Z",
    "author_association": "NONE",
    "body": "@psionic81 thanks for that. Cross compatibility is important to us.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/211871837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
