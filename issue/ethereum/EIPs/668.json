{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/668",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/668/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/668/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/668/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/668",
  "id": 242023926,
  "node_id": "MDU6SXNzdWUyNDIwMjM5MjY=",
  "number": 668,
  "title": "ERC: Light Naming Service (DexNS)",
  "user": {
    "login": "Dexaran",
    "id": 26142412,
    "node_id": "MDQ6VXNlcjI2MTQyNDEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Dexaran",
    "html_url": "https://github.com/Dexaran",
    "followers_url": "https://api.github.com/users/Dexaran/followers",
    "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
    "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
    "organizations_url": "https://api.github.com/users/Dexaran/orgs",
    "repos_url": "https://api.github.com/users/Dexaran/repos",
    "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Dexaran/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2017-07-11T12:05:25Z",
  "updated_at": "2022-01-16T00:44:03Z",
  "closed_at": "2022-01-16T00:44:03Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "Title: Light Naming Service\r\nAuthor: Dexaran, dexaran@ethereumclassic.org\r\nStatus: Draft\r\nType: ERC\r\nCreated: 11-07.2017\r\nResolution: https://github.com/Dexaran/DNS\r\n\r\n## Abstract\r\n\r\nThe following describes structure and cases of use for smart-contract based naming service.\r\n\r\n## Motivation\r\n\r\nInteraction with contracts (even in test / try cases) is not user-friendly. ENS is quite advanced name service but it isn't so user-friendly.\r\n\r\nI want to introduce a lighter version of naming service that will make easier interacting with contracts for regular users. The contract can store human-friendly string `name`s, address of the `owner`, address of the `destination` (analogue of ENS resolver), string `metadata`, bytes32 `signature` of the name, bool variable to disallow contract to return name owner.\r\n\r\nContract consists of two parts: storage and logical part.\r\n\r\nAdvantages:\r\n1. User-friendly.\r\n2. Automated contract ABI and address loading by string human-friendly names.\r\n3. Convenient for establishing and announcing contracts on testnets.\r\n4. Instant registrations.\r\n5. Easy to upgrade without any loss of data.\r\n6. Allows easy integration with blockchain explorers.\r\n\r\nDownsides:\r\n1. Zero spam resistance.\r\n2. Not a domain structure.\r\n3. Requires UI to be developed.\r\n4. Stores data in blockchain.\r\n\r\n## Specification\r\n\r\nNaming service interface contract\r\nNaming service storage contract\r\n\r\nNOTE: `owner` is an address who have permission to change name state. `address` is the destination of this name. If you are registering name for contract then you should change the `address` of the name to point at the contract.\r\n\r\nIMPORTANT: If you need to get the naming service data, then you need to watch/call the `Storage` contract.\r\nIf you need to make change/interact with naming service data, then you need to call the `DexNS` contract.\r\n\r\n## Methods\r\n\r\n### DexNS contract\r\n\r\n#### registerName\r\n\r\n```js\r\nfunction registerName(string _name) payable returns (bool ok)\r\n```\r\nRegister a new name at Naming Service. `msg.sender` will become `owner` and `address` of this name. `metadata` will be set to \"registered\".\r\n\r\n#### addressOf\r\n\r\n```js\r\nfunction addressOf(string _name) constant returns (address _addr)\r\n```\r\nReturns `address` of the destination of the name.\r\n\r\n#### ownerOf\r\n```js\r\nfunction ownerOf(string _name) constant returns (address _owner)\r\n```\r\nReturns `owner` of the name.\r\n\r\n#### endtimeOf\r\n```js\r\nfunction endtimeOf(string _name) constant returns (uint _expires)\r\n```\r\nReturns timestamp when the name will become free to re-register. Returns 0 for not registered names.\r\n\r\nNOTE: `endtime` is stored at the logical contract. Not in storage. Logic of registering and freeing names is part of logical contract. Storage only accepts calls from it.\r\n\r\n#### updateName\r\n```js\r\nfunction updateName(string _name, address _addr, string _value) { }\r\nfunction updateName(string _name, address _addr) { }\r\nfunction updateName(string _name, string _value) { }\r\n```\r\n\r\nChanges the contents of `_name` and sets the provided parameters.\r\n\r\n#### appendNameMetadata\r\n```js\r\n function appendNameMetadata(string _name, string _value)\r\n```\r\nAdds the provided `_value` to the end of the already-existing metadata string of the `_name`.\r\n\r\n#### changeNameOwner\r\n```js\r\nfunction changeNameOwner(string _name, address _newOwner)\r\n```\r\nChanges `_name` owner to `_newOwner`.\r\n\r\n#### hideNameOwner\r\n```js\r\nfunction hideNameOwner(string _name, bool _hide)\r\n```\r\nIf `_hide` is true then `ownerOf(_name)` will `throw` whenever called. \r\n\r\nRationale: add possibility to abort execution of transaction/call when someone is trying to interact with name `owner` from external contract. Address that is associated with each `_name` is `addressOf(_name)`, not `ownerOf(_name)` !\r\n\r\n#### assignName\r\n```js\r\nfunction assignName(string _name)\r\n```\r\n\r\nAssigns `_name` to `msg.sender` if sender is an owner of the name.\r\n\r\n#### unassignName\r\n```js\r\nfunction unassignName(string _name)\r\n```\r\n\r\nClears `_name` ussignation if `msg.sender` is an owner of the name.\r\n\r\n#### extendNameBindingTime\r\n```js\r\nfunction extendNameBindingTime(string _name) payable\r\n```\r\n\r\nExtends binding time of the `_name` by constant specified period if sender provided more funds that required to register/update name. (default 0, free names)\r\n\r\n#### Debugging functions (for owner only)\r\n\r\n#### change_Storage_Address\r\n```js\r\nfunction change_Storage_Address(address _newStorage)\r\n```\r\n\r\nChanges address of the storage to `_newStorage`.\r\n\r\n#### change_Owner\r\n```js\r\nfunction change_Owner(address _newOwner)\r\n```\r\n\r\nChanges owner of the contract to `_newOwner`.\r\n\r\n#### disable_Debug\r\n```js\r\nfunction disable_Debug()\r\n```\r\n\r\nDisables possibility to debug the contract.\r\n\r\n#### set_Owning_Time\r\n```js\r\nfunction set_Owning_Time(uint _newOwningTime)\r\n```\r\n\r\nSets the specified time period for the name binding.\r\n\r\n#### change_Name_Price\r\n```js\r\nfunction change_Name_Price(uint _newNamePrice)\r\n```\r\n\r\nSets the specified price for the name registering\r\n\r\n\r\n## Events\r\n\r\n#### Error\r\n\r\n```js\r\nevent Error(bytes32)\r\n```\r\nTriggered when error occurs.\r\n\r\n#### NamePriceChanged\r\n\r\n```js\r\nevent NamePriceChanged(uint indexed _price)\r\n```\r\nTriggered when price of name is changed by the owner.\r\n\r\n#### OwningTimeChanged\r\n\r\n```js\r\nevent OwningTimeChanged(uint indexed _period)\r\n```\r\nTriggered when binding preiod of time is changed by the owner.\r\n\r\n#### DebugDisabled\r\n\r\n```js\r\nevent DebugDisabled()\r\n```\r\nTriggered when debug is disabled.\r\n\r\n\r\n### Storage contract\r\n\r\n#### functions that would be called from DexNS contract to modify state\r\n\r\n```js\r\nfunction registerName(string _name) payable returns (bool ok) { }\r\nfunction updateName(string _name, address _addr, string _value) { }\r\nfunction updateName(string _name, address _addr) { }\r\nfunction updateName(string _name, string _value) { }\r\nfunction appendNameMetadata(string _name, string _value) { }\r\nfunction changeNameOwner(string _name, address _newOwner) { }\r\nfunction hideNameOwner(string _name, bool _hide) { }\r\nfunction assignName(string _name) { }\r\nfunction unassignName(string _name) { }\r\n```\r\n\r\n### functions to return contract data state\r\n\r\n#### addressOf\r\n\r\n```js\r\nfunction addressOf(string _name) constant returns (address _addr)\r\n```\r\nReturns `address` of the destination of the name.\r\n\r\n#### ownerOf\r\n```js\r\nfunction ownerOf(string _name) constant returns (address _owner)\r\n```\r\nReturns `owner` of the name.\r\n\r\n#### metadataOf\r\n```js\r\nfunction metadataOf(string _name) constant returns (string memory _value) \r\n```\r\nReturns `owner` of the name.\r\n\r\n#### assignation\r\n```js\r\n function assignation(address _assignee) constant returns (string _name)\r\n```\r\nReturns `_name` that is currently assigned to `_assignee`.\r\n\r\n#### name_assignation\r\n```js\r\nfunction name_assignation(string _name) constant returns (address _assignee)\r\n```\r\nReturns `_assignee` address that is currently assigned to `_name`.\r\n\r\n\r\n\r\n#### Debugging functions (for owner only)\r\n\r\n#### change_FrontEnd\r\n```js\r\nfunction change_FrontEnd(address _newFrontEnd)\r\n```\r\n\r\nChanges address of the storage to `_newFrontEnd`.\r\n\r\n#### change_Owner\r\n```js\r\nfunction change_Owner(address _newOwner)\r\n```\r\n\r\nChanges owner of the contract to `_newOwner`.\r\n\r\n\r\n## Events\r\n\r\n#### Error\r\n\r\n```js\r\nevent Error(bytes32)\r\n```\r\nTriggered when error occurs.\r\n\r\n## Metadata specification\r\n\r\nUse key flags before data chunks.\r\n`-A ` for ABI.\r\n`-L ` for attached link.\r\n`-S ` for source code reference.\r\n\r\nExample of metadata for DexNS contract:\r\n`-L https://author.me/ -S https://github.com/source -A [{\"constant\":false,\"inputs\":[],\"name\":\"foo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]`\r\n\r\n## Notes\r\n\r\n`MyContract` / `      something        strange` / `%20%20%11` are valid names for DexNS. It has no checks for inputs. All names that you can imagine are valid.\r\n\r\nIt can be a good idea to use versions for testing contracts: `MyTest v1.0.0` / `MyTest v9.256.122` etc.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/668/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/668/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314459425",
    "html_url": "https://github.com/ethereum/EIPs/issues/668#issuecomment-314459425",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/668",
    "id": 314459425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDQ1OTQyNQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-11T14:20:52Z",
    "updated_at": "2017-07-11T14:20:52Z",
    "author_association": "MEMBER",
    "body": "Why introduce another new naming service? Any usability issues for ENS can be handled easily with a suitable Solidity library, and what you're proposing is limited to only the use-cases you can forsee right now; it's not expandable.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314459425/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314469612",
    "html_url": "https://github.com/ethereum/EIPs/issues/668#issuecomment-314469612",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/668",
    "id": 314469612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDQ2OTYxMg==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-11T14:51:15Z",
    "updated_at": "2017-07-11T17:57:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Arachnid this naming service can be a temporary solution or tool that can make easier interaction with contracts on testnet (for example). Not for the cases when ENS will be used. It can be more convenient for use because of it operates with human-readable values and has an integrated metadata storage (for contract ABI for example).\r\nMy experience shows that it is not a common practice to deploy a whole project on testnet before launch (but it will be highly recommended!). I found it important to introduce a more user-friendly version of naming service.\r\nI think it will be nice to have an ability to register your contracts and say: \"We deployed a contract on Rinkeby under the name [Test of MyContract]\". Some of the not very experienced enthusiasts could participate in the use of this contract without having to look for an ABI or address then.\r\n\r\nI don't know if it will be really adopted so I'm asking for feedback.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314469612/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314522347",
    "html_url": "https://github.com/ethereum/EIPs/issues/668#issuecomment-314522347",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/668",
    "id": 314522347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDUyMjM0Nw==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-11T17:53:14Z",
    "updated_at": "2017-07-11T17:54:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "You can try it. Here is a web UI: https://dexaran.github.io/nameservice/#interact-contract\r\n\r\nYou should navigate to \"Contracts\" tab, click \"CONTRACT NAME\" and type \"DexNS\" (without quotes) into large textbox and wait for 3-5 seconds. It will dropdown functions and load address and ABI of the contract automatically.\r\n\r\nIf you will then switch to the \"CONTRACT ABI\" tab then you will see ABI and address that were loaded.\r\n\r\nI think that it can be useful to have such service at testnets to allow side participants to interact with contracts without requirement to search for ABI.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/314522347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315401733",
    "html_url": "https://github.com/ethereum/EIPs/issues/668#issuecomment-315401733",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/668",
    "id": 315401733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQwMTczMw==",
    "user": {
      "login": "sgitt-vassky",
      "id": 30172932,
      "node_id": "MDQ6VXNlcjMwMTcyOTMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30172932?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgitt-vassky",
      "html_url": "https://github.com/sgitt-vassky",
      "followers_url": "https://api.github.com/users/sgitt-vassky/followers",
      "following_url": "https://api.github.com/users/sgitt-vassky/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgitt-vassky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgitt-vassky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgitt-vassky/subscriptions",
      "organizations_url": "https://api.github.com/users/sgitt-vassky/orgs",
      "repos_url": "https://api.github.com/users/sgitt-vassky/repos",
      "events_url": "https://api.github.com/users/sgitt-vassky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgitt-vassky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T16:18:13Z",
    "updated_at": "2017-07-14T16:18:13Z",
    "author_association": "NONE",
    "body": "As far as I know Ethereum is a fully decentralized community and everyone can set up its own name service. It can be a good idea to have an alternative service. Especially if it is used in other cases than ENS.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315401733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315782753",
    "html_url": "https://github.com/ethereum/EIPs/issues/668#issuecomment-315782753",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/668",
    "id": 315782753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTc4Mjc1Mw==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T15:05:12Z",
    "updated_at": "2017-07-17T15:05:12Z",
    "author_association": "MEMBER",
    "body": "> As far as I know Ethereum is a fully decentralized community and everyone can set up its own name service. It can be a good idea to have an alternative service. Especially if it is used in other cases than ENS.\r\n\r\nOf course, anyone is welcome to propose or use any naming system they like. And anyone else is welcome to critique it.\r\n\r\nPersonally, I don't see the value of it over using ENS, and think a proliferation of incompatible standards isn't to anyone's benefit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315782753/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003642782",
    "html_url": "https://github.com/ethereum/EIPs/issues/668#issuecomment-1003642782",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/668",
    "id": 1003642782,
    "node_id": "IC_kwDOAq426M470l-e",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T00:42:50Z",
    "updated_at": "2022-01-02T00:42:50Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003642782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013783604",
    "html_url": "https://github.com/ethereum/EIPs/issues/668#issuecomment-1013783604",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/668",
    "id": 1013783604,
    "node_id": "IC_kwDOAq426M48bRw0",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-16T00:44:02Z",
    "updated_at": "2022-01-16T00:44:02Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013783604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
