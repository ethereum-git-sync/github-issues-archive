{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/705/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/705/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/705/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/705",
  "id": 255970200,
  "node_id": "MDU6SXNzdWUyNTU5NzAyMDA=",
  "number": 705,
  "title": "ENS Improvement Proposal: Slow deposit withdrawal",
  "user": {
    "login": "alexvandesande",
    "id": 112898,
    "node_id": "MDQ6VXNlcjExMjg5OA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alexvandesande",
    "html_url": "https://github.com/alexvandesande",
    "followers_url": "https://api.github.com/users/alexvandesande/followers",
    "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
    "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
    "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
    "repos_url": "https://api.github.com/users/alexvandesande/repos",
    "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2017-09-07T15:06:16Z",
  "updated_at": "2022-01-16T00:43:55Z",
  "closed_at": "2022-01-16T00:43:55Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n    Title: EnsIP: Slow deposit withdrawal\r\n    Author: Alex Van de Sande (avsa@ethereum.org)\r\n    Type: Ens Improvement Proposal\r\n    Status: Draft\r\n    Created: 2017-09-07\r\n\r\n## Goal \r\n\r\nThis is a collections of thoughts on the result of using capital cost of locking deposits as a cost for owning domains and how we can improve that on the future. This is the second on a [series](https://github.com/ethereum/EIPs/pull/704) of improvement proposals on ENS that I'd like to see a public discussion.\r\n\r\n**Why name Auctions?** Name auctions serve the purpose of trying to give control to the name to the entity who values it the most, and therefore we assume will make better utility out of it. But name auctions require a cost and therefore the funds need to go somewhere. Usually here are the traditional options:\r\n\r\n1. **Funds go to a central party** One of the goals of ENS, is to make it a decentralized system and not a domain sale from a central entity. This would defeat that.\r\n\r\n2. **Funds go to a DAO** This is not a new idea, in fact, one of the first proposals was to make the money on the sale go into a central DAO that could be used to decide on the future use of funds. The issue is that this hits one of the largest unsolved problems in the ecosystem: how funds are to be governed? Should they go to domain owners, then it would encourage creation of dummy domains for a 51% attack. Preventing by proof of unique identities that would hit on another one of the largest unsolved problems on the ecosystem. Other more clever ideas, like Futarchy Governance, remain untested and unproven. If a temporary central entity is created, then we are back to issue 1.\r\n\r\n3. **Funds are burned** The usual neutral option, and the one decided for fees was to burn them. While in theory this distributes values equally to all ether holder, proportional to their holdings, in practice that extra value is impossible to measure and it feels largely like a waste of resources.\r\n\r\n4. **Locking** This is the option that was picked. It's a good temporary measure as it pushes the problem further. It also allows an easier migration for the other methods in the future. But does it work as a cost?\r\n\r\n### Locking as an Opportunity cost\r\n\r\nIn theory, locking up ether is an opportunity cost. That ether cannot be [staked](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ), or [used for lending](https://saltlending.com) or any other way that it could create some interest. It also cannot be invested in an ICO, and any [token airdrop](https://www.omise.co/omisego-airdrop-update) or token split that uses ether holdings might be unreachable. There is a real cost, to be measured both in ether and dollars, on locking your ether for a year.\r\n\r\nIn practice, thou, this hasn't been a great deterrent. Most of the staking/lending products are still not on the market, and no airdrops or token splits had happened during the soft launch. In conversations with owners of large amounts of domains, they thought that opportunity cost of ether was either irrelevant or similar to the opportunity potential of some names. Had ENS not presented itself, they intended to keep that amount as ether in cold storage and not use it to anything else. **Some had in fact considered the cost as a negative**, they believed the chance of a faulty implementation of ENS was smaller than the chance of their cold wallet backup failing and had that it was also a way to keep their ether safe from themselves, as they didn't trust themselves not to lose it in bad trades. Many have said that when the year long period was over, if Casper or other mechanism were available, they could reconsider their choices and maybe release the name.\r\n\r\nWorst of all, there is a deep asymmetry between the cost for someone who wanted to build a product and a reseller: for a reseller the cost was just a temporary opportunity cost, while for honest product builders it needed to be considered burnt forever. The wallet of the ethereum foundation is set at wallet.ethereum.org and we have an interest in migrating that into a more permanent swarm/ipfs storage, but when it does so, it might not use wallet.ethereum.eth but some lesser valuable name like ethereum-wallet.eth, because if we ever use that name to secure a high value app like a wallet, *it could never be released, or it could be snatched by a scammer that could steal all the user's private keys*. My Ether Wallet has a similar opinion, that they are aware that they will never be able to release any valuable name they use, even if it's ether content is worth an order magnitude more than it's worth now. The problem is exacerbated because *for bad actors, the worth of a name is orders of magnitudes larger than for honest actors, as they can use compromised apps to scam unsuspecting users without consequence*, so a lot of names simply cannot ever be reauctioned safely. \r\n\r\n**Therefore at the moment, the current system isn't considered a large enough cost for large capital holders with interest in reselling domains, but it's deterrently expensive for those with the intent of building a product**.\r\n\r\n### Locking up as an incentive to release\r\n\r\nOn the other hand, locking up as an incentive to release the name to the public domain seems to be a positive effect. There are a lot of uncertainties on this ecosystem, the value of ether, the demand for ethereum domains etc, and thus the perceived low risk of the domain distribution scheme, has been considered a positive. Many domain owners have expressed an interest in releasing names they bought to the system, either because they bought names on a whim, because they want to do something else with the ether or any other reason.\r\n\r\nHad the ether of the sale been burnt, or sent to some other DAO incapable of refunding them, they might not have participated, or worse might hold on the name until they could find a suitable buyer. If names were not refundable for their value in ether, then in the scenario that ether value increases while demand for ENS names never picks up, some names would remain forever locked, as owners might refuse ([even if irrationally](https://youarenotsosmart.com/2011/03/25/the-sunk-cost-fallacy/)) to sell names for less than the ether they burnt.\r\n\r\n**Foregoing locking up ether might have the effect of less participation or of having some names forever unused** which is the opposite of what is desirable in this system. While we have not yet reached a date in which names become available for release, initial conversations indicate that getting back the ether for releasing them is an incentive for broader participation and as a *refunder of last resort* for overpriced abandoned names**.\r\n\r\n### Proposal: Unlock deed value slowly over the years\r\n\r\nThe most obvious solution would be to allow the owner to get some of their locked ether back, while keeping the ownership of the name. The \"amount refundable\" can be a static function of time, that is calculated whenever the owner wants to retrieve deposits. A proposed value would be to allow names to be redeemed 25% of the total value every year (continuously not necessarily a step function): it would mean about 43% of the ether is recoverable after a year, 76% after 5 years and 94% after 10 years. Another option would be to use an exponential curve, where you can recover 5% per year squared: it would be 28% of the total after five years and 99.5% of the amount after 10 years.\r\n\r\nWhile 10 years might be a lot for someone holding a name expecting it to be profitable (bitcoin didn't even exist 10 years ago) it's not that much for someone building a product expecting to have long term users.\r\n\r\n### Proposal: Treat Deed value as prepaid rent and unlock it slowly over the years\r\n\r\n<img width=\"705\" alt=\"screen shot 2017-09-07 at 11 46 15 am\" src=\"https://user-images.githubusercontent.com/112898/30169252-371994f4-93c2-11e7-95a8-95a6bc797e4e.png\">\r\n\r\nOn another EIP we will explore how utility rents can be used, but it's a known consensus that some sort of rental fee will eventually be implemented as a way to incentive unused names to be sold or released. While the behavior of those fees are yet to be determined, they have these desirable characteristics:\r\n\r\n* Are predictable enough that name owners aren't surprised by sudden fee hikes\r\n* Are slow enough that if the name becomes late on his bills the owner has time to solve the issue\r\n* Can be paid by anyone, so that if an app is abandoned by their owners but it's still loved by their users, the funds can be crowdsourced\r\n* Allow it to be registered for a long time\r\n\r\nAn easy way to do this would be to automatically deduce the amount owned from the initial deed. If fees are small enough, a high valued name can have it's own rent paid for years to come with just the initial bid amount. \"Rent owed\" can be calculated real time, and that value is subtracted from the amount of ether that can be unlocked at any time.\r\n\r\nWhen the \"rent owed\" is larger than the amount of ether on the domain, **then the name can tagged as \"insolvent\"** by anyone, which will trigger a public event. This would alert anyone who cares about these particular names to take action: either to consider bidding on it when it becomes available, or to deposit more ether into it. As soon as more ether is deposited and the value is over the amount owed, the tag is removed. The name can be released exactly a year after it has been tagged as insolvent for the last time. **There would be a one year grace period in which the name could be recovered by paying the late rent.**\r\n\r\n**Treating deed value as prepaid rent allows name ownership of living names to be highly stable, but allows abandoned and forgotten names to be taken back to the market after a few years**.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/705/reactions",
    "total_count": 3,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 1,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/705/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327838755",
    "html_url": "https://github.com/ethereum/EIPs/issues/705#issuecomment-327838755",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
    "id": 327838755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzgzODc1NQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-07T15:40:01Z",
    "updated_at": "2017-09-07T15:41:37Z",
    "author_association": "MEMBER",
    "body": "A good summary of the current consensus - thanks Alex!\r\n\r\nPersonally, for the reasons you outline (primarily the variation in capital costs and lockup periods for different actors), I'm a fan of eliminating deposits altogether in favor of rent.\r\n\r\nIf a decay scheme is used, it should be simple exponential decay, which produces an asymptotic trend towards 0; this is easy to implement and well understood, and is time-invariant (eg, it doesn't care when the process started).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327838755/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327840937",
    "html_url": "https://github.com/ethereum/EIPs/issues/705#issuecomment-327840937",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
    "id": 327840937,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzg0MDkzNw==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-07T15:47:40Z",
    "updated_at": "2017-09-07T15:47:40Z",
    "author_association": "NONE",
    "body": "> I'm a fan of eliminating deposits altogether in favor of rent.\r\n\r\nWhich is why I added the section following it, where I believe its value as an incentive to release (added to rent!) justifies it\r\n\r\n> it should be simple exponential decay, which produces an asymptotic trend towards 0;\r\n\r\nSo it would be something like `total/time`? The issue there is that it would go down very quickly in my opinion, which is the opposite of what we want.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327840937/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327852525",
    "html_url": "https://github.com/ethereum/EIPs/issues/705#issuecomment-327852525",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
    "id": 327852525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzg1MjUyNQ==",
    "user": {
      "login": "carver",
      "id": 205327,
      "node_id": "MDQ6VXNlcjIwNTMyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carver",
      "html_url": "https://github.com/carver",
      "followers_url": "https://api.github.com/users/carver/followers",
      "following_url": "https://api.github.com/users/carver/following{/other_user}",
      "gists_url": "https://api.github.com/users/carver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carver/subscriptions",
      "organizations_url": "https://api.github.com/users/carver/orgs",
      "repos_url": "https://api.github.com/users/carver/repos",
      "events_url": "https://api.github.com/users/carver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-07T16:27:58Z",
    "updated_at": "2017-09-07T16:28:22Z",
    "author_association": "MEMBER",
    "body": "> [Rent can] be paid by anyone, so that if an app is abandoned by their owners but it's still loved by their users, the funds can be crowdsourced\r\n\r\nIf there is a significant amount deposited and the rent is too small, then a griefing attack is possible, which keeps name owners from retrieving their deposit.\r\n\r\nI would favor building this public rent payment mechanic into contracts that own their name, when it's appropriate.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327852525/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327864471",
    "html_url": "https://github.com/ethereum/EIPs/issues/705#issuecomment-327864471",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
    "id": 327864471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzg2NDQ3MQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-07T17:12:13Z",
    "updated_at": "2017-09-07T17:12:13Z",
    "author_association": "MEMBER",
    "body": "> So it would be something like total/time? The issue there is that it would go down very quickly in my opinion, which is the opposite of what we want.\r\n\r\nExponential decay always destroys the same percentage over the same time - like radioactivity, you can describe it in terms of half life. Mathematically it's `deposit * e ^ (-t/r)`, where t is the time elapsed, and r is the decay rate.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327864471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327864914",
    "html_url": "https://github.com/ethereum/EIPs/issues/705#issuecomment-327864914",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
    "id": 327864914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzg2NDkxNA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-07T17:13:47Z",
    "updated_at": "2017-09-07T17:13:47Z",
    "author_association": "MEMBER",
    "body": "> If there is a significant amount deposited and the rent is too small, then a griefing attack is possible, which keeps name owners from retrieving their deposit.\r\n\r\n> I would favor building this public rent payment mechanic into contracts that own their name, when it's appropriate.\r\n\r\nThis can be mitigated by allowing owners to withdraw the deposit and release the name immediately - but then contributors have no assurance the owner won't do just that.\r\n\r\nPersonality I agree - it should be up to owning contracts to expose a payment method if they want.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327864914/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327881150",
    "html_url": "https://github.com/ethereum/EIPs/issues/705#issuecomment-327881150",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
    "id": 327881150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzg4MTE1MA==",
    "user": {
      "login": "pipermerriam",
      "id": 824194,
      "node_id": "MDQ6VXNlcjgyNDE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pipermerriam",
      "html_url": "https://github.com/pipermerriam",
      "followers_url": "https://api.github.com/users/pipermerriam/followers",
      "following_url": "https://api.github.com/users/pipermerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/pipermerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pipermerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pipermerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/pipermerriam/orgs",
      "repos_url": "https://api.github.com/users/pipermerriam/repos",
      "events_url": "https://api.github.com/users/pipermerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pipermerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-07T18:15:24Z",
    "updated_at": "2017-09-07T18:15:24Z",
    "author_association": "MEMBER",
    "body": "> Personality I agree - it should be up to owning contracts to expose a payment method if they want.\r\n\r\nI'm of the same opinion.  Rather than baking these assurances into the protocol, I think it should be left up to domain owners whether they choose to implement such a feature.  (The same pattern we came to loose consensus on for how domain owners can provide guarantees for subdomain owners).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327881150/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327898164",
    "html_url": "https://github.com/ethereum/EIPs/issues/705#issuecomment-327898164",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
    "id": 327898164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzg5ODE2NA==",
    "user": {
      "login": "alexvandesande",
      "id": 112898,
      "node_id": "MDQ6VXNlcjExMjg5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexvandesande",
      "html_url": "https://github.com/alexvandesande",
      "followers_url": "https://api.github.com/users/alexvandesande/followers",
      "following_url": "https://api.github.com/users/alexvandesande/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexvandesande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexvandesande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexvandesande/subscriptions",
      "organizations_url": "https://api.github.com/users/alexvandesande/orgs",
      "repos_url": "https://api.github.com/users/alexvandesande/repos",
      "events_url": "https://api.github.com/users/alexvandesande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexvandesande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-07T19:21:34Z",
    "updated_at": "2017-09-07T19:21:34Z",
    "author_association": "NONE",
    "body": "> Exponential decay always destroys the same percentage over the same time - like radioactivity, you can describe it in terms of half life. Mathematically it's deposit * e ^ (-t/r), where t is the time elapsed, and r is the decay rate.\r\n\r\nThen it's equivalent to the 25% per year curve that I plotted on the graph (dotted blue curve). I see the elegance on being time invariant, but I also like that in the other option we have a very small drop in the first years and then it very quickly goes to 0. But yeah, it's an implementation detail.\r\n\r\n> a griefing attack is possible, which keeps name owners from retrieving their deposit. I would favor building this public rent payment mechanic into contracts that own their name, when it's appropriate.\r\n\r\nI am not against making this a contract level decision, but just to be clear the only thing the \"grieving attack\" achieves is to prevent the name from being released to the public. If the name owner hasn't lost his keys they can always release it, and if they have, by the time the name is available, the funds will have run out by definition",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327898164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003642770",
    "html_url": "https://github.com/ethereum/EIPs/issues/705#issuecomment-1003642770",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
    "id": 1003642770,
    "node_id": "IC_kwDOAq426M470l-S",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T00:42:43Z",
    "updated_at": "2022-01-02T00:42:43Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003642770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013783584",
    "html_url": "https://github.com/ethereum/EIPs/issues/705#issuecomment-1013783584",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/705",
    "id": 1013783584,
    "node_id": "IC_kwDOAq426M48bRwg",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-16T00:43:55Z",
    "updated_at": "2022-01-16T00:43:55Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013783584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
