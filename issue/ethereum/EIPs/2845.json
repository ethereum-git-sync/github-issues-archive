{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2845",
  "id": 670718791,
  "node_id": "MDU6SXNzdWU2NzA3MTg3OTE=",
  "number": 2845,
  "title": "Discussions for EIP: Add DID related methods to the JSON-RPC",
  "user": {
    "login": "oed",
    "id": 3909429,
    "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/oed",
    "html_url": "https://github.com/oed",
    "followers_url": "https://api.github.com/users/oed/followers",
    "following_url": "https://api.github.com/users/oed/following{/other_user}",
    "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
    "organizations_url": "https://api.github.com/users/oed/orgs",
    "repos_url": "https://api.github.com/users/oed/repos",
    "events_url": "https://api.github.com/users/oed/events{/privacy}",
    "received_events_url": "https://api.github.com/users/oed/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 79,
  "created_at": "2020-08-01T09:55:48Z",
  "updated_at": "2022-03-26T13:05:55Z",
  "closed_at": "2022-03-26T13:05:55Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "https://eips.ethereum.org/EIPS/eip-2844",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2845/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/667966984",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-667966984",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 667966984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Nzk2Njk4NA==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T11:20:52Z",
    "updated_at": "2020-08-03T11:20:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Replying to @kdenhartog from the duplicate discussion thread #2851 \r\n\r\n**Original message:**\r\n> My first round of feedback for this:\r\n>\r\n> One of the general topics that's been discussed quite a bit is if we want to restrict the algorithms and key types supported in the JOSE registries. Often times this is done to limit the scope of code that needs to be written by various implementations which in turn should bolster interoperability. I see you've done this via recommendations, but I'd wonder if we want to restrict further usage here via explicitly not supporting certain algorithms. Is that something you think would be beneficial?\r\n>\r\n> Note: This next piece of feedback is based on potentially misunderstanding the paths permission aspect. I'd like to figure out more about this and then we may not need to address the comments below. Additionally, I'd like to understand the architecture of where the operations are being performed because I'm thinking I misunder\r\n>\r\n> Another point that I caught quite quickly is that this EIP is looking to use DIDs to manage discoverability of keys. I'm happy to see this approach being taken further as I think it will help quite a bit. I hope it's an approach that more DApps look to use as well. With that in mind, one of the things that I wasn't sure about was how the API would be integrated with key management to perform the sign and encrypt operations. Is your current assumption that a Key Management architecture will be used within the implementation and it's the responsibility of implementers to be handle this? In general, every JOSE implementation I've looked at has made the assumption that the private key is provided in some way and it will perform the cryptographic operation when necessary. This is slightly different from what's proposed at this point though. I think we may need to think more about what the general expectation is on the implementers and the callers in terms of who's providing which data (private key), who's performing the cryptographic operations, and who's performing the structuring of the data (e.g. creating the JWE with the signed data). From there we'll likely want to take a look at the general API design to make sure it aligns with what's generally done by wallets and other DApps that would be using this API.\r\n>\r\n> I'm also interested to know more about why encrypt and verify were not included. I assume there's back history from the previous attempts that may further explain this. Have they already been added via other APIs or was there some other reason that they were left off?\r\n>\r\n> In general though @oed, I like the direction that you're going with this and I'm curious to hear others opinions on this.\r\n\r\nPersonally I would be fine with restricting the alg and key types to the ones that are supported by JOSE registries (are those used by default for COSE as well?). \r\n\r\nSo the JSON-RPC is used for two main things with ethereum. Interacting interacting with chain state, and requesting things from the wallet. This means that it acts as a way for an app to request signatures and account information from a wallet. So in our case here the only things needed to be done wallet side is *signing* and *decrypting*. Internally wallets are free to use whichever key management system they prefer. A caller of any of these methods won't need to provide any type of key material.\r\nBoth verifying and encryption can happen completely client side (without any wallet interaction) so there is no need to add methods for them. Instead a utility library that does this can be implemented (we're thinking about implementing these utility functions in the **js-did** library).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/667966984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668097380",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-668097380",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 668097380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODA5NzM4MA==",
    "user": {
      "login": "OR13",
      "id": 8295856,
      "node_id": "MDQ6VXNlcjgyOTU4NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8295856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OR13",
      "html_url": "https://github.com/OR13",
      "followers_url": "https://api.github.com/users/OR13/followers",
      "following_url": "https://api.github.com/users/OR13/following{/other_user}",
      "gists_url": "https://api.github.com/users/OR13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OR13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OR13/subscriptions",
      "organizations_url": "https://api.github.com/users/OR13/orgs",
      "repos_url": "https://api.github.com/users/OR13/repos",
      "events_url": "https://api.github.com/users/OR13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OR13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T15:48:40Z",
    "updated_at": "2020-08-03T15:49:08Z",
    "author_association": "NONE",
    "body": "Things to consider...\r\n\r\nsecp256k1 supports ecdsa (ES256K JWS) and Schnorr (SS256K (not registered!)).... and UPort created `ES256K-R` which is similarly not registered... and it identical to `ES256K` with appended recovery byte...\r\n\r\nIMO, making the header a required RPC argument, and restricting the valid values of `alg` is a good way of addressing this issue.\r\n\r\nThere is also detached JWS https://tools.ietf.org/html/rfc7797 ... this is really useful for when you are signing binary... not some JSON.stringify-iable data (lots of issues with canonicalization and JOSE)....\r\n\r\nIt's also the default JWS format used by Linked Data Proofs.\r\n\r\n\r\nI'm not sure adding the `did_*` prefix to RPC calls is wise.... especially if what we are really doing is exposing JOSE / COSE interfaces.... I would prefer to see `jose_jws_sign` and `jose_jws_sign_detached`... and the COSE equivalents.\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668097380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668440263",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-668440263",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 668440263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODQ0MDI2Mw==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-04T07:49:04Z",
    "updated_at": "2020-08-04T07:49:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @OR13 \r\n\r\n> secp256k1 supports ecdsa (ES256K JWS) and Schnorr (SS256K (not registered!)).... and UPort created ES256K-R which is similarly not registered... and it identical to ES256K with appended recovery byte...\r\n\r\nGood point. I should probably explicitly say `ES256K` 👍 \r\n\r\n> IMO, making the header a required RPC argument, and restricting the valid values of alg is a good way of addressing this issue.\r\n\r\nHm, seems like this would require the application developer to be aware of which algs the wallet supports. This would mean that there needs to be an additional rpc method for getting this information. I'd rather have the wallet decide this and append the alg that it is using.\r\n\r\n> There is also detached JWS https://tools.ietf.org/html/rfc7797\r\n\r\nHappy to add this if others express interest.\r\n\r\n> I'm not sure adding the did_* prefix to RPC calls is wise.... especially if what we are really doing is exposing JOSE / COSE interfaces.... I would prefer to see jose_jws_sign and jose_jws_sign_detached... and the COSE equivalents.\r\n\r\nThe whole point here is to enable DID signed JOSE/COSE objects. Essentially by setting the `kid` to the DID (and key fragment) for the signing entity. Imo this is critical for this EIP to be successful. Using `did_*` for decryption also simplifies things because the combination of key discovery and decryption is key for dev UX.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668440263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668614787",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-668614787",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 668614787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODYxNDc4Nw==",
    "user": {
      "login": "OR13",
      "id": 8295856,
      "node_id": "MDQ6VXNlcjgyOTU4NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8295856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OR13",
      "html_url": "https://github.com/OR13",
      "followers_url": "https://api.github.com/users/OR13/followers",
      "following_url": "https://api.github.com/users/OR13/following{/other_user}",
      "gists_url": "https://api.github.com/users/OR13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OR13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OR13/subscriptions",
      "organizations_url": "https://api.github.com/users/OR13/orgs",
      "repos_url": "https://api.github.com/users/OR13/repos",
      "events_url": "https://api.github.com/users/OR13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OR13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-04T14:01:57Z",
    "updated_at": "2020-08-04T14:01:57Z",
    "author_association": "NONE",
    "body": "If the developer is not required to know which signing algorithms are supported and set the header explicitly, a default header should be provided.... which defaults will be used?\r\n\r\n+1 to using `kid` and making its default value of the form `did:example:123#fragment`\r\n\r\nwhat about all the developers who want JWTs / JWSs but don't care about DIDs?... I agree that the APIs should be simple, but i question why they should start with dids... to me... dids are more of an option for setting the `kid`.... but I am assuming there would be APIs for retrieving JWKs.... so the entire system can be used with or without DIDs.\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668614787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668625935",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-668625935",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 668625935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODYyNTkzNQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-04T14:21:25Z",
    "updated_at": "2020-08-04T14:21:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> which defaults will be used?\r\n\r\nThat's up to the wallet implementer (a reccommendation is provided in the EIP)\r\n\r\n> but I am assuming there would be APIs for retrieving JWKs\r\n\r\nWhat do you mean by this exactly? To me this is what you would use the DID for. Using `did:ethr` would be the most straight forward way for wallets to support some way of distributing JWKs, as all ethereum wallets support `did:ethr` already.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668625935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668644825",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-668644825",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 668644825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODY0NDgyNQ==",
    "user": {
      "login": "OR13",
      "id": 8295856,
      "node_id": "MDQ6VXNlcjgyOTU4NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8295856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OR13",
      "html_url": "https://github.com/OR13",
      "followers_url": "https://api.github.com/users/OR13/followers",
      "following_url": "https://api.github.com/users/OR13/following{/other_user}",
      "gists_url": "https://api.github.com/users/OR13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OR13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OR13/subscriptions",
      "organizations_url": "https://api.github.com/users/OR13/orgs",
      "repos_url": "https://api.github.com/users/OR13/repos",
      "events_url": "https://api.github.com/users/OR13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OR13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-04T14:53:48Z",
    "updated_at": "2020-08-04T14:53:48Z",
    "author_association": "NONE",
    "body": "put another way... \r\n\r\nwhat RPC interfaces will be provided for getting public key bytes.... \r\n\r\npossibly options:\r\n\r\n`did_resolve` -> didDocument as json\r\n`jose_get_jwk_by_kid` -> JWK\r\n`did_jws_verify` vs `jose_jws_verify`\r\n\r\nFor example... Tangem cards support a \"getPublicKey\" NFC interface. You can then use that interface to verify signatures... the cards themselves don't support \"verifying on the card\".... thats similar to the concept of \"verifying on the rpc server\"... \r\n\r\nI'd prefer to have a JOSE RPC interface, that happened to work with DIDs... and a DID RPC interface that supported things like:\r\n\r\nresolution (which returns a set of keys, and their associated relationships)... \r\n\r\nthose relationships have nothing to do with JOSE... they are no mentioned in the JOSE RFCs... they were created in DID Core.\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/668644825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/669770456",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-669770456",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 669770456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTc3MDQ1Ng==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-06T07:50:30Z",
    "updated_at": "2020-08-06T07:50:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> what RPC interfaces will be provided for getting public key bytes\r\n\r\nThis is what `did_authenticate` is for. With it you will get back the DID that was authenticated. To get the public key bytes you can use something like the [DID Resolver](https://github.com/decentralized-identity/did-resolver) which works with any DID method (provided a resolver is implemented for it).\r\n\r\nThe problem with an RPC method like `did_resolve` is that it's not really the responsibility of a wallet to resolve DIDs for apps. Instead Ethereum clients would need to implement this method, but then there has to be consensus among client implementers which DID methods to support (would be very hard). I also think DID resolution is more of an application on top of blockchains rather than something that should be implemented in blockchain client software.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/669770456/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671963056",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-671963056",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 671963056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk2MzA1Ng==",
    "user": {
      "login": "awoie",
      "id": 43441584,
      "node_id": "MDQ6VXNlcjQzNDQxNTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43441584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awoie",
      "html_url": "https://github.com/awoie",
      "followers_url": "https://api.github.com/users/awoie/followers",
      "following_url": "https://api.github.com/users/awoie/following{/other_user}",
      "gists_url": "https://api.github.com/users/awoie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awoie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awoie/subscriptions",
      "organizations_url": "https://api.github.com/users/awoie/orgs",
      "repos_url": "https://api.github.com/users/awoie/repos",
      "events_url": "https://api.github.com/users/awoie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awoie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T13:57:48Z",
    "updated_at": "2020-08-11T14:35:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "`did_authenticate` should return a proof-of-control of the DID and should expect an `aud`/ `domain` and `nonce` / `challenge` parameter. I don't know which data format the proof should have and whether it would be allowed to support different formats but it could be either a JWS or CWS.\r\n\r\n**Updated:**\r\n\r\nYou might be able to use the `path` as the challenge.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671963056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671980847",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-671980847",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 671980847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk4MDg0Nw==",
    "user": {
      "login": "awoie",
      "id": 43441584,
      "node_id": "MDQ6VXNlcjQzNDQxNTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43441584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awoie",
      "html_url": "https://github.com/awoie",
      "followers_url": "https://api.github.com/users/awoie/followers",
      "following_url": "https://api.github.com/users/awoie/following{/other_user}",
      "gists_url": "https://api.github.com/users/awoie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awoie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awoie/subscriptions",
      "organizations_url": "https://api.github.com/users/awoie/orgs",
      "repos_url": "https://api.github.com/users/awoie/repos",
      "events_url": "https://api.github.com/users/awoie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awoie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T14:28:47Z",
    "updated_at": "2020-08-11T14:28:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess `did_createCWS` should return a CWS, so there might be a typo in the return value.\r\n\r\n> Returns:\r\n> A CWE encoded as base64, string\r\n\r\n^^should be rather CWS, right?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671980847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671981623",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-671981623",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 671981623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk4MTYyMw==",
    "user": {
      "login": "awoie",
      "id": 43441584,
      "node_id": "MDQ6VXNlcjQzNDQxNTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43441584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awoie",
      "html_url": "https://github.com/awoie",
      "followers_url": "https://api.github.com/users/awoie/followers",
      "following_url": "https://api.github.com/users/awoie/following{/other_user}",
      "gists_url": "https://api.github.com/users/awoie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awoie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awoie/subscriptions",
      "organizations_url": "https://api.github.com/users/awoie/orgs",
      "repos_url": "https://api.github.com/users/awoie/repos",
      "events_url": "https://api.github.com/users/awoie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awoie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T14:30:08Z",
    "updated_at": "2020-08-11T15:56:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is there a reason to not include an API for:\r\n- `did_createCWE`\r\n- `did_createJWE`\r\n\r\n?\r\n\r\n**Update:**\r\n\r\nThat certainly only makes sense using authcrypt -> e.g., ECDH-1PU",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671981623/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671984848",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-671984848",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 671984848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk4NDg0OA==",
    "user": {
      "login": "awoie",
      "id": 43441584,
      "node_id": "MDQ6VXNlcjQzNDQxNTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43441584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awoie",
      "html_url": "https://github.com/awoie",
      "followers_url": "https://api.github.com/users/awoie/followers",
      "following_url": "https://api.github.com/users/awoie/following{/other_user}",
      "gists_url": "https://api.github.com/users/awoie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awoie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awoie/subscriptions",
      "organizations_url": "https://api.github.com/users/awoie/orgs",
      "repos_url": "https://api.github.com/users/awoie/repos",
      "events_url": "https://api.github.com/users/awoie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awoie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T14:36:05Z",
    "updated_at": "2020-08-11T14:36:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is the `did` parameter needed if the `kid` or something similar could be used to determine the DID in the CWE/JWE?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671984848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671986503",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-671986503",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 671986503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTk4NjUwMw==",
    "user": {
      "login": "awoie",
      "id": 43441584,
      "node_id": "MDQ6VXNlcjQzNDQxNTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43441584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awoie",
      "html_url": "https://github.com/awoie",
      "followers_url": "https://api.github.com/users/awoie/followers",
      "following_url": "https://api.github.com/users/awoie/following{/other_user}",
      "gists_url": "https://api.github.com/users/awoie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awoie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awoie/subscriptions",
      "organizations_url": "https://api.github.com/users/awoie/orgs",
      "repos_url": "https://api.github.com/users/awoie/repos",
      "events_url": "https://api.github.com/users/awoie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awoie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T14:38:55Z",
    "updated_at": "2020-08-11T14:39:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Is it needed to recommend a decryption algorithm for decryption? The decryption algorithm can be determined from the CWE/JWE directly, trying to decrypt the CWE/JWE with a different algorithm, would fail anyways. In general I agree that ECDH-ES (X25519) + XChacha20Poly1305 should be recommended.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/671986503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/672037828",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-672037828",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 672037828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjAzNzgyOA==",
    "user": {
      "login": "pedrouid",
      "id": 10136079,
      "node_id": "MDQ6VXNlcjEwMTM2MDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10136079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrouid",
      "html_url": "https://github.com/pedrouid",
      "followers_url": "https://api.github.com/users/pedrouid/followers",
      "following_url": "https://api.github.com/users/pedrouid/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrouid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrouid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrouid/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrouid/orgs",
      "repos_url": "https://api.github.com/users/pedrouid/repos",
      "events_url": "https://api.github.com/users/pedrouid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrouid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T15:54:43Z",
    "updated_at": "2020-08-11T15:54:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> `did_authenticate` should return a proof-of-control of the DID and should expect an `aud`/ `domain` and `nonce` / `challenge` parameter. I don't know which data format the proof should have and whether it would be allowed to support different formats but it could be either a JWS or CWS.\r\nThis definitely would be super useful and best practice that should be adopted by all Ethereum wallets IMO\r\n\r\nMe and @wighawag drafted a similar proposal last year where accounts would be exposed with signatures for a given challenge.\r\n\r\nhttps://ethereum-magicians.org/t/automatic-authentication-signature/2429\r\n\r\nIf this pattern would be possible with `did_authenticate` by default then we could replace the current `eth_requestAccounts` with this method instead to include proof-of-control\r\n\r\nSame dapps currently after getting the user's accounts follow up with a `personal_sign` request to attest for the private key ownership or even to access the public key of the account.\r\n\r\nI think this should just be the default behavior for all dapp and wallet interoperability\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/672037828/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/672112031",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-672112031",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 672112031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjExMjAzMQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T17:22:46Z",
    "updated_at": "2020-08-11T17:25:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Adding a challenge makes sense! Thanks for suggesting @awoie and clarifying @pedrouid. Will add this when I update the draft. Might make sense to make this an actual JWT/CWT with an expiry actually. A `challenge` should definitely be included.\r\nWhat is your thinking on `aud` @awoie? Is it strictly needed?\r\n\r\n> I guess did_createCWS should return a CWS, so there might be a typo in the return value.\r\n\r\nNice catch!\r\n\r\n> That certainly only makes sense using authcrypt -> e.g., ECDH-1PU\r\n\r\nWould you mind expanding on this? And yeah for the suggested encryption alg you can just do the encryption client side.\r\n\r\n> Is it needed to recommend a decryption algorithm for decryption?\r\n\r\nIt's really up to the wallet to decide what to use, and state that in their DID document. \r\n\r\n> Is the did parameter needed if the kid or something similar could be used to determine the DID in the CWE/JWE?\r\n\r\nThe `kid` should **not** specified in the JWE/CWE. That would leak information about the ciphertext.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/672112031/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/672127655",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-672127655",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 672127655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjEyNzY1NQ==",
    "user": {
      "login": "awoie",
      "id": 43441584,
      "node_id": "MDQ6VXNlcjQzNDQxNTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43441584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awoie",
      "html_url": "https://github.com/awoie",
      "followers_url": "https://api.github.com/users/awoie/followers",
      "following_url": "https://api.github.com/users/awoie/following{/other_user}",
      "gists_url": "https://api.github.com/users/awoie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awoie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awoie/subscriptions",
      "organizations_url": "https://api.github.com/users/awoie/orgs",
      "repos_url": "https://api.github.com/users/awoie/repos",
      "events_url": "https://api.github.com/users/awoie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awoie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-11T17:43:28Z",
    "updated_at": "2020-08-11T18:35:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Adding a challenge makes sense! Thanks for suggesting @awoie and clarifying @pedrouid. Will add this when I update the draft. Might make sense to make this an actual JWT/CWT with an expiry actually. A `challenge` should definitely be included.\r\n\r\n`nonce` has that purpose in id_token JWTs in OIDC (see IANA claims registry). If you introduce a new claim for this purpose, then registering a new claim name in the IANA should be considered.\r\n\r\n> What is your thinking on `aud` @awoie? Is it strictly needed?\r\n\r\n`aud` can be optional and it can be any arbitrary stringOrUri. I think it would be good practice to make use of that. Everyone that receives the JWS would have to identify itself and then decide whether to reject the JWS. Not sure what is the CWS equivalent.\r\n\r\n> > That certainly only makes sense using authcrypt -> e.g., ECDH-1PU\r\n> \r\n> Would you mind expanding on this? And yeah for the suggested encryption alg you can just do the encryption client side.\r\n\r\n[ECDH-1PU](https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-00) is for example used in [DIDComm-messaging](https://identity.foundation/didcomm-messaging/docs/spec/) to encrypt a message to a DID while enabling the receiver of the encrypted message to verify some sort of authenticity that the sender is has a certain DID (or more general keys) by avoiding the sign-JWS-then-encrypt-JWE pattern. In that case, only the wallet would be able to create such a JWE/CWE because only the wallet controls the private key. \r\n\r\n> > Is the did parameter needed if the kid or something similar could be used to determine the DID in the CWE/JWE?\r\n> \r\n> The `kid` should **not** specified in the JWE/CWE. That would leak information about the ciphertext.\r\n\r\nThe `kid` won't be in the Ciphertext of the JWE. It would be in the unprotected header field per recipient: see https://tools.ietf.org/html/rfc7516#section-4.1.6. You could use the same pattern as you described for JWS/CWS and use a DID URL.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/672127655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/672658129",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-672658129",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 672658129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjY1ODEyOQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-12T07:04:09Z",
    "updated_at": "2020-08-12T07:12:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "> `nonce` has that purpose in id_token JWTs in OIDC (see IANA claims registry). \r\n\r\nGreat, let's use `nonce` 👍 \r\n\r\n> `aud` can be optional and it can be any arbitrary stringOrUri.\r\n\r\nOk, so this would be optionally set by the wallet?\r\n\r\n> ECDH-1PU is for example used in DIDComm-messaging to encrypt a message to a DID while enabling the receiver of the encrypted message to verify some sort of authenticity that the sender is has a certain DID (or more general keys) by avoiding the sign-JWS-then-encrypt-JWE pattern.\r\n\r\nMakes sense, but seems a bit out of scope for now. Could easily be addressed in an additional EIP!\r\nQ: Is the receiver the only party that can verify sender authenticity or can everyone do it?\r\n\r\n> The `kid` won't be in the Ciphertext of the JWE.\r\n\r\nThat's my point :) In some cases you might not want to leak information about whom the ciphertext is intended for.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/672658129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673480642",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673480642",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673480642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzQ4MDY0Mg==",
    "user": {
      "login": "OR13",
      "id": 8295856,
      "node_id": "MDQ6VXNlcjgyOTU4NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8295856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OR13",
      "html_url": "https://github.com/OR13",
      "followers_url": "https://api.github.com/users/OR13/followers",
      "following_url": "https://api.github.com/users/OR13/following{/other_user}",
      "gists_url": "https://api.github.com/users/OR13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OR13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OR13/subscriptions",
      "organizations_url": "https://api.github.com/users/OR13/orgs",
      "repos_url": "https://api.github.com/users/OR13/repos",
      "events_url": "https://api.github.com/users/OR13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OR13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T13:32:24Z",
    "updated_at": "2020-08-13T13:32:24Z",
    "author_association": "NONE",
    "body": "`kid` is optional everywhere, but for JWS, its pretty critical for handling resolution of public key bytes for verification, see this list of JOSE /. DID issues:\r\n\r\nhttps://github.com/decentralized-identity/did-jose-extensions/blob/master/options.md\r\n\r\nTL;DR; I'd rather see use of `kid` defined consistently as pointing to a `verificationMethod` `id`... than see people keep creating 1 off spec text to handle key lookups without using JSON-LD.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673480642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673481470",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673481470",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673481470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzQ4MTQ3MA==",
    "user": {
      "login": "OR13",
      "id": 8295856,
      "node_id": "MDQ6VXNlcjgyOTU4NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8295856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OR13",
      "html_url": "https://github.com/OR13",
      "followers_url": "https://api.github.com/users/OR13/followers",
      "following_url": "https://api.github.com/users/OR13/following{/other_user}",
      "gists_url": "https://api.github.com/users/OR13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OR13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OR13/subscriptions",
      "organizations_url": "https://api.github.com/users/OR13/orgs",
      "repos_url": "https://api.github.com/users/OR13/repos",
      "events_url": "https://api.github.com/users/OR13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OR13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T13:33:48Z",
    "updated_at": "2020-08-13T13:33:48Z",
    "author_association": "NONE",
    "body": "I agree we should postpone encryption until we have signatures. can we take an inventory of the proposed RPC methods?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673481470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673521453",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673521453",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673521453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzUyMTQ1Mw==",
    "user": {
      "login": "awoie",
      "id": 43441584,
      "node_id": "MDQ6VXNlcjQzNDQxNTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43441584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awoie",
      "html_url": "https://github.com/awoie",
      "followers_url": "https://api.github.com/users/awoie/followers",
      "following_url": "https://api.github.com/users/awoie/following{/other_user}",
      "gists_url": "https://api.github.com/users/awoie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awoie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awoie/subscriptions",
      "organizations_url": "https://api.github.com/users/awoie/orgs",
      "repos_url": "https://api.github.com/users/awoie/repos",
      "events_url": "https://api.github.com/users/awoie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awoie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T14:45:12Z",
    "updated_at": "2020-08-13T14:45:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> There is also detached JWS https://tools.ietf.org/html/rfc7797 ... this is really useful for when you are signing binary... not some JSON.stringify-iable data (lots of issues with canonicalization and JOSE)....\r\n\r\n@oed @OR13 Does it make sense to also support JWS JSON serialization? What happens if a DID has more than one signature key attached to it?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673521453/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673548078",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673548078",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673548078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzU0ODA3OA==",
    "user": {
      "login": "OR13",
      "id": 8295856,
      "node_id": "MDQ6VXNlcjgyOTU4NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8295856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OR13",
      "html_url": "https://github.com/OR13",
      "followers_url": "https://api.github.com/users/OR13/followers",
      "following_url": "https://api.github.com/users/OR13/following{/other_user}",
      "gists_url": "https://api.github.com/users/OR13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OR13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OR13/subscriptions",
      "organizations_url": "https://api.github.com/users/OR13/orgs",
      "repos_url": "https://api.github.com/users/OR13/repos",
      "events_url": "https://api.github.com/users/OR13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OR13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T15:32:37Z",
    "updated_at": "2020-08-13T15:32:37Z",
    "author_association": "NONE",
    "body": "I assume the API interface would support specifying the exact key to use for signing.... \r\n\r\nFor example: https://github.com/transmute-industries/did-key.js/blob/master/packages/secp256k1/src/__fixtures__/index.ts#L58\r\n\r\n`did:example:123#fragment` is a URI that identifies the public \"verification side\" of the private \"signing side\"...\r\n\r\nI would consider a wallet API that didn't let me choose the signing key pretty broken, in all cases where there was more than 1 signing key.... its not clear to me that is the case for `did:ethr` or secp256k1 `did:key` however... since the did identifies a particular public / private key pair.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673548078/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673550297",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673550297",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673550297,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzU1MDI5Nw==",
    "user": {
      "login": "awoie",
      "id": 43441584,
      "node_id": "MDQ6VXNlcjQzNDQxNTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/43441584?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awoie",
      "html_url": "https://github.com/awoie",
      "followers_url": "https://api.github.com/users/awoie/followers",
      "following_url": "https://api.github.com/users/awoie/following{/other_user}",
      "gists_url": "https://api.github.com/users/awoie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awoie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awoie/subscriptions",
      "organizations_url": "https://api.github.com/users/awoie/orgs",
      "repos_url": "https://api.github.com/users/awoie/repos",
      "events_url": "https://api.github.com/users/awoie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awoie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T15:36:45Z",
    "updated_at": "2020-08-13T15:36:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I assume the API interface would support specifying the exact key to use for signing....\r\n> \r\n> For example: https://github.com/transmute-industries/did-key.js/blob/master/packages/secp256k1/src/__fixtures__/index.ts#L58\r\n> \r\n> `did:example:123#fragment` is a URI that identifies the public \"verification side\" of the private \"signing side\"...\r\n> \r\n> I would consider a wallet API that didn't let me choose the signing key pretty broken, in all cases where there was more than 1 signing key.... its not clear to me that is the case for `did:ethr` or secp256k1 `did:key` however... since the did identifies a particular public / private key pair.\r\n\r\nWith JSON Serialization you would be able to send multiple signatures back in case the DID controls a few signing keys. That was why I brought that up.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673550297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673565033",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673565033",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673565033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzU2NTAzMw==",
    "user": {
      "login": "OR13",
      "id": 8295856,
      "node_id": "MDQ6VXNlcjgyOTU4NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8295856?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OR13",
      "html_url": "https://github.com/OR13",
      "followers_url": "https://api.github.com/users/OR13/followers",
      "following_url": "https://api.github.com/users/OR13/following{/other_user}",
      "gists_url": "https://api.github.com/users/OR13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OR13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OR13/subscriptions",
      "organizations_url": "https://api.github.com/users/OR13/orgs",
      "repos_url": "https://api.github.com/users/OR13/repos",
      "events_url": "https://api.github.com/users/OR13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OR13/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T16:03:40Z",
    "updated_at": "2020-08-13T16:03:50Z",
    "author_association": "NONE",
    "body": "@awoie hm so the interface would be `kid`: `array<did_uri>`, `payload: any`, `header: any`=> `json serialized JWS`\r\n\r\nSeems useful.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673565033/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673587666",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673587666",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673587666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzU4NzY2Ng==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T16:48:13Z",
    "updated_at": "2020-08-13T16:48:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> TL;DR; I'd rather see use of kid defined consistently as pointing to a verificationMethod id...\r\n\r\nMakes sense. This was my intention. Maybe that was unclear?\r\n\r\n> Does it make sense to also support JWS JSON serialization? What happens if a DID has more than one signature key attached to it?\r\n\r\nI'm agnostic as to which serialization to use. I'm curious though what the use case is for signing with multiple keys from the same DID? If you want to have two different DIDs sign the same payload you can just take two JWS with compact serialization and reserialize them using the JSON serlialization (which is trivial).\r\n\r\n>  I assume the API interface would support specifying the exact key to use for signing....\r\n\r\n\r\nYeah exactly. You can  already specify the fragment in the `did` param of `did_createJWS`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673587666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673813614",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673813614",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673813614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzgxMzYxNA==",
    "user": {
      "login": "kdenhartog",
      "id": 23125059,
      "node_id": "MDQ6VXNlcjIzMTI1MDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/23125059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdenhartog",
      "html_url": "https://github.com/kdenhartog",
      "followers_url": "https://api.github.com/users/kdenhartog/followers",
      "following_url": "https://api.github.com/users/kdenhartog/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdenhartog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdenhartog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdenhartog/subscriptions",
      "organizations_url": "https://api.github.com/users/kdenhartog/orgs",
      "repos_url": "https://api.github.com/users/kdenhartog/repos",
      "events_url": "https://api.github.com/users/kdenhartog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdenhartog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T01:33:54Z",
    "updated_at": "2020-08-14T01:33:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "> take two JWS with compact serialization and reserialize them\r\n\r\nWould this break the signatures of the two because of the non-payload data being signed (e.g. protected headers)?\r\n\r\nIf not, it would be cool to enable multi-signature supports as a separate API where a JWS can be passed in with the DID and it will de-assemble the JWS and sign the payload/header data and then that JSON serialized JWS could be passed as a form of a multi-signature to something like a smart contract or any other verifier for that matter.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673813614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673930781",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673930781",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673930781,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzkzMDc4MQ==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T07:24:22Z",
    "updated_at": "2020-08-14T07:24:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for creating this proposal.\r\n\r\nRegarding `did_authenticate`. From the discussion, It looks like it has multiple purpose\r\n\r\nThe current draft of this proposal specify that `did_authenticate` requires user permission. This seems important if authentication is used for something other than ensuring that the user indeed control the did (the private key of the ethereum address presented).\r\n\r\nOtherwise, as @pedrouid mentions, `did_authenticate` could simply replace `eth_requestAccounts`, see in particular: https://ethereum-magicians.org/t/eip-1102-opt-in-provider-access/414/58 which would already require user to accept showing their did.\r\n\r\nBut looking at the current draft of the proposal here, it seems that `did_authenticate` performs more than simply checking if the user control the did being advertised. \r\n\r\nIt accept a `path` parameter. And then further in the proposal it is mentioned that decryption happen without user confirmation only if `did_authenticate` was already accepted for a particular path.\r\n\r\nIf we go with the idea that `did_authenticate` replace `eth_requestAccount`, the `path` should default to the application origin (like in `eth_requestAccount`) then the only prompt should be about accepting to reveal your did, the authentication is then done automatically so the application can be sure the user is indeed in control of that did and is not someone faking it.\r\n\r\nAny other `path` would require user confirmation.\r\n\r\nFurthermore as mentioned [here](https://github.com/ethereum/EIPs/issues/130#issuecomment-329770999) and explained in [Proposal 1: Non-Interactive Decryption](https://medium.com/@wighawag/3-proposals-for-making-web3-a-better-experience-974f97765700)\r\nIf we consider the default path being the application origin,\r\nThen decryption should happen automatically for every encryption performed from that same origin. No user confirmation should be required there. For that a mechanism should be put in place so that encryption include the `origin` in the data.\r\n\r\n![diagram](https://miro.medium.com/max/1575/1*viioAefmbO9gpdUqE8-WlQ.png)\r\n\r\nThis would allow a seamless encrypted storage for application, that can then be safely shared across devices.\r\nOf course this is only fully under user control for application on content-addressable system like ipfs, but as mentioned in my comment and blog, an ENS or even DNS name that point to an ipfs hash should use the ipfs hash as the origin (not the ENS name).\r\n\r\nNow if the content change (and so the uri), the user would be requested to `did_authenticate` the new \"path\"\r\n\r\nNow, I am not very knowledgeable with JWS and I might abuse term \"path\" here by allowing it to represent URI. If that is the case, we could separate the 2.\r\n\r\n\r\nNote: for traditional URI (non content-addressable) it could be up to the wallet to decide whether a user confirmation is required as there is a security risk that the application get compromised.\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673930781/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673931293",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673931293",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673931293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzkzMTI5Mw==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T07:25:43Z",
    "updated_at": "2020-08-14T07:25:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Would this break the signatures of the two because of the non-payload data being signed (e.g. protected headers)?\r\n\r\nIt wouldn't. Each signer is free to choose what to put in their protected header. For example they would need to put their own `kid` in there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673931293/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673934261",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673934261",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673934261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzkzNDI2MQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T07:33:15Z",
    "updated_at": "2020-08-14T07:33:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wighawag While we could use `path` like that I would strongly advise against it since it would incentivize apps to silo data around their origins. Where as if you just use a path unrelated to origin this would make it easier to share data across apps. \r\n\r\nI'm saying this mainly because I believe data should always be independent of the app that is bee used to display the data. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673934261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673935210",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673935210",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673935210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzkzNTIxMA==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T07:35:35Z",
    "updated_at": "2020-08-14T07:35:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@oed I agree that we should not silo data. But here the proposal is to remove the need for approval for the default case.\r\nThis is better for the uers and that's why I think it should be that way.\r\nNo reason to request a confirmation when the application that request decryption was the one encrypting it.\r\nOther application can alwasy request user to approve them for that origin. not big deal",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673935210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673939170",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673939170",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673939170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzkzOTE3MA==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T07:45:27Z",
    "updated_at": "2020-08-14T07:45:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wighawag i don't think the UX of approving both access to the account and a path is worse than just the account. It also makes it clear for the user what's going on. Origins also doesn't make sense for mobile apps.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673939170/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673942129",
    "html_url": "https://github.com/ethereum/EIPs/issues/2845#issuecomment-673942129",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2845",
    "id": 673942129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3Mzk0MjEyOQ==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-14T07:52:43Z",
    "updated_at": "2020-08-14T07:53:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@oed \r\nI personally think it does make it worse, It could also lead to authorization fatigue\r\n\r\nRe mobile app, this is not true. application has also some unique identifier. And for case where getting a unique identifier is not possible, the permission request would show up. We should not sacrifice one use case because it is not possible in all scenario.\r\n\r\nI should precise though that this not for all use case. You would obviously not use an ipfs hash as path for data that you expect to be globally shared like name, profile picture, etc\r\n\r\nThis is mostly for specific data that would be a pain to request authentication for.\r\n\r\nBut maybe, a better alternative is to request authentication at the time of encryption (even if is is technically unnecessary) so a user is not surprised to have to accept an application after already interacting with it.\r\n\r\nBut I guess the application could simple call `did_authenticate` before hand and there would be no issue. \r\n\r\nMy aim is to remove all unnecessary confirmation, as this is a real pain from the user perspective.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/673942129/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
