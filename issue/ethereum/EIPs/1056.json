{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1056",
  "id": 320002057,
  "node_id": "MDU6SXNzdWUzMjAwMDIwNTc=",
  "number": 1056,
  "title": "ERC: Lightweight Identity",
  "user": {
    "login": "oed",
    "id": 3909429,
    "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/oed",
    "html_url": "https://github.com/oed",
    "followers_url": "https://api.github.com/users/oed/followers",
    "following_url": "https://api.github.com/users/oed/following{/other_user}",
    "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
    "organizations_url": "https://api.github.com/users/oed/orgs",
    "repos_url": "https://api.github.com/users/oed/repos",
    "events_url": "https://api.github.com/users/oed/events{/privacy}",
    "received_events_url": "https://api.github.com/users/oed/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 31,
  "created_at": "2018-05-03T16:57:50Z",
  "updated_at": "2022-01-01T23:11:22Z",
  "closed_at": "2022-01-01T23:11:22Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\nEIP: 1056\r\nTitle: ERC: Lightweight Identity\r\nAuthor: Pelle Braendgaard <pelle.braendgaard@consensys.net>, Joel Torstensson <oed@consensys.net>\r\nType: Standards Track\r\nCategory: ERC\r\nStatus: Draft\r\nCreated: 2018-05-03\r\n```\r\n\r\n## Simple Summary\r\n\r\n\r\nA registry for key and attribute management of lightweight blockchain identities.\r\n\r\n## Abstract\r\n\r\n\r\nThis ERC describes a standard for creating and updating identities with a limited use of blockchain resources. An identity can have an unlimited number of `delegates` and `attributes` associated with it. Identity creation is as simple as creating a regular key pair ethereum account, which means that it's fee (no gas costs) and all ethereum accounts are valid identities. Furthermore this ERC is fully [DID compliant](https://w3c-ccg.github.io/did-spec/).\r\n\r\n\r\n## Motivation\r\n\r\n\r\nAs we have been developing identity systems for the last couple of years at uPort it has become apparent that the cost of identity creation is a large issue. The previous Identity proposal [ERC725](https://github.com/ethereum/EIPs/issues/725) faces this exact issue. Our requirements when creating this ERC is that identity creation should be free, and should be possible to do in an offline environment (e.g. refugee scenario). However it must also be possible to rotate keys without changing the primary identifier of the identity. The identity system should be fit to use off-chain as well as on-chain.\r\n\r\n##  Definitions\r\n\r\n* `Identifier`: a piece of data that uniquely identifies the identity, an ethereum address\r\n* `delegate`: an address that is delegated for a specific time to perform some sort of function on behalf of an identity\r\n* `delegateType`: the type of a delegate, is determined by a protocol or application higher up\r\nExamples:\r\n  * `did-jwt`\r\n  * `raiden`\r\n* `attribute`: a piece of data associated with the identity\r\n\r\n\r\n## Specification\r\nThis ERC specifies a contract called `EthereumDIDRegistry` that is deployed once and can then be commonly used by everyone. \r\n\r\n\r\n### Identity ownership\r\n\r\nBy default an identity is owned by itself, meaning whoever controls the ethereum account with that address. The owner can be updated to a new key pair account or to a multisig account etc.\r\n\r\n#### identityOwner\r\nReturns the owner of the given identity.\r\n```js\r\nfunction identityOwner(address identity) public view returns(address);\r\n```\r\n\r\n#### changeOwner\r\nSets the owner of the given identity to another ethereum account.\r\n```js\r\nfunction changeOwner(address identity, address newOwner) public;\r\n```\r\n\r\n#### changeOwnerSigned\r\nSame as above but with raw signature.\r\n```js\r\nfunction changeOwnerSigned(address identity, uint8 sigV, bytes32 sigR, bytes32 sigS, address newOwner) public;\r\n```\r\n\r\n### Delegate management\r\nDelegates can be used both on- and off-chain. They all have a `delegateType` which can be used to specify the purpose of the delegate.\r\n\r\n#### validDelegate\r\nReturns true if the given `delegate` is a delegate with type `delegateType` of `identity`.\r\n```js\r\nfunction validDelegate(address identity, bytes32 delegateType, address delegate) public view returns(bool);\r\n```\r\n\r\n#### addDelegate\r\nAdds a new delegate with the given type. `validity` indicates the number of seconds that the delegate will be valid for, after which it will no longer be a delegate of `identity`.\r\n```js\r\nfunction addDelegate(address identity, bytes32 delegateType, address delegate, uint validity) public;\r\n```\r\n\r\n#### addDelegateSigned\r\nSame as above but with raw signature.\r\n```js\r\nfunction addDelegateSigned(address identity, uint8 sigV, bytes32 sigR, bytes32 sigS, bytes32 delegateType, address delegate, uint validity) public;\r\n```\r\n\r\n#### revokeDelegate\r\nRevokes the given `delegate` for the given `identity`.\r\n```js\r\nfunction revokeDelegate(address identity, bytes32 delegateType, address delegate) public;\r\n```\r\n\r\n#### revokeDelegateSigned\r\nSame as above but with raw signature.\r\n```js\r\nfunction revokeDelegateSigned(address identity, uint8 sigV, bytes32 sigR, bytes32 sigS, bytes32 delegateType, address delegate) public;\r\n```\r\n\r\n### Attribute management\r\nAttributes contain simple data about the identity. They can be managed only by the owner of the identity.\r\n\r\n#### setAttribute\r\nSets an attribute with the given `name` and `value`, valid for `validity` seconds.\r\n```js\r\nfunction setAttribute(address identity, bytes32 name, bytes value, uint validity) public;\r\n```\r\n\r\n#### setAttributeSigned\r\nSame as above but with raw signature.\r\n```js\r\nfunction setAttributeSigned(address identity, uint8 sigV, bytes32 sigR, bytes32 sigS, bytes32 name, bytes value, uint validity) public;\r\n```\r\n\r\n#### revokeAttrubte\r\nRevokes an attribute.\r\n```js\r\nfunction revokeAttribute(address identity, bytes32 name, bytes value) public;\r\n```\r\n\r\n#### revokeAttributeSigned\r\nSame as above but with raw signature.\r\n```js\r\nfunction revokeAttributeSigned(address identity, uint8 sigV, bytes32 sigR, bytes32 sigS, bytes32 name, bytes value) public;\r\n```\r\n\r\n### Events\r\n\r\n#### DIDOwnerChanged\r\nMUST be triggered when `changeOwner` or `changeOwnerSigned` was successfully called.\r\n```js\r\nevent DIDOwnerChanged(\r\n  address indexed identity,\r\n  address owner,\r\n  uint previousChange\r\n);\r\n```\r\n\r\n#### DIDDelegateChanged\r\nMUST be triggered when a change to a delegate was successfully made.\r\n```js\r\nevent DIDDelegateChanged(\r\n  address indexed identity,\r\n  bytes32 delegateType,\r\n  address delegate,\r\n  uint validTo,\r\n  uint previousChange\r\n);\r\n```\r\n\r\n#### DIDAttritueChanged\r\nMUST be triggered when a change to an attribute was successfully made.\r\n```js\r\nevent DIDAttributeChanged(\r\n  address indexed identity,\r\n  bytes32 name,\r\n  bytes value,\r\n  uint validTo,\r\n  uint previousChange\r\n);\r\n```\r\n\r\n### Efficient lookup of events through linked identity events\r\n\r\nContract Events are a useful feature for storing data from smart contracts exclusively for off-chain use.  Unfortunately current ethereum implementations provide a very inefficient lookup mechanism. By using linked events that always link to the previous block with a change for the identity, we can solve this problem with much improved performance. Each identity has its previously changed block stored in the `changed` mapping.\r\n\r\n1. Lookup `previousChange` block for identity\r\n2. Lookup all events for given identity address using web3, but only for the `previousChange` block\r\n3. Do something with event\r\n4. Find `previousChange` from the event  and repeat\r\n\r\nExample code:\r\n\r\n```js\r\nconst history = []\r\npreviousChange = await didReg.changed(identity)\r\nwhile (previousChange) {\r\n  const filter = await didReg.allEvents({topics: [identity], fromBlock: previousChange, toBlock: previousChange})\r\n  const events = await getLogs(filter)\r\n  previousChange = undefined\r\n  for (let event of events) {\r\n    history.unshift(event)\r\n    previousChange = event.args.previousChange\r\n  }\r\n}     \r\n```\r\n\r\n### Building a DID document for an identity\r\n\r\nThe primary owner key should be looked up using `identityOwner(identity)`.  This should be the first of the publicKeys listed. Iterate through the `DIDDelegateChanged` events to build a list of additional keys and authentication sections as needed. The list of delegateTypes to include is still to be determined. Iterate through `DIDAttributeChanged` events for service entries, encryption public keys and other public names. The attribute names are still to be determined.\r\n\r\n\r\n\r\n## Rationale\r\n\r\nFor on-chain interactions Ethereum has a built in account abstraction that can be used regardless of whether the account is a smart contract or a key pair. Any transaction has a `msg.sender` as the verified send of the transaction.\r\n\r\nSince each Ethereum transaction has to be funded, there is a growing trend of on-chain transactions that are authenticated via an externally created signature and not by the actual transaction originator. This allows 3rd party funding services or receiver pays without any fundamental changes to the underlying Ethereum architecture. These kinds of transactions have to be signed by an actual key pair and thus can not be used to represent smart contract based Ethereum accounts.\r\n\r\nWe propose a way of a Smart Contract or regular key pair delegating signing for various purposes to externally managed key pairs. This allows a smart contract to be represented both on-chain as well as off-chain or in payment channels through temporary or permanent delegates.\r\n\r\n\r\n## Backwards Compatibility\r\n\r\nAll ethereum accounts are valid identities (and DID compatible) using this standard. This means that any wallet provider that uses key pair accounts already supports the bare minimum of this standard, and can implement `delegate` and `attribute` functionality by simply using the `ethr-did` referenced below. As the **DID Auth** standard solidifies it also means that all of these wallets will be compatible with the [DID decentralized login system](https://github.com/decentralized-identity).\r\n\r\n\r\n\r\n## Implementation\r\n\r\n\r\n[ethr-did-registry](https://github.com/uport-project/ethr-did-registry/blob/develop/contracts/EthereumDIDRegistry.sol) (`EthereumDIDRegistry` contract implementation)\r\n[ethr-did-resolver](https://github.com/uport-project/ethr-did-resolver) (DID compatible resolver)\r\n[ethr-did](https://github.com/uport-project/ethr-did) (javascript library for using the identity)\r\n\r\n### Deployment\r\n\r\nThe address for the `EthereumDIDRegistry` will be specified here once deployed.\r\n\r\n## Copyright\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1056/reactions",
    "total_count": 69,
    "+1": 53,
    "-1": 0,
    "laugh": 0,
    "hooray": 4,
    "confused": 0,
    "heart": 5,
    "rocket": 5,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386388685",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386388685",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386388685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjM4ODY4NQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T18:16:11Z",
    "updated_at": "2018-05-03T18:16:11Z",
    "author_association": "MEMBER",
    "body": "This looks pretty mature - you should submit it as a PR so it can be merged as a draft.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386388685/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386438286",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386438286",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386438286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQzODI4Ng==",
    "user": {
      "login": "ptrwtts",
      "id": 497330,
      "node_id": "MDQ6VXNlcjQ5NzMzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/497330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptrwtts",
      "html_url": "https://github.com/ptrwtts",
      "followers_url": "https://api.github.com/users/ptrwtts/followers",
      "following_url": "https://api.github.com/users/ptrwtts/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptrwtts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptrwtts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptrwtts/subscriptions",
      "organizations_url": "https://api.github.com/users/ptrwtts/orgs",
      "repos_url": "https://api.github.com/users/ptrwtts/repos",
      "events_url": "https://api.github.com/users/ptrwtts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptrwtts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T21:12:37Z",
    "updated_at": "2018-05-03T21:12:37Z",
    "author_association": "NONE",
    "body": "> Since each Ethereum transaction has to be funded, there is a growing trend of on-chain transactions that are authenticated via an externally created signature and not by the actual transaction originator. \r\n\r\nThis is similar to what is being done in #865. Is it worth trying to establish a standard around how such pre signed transactions are implemented? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386438286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386467355",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386467355",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386467355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQ2NzM1NQ==",
    "user": {
      "login": "aldigjo",
      "id": 6092869,
      "node_id": "MDQ6VXNlcjYwOTI4Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6092869?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aldigjo",
      "html_url": "https://github.com/aldigjo",
      "followers_url": "https://api.github.com/users/aldigjo/followers",
      "following_url": "https://api.github.com/users/aldigjo/following{/other_user}",
      "gists_url": "https://api.github.com/users/aldigjo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aldigjo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aldigjo/subscriptions",
      "organizations_url": "https://api.github.com/users/aldigjo/orgs",
      "repos_url": "https://api.github.com/users/aldigjo/repos",
      "events_url": "https://api.github.com/users/aldigjo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aldigjo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T23:33:10Z",
    "updated_at": "2018-05-03T23:33:10Z",
    "author_association": "NONE",
    "body": "@ptrwtts uPort is already doing this and its been implemented and is currently working on testnets, please check out \r\n1. https://medium.com/uport/making-uport-smart-contracts-smarter-part-3-fixing-user-experience-with-meta-transactions-105209ed43e0 \r\n2. https://github.com/uport-project/uport-identity/blob/develop/contracts/TxRelay.sol",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386467355/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386519856",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386519856",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386519856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjUxOTg1Ng==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T07:00:27Z",
    "updated_at": "2018-05-04T07:00:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ptrwtts as @aldigjo mentioned we have a general construction for doing pre singed / meta transactions. There is some documentation [availiable here](https://github.com/uport-project/uport-identity/blob/develop/docs/txRelay.md). However I'm not sure it makese sense to standardize this, as different projects might have different requirements. What do you think?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386519856/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386575958",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386575958",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386575958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjU3NTk1OA==",
    "user": {
      "login": "alexandermuehle",
      "id": 1909723,
      "node_id": "MDQ6VXNlcjE5MDk3MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1909723?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexandermuehle",
      "html_url": "https://github.com/alexandermuehle",
      "followers_url": "https://api.github.com/users/alexandermuehle/followers",
      "following_url": "https://api.github.com/users/alexandermuehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexandermuehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexandermuehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexandermuehle/subscriptions",
      "organizations_url": "https://api.github.com/users/alexandermuehle/orgs",
      "repos_url": "https://api.github.com/users/alexandermuehle/repos",
      "events_url": "https://api.github.com/users/alexandermuehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexandermuehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T11:41:59Z",
    "updated_at": "2018-05-04T11:41:59Z",
    "author_association": "NONE",
    "body": "When the data (adding/changing attributes/delegates) is put on the blockchain someone still has to pay though? Do I understand this EIP correctly that you are only simplifying the flow so that you can save the cost from proxy contract creations etc?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386575958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386585103",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386585103",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386585103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjU4NTEwMw==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T12:23:56Z",
    "updated_at": "2018-05-04T12:23:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexandermuehle Yes you understand it correctly. However not that setting an attribute only emits an event and does no regular on-chain storage, so it's quite cheap.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386585103/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386603150",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386603150",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386603150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjYwMzE1MA==",
    "user": {
      "login": "alexandermuehle",
      "id": 1909723,
      "node_id": "MDQ6VXNlcjE5MDk3MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1909723?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexandermuehle",
      "html_url": "https://github.com/alexandermuehle",
      "followers_url": "https://api.github.com/users/alexandermuehle/followers",
      "following_url": "https://api.github.com/users/alexandermuehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexandermuehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexandermuehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexandermuehle/subscriptions",
      "organizations_url": "https://api.github.com/users/alexandermuehle/orgs",
      "repos_url": "https://api.github.com/users/alexandermuehle/repos",
      "events_url": "https://api.github.com/users/alexandermuehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexandermuehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T13:35:26Z",
    "updated_at": "2018-05-04T13:43:53Z",
    "author_association": "NONE",
    "body": "@oed cool, so its only gas cost for updating the \"changed\" mapping + 375 G_log + 8 G_logdata * data size + 375 G_logstopic * (4 or 6), thats a big saving\r\n\r\n> The identity system should be fit to use off-chain as well as on-chain.\r\n\r\nhow is that possible if you use log events to store the data though? Is there a way for a contract to access event data now? \r\n\r\n> [...] exclusively for off-chain use\r\n\r\nYou are contradicting yourself here (or more likely you mean something else with \"fit to use off-chain as well as on-chain\"), maybe clarify this point in the motivation section",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386603150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386650289",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386650289",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386650289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjY1MDI4OQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T16:13:15Z",
    "updated_at": "2018-05-04T16:13:15Z",
    "author_association": "NONE",
    "body": "@alexandermuehle \r\n\r\n> how is that possible if you use log events to store the data though? Is there a way for a contract to access event data now?\r\n\r\nThe idea is for off-chain use cases to be handled through the event logs and onchain use cases to be handled through an Ethereum Claims Registry (i.e. ERC780)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386650289/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386747910",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386747910",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386747910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Njc0NzkxMA==",
    "user": {
      "login": "bharathrao",
      "id": 1541039,
      "node_id": "MDQ6VXNlcjE1NDEwMzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1541039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bharathrao",
      "html_url": "https://github.com/bharathrao",
      "followers_url": "https://api.github.com/users/bharathrao/followers",
      "following_url": "https://api.github.com/users/bharathrao/following{/other_user}",
      "gists_url": "https://api.github.com/users/bharathrao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bharathrao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bharathrao/subscriptions",
      "organizations_url": "https://api.github.com/users/bharathrao/orgs",
      "repos_url": "https://api.github.com/users/bharathrao/repos",
      "events_url": "https://api.github.com/users/bharathrao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bharathrao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-04T22:10:13Z",
    "updated_at": "2018-05-04T22:10:13Z",
    "author_association": "NONE",
    "body": "There are several issues with this proposal and a few items that are unclear\r\n\r\n1. What is the difference between the changeOwner and changeOwnerSigned messages? Whose signature is in the method? Why do we need both?\r\n\r\n2. The idea that the identity changes its owner subjects the system to a race condition. Its possible that a TOCTOU attack could occur between the check and use of identity and a change of ownership in between. Given this occurs on-chain, a 15s block time would make this easily exploited.\r\n\r\n3. The delegate/revoke system is insufficiently specified. The above enables delegating, revoking and re-delegating the same delegate multiple times. This will break several audit certainty, especially due to race conditions.\r\n\r\nSuggestions:\r\n1. Have a thinner API\r\n2. Changing owners is dangerous and unnecessary. Drop it. A multisig owner can change the owners of the multisig itself.\r\n3. Delegation should be grant/revoke. Once revoked, it should not be possible to re-grant. \r\n\r\nNote: Technically W3C DID spec requires the url/json serialization format, so this is not DID compliant. My suggestion is not to bend backwards to be DID compliant. \r\n\r\n[Zero Knowledge API Keys](https://blog.leverj.io/zero-knowledge-api-keys-43280cc93647) provide all the functionalities of this spec without race conditions and is a lot simpler to code against. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386747910/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386821015",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386821015",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386821015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjgyMTAxNQ==",
    "user": {
      "login": "AdamJLemmon",
      "id": 27031808,
      "node_id": "MDQ6VXNlcjI3MDMxODA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/27031808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AdamJLemmon",
      "html_url": "https://github.com/AdamJLemmon",
      "followers_url": "https://api.github.com/users/AdamJLemmon/followers",
      "following_url": "https://api.github.com/users/AdamJLemmon/following{/other_user}",
      "gists_url": "https://api.github.com/users/AdamJLemmon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AdamJLemmon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AdamJLemmon/subscriptions",
      "organizations_url": "https://api.github.com/users/AdamJLemmon/orgs",
      "repos_url": "https://api.github.com/users/AdamJLemmon/repos",
      "events_url": "https://api.github.com/users/AdamJLemmon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AdamJLemmon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-05T17:16:37Z",
    "updated_at": "2018-05-05T17:16:37Z",
    "author_association": "NONE",
    "body": "Any thoughts on including attestations for given attributes?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386821015/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386822519",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386822519",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386822519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjgyMjUxOQ==",
    "user": {
      "login": "bharathrao",
      "id": 1541039,
      "node_id": "MDQ6VXNlcjE1NDEwMzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1541039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bharathrao",
      "html_url": "https://github.com/bharathrao",
      "followers_url": "https://api.github.com/users/bharathrao/followers",
      "following_url": "https://api.github.com/users/bharathrao/following{/other_user}",
      "gists_url": "https://api.github.com/users/bharathrao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bharathrao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bharathrao/subscriptions",
      "organizations_url": "https://api.github.com/users/bharathrao/orgs",
      "repos_url": "https://api.github.com/users/bharathrao/repos",
      "events_url": "https://api.github.com/users/bharathrao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bharathrao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-05T17:38:20Z",
    "updated_at": "2018-05-05T18:18:11Z",
    "author_association": "NONE",
    "body": "Im unclear as to what attributes are used for. Assuming that they are just tags such as location:USA or customertier:silver. Attribute revocation has the same race condition, but it may not be as critical as transfer of ownership in terms of exploit cost. The validity in seconds is imprecise on-chain but again, for attributes it may not be a major issue. \r\n\r\nOverall, creation and revocation without updates is the best way. Identities should be cheap and abundant for decentralization, just like a bitcoin address or ethereum account. You should not feel the need to update attributes on them or transfer ownership. Just create new ones. \r\n\r\nNote that reputation works well with addresses today: exchange wallets are well known and when a deposit is made from such an address, other exchanges can credit immediately, so there should not be a strong attachment to a given address/identity.\r\n\r\nEDIT: I don't see why attributes need to be on chain. Apparently, the identity owner himself is claiming certain attributes. This seems absurd since anyone can claim anything they want. The value of an attribute system is when OTHERS attest to attributes. Compare a user claiming to be from USA. It has no evidentiary support or is usable in anyway. My guess is that attribution is a completely orthogonal concern that should be in a completely different EIP where others can tag certain identities (assuming its possible to do it in a sybil resistant way)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386822519/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386825507",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386825507",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386825507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjgyNTUwNw==",
    "user": {
      "login": "AdamJLemmon",
      "id": 27031808,
      "node_id": "MDQ6VXNlcjI3MDMxODA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/27031808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AdamJLemmon",
      "html_url": "https://github.com/AdamJLemmon",
      "followers_url": "https://api.github.com/users/AdamJLemmon/followers",
      "following_url": "https://api.github.com/users/AdamJLemmon/following{/other_user}",
      "gists_url": "https://api.github.com/users/AdamJLemmon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AdamJLemmon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AdamJLemmon/subscriptions",
      "organizations_url": "https://api.github.com/users/AdamJLemmon/orgs",
      "repos_url": "https://api.github.com/users/AdamJLemmon/repos",
      "events_url": "https://api.github.com/users/AdamJLemmon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AdamJLemmon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-05T18:26:38Z",
    "updated_at": "2018-05-05T18:27:30Z",
    "author_association": "NONE",
    "body": "@bharathrao agreed that this feels like a \"self-proclaimed\" identity which does seem odd.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386825507/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386920462",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386920462",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386920462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjkyMDQ2Mg==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-06T22:06:25Z",
    "updated_at": "2018-05-06T22:06:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why this is called lightweight? How much cost to initialize an identity? More than to create a forwarder contract?\r\n\r\nThis approach looks like a token/badge and imply limitations on the Identity because all identities in the network are one address, so operations in between contracts all need to be aware of that contract.\r\n\r\nSeems like that one address can later be owned by other address, this seems very strange. Would be better then that each identity created is an unique number, not sure.\r\n\r\nHowever this might be useful somehow I'm not able to understand now, can you elaborate on that? \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386920462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386981349",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386981349",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386981349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Njk4MTM0OQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-07T07:24:39Z",
    "updated_at": "2018-05-07T07:24:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexandermuehle \r\n> how is that possible if you use log events to store the data though? Is there a way for a contract to access event data now?\r\n\r\nIf you have a look at the [implementation](https://github.com/uport-project/ethr-did-registry/blob/develop/contracts/EthereumDIDRegistry.sol) owners and delegates are also stored on-chain.\r\n\r\n@bharathrao \r\n> 2. The idea that the identity changes its owner subjects the system to a race condition. Its possible that a TOCTOU attack could occur between the check and use of identity and a change of ownership in between. Given this occurs on-chain, a 15s block time would make this easily exploited.\r\n\r\nCan you elaborate on how this would be an issue on-chain? To me a call to the `identityOwner` function would be safe.\r\n\r\n> 3. The delegate/revoke system is insufficiently specified. The above enables delegating, revoking and re-delegating the same delegate multiple times. This will break several audit certainty, especially due to race conditions.\r\n\r\nI agree with this and am planning an update so that it's possible to add delegates that are not revokable. However the revokable delegates are useful in cases where you want to instantly revoke a larger number of claims simultaniously. That can be claims in the ERC780 registry or off-chain claims.\r\n\r\n> 2. Changing owners is dangerous and unnecessary. Drop it. A multisig owner can change the owners of the multisig itself.\r\n\r\nUnfortunataly it's not possible to create multisigs without an on-chain transaction.\r\n\r\n> 3. Delegation should be grant/revoke. Once revoked, it should not be possible to re-grant.\r\n\r\nConsidering this. Can you elaborate with an example when this would be a problem maybe.\r\n\r\n> Note: Technically W3C DID spec requires the url/json serialization format, so this is not DID compliant. My suggestion is not to bend backwards to be DID compliant.\r\n\r\nPlease have a look at the [ethr-did-resovler](https://github.com/uport-project/ethr-did-resolver)\r\n\r\n> Zero Knowledge API Keys provide all the functionalities of this spec without race conditions and is a lot simpler to code against.\r\n\r\nThanks, will have a closer look at this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386981349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386994978",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-386994978",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 386994978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4Njk5NDk3OA==",
    "user": {
      "login": "alexandermuehle",
      "id": 1909723,
      "node_id": "MDQ6VXNlcjE5MDk3MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1909723?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexandermuehle",
      "html_url": "https://github.com/alexandermuehle",
      "followers_url": "https://api.github.com/users/alexandermuehle/followers",
      "following_url": "https://api.github.com/users/alexandermuehle/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexandermuehle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexandermuehle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexandermuehle/subscriptions",
      "organizations_url": "https://api.github.com/users/alexandermuehle/orgs",
      "repos_url": "https://api.github.com/users/alexandermuehle/repos",
      "events_url": "https://api.github.com/users/alexandermuehle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexandermuehle/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-07T08:24:24Z",
    "updated_at": "2018-05-07T08:24:49Z",
    "author_association": "NONE",
    "body": "> @alexandermuehle how is that possible if you use log events to store the data though? Is there a way for a contract to access event data now?\r\n\r\n>If you have a look at the implementation owners and delegates are also stored on-chain.\r\n\r\nI saw that, but the attributes/verifiable claims are not though, so for any use-case beyond the basics, contracts have to rely on other registries, like @christianlundkvist himself said onchain use-cases would still use an ERC780 like on-chain registry solution, I'm only pointing out that this is not really fit for BOTH on- and off-chain.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/386994978/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/387538839",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-387538839",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 387538839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzUzODgzOQ==",
    "user": {
      "login": "aldigjo",
      "id": 6092869,
      "node_id": "MDQ6VXNlcjYwOTI4Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6092869?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aldigjo",
      "html_url": "https://github.com/aldigjo",
      "followers_url": "https://api.github.com/users/aldigjo/followers",
      "following_url": "https://api.github.com/users/aldigjo/following{/other_user}",
      "gists_url": "https://api.github.com/users/aldigjo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aldigjo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aldigjo/subscriptions",
      "organizations_url": "https://api.github.com/users/aldigjo/orgs",
      "repos_url": "https://api.github.com/users/aldigjo/repos",
      "events_url": "https://api.github.com/users/aldigjo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aldigjo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-08T20:52:57Z",
    "updated_at": "2018-05-08T21:16:49Z",
    "author_association": "NONE",
    "body": "@bharathrao \r\n> What is the difference between the changeOwner and changeOwnerSigned messages? Whose signature is in the method? Why do we need both?\r\n\r\nchangeOwnerSigned accepts these signature parameters because in the context of uport we have something called meta transactions. These are transactions which are forwarded by a 3rd party “relayer” on behalf of the user, but the actions performed on-chain are what the user intended to do, and they are verified to be from the user using these signature params. This is important to uport because we do not expect every user to own Ether, and have come up with this scheme to allow for 3rd party gas payment. Please See the article I linked above. https://medium.com/uport/making-uport-smart-contracts-smarter-part-3-fixing-user-experience-with-meta-transactions-105209ed43e0\r\n\r\n@bharathrao \r\n> The idea that the identity changes its owner subjects the system to a race condition. Its possible that a TOCTOU attack could occur between the check and use of identity and a change of ownership in between. \r\n\r\nCould you possibly elaborate? I may be missing something b/c I don’t see a TOCTOU attack here on-chain. When considering an ethereum transaction, check & use happen in the same transaction. \r\n\r\n@AdamJLemmon \r\n> Any thoughts on including attestations for given attributes?\r\n\r\nuPort supports both on-chain and off-chain attestations. We expect these to be used in the appropriate contexts, as most of all data does not belong on-chain. Our version of what you are asking is ERC 780, where the address signing the transaction, makes some sort of claim about a subject. For off-chain attestations we use JWT’s, where we can sign a set of claims and store them locally on the device. \r\n\r\n@bharathrao \r\n> Im unclear as to what attributes are used for. Assuming that they are just tags such as location:USA or customertier:silver. Attribute revocation has the same race condition, but it may not be as critical as transfer of ownership in terms of exploit cost. The validity in seconds is imprecise on-chain but again, for attributes it may not be a major issue.\r\n\r\nIf others make their own clients to interact with this contract, they can use attributes as they wish, for their Own identity. In the context of uPort, we consider the data resolved from this smart contract to be a user’s public DID document. For example, an attribute could be a public key, so that another user B can verify the JWT’s signed by the first user. This would be done off-chain using something like the ethr-did-resolver \r\n\r\n@bharathrao \r\n> EDIT: I don't see why attributes need to be on-chain. Apparently, the identity owner himself is claiming certain attributes. This seems absurd since anyone can claim anything they want. The value of an attribute system is when OTHERS attest to attributes. Compare a user claiming to be from USA. It has no evidentiary support or is usable in anyway. My guess is that attribution is a completely orthogonal concern that should be in a completely different EIP where others can tag certain identities (assuming its possible to do it in a sybil resistant way)\r\n\r\nAttributes do Not have to be on-chain, this is an option in the form of ERC 780. This is an identity standard which can complement other on-chain solutions, but is primarily for resolving a DID document which help verify off-chain messages. Identity attributes which need to be public (e.g a public key, or verification algorithm) can easily be resolved and are not expensive to store. In ERC 780 you can make a claim about yourself, or others can about you. I don't see the necessity to limit users from making claims about themselves, whether it's in an off-chain or on-chain context.\r\n\r\n@3esmit \r\n> Why this is called lightweight? How much cost to initialize an identity? More than to create a forwarder contract?\r\n\r\nIt does not cost anything. An address owns itself by default. \r\n\r\n@3esmit \r\n> This approach looks like a token/badge and imply limitations on the Identity because all identities in the network are one address, so operations in between contracts all need to be aware of that contract.\r\n\r\nAll identities are not one address, the address is created by the user. By default this address owns itself, but the owner can be changed to allow rotation of keys. The identity itself can be a contract like a proxy, which would actually be intended to hold tokens.\r\n\r\n@3esmit \r\n> Seems like that one address can later be owned by other address, this seems very strange. Would be better then that each identity created is an unique number, not sure.\r\n\r\nThis allows for a persistent identifier, with the ability to rotate keys. You can also generate more Ethereum addresses, on your device, and these would be instantly “created”, unique identities.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/387538839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/388688811",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-388688811",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 388688811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODY4ODgxMQ==",
    "user": {
      "login": "bharathrao",
      "id": 1541039,
      "node_id": "MDQ6VXNlcjE1NDEwMzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1541039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bharathrao",
      "html_url": "https://github.com/bharathrao",
      "followers_url": "https://api.github.com/users/bharathrao/followers",
      "following_url": "https://api.github.com/users/bharathrao/following{/other_user}",
      "gists_url": "https://api.github.com/users/bharathrao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bharathrao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bharathrao/subscriptions",
      "organizations_url": "https://api.github.com/users/bharathrao/orgs",
      "repos_url": "https://api.github.com/users/bharathrao/repos",
      "events_url": "https://api.github.com/users/bharathrao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bharathrao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-14T03:45:14Z",
    "updated_at": "2018-05-14T03:45:14Z",
    "author_association": "NONE",
    "body": "> when considering an ethereum transaction, check & use happen in the same transaction.\r\n\r\nI see. So this ID scheme cannot be used for non-ethereum applications? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/388688811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412396966",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-412396966",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 412396966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjM5Njk2Ng==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-13T03:02:17Z",
    "updated_at": "2018-08-13T03:02:17Z",
    "author_association": "NONE",
    "body": "@bharathrao this id scheme implies that the self sovereign identity management is done on an ethereum chain supported by these contracts. You can use this scheme to manage identities that use any other technologies as well, but if you want to do on-chain verification of things (like signature verification), you'd need to write a relayer or bridge that brings that information from the ethereum chain where these identities are managed to your other chain. You can use this identity system for off-chain verification of self-sovereign identity by just talking to the ethereum chain that the identity claims it represents.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/412396966/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/431181461",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-431181461",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 431181461,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTE4MTQ2MQ==",
    "user": {
      "login": "AndyHydro",
      "id": 30632620,
      "node_id": "MDQ6VXNlcjMwNjMyNjIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/30632620?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndyHydro",
      "html_url": "https://github.com/AndyHydro",
      "followers_url": "https://api.github.com/users/AndyHydro/followers",
      "following_url": "https://api.github.com/users/AndyHydro/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndyHydro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndyHydro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndyHydro/subscriptions",
      "organizations_url": "https://api.github.com/users/AndyHydro/orgs",
      "repos_url": "https://api.github.com/users/AndyHydro/repos",
      "events_url": "https://api.github.com/users/AndyHydro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndyHydro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T22:10:55Z",
    "updated_at": "2018-10-18T22:10:55Z",
    "author_association": "NONE",
    "body": "While working through implementations and building with this registry a few concerns have come up. Our primary concern is that no on-chain account recovery methods exist for 1056 at this time. Not as importantly, a lack of multiple owned addresses, and the confusing nature of an address being owned by another address were also concerns.\r\n\r\nWhen working with something which is as important as an identity, in my opinion, it is extremely important to make sure that there are robust safety precautions in place should a user lose access to an address. This can be manifest in a few ways such as multiple addresses or a means for users to render an account useless should they lose access. We ran into a lot of these same issues while working on [ERC-1484](https://github.com/ethereum/EIPs/issues/1495) (a digital ID aggregator) and I feel that some of the solutions we came up with could be a benefit to 1056 were they to be implemented. For example, we allow for a user to add multiple owned addresses for their identity and we allow for a fail safe recovery should a users owned address be maliciously compromised. Identity is too important of a field to leave the protection of identities up to the end user completely. This will be especially true as DIDs gain more traction and less tech savvy users are controlling them. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/431181461/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436797568",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-436797568",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 436797568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjc5NzU2OA==",
    "user": {
      "login": "lovesh",
      "id": 3115401,
      "node_id": "MDQ6VXNlcjMxMTU0MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3115401?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lovesh",
      "html_url": "https://github.com/lovesh",
      "followers_url": "https://api.github.com/users/lovesh/followers",
      "following_url": "https://api.github.com/users/lovesh/following{/other_user}",
      "gists_url": "https://api.github.com/users/lovesh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lovesh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lovesh/subscriptions",
      "organizations_url": "https://api.github.com/users/lovesh/orgs",
      "repos_url": "https://api.github.com/users/lovesh/repos",
      "events_url": "https://api.github.com/users/lovesh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lovesh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T22:15:08Z",
    "updated_at": "2018-11-07T22:15:08Z",
    "author_association": "NONE",
    "body": "In abstract it says `that it's fee (no gas costs)`, it should say `that it's free (no gas costs)`, i.e. change `fee` to `free`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/436797568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/444280313",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-444280313",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 444280313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NDI4MDMxMw==",
    "user": {
      "login": "jmcnevin",
      "id": 12859,
      "node_id": "MDQ6VXNlcjEyODU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcnevin",
      "html_url": "https://github.com/jmcnevin",
      "followers_url": "https://api.github.com/users/jmcnevin/followers",
      "following_url": "https://api.github.com/users/jmcnevin/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcnevin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcnevin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcnevin/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcnevin/orgs",
      "repos_url": "https://api.github.com/users/jmcnevin/repos",
      "events_url": "https://api.github.com/users/jmcnevin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcnevin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-04T22:16:55Z",
    "updated_at": "2018-12-04T22:16:55Z",
    "author_association": "NONE",
    "body": "There has been some chatter about archiving logs, pruning state size, which would seem to affect this ERC's strategy for storing some data.  Will this strategy need to be revisited?\r\n\r\nhttps://github.com/ethereum/pm/blob/master/All%20Core%20Devs%20Meetings/Eth1x%20Sync%201.md",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/444280313/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/510280823",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-510280823",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 510280823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDI4MDgyMw==",
    "user": {
      "login": "davux",
      "id": 134428,
      "node_id": "MDQ6VXNlcjEzNDQyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/134428?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davux",
      "html_url": "https://github.com/davux",
      "followers_url": "https://api.github.com/users/davux/followers",
      "following_url": "https://api.github.com/users/davux/following{/other_user}",
      "gists_url": "https://api.github.com/users/davux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davux/subscriptions",
      "organizations_url": "https://api.github.com/users/davux/orgs",
      "repos_url": "https://api.github.com/users/davux/repos",
      "events_url": "https://api.github.com/users/davux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-11T00:38:25Z",
    "updated_at": "2019-07-11T00:40:38Z",
    "author_association": "NONE",
    "body": "How does this work on alternate (private) networks? I see at least 3 main issues:\r\n1. Some addresses exist on one network and not on another. This is especially true for smart contract addresses.\r\n2. Delegates defined on one network will not be the same as delegates defined on another. When looking at a given ethr DID, how do you know on which network to look?\r\n3. How do you discover the address of the registry to use on a particular network? Discovery should be part of the specification, and a Markdown file on a Github repository hardly works as a discovery algorithm, especially when dealing with an arbitrary number of private networks worldwide.\r\n\r\nOne way to mitigate that would be to include the network ID (possibly using a human-readable alias) as part of a DID, either litterally or using some checksum-based algorithm such as [MNID](https://github.com/uport-project/mnid).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/510280823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/564857575",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-564857575",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 564857575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDg1NzU3NQ==",
    "user": {
      "login": "Zerim",
      "id": 1834575,
      "node_id": "MDQ6VXNlcjE4MzQ1NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1834575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zerim",
      "html_url": "https://github.com/Zerim",
      "followers_url": "https://api.github.com/users/Zerim/followers",
      "following_url": "https://api.github.com/users/Zerim/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zerim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zerim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zerim/subscriptions",
      "organizations_url": "https://api.github.com/users/Zerim/orgs",
      "repos_url": "https://api.github.com/users/Zerim/repos",
      "events_url": "https://api.github.com/users/Zerim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zerim/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-12T05:37:31Z",
    "updated_at": "2019-12-12T05:37:31Z",
    "author_association": "NONE",
    "body": "I know this is already merged but I have a few questions:\r\n\r\n- Was counterfactual instantiation considered as a way of supporting off-chain identities (rather than the every Ethereum account is a DID approach?\r\n- Were the future effects of state rents considered in choosing to go with a \"commons\" contract vs. every user deploys (or counterfactually instantiates) their own identity contract (that they would be responsible for paying rents on).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/564857575/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/631667317",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-631667317",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 631667317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTY2NzMxNw==",
    "user": {
      "login": "ilanolkies",
      "id": 36084092,
      "node_id": "MDQ6VXNlcjM2MDg0MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/36084092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ilanolkies",
      "html_url": "https://github.com/ilanolkies",
      "followers_url": "https://api.github.com/users/ilanolkies/followers",
      "following_url": "https://api.github.com/users/ilanolkies/following{/other_user}",
      "gists_url": "https://api.github.com/users/ilanolkies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ilanolkies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ilanolkies/subscriptions",
      "organizations_url": "https://api.github.com/users/ilanolkies/orgs",
      "repos_url": "https://api.github.com/users/ilanolkies/repos",
      "events_url": "https://api.github.com/users/ilanolkies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ilanolkies/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T19:06:16Z",
    "updated_at": "2020-05-20T19:06:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the abstract you say\r\n\r\n> which means that it's fee (no gas costs)\r\n\r\nI think it should say _free_",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/631667317/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/633853731",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-633853731",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 633853731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzg1MzczMQ==",
    "user": {
      "login": "haidedang",
      "id": 23120018,
      "node_id": "MDQ6VXNlcjIzMTIwMDE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/23120018?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haidedang",
      "html_url": "https://github.com/haidedang",
      "followers_url": "https://api.github.com/users/haidedang/followers",
      "following_url": "https://api.github.com/users/haidedang/following{/other_user}",
      "gists_url": "https://api.github.com/users/haidedang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haidedang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haidedang/subscriptions",
      "organizations_url": "https://api.github.com/users/haidedang/orgs",
      "repos_url": "https://api.github.com/users/haidedang/repos",
      "events_url": "https://api.github.com/users/haidedang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haidedang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-26T07:18:01Z",
    "updated_at": "2020-05-26T07:18:01Z",
    "author_association": "NONE",
    "body": "hello community, \r\n\r\nin the abstract it is said that delegates of the DID can perform operations on behalf of the identity owner. But as specified in the smart contract right now, it is only possible for the identity owner of the DID to perform operations on a DID on-chain. They should update this in their document, I was very confused that delegation would not enable me to change a DID. However, shouldn't valid Delegates also be able to perform operations on behalf of the DID owner on-chain? \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/633853731/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/861434032",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-861434032",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 861434032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MTQzNDAzMg==",
    "user": {
      "login": "ejossev",
      "id": 13256825,
      "node_id": "MDQ6VXNlcjEzMjU2ODI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13256825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejossev",
      "html_url": "https://github.com/ejossev",
      "followers_url": "https://api.github.com/users/ejossev/followers",
      "following_url": "https://api.github.com/users/ejossev/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejossev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejossev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejossev/subscriptions",
      "organizations_url": "https://api.github.com/users/ejossev/orgs",
      "repos_url": "https://api.github.com/users/ejossev/repos",
      "events_url": "https://api.github.com/users/ejossev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejossev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-15T11:53:06Z",
    "updated_at": "2021-06-15T11:53:06Z",
    "author_association": "NONE",
    "body": "Generally, all methods using raw signatures shall have a mechanism to prevent replay attacks. Not sure if this is the case. For example, when delegate is added using raw signature, and then revoke is called, can the delegate add itself back by re-using the signature? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/861434032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/863233799",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-863233799",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 863233799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzIzMzc5OQ==",
    "user": {
      "login": "ilanolkies",
      "id": 36084092,
      "node_id": "MDQ6VXNlcjM2MDg0MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/36084092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ilanolkies",
      "html_url": "https://github.com/ilanolkies",
      "followers_url": "https://api.github.com/users/ilanolkies/followers",
      "following_url": "https://api.github.com/users/ilanolkies/following{/other_user}",
      "gists_url": "https://api.github.com/users/ilanolkies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ilanolkies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ilanolkies/subscriptions",
      "organizations_url": "https://api.github.com/users/ilanolkies/orgs",
      "repos_url": "https://api.github.com/users/ilanolkies/repos",
      "events_url": "https://api.github.com/users/ilanolkies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ilanolkies/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-17T13:20:35Z",
    "updated_at": "2021-06-17T13:20:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ejossev the sig is using a `nonce` in the hash so that each sig can be submitted once https://github.com/uport-project/ethr-did-registry/blob/develop/contracts/EthereumDIDRegistry.sol#L112\r\n\r\nAnyway, I think this allows replays over different chains... You can use a Ropsten sig in Mainnet for example. This contract was deployed via single address so the field `this` in the sig does not prevent this replay attack, it would usually do so.\r\n\r\nShould the implementation be updated to EIP-712?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/863233799/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/863260681",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-863260681",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 863260681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzI2MDY4MQ==",
    "user": {
      "login": "ejossev",
      "id": 13256825,
      "node_id": "MDQ6VXNlcjEzMjU2ODI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13256825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejossev",
      "html_url": "https://github.com/ejossev",
      "followers_url": "https://api.github.com/users/ejossev/followers",
      "following_url": "https://api.github.com/users/ejossev/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejossev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejossev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejossev/subscriptions",
      "organizations_url": "https://api.github.com/users/ejossev/orgs",
      "repos_url": "https://api.github.com/users/ejossev/repos",
      "events_url": "https://api.github.com/users/ejossev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejossev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-17T13:55:37Z",
    "updated_at": "2021-06-17T13:55:37Z",
    "author_association": "NONE",
    "body": "@ilanolkies I see, that is not a bad idea, but then the format of the data put into hash calculations shall be specified as well, shouldn't it? \r\nEIP-712 probably does not make sense until fully implemented.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/863260681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/863505417",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-863505417",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 863505417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzUwNTQxNw==",
    "user": {
      "login": "ilanolkies",
      "id": 36084092,
      "node_id": "MDQ6VXNlcjM2MDg0MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/36084092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ilanolkies",
      "html_url": "https://github.com/ilanolkies",
      "followers_url": "https://api.github.com/users/ilanolkies/followers",
      "following_url": "https://api.github.com/users/ilanolkies/following{/other_user}",
      "gists_url": "https://api.github.com/users/ilanolkies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ilanolkies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ilanolkies/subscriptions",
      "organizations_url": "https://api.github.com/users/ilanolkies/orgs",
      "repos_url": "https://api.github.com/users/ilanolkies/repos",
      "events_url": "https://api.github.com/users/ilanolkies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ilanolkies/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-17T19:26:08Z",
    "updated_at": "2021-06-17T19:26:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I mentioned EIP-712 just because it adds `chainId` value to the hash to prevent this",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/863505417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291694",
    "html_url": "https://github.com/ethereum/EIPs/issues/1056#issuecomment-997291694",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1056",
    "id": 997291694,
    "node_id": "IC_kwDOAq426M47cXau",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T22:10:49Z",
    "updated_at": "2021-12-18T22:10:49Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997291694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
