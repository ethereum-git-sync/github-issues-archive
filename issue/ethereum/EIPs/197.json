{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/197",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/197/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/197/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/197/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/197",
  "id": 203337790,
  "node_id": "MDU6SXNzdWUyMDMzMzc3OTA=",
  "number": 197,
  "title": "DRAFT: Precompiled contracts for pairing function check",
  "user": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2017-01-26T10:30:59Z",
  "updated_at": "2017-06-30T23:06:09Z",
  "closed_at": "2017-02-13T13:36:14Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "## Preamble\r\n<pre>\r\n  EIP: to be assigned\r\n  Title: Precompiled contracts for optimal ate pairing check\r\n         on the elliptic curve alt_bn128\r\n  Author: Vitalik Buterin &lt;vitalik@ethereum.org&gt;, Christian Reitwiessner &lt;chris@ethereum.org&gt;\r\n  Type: Standard Track\r\n  Category(*only required for Standard Track): Core\r\n  Status: Draft\r\n  Created: 2017-02-06\r\n</pre>\r\n\r\n## Simple Summary\r\n\r\nPrecompiled contracts for elliptic curve pairing operations are required in order to perform zkSNARK verification within the block gas limit.\r\n\r\n## Abstract\r\n\r\nThis EIP suggests to add precompiled contracts for a pairing function on a specific pairing-friendly elliptic curve. This can in turn be combined with https://github.com/ethereum/EIPs/issues/196 to verify zkSNARKs in Ethereum smart contracts. The general benefit of zkSNARKs for Ethereum is that it will increase the privacy for users (because of the Zero-Knowledge property) and might also be a scalability solution (because of the succinctness and efficient verifiability property).\r\n\r\n## Motivation\r\n\r\nCurrent smart contract executions on Ethereum are fully transparent, which makes them unsuitable for several use-cases that involve private information like the location, identity or history of past transactions. The technology of zkSNARKs could be a solution to this problem. While the Ethereum Virtual Machine can make use of zkSNARKs in theory, they are currently too expensive\r\nto fit the block gas limit. Because of that, this EIP proposes to specify certain parameters for some elementary primitives that enable zkSNARKs so that they can be implemented more efficiently and the gas cost be reduced.\r\n\r\nNote that fixing these parameters will in no way limit the use-cases for zkSNARKs, it will even allow for incorporating some advances in zkSNARK research without the need for a further hard fork.\r\n\r\nPairing functions can be used to perform a limited form of multiplicatively homomorphic operations, which are necessary for current zkSNARKs. This precompile can be used to run such computations within the block gas limit. This precompiled contract only specifies a certain check, and not an evaluation of a pairing function. The reason is that the codomain of a pairing function is a rather complex field which could provide encoding problems and all known uses of pairing function in zkSNARKs only require the specified check.\r\n\r\n## Specification\r\n\r\nAdd a precompiled contracts for a bilinear function on groups on the elliptic curve \"alt_bn128\". We will define the precompiled contract in terms of a discrete logarithm. The discrete logarithm is of course assumed to be hard to compute, but we will give an equivalent specification that makes use of elliptic curve pairing functions which can be efficiently computed below.\r\n\r\nAddress: 0x8\r\n\r\nFor a cyclic group `G` (written additively) of prime order q let `log_P: G -> F_q` be the discrete logarithm on this group with respect to a generator `P`, i.e. `log_P(x)` is the integer `n` such that `n * P = x`.\r\n\r\nThe precompiled contract is defined as follows, where the two groups `G_1` and `G_2` and their generators `P_1` and `P_2` are defined below:\r\n\r\n```\r\nInput: (a1, b1, a2, b2, ..., ak, bk) from (G_1 x G_2)^k\r\nOutput: If the length of the input is incorrect or any of the inputs are not elements of\r\n        the respective group or are not encoded correctly, the call fails.\r\n        Otherwise, return one if\r\n        log_P1(a1) * log_P2(b1) + ... + log_P1(ak) * log_P2(bk) = 0\r\n        and zero else.\r\n```\r\n\r\n### Definition of the groups\r\n\r\nThe groups `G_1` and `G_1` are cyclic groups on the elliptic curve `alt_bn128` defined by the curve equation\r\n`Y^2 = X^3 + 3`.\r\n\r\nThe group `G_1` is a cyclic group of prime order on the above curve over the field `F_p` with `p = 21888242871839275222246405745257275088696311157297823662689037894645226208583` with generator `P1 = (1, 2)`.\r\n\r\nThe group `G_2` is a cyclic group of prime order in the same elliptic curve over a different field `F_p^2 = F_p[X] / (X^2 + 1)` (p is the same as above) with generator\r\n```\r\nP2 = (\r\n  11559732032986387107991004021392285783925812861821192530917403151452391805634 * i +\r\n  10857046999023057135944570762232829481370756359578518086990519993285655852781,\r\n  4082367875863433681332203403145435568316851327593401208105741076214120093531 * i +\r\n  8495653923123431417604973247489272438418190587263600148770280649306958101930\r\n)\r\n```\r\n\r\n\r\n### Encoding\r\n\r\nElements of `F_p` are encoded as 32 byte big-endian numbers. An encoding value of `p` or larger is invalid.\r\n\r\nElements `a * i + b` of `F_p^2` are encoded as two elements of `F_p`, `(a, b)`.\r\n\r\nElliptic curve points are encoded as a Jacobian pair `(X, Y)` where the point at infinity is encoded as `(0, 0)`.\r\n\r\nNote that the number `k` is derived from the input length.\r\n\r\nThe length of the returned data is always exactly 32 bytes and encoded as a 32 byte big-endian number. \r\n\r\n### Gas costs\r\n\r\nTo be determined. \r\n\r\n## Rationale\r\n\r\nThe specific curve `alt_bn128` was chosen because it is particularly well-suited for zkSNARKs, or, more specifically their verification building block of pairing functions. Furthermore, by choosing this curve, we can use synergy effects with ZCash and re-use some of their components and artifacts.\r\n\r\nThe feature of adding curve and field parameters to the inputs was considered but ultimately rejected since it complicates the specification: The gas costs are much harder to determine and it would be possible to call the contracts on something which is not an actual elliptic curve or does not admit an efficient pairing implementation.\r\n\r\nA non-compact point encoding was chosen since it still allows to perform some operations in the smart contract itself (inclusion of the full y coordinate) and two encoded points can be compared for equality (no third projective coordinate).\r\n\r\nThe encoding of field elements in `F_p^2` was chosen in this order to be in line with the big endian encoding of the elements themselves.\r\n\r\n## Backwards Compatibility\r\n\r\nAs with the introduction of any precompiled contract, contracts that already use the given addresses will change their semantics. Because of that, the addresses are taken from the \"reserved range\" below 256.\r\n\r\n## Test Cases\r\n\r\nTo be written.\r\n\r\n## Implementation\r\n\r\nThe precompiled contract can be implemented using elliptic curve pairing functions, more specifically, an optimal ate pairing on the alt_bn128 curve, which can be implemented efficiently. In order to see that, first note that a pairing function `e: G_1 x G_2 -> G_T` fulfills the following properties (`G_1` and `G_2` are written additively, `G_T` is written multiplicatively):\r\n\r\n(1) `e(m * P1, n * P2) = e(P1, P2)^(m * n)`\r\n(2) `e` is non-degenerate\r\n\r\nNow observe that\r\n```\r\nlog_P1(a1) * log_P2(b1) + ... + log_P1(ak) * log_P2(bk) = 0\r\n```\r\nif and only if\r\n```\r\ne(P1, P2)^(log_P1(a1) * log_P2(b1) + ... + log_P1(ak) * log_P2(bk)) = e(P1, P2)\r\n```\r\n\r\nFurthermore, the left hand side of this equation is equal to\r\n```\r\ne(log_P1(a1) * P1, log_P2(b1) * P2) * ... * e(log_P1(ak) * P1, log_P2(bk) * P2)\r\n= e(a1, b1) * ... * e(ak, bk)\r\n```\r\n\r\nAnd thus, the precompiled contract can be implemented by verifying that\r\n`e(a1, b1) * ... * e(ak, bk) = e(P1, P2)`\r\n\r\nImplementations are available here:\r\n\r\n - [libsnark](https://github.com/scipr-lab/libsnark/blob/master/src/algebra/curves/alt_bn128/alt_bn128_g1.hpp) (C++)\r\n - [bn](https://github.com/zcash/bn/blob/master/src/groups/mod.rs) (Rust)\r\n - [Python](https://github.com/ethereum/research/blob/master/zksnark/bn128_pairing.py)",
  "closed_by": {
    "login": "chriseth",
    "id": 9073706,
    "node_id": "MDQ6VXNlcjkwNzM3MDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chriseth",
    "html_url": "https://github.com/chriseth",
    "followers_url": "https://api.github.com/users/chriseth/followers",
    "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
    "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
    "organizations_url": "https://api.github.com/users/chriseth/orgs",
    "repos_url": "https://api.github.com/users/chriseth/repos",
    "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chriseth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/197/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/197/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/275566057",
    "html_url": "https://github.com/ethereum/EIPs/issues/197#issuecomment-275566057",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/197",
    "id": 275566057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTU2NjA1Nw==",
    "user": {
      "login": "vbuterin",
      "id": 2230894,
      "node_id": "MDQ6VXNlcjIyMzA4OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2230894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vbuterin",
      "html_url": "https://github.com/vbuterin",
      "followers_url": "https://api.github.com/users/vbuterin/followers",
      "following_url": "https://api.github.com/users/vbuterin/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbuterin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vbuterin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbuterin/subscriptions",
      "organizations_url": "https://api.github.com/users/vbuterin/orgs",
      "repos_url": "https://api.github.com/users/vbuterin/repos",
      "events_url": "https://api.github.com/users/vbuterin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vbuterin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-27T01:26:41Z",
    "updated_at": "2017-02-06T08:06:29Z",
    "author_association": "MEMBER",
    "body": "For the P2 generator, it would be useful to specify the modulus polynomial (ie. P such that P(x) = 0 in the field). If it's just x^2 + 1 = 0, then using i in place of x could help with clarity.\r\n\r\nAlso,  we should specify edge case input behavior. I would recommend:\r\n\r\n* If CALLDATASIZE % 192 != 0, then throw\r\n* If any of the points provided is not on the curve, then throw\r\n* If any of the 32-byte values provided are equal to or greater than p (the field modulus), then throw (ie. k * p + r CANNOT be used as an alias for r)\r\n\r\nAnother way to define the precompile would be to say: let DLOG be the discrete log modulo any point (in the G2 case, any point in the correct subgroup). Returns 1 iff DLOG(a1) * DLOG(b1) + DLOG(a2) * DLOG(b2) + ... = 0 (mod n). The fact that optimal ate pairings are used to do this is \"just\" an implementation detail.\r\n\r\nAdded 2017.02.06:\r\n\r\n* If any of the points in G2 provided does not satisfy p * G = O (ie. is not on the order-n subgroup), then throw",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/275566057/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/277628873",
    "html_url": "https://github.com/ethereum/EIPs/issues/197#issuecomment-277628873",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/197",
    "id": 277628873,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzYyODg3Mw==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-06T09:33:38Z",
    "updated_at": "2017-02-06T09:33:38Z",
    "author_association": "MEMBER",
    "body": "Updated the description. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/277628873/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/279394186",
    "html_url": "https://github.com/ethereum/EIPs/issues/197#issuecomment-279394186",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/197",
    "id": 279394186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTM5NDE4Ng==",
    "user": {
      "login": "chriseth",
      "id": 9073706,
      "node_id": "MDQ6VXNlcjkwNzM3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9073706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chriseth",
      "html_url": "https://github.com/chriseth",
      "followers_url": "https://api.github.com/users/chriseth/followers",
      "following_url": "https://api.github.com/users/chriseth/following{/other_user}",
      "gists_url": "https://api.github.com/users/chriseth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chriseth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chriseth/subscriptions",
      "organizations_url": "https://api.github.com/users/chriseth/orgs",
      "repos_url": "https://api.github.com/users/chriseth/repos",
      "events_url": "https://api.github.com/users/chriseth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chriseth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-13T13:36:14Z",
    "updated_at": "2017-02-13T13:36:14Z",
    "author_association": "MEMBER",
    "body": "Replaced by https://github.com/ethereum/EIPs/pull/212",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/279394186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/312390966",
    "html_url": "https://github.com/ethereum/EIPs/issues/197#issuecomment-312390966",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/197",
    "id": 312390966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjM5MDk2Ng==",
    "user": {
      "login": "eddieoz",
      "id": 3277320,
      "node_id": "MDQ6VXNlcjMyNzczMjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3277320?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eddieoz",
      "html_url": "https://github.com/eddieoz",
      "followers_url": "https://api.github.com/users/eddieoz/followers",
      "following_url": "https://api.github.com/users/eddieoz/following{/other_user}",
      "gists_url": "https://api.github.com/users/eddieoz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eddieoz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eddieoz/subscriptions",
      "organizations_url": "https://api.github.com/users/eddieoz/orgs",
      "repos_url": "https://api.github.com/users/eddieoz/repos",
      "events_url": "https://api.github.com/users/eddieoz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eddieoz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-30T23:06:09Z",
    "updated_at": "2017-06-30T23:06:09Z",
    "author_association": "NONE",
    "body": "At the section **Definition of the groups**, would the sentence be \"The groups G_1 and G_**2** [...]\"?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/312390966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
