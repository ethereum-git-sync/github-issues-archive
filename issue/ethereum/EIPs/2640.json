{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2640",
  "id": 616235129,
  "node_id": "MDU6SXNzdWU2MTYyMzUxMjk=",
  "number": 2640,
  "title": "ProgPoW working draft",
  "user": {
    "login": "gcolvin",
    "id": 16827129,
    "node_id": "MDQ6VXNlcjE2ODI3MTI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gcolvin",
    "html_url": "https://github.com/gcolvin",
    "followers_url": "https://api.github.com/users/gcolvin/followers",
    "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
    "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
    "organizations_url": "https://api.github.com/users/gcolvin/orgs",
    "repos_url": "https://api.github.com/users/gcolvin/repos",
    "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gcolvin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "AndreaLanfranchi",
    "id": 15280851,
    "node_id": "MDQ6VXNlcjE1MjgwODUx",
    "avatar_url": "https://avatars.githubusercontent.com/u/15280851?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AndreaLanfranchi",
    "html_url": "https://github.com/AndreaLanfranchi",
    "followers_url": "https://api.github.com/users/AndreaLanfranchi/followers",
    "following_url": "https://api.github.com/users/AndreaLanfranchi/following{/other_user}",
    "gists_url": "https://api.github.com/users/AndreaLanfranchi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AndreaLanfranchi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AndreaLanfranchi/subscriptions",
    "organizations_url": "https://api.github.com/users/AndreaLanfranchi/orgs",
    "repos_url": "https://api.github.com/users/AndreaLanfranchi/repos",
    "events_url": "https://api.github.com/users/AndreaLanfranchi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AndreaLanfranchi/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "AndreaLanfranchi",
      "id": 15280851,
      "node_id": "MDQ6VXNlcjE1MjgwODUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/15280851?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaLanfranchi",
      "html_url": "https://github.com/AndreaLanfranchi",
      "followers_url": "https://api.github.com/users/AndreaLanfranchi/followers",
      "following_url": "https://api.github.com/users/AndreaLanfranchi/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaLanfranchi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaLanfranchi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaLanfranchi/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaLanfranchi/orgs",
      "repos_url": "https://api.github.com/users/AndreaLanfranchi/repos",
      "events_url": "https://api.github.com/users/AndreaLanfranchi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaLanfranchi/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2020-05-11T22:43:46Z",
  "updated_at": "2021-11-21T03:11:23Z",
  "closed_at": "2021-11-21T03:11:23Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\neip: 1057\r\ntitle: ProgPoW, a Programmatic Proof-of-Work\r\nauthor: Greg Colvin <greg@colvin.org>, Andrea Lanfranchi (@AndreaLanfranchi), Michael Carter (@bitsbetrippin),  IfDefElse <ifdefelse@protonmail.com>\r\ndiscussions-to: https://ethereum-magicians.org/t/eip-progpow-a-programmatic-proof-of-work/272\r\nstatus: Accepted\r\ntype: Standards Track\r\ncategory: Core\r\ncreated: 2018-05-02\r\n---\r\n\r\n## Simple Summary\r\n\r\nA new Proof-of-Work algorithm to replace Ethash that utilizes almost all parts of commodity GPUs.\r\n\r\nWe **Do Not** recommend that this Proposal be deployed at this time.  Rather it is being offered in the spirit of [Ben DiFrancesco's compromise](https://ethereum-magicians.org/t/a-progpow-compromise-pre-proposal/4057) which for our purposes we state simply as,\r\n* This Proposal **is not** being proposed for deployment in any planned hardfork.\r\n* This Proposal should be fully implemented and tested across major clients.\r\n* Clients implementing this Proposal should be deployed and maintained on a testnet.\r\n\r\nThis leaves open the possibility and threat of future deployment.\r\n\r\n## Abstract\r\n\r\nProgPoW is a proof-of-work algorithm designed to close the efficiency gap available to specialized ASICs. It utilizes almost all parts of commodity hardware (GPUs), and comes pre-tuned for the most common hardware utilized in the Ethereum network.\r\n\r\nThis document presents an overview of the algorithm and examines what it means to be “ASIC-resistant.” Next, we compare existing PoW designs by analyzing how each algorithm executes in hardware. Finally, we present the detailed implementation by walking through the code.\r\n\r\n## Motivation\r\n\r\nEver since the first bitcoin mining ASIC was released, many new Proof of Work algorithms have been created with the intention of being “ASIC-resistant”. The goal of “ASIC-resistance” is to resist the centralization of PoW mining power such that these coins couldn’t be so easily manipulated by a few players.\r\n\r\nEthereum's approach is to incentivize a geographically-distributed community of miners with a low barrier to entry on commodity hardware.  As stated in the Yellow Paper:\r\n\r\n> 11.5. Mining Proof-of-Work. The mining proof-ofwork (PoW) exists as a cryptographically secure nonce that proves beyond reasonable doubt that a particular amount of computation has been expended in the determination of some token value n. It is utilised to enforce the blockchain security by giving meaning and credence to the notion of difficulty (and, by extension, total difficulty). However, since mining new blocks comes with an attached reward, the proof-of-work not only functions as a method of securing confidence that the blockchain will remain canonical into the future, but also as a wealth distribution mechanism.\r\n\r\n> For both reasons, there are two important goals of the proof-of-work function; firstly, it should be as accessible as possible to as many people as possible. The requirement of, or reward from, specialised and uncommon hardware should be minimised. This makes the distribution model as open as possible, and, ideally, makes the act of mining a simple swap from electricity to Ether at roughly the same rate for anyone around the world.\r\n\r\n> Secondly, it should not be possible to make super-linear profits, and especially not so with a high initial barrier. Such a mechanism allows a well-funded adversary to gain a troublesome amount of the network’s total mining power and as such gives them a super-linear reward (thus skewing distribution in their favour) as well as reducing the network security...\r\n\r\n> ... While ASICs exist for a proof-of-work function, both goals are\r\nplaced in jeopardy.\r\n\r\nIt is from these premises that Ethash was designed.\r\n\r\n> Two directions exist for ASIC resistance; firstly make it sequential memory-hard, i.e. engineer the function such that the determination of the nonce requires a lot of memory and bandwidth such that the memory cannot be used in parallel to discover multiple nonces simultaneously. The second is to make the type of computation it would need to do general-purpose; the meaning of “specialised hardware” for a general-purpose task set is, naturally, general purpose hardware and as such commodity desktop computers are likely to be pretty close to “specialised hardware” for the task. For Ethereum 1.0 we have chosen the first path.\r\n\r\n5 years of experience with the Ethereum blockchain have demonstrated the success of our approach.  This success cannot be taken for granted.\r\n* 11 years of experience with PoW Blockchains have shown a centralization in hardware development, resulting in a [few companies](https://www.asicminervalue.com/) controlling the lifecycle of new hardware, limited distribution and multiple incidents of leverage & contention ((citations))\r\n* new ASICs for Ethash are providing higher efficiency than GPUs ((cite device specs))\r\n* the existing Ethereum network is now circa 40% [secured by E3 devices](https://www.overleaf.com/project/5e222c2cac8911000178b239).\r\n* new devices are coming online with ((cite even better specs))\r\n\r\nProgPow restores Ethash' ASIC-resistance by extending Etash with a GPU-specific approach to the second path.\r\n\r\n### ProgPoW Overview\r\nThe design goal of ProgPoW is to have the algorithm’s requirements match what is available on commodity GPUs:  If the algorithm were to be implemented on a custom ASIC there should be little opportunity for efficiency gains compared to a commodity GPU.\r\n\r\nThe main elements of the algorithm are:\r\n* Changes keccak_f1600 (with 64-bit words) to keccak_f800 (with 32-bit words) to reduce impact on total power\r\n* Increases mix state.\r\n* Adds a random sequence of math in the main loop.\r\n* Adds reads from a small, low-latency cache that supports random addresses.\r\n* Increases the DRAM read from 128 bytes to 256 bytes.\r\n* ((cite adjustments from 0.9.1 -> 0.9.2 -> 0.9.3 -> 0.9.4))\r\n\r\nThe random sequence changes every `PROGPOW_PERIOD` (about 2 to 12 minutes depending on the configured value).  When mining source code is generated for the random sequence and compiled on the host CPU.  The GPU will execute the compiled code where what math to perform and what mix state to use are already resolved.\r\n\r\nWhile a custom ASIC to implement this algorithm is still possible, the efficiency gains available are minimal.  The majority of a commodity GPU is required to support the above elements. The only optimizations available are:\r\n* Remove the graphics pipeline (displays, geometry engines, texturing, etc)\r\n* Remove floating point math\r\n* A few ISA tweaks, like instructions that exactly match the merge() function\r\n\r\nThese would result in minimal, roughly 1.1-1.2x, efficiency gains.  This is much less than the 2x for Ethash or 50x for Cryptonight.\r\n\r\n### Rationale for PoW on Commodity Hardware\r\nWith the growth of large mining pools, the control of hashing power has been delegated to the top few pools to provide a steadier economic return for small miners. While some have made the argument that large centralized pools defeats the purpose of “ASIC resistance,” it’s important to note that ASIC based coins are even more centralized for several reasons.\r\n\r\n1. No natural distribution: There isn’t an economic purpose for ultra-specialized hardware outside of mining and thus no reason for most people to have it.\r\n2. No reserve group: Thus, there’s no reserve pool of hardware or reserve pool of interested parties to jump in when coin price is volatile and attractive for manipulation.\r\n3. High barrier to entry: Initial miners are those rich enough to invest capital and ecological resources on the unknown experiment a new coin may be. Thus, initial coin distribution through mining will be very limited causing centralized economic bias.\r\n4. Delegated centralization vs implementation centralization: While pool centralization is delegated, hardware monoculture is not: only the limiter buyers of this hardware can participate so there isn’t even the possibility of divesting control on short notice.\r\n5. No obvious decentralization of control even with decentralized mining: Once large custom ASIC makers get into the game, designing back-doored hardware is trivial. ASIC makers have no incentive to be transparent or fair in market participation.\r\n\r\nWhile the goal of “ASIC resistance” is valuable, the entire concept of “ASIC resistance” is a bit of a fallacy.  CPUs and GPUs are themselves ASICs.  Any algorithm that can run on a commodity ASIC (a CPU or GPU) by definition can have a customized ASIC created for it with slightly less functionality. Some algorithms are intentionally made to be  “ASIC friendly” - where an ASIC implementation is drastically more efficient than the same algorithm running on general purpose hardware. The protection that this offers when the coin is unknown also makes it an attractive target for a dedicate mining ASIC company as soon as it becomes useful.\r\n\r\nTherefore, ASIC resistance is: the efficiency difference of specialized hardware versus hardware that has a wider adoption and applicability.  A smaller efficiency difference between custom vs general hardware mean higher resistance and a better algorithm. This efficiency difference is the proper metric to use when comparing the quality of PoW algorithms.  Efficiency could mean absolute performance, performance per watt, or performance per dollar - they are all highly correlated.  If a single entity creates and controls an ASIC that is drastically more efficient, they can gain 51% of the network hashrate and possibly stage an attack.\r\n\r\n### Review of Existing PoW Algorithms\r\n\r\n#### SHA256\r\n* Potential ASIC efficiency gain ~ 1000X\r\n\r\nThe SHA algorithm is a sequence of simple math operations - additions, logical ops, and rotates.\r\n\r\nTo process a single op on a CPU or GPU requires fetching and decoding an instruction, reading data from a register file, executing the instruction, and then writing the result back to a register file.  This takes significant time and power.\r\n\r\nA single op implemented in an ASIC takes a handful of transistors and wires.  This means every individual op takes negligible power, area, or time.  A hashing core is built by laying out the sequence of required ops.\r\n\r\nThe hashing core can execute the required sequence of ops in much less time, and using less power or area, than doing the same sequence on a CPU or GPU.  A bitcoin ASIC consists of a number of identical hashing cores and some minimal off-chip communication.\r\n\r\n#### Scrypt and NeoScrypt\r\n* Potential ASIC efficiency gain ~ 1000X\r\n\r\nScrypt and NeoScrypt are similar to SHA in the arithmetic and bitwise operations used. Unfortunately, popular coins such as Litecoin only use a scratchpad size between 32kb and 128kb for their PoW mining algorithm. This scratch pad is small enough to trivially fit on an ASIC next to the math core. The implementation of the math core would be very similar to SHA, with similar efficiency gains.\r\n\r\n#### X11 and X16R\r\n* Potential ASIC efficiency gain ~ 1000X\r\n\r\nX11 (and similar X##) require an ASIC that has 11 unique hashing cores pipelined in a fixed sequence.  Each individual hashing core would have similar efficiency to an individual SHA core, so the overall design will have the same efficiency gains.\r\n\r\nX16R requires the multiple hashing cores to interact through a simple sequencing state machine. Each individual core will have similar efficiency gains and the sequencing logic will take minimal power, area, or time.\r\n\r\nThe Baikal BK-X is an existing ASIC with multiple hashing cores and a programmable sequencer.  It has been upgraded to enable new algorithms that sequence the hashes in different orders.\r\n\r\n#### Equihash\r\n* Potential ASIC efficiency gain ~ 100X\r\n\r\nThe ~150mb of state is large but possible on an ASIC. The binning, sorting, and comparing of bit strings could be implemented on an ASIC at extremely high speed.\r\n\r\n#### Cuckoo Cycle\r\n* Potential ASIC efficiency gain ~ 100X\r\n\r\nThe amount of state required on-chip is not clear as there are Time/Memory Tradeoff attacks. A specialized graph traversal core would have similar efficiency gains to a SHA compute core.\r\n\r\n#### CryptoNight\r\n* Potential ASIC efficiency gain ~ 50X\r\n\r\nCompared to Scrypt, CryptoNight does much less compute and requires a full 2mb of scratch pad (there is no known Time/Memory Tradeoff attack).  The large scratch pad will dominate the ASIC implementation and limit the number of hashing cores, limiting the absolute performance of the ASIC.  An ASIC will consist almost entirely of just on-die SRAM.\r\n\r\n#### Ethash\r\n* Potential ASIC efficiency gain ~ 2X\r\n\r\nEthash requires external memory due to the large size of the DAG.  However that is all that it requires - there is minimal compute that is done on the result loaded from memory.  As a result a custom ASIC could remove most of the complexity, and power, of a GPU and be just a memory interface connected to a small compute engine.\r\n\r\n## Specification\r\n\r\nThe DAG is generated exactly as in Ethash.  All the parameters (ephoch length, DAG size, etc) are unchanged.  See the original [Ethash](https://github.com/ethereum/wiki/wiki/Ethash) spec for details on generating the DAG.\r\n\r\nProgPoW can be tuned using the following parameters.  The proposed settings have been tuned for a range of existing, commodity GPUs:\r\n* `PROGPOW_PERIOD`: Number of blocks before changing the random program\r\n* `PROGPOW_LANES`: The number of parallel lanes that coordinate to calculate a single hash instance\r\n* `PROGPOW_REGS`: The register file usage size\r\n* `PROGPOW_DAG_LOADS`: Number of uint32 loads from the DAG per lane\r\n* `PROGPOW_CACHE_BYTES`: The size of the cache\r\n* `PROGPOW_CNT_DAG`: The number of DAG accesses, defined as the outer loop of the algorithm (64 is the same as ethash)\r\n* `PROGPOW_CNT_CACHE`: The number of cache accesses per loop\r\n* `PROGPOW_CNT_MATH`: The number of math operations per loop\r\n\r\nThe value of these parameters has been tweaked between version 0.9.2 (live on the gangnum testnet) and 0.9.3 (proposed for Ethereum adoption).  See [this medium post](https://medium.com/@ifdefelse/progpow-progress-da5bb31a651b) for details.\r\n\r\n| Parameter             | 0.9.2     | 0.9.3     |\r\n|-----------------------|-----------|-----------|\r\n| `PROGPOW_PERIOD`      | `50`      | `10`      |\r\n| `PROGPOW_LANES`       | `16`      | `16`      |\r\n| `PROGPOW_REGS`        | `32`      | `32`      |\r\n| `PROGPOW_DAG_LOADS`   | `4`       | `4`       |\r\n| `PROGPOW_CACHE_BYTES` | `16x1024` | `16x1024` |\r\n| `PROGPOW_CNT_DAG`     | `64`      | `64`      |\r\n| `PROGPOW_CNT_CACHE`   | `12`      | `11`      |\r\n| `PROGPOW_CNT_MATH`    | `20`      | `18`      |\r\n\r\n\r\nThe random program changes every `PROGPOW_PERIOD` blocks  to ensure the hardware executing the algorithm is fully programmable.  If the program only changed every DAG epoch (roughly 5 days) certain miners could have time to develop hand-optimized versions of the random sequence, giving them an undue advantage.\r\n\r\nSample code is written in C++, this should be kept in mind when evaluating the code in the specification.\r\n\r\nAll numerics are computed using unsigned 32 bit integers.  Any overflows are trimmed off before proceeding to the next computation.  Languages that use numerics not fixed to bit lengths (such as Python and JavaScript) or that only use signed integers (such as Java) will need to keep their languages' quirks in mind.  The extensive use of 32 bit data values aligns with modern GPUs internal data architectures.\r\n\r\nProgPoW uses a 32-bit variant of **FNV1a** for merging data. The existing Ethash uses a similar variant of FNV1 for merging, but FNV1a provides better distribution properties.\r\n\r\nTest vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#fnv1a).\r\n\r\n```cpp\r\nconst uint32_t FNV_PRIME = 0x1000193;\r\nconst uint32_t FNV_OFFSET_BASIS = 0x811c9dc5;\r\n\r\nuint32_t fnv1a(uint32_t h, uint32_t d)\r\n{\r\n    return (h ^ d) * FNV_PRIME;\r\n}\r\n```\r\n\r\nProgPow uses [KISS99](https://en.wikipedia.org/wiki/KISS_(algorithm)) for random number generation. This is the simplest (fewest instruction) random generator that passes the TestU01 statistical test suite.  A more complex random number generator like Mersenne Twister can be efficiently implemented on a specialized ASIC, providing an opportunity for efficiency gains.\r\n\r\nTest vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#kiss99).\r\n\r\n```cpp\r\ntypedef struct {\r\n    uint32_t z, w, jsr, jcong;\r\n} kiss99_t;\r\n\r\n// KISS99 is simple, fast, and passes the TestU01 suite\r\n// https://en.wikipedia.org/wiki/KISS_(algorithm)\r\n// http://www.cse.yorku.ca/~oz/marsaglia-rng.html\r\nuint32_t kiss99(kiss99_t &st)\r\n{\r\n    st.z = 36969 * (st.z & 65535) + (st.z >> 16);\r\n    st.w = 18000 * (st.w & 65535) + (st.w >> 16);\r\n    uint32_t MWC = ((st.z << 16) + st.w);\r\n    st.jsr ^= (st.jsr << 17);\r\n    st.jsr ^= (st.jsr >> 13);\r\n    st.jsr ^= (st.jsr << 5);\r\n    st.jcong = 69069 * st.jcong + 1234567;\r\n    return ((MWC^st.jcong) + st.jsr);\r\n}\r\n```\r\n\r\nThe `fill_mix` function populates an array of `int32` values used by each lane in the hash calculations.\r\n\r\nTest vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#fill_mix).\r\n\r\n```cpp\r\nvoid fill_mix(\r\n    uint64_t hash_seed,\r\n    uint32_t lane_id,\r\n    uint32_t mix[PROGPOW_REGS]\r\n)\r\n{\r\n    // Use FNV to expand the per-warp seed to per-lane\r\n    // Use KISS to expand the per-lane seed to fill mix\r\n    kiss99_t st;\r\n    st.z = fnv1a(FNV_OFFSET_BASIS, seed);\r\n    st.w = fnv1a(st.z, seed >> 32);\r\n    st.jsr = fnv1a(st.w, lane_id);\r\n    st.jcong = fnv1a(st.jsr, lane_id);\r\n    for (int i = 0; i < PROGPOW_REGS; i++)\r\n            mix[i] = kiss99(st);\r\n}\r\n```\r\n\r\nLike Ethash Keccak is used to seed the sequence per-nonce and to produce the final result.  The keccak-f800 variant is used as the 32-bit word size matches the native word size of modern GPUs.  The implementation is a variant of SHAKE with width=800, bitrate=576, capacity=224, output=256, and no padding.  The result of keccak is treated as a 256-bit big-endian number - that is result byte 0 is the MSB of the value.\r\n\r\nAs with Ethash the input and output of the keccak function are fixed and relatively small.  This means only a single \"absorb\" and \"squeeze\" phase are required.  For a pseudo-code imenentation of the `keccak_f800_round` function see the `Round[b](A,RC)` function in the \"Pseudo-code description of the permutations\" section of the [official Keccak specs](https://keccak.team/keccak_specs_summary.html).\r\n\r\nTest vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#keccak_f800_progpow).\r\n\r\n```cpp\r\nhash32_t keccak_f800_progpow(hash32_t header, uint64_t seed, hash32_t digest)\r\n{\r\n    uint32_t st[25];\r\n\r\n    // Initialization\r\n    for (int i = 0; i < 25; i++)\r\n        st[i] = 0;\r\n\r\n    // Absorb phase for fixed 18 words of input\r\n    for (int i = 0; i < 8; i++)\r\n        st[i] = header.uint32s[i];\r\n    st[8] = seed;\r\n    st[9] = seed >> 32;\r\n    for (int i = 0; i < 8; i++)\r\n        st[10+i] = digest.uint32s[i];\r\n\r\n    // keccak_f800 call for the single absorb pass\r\n    for (int r = 0; r < 22; r++)\r\n        keccak_f800_round(st, r);\r\n\r\n    // Squeeze phase for fixed 8 words of output\r\n    hash32_t ret;\r\n    for (int i=0; i<8; i++)\r\n        ret.uint32s[i] = st[i];\r\n\r\n    return ret;\r\n}\r\n```\r\n\r\nThe inner loop uses FNV and KISS99 to generate a random sequence from the `prog_seed`.  This random sequence determines which mix state is accessed and what random math is performed.\r\n\r\nSince the `prog_seed` changes only once per `PROGPOW_PERIOD` it is expected that while mining `progPowLoop` will be evaluated on the CPU to generate source code for that period's sequence.  The source code will be compiled on the CPU before running on the GPU.  \r\n\r\nTest vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#progpowinit).\r\n\r\n```cpp\r\nkiss99_t progPowInit(uint64_t prog_seed, int mix_seq_dst[PROGPOW_REGS], int mix_seq_src[PROGPOW_REGS])\r\n{\r\n    kiss99_t prog_rnd;\r\n    prog_rnd.z = fnv1a(FNV_OFFSET_BASIS, prog_seed);\r\n    prog_rnd.w = fnv1a(prog_rnd.z, prog_seed >> 32);\r\n    prog_rnd.jsr = fnv1a(prog_rnd.w, prog_seed);\r\n    prog_rnd.jcong = fnv1a(prog_rnd.jsr, prog_seed >> 32);\r\n    // Create a random sequence of mix destinations for merge() and mix sources for cache reads\r\n    // guarantees every destination merged once\r\n    // guarantees no duplicate cache reads, which could be optimized away\r\n    // Uses Fisher-Yates shuffle\r\n    for (int i = 0; i < PROGPOW_REGS; i++)\r\n    {\r\n        mix_seq_dst[i] = i;\r\n        mix_seq_src[i] = i;\r\n    }\r\n    for (int i = PROGPOW_REGS - 1; i > 0; i--)\r\n    {\r\n        int j;\r\n        j = kiss99(prog_rnd) % (i + 1);\r\n        swap(mix_seq_dst[i], mix_seq_dst[j]);\r\n        j = kiss99(prog_rnd) % (i + 1);\r\n        swap(mix_seq_src[i], mix_seq_src[j]);\r\n    }\r\n    return prog_rnd;\r\n}\r\n```\r\n\r\nThe math operations that merges values into the mix data are ones chosen to maintain entropy.\r\n\r\nTest vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#math).\r\n\r\n```cpp\r\n// Merge new data from b into the value in a\r\n// Assuming A has high entropy only do ops that retain entropy\r\n// even if B is low entropy\r\n// (IE don't do A&B)\r\nuint32_t merge(uint32_t a, uint32_t b, uint32_t r)\r\n{\r\n    switch (r % 4)\r\n    {\r\n    case 0: return (a * 33) + b;\r\n    case 1: return (a ^ b) * 33;\r\n    // prevent rotate by 0 which is a NOP\r\n    case 2: return ROTL32(a, ((r >> 16) % 31) + 1) ^ b;\r\n    case 3: return ROTR32(a, ((r >> 16) % 31) + 1) ^ b;\r\n    }\r\n}\r\n```\r\n\r\nThe math operations chosen for the random math are ones that are easy to implement in CUDA and OpenCL, the two main programming languages for commodity GPUs. The [mul_hi](https://www.khronos.org/registry/OpenCL/sdk/1.1/docs/man/xhtml/mul_hi.html), [min](https://www.khronos.org/registry/OpenCL/sdk/2.0/docs/man/xhtml/integerMax.html), [clz](https://www.khronos.org/registry/OpenCL/sdk/1.1/docs/man/xhtml/clz.html), and [popcount](https://www.khronos.org/registry/OpenCL/sdk/2.0/docs/man/xhtml/popcount.html) functions match the corresponding OpenCL functions.  ROTL32 matches the OpenCL [rotate](https://www.khronos.org/registry/OpenCL/sdk/1.0/docs/man/xhtml/rotate.html) function.  ROTR32 is rotate right, which is equivalent to `rotate(i, 32-v)`.\r\n\r\nTest vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#math).\r\n\r\n```cpp\r\n// Random math between two input values\r\nuint32_t math(uint32_t a, uint32_t b, uint32_t r)\r\n{\r\n    switch (r % 11)\r\n    {\r\n    case 0: return a + b;\r\n    case 1: return a * b;\r\n    case 2: return mul_hi(a, b);\r\n    case 3: return min(a, b);\r\n    case 4: return ROTL32(a, b);\r\n    case 5: return ROTR32(a, b);\r\n    case 6: return a & b;\r\n    case 7: return a | b;\r\n    case 8: return a ^ b;\r\n    case 9: return clz(a) + clz(b);\r\n    case 10: return popcount(a) + popcount(b);\r\n    }\r\n}\r\n```\r\n\r\n\r\nThe flow of the inner loop is:\r\n* Lane `(loop % LANES)` is chosen as the leader for that loop iteration\r\n* The leader's `mix[0]` value modulo the number of 256-byte DAG entries is is used to select where to read from the full DAG\r\n* Each lane reads `DAG_LOADS` sequential words, using `(lane ^ loop) % LANES` as the starting offset within the entry.\r\n* The random sequence of math and cache accesses is performed\r\n* The DAG data read at the start of the loop is merged at the end of the loop\r\n\r\n`prog_seed` and `loop` come from the outer loop, corresponding to the current program seed (which is block_number/PROGPOW_PERIOD) and the loop iteration number.  `mix` is the state array, initially filled by `fill_mix`. `dag` is the bytes of the Ethash DAG grouped into 32 bit unsigned ints in litte-endian format.  On little-endian architectures this is just a normal int32 pointer to the existing DAG.\r\n\r\n`DAG_BYTES` is set to the number of bytes in the current DAG, which is generated identically to the existing Ethash algorithm.  \r\n\r\nTest vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#progpowloop).\r\n\r\n```cpp\r\nvoid progPowLoop(\r\n    const uint64_t prog_seed,\r\n    const uint32_t loop,\r\n    uint32_t mix[PROGPOW_LANES][PROGPOW_REGS],\r\n    const uint32_t *dag)\r\n{\r\n    // dag_entry holds the 256 bytes of data loaded from the DAG\r\n    uint32_t dag_entry[PROGPOW_LANES][PROGPOW_DAG_LOADS];\r\n    // On each loop iteration rotate which lane is the source of the DAG address.\r\n    // The source lane's mix[0] value is used to ensure the last loop's DAG data feeds into this loop's address.\r\n    // dag_addr_base is which 256-byte entry within the DAG will be accessed\r\n    uint32_t dag_addr_base = mix[loop%PROGPOW_LANES][0] %\r\n        (DAG_BYTES / (PROGPOW_LANES*PROGPOW_DAG_LOADS*sizeof(uint32_t)));\r\n    for (int l = 0; l < PROGPOW_LANES; l++)\r\n    {\r\n        // Lanes access DAG_LOADS sequential words from the dag entry\r\n        // Shuffle which portion of the entry each lane accesses each iteration by XORing lane and loop.\r\n        // This prevents multi-chip ASICs from each storing just a portion of the DAG\r\n        size_t dag_addr_lane = dag_addr_base * PROGPOW_LANES + (l ^ loop) % PROGPOW_LANES;\r\n        for (int i = 0; i < PROGPOW_DAG_LOADS; i++)\r\n            dag_entry[l][i] = dag[dag_addr_lane * PROGPOW_DAG_LOADS + i];\r\n    }\r\n\r\n    // Initialize the program seed and sequences\r\n    // When mining these are evaluated on the CPU and compiled away\r\n    int mix_seq_dst[PROGPOW_REGS];\r\n    int mix_seq_src[PROGPOW_REGS];\r\n    int mix_seq_dst_cnt = 0;\r\n    int mix_seq_src_cnt = 0;\r\n    kiss99_t prog_rnd = progPowInit(prog_seed, mix_seq_dst, mix_seq_src);\r\n\r\n    int max_i = max(PROGPOW_CNT_CACHE, PROGPOW_CNT_MATH);\r\n    for (int i = 0; i < max_i; i++)\r\n    {\r\n        if (i < PROGPOW_CNT_CACHE)\r\n        {\r\n            // Cached memory access\r\n            // lanes access random 32-bit locations within the first portion of the DAG\r\n            int src = mix_seq_src[(mix_seq_src_cnt++)%PROGPOW_REGS];\r\n            int dst = mix_seq_dst[(mix_seq_dst_cnt++)%PROGPOW_REGS];\r\n            int sel = kiss99(prog_rnd);\r\n            for (int l = 0; l < PROGPOW_LANES; l++)\r\n            {\r\n                uint32_t offset = mix[l][src] % (PROGPOW_CACHE_BYTES/sizeof(uint32_t));\r\n                mix[l][dst] = merge(mix[l][dst], dag[offset], sel);\r\n            }\r\n        }\r\n        if (i < PROGPOW_CNT_MATH)\r\n        {\r\n            // Random Math\r\n            // Generate 2 unique sources\r\n            int src_rnd = kiss99(prog_rnd) % (PROGPOW_REGS * (PROGPOW_REGS-1));\r\n            int src1 = src_rnd % PROGPOW_REGS; // 0 <= src1 < PROGPOW_REGS\r\n            int src2 = src_rnd / PROGPOW_REGS; // 0 <= src2 < PROGPOW_REGS - 1\r\n            if (src2 >= src1) ++src2; // src2 is now any reg other than src1\r\n            int sel1 = kiss99(prog_rnd);\r\n            int dst  = mix_seq_dst[(mix_seq_dst_cnt++)%PROGPOW_REGS];\r\n            int sel2 = kiss99(prog_rnd);\r\n            for (int l = 0; l < PROGPOW_LANES; l++)\r\n            {\r\n                uint32_t data = math(mix[l][src1], mix[l][src2], sel1);\r\n                mix[l][dst] = merge(mix[l][dst], data, sel2);\r\n            }\r\n        }\r\n    }\r\n    // Consume the global load data at the very end of the loop to allow full latency hiding\r\n    // Always merge into mix[0] to feed the offset calculation\r\n    for (int i = 0; i < PROGPOW_DAG_LOADS; i++)\r\n    {\r\n        int dst = (i==0) ? 0 : mix_seq_dst[(mix_seq_dst_cnt++)%PROGPOW_REGS];\r\n        int sel = kiss99(prog_rnd);\r\n        for (int l = 0; l < PROGPOW_LANES; l++)\r\n            mix[l][dst] = merge(mix[l][dst], dag_entry[l][i], sel);\r\n    }\r\n}\r\n```\r\n\r\nThe flow of the overall algorithm is:\r\n* A keccak hash of the header + nonce to create a seed\r\n* Use the seed to generate initial mix data\r\n* Loop multiple times, each time hashing random loads and random math into the mix data\r\n* Hash all the mix data into a single 256-bit value\r\n* A final keccak hash is computed\r\n* When mining this final value is compared against a `hash32_t` target\r\n\r\n```cpp\r\nhash32_t progPowHash(\r\n    const uint64_t prog_seed, // value is (block_number/PROGPOW_PERIOD)\r\n    const uint64_t nonce,\r\n    const hash32_t header,\r\n    const uint32_t *dag // gigabyte DAG located in framebuffer - the first portion gets cached\r\n)\r\n{\r\n    uint32_t mix[PROGPOW_LANES][PROGPOW_REGS];\r\n    hash32_t digest;\r\n    for (int i = 0; i < 8; i++)\r\n        digest.uint32s[i] = 0;\r\n\r\n    // keccak(header..nonce)\r\n    hash32_t seed_256 = keccak_f800_progpow(header, nonce, digest);\r\n    // endian swap so byte 0 of the hash is the MSB of the value\r\n    uint64_t seed = bswap(seed_256[0]) << 32 | bswap(seed_256[1]);\r\n\r\n    // initialize mix for all lanes\r\n    for (int l = 0; l < PROGPOW_LANES; l++)\r\n        fill_mix(seed, l, mix[l]);\r\n\r\n    // execute the randomly generated inner loop\r\n    for (int i = 0; i < PROGPOW_CNT_DAG; i++)\r\n        progPowLoop(prog_seed, i, mix, dag);\r\n\r\n    // Reduce mix data to a per-lane 32-bit digest\r\n    uint32_t digest_lane[PROGPOW_LANES];\r\n    for (int l = 0; l < PROGPOW_LANES; l++)\r\n    {\r\n        digest_lane[l] = FNV_OFFSET_BASIS\r\n        for (int i = 0; i < PROGPOW_REGS; i++)\r\n            digest_lane[l] = fnv1a(digest_lane[l], mix[l][i]);\r\n    }\r\n    // Reduce all lanes to a single 256-bit digest\r\n    for (int i = 0; i < 8; i++)\r\n        digest.uint32s[i] = FNV_OFFSET_BASIS;\r\n    for (int l = 0; l < PROGPOW_LANES; l++)\r\n        digest.uint32s[l%8] = fnv1a(digest.uint32s[l%8], digest_lane[l])\r\n\r\n    // keccak(header .. keccak(header..nonce) .. digest);\r\n    keccak_f800_progpow(header, seed, digest);\r\n}\r\n```\r\n\r\n## Rationale\r\n\r\n((T.B.D.  Review audits))\r\n\r\nProgPoW utilizes almost all parts of a commodity GPU, excluding:\r\n\r\n* The graphics pipeline (displays, geometry engines, texturing, etc);\r\n* Floating point math.\r\n\r\nMaking use of either of these would have significant portability issues between commodity hardware vendors, and across programming languages.\r\n\r\nSince the GPU is almost fully utilized, there’s little opportunity  for specialized ASICs to gain efficiency. Removing both the graphics pipeline and floating point math could provide up to 1.2x gains in efficiency, compared to the 2x gains possible in Ethash, and 50x gains possible for CryptoNight.\r\n\r\n## Backwards Compatibility\r\n\r\nThis algorithm is not backwards compatible with the existing Ethash, and will require a fork for adoption. Furthermore, the network hashrate will halve since twice as much memory is loaded per hash.\r\n\r\n## Test Cases\r\n\r\n### progpow 0.9.2\r\nThe algorithm run on block 30,000 produces the following digest and result:\r\n```\r\nheader ffeeddccbbaa9988776655443322110000112233445566778899aabbccddeeff\r\nnonce 123456789abcdef0\r\n\r\ndigest: 11f19805c58ab46610ff9c719dcf0a5f18fa2f1605798eef770c47219274767d\r\nresult: 5b7ccd472dbefdd95b895cac8ece67ff0deb5a6bd2ecc6e162383d00c3728ece\r\n```\r\n\r\nAdditional test vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#progpowhash).\r\n### progpow 0.9.3\r\n[Machine-readable test vectors](https://github.com/ethereum/EIPs/blob/ad4e73f239d53d72a21cfd8fdc89dc81eb9d2688/assets/eip-1057/test-vectors-0.9.3.json)\r\n\r\nAdditional test vectors can be found [in the test vectors file](../assets/eip-1057/test-vectors.md#progpowhash).\r\n### progpow 0.9.4\r\n[Machine-readable test vectors](https://github.com/ethereum/EIPs/blob/ad4e73f239d53d72a21cfd8fdc89dc81eb9d2688/assets/eip-1057/test-vectors-0.9.4.json) ((T.B.D.))\r\n\r\n## Implementation\r\n\r\nWe **Do Not** recommend that this Proposal be deployed at this time.  Rather it is being offered in the spirit of [Ben DiFrancesco's compromise](https://ethereum-magicians.org/t/a-progpow-compromise-pre-proposal/4057) which for our purposes we state simply as,\r\n* This Proposal **is not** being proposed for deployment in any planned hardfork.\r\n* This Proposal should be fully implemented and tested across major clients.\r\n* Clients implementing this Proposal should be deployed and maintained on a testnet.\r\n\r\nThis leaves open the possibility and threat of future deployment.  Some of the authors are engaged in work to [track what devices are mining our network](https://www.overleaf.com/project/5e222c2cac8911000178b239).  These and other efforts can provide information relevant to possible deployment.\r\n\r\n### Clients\r\n\r\n|          | Languages  | 0.9.3 | 0.9.4\r\n---        | ---        | ---   | ---\r\nAleth      | C++        |       |\r\nBesu       | Java       | Ready |\r\nEthereumJ  | Java       | Ready | Developing\r\nEthereumJS | Javascript | Ready | Developing\r\nEtherwall  | C++        |       |\r\nGeth        | Go            | Ready | Developing\r\n_IfThenElse_ | C++        | Ready | Ready\r\nMana       | Elixer     |       |\r\nNethermind | C#         | Ready |\r\nOpenEtheum | Rust       | Ready  |\r\nTrinity    | Python     | Ready | Developing\r\n\r\n### Exchanges\r\n\r\n|          | Support    | 0.9.4 | 0.9.4\r\n---        | ---        | ---   | ---\r\nBiki       | Yes        | Ready |\r\nBilaxi     | Yes        | Ready |\r\nBinance    | Yes        | Ready |\r\nBitMart    | Yes        | Ready |\r\nBitZ       | Yes        | Ready |\r\nCoinbase   | Yes        | Ready |\r\nDCcoin     | Yes        | Ready |\r\nDigfinex   | Yes        | Ready |\r\nEtherflyer | Yes        | Ready |\r\nFlatbtc    | Yes        | Ready |\r\nFolgory    | Yes        | Ready |\r\nHitBTC     | Yes        | Ready |\r\nHotbit     | Yes        | Ready |\r\nLbank      | Yes        | Ready |\r\nMXC        | Yes        | Ready |\r\nNobi       | Yes        | Ready |\r\n\r\n### Pools\r\n\r\n|             | Support | 0.9.4 | 0.9.4\r\n---           | ---     | ---   | ---\r\n2Miners       | Yes     | Ready |\r\nantpool       | Yes     | Ready |\r\nbeepool       | Yes     | Ready |\r\nEthermine     | Yes     | Ready |\r\nF2Pool        | Yes     | Ready |\r\nfirepool      | Yes     | Ready |\r\ngpumine       | Yes     | Ready |\r\nhiveon        | Yes     | Ready |\r\nhuobipool     | Yes     | Ready |\r\nmatppool      | Yes     | Ready |\r\nminingpoolhub | Yes     | Ready |\r\nNoanopool     | Yes     | Ready |\r\npool.btc.com  | Yes     | Ready |\r\npoolin        | Yes     | Ready |\r\nSparkpool     | Yes     | Ready |\r\nSpiderpool    | Yes     | Ready |\r\nxnpopol       | Yes     | Ready |\r\n\r\n## License and Copyright\r\n\r\nThe ProgPoW algorithm and this specification are a new work.  Copyright and related rights are waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n\r\nThe reference ProgPoW mining implementation located at [ProgPOW](https://github.com/ifdefelse/ProgPOW) is a derivative of ethminer so retains the GPL license.",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2640/reactions",
    "total_count": 15,
    "+1": 7,
    "-1": 6,
    "laugh": 0,
    "hooray": 0,
    "confused": 2,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/627398171",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-627398171",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 627398171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzM5ODE3MQ==",
    "user": {
      "login": "rileyjt",
      "id": 10927048,
      "node_id": "MDQ6VXNlcjEwOTI3MDQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10927048?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rileyjt",
      "html_url": "https://github.com/rileyjt",
      "followers_url": "https://api.github.com/users/rileyjt/followers",
      "following_url": "https://api.github.com/users/rileyjt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rileyjt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rileyjt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rileyjt/subscriptions",
      "organizations_url": "https://api.github.com/users/rileyjt/orgs",
      "repos_url": "https://api.github.com/users/rileyjt/repos",
      "events_url": "https://api.github.com/users/rileyjt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rileyjt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T14:57:17Z",
    "updated_at": "2020-05-12T14:57:17Z",
    "author_association": "NONE",
    "body": "Please not again",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/627398171/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/627473619",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-627473619",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 627473619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzQ3MzYxOQ==",
    "user": {
      "login": "rheaplex",
      "id": 21746,
      "node_id": "MDQ6VXNlcjIxNzQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/21746?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rheaplex",
      "html_url": "https://github.com/rheaplex",
      "followers_url": "https://api.github.com/users/rheaplex/followers",
      "following_url": "https://api.github.com/users/rheaplex/following{/other_user}",
      "gists_url": "https://api.github.com/users/rheaplex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rheaplex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rheaplex/subscriptions",
      "organizations_url": "https://api.github.com/users/rheaplex/orgs",
      "repos_url": "https://api.github.com/users/rheaplex/repos",
      "events_url": "https://api.github.com/users/rheaplex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rheaplex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T17:07:45Z",
    "updated_at": "2020-05-12T17:07:45Z",
    "author_association": "NONE",
    "body": "Have you no shame?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/627473619/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/627615173",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-627615173",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 627615173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzYxNTE3Mw==",
    "user": {
      "login": "erkinalp",
      "id": 5833034,
      "node_id": "MDQ6VXNlcjU4MzMwMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5833034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erkinalp",
      "html_url": "https://github.com/erkinalp",
      "followers_url": "https://api.github.com/users/erkinalp/followers",
      "following_url": "https://api.github.com/users/erkinalp/following{/other_user}",
      "gists_url": "https://api.github.com/users/erkinalp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erkinalp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erkinalp/subscriptions",
      "organizations_url": "https://api.github.com/users/erkinalp/orgs",
      "repos_url": "https://api.github.com/users/erkinalp/repos",
      "events_url": "https://api.github.com/users/erkinalp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erkinalp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-12T21:45:09Z",
    "updated_at": "2020-05-12T21:46:12Z",
    "author_association": "NONE",
    "body": "I do not understand what is intended. Supplemental PoW (to Ethash) is already possible in terms of Turing-complete scripts, though it needs a high transaction fee (as intended). Any transaction cannot be added without executing the script attached.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/627615173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/627899463",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-627899463",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 627899463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzg5OTQ2Mw==",
    "user": {
      "login": "gspoosi",
      "id": 7415249,
      "node_id": "MDQ6VXNlcjc0MTUyNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7415249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gspoosi",
      "html_url": "https://github.com/gspoosi",
      "followers_url": "https://api.github.com/users/gspoosi/followers",
      "following_url": "https://api.github.com/users/gspoosi/following{/other_user}",
      "gists_url": "https://api.github.com/users/gspoosi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gspoosi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gspoosi/subscriptions",
      "organizations_url": "https://api.github.com/users/gspoosi/orgs",
      "repos_url": "https://api.github.com/users/gspoosi/repos",
      "events_url": "https://api.github.com/users/gspoosi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gspoosi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-13T10:37:05Z",
    "updated_at": "2020-05-13T10:37:05Z",
    "author_association": "NONE",
    "body": "I think I'm speaking for many. Please just stop - the EIP was rejected by the community.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/627899463/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/628212538",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-628212538",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 628212538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODIxMjUzOA==",
    "user": {
      "login": "tjayrush",
      "id": 5417918,
      "node_id": "MDQ6VXNlcjU0MTc5MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5417918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjayrush",
      "html_url": "https://github.com/tjayrush",
      "followers_url": "https://api.github.com/users/tjayrush/followers",
      "following_url": "https://api.github.com/users/tjayrush/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjayrush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjayrush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjayrush/subscriptions",
      "organizations_url": "https://api.github.com/users/tjayrush/orgs",
      "repos_url": "https://api.github.com/users/tjayrush/repos",
      "events_url": "https://api.github.com/users/tjayrush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjayrush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-13T19:56:36Z",
    "updated_at": "2020-05-13T19:56:36Z",
    "author_association": "NONE",
    "body": "I call on the core devs, in the next all core devs meeting, to officially table this EIP and rescind its accepted state. It's so......obvious at this point that this should go the way of the dodo bird.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/628212538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/628285021",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-628285021",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 628285021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODI4NTAyMQ==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-13T22:46:50Z",
    "updated_at": "2020-05-13T22:46:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gspoosi  There is no governance mechanism by which the community can accept or reject this other than what the clients choose to implement and the miners choose to run.  As a core dev I care about the security of the network, not people's opinions.\r\n\r\n@tjayrush  The most recent core devs' position was to accept @apbendi's compromise - leave ProgPoW as it is - speced, tested, and ready to deploy - but not deploy it unless ASICs look to be an actual threat. The mere ability to deploy may well serve as an adequate deterrent.  This issue exists just to maintain a working draft of the spec.\r\n\r\nNot a few of us are convinced that ASICs pose a genuine threat to the security of the Ethereum network.  We are not likely to drop our concerns absent arguments to the contrary.  Such arguments remain welcome at the discussions-to link.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/628285021/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/628753769",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-628753769",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 628753769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODc1Mzc2OQ==",
    "user": {
      "login": "gspoosi",
      "id": 7415249,
      "node_id": "MDQ6VXNlcjc0MTUyNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7415249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gspoosi",
      "html_url": "https://github.com/gspoosi",
      "followers_url": "https://api.github.com/users/gspoosi/followers",
      "following_url": "https://api.github.com/users/gspoosi/following{/other_user}",
      "gists_url": "https://api.github.com/users/gspoosi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gspoosi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gspoosi/subscriptions",
      "organizations_url": "https://api.github.com/users/gspoosi/orgs",
      "repos_url": "https://api.github.com/users/gspoosi/repos",
      "events_url": "https://api.github.com/users/gspoosi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gspoosi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-14T16:42:04Z",
    "updated_at": "2020-05-14T16:42:36Z",
    "author_association": "NONE",
    "body": "@gcolvin \r\nThat is ok. The work is valuable for sure - but a \"forced\" introduction of the EIP would do more harm than good community-wise.\r\n\r\nRavenCoin has switched to ProgPow (resp. KawPoW) and it seems to have drastically reduced (x10) the total hash power - seems to work as intended!\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/628753769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/628765540",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-628765540",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 628765540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODc2NTU0MA==",
    "user": {
      "login": "gcolvin",
      "id": 16827129,
      "node_id": "MDQ6VXNlcjE2ODI3MTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16827129?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcolvin",
      "html_url": "https://github.com/gcolvin",
      "followers_url": "https://api.github.com/users/gcolvin/followers",
      "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
      "organizations_url": "https://api.github.com/users/gcolvin/orgs",
      "repos_url": "https://api.github.com/users/gcolvin/repos",
      "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcolvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-14T17:03:47Z",
    "updated_at": "2020-05-14T17:03:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gspoosi  The _introduction_ of this EIP is not being forced.  It was introduced two years ago.  \r\n\r\nThe _deployment_ of an EIP _cannot_ be forced.  It takes a consensus of the core devs to get it into the clients and attempt to deploy it, it takes a consensus of the miners to get it actually deployed on a chain, and in the case of a chain split it takes a consensus of the exchanges to decide which chain is ETH.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/628765540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/645468584",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-645468584",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 645468584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTQ2ODU4NA==",
    "user": {
      "login": "AndreaLanfranchi",
      "id": 15280851,
      "node_id": "MDQ6VXNlcjE1MjgwODUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/15280851?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaLanfranchi",
      "html_url": "https://github.com/AndreaLanfranchi",
      "followers_url": "https://api.github.com/users/AndreaLanfranchi/followers",
      "following_url": "https://api.github.com/users/AndreaLanfranchi/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaLanfranchi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaLanfranchi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaLanfranchi/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaLanfranchi/orgs",
      "repos_url": "https://api.github.com/users/AndreaLanfranchi/repos",
      "events_url": "https://api.github.com/users/AndreaLanfranchi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaLanfranchi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T16:08:26Z",
    "updated_at": "2020-06-17T16:08:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @gcolvin, can you assign me ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/645468584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962544718",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-962544718",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 962544718,
    "node_id": "IC_kwDOAq426M45X0RO",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-07T03:11:09Z",
    "updated_at": "2021-11-07T03:11:09Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962544718/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974747944",
    "html_url": "https://github.com/ethereum/EIPs/issues/2640#issuecomment-974747944",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2640",
    "id": 974747944,
    "node_id": "IC_kwDOAq426M46GXko",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-21T03:11:22Z",
    "updated_at": "2021-11-21T03:11:22Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974747944/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
