{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/809/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/809/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/809/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/809",
  "id": 284623070,
  "node_id": "MDU6SXNzdWUyODQ2MjMwNzA=",
  "number": 809,
  "title": "ERC: Renting Standard for Rival, Non-Fungible Tokens",
  "user": {
    "login": "slee981",
    "id": 28874857,
    "node_id": "MDQ6VXNlcjI4ODc0ODU3",
    "avatar_url": "https://avatars.githubusercontent.com/u/28874857?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/slee981",
    "html_url": "https://github.com/slee981",
    "followers_url": "https://api.github.com/users/slee981/followers",
    "following_url": "https://api.github.com/users/slee981/following{/other_user}",
    "gists_url": "https://api.github.com/users/slee981/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/slee981/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/slee981/subscriptions",
    "organizations_url": "https://api.github.com/users/slee981/orgs",
    "repos_url": "https://api.github.com/users/slee981/repos",
    "events_url": "https://api.github.com/users/slee981/events{/privacy}",
    "received_events_url": "https://api.github.com/users/slee981/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 16,
  "created_at": "2017-12-26T23:41:49Z",
  "updated_at": "2022-10-21T13:09:34Z",
  "closed_at": "2022-01-02T08:13:47Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "# Preamble\r\n```\r\nEIP: <to be assigned>\r\nTitle: Renting Standard for Rival, Non-Fungible Tokens\r\nAuthor: Steven Lee <steven@booklocal.in>\r\nType: Standard\r\nCategory: ERC\r\nStatus: Draft\r\nCreated: 2017-12-26\r\n```\r\n\r\n# Summary\r\nA standard interface for renting rival non-fungible tokens.\r\n\r\n# Definitions\r\n_Rival good_: a good is rival if its consumption by one individual prevents simultaneous consumption by other individuals. For example, driving a car is rival but watching the sunset is non-rival. \r\n\r\n_Non-Fungible good_: a good is non-fungible if it is not interchangeable. For example, cars are non-fungible but Ether is fungible.\r\n\r\n# Abstract\r\nThe following suggests a standard API for renting access to rival non-fungible tokens within smart contracts.\r\n\r\n# Motivation\r\nA standard interface would allow for any rival non-fungible token (rival NFT) on Ethereum to be handled by general purpose applications for renting purposes. Specifically, this would allow an owner to rent access to their rival NFTs using a standard set of commands, thus allowing users to view all past and current rental agreements from a single wallet interface. \r\n\r\n# Specifications \r\n## ERC-721 Compatibility\r\nThis section taken from [ERC721](https://github.com/ethereum/eips/issues/721). Follow link for a more detailed description of the ERC721 methods. \r\n### name\r\n```\r\nfunction name() constant returns (string name)\r\n```\r\nOPTIONAL - It is recommend that this method is implemented for enhanced usability with wallets and exchanges, but interfaces and other contracts MUST NOT depend on the existence of this method.\r\n### symbol\r\n```\r\nfunction symbol() constant returns (string symbol)\r\n```\r\nOPTIONAL - It is recommend that this method is implemented for enhanced usability with wallets and exchanges, but interfaces and other contracts MUST NOT depend on the existence of this method.\r\n### totalSupply\r\n```\r\nfunction totalSupply() public view returns (uint256 total)\r\n```\r\nReturns the total number of NFTs currently tracked by this contract.\r\n### balanceOf\r\n```\r\nfunction balanceOf(address _owner) public view returns (uint256 balance)\r\n```\r\nReturns the number of NFTs assigned to address `_owner`.\r\n### ownerOf\r\n```\r\nfunction ownerOf(uint256 _tokenId) external view returns (address owner);\r\n```\r\nReturns the address currently marked as the owner of `_tokenID`. \r\n### approve\r\n```\r\nfunction approve(address _to, uint256 _tokenId) external\r\n```\r\nGrants approval for address `_to` to take possession of the NFT with ID `_tokenId`. \r\n### transferFrom\r\n```\r\nfunction transferFrom(address _from, address _to, uint256 _tokenId) external\r\n```\r\nAssigns ownership of the NFT with ID `_tokenId` to `_to` if and only if `_from` has been previously granted approval\r\n### transfer\r\n```\r\nfunction transfer(address _to, uint256 _tokenId) external\r\n```\r\nAssigns the ownership of the NFT with ID `_tokenId` to `_to` if and only if `msg.sender == ownerOf(_tokenId)`. A successful transfer MUST fire the Transfer event (defined below).\r\n## Basic Renting\r\n### reserve\r\n```\r\nreserve(uint256 _tokenId, uint256 _start, uint256 _stop) external returns (bool success)\r\n```\r\nReserve access to token (`_tokenId`) from time `_start` to time `_stop`. A successful reservation must ensure each time slot in the range `_start` to `_stop` is not previously reserved (by calling the function `checkAvailable()` described below) and then emit a Reserve event. For example, this could be implemented through a double mapping given by, \r\n```\r\nmapping(uint256 -> mapping(uint256 -> address)) reservations\r\n```\r\nIn this case, we could map `_tokenId` to a range of time slots, and each time slot to an address. If each time in the range `_start` to `_stop` returns address(0), then add `reservations[_tokenId][_time] = msg.sender` for every `_time` in range `_start` to `_stop`. \r\n\r\nFurther considerations include adding a reservation price, although this may not be necessary in the case of an auction for rental price.\r\n### access\r\n```\r\naccess(uint256 _tokenId) external returns (bool success)\r\n```\r\nIf `msg.sender == reservations[_tokenId][now]` then grant access. Due to the possibility of different units of time preferred in the reservation (i.e. reserving by the second, hour, day, week, and so on), `now` may need to be checked to the nearest reservation unit. This is to say that access must ensure that `msg.sender` has a reservation for that time slot. \r\n\r\n### settle\r\n```\r\nsettle(uint256 _tokenId, address _renter, uint256 _stop) external returns (bool success)\r\n```\r\nRemoves `_renter` access to `_tokenId` and transfers any agreed upon funds only if `_renter == reservations[_tokenId][_stop]`. Analogous to checking out of a hotel room or returning a rental car. \r\n\r\nThis function should be callable by either the owner of `_tokenId` or `_renter`, however, the owner should only be able to call this function if `now >= _stop` to prevent premature settlement of funds. \r\n\r\n### checkAvailable\r\n```\r\ncheckAvailable(uint256 _tokenId, uint256 _time) public view returns (bool available)\r\n```\r\nReturns true if `reservations[_tokenId][_time] == address(0)` and false otherwise.\r\n### cancelReservation\r\n```\r\ncancelReservation(uint256 _tokenId, uint256 _start, uint256 _stop) external returns (bool success)\r\n```\r\nReturns true if `msg.sender == reservations[_tokenId][_time]` for every `_time` in range `_start` to `_stop` and deletes reservation. \r\n\r\n## Events\r\n### Transfer\r\n```\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _tokenId)\r\n```\r\nConsistent with ERC721.\r\n### Approval \r\n```\r\nevent Approval(address indexed _owner, address indexed _approved, uint256 _tokenId)\r\n```\r\nConsistent with ERC721.\r\n### Reserve\r\n```\r\nevent Reserve(address indexed _renter, uint256 _tokenId, uint256 _start, uint256 _stop)\r\n```\r\nMust trigger on any successful call to reservation. \r\n### Cancel\r\n```\r\nevent CancelReservation(address indexed _renter, uint256 _tokenId, uint256 _start, uint256 _stop)\r\n```\r\nMust trigger on any successful call to cancelReservation. \r\n\r\n# Rationale \r\nThe Ethereum blockchain provides the opportunity for reimagined distribution systems in asset rental markets (i.e. the travel industry). A community standard would help encourage secure rental contracts with common interfaces, thus allowing renters and owners alike to view all of their rental agreements from a single application. \r\n\r\n# Implementation \r\nhttps://github.com/BookLocal/EthMemphis",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/809/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/809/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354124441",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-354124441",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 354124441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDEyNDQ0MQ==",
    "user": {
      "login": "pabloruiz55",
      "id": 526558,
      "node_id": "MDQ6VXNlcjUyNjU1OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/526558?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pabloruiz55",
      "html_url": "https://github.com/pabloruiz55",
      "followers_url": "https://api.github.com/users/pabloruiz55/followers",
      "following_url": "https://api.github.com/users/pabloruiz55/following{/other_user}",
      "gists_url": "https://api.github.com/users/pabloruiz55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pabloruiz55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pabloruiz55/subscriptions",
      "organizations_url": "https://api.github.com/users/pabloruiz55/orgs",
      "repos_url": "https://api.github.com/users/pabloruiz55/repos",
      "events_url": "https://api.github.com/users/pabloruiz55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pabloruiz55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-27T14:50:11Z",
    "updated_at": "2017-12-27T14:51:00Z",
    "author_association": "NONE",
    "body": "Hi Steven, I like the idea. You can check this article/code I wrote a while ago about renting smart contracts (it's specifically about renting smart contracts and not NF tokens), if it helps: https://hackernoon.com/renting-items-on-the-blockchain-de4e2663dfc6\r\n\r\nI'm concerned about the way a reservation is made and checked:\r\n\r\n> In this case, we could map _tokenId to a range of time slots, and each time slot to an address. If each time in the range _start to _stop returns address(0), then add reservations[_tokenId][_time] = msg.sender for every _time in range _start to _stop.\r\n\r\nIf I understand correctly, you propose storing each time that falls within `_start` & `_stop` for the token being rented and then checking with `now` to see if the caller actually is currently set within the mapping.\r\nSo, if I rent the item ID1 for a year this smart contract would store my address in the mapping X times as `reservations[ID1][X] = msg.sender`  where x is each second from _start to _stop. This would mean that for a 1 year reservation you would be storing my address 31 million times (3600 seconds * 24 hours * 365 days). ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354124441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354147858",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-354147858",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 354147858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDE0Nzg1OA==",
    "user": {
      "login": "slee981",
      "id": 28874857,
      "node_id": "MDQ6VXNlcjI4ODc0ODU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/28874857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slee981",
      "html_url": "https://github.com/slee981",
      "followers_url": "https://api.github.com/users/slee981/followers",
      "following_url": "https://api.github.com/users/slee981/following{/other_user}",
      "gists_url": "https://api.github.com/users/slee981/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slee981/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slee981/subscriptions",
      "organizations_url": "https://api.github.com/users/slee981/orgs",
      "repos_url": "https://api.github.com/users/slee981/repos",
      "events_url": "https://api.github.com/users/slee981/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slee981/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-27T17:34:08Z",
    "updated_at": "2018-01-02T18:33:55Z",
    "author_association": "NONE",
    "body": "Hi Pablo, thanks for the feedback. Just checked out your article and Rentable contract. It looks good. Have you thought of a different way of using your rentable contract to make reservations in the future? For example, with movies this wouldn't matter since many people can rent simultaneously (the good is non-rival), but in the case of renting a seat on an airplane, rental car, or hotel room, you would want to know that you alone have access to that asset at a specific time. \r\n\r\nI totally agree with the issue of renting by the second. My idea is use (as in your rentable idea) a minimum unit of rent. For example, to rent by the hour we could say `uint MIN_RENT = 3600` and then store time as `_time = _start/MIN_RENT` and finally store as `reservations[_tokenId][_time] = msg.sender` where `_time` is stored in hours. \r\n\r\nThis does still pose potential rounding issues, but then I think we could find a reasonable tolerance around the rent date (i.e. search the `reservations[_tokenId]` mapping for `_time +/- TOLERANCE`). ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354147858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354583927",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-354583927",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 354583927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDU4MzkyNw==",
    "user": {
      "login": "montsamu",
      "id": 134346,
      "node_id": "MDQ6VXNlcjEzNDM0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/134346?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/montsamu",
      "html_url": "https://github.com/montsamu",
      "followers_url": "https://api.github.com/users/montsamu/followers",
      "following_url": "https://api.github.com/users/montsamu/following{/other_user}",
      "gists_url": "https://api.github.com/users/montsamu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/montsamu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/montsamu/subscriptions",
      "organizations_url": "https://api.github.com/users/montsamu/orgs",
      "repos_url": "https://api.github.com/users/montsamu/repos",
      "events_url": "https://api.github.com/users/montsamu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/montsamu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-31T03:59:24Z",
    "updated_at": "2017-12-31T03:59:24Z",
    "author_association": "NONE",
    "body": "I’m also interested in this and would plan to implement it in my next project. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354583927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354867138",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-354867138",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 354867138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDg2NzEzOA==",
    "user": {
      "login": "finnious",
      "id": 1507588,
      "node_id": "MDQ6VXNlcjE1MDc1ODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1507588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/finnious",
      "html_url": "https://github.com/finnious",
      "followers_url": "https://api.github.com/users/finnious/followers",
      "following_url": "https://api.github.com/users/finnious/following{/other_user}",
      "gists_url": "https://api.github.com/users/finnious/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/finnious/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/finnious/subscriptions",
      "organizations_url": "https://api.github.com/users/finnious/orgs",
      "repos_url": "https://api.github.com/users/finnious/repos",
      "events_url": "https://api.github.com/users/finnious/events{/privacy}",
      "received_events_url": "https://api.github.com/users/finnious/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-02T20:27:33Z",
    "updated_at": "2018-01-02T20:27:33Z",
    "author_association": "NONE",
    "body": "I heard [Arthur Camara of CrypoKitties on The Blockchain Guy podcast](http://blockchain.global/cryptokitties/). Arthur talked about ERC-721. I can't help but think how your functions give more power to the participants. While CrypoKitties maintain ultimate control of the tokens(kitties) via their marketplace.\r\n\r\n@slee981 What are your thoughts on how much control over a token should fall under the owner vs fall under some kind of marketplace overseer?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354867138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354924202",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-354924202",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 354924202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDkyNDIwMg==",
    "user": {
      "login": "jruffer",
      "id": 964929,
      "node_id": "MDQ6VXNlcjk2NDkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/964929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jruffer",
      "html_url": "https://github.com/jruffer",
      "followers_url": "https://api.github.com/users/jruffer/followers",
      "following_url": "https://api.github.com/users/jruffer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jruffer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jruffer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jruffer/subscriptions",
      "organizations_url": "https://api.github.com/users/jruffer/orgs",
      "repos_url": "https://api.github.com/users/jruffer/repos",
      "events_url": "https://api.github.com/users/jruffer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jruffer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-03T02:11:57Z",
    "updated_at": "2018-01-03T02:11:57Z",
    "author_association": "NONE",
    "body": "This is great!  Are you thinking this would also work for time sharing for others to be able to re-rent their timeshare? Also, this looks like it could also work for items? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/354924202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355088267",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-355088267",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 355088267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTA4ODI2Nw==",
    "user": {
      "login": "slee981",
      "id": 28874857,
      "node_id": "MDQ6VXNlcjI4ODc0ODU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/28874857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slee981",
      "html_url": "https://github.com/slee981",
      "followers_url": "https://api.github.com/users/slee981/followers",
      "following_url": "https://api.github.com/users/slee981/following{/other_user}",
      "gists_url": "https://api.github.com/users/slee981/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slee981/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slee981/subscriptions",
      "organizations_url": "https://api.github.com/users/slee981/orgs",
      "repos_url": "https://api.github.com/users/slee981/repos",
      "events_url": "https://api.github.com/users/slee981/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slee981/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-03T18:28:27Z",
    "updated_at": "2018-01-03T18:28:27Z",
    "author_association": "NONE",
    "body": "@finnious I think the main reason that the CryptoKitties creators may have so much control over their tokens is that standard wallets aren't yet compatible with the ERC-721 interface. Thus, they control the interaction. Same applies here. \r\n\r\nWallets will most likely adapt once there are more applications that use non-fungible tokens, and hopefully the same applies for renting. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355088267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355092063",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-355092063",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 355092063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTA5MjA2Mw==",
    "user": {
      "login": "slee981",
      "id": 28874857,
      "node_id": "MDQ6VXNlcjI4ODc0ODU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/28874857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slee981",
      "html_url": "https://github.com/slee981",
      "followers_url": "https://api.github.com/users/slee981/followers",
      "following_url": "https://api.github.com/users/slee981/following{/other_user}",
      "gists_url": "https://api.github.com/users/slee981/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slee981/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slee981/subscriptions",
      "organizations_url": "https://api.github.com/users/slee981/orgs",
      "repos_url": "https://api.github.com/users/slee981/repos",
      "events_url": "https://api.github.com/users/slee981/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slee981/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-03T18:43:07Z",
    "updated_at": "2018-01-03T18:43:07Z",
    "author_association": "NONE",
    "body": "@jruffer in principle this should work with timeshares, but depends on how payments are incorporated. Right now I see a few options: \r\n\r\n1. **Auctions**: reservation goes to highest bidder\r\n2. **Pay-per-time**: access cost per unit time. This might make more sense for non-rival goods though, like movie rentals, where it returning earlier or later doesn't impact someone else's ability to rent the item.\r\n3. **Flat-rate**: set a specific rate upfront. This option could be implemented a few different ways. Either pay all funds immediately upon making the reservation or transfer funds to a multi-sig wallet (between token owner and renter). The latter option would allow for more complex rules around canceling reservations or dispute settlement (i.e. damages to real-world property). \r\n\r\nTimeshares could probably be made feasible by applying a modified version of this rental standard on top of an existing rental agreement. For example, if you rent a beach house from someone, you could open up a second rentable token on top of their token, but only for the dates you've reserved. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/355092063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/357276918",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-357276918",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 357276918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzI3NjkxOA==",
    "user": {
      "login": "Dsummers91",
      "id": 6687350,
      "node_id": "MDQ6VXNlcjY2ODczNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6687350?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dsummers91",
      "html_url": "https://github.com/Dsummers91",
      "followers_url": "https://api.github.com/users/Dsummers91/followers",
      "following_url": "https://api.github.com/users/Dsummers91/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dsummers91/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dsummers91/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dsummers91/subscriptions",
      "organizations_url": "https://api.github.com/users/Dsummers91/orgs",
      "repos_url": "https://api.github.com/users/Dsummers91/repos",
      "events_url": "https://api.github.com/users/Dsummers91/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dsummers91/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-12T15:58:09Z",
    "updated_at": "2018-01-12T15:58:09Z",
    "author_association": "NONE",
    "body": "If the minimum times are going to be standard throughout the contract (i.e. daily for hotel, or hourly for bike rental). Instead of having minimum times, you could partition each tokens time by that time block. \r\n\r\nFor a hotel each individual day would in essence be its own token within each NFT room token. So lets say initialTime is noon (43200) and each _timeBlock is a day (86400), and _startTime is the starting date someone wants to reserve something. Then the mapping would be `reservations[_tokenId][_startTime]` where `(_startTime - initialTime) % _timeBlock = 0`\r\n\r\nThat way the tokens are more uniform and are able to trade timeblocks between people",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/357276918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359668178",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-359668178",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 359668178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTY2ODE3OA==",
    "user": {
      "login": "hyperfekt",
      "id": 9434715,
      "node_id": "MDQ6VXNlcjk0MzQ3MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9434715?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hyperfekt",
      "html_url": "https://github.com/hyperfekt",
      "followers_url": "https://api.github.com/users/hyperfekt/followers",
      "following_url": "https://api.github.com/users/hyperfekt/following{/other_user}",
      "gists_url": "https://api.github.com/users/hyperfekt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hyperfekt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hyperfekt/subscriptions",
      "organizations_url": "https://api.github.com/users/hyperfekt/orgs",
      "repos_url": "https://api.github.com/users/hyperfekt/repos",
      "events_url": "https://api.github.com/users/hyperfekt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hyperfekt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T03:50:50Z",
    "updated_at": "2018-01-23T11:05:21Z",
    "author_association": "NONE",
    "body": "May I suggest that we work towards making individual reservations NFTs conformant to ERC821/721? This would allow reusing contracts that handle these kinds of NFTs for individual reservations, and reimplementing e.g. transfers, auctions and sales could be avoided.\r\n\r\nAlso it is not entirely clear to me how this compares to ERC #808, it appears there is some overlap which would allow either a cross-compatible subset or merging?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/359668178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389754543",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-389754543",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 389754543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTc1NDU0Mw==",
    "user": {
      "login": "saurfang",
      "id": 4317392,
      "node_id": "MDQ6VXNlcjQzMTczOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4317392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saurfang",
      "html_url": "https://github.com/saurfang",
      "followers_url": "https://api.github.com/users/saurfang/followers",
      "following_url": "https://api.github.com/users/saurfang/following{/other_user}",
      "gists_url": "https://api.github.com/users/saurfang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saurfang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saurfang/subscriptions",
      "organizations_url": "https://api.github.com/users/saurfang/orgs",
      "repos_url": "https://api.github.com/users/saurfang/repos",
      "events_url": "https://api.github.com/users/saurfang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saurfang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-17T06:02:55Z",
    "updated_at": "2018-05-17T06:02:55Z",
    "author_association": "NONE",
    "body": "This looks really promising not just for accomodation reservation but like laid out in the proposal, it can be applicable to other rival goods. It is helpful to create some toy implementations of different use cases and it can help us decide what is the largest common denominator that should make into the interface specification.\r\n\r\nI started a basic implementation of a [virtual ads billboard](https://github.com/saurfang/erc809-billboard). The idea is to simulate renting out a virtual space on your website for ads. People can bid on ad impression for a future period. It is not intended to be a real product but for exploring flexibility of ERC809 only since BookLocal already demonstrated its use on accomodation.\r\n\r\nI intend to make a front-end eventually but for now, you can refer to the [test cases](https://github.com/saurfang/erc809-billboard/blob/master/test/BasicBillboard.test.js\r\n) on its usage.\r\n\r\nA lot of what I have here is a working in progress but I feel there is enough progress to get some feedbacks and I want to incorporate your ideas and suggestions to the iterations.\r\n\r\n### Availability Storage\r\n\r\n**We can avoid storing reservation for each time unit by only storing start and stop timestamp in a sorted treemap.** It translates the problem into a calendar scheduling problem that can be solved in O(logn) for each insertion and lookup w.r.t number of reservations in the system.\r\n\r\nI started a treemap implementation under [solidity-treemap](https://github.com/saurfang/solidity-treemap) (WIP. Again see tests for its usage.) I found some existing solidity AVL tree implementation but they don't appear to be well documented or tested. \r\n\r\nI use this treemap to [maintain availability here](https://github.com/saurfang/erc809-billboard/blob/d351d99d2a30f02f1b38c6cf1a4feab9ef8c429b/contracts/BasicBillboard.sol#L178). It is actually pretty simple and sweet with treemap.\r\n\r\n### ERC809 Interface\r\n\r\nI copied Steven's proposal into a contract interface [here](https://github.com/saurfang/erc809-billboard/blob/master/contracts/ERC809.sol) with some modifications.\r\nI changed `checkAvailable` to take `uint256 _tokenId, uint256 _start, uint256 _stop` instead since we now operate on a time range instead of a discrete time unit.\r\n\r\n@slee981 Can you share some concrete examples on what you had in mind for `access` function? I understand it should be called by the renter. What exactly should happen? I found it to be more useful to have `hasAccess(uint256 _tokenId, uint256 _address, uint256 _time) public view returns(bool)` to allow people to check if some `_address` has access to `_tokenId` as of `_time`.  I simplified it to `function renterOf(uint256 _tokenId, uint256 _time) public view returns (address);` which practically does the same thing but limits each token strictly rival.\r\n\r\nI have some worry over the usefulness of `reserve` function. I agree it is a core-functionality but it seems reserve requires a lot more metadata such as price that you already mentioned. Maybe we can include a `metadata` argument for the reservation request as a catch-all? When exactly do renter pay for the reservation since `reserve` is not payable?\r\n\r\n### ERC809 is ERC721?\r\n\r\nI think @hyperfekt has a great idea that ERC809 leases themselves can be ERC721 tokens. Currently, the proposal frames that ERC809 enhances an ERC721 token with the ability to lease out a specific token for a period of time to a renter. Meanwhile, **renting/leasing is really just \"access\", a (usually) non-tangible non-fungible tokenizable resource**:\r\n\r\n1. Booking an accommodation grants access to space for the agreed upon time period\r\n1. Reserve an (autonomous) car ride gives access to transportation from A to B\r\n1. Reserve a group tour gives access to an experience that lasts the duration of the tour\r\n1. Bid on an advertisement impression gives access to a virtual real estate to place marketing content\r\n\r\nWhile \"access\"s are tied to a non-fungible resource, they only provide up to the level of rights they promised. If I rent a room from a home-owner, I don't magically own the home and I cannot make modifications to the home. While each \"access\" can be rival, a tokenized asset might have different kinds of \"access\" one can derive. It seems sub-optimal to tightly couple a specific type of \"access\" to the token contract itself.\r\n\r\nIn a contrived example, if I deploy an ERC721 Car token, I can have two ERC809 access tokens related to this car: \r\n\r\n1. one grants access to car rider \r\n1. the other grants access to car operator \r\n\r\nwhere car rider reserve the car for a ride and car operator lease the car to drive, and make money by providing rides.\r\n\r\n\r\nLong story short, I think **tokenizing access (reservation/booking), isolated from the underlying token contract, enable a lot more interesting capabilities**:\r\n\r\n1. In addition to being non-fungible, an ERC809 access token is ephemeral with a defined living window\r\n1. Each ERC809 access token could be associated with another ERC721 and access can be divisible or combinable by the time (when permitted)\r\n    1. If I am a travel agent, I can reserve a whole month of accommodation and split them into pieces as I package them for my travel clients (wholesaling)\r\n1. Access token can be transferred and traded (when permitted)\r\n    1. If the implementation interferes with an identity contract\r\n        1. tokens can be transferred to other accounts owned by the same identity\r\n        1. tokens can be purchased on someone else' behalf (e.g. booking agent)\r\n    1. If resale is permitted, the access can be traded on a secondary marketplace such as OpenSea\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/389754543/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/417919894",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-417919894",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 417919894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzkxOTg5NA==",
    "user": {
      "login": "saurfang",
      "id": 4317392,
      "node_id": "MDQ6VXNlcjQzMTczOTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4317392?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saurfang",
      "html_url": "https://github.com/saurfang",
      "followers_url": "https://api.github.com/users/saurfang/followers",
      "following_url": "https://api.github.com/users/saurfang/following{/other_user}",
      "gists_url": "https://api.github.com/users/saurfang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saurfang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saurfang/subscriptions",
      "organizations_url": "https://api.github.com/users/saurfang/orgs",
      "repos_url": "https://api.github.com/users/saurfang/repos",
      "events_url": "https://api.github.com/users/saurfang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saurfang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-02T10:29:02Z",
    "updated_at": "2018-09-02T10:29:02Z",
    "author_association": "NONE",
    "body": "So I took @hyperfekt's idea and @zemingyu's https://github.com/ethereum/EIPs/issues/1201 and ran with it a bit. I think we come to the realization that ownership and rental rights equally deserve to be a token by themselves. Instead of jamming both in a single contract, what do you all think about composing them with two ERC721 contracts instead like so:\r\n\r\n```solidty\r\npragma solidity ^0.4.23;\r\n\r\nimport \"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\";\r\n\r\n\r\n/// @title ERC809: a standard interface for rentable rival non-fungible tokens.\r\ncontract ERC809 is ERC721 {\r\n  // address of the ERC721 contract tokenizing reseravation/access of this contract's token\r\n  address public reservationContract;\r\n\r\n  /// @notice Find the renter of an NFT token as of `_time`\r\n  /// @dev The renter is who made a reservation on `_tokenId` and the reservation spans over `_time`.\r\n  function renterOf(uint256 _tokenId, uint256 _time) public view returns (address);\r\n\r\n  /// @notice Query if token `_tokenId` if available to reserve between `_start` and `_stop` time\r\n  function isAvailable(uint256 _tokenId, uint256 _start, uint256 _stop) public view returns (bool);\r\n\r\n  /// @notice Cancel reservation for `_tokenId` between `_start` and `_stop`\r\n  /// @dev All reservations between `_start` and `_stop` are cancelled. `_start` and `_stop` do not guarantee\r\n  //   to be the ends for any one of the reservations\r\n  function cancelAll(uint256 _tokenId, uint256 _start, uint256 _stop) public returns (uint256);\r\n\r\n  /// @notice Cancel a single reservation for `_tokenId`\r\n  function cancel(uint256 _tokenId, uint256 _reservationId) public;\r\n}\r\n\r\n\r\n/// @title ERC809Child: an auxiliary ERC809 token representing access to a ERC809.\r\ncontract ERC809Child is ERC721 {\r\n  // address of the parent ERC721 contract whose tokens are open for access\r\n  address public owner;\r\n\r\n  /// @dev This emits when a successful reservation is made for accessing any NFT.\r\n  event Creation(address indexed _renter, uint256 _calendarId, uint256 _tokenId);\r\n\r\n  /// @dev This emits when a successful cancellation is made for a reservation.\r\n  event Cancellation(address indexed _renter, uint256 _calendarId, uint256 _tokenId);\r\n}\r\n```\r\n\r\nBy the way, this was motivated by @shrugs's suggestion in ERC1155 of composing ERC721. Before that, I struggled for a long time on the tradeoff between two tokens: putting them in one contract would put one of them as a second-class citizen, but creating separate contracts doesn't seem have benefit because most of the logic is so intertwined and doesn't allow a separation of concerns.\r\n\r\nI wrote a [Medium post](https://medium.com/@saurfang/erc809-1201-tokenizing-non-fungible-access-abdc5018c49) about this exploration and a proof of concept implementation called [MeetETH](https://github.com/saurfang/meeteth). I appreciate your thoughts and suggestions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/417919894/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997341478",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-997341478",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 997341478,
    "node_id": "IC_kwDOAq426M47cjkm",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-19T07:11:32Z",
    "updated_at": "2021-12-19T07:11:32Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997341478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003679150",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-1003679150",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 1003679150,
    "node_id": "IC_kwDOAq426M470u2u",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-02T08:13:47Z",
    "updated_at": "2022-01-02T08:13:47Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003679150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140857839",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-1140857839",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 1140857839,
    "node_id": "IC_kwDOAq426M5EABvv",
    "user": {
      "login": "shanu12joshi",
      "id": 42548654,
      "node_id": "MDQ6VXNlcjQyNTQ4NjU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/42548654?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shanu12joshi",
      "html_url": "https://github.com/shanu12joshi",
      "followers_url": "https://api.github.com/users/shanu12joshi/followers",
      "following_url": "https://api.github.com/users/shanu12joshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/shanu12joshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shanu12joshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shanu12joshi/subscriptions",
      "organizations_url": "https://api.github.com/users/shanu12joshi/orgs",
      "repos_url": "https://api.github.com/users/shanu12joshi/repos",
      "events_url": "https://api.github.com/users/shanu12joshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shanu12joshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-30T08:26:04Z",
    "updated_at": "2022-05-30T08:26:04Z",
    "author_association": "NONE",
    "body": "I am not able to find ERC-809, does it not exists anymore?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140857839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1141038189",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-1141038189",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 1141038189,
    "node_id": "IC_kwDOAq426M5EAtxt",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-05-30T11:25:09Z",
    "updated_at": "2022-05-30T11:25:09Z",
    "author_association": "MEMBER",
    "body": "It appears this never got turned into an EIP, it was just an idea that no one ran with.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1141038189/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1286937465",
    "html_url": "https://github.com/ethereum/EIPs/issues/809#issuecomment-1286937465",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/809",
    "id": 1286937465,
    "node_id": "IC_kwDOAq426M5MtRt5",
    "user": {
      "login": "tommed",
      "id": 13066,
      "node_id": "MDQ6VXNlcjEzMDY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/13066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tommed",
      "html_url": "https://github.com/tommed",
      "followers_url": "https://api.github.com/users/tommed/followers",
      "following_url": "https://api.github.com/users/tommed/following{/other_user}",
      "gists_url": "https://api.github.com/users/tommed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tommed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tommed/subscriptions",
      "organizations_url": "https://api.github.com/users/tommed/orgs",
      "repos_url": "https://api.github.com/users/tommed/repos",
      "events_url": "https://api.github.com/users/tommed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tommed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-10-21T13:06:24Z",
    "updated_at": "2022-10-21T13:09:34Z",
    "author_association": "NONE",
    "body": "I really like this idea. But it would need to be expanded to cater for rentals where there is no pre-determined end date too. I.e., I want to borrow your car, and when I return it, I will then know how much I owe you (i.e., based on a price per minute). \r\n\r\nI agree the mapping for time incrementals is not efficient, but you could track a binary of whether the item was _currently_ in rental to keep this simple - but then use some kind of trigger to set this to false when the end of the contract occurs.\r\n\r\nI'm guessing this may be replaced by [EIP-4907](https://eips.ethereum.org/EIPS/eip-4907)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1286937465/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
