{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/780/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/780/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/780/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/780",
  "id": 277825802,
  "node_id": "MDU6SXNzdWUyNzc4MjU4MDI=",
  "number": 780,
  "title": "ERC: Ethereum Claims Registry",
  "user": {
    "login": "oed",
    "id": 3909429,
    "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/oed",
    "html_url": "https://github.com/oed",
    "followers_url": "https://api.github.com/users/oed/followers",
    "following_url": "https://api.github.com/users/oed/following{/other_user}",
    "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
    "organizations_url": "https://api.github.com/users/oed/orgs",
    "repos_url": "https://api.github.com/users/oed/repos",
    "events_url": "https://api.github.com/users/oed/events{/privacy}",
    "received_events_url": "https://api.github.com/users/oed/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 67,
  "created_at": "2017-11-29T16:44:53Z",
  "updated_at": "2023-07-23T06:55:59Z",
  "closed_at": "2022-01-02T08:14:01Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\nEIP: <to be assigned>\r\nTitle: ERC: Ethereum Claims Registry\r\nAuthor: Joel Torstensson <oed@consensys.net>\r\nType: Standard\r\nCategory: ERC\r\nStatus: Discussion\r\nCreated: 2017-11-29\r\n```\r\n\r\n# Abstract\r\n\r\nThis text describes a proposal for an **Ethereum Claims Registry** (**ECR**) which allows persons, smart contracts, and machines to issue claims about each other, as well as self issued claims. The registry provides a flexible approach for claims that makes no distinction between different types of Ethereum accounts. The goal of the registry is to provide a central point of reference for on-chain claims on Ethereum.\r\n\r\n# Motivation\r\n\r\nOn-chain claims is becoming increasingly relevant as lots of different smart contracts might want to verify certain attributes about its users. However that is only one out of a very large space of use cases for on-chain claims. By providing a central repository for claims, developers are equipped with a common ground for experimentation. A standardized registry also makes claim lookup simple and gas efficient. Third party contracts only need to make one external call, no need for adding logic for verifying signatures, lookup identity signing keys, etc.\r\n\r\n# Specification\r\n\r\nThe ECR is a contract that is deployed once and can then be commonly used by everyone. Therefore it's important that the code of the registry has been reviewed by lots of people with different use cases in mind. The ECR provides an interface for adding, getting, and removing claims. Claims are issued from an `issuer` to a `subject` with a `key`, which is of type ``bytes32``. The claims data is stored as type `bytes32`. \r\n\r\n## Claim types\r\nThe `key` parameter is used to indicate the type of claim that is being made. There are three ways that are encuraged for use in the ECR:\r\n* Standardised claim types use syntax borrowed from HTTP and do not start with `X-`. The key is the hash of the claim type (eg, `keccak256('Owner-Address')`)\r\n* Private types not intended for interchange use the same syntax, but with X- prefix. The key is the hash of the claim type (eg, `keccak256('X-My-Thing')`)\r\n* Ad-hoc types use 32 random bytes for the key, enabling allocation of new globally used keys without the need for standardisation first.\r\n\r\n### Standard claim types\r\nNew claim types can be added by making a PR to modify this table.\r\n\r\n| Claim type | Description |\r\n| -- | -- |\r\n| `ERC780Example` | This is an example |\r\n\r\n## Registry specification\r\n\r\nThe ECR provides the following functions:\r\n\r\n**setClaim**\r\nUsed by an `issuer` to set the claim `value` with the `key` about the `subject`.\r\n\r\n```js\r\nfunction setClaim(address subject, bytes32 key, bytes32 value) public;\r\n```\r\n\r\n**setSelfClaim**\r\nConvenience function for an `issuer` to set a claim about themself.\r\n\r\n```js\r\nfunction setSelfClaim(bytes32 key, bytes32 value) public;\r\n```\r\n**getClaim**\r\nUsed by anyone to get a specific claim.\r\n\r\n```js\r\nfunction getClaim(address issuer, address subject, bytes32 key) public constant returns(bytes32);\r\n```\r\n\r\n**removeClaim**\r\nUsed by an `issuer` to remove a claim it has made.\r\n\r\n```js\r\nfunction removeClaim(address issuer, address subject, bytes32 key) public;\r\n```\r\n\r\n### Type conversions\r\n\r\nThe `value` parameter was choosen to have the type `bytes32`. This in order to make the registry entries as general as possible while maintaining a very simple code base. However it is likely that usecases where other types such as `address` and `uint` etc. will emerge. Support for this can be added in various ways. We suggest that a library is implemented that can covert between various solidity types. This means that the registry itself keeps its simplicity. Contracts that need specific types can use such a library to convert the `bytes32` into their desired type and back. \r\n\r\n### Deployment\r\n\r\nAfter some discussion on the design of the registry contract it will be deployed and its address should be written in this document. This should include the addresses for the ropsten, rinkeby, and kovan testnets as well.\r\n\r\n### Updates and governance\r\n\r\nIn the future there might be new features needed in the registry. In order for such an event to be as transparent as possible the new features should be proposed and approved in a new EIP that contains the new contract code as well as a way of migrating any old claims if deemed necessary.\r\n\r\n##  Appendix: Registry implementation\r\n\r\n```js\r\ncontract EthereumClaimsRegistry {\r\n\r\n    mapping(address => mapping(address => mapping(bytes32 => bytes32))) public registry;\r\n\r\n    event ClaimSet(\r\n        address indexed issuer,\r\n        address indexed subject,\r\n        bytes32 indexed key,\r\n        bytes32 value,\r\n        uint updatedAt);\r\n\r\n    event ClaimRemoved(\r\n        address indexed issuer,\r\n        address indexed subject,\r\n        bytes32 indexed key,\r\n        uint removedAt);\r\n\r\n    // create or update clams\r\n    function setClaim(address subject, bytes32 key, bytes32 value) public {\r\n        registry[msg.sender][subject][key] = value;\r\n        emit ClaimSet(msg.sender, subject, key, value, now);\r\n    }\r\n\r\n    function setSelfClaim(bytes32 key, bytes32 value) public {\r\n        setClaim(msg.sender, key, value);\r\n    }\r\n\r\n    function getClaim(address issuer, address subject, bytes32 key) public view returns(bytes32) {\r\n        return registry[issuer][subject][key];\r\n    }\r\n\r\n    function removeClaim(address issuer, address subject, bytes32 key) public {\r\n        require(msg.sender == issuer);\r\n        delete registry[issuer][subject][key];\r\n        emit ClaimRemoved(msg.sender, subject, key, now);\r\n    }\r\n}\r\n```",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/780/reactions",
    "total_count": 94,
    "+1": 58,
    "-1": 0,
    "laugh": 0,
    "hooray": 14,
    "confused": 0,
    "heart": 18,
    "rocket": 4,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/780/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/347939729",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-347939729",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 347939729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzkzOTcyOQ==",
    "user": {
      "login": "alex-miller-0",
      "id": 7378490,
      "node_id": "MDQ6VXNlcjczNzg0OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7378490?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-miller-0",
      "html_url": "https://github.com/alex-miller-0",
      "followers_url": "https://api.github.com/users/alex-miller-0/followers",
      "following_url": "https://api.github.com/users/alex-miller-0/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-miller-0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-miller-0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-miller-0/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-miller-0/orgs",
      "repos_url": "https://api.github.com/users/alex-miller-0/repos",
      "events_url": "https://api.github.com/users/alex-miller-0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-miller-0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T17:45:54Z",
    "updated_at": "2017-11-29T17:45:54Z",
    "author_association": "NONE",
    "body": "I think the submitter's identity should be recovered from a `v`,`,r`,`s` signature rather than requiring `msg.sender` be the submitter. I can imagine a claim issuer who doesn't want to interact with Ethereum, but is happy to sign a message and pass that over http. It would be good if this signed claim could be submitted by any party.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/347939729/reactions",
      "total_count": 24,
      "+1": 24,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/347941565",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-347941565",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 347941565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Nzk0MTU2NQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T17:52:19Z",
    "updated_at": "2017-11-29T17:52:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alex-miller-0 The main reason to use `msg.sender` is to benefit from ethereums signature abstractions. This allows users to implement other signature schemes in contracts and still be able to use the registry. By having the signature verification in the registry contract itself means that it becomes less future proof.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/347941565/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/347963314",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-347963314",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 347963314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Nzk2MzMxNA==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T19:07:11Z",
    "updated_at": "2017-11-29T19:16:33Z",
    "author_association": "NONE",
    "body": "Aww man I liked the `KeyGraph` and `src,dst,key,val` nomenclature. Good innovation with `updatedAt` though  Edit: nvm looks like `tau` existed too",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/347963314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/347965266",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-347965266",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 347965266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Nzk2NTI2Ng==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T19:13:59Z",
    "updated_at": "2017-11-29T19:13:59Z",
    "author_association": "NONE",
    "body": "Here's a bunch of context for people just catching up: https://github.com/uport-project/uport-registry/pull/24",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/347965266/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348022859",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348022859",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348022859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODAyMjg1OQ==",
    "user": {
      "login": "alex-miller-0",
      "id": 7378490,
      "node_id": "MDQ6VXNlcjczNzg0OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7378490?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-miller-0",
      "html_url": "https://github.com/alex-miller-0",
      "followers_url": "https://api.github.com/users/alex-miller-0/followers",
      "following_url": "https://api.github.com/users/alex-miller-0/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-miller-0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-miller-0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-miller-0/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-miller-0/orgs",
      "repos_url": "https://api.github.com/users/alex-miller-0/repos",
      "events_url": "https://api.github.com/users/alex-miller-0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-miller-0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T22:48:13Z",
    "updated_at": "2017-11-29T22:48:13Z",
    "author_association": "NONE",
    "body": "@oed That make sense, but it still gives me pause because this requires every claim issuer pay gas (maybe not in the future, but for now). Seems like you could still add something like `setRemoteECDSAClaim()`. Not pretty, but I do think there are use cases that will be blocked by the gas requirement.\r\n\r\nIn any event, great use of Ethereum overall 👍 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348022859/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348098135",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348098135",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348098135,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODA5ODEzNQ==",
    "user": {
      "login": "makoto",
      "id": 2630,
      "node_id": "MDQ6VXNlcjI2MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2630?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/makoto",
      "html_url": "https://github.com/makoto",
      "followers_url": "https://api.github.com/users/makoto/followers",
      "following_url": "https://api.github.com/users/makoto/following{/other_user}",
      "gists_url": "https://api.github.com/users/makoto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/makoto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/makoto/subscriptions",
      "organizations_url": "https://api.github.com/users/makoto/orgs",
      "repos_url": "https://api.github.com/users/makoto/repos",
      "events_url": "https://api.github.com/users/makoto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/makoto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T06:48:41Z",
    "updated_at": "2017-11-30T06:48:41Z",
    "author_association": "MEMBER",
    "body": "@oed can you put some example use cases? For me this just look like a generic key value store contract and no specific functions to handle claim(such as validate Claim) but I may be wrong as I am not so sure what kind of usecase you have in mind. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348098135/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348139885",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348139885",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348139885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODEzOTg4NQ==",
    "user": {
      "login": "makoto",
      "id": 2630,
      "node_id": "MDQ6VXNlcjI2MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2630?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/makoto",
      "html_url": "https://github.com/makoto",
      "followers_url": "https://api.github.com/users/makoto/followers",
      "following_url": "https://api.github.com/users/makoto/following{/other_user}",
      "gists_url": "https://api.github.com/users/makoto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/makoto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/makoto/subscriptions",
      "organizations_url": "https://api.github.com/users/makoto/orgs",
      "repos_url": "https://api.github.com/users/makoto/repos",
      "events_url": "https://api.github.com/users/makoto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/makoto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T10:00:56Z",
    "updated_at": "2017-11-30T10:00:56Z",
    "author_association": "MEMBER",
    "body": "A comment from Pelle on Reddit has more context and use cases https://www.reddit.com/r/ethereum/comments/7gewn7/erc_780_ethereum_claim_registry/",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348139885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348146707",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348146707",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348146707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODE0NjcwNw==",
    "user": {
      "login": "lukehedger",
      "id": 1913316,
      "node_id": "MDQ6VXNlcjE5MTMzMTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1913316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukehedger",
      "html_url": "https://github.com/lukehedger",
      "followers_url": "https://api.github.com/users/lukehedger/followers",
      "following_url": "https://api.github.com/users/lukehedger/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukehedger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukehedger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukehedger/subscriptions",
      "organizations_url": "https://api.github.com/users/lukehedger/orgs",
      "repos_url": "https://api.github.com/users/lukehedger/repos",
      "events_url": "https://api.github.com/users/lukehedger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukehedger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T10:26:17Z",
    "updated_at": "2017-11-30T10:26:17Z",
    "author_association": "NONE",
    "body": "@oed - I'm not sure about this statement:\r\n> A standardized registry also makes claim lookup simple and gas efficient.\r\n\r\nSay I want to look up all claims made by an `issuer` - I can't see that this is possible with the current contract and, although it could be added, it would be pretty inefficient. Also, if I want to look up all claims made about a **subject** - how could I do this?\r\n\r\nOr is the model designed to be augmented by another form of storage that can be queried more easily, meaning the contract storage is used for arbitration?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348146707/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348158701",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348158701",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348158701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODE1ODcwMQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T11:14:16Z",
    "updated_at": "2017-11-30T11:14:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@nmushegian I know you do ;) But I think that `issuer, subject` makes more sense in the context of claims.\r\n\r\n@alex-miller-0 `setRemoteECDSAClaim()` doesn't really solve the gas problem either right? Someone who is intrested in publishing the claims would still need to pay for the gas for that function call. Then they could just as easily pay for the creation of a thin proxy contract that only allows to send txs to the registry if signed by a specific key. This could also be made into a factory that (in the future) uses [copyof](https://github.com/ethereum/solidity/issues/2296) for gas efficiency. New factories could then be made for new signature types. \r\n\r\n@makoto It is very generic! The goal here is to create something that allows for any type of claim to be issued. As you saw @pelle mention on reddit, the first use case for uport is to store the public signing and encryption key of identities. But other usecases include:\r\n* User A claims that user B is a cool cat\r\n* Exchange C claims that user A is a verified member of tier 3\r\n* Contract D claims that user B has reputation X\r\n\r\nThe idea of a contract being able to make claims is very interesting. One could construct a contract that for example verifies a zero-knowledge proof and if it is correct issues a claim. So it should be possible to create a contract such that; if a subject has a claim issued by this contract, we can be sure that the subject is a European citizen without revealing which exact country, for example.\r\n\r\n@lukehedger You are right, with this design you can't currently look up all the claims made by an `issuer` or to a `subject` from another contract. This can of course be done off-chain by querying the logs though. The reason we chose this design was that other contracts most likely will have to know the `issuer`, `subject`, and `key` anyway, since there might be hundreds of claims about a speciffic `subect` for example. \r\nIf there is a speciffic use case for what you are asking about you can of course augment it like you suggested. Good idea btw, had not thought of that :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348158701/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348168718",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348168718",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348168718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODE2ODcxOA==",
    "user": {
      "login": "makoto",
      "id": 2630,
      "node_id": "MDQ6VXNlcjI2MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2630?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/makoto",
      "html_url": "https://github.com/makoto",
      "followers_url": "https://api.github.com/users/makoto/followers",
      "following_url": "https://api.github.com/users/makoto/following{/other_user}",
      "gists_url": "https://api.github.com/users/makoto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/makoto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/makoto/subscriptions",
      "organizations_url": "https://api.github.com/users/makoto/orgs",
      "repos_url": "https://api.github.com/users/makoto/repos",
      "events_url": "https://api.github.com/users/makoto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/makoto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T12:00:43Z",
    "updated_at": "2017-11-30T12:00:43Z",
    "author_association": "MEMBER",
    "body": "@oed Thank you for the clarification.\r\n\r\nDo you expect entire Ethereum universe to put their claims into one contract (like ENS Registry contract), or each project (eg: uPort, Gnosis, MelonPort) to have their own repository like ERC20 does for their tokens?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348168718/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348183051",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348183051",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348183051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODE4MzA1MQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T13:07:51Z",
    "updated_at": "2017-11-30T13:07:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@makoto This would be more similar to ENS where there is one central registry contract, rather then ERC20 which is just an interface. The reason for this is that the contract code itself has to be verified. In the case of ERC20 you just need to have the same interface.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348183051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348220731",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348220731",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348220731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODIyMDczMQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T15:24:07Z",
    "updated_at": "2017-11-30T15:24:07Z",
    "author_association": "MEMBER",
    "body": " - Can you give example use-cases? What will this be used for?\r\n - Why use `bytes32` for key and value, instead of `bytes`?\r\n - It'd be a good idea to follow the lead of other standards, and reserve keys starting with `x-` as nonstandardised ones, while requiring a standards process for non-prefixed keys, to avoid namespace collisions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348220731/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348244182",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348244182",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348244182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODI0NDE4Mg==",
    "user": {
      "login": "makoto",
      "id": 2630,
      "node_id": "MDQ6VXNlcjI2MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2630?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/makoto",
      "html_url": "https://github.com/makoto",
      "followers_url": "https://api.github.com/users/makoto/followers",
      "following_url": "https://api.github.com/users/makoto/following{/other_user}",
      "gists_url": "https://api.github.com/users/makoto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/makoto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/makoto/subscriptions",
      "organizations_url": "https://api.github.com/users/makoto/orgs",
      "repos_url": "https://api.github.com/users/makoto/repos",
      "events_url": "https://api.github.com/users/makoto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/makoto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T16:35:00Z",
    "updated_at": "2017-11-30T16:35:00Z",
    "author_association": "MEMBER",
    "body": "Should `EthereumClaimRegistry` be `EthereumClaimsRegistry`(plural)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348244182/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348244753",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348244753",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348244753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODI0NDc1Mw==",
    "user": {
      "login": "makoto",
      "id": 2630,
      "node_id": "MDQ6VXNlcjI2MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2630?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/makoto",
      "html_url": "https://github.com/makoto",
      "followers_url": "https://api.github.com/users/makoto/followers",
      "following_url": "https://api.github.com/users/makoto/following{/other_user}",
      "gists_url": "https://api.github.com/users/makoto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/makoto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/makoto/subscriptions",
      "organizations_url": "https://api.github.com/users/makoto/orgs",
      "repos_url": "https://api.github.com/users/makoto/repos",
      "events_url": "https://api.github.com/users/makoto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/makoto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T16:36:45Z",
    "updated_at": "2017-11-30T16:36:45Z",
    "author_association": "MEMBER",
    "body": "If the function name is `setClaim` the event name should be `ClaimSet` rather than `ClaimAdded` ?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348244753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348341503",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348341503",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348341503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODM0MTUwMw==",
    "user": {
      "login": "makoto",
      "id": 2630,
      "node_id": "MDQ6VXNlcjI2MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2630?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/makoto",
      "html_url": "https://github.com/makoto",
      "followers_url": "https://api.github.com/users/makoto/followers",
      "following_url": "https://api.github.com/users/makoto/following{/other_user}",
      "gists_url": "https://api.github.com/users/makoto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/makoto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/makoto/subscriptions",
      "organizations_url": "https://api.github.com/users/makoto/orgs",
      "repos_url": "https://api.github.com/users/makoto/repos",
      "events_url": "https://api.github.com/users/makoto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/makoto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T22:28:10Z",
    "updated_at": "2017-11-30T22:28:10Z",
    "author_association": "MEMBER",
    "body": "In terms of use case, I have something similar which could potentially replace with this Claims registry\r\n\r\nhttps://github.com/makoto/blockparty/blob/master/contracts/InvitationRepository.sol\r\n\r\nThe above contract manages a set of a unique code which I use to invite a participant to register my event management smart contract (more detail is at http://www.noblockno.party).\r\n\r\nI once thought about replacing it with ENS and I gave up because ENS value only allows certain set of record type (eth address, ABI, etc). https://docs.ens.domains/en/latest/implementers.html#writing-a-resolver\r\n\r\nThe ClaimRegistry is better suited because both key and value can be anything (in fact you don't really need `subject` because you can namespace as part of a key just like you use Redis DB).\r\n\r\nThe big question is what is the benefit of mixing my party invitation data with Uport attestation data which are remotely related under the same contract?\r\n\r\nin case of ENS, the more dapp/wallet and exchange implement ENS interface, it allows everybody to lookup naming service in consistent manner. In case of ClaimRegistry I am not sure what benefit brings.\r\n\r\nThe alternative solution could be to propose more generic ENS record type which Uport can make use of.\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348341503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348361072",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348361072",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348361072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODM2MTA3Mg==",
    "user": {
      "login": "alex-miller-0",
      "id": 7378490,
      "node_id": "MDQ6VXNlcjczNzg0OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7378490?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alex-miller-0",
      "html_url": "https://github.com/alex-miller-0",
      "followers_url": "https://api.github.com/users/alex-miller-0/followers",
      "following_url": "https://api.github.com/users/alex-miller-0/following{/other_user}",
      "gists_url": "https://api.github.com/users/alex-miller-0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alex-miller-0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alex-miller-0/subscriptions",
      "organizations_url": "https://api.github.com/users/alex-miller-0/orgs",
      "repos_url": "https://api.github.com/users/alex-miller-0/repos",
      "events_url": "https://api.github.com/users/alex-miller-0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alex-miller-0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-01T00:04:25Z",
    "updated_at": "2017-12-01T00:04:25Z",
    "author_association": "NONE",
    "body": "@oed My ECDSACall would solve the gas problem because someone else could submit a signed message. But you're right - this functionality could be abstracted to a second layer contract. \r\n\r\n@Arachnid I like the use of `bytes32` rather than `bytes` because it keeps people from storing arbitrary data on-chain; obviously these would be hashes to the actual information you are referencing. There are also advantages to having a consistently sized key/value pair from a parsing perspective.\r\n\r\nOne immediate use I can think of is providing a hash of customer balances at a given timestamp that can later be verified by an auditor. This could be a hash of some data dump, a database itself, or a blockchain.\r\n\r\nAnother use could be for identity - someone could submit a claim that I purchased insurance for my car for 6 months. This information is persisted to their system and can be verified based on some lookup schema in this immutable key-value store. Once my insurance expires, they can revoke that claim.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348361072/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348940492",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-348940492",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 348940492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODk0MDQ5Mg==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T11:51:08Z",
    "updated_at": "2017-12-04T11:51:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Arachnid \r\n> Can you give example use-cases? What will this be used for?\r\n\r\nRight now uport uses a similar contract to store public keys of users as a simple PKI. Other than that we will use it for storing claims that needs to be read and verified by smart contracts. It could also potentially be used to revoke off-chain claims.\r\n> Why use bytes32 for key and value, instead of bytes?\r\n\r\nThis was my initial thought, but it seems like retriving a claim couldn't be done by another contract then. Atleast with the current solidity version. For example, [this](https://gist.github.com/oed/3cc42367649b626d0fe110a0cd2f16ef) does not compile. Am I doing something wrong here?\r\n> It'd be a good idea to follow the lead of other standards, and reserve keys starting with x- as nonstandardised ones, while requiring a standards process for non-prefixed keys, to avoid namespace collisions.\r\n\r\nSounds resonable.\r\n\r\n@makoto \r\n> If the function name is setClaim the event name should be ClaimSet rather than ClaimAdded ?\r\n\r\nGood point, updating the example code :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/348940492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349107795",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-349107795",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 349107795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTEwNzc5NQ==",
    "user": {
      "login": "devinrsmith",
      "id": 6764691,
      "node_id": "MDQ6VXNlcjY3NjQ2OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6764691?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/devinrsmith",
      "html_url": "https://github.com/devinrsmith",
      "followers_url": "https://api.github.com/users/devinrsmith/followers",
      "following_url": "https://api.github.com/users/devinrsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/devinrsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/devinrsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/devinrsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/devinrsmith/orgs",
      "repos_url": "https://api.github.com/users/devinrsmith/repos",
      "events_url": "https://api.github.com/users/devinrsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/devinrsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T21:14:55Z",
    "updated_at": "2017-12-04T21:14:55Z",
    "author_association": "NONE",
    "body": "I might suggest another function,\r\n\r\n```\r\nfunction removeClaim(address issuer, address subject, bytes32 key, bytes32 value) public constant returns(bytes32);\r\n```\r\n\r\nsuch that the claim is removed iff the passed in value is also equal.\r\n\r\nI might also consider returning the previous value on `setClaim` and the proposed `removeClaim`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349107795/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349112875",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-349112875",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 349112875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTExMjg3NQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T21:32:43Z",
    "updated_at": "2017-12-04T21:32:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@devinrsmith What would be the usecase for those additions? (I don't have any strong feelings either way)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349112875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349276174",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-349276174",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 349276174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTI3NjE3NA==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T11:24:43Z",
    "updated_at": "2017-12-05T11:24:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Added a function called **setSelfClaim** which allows the caller to not have to specify the `subject`. Instead `msg.sender` is used. \r\nThis is useful if you want to set a claim with a proxy contract which is also created in the same call, so you don't know the address beforehand.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349276174/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349319070",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-349319070",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 349319070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTMxOTA3MA==",
    "user": {
      "login": "machinae",
      "id": 828330,
      "node_id": "MDQ6VXNlcjgyODMzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/828330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/machinae",
      "html_url": "https://github.com/machinae",
      "followers_url": "https://api.github.com/users/machinae/followers",
      "following_url": "https://api.github.com/users/machinae/following{/other_user}",
      "gists_url": "https://api.github.com/users/machinae/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/machinae/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/machinae/subscriptions",
      "organizations_url": "https://api.github.com/users/machinae/orgs",
      "repos_url": "https://api.github.com/users/machinae/repos",
      "events_url": "https://api.github.com/users/machinae/events{/privacy}",
      "received_events_url": "https://api.github.com/users/machinae/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T14:25:22Z",
    "updated_at": "2017-12-05T14:25:22Z",
    "author_association": "NONE",
    "body": "What is the reason for only allowing an issuer to set a claim, but either the issuer or the subject to remove a claim? It seems inconsistent and could lead to potential unexpected outcomes.\r\n\r\nFor example, there was discussion on reddit about registering a claim that a particular address is malicious. You would not want to enable that malicious contract to unilaterally remove claims about itself.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349319070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349335434",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-349335434",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 349335434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTMzNTQzNA==",
    "user": {
      "login": "ukstv",
      "id": 193527,
      "node_id": "MDQ6VXNlcjE5MzUyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193527?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ukstv",
      "html_url": "https://github.com/ukstv",
      "followers_url": "https://api.github.com/users/ukstv/followers",
      "following_url": "https://api.github.com/users/ukstv/following{/other_user}",
      "gists_url": "https://api.github.com/users/ukstv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ukstv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ukstv/subscriptions",
      "organizations_url": "https://api.github.com/users/ukstv/orgs",
      "repos_url": "https://api.github.com/users/ukstv/repos",
      "events_url": "https://api.github.com/users/ukstv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ukstv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T15:18:39Z",
    "updated_at": "2017-12-05T15:18:39Z",
    "author_association": "NONE",
    "body": "@machinae Flagging an address as malicious contradicts the very notion of Self-Sovereign Identity, and claims logic. For SSI to work a claim has to be made that the address is _safe according to the party_.\r\n\r\nI bet claim removal is for an erroneous claim only.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349335434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349349813",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-349349813",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 349349813,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTM0OTgxMw==",
    "user": {
      "login": "machinae",
      "id": 828330,
      "node_id": "MDQ6VXNlcjgyODMzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/828330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/machinae",
      "html_url": "https://github.com/machinae",
      "followers_url": "https://api.github.com/users/machinae/followers",
      "following_url": "https://api.github.com/users/machinae/following{/other_user}",
      "gists_url": "https://api.github.com/users/machinae/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/machinae/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/machinae/subscriptions",
      "organizations_url": "https://api.github.com/users/machinae/orgs",
      "repos_url": "https://api.github.com/users/machinae/repos",
      "events_url": "https://api.github.com/users/machinae/events{/privacy}",
      "received_events_url": "https://api.github.com/users/machinae/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T16:00:49Z",
    "updated_at": "2017-12-05T16:00:49Z",
    "author_association": "NONE",
    "body": "@ukstv That makes sense, thanks for explaining. In other words, claims could be made by issuers to whitelist the subject, but not blacklist.\r\n\r\n@oed should this proposal include any mechanism for attestation/third party validation of claims, or is that out of scope?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349349813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349353409",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-349353409",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 349353409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTM1MzQwOQ==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T16:11:31Z",
    "updated_at": "2017-12-05T16:11:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@machinae Can you elaborate? Since `msg.sender` is used the signatures are verified by ethereum. What kind of validation are you talking about?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349353409/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349364332",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-349364332",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 349364332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTM2NDMzMg==",
    "user": {
      "login": "machinae",
      "id": 828330,
      "node_id": "MDQ6VXNlcjgyODMzMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/828330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/machinae",
      "html_url": "https://github.com/machinae",
      "followers_url": "https://api.github.com/users/machinae/followers",
      "following_url": "https://api.github.com/users/machinae/following{/other_user}",
      "gists_url": "https://api.github.com/users/machinae/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/machinae/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/machinae/subscriptions",
      "organizations_url": "https://api.github.com/users/machinae/orgs",
      "repos_url": "https://api.github.com/users/machinae/repos",
      "events_url": "https://api.github.com/users/machinae/events{/privacy}",
      "received_events_url": "https://api.github.com/users/machinae/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T16:44:56Z",
    "updated_at": "2017-12-05T16:44:56Z",
    "author_association": "NONE",
    "body": "@oed I mean more like proof of off-chain validation of the substance of the claim itself. \r\nSticking with the self-sovereign identity theme, if I submit a claim that my date of birth is 01-01-1970, `msg.sender` lets you prove that I am the one who issued that claim, but not that the claim itself is true. You would need a trusted third party that can check my DOB off chain to attest to the validity of the claim.\r\n\r\nA simple idea for an implementation would be adding a third entity, `validator` , that would attest to the validity of claims using off-chain data.\r\n\r\nSo you might have something like\r\n```\r\nfunction attestClaim(address issuer, address subject, bytes32 key, address validator) public;\r\n```\r\nwhich would record that a particular validator entity has attested that claim is valid.\r\nThis could fire off an event `ClaimAttested` similar to the other events in the proposal.\r\n\r\nThe idea being that anyone can self-issue claims, and those claims can be confirmed by multiple entities, increasing decentralization and confidence that the claim is proven. Think of it as almost a multisig scenario for claims, where n attestations might be required.\r\n\r\nvalidator in this case could be a government entity, employer, exchange, another smart contract, etc.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349364332/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349377957",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-349377957",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 349377957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTM3Nzk1Nw==",
    "user": {
      "login": "oed",
      "id": 3909429,
      "node_id": "MDQ6VXNlcjM5MDk0Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3909429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oed",
      "html_url": "https://github.com/oed",
      "followers_url": "https://api.github.com/users/oed/followers",
      "following_url": "https://api.github.com/users/oed/following{/other_user}",
      "gists_url": "https://api.github.com/users/oed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oed/subscriptions",
      "organizations_url": "https://api.github.com/users/oed/orgs",
      "repos_url": "https://api.github.com/users/oed/repos",
      "events_url": "https://api.github.com/users/oed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-05T17:27:52Z",
    "updated_at": "2017-12-05T17:27:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@machinae this could be done now by the \"validator\" calling **setClaim** with the same data as you (or anyone else) did.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/349377957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/350504428",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-350504428",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 350504428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDUwNDQyOA==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-09T20:46:35Z",
    "updated_at": "2017-12-09T20:46:35Z",
    "author_association": "NONE",
    "body": "@machinae \r\n\r\n> proof of validation of substance of claim\r\nOne goal of this kind of spec is to add credibility to claims by letting specific parties validate the claims. If my neighbor claims I have a degree from Harvard that might not mean much, but if Harvard themselves have an identity then they can issue the attestation claiming I have a degree from there, and this would be basically a proof of the substance of the claim.\r\n\r\nIf the claim is date of birth, then a claim from a local government that this is my date of birth is a good validation. The best would be a claim by the physician that actually delivered me as a baby that I was born. My birthday would then by definition be the time stamp of that claim.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/350504428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/360238923",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-360238923",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 360238923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDIzODkyMw==",
    "user": {
      "login": "ajunge",
      "id": 3538255,
      "node_id": "MDQ6VXNlcjM1MzgyNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3538255?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajunge",
      "html_url": "https://github.com/ajunge",
      "followers_url": "https://api.github.com/users/ajunge/followers",
      "following_url": "https://api.github.com/users/ajunge/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajunge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajunge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajunge/subscriptions",
      "organizations_url": "https://api.github.com/users/ajunge/orgs",
      "repos_url": "https://api.github.com/users/ajunge/repos",
      "events_url": "https://api.github.com/users/ajunge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajunge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T19:03:05Z",
    "updated_at": "2018-01-24T19:03:05Z",
    "author_association": "NONE",
    "body": "More context here: https://medium.com/uport/different-approaches-to-ethereum-identity-standards-a09488347c87",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/360238923/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/360825613",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-360825613",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 360825613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDgyNTYxMw==",
    "user": {
      "login": "FBrinkkemper",
      "id": 11577750,
      "node_id": "MDQ6VXNlcjExNTc3NzUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/11577750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FBrinkkemper",
      "html_url": "https://github.com/FBrinkkemper",
      "followers_url": "https://api.github.com/users/FBrinkkemper/followers",
      "following_url": "https://api.github.com/users/FBrinkkemper/following{/other_user}",
      "gists_url": "https://api.github.com/users/FBrinkkemper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FBrinkkemper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FBrinkkemper/subscriptions",
      "organizations_url": "https://api.github.com/users/FBrinkkemper/orgs",
      "repos_url": "https://api.github.com/users/FBrinkkemper/repos",
      "events_url": "https://api.github.com/users/FBrinkkemper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FBrinkkemper/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-26T16:02:50Z",
    "updated_at": "2018-01-26T16:02:50Z",
    "author_association": "NONE",
    "body": "I have been following and reading the various ERC discussions for identity standards, and thanks to the above linked article decided to join the discussion.\r\n\r\nAn obvious use-case for this, that is being worked on by many already, is a registry for academic degrees. I am currently in the final stage of my master thesis around this subject, and have used the implementation of this standard for a Proof of Concept.\r\n\r\nIn this PoC, the claims are used as follows: \r\nissuer = Ethereum address/Identity smart contract of University X \r\nsubject = Ethereum address/Identity smart contract of Alumni of university X \r\nkey = location of \"keys\" JSON file of University X (for example UniversityX.com/keys\r\nvalue = Degree title (MSc/BSc + abbreviation used by University X of the study (e.g. BA for Business Administration))  + a context hash.\r\n\r\nThis context hash is the merkle root of a set of certificates that follow the Blockcerts standard (blockcerts.org/). Each leaf in the merkle tree is a certificate that represents a single verifiable claim issued by the University (e.g. leaf 1: grade A for course X, leaf 2: Grade A- for course Y. etc). These blockcerts are bundled together and send to the alumni off-chain. The alumni has an app that can be used for selective disclosure of these leafs.\r\n\r\nOverall, great work. Personally, I believe that verifiable claims in all sorts of use cases /variations will be the \"killer-app\" for enterprises implementing blockchain. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/360825613/reactions",
      "total_count": 10,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/367975966",
    "html_url": "https://github.com/ethereum/EIPs/issues/780#issuecomment-367975966",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/780",
    "id": 367975966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk3NTk2Ng==",
    "user": {
      "login": "jnr101",
      "id": 10323432,
      "node_id": "MDQ6VXNlcjEwMzIzNDMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10323432?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnr101",
      "html_url": "https://github.com/jnr101",
      "followers_url": "https://api.github.com/users/jnr101/followers",
      "following_url": "https://api.github.com/users/jnr101/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnr101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnr101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnr101/subscriptions",
      "organizations_url": "https://api.github.com/users/jnr101/orgs",
      "repos_url": "https://api.github.com/users/jnr101/repos",
      "events_url": "https://api.github.com/users/jnr101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnr101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-23T10:49:27Z",
    "updated_at": "2018-02-23T10:57:17Z",
    "author_association": "NONE",
    "body": "Would it be an idea to make \"subject\" also of type \"bytes32\"? If \"subject\" is of type \"address\", it implicitly means imo that the subject is an entity/address in the Ethereum world, but there are use-cases where this is not so.\r\n \r\nAn example of another type of subject is the usage of DIDs as described in https://w3c-ccg.github.io/did-spec/ . An example of a DID: \"did:example:123456789abcdefghi\"\r\n\r\nAs another example, in the project where I am working at now, each claim about an identity is  identified by a (hash of) a unique derived HDKey (partly based on http://essay.utwente.nl/71274/1/Baars_MA_BMS.pdf). Technically this fits within the \"address\" type, but maybe the \"bytes32\" is better, because it does not refer to an address in Ethereum.\r\nFWIW, in this project we use the semantical concepts of [RDF](https://www.w3.org/TR/rdf11-concepts/) where statements are described as a triple <subject, predicate, object>. This fits very well in the described contract: subject = subject, predicate = key and object = value.\r\n\r\nOverall, looks good 👍 I especially like the concept of having one contract for all issuers. This will enforce that all issuers are using the same standard. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/367975966/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
