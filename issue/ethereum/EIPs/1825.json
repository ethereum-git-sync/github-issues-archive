{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1825",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1825/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1825/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1825/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1825",
  "id": 417164928,
  "node_id": "MDU6SXNzdWU0MTcxNjQ5Mjg=",
  "number": 1825,
  "title": "Dynamic ENS resolution",
  "user": {
    "login": "nikeshnazareth",
    "id": 22266706,
    "node_id": "MDQ6VXNlcjIyMjY2NzA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/22266706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nikeshnazareth",
    "html_url": "https://github.com/nikeshnazareth",
    "followers_url": "https://api.github.com/users/nikeshnazareth/followers",
    "following_url": "https://api.github.com/users/nikeshnazareth/following{/other_user}",
    "gists_url": "https://api.github.com/users/nikeshnazareth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nikeshnazareth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nikeshnazareth/subscriptions",
    "organizations_url": "https://api.github.com/users/nikeshnazareth/orgs",
    "repos_url": "https://api.github.com/users/nikeshnazareth/repos",
    "events_url": "https://api.github.com/users/nikeshnazareth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nikeshnazareth/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-03-05T07:59:43Z",
  "updated_at": "2019-12-17T23:18:16Z",
  "closed_at": "2019-03-05T21:08:45Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Purpose\r\n\r\nThe purpose of this issue is to sanity check and gauge interest in the following proposal for dynamic ENS address resolution.\r\n\r\nFor it to be successful, it will require the support of wallet developers.\r\n\r\nAny suggestions, clarifications or criticisms are most welcome.\r\n\r\n## Motivation\r\n\r\nConsider the ENS domain `mydomain.eth`.\r\n\r\nThis proposal would allow users to resolve any sub-domain to a unique address controlled by the domain owner. \r\n\r\nFor example, the owner could request a payment to `roadtrip-supplies.mydomain.eth`, without first configuring the sub-domain. \r\n\r\nMoreover, additional requests to the same sub-domain would (usually) return a new address each time. This would allow the owner to use a natural subdomain for a repeated activity ( eg. they could receive bounties at `bounty.mydomain.eth` or donations at `donation.mydomain.eth` ) but still use fresh addresses.\r\n\r\nThis is useful for isolating different transactions and _may_ (see Security section) improve privacy.\r\nNote: in most cases, the different addresses would be linkable with user-specific analysis. \r\n\r\n## Background\r\n\r\nAs I understand it, most (all?) wallets derive private keys and addresses using the [BIP32 Hierarchical Deterministic Wallets](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) structure.\r\n\r\nThis allows wallets to generate an infinite number of private keys from a single seed.\r\n\r\nImportantly for us, this also allows someone with a full ECDSA public key (not just an address) and a random 32-byte chain code to generate additional public keys without knowing the private key.\r\n\r\n## Protocol\r\n\r\nThe proposal is:\r\n* participating users can publish a full public ECDSA key to ENS\r\n* when wallets resolve a sub-domain:\r\n   * if there is a resolver, use it ( no change to functionality )\r\n   * if there is no resolver and the parent domain does not have an ECDSA key, resolution fails ( no change to functionality )\r\n   * if there is no resolver and the parent domain has an ECDSA key:\r\n      * use the namehash of the sub-domain as the chain code ( zero the top bit to ensure we don't produce a hardened child key )\r\n      * calculate the first corresponding child public key ( i = 0 ) and address\r\n      * keep incrementing i until a fresh address with no transactions is found\r\n      * return that address\r\n* when the private key holder wants to use the new addresses, they enter the sub-domain into the wallet software, which then:\r\n   * uses the namehash of the sub-domain as the chain code ( and zeroes the top bit as before )\r\n   * calculates the first corresponding child private key ( i = 0 ) and corresponding address\r\n   * increments i until a fresh address with no transactions is found\r\n   * displays all iterated addresses and allows the user to interact with any of them\r\n\r\n## Custom Resolver\r\n\r\nA reasonable question you might ask is: why don't you just embed that logic in a custom resolver? This would avoid requiring wallet support.\r\n\r\nThere are a few reasons why, in my opinion, this is an inferior solution:\r\n* we would need to export a full ECDSA public key anyway, so the support of wallet developers is still required ( unless the user generates their own ECDSA key )\r\n* the resolver cannot determine if an address has any transactions associated with it. It would have to simply check that the balance is non-zero.\r\n* users cannot use existing wallets to jump to the address associated with a very high i value:\r\n   * they would need to calculate the key directly, or\r\n   * the resolver would restrict i to a small range that the user could reasonably click through, resulting in collisions\r\n* every ENS resolution would involve a HMAC calculation per address generated:\r\n   * the number of operations scales linearly with the number of previously used addresses\r\n   * this could lead to a denial-of-service attack (if I send lots of transactions to a sub-domain, the resolver consumes more resources)\r\n   * Note: this is still true if it happens inside a wallet, but it is much better than on the blockchain node through the EVM.\r\n\r\n## Security\r\n\r\n### Disclosure of a private key\r\n\r\nOne important security consideration is that revealing chain codes (or in this case, using public ones) exposes the relationship between private keys. In particular, if any private key generated by this method is revealed, the entire tree would be compromised.\r\n\r\n### Race Condition\r\n\r\nIf multiple users query a sub-domain before any of them interact with the resolved address, they will all receive the same address. This is, of course, no worse than the current scheme where all users always receive the same address.\r\n\r\n### Privacy\r\n\r\nThe proposed scheme involves users locally generating the resolved address, which means they do not reveal the sub-domain that they used. If the sub-domain has enough entropy, there is no information on chain to link the resolved address to the domain or published ECDSA key, which means it is effectively an anonymous address (to everyone who does not know and cannot guess the sub-domain).\r\n\r\nOf course, any short string or any word (in any language) can easily be exhausted and should not be assumed to provide privacy.\r\n\r\n### Unknown addresses\r\n\r\nIf someone sends funds to a sub-domain that the owner does not know about, the owner will not be able to access the address (or even know that a transaction occurred).\r\n\r\nThis is particularly worrying for mistyped sub-domains. Since every sub-domain will resolve to some address, there is no way to alert the user to a mistake.\r\n\r\n## Backwards Compatibility\r\n\r\nI don't think this proposal introduces any breaking changes.\r\n\r\nAll domains/sub-domains that currently resolve will still resolve in the same way. This proposal only affects sub-domains that do not currently resolve.\r\n",
  "closed_by": {
    "login": "nikeshnazareth",
    "id": 22266706,
    "node_id": "MDQ6VXNlcjIyMjY2NzA2",
    "avatar_url": "https://avatars.githubusercontent.com/u/22266706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nikeshnazareth",
    "html_url": "https://github.com/nikeshnazareth",
    "followers_url": "https://api.github.com/users/nikeshnazareth/followers",
    "following_url": "https://api.github.com/users/nikeshnazareth/following{/other_user}",
    "gists_url": "https://api.github.com/users/nikeshnazareth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nikeshnazareth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nikeshnazareth/subscriptions",
    "organizations_url": "https://api.github.com/users/nikeshnazareth/orgs",
    "repos_url": "https://api.github.com/users/nikeshnazareth/repos",
    "events_url": "https://api.github.com/users/nikeshnazareth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nikeshnazareth/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1825/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1825/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469586090",
    "html_url": "https://github.com/ethereum/EIPs/issues/1825#issuecomment-469586090",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1825",
    "id": 469586090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTU4NjA5MA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T08:26:19Z",
    "updated_at": "2019-03-05T08:26:19Z",
    "author_association": "MEMBER",
    "body": "Thanks for bringing this up! I've been considering the prospect of wildcard subdomains for some time.\r\n\r\nThe 'custom resolver' approach you outline is, in my mind, very much the superior one; the only additional functionality it requires from ENS and from wallets is to do a lookup in the resolver of the parent domain if the leaf domain does not exist; all other functionality can be baked into the resolver. The first approach you outline, on the other hand, would require all resolvers to add in a large amount of additional functionality, but would only support one record type (`addr()`).\r\n\r\nUsing a custom resolver also permits many other use-cases for wildcard domains we may not have already considered - such as wildcard resolution for other record types such as contenthash.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469586090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469605460",
    "html_url": "https://github.com/ethereum/EIPs/issues/1825#issuecomment-469605460",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1825",
    "id": 469605460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTYwNTQ2MA==",
    "user": {
      "login": "nikeshnazareth",
      "id": 22266706,
      "node_id": "MDQ6VXNlcjIyMjY2NzA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22266706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nikeshnazareth",
      "html_url": "https://github.com/nikeshnazareth",
      "followers_url": "https://api.github.com/users/nikeshnazareth/followers",
      "following_url": "https://api.github.com/users/nikeshnazareth/following{/other_user}",
      "gists_url": "https://api.github.com/users/nikeshnazareth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nikeshnazareth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nikeshnazareth/subscriptions",
      "organizations_url": "https://api.github.com/users/nikeshnazareth/orgs",
      "repos_url": "https://api.github.com/users/nikeshnazareth/repos",
      "events_url": "https://api.github.com/users/nikeshnazareth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nikeshnazareth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T09:25:38Z",
    "updated_at": "2019-03-05T09:25:38Z",
    "author_association": "NONE",
    "body": "Thanks for the quick reply!\r\n\r\nI think I might have conflated two issues which should be separated.\r\n\r\nI completely agree with your flow. We should definitely not limit resolvers in what they can support. The way I phrased my proposal suggested that the wallet would follow a particular strategy when faced with a missing leaf node, and you're right - the (parent) resolver should decide.\r\n\r\nBut suppose we get to that stage and the resolver decides \"generate a fresh address controlled by the domain owner and return that as the resolution\", how would it go about doing that? Wouldn't it suffer from the challenges I mentioned? \r\n\r\n>  The first approach you outline, on the other hand, would require all resolvers to add in a large amount of additional functionality, but would only support one record type (`addr()`).\r\n\r\nThe way I was imagining it, no existing resolvers would change, and the ones that choose to support the proposal would simply add an ECDSA public key, which the owner exported from a wallet, as a record type. In fact, that key could be the ENS resolution. All of the new functionality would be in the wallet software, which already deals with BIP32 address generation. \r\n\r\nJust to be explicit, to accomodate your objection, I would change the proposal as follows:\r\n> * if there is no resolver ~~and the parent domain does not have an ECDSA key, resolution fails ( no change to functionality )~~, use the parent resolver\r\n> * ~~if there is no resolver and the parent domain has an ECDSA key:~~ if ENS resolves with an ECDSA public key:\r\n\r\nDoes that sound more sensible? Thanks for the feedback.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469605460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469818615",
    "html_url": "https://github.com/ethereum/EIPs/issues/1825#issuecomment-469818615",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1825",
    "id": 469818615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTgxODYxNQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T19:10:13Z",
    "updated_at": "2019-03-05T19:10:13Z",
    "author_association": "MEMBER",
    "body": "> But suppose we get to that stage and the resolver decides \"generate a fresh address controlled by the domain owner and return that as the resolution\", how would it go about doing that? Wouldn't it suffer from the challenges I mentioned?\r\n\r\nYes, it would - but in my mind that's a particular set of design decisions you've taken, when there are a number of other viable solutions. For instance, simply taking the name hash and using (part of) it as a key in an HD wallet to generate a single address, regardless of whether it's been used before, is both practical to implement and achieves the goal of instant addresses with no onchain overhead per name/address.\r\n\r\n> The way I was imagining it, no existing resolvers would change, and the ones that choose to support the proposal would simply add an ECDSA public key, which the owner exported from a wallet, as a record type. In fact, that key could be the ENS resolution. All of the new functionality would be in the wallet software, which already deals with BIP32 address generation.\r\n\r\nSorry, I was overloading my terminology; I meant to say \"client software\", not \"resolvers\".\r\n\r\nBear in mind that HD wallets are not the only ENS clients; browsers, DApps, etc, all need to do this. Asking them all to add support for HD wallet derivation seems like unnecessary overhead, for one very specific use-case. Putting this on the resolver means the only change they need to make is a second resolution step if the first one failed because the name did not exist.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469818615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469857784",
    "html_url": "https://github.com/ethereum/EIPs/issues/1825#issuecomment-469857784",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1825",
    "id": 469857784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTg1Nzc4NA==",
    "user": {
      "login": "nikeshnazareth",
      "id": 22266706,
      "node_id": "MDQ6VXNlcjIyMjY2NzA2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22266706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nikeshnazareth",
      "html_url": "https://github.com/nikeshnazareth",
      "followers_url": "https://api.github.com/users/nikeshnazareth/followers",
      "following_url": "https://api.github.com/users/nikeshnazareth/following{/other_user}",
      "gists_url": "https://api.github.com/users/nikeshnazareth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nikeshnazareth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nikeshnazareth/subscriptions",
      "organizations_url": "https://api.github.com/users/nikeshnazareth/orgs",
      "repos_url": "https://api.github.com/users/nikeshnazareth/repos",
      "events_url": "https://api.github.com/users/nikeshnazareth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nikeshnazareth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-05T21:08:45Z",
    "updated_at": "2019-03-05T21:08:45Z",
    "author_association": "NONE",
    "body": "> For instance, simply taking the name hash and using (part of) it as a key in an HD wallet to generate a single address, regardless of whether it's been used before\r\n\r\nI'm not sure if that captures the use case - especially without a wallet mechanism to access the new address. I'll keep thinking about it.\r\n\r\nNevertheless, the point about other ENS clients is well taken. I'll close the issue - thanks for the feedback!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/469857784/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/566792996",
    "html_url": "https://github.com/ethereum/EIPs/issues/1825#issuecomment-566792996",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1825",
    "id": 566792996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njc5Mjk5Ng==",
    "user": {
      "login": "bijeebuss",
      "id": 11799228,
      "node_id": "MDQ6VXNlcjExNzk5MjI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11799228?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bijeebuss",
      "html_url": "https://github.com/bijeebuss",
      "followers_url": "https://api.github.com/users/bijeebuss/followers",
      "following_url": "https://api.github.com/users/bijeebuss/following{/other_user}",
      "gists_url": "https://api.github.com/users/bijeebuss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bijeebuss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bijeebuss/subscriptions",
      "organizations_url": "https://api.github.com/users/bijeebuss/orgs",
      "repos_url": "https://api.github.com/users/bijeebuss/repos",
      "events_url": "https://api.github.com/users/bijeebuss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bijeebuss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-17T23:18:16Z",
    "updated_at": "2019-12-17T23:18:16Z",
    "author_association": "NONE",
    "body": "Did anything ever come out of this? I would love to be able to use a wildcard ENS domain with a custom resolver.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/566792996/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
