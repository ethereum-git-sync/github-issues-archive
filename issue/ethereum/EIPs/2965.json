{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2965",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2965",
  "id": 697860523,
  "node_id": "MDU6SXNzdWU2OTc4NjA1MjM=",
  "number": 2965,
  "title": "Disccussion on Finalizable Service Token (FST)",
  "user": {
    "login": "AlePart",
    "id": 12231846,
    "node_id": "MDQ6VXNlcjEyMjMxODQ2",
    "avatar_url": "https://avatars.githubusercontent.com/u/12231846?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AlePart",
    "html_url": "https://github.com/AlePart",
    "followers_url": "https://api.github.com/users/AlePart/followers",
    "following_url": "https://api.github.com/users/AlePart/following{/other_user}",
    "gists_url": "https://api.github.com/users/AlePart/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AlePart/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AlePart/subscriptions",
    "organizations_url": "https://api.github.com/users/AlePart/orgs",
    "repos_url": "https://api.github.com/users/AlePart/repos",
    "events_url": "https://api.github.com/users/AlePart/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AlePart/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2020-09-10T12:09:13Z",
  "updated_at": "2021-11-15T16:21:23Z",
  "closed_at": "2021-11-15T16:21:23Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\n---\r\neip: <to be assigned>\r\ntitle: Finalizable Service Token\r\nauthor: Alessandro Partesotti <a.partesotti@gmail.com>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/2965\r\nstatus: Idea\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2020-09-10\r\n---\r\n```\r\n\r\n## Simple Summary\r\nA standard interface for Finalizable Service Token enables companies or professionals to emit a token for its services.\r\n\r\n## Abstract \r\nThis improvemnt wnats to **propose** a **service token transferable n-times** and **mintable**.\r\n\r\nThe main focus of this token Is about a distributed service that can be used with this token. \r\n\r\n## Motivation\r\nI will try to explain this inital idea by examples.\r\n\r\n### Application Example 1 (On Demand Service)\r\nA company wants to emit a license for software that it develops the machine with this software wants to send a paid token with its custom data to a user wallet to enable software X on machine Y for 1 yr.\r\nThe token can't be transferred after finalization with or without data or after a certain amount of transfer. The multi transfer can be useful in case of using other contracts before, or using different company wallets.\r\n\r\n### Application Example 2 (Validation service)\r\nlet Actor1 Actor2 buy 2 different Token and wants to make a Deal with a Validation using a contract Validator.\r\n\r\n- Actor1 finalize a token with data given by Actor2 and sent it to a Validator\r\n- Actor2 finalize a token with data given by Actor1 and sent it to a Validator\r\n- Validator mint 2 different tokens as a Deal form Actor1 and Actor2 and finalize 2 tokens that send to actors.\r\n\r\n## Specification\r\nI just thought an initial basic interface for this EIP and a possible implementation\r\n\r\n```solidity\r\npragma solidity ^0.7.1;\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERCXXX{\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n        /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Mint a given `tokenId` to `to`\r\n     *\r\n     *Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must not exist.\r\n     * - `allowedMaxTransfer` maximum transfers for the minted token\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function mint(address to, uint256 tokenId, uint256 allowedMaxTransfer) external;\r\n\r\n    /**\r\n     * @dev Finalizes the token with given `tokenId` and send it from `from` to `to` adding `data` to token.\r\n     * after calling this function token can't be anymore transfered and data can't be modified anymore.\r\n     *\r\n     *Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist.\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function finalizeAndTransferFrom(address from,address to, uint256 tokenId, string memory data) external;\r\n\r\n     /**\r\n     * @dev Transfer token from `from` to `to` and decrement the internal transfer counter.\r\n     *\r\n     *Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist.\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from,address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gets the token by giveing the `tokenId`.\r\n     *\r\n     *Requirements:\r\n     *\r\n     * - `tokenId` token must exist.\r\n     */\r\n    function getTokenData(uint256 tokenID) external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Gets the remaining transfer for the given `tokenId`.\r\n     *\r\n     *Requirements:\r\n     *\r\n     * - `tokenId` token must exist.\r\n     */    \r\n    function getResidualTransfer(uint256 tokenId) external view returns(uint256) ;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address[] memory operators);\r\n\r\n\r\n}\r\ncontract ERCxxx is IERCXXX{\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(address=>bool) private _approvedMinters;\r\n    mapping(uint256 => uint256) private _residualTransfer;\r\n    mapping(uint256 => address[]) private _tokenOwners;\r\n    mapping(uint256 => string) private _tokenData;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    uint256[] private _tokens;\r\n\r\n\r\n\r\n    constructor(string memory tokenName, string memory tokenSymbol)\r\n    {\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n       \r\n        _approvedMinters[msg.sender] = true;\r\n    }\r\n    function Symbol()public view returns(string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n    function _exists(uint256 tokenId) private view returns(bool)\r\n    {\r\n        if(_tokenOwners[tokenId].length == 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    function _isOwnerOf(address owner,uint256 tokenId) private view returns(bool)\r\n    {\r\n        address[] memory addr = _tokenOwners[tokenId];\r\n        for(uint256 i =0; i< addr.length; i++)\r\n        {\r\n            if(addr[i]==owner)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function mint(address to, uint256 tokenId, uint256 allowedMaxTransfer) public override\r\n    {\r\n        require(_approvedMinters[msg.sender],\"ERCXXX: you can't mint this token\");\r\n        require(to != address(0), \"ERCXXX: mint require a not null address\");\r\n        require(!_exists(tokenId), \"ERCXXX: Token id already exists\");\r\n        _tokens.push(tokenId);\r\n        _tokenOwners[tokenId].push(to);\r\n        _residualTransfer[tokenId] = allowedMaxTransfer;\r\n        _balances[to]++;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tokens.length;\r\n    }\r\n\r\n    function _transfer(address from,address to, uint256 tokenId, string memory data) private {\r\n        \r\n        _residualTransfer[tokenId]--;\r\n        delete _tokenOwners[tokenId];\r\n        _tokenOwners[tokenId].push(to);\r\n        _tokenData[tokenId] = data;\r\n        _balances[from]--;\r\n        _balances[to]++;\r\n    }\r\n\r\n    function _transferCheck(address from,uint256 tokenId) private view\r\n    {\r\n        require(_residualTransfer[tokenId] > 0, \"ERCXXX: transfer limit reached for this token\");\r\n        require(_isOwnerOf(from,tokenId), \"ERCXXX: only token owner can finalize and/or transfer\");\r\n    }\r\n    function finalizeAndTransfer(address to, uint256 tokenId, string memory data) public\r\n    {\r\n        _transferCheck(msg.sender,tokenId);\r\n        _residualTransfer[tokenId]=1;\r\n        _transfer(msg.sender,to,tokenId,data);\r\n    }\r\n\r\n    function transfer(address to, uint256 tokenId) public\r\n    {\r\n        _transferCheck(msg.sender,tokenId);\r\n        _transfer(msg.sender,to,tokenId,\"\");\r\n    }\r\n    \r\n    function finalizeAndTransferFrom(address from,address to, uint256 tokenId, string memory data) public override\r\n    {\r\n        _transferCheck(from,tokenId);\r\n        _residualTransfer[tokenId]=1;\r\n        _transfer(from,to,tokenId,data);\r\n    }\r\n\r\n    function transferFrom(address from,address to, uint256 tokenId) public override\r\n    {\r\n        _transferCheck(from,tokenId);\r\n        _transfer(from,to,tokenId,\"\");\r\n    }\r\n\r\n\r\n    \r\n    function getResidualTransfer(uint256 tokenId) public view override returns(uint256)\r\n    {\r\n        return _residualTransfer[tokenId];\r\n    }\r\n    \r\n    function balanceOf(address wallet) public view override returns(uint256)\r\n    {\r\n        return _balances[wallet];\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public override\r\n    {\r\n        _tokenOwners[tokenId].push(to);\r\n    }\r\n\r\n\r\n    function getApproved(uint256 tokenId) public view override returns (address[] memory operators)\r\n    {\r\n        return _tokenOwners[tokenId];\r\n    }\r\n    \r\n    function getTokenData(uint256 tokenID) public view override returns(string memory) \r\n    {\r\n        return _tokenData[tokenID];\r\n    }\r\n}\r\n```\r\n\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2965/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/690232595",
    "html_url": "https://github.com/ethereum/EIPs/issues/2965#issuecomment-690232595",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965",
    "id": 690232595,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MDIzMjU5NQ==",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2020-09-10T12:09:56Z",
    "updated_at": "2020-09-10T12:09:56Z",
    "author_association": "NONE",
    "body": "Since this is your first issue, we kindly remind you to check out [EIP-1](https://eips.ethereum.org/EIPS/eip-1) for guidance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/690232595/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/690322045",
    "html_url": "https://github.com/ethereum/EIPs/issues/2965#issuecomment-690322045",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965",
    "id": 690322045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MDMyMjA0NQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-10T14:21:07Z",
    "updated_at": "2020-09-10T14:21:07Z",
    "author_association": "MEMBER",
    "body": "This appears to be almost identical to ERC-20, but with `finalize` instead of the commonly named `burn`.  Am I misunderstanding something?\r\n\r\nThe motivation section should explain why this needs to be a Standard rather than just a Good Idea since it isn't immediately obvious.  A standard is valuable when there is a many-to-many relationship between parties.  An example of something that needs a standard is web pages because there are many browsers that come and go over time and there are many web pages on the internet that come and go over time.  In order for all web pages to work on all browsers, we need a standard.  If you have a one to many relationship or a one to one relationship, then you don't need a standard and instead just have a Good Idea that you can implement.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/690322045/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/690330854",
    "html_url": "https://github.com/ethereum/EIPs/issues/2965#issuecomment-690330854",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965",
    "id": 690330854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MDMzMDg1NA==",
    "user": {
      "login": "AlePart",
      "id": 12231846,
      "node_id": "MDQ6VXNlcjEyMjMxODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/12231846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlePart",
      "html_url": "https://github.com/AlePart",
      "followers_url": "https://api.github.com/users/AlePart/followers",
      "following_url": "https://api.github.com/users/AlePart/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlePart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlePart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlePart/subscriptions",
      "organizations_url": "https://api.github.com/users/AlePart/orgs",
      "repos_url": "https://api.github.com/users/AlePart/repos",
      "events_url": "https://api.github.com/users/AlePart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlePart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-10T14:34:34Z",
    "updated_at": "2020-09-10T14:41:34Z",
    "author_association": "NONE",
    "body": "> This appears to be almost identical to ERC-20, but with `finalize` instead of the commonly named `burn`. Am I misunderstanding something?\r\n> \r\n> The motivation section should explain why this needs to be a Standard rather than just a Good Idea since it isn't immediately obvious. A standard is valuable when there is a many-to-many relationship between parties. An example of something that needs a standard is web pages because there are many browsers that come and go over time and there are many web pages on the internet that come and go over time. In order for all web pages to work on all browsers, we need a standard. If you have a one to many relationship or a one to one relationship, then you don't need a standard and instead, just have a Good Idea that you can implement.\r\n\r\nyeah, it's similar to ERC-20  and ERC-721 but does not respect all the functions of ERC721 i.e. does not have approveForAll. The burning method sends the token to 0x00000 here the token remains in your wallet but you cant transfer it again after finalization. Feel free to correct my sentence if I misunderstand something.\r\n\r\nSorry for using the standard keyword its inappropriate you gotcha @MicahZoltu \r\n\r\n\r\nedit: I know that tokens are in the chain and not in the wallet but, the sense of burn is about to destroy the token by sending it in the 0 address, in this case, the token is finalized at your address and is not transferable anymore.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/690330854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/690397080",
    "html_url": "https://github.com/ethereum/EIPs/issues/2965#issuecomment-690397080",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965",
    "id": 690397080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MDM5NzA4MA==",
    "user": {
      "login": "AlePart",
      "id": 12231846,
      "node_id": "MDQ6VXNlcjEyMjMxODQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/12231846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlePart",
      "html_url": "https://github.com/AlePart",
      "followers_url": "https://api.github.com/users/AlePart/followers",
      "following_url": "https://api.github.com/users/AlePart/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlePart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlePart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlePart/subscriptions",
      "organizations_url": "https://api.github.com/users/AlePart/orgs",
      "repos_url": "https://api.github.com/users/AlePart/repos",
      "events_url": "https://api.github.com/users/AlePart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlePart/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-10T15:57:22Z",
    "updated_at": "2020-09-10T15:58:01Z",
    "author_association": "NONE",
    "body": "@MicahZoltu so this token can be a receipt for a used service or an \"enable\" token that permits you something for a certain time (like access to something or use an SW object until a date.  Think about the income declaration you may track your expense by paying with a wallet using a Smart Contract that gives you back a service token as a receipt of purchase.\r\nI'm using it to develop a decentralized SW license service at the moment.  \r\n\r\nMaybe this token idea exciting only me ;) \r\n\r\nThank you for your time Micah",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/690397080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/956322225",
    "html_url": "https://github.com/ethereum/EIPs/issues/2965#issuecomment-956322225",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965",
    "id": 956322225,
    "node_id": "IC_kwDOAq426M45AFGx",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-01T15:16:20Z",
    "updated_at": "2021-11-01T15:16:20Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/956322225/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/969077073",
    "html_url": "https://github.com/ethereum/EIPs/issues/2965#issuecomment-969077073",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2965",
    "id": 969077073,
    "node_id": "IC_kwDOAq426M45wvFR",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-15T16:21:22Z",
    "updated_at": "2021-11-15T16:21:22Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/969077073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
