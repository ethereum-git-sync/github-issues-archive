{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/644/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/644/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/644/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/644",
  "id": 236483101,
  "node_id": "MDU6SXNzdWUyMzY0ODMxMDE=",
  "number": 644,
  "title": "ERC 644: Token Standard for Modular and Upgradeable Tokens ",
  "user": {
    "login": "chrisfranko",
    "id": 3543217,
    "node_id": "MDQ6VXNlcjM1NDMyMTc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chrisfranko",
    "html_url": "https://github.com/chrisfranko",
    "followers_url": "https://api.github.com/users/chrisfranko/followers",
    "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
    "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
    "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
    "repos_url": "https://api.github.com/users/chrisfranko/repos",
    "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 33,
  "created_at": "2017-06-16T13:28:42Z",
  "updated_at": "2022-01-16T03:14:15Z",
  "closed_at": "2022-01-16T03:14:15Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Preamble\r\n\r\n    EIP: <to be assigned>\r\n    Title: Token standard for upgradeable and modular tokens\r\n    Author: christopher@expanse.tech\r\n    Type: Standard Track\r\n    Category ERC\r\n    Status: Draft\r\n    Created: 2017/06/16\r\n\r\n## Simple Summary\r\nThe idea is to abstract user balances away from the token's business logic making the tokens upgradeable, and opens the door for modular functionality to be added over time.\r\n\r\n## Abstract\r\nAs it stands now, if any ERC20 tokens were to encounter any sort of fatal flaw, ever balance on that token would be at risk and recovering from the flaw would be cumbersome at best. This ERC proposes a way to accomplish the tasks below by abstracting the user balances away from the business logic.\r\n\r\n - Makes tokens upgradeable\r\n - Allows for modular functionality\r\n - Creates a way to insulate user balances from exploitable code \r\n\r\n## Motivation\r\nProtecting consumers from potential exploits.\r\n\r\n## Specification\r\n\r\n## Balances.sol\r\n\r\n### Methods\r\n\r\n#### getBalances\r\nReturns an account's token balance.\r\n\r\n`function getBalance(address _acct) returns(uint balance)`\r\n\r\n#### incBalance\r\nIncreases an account's token balance.\r\n\r\n`function incBalance(address _acct, uint _val) onlyModule returns(bool success)`\r\n\r\n#### decBalance\r\nDecreases an account's token balance.\r\n\r\n`function decBalance(address _acct, uint _val) onlyModule returns(bool success)`\r\n\r\n#### getAllowance\r\nReturns an accounts allowed balance to be spent on behalf of `owner`.\r\n\r\n`function getAllowance(address _owner, address _spender) returns(uint remaining)`\r\n\r\n#### setApprove\r\nAllows `_spender` to spend from `_sender's account. When the function is called it over writes the current allowance with `_value`.\r\n\r\n` function setApprove(address _sender, address _spender, uint256 _value) onlyModule returns(bool success)`\r\n\r\n#### decApprove\r\nDecreases an accounts allowance amount by `_value`.\r\n\r\n`function decApprove(address _from, address _spender, uint _value) onlyModule returns(bool success)`\r\n\r\n#### getModule\r\nReturns if module `_acct` is active or not.\r\n\r\n`function getModule(address _acct) returns (bool success)`\r\n\r\n#### setModule\r\nSets module `_acct` to true or false.\r\n\r\n`function setModule(address _acct, bool _set) onlyRoot returns(bool success)`\r\n\r\n#### getTotalSupply\r\nReturns the total supply.\r\n\r\n`function getTotalSupply() returns(uint)`\r\n\r\n#### incTotalSupply\r\nIncreases the total supply.\r\n\r\n`function incTotalSupply(uint _val) onlyModule returns(bool success)`\r\n\r\n#### decTotalSupply\r\nDecreases the total supply.\r\n\r\n`function decTotalSupply(uint _val) onlyModule returns(bool success)`\r\n\r\n#### transferRoot\r\nTransfers to a new account.\r\n\r\n`function transferRoot(address _new) onlyRoot returns(bool success)`\r\n\r\n### Events\r\n\r\n#### BalanceAdj\r\nTriggered when balances are adjusted.\r\n\r\n`event BalanceAdj(address indexed Module, address indexed Account, uint Amount, string Polarity);`\r\n\r\n#### ModuleSet\r\nTriggered when modules are updated.\r\n\r\n`event ModuleSet(address indexed Module, bool indexed Set);`\r\n\r\n## Implementation\r\nhttps://github.com/expanse-org/Tokens/tree/master/Token_Contracts/contracts\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/644/reactions",
    "total_count": 12,
    "+1": 11,
    "-1": 1,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/644/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309666377",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-309666377",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 309666377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTY2NjM3Nw==",
    "user": {
      "login": "jefffreey",
      "id": 29522201,
      "node_id": "MDQ6VXNlcjI5NTIyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/29522201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jefffreey",
      "html_url": "https://github.com/jefffreey",
      "followers_url": "https://api.github.com/users/jefffreey/followers",
      "following_url": "https://api.github.com/users/jefffreey/following{/other_user}",
      "gists_url": "https://api.github.com/users/jefffreey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jefffreey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jefffreey/subscriptions",
      "organizations_url": "https://api.github.com/users/jefffreey/orgs",
      "repos_url": "https://api.github.com/users/jefffreey/repos",
      "events_url": "https://api.github.com/users/jefffreey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jefffreey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-20T07:17:37Z",
    "updated_at": "2017-06-20T07:17:37Z",
    "author_association": "NONE",
    "body": "I came for a similar thing, which is upgradeable contracts. Do we have a standard Data/Interface contracts? Should I make an EIP for this?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/309666377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315328961",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-315328961",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 315328961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTMyODk2MQ==",
    "user": {
      "login": "gislik",
      "id": 943039,
      "node_id": "MDQ6VXNlcjk0MzAzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/943039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gislik",
      "html_url": "https://github.com/gislik",
      "followers_url": "https://api.github.com/users/gislik/followers",
      "following_url": "https://api.github.com/users/gislik/following{/other_user}",
      "gists_url": "https://api.github.com/users/gislik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gislik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gislik/subscriptions",
      "organizations_url": "https://api.github.com/users/gislik/orgs",
      "repos_url": "https://api.github.com/users/gislik/repos",
      "events_url": "https://api.github.com/users/gislik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gislik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T10:37:31Z",
    "updated_at": "2017-07-14T10:37:31Z",
    "author_association": "NONE",
    "body": "Having developed a token system I'm interested in this ERC. In addition I'm using Solidity libraries to reduce gas for deployment of the tokens and simplifying upgrades in case of bugs found or if the need for added functionality arises.\r\n\r\nhttps://github.com/monerium/smart-contracts/tree/master/contracts\r\n\r\nI'm guessing that your motivation for standardising the modules of the system is to mix-and-match different implementations of storage and business logic, am I right?\r\n\r\nIn my design I found it important to split the token not only into storage and business logic but:\r\n\r\n* [Frontend](https://github.com/monerium/smart-contracts/blob/master/contracts/TokenFrontend.sol)\r\n    This is a contract which implements the ERC20 standard by forwarding all method calls to the Controller. The main reason for this is to have a fixed address for users to interact with. This will become less important when ENS and Token registries become more widely used but for now most (if not all the wallets and other token software) uses hard coded address for token addresses.\r\n* [Controller](https://github.com/monerium/smart-contracts/blob/master/contracts/StandardController.sol) ([ERC20Lib](https://github.com/monerium/smart-contracts/blob/master/contracts/ERC20Lib.sol))\r\n    Business logic implementation.\r\n* [Storage](https://github.com/monerium/smart-contracts/blob/master/contracts/TokenStorage.sol) ([TokenStorageLib](https://github.com/monerium/smart-contracts/blob/master/contracts/TokenStorageLib.sol))\r\n    This is what you call Balances. The main purpose is to keep the balances outside of the business logic and frontend so that it may be reused in case changes to the business logic is needed.\r\n\r\nIt seems that we've come up with a very comparable solution just using different terminology and I wanted to participate in defining a common set of interfaces. Unfortunately it may be too late for me to adapt my code to this standard since it has already been deployed to Rinkeby testnet and will later this year be deployed on the mainnet but I think I have something to contribute to the discussion :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315328961/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315404659",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-315404659",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 315404659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQwNDY1OQ==",
    "user": {
      "login": "chrisfranko",
      "id": 3543217,
      "node_id": "MDQ6VXNlcjM1NDMyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisfranko",
      "html_url": "https://github.com/chrisfranko",
      "followers_url": "https://api.github.com/users/chrisfranko/followers",
      "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
      "repos_url": "https://api.github.com/users/chrisfranko/repos",
      "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-14T16:30:45Z",
    "updated_at": "2017-07-18T00:32:23Z",
    "author_association": "NONE",
    "body": "Thats exactly right Gisli! :D",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315404659/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315614698",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-315614698",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 315614698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTYxNDY5OA==",
    "user": {
      "login": "davux",
      "id": 134428,
      "node_id": "MDQ6VXNlcjEzNDQyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/134428?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davux",
      "html_url": "https://github.com/davux",
      "followers_url": "https://api.github.com/users/davux/followers",
      "following_url": "https://api.github.com/users/davux/following{/other_user}",
      "gists_url": "https://api.github.com/users/davux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davux/subscriptions",
      "organizations_url": "https://api.github.com/users/davux/orgs",
      "repos_url": "https://api.github.com/users/davux/repos",
      "events_url": "https://api.github.com/users/davux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-16T14:57:11Z",
    "updated_at": "2017-07-16T14:57:11Z",
    "author_association": "NONE",
    "body": "The idea of separating balances from business logic seems not only fair, but necessary. However, why not keep ERC20 function naming like @gislik does in his approach?\r\n\r\nIf there is value in chaning the functions' logic such as e.g. `incBalance()`  – and I would say there is –, then that should be discussed as a proper ERC20 evolution proposal. At any rate, name consistency between the core token interface (be it ERC20 or any evolution of it) and the storage contract should be considered important.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315614698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315860200",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-315860200",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 315860200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTg2MDIwMA==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T19:41:04Z",
    "updated_at": "2017-07-17T19:51:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "You should keep in mind that ERC #20 token standard functions are leading to monetary losses. I wrote a number of articles about it (for example [this one](https://www.reddit.com/r/ethereum/comments/6h17aw/critical_problem_of_erc20_tokens/)).\r\n\r\nThe main problem of ERC #20 token is that it has two ways of transferring funds:\r\n1. `transfer`\r\n2. `approve` + `transferFrom`\r\n\r\nwhich assumes that first pattern is processed without handling by the receiver and the second pattern simulates transaction handling.\r\n\r\nThe purpose of `approve` + `transferFrom` was described in [solidity documentation](https://media.readthedocs.org/pdf/solidity/develop/solidity.pdf) at page 39: \r\n\r\n>Warning: There are some dangers in using send:  The transfer fails if the call stack depth is at 1024 (this can always be forced by the caller) and it also fails if the recipient runs out of gas.  So in order to make safe Ether transfers, always check the return value of send, use transfer or **even better: use a pattern where the recipient withdraws the money**\r\n\r\nThis was relevant at the moment of creating ERC20 token standard, but the stack depth attack was fixed through EIP #150 . As the result of this `approve` + `transferFrom` must be considere **deprecated** now.\r\n\r\nI think that there is no need to develop and implement the `approve / allowance` mechanism because:\r\n1. `approve + transferFrom` is leading to monetary losses since it assumes another way to transfer tokens (And an alternative way to execute a transaction often does not implement handling)\r\n2. vulnerability to re-approval attack is described [here](https://drive.google.com/file/d/0ByMtMw2hul0EN3NCaVFHSFdxRzA/view)\r\n3. `approve` is superfluous since common pattern of transactions handling is fallback function execution. It is already described in ERC #223 \r\n\r\nI'd like to recommend to remove `decApprove` / `setApprove` / `getAllowance` from the token standard because of described problems of this approach.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315860200/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315914612",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-315914612",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 315914612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTkxNDYxMg==",
    "user": {
      "login": "gislik",
      "id": 943039,
      "node_id": "MDQ6VXNlcjk0MzAzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/943039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gislik",
      "html_url": "https://github.com/gislik",
      "followers_url": "https://api.github.com/users/gislik/followers",
      "following_url": "https://api.github.com/users/gislik/following{/other_user}",
      "gists_url": "https://api.github.com/users/gislik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gislik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gislik/subscriptions",
      "organizations_url": "https://api.github.com/users/gislik/orgs",
      "repos_url": "https://api.github.com/users/gislik/repos",
      "events_url": "https://api.github.com/users/gislik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gislik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T23:31:31Z",
    "updated_at": "2017-07-17T23:35:08Z",
    "author_association": "NONE",
    "body": "@davux \r\nI agree 💯  with your naming comments &mdash; coming up with good names is probably one of the hardest problems in software development :) I am however a bit confused since my implementation has an almost identical method calls to @chrisfranko version:\r\n* `function `[`addBalance`](/monerium/smart-contracts/blob/master/contracts/TokenStorageLib.sol#L15)`(TokenStorage storage self, address to, uint amount)`\r\n* `function `[`subBalance`](/monerium/smart-contracts/blob/master/contracts/TokenStorageLib.sol#L20)`(TokenStorage storage self, address from, uint amount)`\r\n\r\nThe purpose of those methods is to interact with the token storage (@chrisfranko calls this Balances.sol). As such these method names are actually pretty descriptive and while _not_ a part of the ERC #20 they are used to implement the ERC20 methods, `transfer` and `transferFrom`.  I'm willing to put my weight behind the names `incBalance` and `decBalance`.\r\n\r\nPlease let me know If I'm somehow misunderstanding your comment.\r\n\r\n@Dexaran \r\nWhen I was coming up with the the design for the token system I read the the ERC #223  thread and I was very impressed by your proposal. In fact I think your ideas solve many (if not most) of the problems discussed in the thread. \r\n\r\nHowever it seems that ERC20 has already become the _de facto_ standard even though it has not formally been accepted as an EIP. Both [0x](https://0xproject.com/) and [swap](https://swap.tech/) rely on the `approve`/`transferFrom` and in fact unless I'm misunderstanding something I think it's actually better to not send the 0x settlement contract my token with `transfer` (as suggested by ERC223) since I may want to cancel my trade and I don't understand how I would recover my token if I had already sent it away. How would you do that using ERC223 tokens?\r\n\r\nI'm coming up with design ideas how to make my `approve`/`transferFrom` implementation safer but I didn't want to mix those ideas with the original presentation of the token system. However, one simple idea (inspired by ERC223) is to not allow `transfer`ing to contracts that don't implement the [`TokenRecipient`](/monerium/smart-contracts/blob/master/contracts/TokenRecipient.sol). If the contract does indeed implement the interface, `transfer` would be equivalent of calling `approveAndCall`. Does this sound like a compromise that's worth exploring?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315914612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315923545",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-315923545",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 315923545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTkyMzU0NQ==",
    "user": {
      "login": "chrisfranko",
      "id": 3543217,
      "node_id": "MDQ6VXNlcjM1NDMyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisfranko",
      "html_url": "https://github.com/chrisfranko",
      "followers_url": "https://api.github.com/users/chrisfranko/followers",
      "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
      "repos_url": "https://api.github.com/users/chrisfranko/repos",
      "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T00:31:54Z",
    "updated_at": "2017-07-18T00:31:54Z",
    "author_association": "NONE",
    "body": "@Dexaran \r\nRE approve: I'm completely A-OK with your suggestion of removing the approve and transferFrom methods from this ERC. Let me read ERC223 more and ill make an ERC223 branch.\r\n\r\n@gislik \r\nThats right.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315923545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315924048",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-315924048",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 315924048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTkyNDA0OA==",
    "user": {
      "login": "chrisfranko",
      "id": 3543217,
      "node_id": "MDQ6VXNlcjM1NDMyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisfranko",
      "html_url": "https://github.com/chrisfranko",
      "followers_url": "https://api.github.com/users/chrisfranko/followers",
      "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
      "repos_url": "https://api.github.com/users/chrisfranko/repos",
      "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T00:35:28Z",
    "updated_at": "2017-07-18T00:35:28Z",
    "author_association": "NONE",
    "body": "@davux It does. Anyone interfacing with the TokenStandard.sol contract will feel as if they are interfacing with regular ERC20 contracts. \r\nincBalance and decBalance are methods in the Balances.sol contract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315924048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315962175",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-315962175",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 315962175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTk2MjE3NQ==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T05:30:50Z",
    "updated_at": "2017-07-18T05:30:50Z",
    "author_association": "CONTRIBUTOR",
    "body": ">Both 0x and swap rely on the approve/transferFrom\r\n\r\nI think that relying on mechanism that is leading to monetary losses for your users is very bad idea.\r\n\r\n> it seems that ERC20 has already become the de facto standard\r\n\r\nDue to the fact that many developers use this standard without any research or understanding of the consequences. They don't care about the fact than their users will lose money.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315962175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315964245",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-315964245",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 315964245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTk2NDI0NQ==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T05:46:53Z",
    "updated_at": "2017-07-18T12:44:21Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I'm coming up with design ideas how to make my approve/transferFrom implementation safer\r\n\r\nI think that it is possible to make `approve / allowance` mechanism safer but I think that it is not needed. I prefer to consider it deprecated because stack depth attack is already fixed (it is the only purpose of having approves. Approves are superfluous now).\r\n\r\nReasons:\r\n1. Irrational blockchain usage. Ethereum already has problems with network bandwidth. There is no need to introduce and use mechanisms which will cause extra blockchain bloating. Approve + transferFrom is a couple of two different transactions to perform a single action.\r\n\r\n2. Not user friendly. Can cause user mistakes.\r\nWhy do we need two different functions (transfer and approveAndCall) to perform token transactions? Is here any advantages over having only `transfer` function to perform all transfers?\r\n\r\n3. More understandable for developers.\r\n[Event handling](https://en.m.wikipedia.org/wiki/Event_(computing)) and fallback executing is well-known method in programming. Approves are not.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/315964245/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/316164198",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-316164198",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 316164198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjE2NDE5OA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-18T18:59:05Z",
    "updated_at": "2017-07-18T18:59:05Z",
    "author_association": "MEMBER",
    "body": "As mentioned in another EIP, this doesn't seem like something that should be an EIP.  EIPs are _not_ meant to be a source of best practices.  They are meant to be a source of standardization of things that _need_ or _greatly benefit_ from standardization.  This is not something that _greatly benefits_ from standardization (even though it _may_ be a best practice).  I have other concerns with this EIP, but I'm going to leave them out of this discussion because this shouldn't be an EIP in the first place.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/316164198/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/316545278",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-316545278",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 316545278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjU0NTI3OA==",
    "user": {
      "login": "chrisfranko",
      "id": 3543217,
      "node_id": "MDQ6VXNlcjM1NDMyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisfranko",
      "html_url": "https://github.com/chrisfranko",
      "followers_url": "https://api.github.com/users/chrisfranko/followers",
      "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
      "repos_url": "https://api.github.com/users/chrisfranko/repos",
      "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T23:04:25Z",
    "updated_at": "2017-07-19T23:04:25Z",
    "author_association": "NONE",
    "body": "@MicahZoltu I'm sorry you feel that way. Maybe you should make an EIP to define EIPs better because you seem to be the only one who knows exactly what one is! That sounds like it would be a better use of your time.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/316545278/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 4,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/316546934",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-316546934",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 316546934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjU0NjkzNA==",
    "user": {
      "login": "chrisfranko",
      "id": 3543217,
      "node_id": "MDQ6VXNlcjM1NDMyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisfranko",
      "html_url": "https://github.com/chrisfranko",
      "followers_url": "https://api.github.com/users/chrisfranko/followers",
      "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
      "repos_url": "https://api.github.com/users/chrisfranko/repos",
      "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T23:12:46Z",
    "updated_at": "2017-07-19T23:12:46Z",
    "author_association": "NONE",
    "body": "https://github.com/ethereum/EIPs/issues/16\r\n\r\nReaches the conclusion that token standards do indeed belong as an EIP. -shrug-",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/316546934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/317155640",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-317155640",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 317155640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzE1NTY0MA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-22T05:02:20Z",
    "updated_at": "2017-07-22T05:02:20Z",
    "author_association": "MEMBER",
    "body": "There is great value in a standard token _interface_.  However, there is significantly less value in a standard mechanism for the mechanism by which token contracts are upgraded.  The reason for this difference is because there are a _lot_ of tokens and there are a number of people building user-facing tools/utilities that interface with tokens (block explorers, node UIs, signer UIs, wallets, etc.).  However, for contract upgrade mechanisms there are very few people (no one?) writing generalized tools for token _management_ and the users of these tools would not be end-users but instead far more tech savvy developers.  On top of that, the token author can simply choose the token implementation that best aligns with his tool suite of choice, unlike the token user who doesn't get to choose the token contract they use but would still like to choose their tooling.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/317155640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/317181655",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-317181655",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 317181655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzE4MTY1NQ==",
    "user": {
      "login": "chrisfranko",
      "id": 3543217,
      "node_id": "MDQ6VXNlcjM1NDMyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisfranko",
      "html_url": "https://github.com/chrisfranko",
      "followers_url": "https://api.github.com/users/chrisfranko/followers",
      "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
      "repos_url": "https://api.github.com/users/chrisfranko/repos",
      "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-22T12:51:58Z",
    "updated_at": "2017-07-22T12:51:58Z",
    "author_association": "NONE",
    "body": "\"However, for contract upgrade mechanisms there are very few people (no one?)\"\r\n\r\nThat's the problem, there are very few people who actually give a damn about the future of the billion dollar assets they are launching on ethereum.  Furthermore, I am working on tooling for it. Hence why I shared this ERC. \r\n\r\nAnd that's quite the assumption that only \"tech savvy people\" would use token management tools. You are right the token author CAN simply choose the token implementation of his choice if everything is modularized that is.\r\n\r\nThank you for your comment on this request for comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/317181655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/324473986",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-324473986",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 324473986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDQ3Mzk4Ng==",
    "user": {
      "login": "igordata",
      "id": 1877274,
      "node_id": "MDQ6VXNlcjE4NzcyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1877274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/igordata",
      "html_url": "https://github.com/igordata",
      "followers_url": "https://api.github.com/users/igordata/followers",
      "following_url": "https://api.github.com/users/igordata/following{/other_user}",
      "gists_url": "https://api.github.com/users/igordata/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/igordata/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/igordata/subscriptions",
      "organizations_url": "https://api.github.com/users/igordata/orgs",
      "repos_url": "https://api.github.com/users/igordata/repos",
      "events_url": "https://api.github.com/users/igordata/events{/privacy}",
      "received_events_url": "https://api.github.com/users/igordata/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-23T21:56:11Z",
    "updated_at": "2017-08-23T21:56:11Z",
    "author_association": "NONE",
    "body": "I was wandering how one could upgrade the contract. I see some contracts have flaws in security. \r\n\r\nI want to say, it would be great to have solution for upgrade contracts, and I'm interested in such solution.\r\n\r\nI'm happy to see you Chris are putting an effort in developing upgradeable contracts!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/324473986/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/324692080",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-324692080",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 324692080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDY5MjA4MA==",
    "user": {
      "login": "Saahiljeet-Singh",
      "id": 11921964,
      "node_id": "MDQ6VXNlcjExOTIxOTY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11921964?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Saahiljeet-Singh",
      "html_url": "https://github.com/Saahiljeet-Singh",
      "followers_url": "https://api.github.com/users/Saahiljeet-Singh/followers",
      "following_url": "https://api.github.com/users/Saahiljeet-Singh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Saahiljeet-Singh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Saahiljeet-Singh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Saahiljeet-Singh/subscriptions",
      "organizations_url": "https://api.github.com/users/Saahiljeet-Singh/orgs",
      "repos_url": "https://api.github.com/users/Saahiljeet-Singh/repos",
      "events_url": "https://api.github.com/users/Saahiljeet-Singh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Saahiljeet-Singh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-24T16:47:34Z",
    "updated_at": "2017-08-24T16:47:34Z",
    "author_association": "NONE",
    "body": "I agree with @igordata .\r\nHey @chrisfranko : could you elaborate how could one upgrade a single module ( say a solidity file ) without impacting the others. Even if we change only the definitions keeping the interfaces intact, redeployment would still be an issue.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/324692080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327168384",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-327168384",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 327168384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzE2ODM4NA==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T13:03:05Z",
    "updated_at": "2017-09-05T13:03:05Z",
    "author_association": "MEMBER",
    "body": "One thing to bear in mind: Implementing a generic upgrade mechanism like this opens users to the need to trust the token creator indefinitely (since they could upgrade to an 'unfair) token implementation.\r\n\r\n> @Dexaran I think that it is possible to make approve / allowance mechanism safer but I think that it is not needed. I prefer to consider it deprecated because stack depth attack is already fixed (it is the only purpose of having approves. Approves are superfluous now).\r\n\r\nThis is untrue. If you remove approve from ERC20, there is no way to transfer tokens to a contract such that the token knows who sent them the tokens.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327168384/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327171210",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-327171210",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 327171210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzE3MTIxMA==",
    "user": {
      "login": "chrisfranko",
      "id": 3543217,
      "node_id": "MDQ6VXNlcjM1NDMyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisfranko",
      "html_url": "https://github.com/chrisfranko",
      "followers_url": "https://api.github.com/users/chrisfranko/followers",
      "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
      "repos_url": "https://api.github.com/users/chrisfranko/repos",
      "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T13:14:08Z",
    "updated_at": "2017-09-05T13:14:52Z",
    "author_association": "NONE",
    "body": "Yes you are correct Nick. A more ideal approach would be to have a\r\ndemocratic DAO control the root address of Balances.sol\r\n\r\nOn 5 September 2017 at 09:03, Nick Johnson <notifications@github.com> wrote:\r\n\r\n> One thing to bear in mind: Implementing a generic upgrade mechanism like\r\n> this opens users to the need to trust the token creator indefinitely (since\r\n> they could upgrade to an 'unfair) token implementation.\r\n>\r\n> @Dexaran <https://github.com/dexaran> I think that it is possible to make\r\n> approve / allowance mechanism safer but I think that it is not needed. I\r\n> prefer to consider it deprecated because stack depth attack is already\r\n> fixed (it is the only purpose of having approves. Approves are superfluous\r\n> now).\r\n>\r\n> This is untrue. If you remove approve from ERC20, there is no way to\r\n> transfer tokens to a contract such that the token knows who sent them the\r\n> tokens.\r\n>\r\n> —\r\n> You are receiving this because you were mentioned.\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/ethereum/EIPs/issues/644#issuecomment-327168384>, or mute\r\n> the thread\r\n> <https://github.com/notifications/unsubscribe-auth/ADYQsXE2lPGOFXdHyn85hI-x_gLnnkghks5sfUaUgaJpZM4N8dXs>\r\n> .\r\n>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327171210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327232155",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-327232155",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 327232155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzIzMjE1NQ==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T16:34:49Z",
    "updated_at": "2017-09-05T16:34:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Arachnid \r\n\r\n>This is untrue. If you remove approve from ERC20, there is no way to transfer tokens to a contract such that the token knows who sent them the tokens.\r\n\r\n`approve` doesn't introduce any functionality that can't be implemented by token fallbacks execution without approves.\r\nBy the way, event handling function execution is a standard practice in programming ([event handling](https://en.wikipedia.org/wiki/Event_(computing))) unlike `approve` + `transferFrom` mechanism that requires twice more transactions to make a token transaction and results in loss of money as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327232155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327240881",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-327240881",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 327240881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzI0MDg4MQ==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T17:04:42Z",
    "updated_at": "2017-09-05T17:04:42Z",
    "author_association": "MEMBER",
    "body": "> approve doesn't introduce any functionality that can't be implemented by token fallbacks execution without approves.\r\n\r\nThere are use-cases that are possible with approve but not fallbacks, though I don't find them particularly compelling. The issue I was raising is that you were suggesting that removing `approve` without any other changes would not eliminate any use-cases; it definitely would.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327240881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327249028",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-327249028",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 327249028,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzI0OTAyOA==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T17:34:10Z",
    "updated_at": "2017-09-05T17:34:10Z",
    "author_association": "CONTRIBUTOR",
    "body": ">The issue I was raising is that you were suggesting that removing approve without any other changes would not eliminate any use-cases; it definitely would.\r\n\r\nI agree, if you just exclude `approve`s from the default ERC20 token then it will eliminate some use-cases.\r\nI suggested an alternative standard with alternative ways of doing the same thing that `approve`s do, but without loss of money.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/327249028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/329065408",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-329065408",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 329065408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTA2NTQwOA==",
    "user": {
      "login": "debkundu",
      "id": 20619724,
      "node_id": "MDQ6VXNlcjIwNjE5NzI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20619724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/debkundu",
      "html_url": "https://github.com/debkundu",
      "followers_url": "https://api.github.com/users/debkundu/followers",
      "following_url": "https://api.github.com/users/debkundu/following{/other_user}",
      "gists_url": "https://api.github.com/users/debkundu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/debkundu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/debkundu/subscriptions",
      "organizations_url": "https://api.github.com/users/debkundu/orgs",
      "repos_url": "https://api.github.com/users/debkundu/repos",
      "events_url": "https://api.github.com/users/debkundu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/debkundu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T05:46:25Z",
    "updated_at": "2017-09-13T05:46:25Z",
    "author_association": "NONE",
    "body": "@Arachnid One thing to bear in mind: Implementing a generic upgrade mechanism like this opens users to the need to trust the token creator indefinitely (since they could upgrade to an 'unfair) token implementation.\r\n\r\n@chrisfranko Yes you are correct Nick. A more ideal approach would be to have a\r\ndemocratic DAO control the root address of Balances.sol\r\n\r\nAgreed. Security, trust and transparency are of great importance in the business of token management in a democratic manner. Users cannot take the token creator indefinitely when it comes to activities like - incTotalSupply, decTotalSupply. So, so should we add another two items to the cart - (i) Token Governance body and (ii) Voting on token management issues? Something like an Association contract, that uses mintable token owned by a congress finally owned by a single account (https://www.ethereum.org/dao#the-shareholder-association). Thoughts welcome.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/329065408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/329225843",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-329225843",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 329225843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTIyNTg0Mw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T16:38:56Z",
    "updated_at": "2017-09-13T16:38:56Z",
    "author_association": "MEMBER",
    "body": "Democratic mutability opens the system up to a Sybil attack against the governance system, which can be an even higher risk than centralized management.  In general, I advise projects against upgradability outside of their beta.  During beta I generally recommend a simple multi-sig upgrade mechanism as that introduces a clear target of trust and doesn't put the system at risk of a non-state attack from any party outside of the multisig.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/329225843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/329266971",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-329266971",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 329266971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTI2Njk3MQ==",
    "user": {
      "login": "chrisfranko",
      "id": 3543217,
      "node_id": "MDQ6VXNlcjM1NDMyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisfranko",
      "html_url": "https://github.com/chrisfranko",
      "followers_url": "https://api.github.com/users/chrisfranko/followers",
      "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
      "repos_url": "https://api.github.com/users/chrisfranko/repos",
      "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T19:08:41Z",
    "updated_at": "2017-09-13T19:08:41Z",
    "author_association": "NONE",
    "body": "@micah I would normally agree with you when working on completely\ndecentralized projects. But my clients kept asking for this functionality\nwhich is why I built this contract suite.\n\n@bluesky I really like that idea of adding the governance module. Micah\nsuggest a Sybil attack but that would mostly be an issue for a 1 address 1\notw. But we could come up with a wide range of different governance that\nall have diff strengths and weaknesses. Each with their own trade offs.\n\nOn Wed, Sep 13, 2017 at 12:39 PM Micah Zoltu <notifications@github.com>\nwrote:\n\n> Democratic mutability opens the system up to a Sybil attack against the\n> governance system, which can be an even higher risk than centralized\n> management. In general, I advise projects against upgradability outside of\n> their beta. During beta I generally recommend a simple multi-sig upgrade\n> mechanism as that introduces a clear target of trust and doesn't put the\n> system at risk of a non-state attack from any party outside of the multisig.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/644#issuecomment-329225843>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ADYQsQU-8wdGdHPLrbfV0ijJz6kQqKOIks5siAUwgaJpZM4N8dXs>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/329266971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/329276863",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-329276863",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 329276863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTI3Njg2Mw==",
    "user": {
      "login": "micah",
      "id": 2832,
      "node_id": "MDQ6VXNlcjI4MzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micah",
      "html_url": "https://github.com/micah",
      "followers_url": "https://api.github.com/users/micah/followers",
      "following_url": "https://api.github.com/users/micah/following{/other_user}",
      "gists_url": "https://api.github.com/users/micah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micah/subscriptions",
      "organizations_url": "https://api.github.com/users/micah/orgs",
      "repos_url": "https://api.github.com/users/micah/repos",
      "events_url": "https://api.github.com/users/micah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-13T19:47:49Z",
    "updated_at": "2017-09-13T19:47:49Z",
    "author_association": "NONE",
    "body": "\nfyi - you highlighted the wrong micah\n\nChristopher Franko <notifications@github.com> writes:\n\n> @micah I would normally agree with you when working on completely\n> decentralized projects. But my clients kept asking for this functionality\n> which is why I built this contract suite.\n>\n> @bluesky I really like that idea of adding the governance module. Micah\n> suggest a Sybil attack but that would mostly be an issue for a 1 address 1\n> otw. But we could come up with a wide range of different governance that\n> all have diff strengths and weaknesses. Each with their own trade offs.\n>\n> On Wed, Sep 13, 2017 at 12:39 PM Micah Zoltu <notifications@github.com>\n> wrote:\n>\n>> Democratic mutability opens the system up to a Sybil attack against the\n>> governance system, which can be an even higher risk than centralized\n>> management. In general, I advise projects against upgradability outside of\n>> their beta. During beta I generally recommend a simple multi-sig upgrade\n>> mechanism as that introduces a clear target of trust and doesn't put the\n>> system at risk of a non-state attack from any party outside of the multisig.\n>>\n>> —\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/ethereum/EIPs/issues/644#issuecomment-329225843>, or mute\n>> the thread\n>> <https://github.com/notifications/unsubscribe-auth/ADYQsQU-8wdGdHPLrbfV0ijJz6kQqKOIks5siAUwgaJpZM4N8dXs>\n>> .\n>>\n>\n>\n> -- \n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/ethereum/EIPs/issues/644#issuecomment-329266971\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/329276863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/332368384",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-332368384",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 332368384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjM2ODM4NA==",
    "user": {
      "login": "kylerchin",
      "id": 7539174,
      "node_id": "MDQ6VXNlcjc1MzkxNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7539174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kylerchin",
      "html_url": "https://github.com/kylerchin",
      "followers_url": "https://api.github.com/users/kylerchin/followers",
      "following_url": "https://api.github.com/users/kylerchin/following{/other_user}",
      "gists_url": "https://api.github.com/users/kylerchin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kylerchin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kylerchin/subscriptions",
      "organizations_url": "https://api.github.com/users/kylerchin/orgs",
      "repos_url": "https://api.github.com/users/kylerchin/repos",
      "events_url": "https://api.github.com/users/kylerchin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kylerchin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-26T23:52:19Z",
    "updated_at": "2017-09-26T23:52:19Z",
    "author_association": "NONE",
    "body": "@Dexaran @chrisfranko I am looking for a token standard that allows for upgradability to the token code in the future and is able to be stored in a contract. How would I approach this problem? Do I just use the ERC223 recommended code and just slot in the Balances.sol code?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/332368384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373799064",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-373799064",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 373799064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzc5OTA2NA==",
    "user": {
      "login": "facundomedica",
      "id": 14063057,
      "node_id": "MDQ6VXNlcjE0MDYzMDU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/14063057?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/facundomedica",
      "html_url": "https://github.com/facundomedica",
      "followers_url": "https://api.github.com/users/facundomedica/followers",
      "following_url": "https://api.github.com/users/facundomedica/following{/other_user}",
      "gists_url": "https://api.github.com/users/facundomedica/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/facundomedica/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/facundomedica/subscriptions",
      "organizations_url": "https://api.github.com/users/facundomedica/orgs",
      "repos_url": "https://api.github.com/users/facundomedica/repos",
      "events_url": "https://api.github.com/users/facundomedica/events{/privacy}",
      "received_events_url": "https://api.github.com/users/facundomedica/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-16T18:09:36Z",
    "updated_at": "2018-03-16T18:09:36Z",
    "author_association": "NONE",
    "body": "@chrisfranko Is this line ok? https://github.com/expanse-org/Tokens/blob/master/Token_Contracts/contracts/StandardToken.sol#L34 it should get the balance and decrease it for the _from no the message sender.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373799064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373920895",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-373920895",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 373920895,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkyMDg5NQ==",
    "user": {
      "login": "chrisfranko",
      "id": 3543217,
      "node_id": "MDQ6VXNlcjM1NDMyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3543217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisfranko",
      "html_url": "https://github.com/chrisfranko",
      "followers_url": "https://api.github.com/users/chrisfranko/followers",
      "following_url": "https://api.github.com/users/chrisfranko/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisfranko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisfranko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisfranko/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisfranko/orgs",
      "repos_url": "https://api.github.com/users/chrisfranko/repos",
      "events_url": "https://api.github.com/users/chrisfranko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisfranko/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-17T13:40:43Z",
    "updated_at": "2018-03-17T13:40:43Z",
    "author_association": "NONE",
    "body": "no you are right its not ok, and i fixed that in my lastest itteration in\nmy private repos but forgot to fix it in the public one. if you submit a pr\nill accept it. thank you for finding it.\n\nOn 16 March 2018 at 14:10, facundomedica <notifications@github.com> wrote:\n\n> @chrisfranko <https://github.com/chrisfranko> Is this line ok?\n> https://github.com/expanse-org/Tokens/blob/master/Token_\n> Contracts/contracts/StandardToken.sol#L34 it should get the balance and\n> decrease it for the _from no the message sender.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/644#issuecomment-373799064>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ADYQsRCcNLMUXFdQFWUMdZwdInKG_lKZks5te__4gaJpZM4N8dXs>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/373920895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/494106553",
    "html_url": "https://github.com/ethereum/EIPs/issues/644#issuecomment-494106553",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/644",
    "id": 494106553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDEwNjU1Mw==",
    "user": {
      "login": "guylando",
      "id": 14879163,
      "node_id": "MDQ6VXNlcjE0ODc5MTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/14879163?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/guylando",
      "html_url": "https://github.com/guylando",
      "followers_url": "https://api.github.com/users/guylando/followers",
      "following_url": "https://api.github.com/users/guylando/following{/other_user}",
      "gists_url": "https://api.github.com/users/guylando/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/guylando/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guylando/subscriptions",
      "organizations_url": "https://api.github.com/users/guylando/orgs",
      "repos_url": "https://api.github.com/users/guylando/repos",
      "events_url": "https://api.github.com/users/guylando/events{/privacy}",
      "received_events_url": "https://api.github.com/users/guylando/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-20T18:47:30Z",
    "updated_at": "2019-05-20T18:54:32Z",
    "author_association": "NONE",
    "body": "From investigating current solutions for token contracts bug mitigations and upgradability my conclusions are:\r\n1. Users SHOULD verify the token owner (that he is a legal entity which can be prosecuted in case of a foul-play) before buying the token + users SHOULD check that they trust the token smart contract before buying the token\r\n2. The contract SHOULD be pausable from security reasons and this is less risk than NOT making it pausable (under condition (1)), see: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/795#issuecomment-492349517\r\n3. Since upgradability through create2 and proxy removes the trust from the contract, probably better to plan a migration/pause possibly instead of redeployable/proxy upgradability. Not a DAO because the decentralized world is not so decentralized for now. Zeppelin os upgradability is based on proxy pattern where owner can modify the contract implementation at will which removes trust and is basically a backdoor for token investors who have no way to know what their token will turn to. https://blog.zeppelinos.org/getting-started-with-zeppelinos/ https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1499#issuecomment-440714206 https://github.com/zeppelinos/zos/blob/master/packages/lib/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#L71\r\nWhat is important for (2) and (3) is that for a proxy based / redeployable contract the user can't really audit the whole functionality of the contract for the future because it can be changed, and on the other hand pausable token does not hide anything and the pausing ability as explained in https://github.com/OpenZeppelin/openzeppelin-solidity/issues/795#issuecomment-492349517 is even MORE important than redeploying ability for bugs/attacks/vulnerabilities protection.\r\n4. From (2)+(3) -> we are left with the implementation of migration mechanism\r\n5. UpgradeableToken used by several popular tokens allows the token the ability to declare a new contract and let users migrate their tokens to the new contract\r\n  - https://github.com/TokenMarketNet/smart-contracts/blob/master/contracts/UpgradeableToken.sol\r\n  - used by:\r\n\t- CRO https://etherscan.io/address/0xa0b73e1ff0b80914ab6fe0444e65848c4c34450b#code\r\n\t- ETHOS https://txvapi.etherscan.io/address/0x5af2be193a6abca9c8817001f45744777db30756#code\r\n\t- STORJ https://etherscan.io/address/0xb64ef51c888972c908cfacf59b47c1afbc0ab8ac#code\r\n  - security audit of UpgradeableToken used in STORJ https://blog.zeppelin.solutions/storj-token-audit-32a9af082797\r\n6. MKR migrated using a third \"Redeemer\" contract https://github.com/makerdao/redeem\r\n7. Here there is a recommendation to insert some upgrading ability to the contract: https://github.com/ethereum/wiki/wiki/Safety#upgrading-broken-contracts\r\n8. recommends to allow users to migrate their tokens like happens in UpgradeableToken https://medium.com/@k06a/the-safest-and-probably-the-best-way-to-upgrade-smart-contracts-ea6e619d5dfd\r\n9. compared minime cloning upgrade strategy and golem UpgradeableToken and seems UpgradeableToken migration strategy wins (in my opinion) https://medium.com/alice-si/upgradable-ethereum-contracts-b25f4c86c42b\r\n10. ERC20Migrator is openZeppelin's implementation of the migration which is totally external in third contract (unlike UpgradeableToken) and only requires user to give allowance to migrating contract for his balance in old token and then anybody can perform the migration https://docs.openzeppelin.org/docs/drafts_erc20migrator\r\n11. I believe UpgradeableToken is a good and audited approach however it requires some parts of the migration to be inside the original token which seems redundant. On the other hand ERC20Migrator does not allow to migrate paused token which was paused because of a bug because it calls transferFrom on the old contract and requires the users to call approve on the old contract. This CAN be solved by adding a function in the old contract which allows to set a \"migrator\" and allowing paused tokens to be approved to a \"migrator\" and allowing a \"migrator\" to call transferFrom for paused token. However this adds unnecessary complexity in my opinion to the original contract. I believe it is best to not insert any additional code to the original contract and instead in ERC20Migrator to just check the user balance in the old contract and use it to add the user tokens in the new contract. This is probably what EOS have done (https://etherscan.io/address/0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0#code) and probably many other tokens have done this too. The \"risk\" here is if the owner will \"unpause\" the old contract after migration to the new contract however the migration will be performed by users approval for each user so the user can verify that new contract has the same symbol and name and then only one of those contracts will be listed on exchanges and the owner has no interest to ruin the token economy by creating a mass and exchanges will delist the token if there will be some foul-play so I believe that in the end only one of the two contracts will \"survive\" economically / in being used so this risk is \"ok\" (and like I said EOS and others did that so for example EOS could call start function and resume token trading today, so this risk was already taken before).\r\n12. Seems similar/identical idea and a possible implementation was presented here: https://github.com/bitclave/TokenWrapper https://medium.com/bitclave/the-easy-way-to-upgrade-smart-contracts-ba30ba012784 it was proposed to open zeppelin and declined here: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/795\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/494106553/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
