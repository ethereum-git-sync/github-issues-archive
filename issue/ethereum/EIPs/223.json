{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/223/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/223/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/223/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/223",
  "id": 211957086,
  "node_id": "MDU6SXNzdWUyMTE5NTcwODY=",
  "number": 223,
  "title": "ERC223 token standard",
  "user": {
    "login": "Dexaran",
    "id": 26142412,
    "node_id": "MDQ6VXNlcjI2MTQyNDEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Dexaran",
    "html_url": "https://github.com/Dexaran",
    "followers_url": "https://api.github.com/users/Dexaran/followers",
    "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
    "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
    "organizations_url": "https://api.github.com/users/Dexaran/orgs",
    "repos_url": "https://api.github.com/users/Dexaran/repos",
    "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Dexaran/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 652,
  "created_at": "2017-03-05T14:43:51Z",
  "updated_at": "2022-09-23T13:51:39Z",
  "closed_at": "2022-05-28T05:04:00Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\n\r\nERC: 223\r\nTitle: Token standard\r\nAuthor: Dexaran, dexaran@ethereumclassic.org\r\nStatus: Draft\r\nType: ERC\r\nCreated: 5-03.2017\r\nReference implementation: https://github.com/Dexaran/ERC223-token-standard\r\n\r\n---\r\n\r\n## Abstract\r\n\r\nThe following describes standard functions a token contract and contract working with specified token can implement to prevent accidentally sends of tokens to contracts and make token transactions behave like ether transactions.\r\n\r\n## Motivation\r\n\r\nHere is a description of the ERC20 token standard problem that is solved by ERC223:\r\n\r\nERC20 token standard is leading to money losses for end users. The main problem is lack of possibility to handle incoming ERC20 transactions, that were performed via `transfer` function of ERC20 token.\r\n\r\nIf you send 100 ETH to a contract that is not intended to work with Ether, then it will reject a transaction and nothing bad will happen. If you will send 100 ERC20 tokens to a contract that is not intended to work with ERC20 tokens, then it will not reject tokens because it cant recognize an incoming transaction. As the result, your tokens will get stuck at the contracts balance.\r\n\r\nHow much ERC20 tokens are currently lost (27 Dec, 2017):\r\n\r\n1. QTUM, **$1,204,273** lost. [watch on Etherscan](https://etherscan.io/address/0x9a642d6b3368ddc662CA244bAdf32cDA716005BC)\r\n\r\n2. EOS, **$1,015,131** lost. [watch on Etherscan](https://etherscan.io/address/0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0)\r\n\r\n3. GNT, **$249,627** lost. [watch on Etherscan](https://etherscan.io/address/0xa74476443119A942dE498590Fe1f2454d7D4aC0d)\r\n\r\n4. STORJ, **$217,477** lost. [watch on Etherscan](https://etherscan.io/address/0xe41d2489571d322189246dafa5ebde1f4699f498)\r\n\r\n5. Tronix , **$201,232** lost. [watch on Etherscan](https://etherscan.io/address/0xf230b790e05390fc8295f4d3f60332c93bed42e2)\r\n\r\n6. DGD, **$151,826** lost. [watch on Etherscan](https://etherscan.io/address/0xe0b7927c4af23765cb51314a0e0521a9645f0e2a)\r\n\r\n7. OMG, **$149,941** lost. [watch on Etherscan](https://etherscan.io/address/0xd26114cd6ee289accf82350c8d8487fedb8a0c07)\r\n\r\nNOTE: These are only 8 token contracts that I know. Each Ethereum contract is a potential token trap for ERC20 tokens, thus, there are much more losses than I showed at this example.\r\n\r\nAnother disadvantages of ERC20 that ERC223 will solve: \r\n1. Lack of `transfer` handling possibility.\r\n2. Loss of tokens.\r\n3. Token-transactions should match Ethereum ideology of uniformity. When a user wants to transfer tokens, he should always call `transfer`. It doesn't matter if the user is depositing to a contract or sending to an externally owned account.\r\n\r\nThose will allow contracts to handle incoming token transactions and prevent accidentally sent tokens from being accepted by contracts (and stuck at contract's balance).\r\n\r\nFor example decentralized exchange will no more need to require users to call `approve` then call `deposit` (which is internally calling `transferFrom` to withdraw approved tokens). Token transaction will automatically be handled at the exchange contract.\r\n\r\nThe most important here is a call of `tokenReceived` when performing a transaction to a contract.\r\n\r\n## Specification\r\n\r\nToken\r\nContracts that works with tokens\r\n\r\n## Methods\r\n\r\nNOTE: An important point is that contract developers must implement `tokenReceived` if they want their contracts to work with the specified tokens.\r\n\r\nIf the receiver does not implement the `tokenReceived` function, consider the contract is not designed to work with tokens, then the transaction must fail and no tokens will be transferred. An analogy with an Ether transaction that is failing when trying to send Ether to a contract that did not implement `function() payable`.\r\n\r\n\r\n#### totalSupply\r\n\r\n```js\r\nfunction totalSupply() constant returns (uint256 totalSupply)\r\n```\r\nGet the total token supply\r\n\r\n#### name\r\n\r\n```js\r\nfunction name() constant returns (string _name)\r\n```\r\nGet the name of token\r\n\r\n#### symbol\r\n\r\n```js\r\nfunction symbol() constant returns (bytes32 _symbol)\r\n```\r\nGet the symbol of token\r\n\r\n#### decimals\r\n\r\n```js\r\nfunction decimals() constant returns (uint8 _decimals)\r\n```\r\nGet decimals of token\r\n\r\n#### standard\r\n\r\n```js\r\nfunction standard() constant returns (string _standard)\r\n```\r\nGet the standard of token contract. For some services it is important to know how to treat this particular token. If token supports ERC223 standard then it must explicitly tell that it does.\r\n\r\nThis function **MUST** return \"erc223\" for this token standard. If no \"standard()\" function is implemented in the contract then the contract must be considered to be ERC20.\r\n\r\n#### balanceOf\r\n\r\n```js\r\nfunction balanceOf(address _owner) constant returns (uint256 balance)\r\n```\r\nGet the account balance of another account with address _owner\r\n\r\n\r\n#### transfer(address, uint)\r\n\r\n```js\r\nfunction transfer(address _to, uint _value) returns (bool)\r\n```\r\n\r\nNeeded due to backwards compatibility reasons because of ERC20 transfer function doesn't have `bytes` parameter. This function must transfer tokens and invoke the function `tokenReceived(address, uint256, bytes calldata)` in `_to`, if _to is a contract. If the `tokenReceived` function is not implemented in ` _to` (receiver contract), then the transaction must fail and the transfer of tokens should be reverted.\r\n\r\n#### transfer(address, uint, bytes)\r\n\r\n```js\r\nfunction transfer(address _to, uint _value, bytes calldata _data) returns (bool)\r\n```\r\nfunction that is always called when someone wants to transfer tokens.\r\nThis function must transfer tokens and invoke the function `tokenReceived (address, uint256, bytes)` in `_to`, if _to is a contract. If the `tokenReceived` function is not implemented in ` _to` (receiver contract), then the transaction must fail and the transfer of tokens should not occur. \r\nIf `_to` is an externally owned address, then the transaction must be sent without trying to execute ` tokenReceived` in `_to`.\r\n `_data` can be attached to this token transaction and it will stay in blockchain forever (requires more gas). `_data` can be empty.\r\n\r\nNOTE: The recommended way to check whether the `_to` is a contract or an address is to assemble the code of ` _to`. If there is no code in `_to`, then this is an externally owned address, otherwise it's a contract.\r\n\r\n## Events\r\n\r\n#### Transfer\r\n\r\n```js\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\r\n```\r\n\r\nTriggered when tokens are transferred. Compatible with ERC20 `Transfer` event.\r\n\r\n#### TransferData\r\n\r\n```js\r\nevent TransferData(bytes _data)\r\n```\r\n\r\nTriggered when tokens are transferred and logs transaction metadata. This is implemented as a separate event to keep `Transfer(address, address, uint256)` ERC20-compatible.\r\n\r\n## Contract to work with tokens\r\n\r\n```js\r\nfunction tokenReceived(address _from, uint _value, bytes calldata _data)\r\n```\r\nA function for handling token transfers, which is called from the token contract, when a token holder sends tokens. `_from` is the address of the sender of the token,` _value` is the amount of incoming tokens, and `_data` is attached data similar to` msg.data` of Ether transactions. It works by analogy with the fallback function of Ether transactions and returns nothing.\r\n\r\nNOTE: since solidity version 0.6.0+ there is a new `reveive()` function to handle plain Ether transfers - therefore the function `tokenFallback` was renamed to `tokenReceived` to keep the token behavior more intuitive and compatible with Ether behavior.\r\n\r\nNOTE: `msg.sender` will be a token-contract inside the `tokenReceived` function. It may be important to filter which tokens are sent (by token-contract address). The token sender (the person who initiated the token transaction) will be `_from` inside the` tokenReceived` function.\r\n\r\nIMPORTANT: This function must be named `tokenReceived` and take parameters` address`, `uint256`,` bytes` to match the [function signature](https://www.4byte.directory/signatures/?bytes4_signature=0xc0ee0b8a) `0xc0ee0b8a`.\r\n\r\n## Recommended implementation\r\nThis is highly recommended implementation of ERC 223 token: https://github.com/Dexaran/ERC223-token-standard/tree/development/token/ERC223",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/223/reactions",
    "total_count": 215,
    "+1": 173,
    "-1": 0,
    "laugh": 6,
    "hooray": 14,
    "confused": 2,
    "heart": 20,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/223/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/284240612",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-284240612",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 284240612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDI0MDYxMg==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T16:20:27Z",
    "updated_at": "2017-03-05T18:42:54Z",
    "author_association": "NONE",
    "body": "Have you considered allowing this feature set by extending ERC20 with `approveAndCall`? Inside the \"charging\" contract you'll have one function call in any case (in this case transferFrom), but on the caller side entering is now an atomic operation, similar to transferToContract",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/284240612/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/284245613",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-284245613",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 284245613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDI0NTYxMw==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T17:33:36Z",
    "updated_at": "2017-03-07T11:03:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "The main goals of my proposal were:\r\n1. Prevent accidentally sent tokens from being held by contract.\r\n2. Allow users to deposit their tokens in contract the way simple as ether by a single transaction (i.e. `transferToContract( )` call) with no need to call `approval` than call `transferFrom`.\r\n3. Make token transactions behave same as Ether transactions.\r\n\r\n`approveAndCall` assumes that target contract will call `transferFrom` and its not like Ether transactions do. There is no need to allow target contract to withdraw tokens from someone (tx initiator). There is no need to fire `Approval` event also. From a logical point of view, we should just notify target contract that transaction appears. Also fire `Transfer` event with no approvals.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/284245613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285161536",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285161536",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285161536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTE2MTUzNg==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T20:37:47Z",
    "updated_at": "2017-03-22T06:45:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated my ERC23 token code with a function assembling receiver address to ensure token contract if the receiver is a contract or an address.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285161536/reactions",
      "total_count": 15,
      "+1": 10,
      "-1": 0,
      "laugh": 2,
      "hooray": 2,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285162108",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285162108",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285162108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTE2MjEwOA==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T20:39:58Z",
    "updated_at": "2017-03-08T20:40:23Z",
    "author_association": "NONE",
    "body": "Ok I think I see where you are coming from...\r\n\r\nWhat about, devs generally seem to want to replace the \"execute on transfer\" for ETH with a hard coded token interface with no execute on transfer, potentially just ERC20?\r\n\r\nIs this a bad side effect or a naturally good thing? Doesn't exec-on-transfer make the simplest use cases more complex and maybe more dangerous, while not allowing anything really new?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285162108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285176645",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285176645",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285176645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTE3NjY0NQ==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T21:34:19Z",
    "updated_at": "2017-03-08T21:35:05Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  exec-on-transfer make the simplest use cases more complex and maybe more dangerous\r\n\r\nfor contract developers you mean. From users point of view we just need to call 'transfer token' on MEW or `transfer` directly in contract and dont care any more about what is going on instead of calling `approval` then calling `deposit` or something like this with a chance of mistake that will cause a loss of tokens.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285176645/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285181443",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285181443",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285181443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTE4MTQ0Mw==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T21:52:33Z",
    "updated_at": "2017-03-08T21:52:33Z",
    "author_association": "NONE",
    "body": "> for contract developers you mean. From users point of view we just need to call 'transfer token' on MEW or transfer directly in contract and dont care any more about what is going on instead of calling approval then calling deposit or something like this with a chance of mistake that will cause a loss of tokens.\r\n\r\nContract devs are not being unsympathetic to user experience by nitpicking the semantics of contract code... I understand that `approve` + `doSomething` is not optimal UX, but these are things you can abstract away at the user interface level, and this abstraction honestly has very few side effects, while making composing contracts more safe (\"what stuff could happen if I transfer this token here?\")\r\n\r\n(personally I think the real base abstraction is a binary per-address `approve` but that is another side thread)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285181443/reactions",
      "total_count": 5,
      "+1": 4,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285312880",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285312880",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285312880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTMxMjg4MA==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T10:21:51Z",
    "updated_at": "2017-03-09T10:32:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well designed token contract assumes you need to trust only contract and ethereum EVM. UI level abstraction assumes you need to trust UI developers.  It also requires some things to be done by UI devs. I dont see any abstraction that is required already done. So what reason is to make a lot of requirements and dependencies between contract developers,UI developers and users when there is a way to avoid it.\r\nAt the other hand the main problem of every cryptocurrency is network bandwidth right now. Transferring of ERC20 token to the contract is a couple of two different transactions in fact. While transferring ERC23 token to a contract is a single transaction. \r\nERC20 transfer to contract also fires `Approval` event then fires `Transfer` event. Such irrational use of blockchain can cause extra bloating. ERC23 transfer fires only `Transfer` event. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285312880/reactions",
      "total_count": 25,
      "+1": 20,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285421887",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285421887",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285421887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQyMTg4Nw==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T17:32:06Z",
    "updated_at": "2017-03-09T17:32:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "We were thinking about doing a similar proposal from [Aragon](https://aragon.one) while working on economic abstraction for companies. We finally decided approve and transferFrom was a simpler interface and more secure.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285421887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285423407",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285423407",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285423407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQyMzQwNw==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T17:37:38Z",
    "updated_at": "2017-03-09T17:37:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Simpler and more secure? What reasons do you have thinking so? I named my reasons. \r\nEasier usage. Better optimization. Less requirements.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285423407/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285425127",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285425127",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285425127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQyNTEyNw==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T17:44:01Z",
    "updated_at": "2017-03-09T17:44:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the current implementation, if a contract doesn't implement the receiver protocol, the transfer of tokens to an address that happens to be a contract will throw https://github.com/Dexaran/ERC23-tokens/blob/master/ERC23_token.sol#L56\r\n\r\nAlso I see the problem that the receiver needs to keep a list of what tokens it supports.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285425127/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285428157",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285428157",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285428157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQyODE1Nw==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T17:55:00Z",
    "updated_at": "2017-03-09T17:55:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also I didn't know about approveAndCall, but it seems the way to go for me. \r\n\r\nMy two cents, I would be happy to see approveAndCall be part of the standard, but your current solution, while cool, I think it would bring too much overhead to an already very simple and versatile protocol. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285428157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285430533",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285430533",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285430533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQzMDUzMw==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T18:03:21Z",
    "updated_at": "2017-03-09T18:03:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "There could be a standard to approveAndCall data payload that calls the similar to your so called fallback in your proposal, and the this fallback doing some delegatecall magic could actually call a function in the contract passing the sender and the value as function params. In the fallback function you could do your token accounting and then call whatever function the caller wanted.  \r\n\r\nSorry for the ramblings, I think I will actually come up with a parallel proposal for this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285430533/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285604555",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285604555",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285604555,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYwNDU1NQ==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T08:08:59Z",
    "updated_at": "2017-03-10T09:02:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In the current implementation, if a contract doesn't implement the receiver protocol, the transfer of tokens to an address that happens to be a contract will throw\r\n\r\nAs I said earlier it's done to prevent accidentally transactions of tokens to contract address where tokens will not be accessible any more.\r\nContracts are throwing accidentally ether transactions if no fallback payable function is implemented. The same mechanism for accidentally token transactions not exists so Im suggesting to implement it now.\r\n\r\n> Also I didn't know about approveAndCall, but it seems the way to go for me.\r\n\r\n`approveAndCall` may be a good thing or may be not but now it is not implemented in ERC20 and will not solve accidentally token transactions between address and contract so Im not suggesting to implement `approveAndCall`.\r\n\r\nMy proposal solves a number of problems:\r\n\r\n1. Accidentally transactions between address and contract that is not supporting this token will no longer cause a loss of tokens.\r\n2. For users: Allows not to care about contract logic of work. To transfer tokens wherever you want, you always need to call only the `transfer` function. \r\n3. For contract developers: Allows to handle incoming token transactions similar to incoming ether transaction.\r\n4. It also optimizes blockchain usage.\r\n\r\nIf you found my proposal too complex to accept, then I found this increase in complexity a reasonable price, which should be paid for preventing accidental loss of tokens in the entire future.\r\n\r\n> Also I see the problem that the receiver needs to keep a list of what tokens it supports.\r\n\r\nI don't see it is a problem but if this is the only thing that prevents the token standard from being accepted I designed a light version of contract-receiver. It will accept every incoming ERC23 token and do nothing with it. It can be called \"token-trap\" contract.\r\nYou can browse it here: https://github.com/Dexaran/ERC23-tokens/tree/light_version",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285604555/reactions",
      "total_count": 13,
      "+1": 11,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285611190",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285611190",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285611190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYxMTE5MA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T08:43:53Z",
    "updated_at": "2017-03-10T08:44:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I do like it, in fact i would also suggest for wallet contracts that the fallback func fires an standard event on the receiving contract called `TokenTransfer(address _from, uint _value)`\r\nTho i would rename the fallback func to `t(...)` or `tokenFallback(...)`, sounds better.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285611190/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285616280",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285616280",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285616280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYxNjI4MA==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T09:08:20Z",
    "updated_at": "2017-03-10T09:09:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Dexaran those are all good points indeed. Sorry if the feedback seemed harsh, I'm indeed really interested in getting closer to economic abstraction so contracts can operate with tokens in a similar way the can with ether.\r\n\r\nWhat do you think about the fallback function being something like`t(address tokenSender, uint value, bytes data)` and then the fallback function can do a `delegatecall` to itself with this data to simulate a payable function? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285616280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285622190",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285622190",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285622190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYyMjE5MA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T09:36:36Z",
    "updated_at": "2017-03-10T09:36:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "How you mean simulate a payable function?\r\n\r\nBtw i don't fully understand why a contract should add supported tokens? As long as a contract fires the fallback function, it will be ERC 20 + 23 ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285622190/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285624246",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285624246",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285624246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYyNDI0Ng==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T09:45:44Z",
    "updated_at": "2017-03-10T09:45:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Btw i don't fully understand why a contract should add supported tokens?\r\n\r\nContract that is working with a specified tokens may contrain a mapping of supported tokens.For example if we are working with only `Unicorns` and incoming `Token123` transaction appears we should reject transaction of not supported `Token123`.\r\nSupported token may also be hardcoded or set inside receiving contract in any way you prefer. I just recommended `addToken` and `removeToken` functions to be in contract but they are not required.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285624246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285624868",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285624868",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285624868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYyNDg2OA==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T09:48:42Z",
    "updated_at": "2017-03-10T09:48:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Im not sure if i would make that into the standard, i find the fallback function useful, but as long as they are ERC 20 the contract should be able to deal with it. If he wants to reject certain tokens, than thats something they can do, but it doesn't need to be part of this standard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285624868/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285628187",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285628187",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285628187,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYyODE4Nw==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T10:03:05Z",
    "updated_at": "2017-03-10T10:07:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "By simulate a payable function I mean that after the token fallback is called, a specific function in the contract is called.\r\n\r\nA rough, pseudo-Solidity implementation would be: \r\n\r\n```\r\ncontract TokenReceiver {\r\n  function t(address tokenSender, uint value, bytes payload) {\r\n     if (_data) {\r\n         delegatecall(this, payload)\r\n     }\r\n  }\r\n\r\n  function foo() {}\r\n}\r\n```\r\n\r\nSo you could do `transfer(contractAddress, value, '0xc2985578')` in the token and have it call the function `foo()` in the receiving contract by sending value with a token. Maybe a couple of parameters should be added to the `foo()` like functions so they get the sender and the amount of tokens received.\r\n\r\nThe only thing that would need to be included in the standard is the case in which transfer has a `payload` parameter, as the way you handle it in the fallback could be up to every contract to decide how to do it. \r\n\r\nAlso regarding supported tokens, I think if a specific contract wants to only support a set of tokens or blacklist a specific one they can do it as part of their implementation, but I support the idea  @that it shouldn't be included in the standard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285628187/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285629177",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285629177",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285629177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYyOTE3Nw==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T10:07:02Z",
    "updated_at": "2017-03-10T10:13:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@frozeman I would recommend to \"reject everything that is not marked as supported\" but not \"accept everything that is not marked to be rejected\" because of when contract like the dao-refund is written it shouldn't accept any of incoming token except DAO. If DAO-token is not ERC23 so there is no way to accept anything ERC23 and we should place `function tokenFallback(address _from, uint _amount) { throw; }` inside dao-refund to make every ERC23 be rejected.\r\nBut if we need to make a DAO23 refund contract to accept ERC23 standard based tokens (DAO23) we should specify DAO23 as allowed. So any other ERC23 token will still be rejected.\r\nToken standard is a recomendation to token developers how to develop their tokens in the best way. So I found it important not only recommend how tokens should be developed but also how token transactions should be handled.\r\nDo you think it is not needed to be included in token standard?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285629177/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285632757",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285632757",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285632757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYzMjc1Nw==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T10:23:19Z",
    "updated_at": "2017-03-10T10:23:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What do you think about the fallback function being something liket(address tokenSender, uint value, bytes data)\r\n\r\n@izqui as I understand it you are recommending to make token transactions behaving one step more similar to Ether transactions.\r\nWhere `t(address tokenSender, uint value, bytes payload)` means \r\n`address tokenSender` == `msg.sender`\r\n`uint value`                  == `msg.value`\r\n`bytes payload`            == `msg.data`",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285632757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285633548",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285633548",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285633548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYzMzU0OA==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T10:27:00Z",
    "updated_at": "2017-03-10T10:29:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Exactly. And the actual `msg.sender` of `t(...)` is the token being used to transfer value.\r\n\r\nSo extending your comparison you would have:\r\n\r\n`address tokenSender` == msg.sender\r\n`uint value` == msg.value\r\n`bytes payload` == msg.data\r\n`msg.sender` == ether ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285633548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285634203",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285634203",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285634203,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYzNDIwMw==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T10:30:06Z",
    "updated_at": "2017-03-10T10:35:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Of course. `tx.origin` is now an address who is sending tokens, `msg.sender` is contract of sent token, `msg.data` is data signifying what function to call inside the token contract and `payload` is data signifying what function to call inside contract-reveiver of tokens.\r\nAlso `tokenSender` is address who is sending tokens too when only contract of tokens and contract-receiver are involved and no other contracts are called.\r\nI found it awesome idea but I need to do some tests. So I cant say anything more specific right now.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285634203/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285635054",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285635054",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285635054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTYzNTA1NA==",
    "user": {
      "login": "izqui",
      "id": 447328,
      "node_id": "MDQ6VXNlcjQ0NzMyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izqui",
      "html_url": "https://github.com/izqui",
      "followers_url": "https://api.github.com/users/izqui/followers",
      "following_url": "https://api.github.com/users/izqui/following{/other_user}",
      "gists_url": "https://api.github.com/users/izqui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izqui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izqui/subscriptions",
      "organizations_url": "https://api.github.com/users/izqui/orgs",
      "repos_url": "https://api.github.com/users/izqui/repos",
      "events_url": "https://api.github.com/users/izqui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izqui/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T10:33:53Z",
    "updated_at": "2017-03-10T10:34:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Something to keep in mind regarding `tx.origin` is that in the case of using`transferFrom()`, `tx.origin` will be the authorized address to make the transaction and not the former token owner, which tbh I'm not really sure which one of the two should be accounted as the sender in this case. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285635054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285642305",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285642305",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285642305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTY0MjMwNQ==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T11:07:51Z",
    "updated_at": "2017-03-14T16:31:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see we are 1 step away from creating Token-based Ethereum inside Ether-based Ethereum.\r\nAccording to your idea token fallback function should handle incoming token transactions only in this manner:\r\n```js\r\nfunction tokenFallback(address _from, uint _value, bytes payload){\r\n  if(_data){\r\n    delegatecall(this, payload);\r\n   } else {\r\n    //tokenFallback code here\r\n  }\r\n}\r\n```\r\nBecause of Ether fallback function handles only transactions of value (ETH).\r\nAnd as @frozeman said its not a part of token standard already. I found your idea cool but as for me I dont really know. So I want to get more feedback and do some more tests.\r\nAnd of course there is always a possability just to ignore incoming `data` and handle only `_from` and `_value` as I suggested earlier.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285642305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285850035",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-285850035",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 285850035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTg1MDAzNQ==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-11T07:29:06Z",
    "updated_at": "2017-03-11T09:12:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I decided that token transaction must contain `bytes data`.\r\n\r\nIt's not a solution of any of the problems I'm aiming to solve but it may be needed for future use. As long as there is a way to attach data to Ether transactions I think there should be a way to do the same with token transactions too.\r\nI don't care how exactly this will be used to attach HEX messages to token transactions or to encode inner functions execution but the way to attach data to the transaction (token or Ether) must exist.\r\nAs the result of this `transfer` function is changed and now contains `bytes _data`.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/285850035/reactions",
      "total_count": 7,
      "+1": 6,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/286448573",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-286448573",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 286448573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjQ0ODU3Mw==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-14T15:01:13Z",
    "updated_at": "2017-03-14T15:01:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Now ERC23 is 100% backwards compatible with ERC20 and will work with every old contract designed to work with ERC20 tokens.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/286448573/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287860665",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-287860665",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 287860665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4Nzg2MDY2NQ==",
    "user": {
      "login": "eburgel",
      "id": 8409824,
      "node_id": "MDQ6VXNlcjg0MDk4MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8409824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eburgel",
      "html_url": "https://github.com/eburgel",
      "followers_url": "https://api.github.com/users/eburgel/followers",
      "following_url": "https://api.github.com/users/eburgel/following{/other_user}",
      "gists_url": "https://api.github.com/users/eburgel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eburgel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eburgel/subscriptions",
      "organizations_url": "https://api.github.com/users/eburgel/orgs",
      "repos_url": "https://api.github.com/users/eburgel/repos",
      "events_url": "https://api.github.com/users/eburgel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eburgel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T18:50:05Z",
    "updated_at": "2017-03-20T19:00:13Z",
    "author_association": "NONE",
    "body": "Nobody wants to lose its token by mistake.\r\nThere are hundreds of transactions to 0x0 address though.\r\nSo in our token contract we added :\r\n1) A test rejecting every sent to the 0x0 address.\r\n2) A specific burn address letting the user to burn explicitly some token if needed.\r\n3) the supply function returns ```initialSupply - balanceOf[burnAddress];```\r\n\r\nI don't know if it should be included in the standard, but all our futur token contracts will include these points.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/287860665/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/288226889",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-288226889",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 288226889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODIyNjg4OQ==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-21T21:37:08Z",
    "updated_at": "2017-03-21T21:37:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@eburgel you should implement a function like this\r\n`function (address _contract, uint _amount) {`\r\n`ERC20 token = ERC20(_contract);`\r\n`token.transfer(msg.sender, _amount);`\r\n`}`\r\nif you want to use ERC20 token standard because of you may want to refund someone who sends tokens to your contract. (or even to claim his tokens and sell them) You don't know what tokens it will be.\r\nBut there is an easier solution: just use ERC23. ERC23 tokens will not be accepted by a random contract that is not designed to work with them.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/288226889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/288260964",
    "html_url": "https://github.com/ethereum/EIPs/issues/223#issuecomment-288260964",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/223",
    "id": 288260964,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODI2MDk2NA==",
    "user": {
      "login": "aakilfernandes",
      "id": 1577353,
      "node_id": "MDQ6VXNlcjE1NzczNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1577353?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aakilfernandes",
      "html_url": "https://github.com/aakilfernandes",
      "followers_url": "https://api.github.com/users/aakilfernandes/followers",
      "following_url": "https://api.github.com/users/aakilfernandes/following{/other_user}",
      "gists_url": "https://api.github.com/users/aakilfernandes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aakilfernandes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aakilfernandes/subscriptions",
      "organizations_url": "https://api.github.com/users/aakilfernandes/orgs",
      "repos_url": "https://api.github.com/users/aakilfernandes/repos",
      "events_url": "https://api.github.com/users/aakilfernandes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aakilfernandes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-22T00:24:20Z",
    "updated_at": "2017-03-22T00:24:20Z",
    "author_association": "NONE",
    "body": "IMHO this should be handled by the UI, not at the core level. Doing a code check on every transfer places a gas burden on every token holder.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/288260964/reactions",
      "total_count": 18,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
