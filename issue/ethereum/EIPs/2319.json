{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2319",
  "id": 510414241,
  "node_id": "MDU6SXNzdWU1MTA0MTQyNDE=",
  "number": 2319,
  "title": "Discussion: EIP-1193",
  "user": {
    "login": "alcuadrado",
    "id": 176499,
    "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alcuadrado",
    "html_url": "https://github.com/alcuadrado",
    "followers_url": "https://api.github.com/users/alcuadrado/followers",
    "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
    "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
    "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
    "repos_url": "https://api.github.com/users/alcuadrado/repos",
    "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 177,
  "created_at": "2019-10-22T03:53:46Z",
  "updated_at": "2022-12-16T09:25:08Z",
  "closed_at": "2022-06-10T08:32:33Z",
  "author_association": "MEMBER",
  "active_lock_reason": null,
  "body": "As agreed at Devcon 5, I'm creating this issue to move the EIP-1193 discussion here. It's been fragmented in multiple places, making it hard for most people to follow it.\r\n\r\nLink to the current version of the EIP: https://eips.ethereum.org/EIPS/eip-1193\r\n\r\n## Previous discussion channels\r\n\r\n* [Initial discussion in ethereum/interfaces](https://github.com/ethereum/interfaces/issues/16)\r\n* [Ethereum Magicians thread](https://ethereum-magicians.org/t/eip-1193-ethereum-provider-javascript-api/640)\r\n* [Ethereum Provider Ring Discord server](https://discord.gg/Xum9e3V) (Note: Ping @alcuadrado if this link doesn't work)\r\n* [#1193 channel on the Ethereum JavaScript Community Discord server](https://discord.gg/AgJJvJp) (Note: Ping @alcuadrado if this link doesn't work)\r\n",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2319/reactions",
    "total_count": 20,
    "+1": 20,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544795458",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-544795458",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 544795458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDc5NTQ1OA==",
    "user": {
      "login": "alcuadrado",
      "id": 176499,
      "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcuadrado",
      "html_url": "https://github.com/alcuadrado",
      "followers_url": "https://api.github.com/users/alcuadrado/followers",
      "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
      "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
      "repos_url": "https://api.github.com/users/alcuadrado/repos",
      "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T03:53:52Z",
    "updated_at": "2019-10-22T03:53:52Z",
    "author_association": "MEMBER",
    "body": "\r\n# Summary of Devcon 5 EIP-1193 meeting\r\n\r\n## Participants\r\n\r\nThis is an incomplete list of people/projects that participated. Please feel free to add yourself or others: @alcuadrado, @nivida, @davidmurdoch, @joshstevens19, @adrianmcli, @iurimatias, @ricmoo, @spalladino, @javier-tarazaga, @ylv-io, and members from Alchemy, Chainsafe, Metamask, and possibly more projects. \r\n\r\n## Format of the discussion\r\n\r\nInitially, every member raised what they thought were the most important concerns to move the EIP forward. After that, we discussed most of them and proposed possible solutions.\r\n\r\n## List of concerns\r\n\r\n1. EIP-1193 began as a spec on how to expose a provider in a dapp browser, but mutated into specifying its interface. It still depends on EIPs related to browser-specific stuff.\r\n\r\n2. The way a provider is exposed (i.e. `window.ethereum`) only supports a single provider. This is in conflict with users installing multiple wallet extensions, and may be problematic with a multi-chain future.\r\n\r\n3. The current provider implementations have different interfaces (i.e. `send` vs `sendAsync`).\r\n\r\n4. There's no way to send batch requests in the current spec.\r\n\r\n5. Some providers need `open`/`connect` and `close`/`disconnect` methods, and others don't.\r\n\r\n6. How can a provider be known to be EIP-1193 compatible?\r\n\r\n7. How can this EIP be extended in the future? How are those extensions going to be detected?\r\n\r\n## Proposed solutions\r\n\r\n1. EIP-1193 will only focus on the provider's interface. How to expose in browser environments will be part of another document, possibly an RFC. Any dependency on browser-specific EIPs will be removed.\r\n\r\n2. As this EIP won't dictate how to expose the provider, this item is outside of its scope.\r\n\r\n3. Finalizing this EIP and adopting ti will fix it.\r\n\r\n4. There was a short discussion about this. We concluded that we don't know what to do yet. It may be just an issue with the UI controlling the provider. If a `sendBatch` method is needed in the future, another EIP can extend this one.\r\n\r\n5. We concluded that every provider should provide these methods (/cc @pedrouid ). It's up to the provider implementation to document if they need to be called or not. If a certain provider doesn't need them, it can implement them as `no-op`s.\r\n\r\n6 and 7. Most of the time was spent discussing these items. We considered different approaches like not doing anything at all, imposing a certain class name, and many other techniques. \r\n\r\nWhat we concluded is that providers would have a whitelist of the capabilities they offer. The most basic provider (i.e. HTTP-based provider) will have such a whitelist empty. More featureful providers will declare all of their extra features. For example, a websocket/polling-based provider that supports subscriptions, should declare that in the whitelist.\r\n\r\nWe analyzed the risk of this whitelist getting huge with time, but still decided to go with this approach. It's not clear that it will actually get huge, nor that this would even care.\r\n\r\nWe chose this approach over others, as it's more explicit and simpler.\r\n\r\n## Next steps\r\n\r\n* @pedrouid do you want to adapt https://github.com/ethereum/EIPs/pull/2261 so that it includes the `open` and `close` methods as described here?\r\n\r\n* I will submit a PR removing any reference to browser-specific stuff.\r\n\r\n* I will prepare a PR with the changes proposed in 6 & 7. We can discuss the details there. \r\n\r\n(Disclaimer: I will probably do these things next week, as I have to get back to Argentina and will be super jet-lagged).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544795458/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544806580",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-544806580",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 544806580,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDgwNjU4MA==",
    "user": {
      "login": "nivida",
      "id": 1699173,
      "node_id": "MDQ6VXNlcjE2OTkxNzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1699173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nivida",
      "html_url": "https://github.com/nivida",
      "followers_url": "https://api.github.com/users/nivida/followers",
      "following_url": "https://api.github.com/users/nivida/following{/other_user}",
      "gists_url": "https://api.github.com/users/nivida/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nivida/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nivida/subscriptions",
      "organizations_url": "https://api.github.com/users/nivida/orgs",
      "repos_url": "https://api.github.com/users/nivida/repos",
      "events_url": "https://api.github.com/users/nivida/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nivida/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T05:07:33Z",
    "updated_at": "2020-03-18T12:37:51Z",
    "author_association": "MEMBER",
    "body": "> EIP-1193 will only focus on the provider's interface. How to expose in browser environments will be part of another document, possibly an RFC. Any dependency on browser-specific EIPs will be removed.\r\n\r\nAs a historical addition: We discussed always both and as @frozeman told me is [this issue](https://github.com/ethereum/interfaces/issues/16) the source of this EIP.\r\n\r\n> The way a provider is exposed (i.e. window.ethereum) only supports a single provider. This is in conflict with users installing multiple wallet extensions, and may be problematic with a multi-chain future.\r\n> As this EIP won't dictate how to expose the provider, this item is outside of its scope.\r\n\r\nYes, same here I also think we should create a separate EIP which defines the injection of providers. This EIP should have a section about security concerns as well and should provide some possible solutions for doing it in a secure way. (probably MetaMask has some good inputs here for creating a RFC @danfinlay) \r\n\r\nRequired Sections:\r\n- Defining of the ``window.ethereum`` object interface \r\n  + ``window.ethereum.getProvider(..)`` -> Get provider for specific chain\r\n  + ``window.ethereum.provider`` -> Get default provider selected by the user\r\n  + ... what ever other property or method should exists on the ``window.ethereum`` object\r\n- Security ([SES](https://github.com/Agoric/SES), [Realms Shim](https://github.com/Agoric/realms-shim), [Realm Proposal](https://github.com/tc39/proposal-realms/#ecmascript-spec-proposal-for-realms-api))\r\n\r\n(we probably should have further discussion about the injection of providers in the related RFC PR)\r\n\r\n> There's no way to send batch requests in the current spec.\r\n\r\nDiscussed 2y ago [here](https://github.com/ethereum/interfaces/issues/16).\r\n\r\n> We concluded that every provider should provide these methods (/cc @pedrouid ). It's up to the provider implementation to document if they need to be called or not. If a certain provider doesn't need them, it can implement them as no-ops.\r\n\r\nAgreed.\r\n\r\n> What we concluded is that providers would have a whitelist of the capabilities they offer. The most basic provider (i.e. HTTP-based provider) will have such a whitelist empty. More featureful providers will declare all of their extra features. For example, a websocket/polling-based provider that supports subscriptions, should declare that in the whitelist.\r\n\r\n> We analyzed the risk of this whitelist getting huge with time, but still decided to go with this approach. It's not clear that it will actually get huge, nor that this would even care.\r\n\r\n> We chose this approach over others, as it's more explicit and simpler.\r\n\r\nSounds good! \r\n\r\n- But where exactly do we define and extend this whitelist? \r\n- Is it allowed to have an object stored behind a capability key for getting some further configuration possibilities?\r\n\r\n~~I would propose (as discussed at Devcon in Osaka) a method called ``getCapabilities``:~~\r\n\r\n``` typescript\r\nexport interface EIP1193 {\r\n // .... other methods\r\n getCapabilities(): Capabilities;\r\n}\r\n\r\nexport interface Capabilities {\r\n  [capability_key: string]: any;\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/544806580/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545292562",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-545292562",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 545292562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTI5MjU2Mg==",
    "user": {
      "login": "pedrouid",
      "id": 10136079,
      "node_id": "MDQ6VXNlcjEwMTM2MDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10136079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrouid",
      "html_url": "https://github.com/pedrouid",
      "followers_url": "https://api.github.com/users/pedrouid/followers",
      "following_url": "https://api.github.com/users/pedrouid/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrouid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrouid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrouid/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrouid/orgs",
      "repos_url": "https://api.github.com/users/pedrouid/repos",
      "events_url": "https://api.github.com/users/pedrouid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrouid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T06:39:02Z",
    "updated_at": "2019-10-23T06:39:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @alcuadrado for sharing the summary of Devcon's meeting 🙏\r\n\r\nI agree that `open/close` methods should be added with the ability to make them no-ops for certain providers which might not require them.\r\n\r\nHowever we technically don't need the `open` method since EIP-1102 already specified a similar method `enable` which is now widely used.\r\n\r\nI will update the #2261 to add the note for no-ops but other than that I don't see the need to have `open` if it will serve the same purpose for `enable`\r\n\r\nRegarding all other points, I have no other objections and I'm glad we have reached consensus specially on point number 2. We should merge #2090 which includes related changes.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545292562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545953492",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-545953492",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 545953492,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTk1MzQ5Mg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-24T14:46:48Z",
    "updated_at": "2019-10-24T14:46:48Z",
    "author_association": "MEMBER",
    "body": "> As agreed at Devcon 5, I'm creating this issue to move the EIP-1193 discussion here. It's been fragmented in multiple places, making it hard for most people to follow it.\r\n\r\n> As a historical addition: We discussed always both and as @frozeman told me is this issue (https://github.com/ethereum/interfaces/issues/16) the source of this EIP.\r\n\r\nInteresting – the EIP itself lists https://ethereum-magicians.org/t/eip-1193-ethereum-provider-javascript-api/640 as the official forum.\r\n\r\nIn case there is an agreement to use this issue, can someone update the EIP as well as perhaps add links to the other two mentioned forums into a References section?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545953492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545959653",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-545959653",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 545959653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTk1OTY1Mw==",
    "user": {
      "login": "frozeman",
      "id": 232662,
      "node_id": "MDQ6VXNlcjIzMjY2Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frozeman",
      "html_url": "https://github.com/frozeman",
      "followers_url": "https://api.github.com/users/frozeman/followers",
      "following_url": "https://api.github.com/users/frozeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/frozeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frozeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frozeman/subscriptions",
      "organizations_url": "https://api.github.com/users/frozeman/orgs",
      "repos_url": "https://api.github.com/users/frozeman/repos",
      "events_url": "https://api.github.com/users/frozeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frozeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-24T15:00:22Z",
    "updated_at": "2019-10-24T15:00:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great to see this going back to GitHub issues. I find them better readable. \r\n\r\nWhere can I see the latest agreed version of this eip?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/545959653/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/548063398",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-548063398",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 548063398,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODA2MzM5OA==",
    "user": {
      "login": "rekmarks",
      "id": 25517051,
      "node_id": "MDQ6VXNlcjI1NTE3MDUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25517051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rekmarks",
      "html_url": "https://github.com/rekmarks",
      "followers_url": "https://api.github.com/users/rekmarks/followers",
      "following_url": "https://api.github.com/users/rekmarks/following{/other_user}",
      "gists_url": "https://api.github.com/users/rekmarks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rekmarks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rekmarks/subscriptions",
      "organizations_url": "https://api.github.com/users/rekmarks/orgs",
      "repos_url": "https://api.github.com/users/rekmarks/repos",
      "events_url": "https://api.github.com/users/rekmarks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rekmarks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T18:56:26Z",
    "updated_at": "2019-10-30T18:56:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pedrouid [EIP-1102](https://eips.ethereum.org/EIPS/eip-1102) states that `ethereum.enable()` is deprecated in favor of the `eth_requestAccounts` RPC method. What are your thoughts on that?\r\n\r\nStarting within a release or two, the MetaMask inpage provider will support both. We believe that it would be too disruptive for dapp developers to remove `enable` anytime soon.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/548063398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/560596525",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-560596525",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 560596525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDU5NjUyNQ==",
    "user": {
      "login": "alcuadrado",
      "id": 176499,
      "node_id": "MDQ6VXNlcjE3NjQ5OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/176499?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alcuadrado",
      "html_url": "https://github.com/alcuadrado",
      "followers_url": "https://api.github.com/users/alcuadrado/followers",
      "following_url": "https://api.github.com/users/alcuadrado/following{/other_user}",
      "gists_url": "https://api.github.com/users/alcuadrado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alcuadrado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alcuadrado/subscriptions",
      "organizations_url": "https://api.github.com/users/alcuadrado/orgs",
      "repos_url": "https://api.github.com/users/alcuadrado/repos",
      "events_url": "https://api.github.com/users/alcuadrado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alcuadrado/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-02T21:30:58Z",
    "updated_at": "2019-12-02T21:32:11Z",
    "author_association": "MEMBER",
    "body": "> Interesting – the EIP itself lists https://ethereum-magicians.org/t/eip-1193-ethereum-provider-javascript-api/640 as the official forum.\r\n> \r\n> In case there is an agreement to use this issue, can someone update the EIP as well as perhaps add links to the other two mentioned forums into a References section?\r\n\r\nI created https://github.com/ethereum/EIPs/pull/2419 to update the EIP\r\n\r\n\r\n\r\n> I agree that `open/close` methods should be added with the ability to make them no-ops for certain providers which might not require them.\r\n> \r\n> However we technically don't need the `open` method since EIP-1102 already specified a similar method `enable` which is now widely used.\r\n> \r\n> I will update the #2261 to add the note for no-ops but other than that I don't see the need to have `open` if it will serve the same purpose for `enable`\r\n\r\nCompletely agree with this. Thanks for updating #2261 !\r\n>\r\n> * But where exactly do we define and extend this whitelist?\r\n> \r\n> * Is it allowed to have an object stored behind a capability key for getting some further configuration possibilities?\r\n> \r\n> \r\n> I would propose a method called `getCapabilities`:\r\n> \r\n> ```ts\r\n> export interface EIP1193 {\r\n>  // .... other methods\r\n>  getCapabilities(): Capabilities;\r\n> }\r\n> \r\n> export interface Capabilities {\r\n>   [capability_key: string]: any;\r\n> }\r\n> ```\r\n\r\nI'll explore different alternatives this week and post the results here or in a PR.\r\n\r\n> Starting within a release or two, the MetaMask inpage provider will support both. We believe that it would be too disruptive for dapp developers to remove `enable` anytime soon.\r\n\r\nI agree with this. I wouldn't add `enable` to the EIP, but removing it from the actual implementations should be done with care.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/560596525/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/560772818",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-560772818",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 560772818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDc3MjgxOA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-02T22:34:54Z",
    "updated_at": "2019-12-02T22:34:54Z",
    "author_association": "MEMBER",
    "body": "Since @alcuadrado seems to be very actively pursuing this EIP (perhaps even to `Final` status?), I'd suggest to consider adding him to the author list so he could automerge updates.\r\n\r\n@frozeman @ryanio @marcgarreau @maiavictor what do you think?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/560772818/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561010351",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-561010351",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 561010351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTAxMDM1MQ==",
    "user": {
      "login": "nivida",
      "id": 1699173,
      "node_id": "MDQ6VXNlcjE2OTkxNzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1699173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nivida",
      "html_url": "https://github.com/nivida",
      "followers_url": "https://api.github.com/users/nivida/followers",
      "following_url": "https://api.github.com/users/nivida/following{/other_user}",
      "gists_url": "https://api.github.com/users/nivida/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nivida/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nivida/subscriptions",
      "organizations_url": "https://api.github.com/users/nivida/orgs",
      "repos_url": "https://api.github.com/users/nivida/repos",
      "events_url": "https://api.github.com/users/nivida/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nivida/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-03T05:50:58Z",
    "updated_at": "2019-12-03T05:51:24Z",
    "author_association": "MEMBER",
    "body": "@axic Sounds like a good idea. @alcuadrado took the lead for this EIP in the related meeting we had during Devcon. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561010351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561019468",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-561019468",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 561019468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTAxOTQ2OA==",
    "user": {
      "login": "ryanio",
      "id": 22116,
      "node_id": "MDQ6VXNlcjIyMTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/22116?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanio",
      "html_url": "https://github.com/ryanio",
      "followers_url": "https://api.github.com/users/ryanio/followers",
      "following_url": "https://api.github.com/users/ryanio/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanio/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanio/orgs",
      "repos_url": "https://api.github.com/users/ryanio/repos",
      "events_url": "https://api.github.com/users/ryanio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-03T06:19:59Z",
    "updated_at": "2019-12-03T06:23:07Z",
    "author_association": "MEMBER",
    "body": "I am open to adding @alcuadrado to lead closing discussions to bring us to final, if I can get a +1 from another author in agreement. Thank you for taking the initiative.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561019468/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561028949",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-561028949",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 561028949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTAyODk0OQ==",
    "user": {
      "login": "rekmarks",
      "id": 25517051,
      "node_id": "MDQ6VXNlcjI1NTE3MDUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25517051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rekmarks",
      "html_url": "https://github.com/rekmarks",
      "followers_url": "https://api.github.com/users/rekmarks/followers",
      "following_url": "https://api.github.com/users/rekmarks/following{/other_user}",
      "gists_url": "https://api.github.com/users/rekmarks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rekmarks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rekmarks/subscriptions",
      "organizations_url": "https://api.github.com/users/rekmarks/orgs",
      "repos_url": "https://api.github.com/users/rekmarks/repos",
      "events_url": "https://api.github.com/users/rekmarks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rekmarks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-03T06:56:43Z",
    "updated_at": "2019-12-03T06:56:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "### Regarding `open`/`close`\r\n\r\nI believe that an `open` method should be added to #2261.\r\n\r\nAs discussed, [EIP 1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md) has deprecated its `enable` method, and replaced it with `send('eth_requestAccounts')`. The point of this method is to do exactly what you'd expect: ask the user to expose their Ethereum account(s).\r\n\r\nIn #2261, `close` is described as: `Provider connection can be closed using this method`. I interpret this to mean that the provider will stop communicating with any Ethereum chains and possibly the wallet itself, and no longer accept any RPC requests.\r\n\r\nThe question then becomes, if you `close` a Provider connection, how do you reopen it?\r\n\r\nI don't think these methods were considered with MetaMask in mind, but I'll use us as a concrete example. In MetaMask, even if you haven't \"connected\" in the sense of [EIP 1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md) (i.e. exposed any accounts), you can still request a bunch of RPC methods, such as `net_version` and `eth_chainId`. In addition, you can also check if e.g. MetaMask is unlocked. If we ever implemented `close` in any non-trivial sense, there'd be no way to explicitly re-open the connection. If we re-opened the connection implicitly, e.g. on an RPC request, then I don't see the point of closing the connection in the first place.\r\n\r\nIn short, I don't believe that `close` is useful without an `open` method in EIP 1193. I created a PR against #2261 with suggested changes here: https://github.com/pedrouid/EIPs/pull/4\r\n\r\nI don't think this is the case, but if the desire is to enable the dapp to ask the user to stop exposing accounts, I believe that discussion should move to [EIP 1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md) or [EIP 2255](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2255.md).\r\n\r\nTo be clear, MetaMask will support this EIP either way, and as things stand, we'll support `close` as a no-op.\r\n\r\ncc: @alcuadrado @pedrouid ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561028949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561103568",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-561103568",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 561103568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTEwMzU2OA==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-03T10:29:54Z",
    "updated_at": "2019-12-03T10:29:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't think this is the case, but if the desire is to enable the dapp to ask the user to stop exposing accounts, I believe that discussion should move to EIP 1102 or EIP 2255.\r\n\r\nFor me I always interpreted this way. The same way as other wbe3 provider allow you to logout.\r\n\r\nThis is useful for dapps that for example support both a builtin provider and web based one.\r\nBy allowing the user to \"close\" the builtin provider we can bring them back to the \"wallet choice\" screen. See my post here : https://ethereum-magicians.org/t/eip-1102-opt-in-provider-access/414/59?u=wighawag\r\n\r\nAs for a \"close\" as a way to block rpc request. I don't see the point. If an app do not want to send rpc request, it can simply not call them anymore.\r\n\r\nRegarding \"open\", assuming this would be a call to be made for dapps that want to make rpc request, this would be a breaking change as now dapp would not be able to call `eth_chainId` to get it know what the wallet is currently pointing at.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561103568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561271013",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-561271013",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 561271013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTI3MTAxMw==",
    "user": {
      "login": "rekmarks",
      "id": 25517051,
      "node_id": "MDQ6VXNlcjI1NTE3MDUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25517051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rekmarks",
      "html_url": "https://github.com/rekmarks",
      "followers_url": "https://api.github.com/users/rekmarks/followers",
      "following_url": "https://api.github.com/users/rekmarks/following{/other_user}",
      "gists_url": "https://api.github.com/users/rekmarks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rekmarks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rekmarks/subscriptions",
      "organizations_url": "https://api.github.com/users/rekmarks/orgs",
      "repos_url": "https://api.github.com/users/rekmarks/repos",
      "events_url": "https://api.github.com/users/rekmarks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rekmarks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-03T17:24:24Z",
    "updated_at": "2019-12-03T17:24:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> By allowing the user to \"close\" the builtin provider we can bring them back to the \"wallet choice\" screen.\r\n\r\n@wighawag I think that's a compelling use case, but IMO `close` is still under-specified and should have a corresponding `open` method. If `close` is intended as the complement to `send('eth_requestAccounts')`, then I don't understand why it's being added to EIP 1193, and I'd argue that its name is misleading.\r\n\r\nThe changes to the spec I've described are not breaking, because they remain optional.\r\n\r\n> As for a \"close\" as a way to block rpc request. I don't see the point. If an app do not want to send rpc request, it can simply not call them anymore.\r\n\r\nSimilarly, if a dapp doesn't want to use a particular provider, couldn't it also just ignore it?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561271013/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561635529",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-561635529",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 561635529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTYzNTUyOQ==",
    "user": {
      "login": "pedrouid",
      "id": 10136079,
      "node_id": "MDQ6VXNlcjEwMTM2MDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10136079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrouid",
      "html_url": "https://github.com/pedrouid",
      "followers_url": "https://api.github.com/users/pedrouid/followers",
      "following_url": "https://api.github.com/users/pedrouid/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrouid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrouid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrouid/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrouid/orgs",
      "repos_url": "https://api.github.com/users/pedrouid/repos",
      "events_url": "https://api.github.com/users/pedrouid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrouid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-04T13:09:02Z",
    "updated_at": "2019-12-04T13:09:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think that's a compelling use case, but IMO `close` is still under-specified and should have a corresponding `open` method.\r\n\r\nIn that case, I would also add that the `open` method should be specified to make a `eth_requestAccounts`.\r\n\r\nAlso given so many dapps are using `enable` instead of `open` shouldn't we instead rename `close` to `disable` to make it backwards compatible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561635529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561644837",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-561644837",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 561644837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTY0NDgzNw==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-04T13:25:59Z",
    "updated_at": "2019-12-04T13:25:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rekmarks \r\n>  then I don't understand why it's being added to EIP 1193, and I'd argue that its name is misleading.\r\n\r\nThat is why I call it `eth_closeAccounts` in my post and as it is the complement to `eth_requestAccount` it should go with it. I am open to a different naming\r\nBut yes it would not be part of EIP-1193, my post related to 1102.\r\n\r\nif we want `open` and `close` as you describe, we will have to consider the backward compatibility issue. I would make that another EIP. And I would argue that these could also be rpc methods. I don't see why these need to be js functions\r\n\r\n@pedrouid \r\n> In that case, I would also add that the open method should be specified to make a eth_requestAccounts.\r\n\r\nthat would make it redundant. `open` is actually doing less, it just allow the dapp to make rpc request. \r\nSo if we follow that, we do not need `open`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561644837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561646222",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-561646222",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 561646222,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTY0NjIyMg==",
    "user": {
      "login": "pedrouid",
      "id": 10136079,
      "node_id": "MDQ6VXNlcjEwMTM2MDc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10136079?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrouid",
      "html_url": "https://github.com/pedrouid",
      "followers_url": "https://api.github.com/users/pedrouid/followers",
      "following_url": "https://api.github.com/users/pedrouid/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrouid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrouid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrouid/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrouid/orgs",
      "repos_url": "https://api.github.com/users/pedrouid/repos",
      "events_url": "https://api.github.com/users/pedrouid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrouid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-04T13:29:41Z",
    "updated_at": "2019-12-04T13:29:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "But the EIP-1102 already caused a lot of breaking changes, couldn't we make use of that developer time  already spent on the `enable` method and just apply the changes for the `eth_requestAccounts` plus with the addition of `disable` for the EIP-1193?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561646222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561648549",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-561648549",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 561648549,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTY0ODU0OQ==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-04T13:36:11Z",
    "updated_at": "2019-12-04T13:36:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "We can keep enable (for backward compatibility) but we should move towards using rpc methods, keeping EIP-1193 as simple as possible\r\n\r\nAs for adding a `eth_closeAccounts` this won't break backward compatibility. so we can add it.\r\nThis would be part of EIP-1102 though",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/561648549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584486536",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-584486536",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 584486536,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDQ4NjUzNg==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T05:47:41Z",
    "updated_at": "2020-02-11T05:47:41Z",
    "author_association": "MEMBER",
    "body": "Can we move this to Last Call/Final or close it?  Is there any reason to leave it in Draft state at this point?  Is work being done on it?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584486536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584489713",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-584489713",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 584489713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDQ4OTcxMw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T06:04:17Z",
    "updated_at": "2020-02-11T06:04:17Z",
    "author_association": "MEMBER",
    "body": "This EIP, as currently worded, is incompatible with current `web3.js` and `ethers.js` implementations and there is no clean upgrade path for clients/servers.  The problem is that libraries and providers that implement\r\n```typescript\r\nwindow.ethereum.send(payload: JsonRpcRequest, callback: (error: JsonRpcErrorResponse | null, response: JsonRpcSuccessResponse | null) => void): void\r\n```\r\ncannot also implement\r\n```typescript\r\nwindow.ethereum.send(method: string, params: unknown[]): Promise<unknown>\r\n```\r\nA client needs to choose which one of those it expects, and a provider needs to choose which one it implements.  Things will only work if the client and the provider both align.\r\n\r\nRecommended remediation: Add a method for asking the provider what version of the protocol it is running.  This could be as simple as a string, or a string array, where the string(s) represent supported protocols.\r\n\r\n```typescript\r\nversion: (): Promise<('eip-1193' | 'eip-1234')[]>\r\n```\r\nIf a given provider supports several different EIPs, then it can return each of them in the array.  The client then merely needs to check if that function exists, and if it does do a `.includes` check on the result for its preferred protocol (potentially working its way down a list).  We can start with just 2 protocols, one for `eip 1193` and one for `legacy web3`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584489713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584737698",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-584737698",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 584737698,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDczNzY5OA==",
    "user": {
      "login": "davidmurdoch",
      "id": 187813,
      "node_id": "MDQ6VXNlcjE4NzgxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/187813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidmurdoch",
      "html_url": "https://github.com/davidmurdoch",
      "followers_url": "https://api.github.com/users/davidmurdoch/followers",
      "following_url": "https://api.github.com/users/davidmurdoch/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidmurdoch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidmurdoch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidmurdoch/subscriptions",
      "organizations_url": "https://api.github.com/users/davidmurdoch/orgs",
      "repos_url": "https://api.github.com/users/davidmurdoch/repos",
      "events_url": "https://api.github.com/users/davidmurdoch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidmurdoch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T16:59:19Z",
    "updated_at": "2020-02-24T15:59:21Z",
    "author_association": "NONE",
    "body": "@MicahZoltu, why can't they implement both signatures?\r\n\r\nProviders can use method overloading to provide both ways. An example in TypeScript:\r\n\r\n```\r\n  public send(payload: JsonRpc.Request, callback?: Callback): void;\r\n  public send(method: string, params?: any[]): Promise<any>;\r\n  public send(arg1: string | JsonRpc.Request, arg2?: Callback | any[]): Promise<any> {\r\n    if (typeod arg1 === \"string\") {\r\n      // handle as EIP-1193\r\n    } else {\r\n      // Log deprecation notice and handle as legacy\r\n      console.warn(\"`provider.send` was invoked via 'legacy' callback signature. This signature, `send(payload: JsonRpc.Request, callback?: Callback): void`, has been deprecated in favor of the signature for `send` defined in EIP-1193 and will be removed in future versions.\");\r\n    }\r\n}\r\n```\r\n\r\nOr are you just worried about callers not being able to differentiate between the legacy way the new 1193 way?\r\n\r\nI don't think this EIP should be concerned too much with this level of backwards-compatibility; providers, and clients that consume these providers, should be free to decide if they want to continue to support the legacy signature and for how long (and they should log a deprecation notice before complete removal).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584737698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584744035",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-584744035",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 584744035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDc0NDAzNQ==",
    "user": {
      "login": "davidmurdoch",
      "id": 187813,
      "node_id": "MDQ6VXNlcjE4NzgxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/187813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidmurdoch",
      "html_url": "https://github.com/davidmurdoch",
      "followers_url": "https://api.github.com/users/davidmurdoch/followers",
      "following_url": "https://api.github.com/users/davidmurdoch/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidmurdoch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidmurdoch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidmurdoch/subscriptions",
      "organizations_url": "https://api.github.com/users/davidmurdoch/orgs",
      "repos_url": "https://api.github.com/users/davidmurdoch/repos",
      "events_url": "https://api.github.com/users/davidmurdoch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidmurdoch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-11T17:11:48Z",
    "updated_at": "2020-02-11T17:11:48Z",
    "author_association": "NONE",
    "body": "@rekmarks, @wighawag I know I'm late to the discussion here.. but my assumption is that `open` and `close` are socket-related methods that have nothing to do with unlocking accounts. This is why these methods would be no-ops for providers that are communicating over HTTP-only.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/584744035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590141910",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-590141910",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 590141910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDE0MTkxMA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-24T01:28:58Z",
    "updated_at": "2020-02-24T01:28:58Z",
    "author_association": "MEMBER",
    "body": "@davidmurdoch Sorry for the delay in getting back to you.  A provider can provide multiple overloads and switch on parameters (which is a terrible pattern IMO, but it does work in this case).  However, callers _cannot_ do the same thing.  All they know is that there is a `send` function, but they do not know what parameters the `send` function expects.  If the `send` function expects only `Request,Callback` and they give it `string,unknown[]` then it will fail.  If the `send` function expects only `string,unknown[]` and they give it `Request,Callback` then it will also fail.\r\n\r\nThere is currently no graceful migration from old style to new style.  This could easily be avoided with the addition of a protocol handshake or by just using different function names.  I don't see a particularly compelling argument in making the migration more painful than necessary here.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590141910/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590153319",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-590153319",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 590153319,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDE1MzMxOQ==",
    "user": {
      "login": "davidmurdoch",
      "id": 187813,
      "node_id": "MDQ6VXNlcjE4NzgxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/187813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidmurdoch",
      "html_url": "https://github.com/davidmurdoch",
      "followers_url": "https://api.github.com/users/davidmurdoch/followers",
      "following_url": "https://api.github.com/users/davidmurdoch/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidmurdoch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidmurdoch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidmurdoch/subscriptions",
      "organizations_url": "https://api.github.com/users/davidmurdoch/orgs",
      "repos_url": "https://api.github.com/users/davidmurdoch/repos",
      "events_url": "https://api.github.com/users/davidmurdoch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidmurdoch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-24T03:06:05Z",
    "updated_at": "2020-02-24T03:06:05Z",
    "author_association": "NONE",
    "body": "Method overloading is a very common feature and I personally have no issue using it in JS. I don't mind overloading to support the old style in Ganache for another year or so (likely logging a deprecation notice in the meantime, and then an obsolete notice after that).\n\nI get that it's a bit inconvenient for everyone who writes a provider to have to keep the old API around if they want to be useful, but doing so provides a sense of stability around Ethereum's client-side APIs. As a user, especially a new user, It's beyond annoying when a project changes their long established public interface in a  backwards-incompatible manner, rendering years of community documentation and examples outdated.\n\nBecause this EIP describes an API that is  exposed to clients by the browser itself, we should consider treating it with the same level of back-compat longevity that browsers do -- supporting the old signature for the foreseeable future.\n\nAll that said, I know Ganache has it easy here, as implementors  choose us and don't have to worry about the browser's/wallet's provider's API. Still, I think provider implementors should consider maintaining the old style for while.\n\nAs far as changing the method name, have any suggestions?\n\nFor the version signaling idea (handshake or `version` property or other method), I'm not sure that'd be very graceful either.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590153319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590189287",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-590189287",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 590189287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDE4OTI4Nw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-24T06:59:14Z",
    "updated_at": "2020-02-24T06:59:14Z",
    "author_association": "MEMBER",
    "body": "With the ability to handshake, as a dapp developer I can ask the provider, \"I would like to communicate with 1193 style send, do you support that?\" and if it doesn't respond or responds with no I can then either gracefully degrade to legacy style sends, or I can present the user with a useful error message.\r\n\r\nOn the other hand, if there is no way to probe for versioning all I can do is _try_ to do a modern send and then if it fails tell the user that something went wrong (and the error message is likely useless to the user, since I'm calling an API with the wrong parameters).\r\n\r\n@davidmurdoch What is your argument against a version/handshake?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590189287/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590220042",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-590220042",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 590220042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDIyMDA0Mg==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-24T08:52:07Z",
    "updated_at": "2020-02-24T08:52:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@davidmurdoch I missed your earlier reply. I see, so this is indeed very different to what I and I guess @rekmarks were assuming.\r\n\r\nif open/close is only so provider can manage socket/live connection and does not require user interaction, then it could indeed work.\r\n\r\nOld implementation without `open` and `close` would basically do as now: open it automatically. That should then indeed be backward compatible\r\n\r\nI don't think it need to be a function on the provider object though.\r\nI like the simplicity of EIP-1193 and if we could move any extra functionality to different EIP, the better in my opinion. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590220042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590220376",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-590220376",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 590220376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDIyMDM3Ng==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-24T08:53:06Z",
    "updated_at": "2020-02-24T08:53:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am with @MicahZoltu on the need for a version/handshake, not only for backward compatibility but for forward one too. \r\n\r\n1. I want old apps to work forever. This should always be a strong requirement for our browser-facing EIPs.\r\n2. I want to allow new apps to work on old provider if they wish, or at least allow them to fails gracefully\r\n\r\nHandshake is not strictly necessary for 1:  new application can use the new schema and simply error out on old porivder\r\n\r\nIt is necessary for 2 though, so that new apps can first check what the provider support and either support it or inform the user to use a newer version.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590220376/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590401202",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-590401202",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 590401202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDQwMTIwMg==",
    "user": {
      "login": "davidmurdoch",
      "id": 187813,
      "node_id": "MDQ6VXNlcjE4NzgxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/187813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidmurdoch",
      "html_url": "https://github.com/davidmurdoch",
      "followers_url": "https://api.github.com/users/davidmurdoch/followers",
      "following_url": "https://api.github.com/users/davidmurdoch/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidmurdoch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidmurdoch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidmurdoch/subscriptions",
      "organizations_url": "https://api.github.com/users/davidmurdoch/orgs",
      "repos_url": "https://api.github.com/users/davidmurdoch/repos",
      "events_url": "https://api.github.com/users/davidmurdoch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidmurdoch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-24T15:58:56Z",
    "updated_at": "2020-02-24T15:58:56Z",
    "author_association": "NONE",
    "body": "@MicahZoltu a couple of concerns make me not fond of versioning the provider API:\r\n\r\n1. the reason the back-compat issue feels like an issue to me is because this is essentially a browser API, and browser APIs, historically, don't ship breaking changes (unless they are for security reasons).\r\n2. If we do want to think of the provider API as a browser JS API, we may want to align with the design paradigms of these existing APIs. Do any browser APIs provide versioning information? If so, what mechanism do they use, and should we try to emulate that?\r\n3. providers will need to ship increasingly complicated versioning details or handshake mechanisms for every future EIP that adds a new feature (hopefully future EIPs don't need to ship any more breaking changes).\r\n\r\nTo be clear, I still don't think this EIP itself should cover the back-compat issue. I think provider implementors should just ensure their send method works both ways for the foreseeable future. Maybe we need another EIP that defines the legacy `send`, and this EIP should build on top of it? Just a thought.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590401202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590409055",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-590409055",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 590409055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDQwOTA1NQ==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-24T16:12:26Z",
    "updated_at": "2020-02-24T16:12:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@davidmurdoch \r\n> Maybe we need another EIP that defines the legacy send, and this EIP should build on top of it\r\n\r\nExactly what I think too.\r\nSince `send` existed before, the new `send` should be called something else.\r\n\r\nmaybe `sendRPC` ?\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590409055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590437548",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-590437548",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 590437548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDQzNzU0OA==",
    "user": {
      "login": "davidmurdoch",
      "id": 187813,
      "node_id": "MDQ6VXNlcjE4NzgxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/187813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidmurdoch",
      "html_url": "https://github.com/davidmurdoch",
      "followers_url": "https://api.github.com/users/davidmurdoch/followers",
      "following_url": "https://api.github.com/users/davidmurdoch/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidmurdoch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidmurdoch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidmurdoch/subscriptions",
      "organizations_url": "https://api.github.com/users/davidmurdoch/orgs",
      "repos_url": "https://api.github.com/users/davidmurdoch/repos",
      "events_url": "https://api.github.com/users/davidmurdoch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidmurdoch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-24T17:02:23Z",
    "updated_at": "2020-02-24T17:02:23Z",
    "author_association": "NONE",
    "body": "@wighawag I don't think we need to rename it, personally. Method overloading works fine in JS and is quite common.\r\n\r\nFor example, the browser's `fetch` API's signature is similar to our `send` signature (both legacy style and this EIP):\r\n\r\n```\r\ninterface fetch {\r\n  (method: string, options: any): Promise<Response>\r\n  (request: RequestInfo): Promise<Response>;\r\n}\r\n```\r\n\r\nvs `send`:\r\n\r\n```\r\ninterface send {\r\n  (method: string, params: any[]): Promise<Response>\r\n  (request: RequestInfo, callback: (err: Error | null, response: Response | undefined) => {}): void;\r\n}\r\n\r\n```\r\n\r\n_note: I'm just typing these from memory, so these definitions could be a little off._",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590437548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590477686",
    "html_url": "https://github.com/ethereum/EIPs/issues/2319#issuecomment-590477686",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2319",
    "id": 590477686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDQ3NzY4Ng==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-24T18:23:59Z",
    "updated_at": "2020-02-24T18:23:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@davidmurdoch Yes I got that from your earlier message but like I said above. this is a problem for forward compatibility, \r\n\r\n> 2. I want to allow new apps to work on old provider if they wish, or at least allow them to fails gracefully\r\n\r\nif the function name remain the same, new apps cannot know whether the provider use the old or new way, without making an attempt first.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/590477686/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
