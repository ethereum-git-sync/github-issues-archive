{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/753/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/753/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/753/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/753",
  "id": 269429779,
  "node_id": "MDU6SXNzdWUyNjk0Mjk3Nzk=",
  "number": 753,
  "title": "ERC: Micro Contract Architecture",
  "user": {
    "login": "willitscale",
    "id": 5319247,
    "node_id": "MDQ6VXNlcjUzMTkyNDc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5319247?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/willitscale",
    "html_url": "https://github.com/willitscale",
    "followers_url": "https://api.github.com/users/willitscale/followers",
    "following_url": "https://api.github.com/users/willitscale/following{/other_user}",
    "gists_url": "https://api.github.com/users/willitscale/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/willitscale/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/willitscale/subscriptions",
    "organizations_url": "https://api.github.com/users/willitscale/orgs",
    "repos_url": "https://api.github.com/users/willitscale/repos",
    "events_url": "https://api.github.com/users/willitscale/events{/privacy}",
    "received_events_url": "https://api.github.com/users/willitscale/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2017-10-29T20:00:58Z",
  "updated_at": "2022-01-03T07:11:43Z",
  "closed_at": "2022-01-03T07:11:43Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "    EIP: <to be assigned>\r\n    Title: Micro Contract Architecture\r\n    Author: James Lockhart <james@n3tw0rk.co.uk>\r\n    Type: Standard Track\r\n    Category: ERC\r\n    Status: Draft\r\n    Created: 2017-10-29\r\n\r\n## Simple Summary\r\nA contract design pattern to detach functionality and enable contract mutability.\r\n\r\n## Abstract\r\nMicro contract architecture is based around the microservice architecture design. This where functionality of one system is spread across multiple smaller components, allowing individual component modification to not impact the entire system. The micro contract design encapsulates an single contract which follows a gateway design pattern that delegates functionality to micro contracts.\r\n\r\n## Motivation\r\nThe micro contract architecture is to addresses two key issues within smart contracts. The first is the immutability of contracts, once a contract has been deployed to the network it is set in stone and any bugs or vulnerabilities are set firmly with it. Micro contracts won't resolve this completely, but allows contracts to have detached functionality and enables publishers to fix core issues in a live contract. The second issue this will help resolve is the need for monolithic contracts, where an entire application's functionality is contained within a single contract. Monolithic architecture is one of the key driving forces many service developers move towards a micro base architecture. Functionality detachment enables improved development, code clarity, maintainability and minimizes deployment risks.\r\n\r\n## Specification\r\nThere are two core components of the micro contract architecture design which are the gateway and the micro contract.\r\n\r\n* * *\r\n\r\n#### The Gateway\r\n\r\nThe gateway acts as a not just a relay, but also a component manager. It has the ability to delegate lookup keys to contracts and control access to components.\r\n\r\n```javascript\r\ncontract Gateway {\r\n  address internal _owner;\r\n  mapping(bytes32 => address) internal _services;\r\n  mapping(bytes32 => bool) internal _enabled;\r\n\r\n  event ServiceComponentModification(bytes32, address);\r\n  event ServiceAccessModification(bytes32, bool);\r\n\r\n  modifier canModify(address addr) {\r\n    require(_owner == addr);\r\n    _;\r\n  }\r\n\r\n  function modifyComponent(bytes32 action, address addr) public canModify(msg.sender);\r\n  function modifyAccess(bytes32 action, bool enabled) public canModify(msg.sender);\r\n}\r\n```\r\n\r\n* * *\r\n\r\n##### Owner Constraint\r\n\r\nOwnership is a subjective design to either singular or delegated, for this concept I've opted for singular and implementations are at the developers discretion.\r\n\r\n```javascript\r\naddress internal _owner;\r\n```\r\nThis is simply an owner address stored against a storage variable which usually would be assigned from the constructor and immutable once set.\r\n\r\n```javascript\r\nmodifier canModify(address addr) {\r\n  require(_owner == addr);\r\n  _;\r\n}\r\n```\r\n\r\nThe modifier is essential to ensure constraints are applied to component alterations and access modification.\r\n\r\n* * *\r\n\r\n##### Component modification\r\n\r\nComponents are referenced by fixed byte arrays and are represented as ASCII strings, the micro contracts are stored as addresses which is what allows the modification of the micro contracts.\r\n\r\n```javascript\r\nmapping(bytes32 => address) internal _services;\r\n```\r\n\r\nEach service should have an `byte32` to `address` mapping which stores the locations of the micro contracts.\r\n\r\n```javascript\r\nevent ServiceComponentModification(bytes32, address);\r\n```\r\n\r\nEvents should be logged on any change to micro contract locations to ensure all changes are as transparent as possible.\r\n\r\n```javascript\r\nfunction modifyComponent(bytes32 action, address addr) public canModify(msg.sender);\r\n```\r\n\r\nThe function call to modify the component location.\r\n\r\n* * *\r\n\r\n##### Access modification\r\n\r\nSimilar to the component modification, component access is identified by a fixed byte array, but unlike the components access it is driven by a simple `bool` to represent if the component can be accessed or not. This feature is designed to support the transition of a micro service by disabling the component before the transition and enabling it after the transition, as well as allowing the disabling of components if required.\r\n\r\n```javascript\r\nmapping(bytes32 => bool) internal _enabled;\r\n```\r\n\r\nAvailability of components is represented by a mapping of `bytes32` to `bool` which should use the same keys as the component mapping.\r\n\r\n```javascript\r\nevent ServiceAccessModification(bytes32, bool);\r\n```\r\n\r\nEvents for all access modification should be logged to ensure transparency.\r\n\r\n```javascript\r\nfunction modifyAccess(bytes32 action, bool enabled) public canModify(msg.sender);\r\n```\r\n\r\nThe function call to modify the component accessibility.\r\n\r\n* * *\r\n\r\n#### The Micro Contract\r\n\r\nThe micro contract template is quite straight forward as it only requires a simple access check and a validation function. This is similar to the owner constraint, but the constraint modifier should be applied to every function to prevent unauthorized interactions and access should be limited to the gateway and not the owner/creator.\r\n\r\n```javascript\r\ncontract Micro {\r\n  address internal _gateway;\r\n  modifier isGateway(address addr) {\r\n    require(_gateway == addr);\r\n    _;\r\n  }\r\n\r\n  function isMicroContract() public isGateway(msg.sender) returns (address);\r\n}\r\n```\r\n\r\n* * *\r\n\r\n##### Gateway Restrictions\r\n\r\nDue to the services being in essence part of the gateway all interactions should be limited to and only to the gateway its self.\r\n\r\n```javascript\r\naddress internal _gateway;\r\n```\r\n\r\nThe gateway address.\r\n\r\n```javascript\r\nmodifier isGateway(address addr) {\r\n  require(_gateway == addr);\r\n  _;\r\n}\r\n```\r\n\r\nModifier to verify a call is being made from the assigned gateway.\r\n\r\n```javascript\r\nfunction isMicroContract() public isGateway(msg.sender) returns (address);\r\n```\r\n\r\nFunction to allow the gateway to verify that this is infact a valid micro contract.\r\n\r\n* * *\r\n\r\n## Rationale\r\nImmutable contracts were always going to be a challenge to the software development world and the difficult ability to produce bug free applications. Re-deploying contracts adds extra load to the network, user confusion, high gas overheads and can be quite a time consuming process, especially if user data is involved. Utilizing the micro contract design almost negates all of these issues, but understandably contributes a different set of issues. Immutability gives the users of a DApp a clear transparency, trust and overall clarity of what their interactions implicate, where as the micro contract design can take this away. The transparency remains, but this now burdened with the task of researching the micro contacts and their references. This design is fully applicable to the current state of the network, but can be done deceptively and a standard should be introduce to highlight this.\r\n\r\n## Known Issues\r\nCurrently, there is a limitation on passing dynamic values between contract such as `string`, `bytes` and primitive arrays. Data transmission and retrieval must be achieved using a combination of a fixed length data types and multi-value parameters and return values.\r\n\r\n## References\r\n- [Pattern: Microservice Architecture](http://microservices.io/patterns/microservices.html)\r\n- [Micro Contract Architecture Example](https://github.com/willitscale/micro-contract-architecture)\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/753/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/753/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340295283",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-340295283",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 340295283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDI5NTI4Mw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-29T21:03:32Z",
    "updated_at": "2017-10-29T21:03:32Z",
    "author_association": "MEMBER",
    "body": "This sounds like a best practice, rather than a specification.  Why does this specification need standardization?  In what scenarios will users/developers be interoping with unknown future contracts or interoping with a wide array of contracts outside of their control?\r\n\r\n----\r\n\r\nCompletely separate from the above, I'm generally against patterns that make contracts mutable.  It defeats a large amount of the purpose of a trustless system.  It can be a good pattern to follow during beta, but IMO it is not a good pattern to follow long-term.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340295283/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340296887",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-340296887",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 340296887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDI5Njg4Nw==",
    "user": {
      "login": "willitscale",
      "id": 5319247,
      "node_id": "MDQ6VXNlcjUzMTkyNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5319247?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willitscale",
      "html_url": "https://github.com/willitscale",
      "followers_url": "https://api.github.com/users/willitscale/followers",
      "following_url": "https://api.github.com/users/willitscale/following{/other_user}",
      "gists_url": "https://api.github.com/users/willitscale/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willitscale/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willitscale/subscriptions",
      "organizations_url": "https://api.github.com/users/willitscale/orgs",
      "repos_url": "https://api.github.com/users/willitscale/repos",
      "events_url": "https://api.github.com/users/willitscale/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willitscale/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-29T21:10:53Z",
    "updated_at": "2017-10-29T21:10:53Z",
    "author_association": "NONE",
    "body": "The standardization is to highlight the the fact that is is possible with the current implementation of the network. Whether we like it or not developers will eventually learn that this is possible and there will be some people to utilize it deceptively. Standardisation ensures that we can limit the deceptive adaptations of this design and make it clear to everyone that this is being used.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340296887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340298708",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-340298708",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 340298708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDI5ODcwOA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-29T21:21:13Z",
    "updated_at": "2017-10-29T21:21:13Z",
    "author_association": "MEMBER",
    "body": "It feels like only honest developers will follow the standard, if it makes it more obvious to end-users, while dishonest developers will not follow the standard and therefore we have only created a false sense of security, since the user can't assert \"pattern X is not being followed, therefore contracts are immutable\".\r\n\r\nAlso, end-users aren't the ones auditing contracts, it is professional auditors/experienced developers.  I feel like a standard such as this will not provide much additional value to such auditors, and it will provide no value to everyone else.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340298708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340305782",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-340305782",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 340305782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDMwNTc4Mg==",
    "user": {
      "login": "willitscale",
      "id": 5319247,
      "node_id": "MDQ6VXNlcjUzMTkyNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5319247?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willitscale",
      "html_url": "https://github.com/willitscale",
      "followers_url": "https://api.github.com/users/willitscale/followers",
      "following_url": "https://api.github.com/users/willitscale/following{/other_user}",
      "gists_url": "https://api.github.com/users/willitscale/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willitscale/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willitscale/subscriptions",
      "organizations_url": "https://api.github.com/users/willitscale/orgs",
      "repos_url": "https://api.github.com/users/willitscale/repos",
      "events_url": "https://api.github.com/users/willitscale/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willitscale/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-29T22:07:28Z",
    "updated_at": "2017-10-29T22:07:28Z",
    "author_association": "NONE",
    "body": "I'm not saying it's that black and white, but it would allow for contract integrity verification, similar to how some applications limit access to tokens if they don't support ERC20 standard. This would also allow applications to map the layout of how micro contracts in completeness from the event logs or if need be an additional function to query the current active micro contracts.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340305782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340318386",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-340318386",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 340318386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDMxODM4Ng==",
    "user": {
      "login": "tjayrush",
      "id": 5417918,
      "node_id": "MDQ6VXNlcjU0MTc5MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5417918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjayrush",
      "html_url": "https://github.com/tjayrush",
      "followers_url": "https://api.github.com/users/tjayrush/followers",
      "following_url": "https://api.github.com/users/tjayrush/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjayrush/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjayrush/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjayrush/subscriptions",
      "organizations_url": "https://api.github.com/users/tjayrush/orgs",
      "repos_url": "https://api.github.com/users/tjayrush/repos",
      "events_url": "https://api.github.com/users/tjayrush/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjayrush/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T01:01:48Z",
    "updated_at": "2017-10-30T01:01:48Z",
    "author_association": "NONE",
    "body": "I think the point @MicahZoltu makes here:\r\n\r\n> I'm generally against patterns that make contracts mutable.\r\n\r\nis important. Users (and developers) should be trained to expect immutable contracts. This idea used to be one of the major selling points of smart contracts. Immutable smart contracts remove the need for the end user to trust the developer. That's where the word contract came from. You can't change a paper contract unless both sides agree. That idea is being lost when we create a standard that argues for mutable contracts.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340318386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340550010",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-340550010",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 340550010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDU1MDAxMA==",
    "user": {
      "login": "willitscale",
      "id": 5319247,
      "node_id": "MDQ6VXNlcjUzMTkyNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5319247?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willitscale",
      "html_url": "https://github.com/willitscale",
      "followers_url": "https://api.github.com/users/willitscale/followers",
      "following_url": "https://api.github.com/users/willitscale/following{/other_user}",
      "gists_url": "https://api.github.com/users/willitscale/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willitscale/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willitscale/subscriptions",
      "organizations_url": "https://api.github.com/users/willitscale/orgs",
      "repos_url": "https://api.github.com/users/willitscale/repos",
      "events_url": "https://api.github.com/users/willitscale/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willitscale/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T19:00:26Z",
    "updated_at": "2017-10-30T19:00:26Z",
    "author_association": "NONE",
    "body": "I understand completely which is why I made it a key point in my rationale:\r\n> Immutability gives the users of a DApp a clear transparency, trust and overall clarity of what their interactions implicate, where as the micro contract design can take this away. The transparency remains, but this now burdened with the task of researching the micro contacts and their references. This design is fully applicable to the current state of the network, but can be done deceptively and a standard should be introduce to highlight this.\r\n\r\nI believe educating the users to expect immutability is wrong when mutability is possible. It's important that all users are fully educated in how developers could exploit this to their advantage which is why in part I would like to bring a standard to the table to help expose this. Always remember though user design is not user experience.\r\n\r\nI know I have other motives behind this as well as I still feel strongly about immutable bugs and vulnerabilities and I know how this can conflict with the design of the smart contracts. In a real world contract the terms can also be changed if there is a stipulation granting it, so why not in a smart contract?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340550010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340598904",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-340598904",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 340598904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDU5ODkwNA==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T22:04:49Z",
    "updated_at": "2017-10-30T22:04:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "This seems like what I'm building with ERC #745, do you think we can merge efforts or we have totally different scope?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340598904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340601771",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-340601771",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 340601771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwMTc3MQ==",
    "user": {
      "login": "3esmit",
      "id": 224810,
      "node_id": "MDQ6VXNlcjIyNDgxMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/224810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3esmit",
      "html_url": "https://github.com/3esmit",
      "followers_url": "https://api.github.com/users/3esmit/followers",
      "following_url": "https://api.github.com/users/3esmit/following{/other_user}",
      "gists_url": "https://api.github.com/users/3esmit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3esmit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3esmit/subscriptions",
      "organizations_url": "https://api.github.com/users/3esmit/orgs",
      "repos_url": "https://api.github.com/users/3esmit/repos",
      "events_url": "https://api.github.com/users/3esmit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3esmit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T22:18:05Z",
    "updated_at": "2017-10-30T22:18:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Why your read only have permissioning aswell, @willitscale, shouldn't this just be at write functions? Just saying, as everything in blockchain is public, even if you mark it as private.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340601771/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340604794",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-340604794",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 340604794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwNDc5NA==",
    "user": {
      "login": "willitscale",
      "id": 5319247,
      "node_id": "MDQ6VXNlcjUzMTkyNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5319247?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willitscale",
      "html_url": "https://github.com/willitscale",
      "followers_url": "https://api.github.com/users/willitscale/followers",
      "following_url": "https://api.github.com/users/willitscale/following{/other_user}",
      "gists_url": "https://api.github.com/users/willitscale/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willitscale/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willitscale/subscriptions",
      "organizations_url": "https://api.github.com/users/willitscale/orgs",
      "repos_url": "https://api.github.com/users/willitscale/repos",
      "events_url": "https://api.github.com/users/willitscale/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willitscale/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T22:32:34Z",
    "updated_at": "2017-10-30T22:35:47Z",
    "author_association": "NONE",
    "body": "I think our scopes are somewhat different, this isn't about permissions and any reference to the scope of permissions is at the developer's discretion. `private` isn't used to mask a value, just like any other programming language it's a modification controlling mechanism. It's used to limit access by scope and in my example I use it to prevent inheriting components modifying values I felt they shouldn't.\r\n\r\nI'm not saying they couldn't be used in conjunction, but I think our ERCs address different issues.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/340604794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997627909",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-997627909",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 997627909,
    "node_id": "IC_kwDOAq426M47dpgF",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-20T06:14:35Z",
    "updated_at": "2021-12-20T06:14:35Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997627909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003905570",
    "html_url": "https://github.com/ethereum/EIPs/issues/753#issuecomment-1003905570",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/753",
    "id": 1003905570,
    "node_id": "IC_kwDOAq426M471mIi",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-03T07:11:43Z",
    "updated_at": "2022-01-03T07:11:43Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1003905570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
