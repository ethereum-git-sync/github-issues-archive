{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1724",
  "id": 403300760,
  "node_id": "MDU6SXNzdWU0MDMzMDA3NjA=",
  "number": 1724,
  "title": "zkERC20: Confidential Token Standard",
  "user": {
    "login": "zac-williamson",
    "id": 1476668,
    "node_id": "MDQ6VXNlcjE0NzY2Njg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1476668?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zac-williamson",
    "html_url": "https://github.com/zac-williamson",
    "followers_url": "https://api.github.com/users/zac-williamson/followers",
    "following_url": "https://api.github.com/users/zac-williamson/following{/other_user}",
    "gists_url": "https://api.github.com/users/zac-williamson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zac-williamson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zac-williamson/subscriptions",
    "organizations_url": "https://api.github.com/users/zac-williamson/orgs",
    "repos_url": "https://api.github.com/users/zac-williamson/repos",
    "events_url": "https://api.github.com/users/zac-williamson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zac-williamson/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 24,
  "created_at": "2019-01-25T19:26:44Z",
  "updated_at": "2021-12-05T15:04:23Z",
  "closed_at": "2021-12-04T20:13:11Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\neip: 1724\r\ntitle: Confidential Token Standard\r\nauthor: AZTEC\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/1724\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2019-01-25\r\nrequires: 1723\r\n```\r\n\r\n<!--You can leave these HTML comments in your merged EIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new EIPs. Note that an EIP number will be assigned by an editor. When opening a pull request to submit your EIP, please use an abbreviated title in the filename, `eip-draft_title_abbrev.md`. The title should be 44 characters or less.-->\r\n\r\n## Simple Summary\r\n<!--\"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.-->\r\nThis EIP defines the standard interface and behaviours of a confidential token contract, where ownership values and the values of transfers are encrypted.\r\n\r\n## Abstract\r\n<!--A short (~200 word) description of the technical issue being addressed.-->\r\nThis standard defines a way of interacting with a **confidential** token contract. Confidential tokens do not have traditional balances - value is represented by **notes**, which are composed of a public owner and an encrypted value. Value is transferred by splitting a note into multiple notes with different owners. Similarly notes can be combined into a larger note. Note splitting is analogous to the behaviour of Bitcoin UTXOs, which is a good mental model to follow.\r\n  \r\nThese \"join-split\" transactions must satisfy a balancing relationship (the sum of the values of the old notes must be equal to the sum of the values of the new notes) - this can be proven via a zero-knowledge proof.  \r\n\r\n**This EIP was modelled on the zero-knowledge proofs enabled by the [AZTEC protocol](https://github.com/AztecProtocol/AZTEC/blob/master/AZTEC.pdf). However this specification is not specific to AZTEC and alternative technologies can be used to implement this standard, such as Bulletproofs or a zk-SNARK-based implementation**\r\n\r\n## Motivation\r\n<!--The motivation is critical for EIPs that want to change the Ethereum protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the EIP solves. EIP submissions without sufficient motivation may be rejected outright.-->\r\nThe ability to transact in confidentiality is a requirement for many kinds of financial instruments. The motivation of this EIP is to establish a standard that defines how these confidential assets are constructed and traded. Similar to an ERC20 token, if confidential tokens conform to the same interface then this standard can be re-used by other on-chain applications, such as confidential decentralized exchanges or confidential escrow accounts.  \r\n  \r\nThe zkERC20 token interface is designed such that the economic beneficiary of any transaction is completely divorced from the transaction sender. This is to facilitate the use of one-time stealth addresses to \"own\" zero-knowledge notes. Such addresses will not easily be fundable with gas to pay for transactions (without leaking information). Creating a clear separation between the transaction sender and the economic beneficiary allows third party service layers to be tasked with the responsibility to sign transactions.\r\n\r\n## Specification\r\n<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Ethereum platforms (go-ethereum, parity, cpp-ethereum, ethereumj, ethereumjs, and [others](https://github.com/ethereum/wiki/wiki/Clients)).-->\r\nAn example zkERC20 token contract\r\n\r\n```solidity\r\ninterface zkERC20 {\r\n    event CreateConfidentialNote(address indexed _owner, bytes _metadata);\r\n    event DestroyConfidentialNote(address indexed _owner, bytes32 _noteHash);\r\n\r\n    function cryptographyEngine() external view returns (address);\r\n    function confidentialIsApproved(address _spender, bytes32 _noteHash) external view returns (bool);\r\n    function confidentialTotalSupply() external view returns (uint256);\r\n    function publicToken() external view returns (address);\r\n    function supportsProof(uint16 _proofId) external view returns (bool);\r\n    function scalingFactor() external view returns (uint256);\r\n\r\n    function confidentialApprove(bytes32 _noteHash, address _spender, bool _status, bytes _signature) public;\r\n    function confidentialTransfer(bytes _proofData) public;\r\n    function confidentialTransferFrom(uint16 _proofId, bytes _proofOutput) public;\r\n}\r\n```  \r\n\r\nThe token contract must implement the above interface to be compatible with the standard. The implementation must follow the specifications described below.\r\n\r\n### The fundamental unit of 'value' in a zk-ERC20: the zero-knowledge note  \r\n\r\nUnlike traditional balances, value is represented via an UXTO-style model represented by **notes**. A note has the following public information:  \r\n\r\n* A **public key**, that contains an encrypted representation of the note's value  \r\n* The Ethereum **address** of the note's 'owner'  \r\n* Note **metadata** - additional data required by the note owner, but is not used in any smart-contract logic\r\n  \r\nA note has the following private information:  \r\n\r\n* A **viewing key**, which can be used to decrypt the note  \r\n* A **spending key**  \r\n* A **value** - a representation of the number of tokens this note contains  \r\n\r\n### Public notes, private values: rationale behind the note construct  \r\n\r\nIn order to enable cross-asset interoperability, we can hide the notionals in a given transaction, however **what** is being transacted is public, as well as the Ethereum addresses of the transactors.  \r\n\r\nThis is to enable a high degree of interoperability between zero-knowledge assets - it is difficult to design a zero-knowledge DApp if one cannot identify the asset class of any given note.  \r\n\r\nThe `owner` field of a note is public for ease-of-use as we want traditional Ethereum private keys to be able to sign against zero-knowledge notes, and zero-knowledge spending proofs. One can use a Monero-style stealth address protocol to ensure that the Ethereum address of a note's `owner` contains no identifying information about the note's true owner.\r\n\r\n### The zero-knowledge note registry\r\n\r\nA token that conforms to the zkERC20 standard must have a method of storing the token's set of **unspent** zero-knowledge notes. The Cryptography Engine identifies notes with the following tuple:\r\n\r\n1. A `bytes32 _noteHash` variable, a `keccak256` hash of a note's encrypted data\r\n2. A `address _owner` variable, an `address` that defines a note's owner\r\n3. A `bytes _notedata` variable, the `notedata` is a combination of the note's public key and the note metadata. When implemented using the AZTEC protocol, `secp256k1` and `bn128` group elements that allows a note owner to recover and decrypt the note.\r\n\r\nAn example implementation of zkERC20 represents this as a mapping from `noteHash` to `owner`: `mapping(bytes32 => address) noteRegistry;`. The `metadata` is required for logging purposes only, the `noteHash` and `owner` variables alone are enough to define a unique note.\r\n\r\n### View Functions\r\n\r\n#### cryptographyEngine\r\n\r\n```solidity\r\nfunction cryptographyEngine() view returns (address)\r\n```\r\n\r\nThis function returns the address of the smart contract that validates this token's zero-knowledge proofs. For the specification of the Cryptography Engine, please see [this ERC](https://github.com/ethereum/EIPs/issues/1723).\r\n\r\n> <small>**returns:** address of the cryptography engine that validates this token's zero-knowledge proofs</small>\r\n\r\n#### publicToken\r\n\r\n```solidity\r\nfunction publicToken() view returns (address)\r\n```\r\n\r\nThis function returns the address of the public token that this confidential token is attached to. The public token should conform to the ERC20 token standard. This link enables a user to convert between an ERC20 token balance and confidential zkERC20 notes.  \r\n  \r\nIf the token has no public analogue (i.e. it is a purely confidential token) this method should return `0`.\r\n\r\n> <small>**returns:** address of attached ERC20 token</small>\r\n\r\n#### supportsProof\r\n\r\n```solidity\r\nfunction supportsProof(uint16 _proofId) view returns (bool)\r\n```\r\n\r\nThis function returns whether this token supports a specific zero-knowledge proof ID. The Cryptography Engine can support a number of zero-knowledge proofs. The token creator may wish to only support a subset of these proofs.  \r\n\r\nThe rationale behind using a `uint16` variable is twofold:\r\n\r\n1. The total number of proofs supported by the engine will never grow to be larger than 65535\r\n2. The purpose of the engine is to define a \"grammar\" of composable zero-knowledge proofs that can be used to define the semantics of confidential transactions and the total set will be quite small. Using an integer as a proofID allows for a simple bit-filter to validate whether a proof is supported or not (TODO put somewhere else).\r\n\r\n> <small>**returns:** boolean that defines whether a proof is supported by the token</small>\r\n\r\n#### confidentialTotalSupply\r\n\r\n```solidity\r\nfunction confidentialTotalSupply() view returns (uint256);\r\n```\r\n\r\nThis function returns the total sum of tokens that are currently represented in zero-knowledge note form by the contract. This value must be equal to the sum of the values of all unspent notes, which is validated by the Cryptography Engine. Note that this function may leak privacy if there's only one user of the zkERC20 contract instance.\r\n\r\n> <small>**returns:** the combined value of all confidential tokens</small>\r\n\r\n#### scalingFactor\r\n\r\n```solidity\r\nfunction scalingFactor() view returns (uint256)\r\n```\r\n\r\nThis function returns the token `scalingFactor`. The range of integers that can be represented in a note is likely smaller than the native word size of the EVM (~30 bits vs 256 bits). As a result, a scaling factor is applied when converting between public tokens and confidential note form. An ERC20 token value of `1` corresponds to an zkERC20 value of `scalingFactor`.\r\n\r\n> <small>**returns:** the multiplier used when converting between confidential note values and public tokens</small>\r\n\r\n### Approving Addresses to Transact Zero-Knowledge Notes  \r\n\r\nFor confidential transactions to become truly useful, it must be possible for smart contracts to transact notes on behalf of their owners. For example a confidential decentralized exchange or a confidential investment fund. These transactions still require zero-knowledge proofs that must be constructed on-chain, but they can be constructed on behalf of note owners and validated against ECDSA signatures signed by note owners.  \r\n\r\nTo this end, a `confidentialApprove` method is required to delegate.\r\n\r\n#### confidentialApprove\r\n\r\n```solidity\r\nfunction confidentialApprove(bytes32 _noteHash, address _spender, bool _status, bytes _signature)\r\n```  \r\n\r\nThis function allows a note owner to approve the address `approved` to \"spend\" a zero-knowledge note in a `confidentialTransferFrom` transaction.\r\n\r\n> <small>**parameters**</small>  \r\n> <small>`_noteHash`: the hash of the note being approved</small>  \r\n> <small>`_sender`: the address of the entity being approved</small>  \r\n> <small>`_status`: defines whether `approved` is being given permission to spend a note, or if permission is being revoked</small>  \r\n> <small>`_signature`: ECDSA signature from the note owner that validates the `confidentialApprove` instruction</small>  \r\n\r\n## Confidential Transfers\r\n\r\nThe action of sending confidential notes requires a zero-knowledge proof to be validated by the Cryptography Engine that a given zk-ERC20 contract listens to. The semantics of this proof will vary depending on the **proof ID**. For example, the zero-knowledge proof required to partially fill an order between two zero-knowledge assets and the zero-knowledge proof required for a unilateral \"join-split\" transaction are different proofs, with different validation logic. Every proof supported by the Cryptography Engine will share the following common feature:  \r\n\r\n* A **balancing relationship** has been satisfied - the sum of the values of the notes \"to be created\" equals the sum of the values of the notes \"to be spent\"\r\n\r\nTo validate a zero-knowledge proof, the token smart contract must call the Cryptography Engine's `validateProof(uint16 _proofId, bytes _proofData) public returns (bytes32[] _destroyedNotes, Note[] _createdNotes, address _publicOwner, int256 _publicValue)` function. This method will throw an error if the proof is invalid. If the proof is *valid*, the following data is returned:\r\n\r\n> <small>**createdNotes:** the array of notes the proof wishes to create</small>\r\n> <small>**destroyedNotes:** the array of notes the proof wishes to destroy</small>\r\n> <small>**publicOwner:** if a public conversion is required, this is the address of the public token holder</small>\r\n> <small>**publicValue:** if a public conversion is required, this is the amount of tokens to be transferred to the public token holder. Can be negative, which represents a conversion from the public token holder to the zkERC20 contract</small>  \r\n\r\nThe structure of `Note` is the following:\r\n\r\n```solidity\r\nstruct Note {\r\n    address owner;\r\n    bytes32 noteHash;\r\n    bytes noteData;\r\n}\r\n```  \r\n\r\nThe above information can be used by the zkERC20 token to validate the **legitimacy** of a confidential transfer.\r\n\r\n### Direct Transactions\r\n\r\nBasic \"unilateral\" transfers of zero-knowledge notes are enabled via a \"join-split\"-style transaction, accessed via the `confidentialTransfer` method.  \r\n\r\n#### confidentialTransfer\r\n\r\n```solidity\r\nfunction confidentialTransfer(bytes proofData)\r\n```  \r\n\r\nThis function is designed as an analogue to the ERC20 `transfer` method.  \r\n\r\nTo enact a `confidentialTransfer` method call, the token contract must check and perform the following:\r\n\r\n1. Successfully execute `cryptographyEngine.validateProof(1, proofData)`\r\n   * If this proof is valid, then for every note being consumed in the transaction, the note owner has provided a satisfying ECDSA signature\r\n2. Examine the output of `cryptographyEngine.validateProof` `(createdNotes, destroyedNotes, publicOwner, publicValue)` and validate the following:\r\n   1. Every `Note` in `destroyedNotes` exists in the token's note registry\r\n   2. Every `Note` in `createdNotes` does **not** exist in the token's note registry\r\n\r\nIf the above conditions are satisfied, the following steps must be performed:\r\n\r\n1. If `publicValue < 0`, call `erc20Token.transferFrom(publicOwner, this, uint256(-publicValue))`. If this call fails, abort the transaction\r\n2. If `publicValue > 0`, call `erc20Token.transfer(publicOwner, uint256(publicValue))`\r\n3. Update the token's total confidential supply to reflect the above transfers\r\n4. For every `Note` in `destroyedNotes`, remove `Note` from the token's note registry and emit `DestroyConfidentialNote(Note.owner, Note.noteHash)`\r\n5. For every `Note` in `createdNotes`, add `Note` to the token's note registry and emit `CreateConfidentialNote(Note.owner, Note.metadata)`\r\n6. Emit the `ConfidentialTransfer` event.\r\n\r\n### Autonomous Transactions\r\n\r\nFor more exotic forms of transfers, mediated by smart contracts, the `confidentialTransferFrom` method is used.  \r\n\r\n#### confidentialTransferFrom\r\n\r\n```solidity\r\nfunction confidentialTransferFrom(uint16 _proofId, bytes _proofOutput);\r\n```\r\n\r\nThis function enacts a confidential transfer of zero-knowledge notes. This function is designed as an analogue to the ERC20 `transferFrom` method, to be called by smart contracts that enact confidential transfers.  \r\n\r\nInstead of supplying a zero-knowledge proof to be validated, this method is supplied with a **transfer instruction** that was generated by the Cryptography Engine that this asset listens to. This is to aid in preventing redundant validation of zero-knowledge proofs - some types of proof produce multiple transfer instructions (e.g. a `bilateral-swap` style proof in the [Cryptography Engine](https://github.com/ethereum/EIPs/issues/1723) standard).  \r\n\r\nThe `bytes _proofOutput` variable MUST conform to the specification of a 'proof output' from the Cryptography Engine standard. A valid `_proofOutput` will contain the following data: `bytes inputNotes`, `bytes outputNotes`, `address publicOwner`, `int256 publicValue`\r\n\r\nTo enact a `confidentialTransferFrom` method call, the token contract must check and perform the following:\r\n\r\n1. The `proofId` must correspond to a proof supported by the token  \r\n2. Construct the `bytes32 proofHash`, a keccak256 hash of `bytes _proofOutput`\r\n3. Call `cryptographyEngine.validateProofByHash(proofId, proofHash, msg.sender)`\r\n4. If `validateProofByHash` returns `false` the transaction MUST throw  \r\n5. If `validateProofByHash` returns `true`, the following MUST be validated\r\n   1. Every `Note` in `inputNotes` exists in the token's note registry\r\n   2. Every `Note` in `outputNotes` does **not** exist in the token's note registry\r\n   3. For every `Note` in `outputNotes`, `confidentialIsApproved(noteHash, owner)` returns `true`\r\n\r\nIf the above conditions are satisfied, the following steps must be performed:\r\n\r\n1. If `publicValue < 0`, call `erc20Token.transferFrom(publicOwner, address(this), uint256(-publicValue))`. If this call fails, abort the transaction\r\n2. If `publicValue > 0`, call `erc20Token.transfer(publicOwner, uint256(publicValue))`\r\n3. Update the token's total confidential supply to reflect the above transfers\r\n4. For every `Note` in `destroyedNotes`, remove `Note` from the token's note registry and emit `DestroyConfidentialNote(Note.owner, Note.noteHash)`\r\n5. For every `Note` in `createdNotes`, add `Note` to the token's note registry and emit `CreateConfidentialNote(Note.owner, Note.metadata)`\r\n6. Emit the `ConfidentialTransfer` event.\r\n\r\n### Events\r\n\r\n#### CreateConfidentialNote\r\n\r\n```solidity\r\nevent CreateConfidentialNote(address indexed _owner, bytes_metadata)\r\n```  \r\n\r\nAn event that logs the creation of a note against the note owner and the note metadata.  \r\n\r\n> <small>**parameters**</small>  \r\n> <small>`_owner`: The Ethereum address of the note owner</small>  \r\n> <small>`_metadata`: Data required by the note owner to recover and decrypt their note</small>\r\n\r\n#### DestroyConfidentialNote\r\n\r\n```solidity\r\nevent DestroyConfidentialNote(address indexed _owner)\r\n```  \r\n\r\nAn event that logs the destruction of a note against the note owner and the note metadata.  \r\n\r\n> <small>**parameters**</small>  \r\n> <small>`_owner`: The ethereum address of the note owner</small>  \r\n> <small>`_noteHash`: The hash of the note. Note `metadata` can be recovered from the `DestroyConfidentialNote` event that created this note</small>\r\n\r\n## Implementation\r\n<!--The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of \"rough consensus and running code\" is still useful when it comes to resolving many discussions of API details.-->\r\n\r\nHead to [the AZTEC monorepo](https://github.com/AztecProtocol/AZTEC) for a work in progress implementation. Many thanks to @PaulRBerg, @thomas-waite, @ArnSch and the @AztecProtocol team for their contributions to this document.\r\n\r\n## Copyright\r\nWork released under [LGPL-3.0](https://www.gnu.org/licenses/lgpl-3.0.en.html).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1724/reactions",
    "total_count": 86,
    "+1": 48,
    "-1": 0,
    "laugh": 0,
    "hooray": 11,
    "confused": 0,
    "heart": 16,
    "rocket": 11,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458472000",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458472000",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458472000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODQ3MjAwMA==",
    "user": {
      "login": "ligi",
      "id": 111600,
      "node_id": "MDQ6VXNlcjExMTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ligi",
      "html_url": "https://github.com/ligi",
      "followers_url": "https://api.github.com/users/ligi/followers",
      "following_url": "https://api.github.com/users/ligi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ligi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ligi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ligi/subscriptions",
      "organizations_url": "https://api.github.com/users/ligi/orgs",
      "repos_url": "https://api.github.com/users/ligi/repos",
      "events_url": "https://api.github.com/users/ligi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ligi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T09:37:27Z",
    "updated_at": "2019-01-29T09:37:27Z",
    "author_association": "MEMBER",
    "body": "nice! Just a nit - there is a missing closing (or one too many opening) bracket in this:\r\n\r\n> This function returns the address of the smart contract that validates this token's zero-knowledge proofs. For the specification of the [AZTEC Cryptography Engine, please see this ERC.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458472000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458532923",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458532923",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458532923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODUzMjkyMw==",
    "user": {
      "login": "davidp94",
      "id": 25910069,
      "node_id": "MDQ6VXNlcjI1OTEwMDY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25910069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidp94",
      "html_url": "https://github.com/davidp94",
      "followers_url": "https://api.github.com/users/davidp94/followers",
      "following_url": "https://api.github.com/users/davidp94/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidp94/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidp94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidp94/subscriptions",
      "organizations_url": "https://api.github.com/users/davidp94/orgs",
      "repos_url": "https://api.github.com/users/davidp94/repos",
      "events_url": "https://api.github.com/users/davidp94/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidp94/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T13:07:27Z",
    "updated_at": "2019-01-29T13:07:27Z",
    "author_association": "NONE",
    "body": "Nice job!\r\n\r\nCould there be multiple crytographic engine to achieve \"zk\" ERC20?\r\n\r\nIf so, I would not name it zkERC20 - as we have a `aztecCryptographyEngine` interface.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458532923/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458607957",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458607957",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458607957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODYwNzk1Nw==",
    "user": {
      "login": "markusj1201",
      "id": 45960551,
      "node_id": "MDQ6VXNlcjQ1OTYwNTUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/45960551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markusj1201",
      "html_url": "https://github.com/markusj1201",
      "followers_url": "https://api.github.com/users/markusj1201/followers",
      "following_url": "https://api.github.com/users/markusj1201/following{/other_user}",
      "gists_url": "https://api.github.com/users/markusj1201/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markusj1201/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markusj1201/subscriptions",
      "organizations_url": "https://api.github.com/users/markusj1201/orgs",
      "repos_url": "https://api.github.com/users/markusj1201/repos",
      "events_url": "https://api.github.com/users/markusj1201/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markusj1201/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T16:29:47Z",
    "updated_at": "2019-01-29T16:29:47Z",
    "author_association": "NONE",
    "body": "Name suggestions?\n\nOn Tue, Jan 29, 2019 at 7:07 AM David Phan <notifications@github.com> wrote:\n\n> Nice job!\n>\n> Could there be multiple crytographic engine to achieve \"zk\" ERC20?\n>\n> If so, I would not name it zkERC20 - as we have a aztecCryptographyEngine\n> interface.\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/1724#issuecomment-458532923>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/Ar1NZyJNVlKDsBkneJfGsH0ltBjYfuk6ks5vIEeqgaJpZM4aTgo->\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458607957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458633304",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458633304",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458633304,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODYzMzMwNA==",
    "user": {
      "login": "zac-williamson",
      "id": 1476668,
      "node_id": "MDQ6VXNlcjE0NzY2Njg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1476668?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zac-williamson",
      "html_url": "https://github.com/zac-williamson",
      "followers_url": "https://api.github.com/users/zac-williamson/followers",
      "following_url": "https://api.github.com/users/zac-williamson/following{/other_user}",
      "gists_url": "https://api.github.com/users/zac-williamson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zac-williamson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zac-williamson/subscriptions",
      "organizations_url": "https://api.github.com/users/zac-williamson/orgs",
      "repos_url": "https://api.github.com/users/zac-williamson/repos",
      "events_url": "https://api.github.com/users/zac-williamson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zac-williamson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T17:34:48Z",
    "updated_at": "2019-01-29T17:34:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> nice! Just a nit - there is a missing closing (or one too many opening) bracket in this:\r\n> \r\n> > This function returns the address of the smart contract that validates this token's zero-knowledge proofs. For the specification of the [AZTEC Cryptography Engine, please see this ERC.\r\n\r\nThanks for spotting that! Fixed.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458633304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458636799",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458636799",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458636799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODYzNjc5OQ==",
    "user": {
      "login": "markusj1201",
      "id": 45960551,
      "node_id": "MDQ6VXNlcjQ1OTYwNTUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/45960551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markusj1201",
      "html_url": "https://github.com/markusj1201",
      "followers_url": "https://api.github.com/users/markusj1201/followers",
      "following_url": "https://api.github.com/users/markusj1201/following{/other_user}",
      "gists_url": "https://api.github.com/users/markusj1201/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markusj1201/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markusj1201/subscriptions",
      "organizations_url": "https://api.github.com/users/markusj1201/orgs",
      "repos_url": "https://api.github.com/users/markusj1201/repos",
      "events_url": "https://api.github.com/users/markusj1201/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markusj1201/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T17:44:23Z",
    "updated_at": "2019-01-29T17:44:23Z",
    "author_association": "NONE",
    "body": "Thanks guys!\n\nOn Tue, Jan 29, 2019 at 11:35 AM Zachary James Williamson <\nnotifications@github.com> wrote:\n\n> nice! Just a nit - there is a missing closing (or one too many opening)\n> bracket in this:\n>\n> This function returns the address of the smart contract that validates\n> this token's zero-knowledge proofs. For the specification of the [AZTEC\n> Cryptography Engine, please see this ERC.\n>\n> Thanks for spotting that! Fixed.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ethereum/EIPs/issues/1724#issuecomment-458633304>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/Ar1NZ1zoocvR5_R1yjNr7orFXYEy3d72ks5vIIZUgaJpZM4aTgo->\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458636799/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458760075",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458760075",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458760075,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODc2MDA3NQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T00:14:25Z",
    "updated_at": "2019-01-30T00:16:02Z",
    "author_association": "MEMBER",
    "body": "Why do `LogCreateConfidentialNote` and `LogDestroyConfidentialNote` both start with `Log`? Can `Log` be removed?\r\n\r\nI'm also curious if `Confidential` is strictly necessary to differentiate the two events from each other?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458760075/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458760744",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458760744",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458760744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODc2MDc0NA==",
    "user": {
      "login": "ligi",
      "id": 111600,
      "node_id": "MDQ6VXNlcjExMTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ligi",
      "html_url": "https://github.com/ligi",
      "followers_url": "https://api.github.com/users/ligi/followers",
      "following_url": "https://api.github.com/users/ligi/following{/other_user}",
      "gists_url": "https://api.github.com/users/ligi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ligi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ligi/subscriptions",
      "organizations_url": "https://api.github.com/users/ligi/orgs",
      "repos_url": "https://api.github.com/users/ligi/repos",
      "events_url": "https://api.github.com/users/ligi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ligi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T00:17:23Z",
    "updated_at": "2019-01-30T00:17:23Z",
    "author_association": "MEMBER",
    "body": "> Name suggestions?\r\n\r\nzkatERC20\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458760744/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458761685",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458761685",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458761685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODc2MTY4NQ==",
    "user": {
      "login": "aemxn",
      "id": 3680125,
      "node_id": "MDQ6VXNlcjM2ODAxMjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3680125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aemxn",
      "html_url": "https://github.com/aemxn",
      "followers_url": "https://api.github.com/users/aemxn/followers",
      "following_url": "https://api.github.com/users/aemxn/following{/other_user}",
      "gists_url": "https://api.github.com/users/aemxn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aemxn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aemxn/subscriptions",
      "organizations_url": "https://api.github.com/users/aemxn/orgs",
      "repos_url": "https://api.github.com/users/aemxn/repos",
      "events_url": "https://api.github.com/users/aemxn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aemxn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T00:21:56Z",
    "updated_at": "2019-01-30T00:21:56Z",
    "author_association": "NONE",
    "body": "ZERC20",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458761685/reactions",
      "total_count": 7,
      "+1": 0,
      "-1": 1,
      "laugh": 6,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458932503",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458932503",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458932503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODkzMjUwMw==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T12:51:32Z",
    "updated_at": "2019-01-30T12:51:32Z",
    "author_association": "NONE",
    "body": "re. starting events with Log - IIRC this was the advice previously to distinguish function calls from emitting events. Now that we have the `emit` keyword I don’t really think this is necessary anymore.\r\n\r\nChanging `aztecCryptographyEngine` to just `cryptographyEngine` would make the standard a little more general.\r\n\r\nSome questions / thoughts:\r\n\r\n1. `function publicToken()` implies that this will always be a wrapper around a non-confidential token. Will this always be the case, or would it be possible to have a token where all transfers are confidential and / or a token which extends both ERC20 and ERC1724 to provide confidential and non-confidential functionality in a single contract?\r\n\r\n2. Should `confidentialTotalSupply()` just be `totalSupply()`? AFAICT this isn’t confidential and is just the balance of the `publicToken` held by the confidential token wrapper? Not sure how / why this would be validated via a ZK proof?\r\n\r\n3. Would it be possible to approve only a balance up to a certain amount confidentially using a public/private-range proof? Should the standard support this?\r\n\r\n4. Should `LogCreateConfidentialNote` explicitly log out the `_noteHash`? I note that in the Specification `LogDestroyConfidentialNote` includes `_noteHash` whilst this is not included in the Event description further down.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458932503/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458944957",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458944957",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458944957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk0NDk1Nw==",
    "user": {
      "login": "paulrberg",
      "id": 8782666,
      "node_id": "MDQ6VXNlcjg3ODI2NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8782666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulrberg",
      "html_url": "https://github.com/paulrberg",
      "followers_url": "https://api.github.com/users/paulrberg/followers",
      "following_url": "https://api.github.com/users/paulrberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulrberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulrberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulrberg/subscriptions",
      "organizations_url": "https://api.github.com/users/paulrberg/orgs",
      "repos_url": "https://api.github.com/users/paulrberg/repos",
      "events_url": "https://api.github.com/users/paulrberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulrberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T13:34:00Z",
    "updated_at": "2019-01-30T13:34:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Could there be multiple crytographic engine to achieve \"zk\" ERC20?\r\n> \r\n> If so, I would not name it zkERC20 - as we have a `aztecCryptographyEngine` interface.\r\n\r\nYes, there could be multiple methodologies (cryptography engines) validating the zero-knowledge-ness of the token standards, that is, zkSNARKs or Bulletproofs. This is why we'd keep `zkERC20`.\r\n\r\n> Why do `LogCreateConfidentialNote` and `LogDestroyConfidentialNote` both start with `Log`? Can `Log` be removed?\r\n> \r\n> I'm also curious if `Confidential` is strictly necessary to differentiate the two events from each other?\r\n\r\nRegarding the `Log` prefix, we followed the ConsenSys [smart contract best practices](https://consensys.github.io/smart-contract-best-practices/recommendations/#differentiate-functions-and-events). Keeping `Confidential` makes the nomenclature more descriptive.\r\n\r\n> Changing aztecCryptographyEngine to just cryptographyEngine would make the standard a little more general.\r\n\r\nSounds good! For this and all other questions raised by @adamdossa, @zac-williamson will write a reply soon.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458944957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458948709",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458948709",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458948709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk0ODcwOQ==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T13:45:55Z",
    "updated_at": "2019-01-30T13:45:55Z",
    "author_association": "NONE",
    "body": "It's a very minor point, but for the `Log...` events, the Consensys best practices only applies to Solidity versions earlier than 0.4.21 as I read it (before emit was introduced):  \r\n\"Differentiate functions and events (Solidity < 0.4.21)\"\r\n\r\nObviously standards don't really include a Solidity version, so a bit of grey area.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458948709/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458958769",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458958769",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458958769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk1ODc2OQ==",
    "user": {
      "login": "fubuloubu",
      "id": 3859395,
      "node_id": "MDQ6VXNlcjM4NTkzOTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fubuloubu",
      "html_url": "https://github.com/fubuloubu",
      "followers_url": "https://api.github.com/users/fubuloubu/followers",
      "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}",
      "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions",
      "organizations_url": "https://api.github.com/users/fubuloubu/orgs",
      "repos_url": "https://api.github.com/users/fubuloubu/repos",
      "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fubuloubu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T14:15:17Z",
    "updated_at": "2019-01-30T14:15:17Z",
    "author_association": "MEMBER",
    "body": "cc @maurelian ^",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458958769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458975743",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-458975743",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 458975743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODk3NTc0Mw==",
    "user": {
      "login": "maurelian",
      "id": 23033765,
      "node_id": "MDQ6VXNlcjIzMDMzNzY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23033765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maurelian",
      "html_url": "https://github.com/maurelian",
      "followers_url": "https://api.github.com/users/maurelian/followers",
      "following_url": "https://api.github.com/users/maurelian/following{/other_user}",
      "gists_url": "https://api.github.com/users/maurelian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maurelian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maurelian/subscriptions",
      "organizations_url": "https://api.github.com/users/maurelian/orgs",
      "repos_url": "https://api.github.com/users/maurelian/repos",
      "events_url": "https://api.github.com/users/maurelian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maurelian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T15:01:58Z",
    "updated_at": "2019-01-30T15:01:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ya, the “emit” keyword makes the Log prefix unnecessary, thanks for the ping @fubuloubu",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/458975743/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/459096259",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-459096259",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 459096259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTA5NjI1OQ==",
    "user": {
      "login": "HarryR",
      "id": 303926,
      "node_id": "MDQ6VXNlcjMwMzkyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/303926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HarryR",
      "html_url": "https://github.com/HarryR",
      "followers_url": "https://api.github.com/users/HarryR/followers",
      "following_url": "https://api.github.com/users/HarryR/following{/other_user}",
      "gists_url": "https://api.github.com/users/HarryR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HarryR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HarryR/subscriptions",
      "organizations_url": "https://api.github.com/users/HarryR/orgs",
      "repos_url": "https://api.github.com/users/HarryR/repos",
      "events_url": "https://api.github.com/users/HarryR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HarryR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-30T20:27:20Z",
    "updated_at": "2019-01-30T20:35:53Z",
    "author_association": "NONE",
    "body": "This is very 'AZTEC' specific, and doesn't account for any other protocols.\r\n\r\nWhat are the options to support Bulletproofs, tokens like Miximus and zkDAI (which use zkSNARK proofs), mixers like Möbius etc.?\r\n\r\nIt's not really a standard if it enforces one specific algorithm and is unusable by any others... because of the semantics imposed by it being over-fitted for your project.\r\n\r\nHow can this be made more agnostic to the underlying mechanisms? To be implementation agnostic...\r\n\r\nI see no reason why the ERC20 interfaces (or ERC-223, ERC-721 and subsequent improvements etc.) can't be used to implement the basic functionality of anonymity tokens. If anything, the ERC-721 interface is probably the more viable candidate to implement an anonymity token, but this proposed standard doesn't take that into account.\r\n\r\nCan you please re-consider your proposal, and see how you can implement this using existing standards with a wide range of wallet and tooling support (e.g. ERC-20, ERC-721)?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/459096259/reactions",
      "total_count": 9,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/459291393",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-459291393",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 459291393,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTI5MTM5Mw==",
    "user": {
      "login": "zac-williamson",
      "id": 1476668,
      "node_id": "MDQ6VXNlcjE0NzY2Njg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1476668?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zac-williamson",
      "html_url": "https://github.com/zac-williamson",
      "followers_url": "https://api.github.com/users/zac-williamson/followers",
      "following_url": "https://api.github.com/users/zac-williamson/following{/other_user}",
      "gists_url": "https://api.github.com/users/zac-williamson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zac-williamson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zac-williamson/subscriptions",
      "organizations_url": "https://api.github.com/users/zac-williamson/orgs",
      "repos_url": "https://api.github.com/users/zac-williamson/repos",
      "events_url": "https://api.github.com/users/zac-williamson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zac-williamson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T10:18:22Z",
    "updated_at": "2019-01-31T11:17:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is very 'AZTEC' specific, and doesn't account for any other protocols.\r\n> \r\n> What are the options to support Bulletproofs, tokens like Miximus and zkDAI (which use zkSNARK proofs), mixers like Möbius etc.?\r\n> \r\n> It's not really a standard if it enforces one specific algorithm and is unusable by any others... because of the semantics imposed by it being over-fitted for your project.\r\n> \r\n> How can this be made more agnostic to the underlying mechanisms? To be implementation agnostic...\r\n> \r\n> I see no reason why the ERC20 interfaces (or ERC-223, ERC-721 and subsequent improvements etc.) can't be used to implement the basic functionality of anonymity tokens. If anything, the ERC-721 interface is probably the more viable candidate to implement an anonymity token, but this proposed standard doesn't take that into account.\r\n> \r\n> Can you please re-consider your proposal, and see how you can implement this using existing standards with a wide range of wallet and tooling support (e.g. ERC-20, ERC-721)?\r\n\r\nHi HarryR,\r\n\r\nYou're right that the language of the EIP leans heavily on AZTEC - we used AZTEC's zero-knowledge proof system as the scaffolding around which to construct this EIP, but the proposal is actually quite general and can accomodate implementations that use a variety of zero-knowledge technologies. Any zk-proof system that can validate 'join-split' style transfers involving zero-knowledge notes can be used to build a Cryptography Engine and implement this standard.  I have changed the language of the EIP to reflect this.  \r\n\r\nTo answer your question about the unique interface - the goal was to create an interface that is very similar to the ERC20 interface but still distinct. This is because a digital asset can have both an ERC20 representation and a confidential representation that conforms to this EIP. The EIP adds 'backwards-compatible' confidentiality - zkERC20 representations of existing tokens can be created.\r\n\r\nThe goal of this EIP is to define a fungible confidential token - where the values being transacted are encrypted, but the addresses of the transactors are not neccesarily hidden (this can be added on-top of the standard through anonymous addresses or note mixing). An ERC-721-style interface does not suit this purpose due to the non-fungible nature of an ERC-721 token. Similarly, existing token interfaces are predicated on knowing the values within a transaction, making them incompatible with such a confidential token.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/459291393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/459346091",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-459346091",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 459346091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTM0NjA5MQ==",
    "user": {
      "login": "banteg",
      "id": 4562643,
      "node_id": "MDQ6VXNlcjQ1NjI2NDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4562643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/banteg",
      "html_url": "https://github.com/banteg",
      "followers_url": "https://api.github.com/users/banteg/followers",
      "following_url": "https://api.github.com/users/banteg/following{/other_user}",
      "gists_url": "https://api.github.com/users/banteg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/banteg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/banteg/subscriptions",
      "organizations_url": "https://api.github.com/users/banteg/orgs",
      "repos_url": "https://api.github.com/users/banteg/repos",
      "events_url": "https://api.github.com/users/banteg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/banteg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T13:36:24Z",
    "updated_at": "2019-01-31T13:36:24Z",
    "author_association": "NONE",
    "body": "consider changing the name to something like `zk-note`, it would reflect how it works much better and would remove unnecessary confusion about compatibility with erc-20. it's a very different interface and it deserves a distinct name.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/459346091/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/542431469",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-542431469",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 542431469,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MjQzMTQ2OQ==",
    "user": {
      "login": "lacker",
      "id": 106475,
      "node_id": "MDQ6VXNlcjEwNjQ3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/106475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lacker",
      "html_url": "https://github.com/lacker",
      "followers_url": "https://api.github.com/users/lacker/followers",
      "following_url": "https://api.github.com/users/lacker/following{/other_user}",
      "gists_url": "https://api.github.com/users/lacker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lacker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lacker/subscriptions",
      "organizations_url": "https://api.github.com/users/lacker/orgs",
      "repos_url": "https://api.github.com/users/lacker/repos",
      "events_url": "https://api.github.com/users/lacker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lacker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-15T22:27:51Z",
    "updated_at": "2019-10-15T22:27:51Z",
    "author_association": "NONE",
    "body": "is there anyone else besides aztec who would implement something that uses this standard?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/542431469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/542439631",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-542439631",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 542439631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MjQzOTYzMQ==",
    "user": {
      "login": "HarryR",
      "id": 303926,
      "node_id": "MDQ6VXNlcjMwMzkyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/303926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HarryR",
      "html_url": "https://github.com/HarryR",
      "followers_url": "https://api.github.com/users/HarryR/followers",
      "following_url": "https://api.github.com/users/HarryR/following{/other_user}",
      "gists_url": "https://api.github.com/users/HarryR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HarryR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HarryR/subscriptions",
      "organizations_url": "https://api.github.com/users/HarryR/orgs",
      "repos_url": "https://api.github.com/users/HarryR/repos",
      "events_url": "https://api.github.com/users/HarryR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HarryR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-15T22:59:45Z",
    "updated_at": "2019-10-15T22:59:45Z",
    "author_association": "NONE",
    "body": " * https://github.com/EYBlockchain/nightfall/\r\n * https://github.com/peppersec/tornado-mixer\r\n\r\nProbably more",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/542439631/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/569460049",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-569460049",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 569460049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTQ2MDA0OQ==",
    "user": {
      "login": "decanus",
      "id": 7621705,
      "node_id": "MDQ6VXNlcjc2MjE3MDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7621705?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decanus",
      "html_url": "https://github.com/decanus",
      "followers_url": "https://api.github.com/users/decanus/followers",
      "following_url": "https://api.github.com/users/decanus/following{/other_user}",
      "gists_url": "https://api.github.com/users/decanus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decanus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decanus/subscriptions",
      "organizations_url": "https://api.github.com/users/decanus/orgs",
      "repos_url": "https://api.github.com/users/decanus/repos",
      "events_url": "https://api.github.com/users/decanus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decanus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-28T23:46:19Z",
    "updated_at": "2019-12-28T23:46:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the `confidential` prefix on function names can be ommited, as this standard specifies these functions to already be confidential.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/569460049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/591543708",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-591543708",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 591543708,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5MTU0MzcwOA==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-26T17:23:15Z",
    "updated_at": "2020-02-26T17:23:15Z",
    "author_association": "MEMBER",
    "body": "@zac-williamson what is the status of this proposal? Is AZTEC following the above spec?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/591543708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705530",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-974705530",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 974705530,
    "node_id": "IC_kwDOAq426M46GNN6",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-20T20:12:44Z",
    "updated_at": "2021-11-20T20:12:44Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/974705530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086467",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-986086467",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 986086467,
    "node_id": "IC_kwDOAq426M46xnxD",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T20:13:10Z",
    "updated_at": "2021-12-04T20:13:10Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986086467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986244620",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-986244620",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 986244620,
    "node_id": "IC_kwDOAq426M46yOYM",
    "user": {
      "login": "ricburton",
      "id": 438160,
      "node_id": "MDQ6VXNlcjQzODE2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/438160?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ricburton",
      "html_url": "https://github.com/ricburton",
      "followers_url": "https://api.github.com/users/ricburton/followers",
      "following_url": "https://api.github.com/users/ricburton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ricburton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ricburton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ricburton/subscriptions",
      "organizations_url": "https://api.github.com/users/ricburton/orgs",
      "repos_url": "https://api.github.com/users/ricburton/repos",
      "events_url": "https://api.github.com/users/ricburton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ricburton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-05T14:55:00Z",
    "updated_at": "2021-12-05T14:55:00Z",
    "author_association": "NONE",
    "body": "The thing that could change everything.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986244620/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986246205",
    "html_url": "https://github.com/ethereum/EIPs/issues/1724#issuecomment-986246205",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1724",
    "id": 986246205,
    "node_id": "IC_kwDOAq426M46yOw9",
    "user": {
      "login": "HarryR",
      "id": 303926,
      "node_id": "MDQ6VXNlcjMwMzkyNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/303926?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HarryR",
      "html_url": "https://github.com/HarryR",
      "followers_url": "https://api.github.com/users/HarryR/followers",
      "following_url": "https://api.github.com/users/HarryR/following{/other_user}",
      "gists_url": "https://api.github.com/users/HarryR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HarryR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HarryR/subscriptions",
      "organizations_url": "https://api.github.com/users/HarryR/orgs",
      "repos_url": "https://api.github.com/users/HarryR/repos",
      "events_url": "https://api.github.com/users/HarryR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HarryR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-05T15:04:23Z",
    "updated_at": "2021-12-05T15:04:23Z",
    "author_association": "NONE",
    "body": "That and solving meta transactions, or the 'approve infinite' problem and being gas poor.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986246205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
