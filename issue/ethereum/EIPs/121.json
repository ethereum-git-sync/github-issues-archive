{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/121/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/121/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/121/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/121",
  "id": 161823332,
  "node_id": "MDU6SXNzdWUxNjE4MjMzMzI=",
  "number": 121,
  "title": "ERC: Proxy standard",
  "user": {
    "login": "SilentCicero",
    "id": 9806174,
    "node_id": "MDQ6VXNlcjk4MDYxNzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9806174?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SilentCicero",
    "html_url": "https://github.com/SilentCicero",
    "followers_url": "https://api.github.com/users/SilentCicero/followers",
    "following_url": "https://api.github.com/users/SilentCicero/following{/other_user}",
    "gists_url": "https://api.github.com/users/SilentCicero/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SilentCicero/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SilentCicero/subscriptions",
    "organizations_url": "https://api.github.com/users/SilentCicero/orgs",
    "repos_url": "https://api.github.com/users/SilentCicero/repos",
    "events_url": "https://api.github.com/users/SilentCicero/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SilentCicero/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 30,
  "created_at": "2016-06-23T01:47:37Z",
  "updated_at": "2022-01-30T02:24:10Z",
  "closed_at": "2022-01-30T02:24:10Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\nERC\nTitle: Proxy standard\nStatus: Draft\nType: Informational\nCreated: 22.06.2016\nResolution: https://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs\n```\n## Abstract\n\nThe following describes standard functions a proxy contract can implement.\n## Motivation\n\nMany Ethereum users and smart-contracts hold and manage digital assets. A unified way to hold, acquire and transfer digital assets could greatly simplify and unify the designs of many contractual services making them more inter-operable with each other, while also gaining from the design benefits of standardization. Many contractual services also require a single persistent account at which to transact within the ecosystem. These services could also greatly benefit from a single unified contractual design enabling this practice to happen in a predictable and consistent way.\n## Rational\n\nThis allows Ethereum users/services to store, transfer and manage multiple kinds of digital assets in a single simple vetted standardized smart-contract. By doing so, we simplify digital asset acquisition, storage and management. A proxy standard also simplifies and/or unified contractual design of governance, identity or financial services on Ethereum. While there is always the potential that the implementer contract of a Proxy could be compromised or poorly design and all assets exposed to attack or freezing, we can expect at the very least the proxy contract implementer to be able to transfer its proxy's ownership (and the digital assets contained therein).\n## Specification\n1. A single contract with two methods (i.e. `transfer_implementer`, and `forward_transaction`) and one  variable (i.e. `implementer`).\n2. The `transfer_implementer` method is solely responsible for changing ownership from the stored implementer to a new implementer and is access restricted to the implementer and the contract itself.\n3. The forwarding method `forward_transaction` has three inputs: `address _destination`, `uint _value`, `bytes _bytecode`.\n4. The `forward_transaction` method is access restricted to the `implementer` only.\n5. The `forward_transaction` forwards transactions to the destination address as the ProxyContract address.\n6. The `StandardProxy` contract implements the `Proxy` interface contract containing the `forward_transaction` and `transfer_ownership` methods.\n### Code for `Proxy` contract interface\n\n```\ncontract Proxy {\n    function forward_transaction (address _destination, uint _value, bytes _bytecode) {}\n    function transfer_implementer (address _implementer) {}\n}\n```\n### Code for the `StandardProxy` contract\n\n```\nimport \"Proxy.sol\";\n\ncontract StandardProxy is Proxy {\n\n    function forward_transaction (address _destination, uint _value, bytes _bytecode) {\n        if(msg.sender == implementer) {\n            if(!_destination.call.value(_value)(_bytecode)) {\n                throw;\n            }\n        }\n    }\n\n    function transfer_implementer (address _implementer) {\n        if(msg.sender == implementer || msg.sender == address(this)) {\n            implementer = _implementer;\n        }\n    }\n\n    address implementer;\n}\n```\n### `StandardProxy` contract in use with a factory contract\n\n```\nimport \"StandardProxy.sol\";\n\ncontract ImplementedStandardProxy is StandardProxy {\n    function ImplementedStandardProxy(address _implementer) {\n        implementer = _implementer;\n    }\n\n    function getImplementer() constant returns (address) {\n       return implementer;\n    }\n}\n\ncontract ImplementedStandardProxyFactory {\n    function createStandardProxy(address _implementer) returns (address standardProxyAddress) {\n        standardProxyAddress = new ImplementedStandardProxy(_implementer);\n    }\n}\n```\n### Potential Attack Vectors/Pitfalls\n- rare use of self access restriction: this is a very uncommon use of contract access restriction and is potentially vulnerable because of this fact (just an odd use of access restriction).\n- re-entry: outward call contract re-entry is a worry in the `forward_transaction` method.\n- compromised implementer contract/user account: if the implementer contract is compromised by an attacker all digital assets held by the proxy are potentially exposed to attack and theft. The proxy is not suppose to solve this. It is merely suppose to provide a contractual base on which to bond digital assets too.\n- poorly designed implementer contracts: an implementer contract may end up being poorly design or broken, potentially locking the digital assets in the proxy forever. If a contract supports the use of proxy contracts we can then as contract architects expect them to, at the very least, be able to transfer ownership of the proxy.  Thus simplifying our base expectations and concerns for contracts that manage digital assets.\n- transaction forwarding/routing costs: if implementer systems use a proxy to manage digital assets and to represent an identity of that system, there is the additional cost incurred by forwarding transactions through the abstracted implementer, into the proxy and out into the ecosystem. This adds additional gas costs that need to be considered.\n- empty/invalid bytecode inputs: there may be potential issues with forwarding transactions that have no bytecode (I cant think of any, but it does seem like it could present issues in the future -- this is merely my intuition here, nothing else).\n### Examples of proxy contract designs\n- Nikolai Mushegian (nexusdev/dapple) `DSBaseActor` -- https://github.com/nexusdev/dappsys/blob/develop/contracts/actor/base.sol\n- Christian Lundkvist/Joel Torstensson (consensys/uport-proxy) `Proxy` -- https://github.com/ConsenSys/uport-proxy/blob/master/contracts/Proxy.sol\n### Notes\n- re-entry must be addressed in the `forward_transaction` method.\n- proxies should be kept, simple, robust, reusable and stupid (they are meant to be used by other contract interfaces)\n- use the \"owner\" contract instead of \"implementer\" term/concept (in defense of the `implementer` term/concept: \"ownership\" is certainly a valid term/concept here, however, implementer does seem more metaphysically accurate, as the term \"owner\" only implies ownership, where as implementer implies that which can implement state change within and as the contract -- this is to be debated however and perhaps it just has too much overlap with the \"owner\" contract infrastructure).\n- perhaps \"proxy\" is not the right term here, the dappsys ecosystem uses the term \"BaseActor\", which also seems appropriate and accurate. However, in conversation and in deep mediation, I believe \"proxy\" to be a better descriptive term here.\n- proxy contracts (1) simplify, unify and standardize digital asset acquisition and management while also providing (2) a persistent account identity at which services and users can transact with the ecosystem, although I do believe there to be more benefits\n- proxy contracts also help us manage expectations of contracts that hold digital assets or need a persistent account within the ecosystem\n\nA special thanks and credit goes to Christian Lundkvist, Nikolai Mushegian, Simon de la Rouviere, Niran Babalola, and Peter Borah for furthering the design of proxy and proxy like smart-contracts on Ethereum.\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/121/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/121/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227929816",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-227929816",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 227929816,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzkyOTgxNg==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T02:00:36Z",
    "updated_at": "2016-06-23T02:00:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would consider the wording of `owner` and `transfer_owner` or `transfer_ownership` over `implementor`. Implementor describes who created it, owner describes who owns it, which seems to be the intended meaning here.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227929816/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227929923",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-227929923",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 227929923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzkyOTkyMw==",
    "user": {
      "login": "SilentCicero",
      "id": 9806174,
      "node_id": "MDQ6VXNlcjk4MDYxNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9806174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SilentCicero",
      "html_url": "https://github.com/SilentCicero",
      "followers_url": "https://api.github.com/users/SilentCicero/followers",
      "following_url": "https://api.github.com/users/SilentCicero/following{/other_user}",
      "gists_url": "https://api.github.com/users/SilentCicero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SilentCicero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SilentCicero/subscriptions",
      "organizations_url": "https://api.github.com/users/SilentCicero/orgs",
      "repos_url": "https://api.github.com/users/SilentCicero/repos",
      "events_url": "https://api.github.com/users/SilentCicero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SilentCicero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T02:01:26Z",
    "updated_at": "2016-06-23T02:01:26Z",
    "author_association": "NONE",
    "body": "I would tend to agree, I'm just into the `implementer` concept.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227929923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227931513",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-227931513",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 227931513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzkzMTUxMw==",
    "user": {
      "login": "PeterBorah",
      "id": 2374327,
      "node_id": "MDQ6VXNlcjIzNzQzMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2374327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PeterBorah",
      "html_url": "https://github.com/PeterBorah",
      "followers_url": "https://api.github.com/users/PeterBorah/followers",
      "following_url": "https://api.github.com/users/PeterBorah/following{/other_user}",
      "gists_url": "https://api.github.com/users/PeterBorah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PeterBorah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PeterBorah/subscriptions",
      "organizations_url": "https://api.github.com/users/PeterBorah/orgs",
      "repos_url": "https://api.github.com/users/PeterBorah/repos",
      "events_url": "https://api.github.com/users/PeterBorah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PeterBorah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T02:13:36Z",
    "updated_at": "2016-06-23T02:13:53Z",
    "author_association": "NONE",
    "body": "While it is much more complex than the simple proxy contract here, it may be worth trying to align with [Mist's wallet contract](https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol#L338), which has the following signature for the forwarding function:\n\n`execute(address, uint, bytes)`\n\nThe version I've written for ownage uses the above signature, as well as this one for transferring ownership:\n\n`function setAdmin(address)`\n\n(It also has a few more things specific to its context.)\n\nI think reaching alignment on the forwarding function is the biggest priority. As the Mist example shows, concepts like ownership may be different for different contracts.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227931513/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227932311",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-227932311",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 227932311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzkzMjMxMQ==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T02:20:08Z",
    "updated_at": "2016-06-23T02:20:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think reaching alignment on the forwarding function is the biggest priority. As the Mist example shows, concepts like ownership may be different for different contracts.\n\nOne of the reasons I think a standard proxy contract makes a lot of sense is that it isolates concerns very neatly.\n\n[The Mist Wallet](https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol) conflates the concerns of a proxy contract with the responsibilities of a multi-sig authorizer.\n\nWith the proposed architecture, you could always assign the \"implementor\" to be a multi-sig contract, which itself could be any sort of advanced authorization logic, and replicate the behavior of the Mist wallet.\n\nI think it's very important that these types of standards be developed, and be atomic, so that larger Dapps tomorrow could be composed entirely out of tiny, well audited, highly reusable contracts. Perhaps I'd like a Mist-like wallet, but with different authorization logic. This type of proposed Proxy standard allows that upgrade to be easily deployed.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227932311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227932858",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-227932858",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 227932858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzkzMjg1OA==",
    "user": {
      "login": "PeterBorah",
      "id": 2374327,
      "node_id": "MDQ6VXNlcjIzNzQzMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2374327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PeterBorah",
      "html_url": "https://github.com/PeterBorah",
      "followers_url": "https://api.github.com/users/PeterBorah/followers",
      "following_url": "https://api.github.com/users/PeterBorah/following{/other_user}",
      "gists_url": "https://api.github.com/users/PeterBorah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PeterBorah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PeterBorah/subscriptions",
      "organizations_url": "https://api.github.com/users/PeterBorah/orgs",
      "repos_url": "https://api.github.com/users/PeterBorah/repos",
      "events_url": "https://api.github.com/users/PeterBorah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PeterBorah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T02:24:07Z",
    "updated_at": "2016-06-23T02:24:07Z",
    "author_association": "NONE",
    "body": "@flyswatter It's not completely clear to me that a single configurable owner address is the best design for this. There are other plausible ways to secure and upgrade a proxy contract, such as having an attached validator contract, or using `delegatecall` for configurable behavior.\n\nAnother consideration should be that [EIP 101](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-101.md) will make this pattern substantially less necessary.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227932858/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227933753",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-227933753",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 227933753,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzkzMzc1Mw==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T02:31:55Z",
    "updated_at": "2016-06-23T02:31:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think there needs to be a single final proxy contract architecture. I like the idea of a validator-based proxy, too. I more think that these tiny patterns should become well known to the point of naming and standardizing, so they can be easily audited and reused.\n\nMaybe a more diplomatic name would be `OwnedProxy`, to represent this type of proxy has an owner, while the other could be a `ValidatedProxy`.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/227933753/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228151757",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-228151757",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 228151757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODE1MTc1Nw==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T19:03:59Z",
    "updated_at": "2016-06-23T20:38:12Z",
    "author_association": "NONE",
    "body": "- Why not derive from the already well-established `owned` interface?\n- I think an \"action\" is more than just target/value/calldata or even a whole message:\n\n```\nstruct Action {\n    address target;\n    uint gas; // magic value 0 means \"no restriction\"\n    uint value;\n    bytes calldata;\n    bool must_succeed; // Is the proxy contract supposed to re-throw on exception, or report it as \"executed\"?\n    bytes ret; // once we can read unknown-length return values. For now, could be bytes32\n}\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228151757/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228152141",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-228152141",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 228152141,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODE1MjE0MQ==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T19:05:17Z",
    "updated_at": "2016-06-23T19:05:17Z",
    "author_association": "NONE",
    "body": "I agree with peter that it's not obvious that this is the most natural way to structure delegations/proxy/configurable behavior (are those even the same problem?) but having _some_ kind of common \"target\" for governance-like contracts would be immediately useful, and this seems to work fine\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228152141/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228160587",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-228160587",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 228160587,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODE2MDU4Nw==",
    "user": {
      "login": "PeterBorah",
      "id": 2374327,
      "node_id": "MDQ6VXNlcjIzNzQzMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2374327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PeterBorah",
      "html_url": "https://github.com/PeterBorah",
      "followers_url": "https://api.github.com/users/PeterBorah/followers",
      "following_url": "https://api.github.com/users/PeterBorah/following{/other_user}",
      "gists_url": "https://api.github.com/users/PeterBorah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PeterBorah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PeterBorah/subscriptions",
      "organizations_url": "https://api.github.com/users/PeterBorah/orgs",
      "repos_url": "https://api.github.com/users/PeterBorah/repos",
      "events_url": "https://api.github.com/users/PeterBorah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PeterBorah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T19:38:02Z",
    "updated_at": "2016-06-23T19:38:02Z",
    "author_association": "NONE",
    "body": "`bytes ret; // once we can read unknown-length return values. For now, could be bytes32`\n\nThis is doable with inline assembly.\n\nhttps://github.com/ownage-ltd/ether-router/blob/master/contracts/EtherRouter.sol#L24-L32\n\n(There's other stuff going on in that file, but the key is that the `outsize` variable is doing what your `ret` does.)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228160587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228169318",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-228169318",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 228169318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODE2OTMxOA==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T20:12:22Z",
    "updated_at": "2016-06-23T20:12:22Z",
    "author_association": "NONE",
    "body": "Thanks for the writeup @SilentCicero! Not surprisingly I think this is a very important question since my view is that this could be the standard way to do identity on Ethereum.\n\n@nmushegian:\n\n> Why not derive from the already well-established owned interface?\n> In uPort we are using the following simple contract deriving from Owned:\n\n```\nimport \"Owned.sol\";\n\ncontract Proxy is Owned {\n    function forward(address destination, uint value, bytes data) onlyOwner {\n        // If a contract tries to CALL or CREATE a contract with either\n        // (i) insufficient balance, or (ii) stack depth already at maximum (1024),\n        // the sub-execution and transfer do not occur at all, no gas gets consumed, and 0 is added to the stack.\n        // see: https://github.com/ethereum/wiki/wiki/Subtleties#exceptional-conditions\n        if (!destination.call.value(value)(data)) {\n            throw;\n        }\n    }\n}\n```\n\nInteresting using a more general `Action` (you've accidentally written `Auction` btw). I don't quite see how to capture the return value. Would you have a storage field or Event in the Proxy that gets set to that return value somehow?\n\nIn general I'm interested in making the Proxy contracts as simple as possible.\n\n@PeterBorah How would you design these things differently once [BIP 101](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-101.md) is in place? To me it seems that there would still be the need for proxy contracts defining a persistent identifier for identities.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228169318/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228171897",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-228171897",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 228171897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODE3MTg5Nw==",
    "user": {
      "login": "PeterBorah",
      "id": 2374327,
      "node_id": "MDQ6VXNlcjIzNzQzMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2374327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PeterBorah",
      "html_url": "https://github.com/PeterBorah",
      "followers_url": "https://api.github.com/users/PeterBorah/followers",
      "following_url": "https://api.github.com/users/PeterBorah/following{/other_user}",
      "gists_url": "https://api.github.com/users/PeterBorah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PeterBorah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PeterBorah/subscriptions",
      "organizations_url": "https://api.github.com/users/PeterBorah/orgs",
      "repos_url": "https://api.github.com/users/PeterBorah/repos",
      "events_url": "https://api.github.com/users/PeterBorah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PeterBorah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-23T20:22:31Z",
    "updated_at": "2016-06-23T20:22:41Z",
    "author_association": "NONE",
    "body": "With EIP 101, your \"account\" and \"proxy contract\" can be the same thing, since you can send messages directly to contracts. So we probably won't want to assume that our proxy contract is receiving messages from an account, but rather have the \"account\"'s verification logic be configurable.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228171897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228650197",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-228650197",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 228650197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyODY1MDE5Nw==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-27T04:09:14Z",
    "updated_at": "2016-06-27T04:09:14Z",
    "author_association": "NONE",
    "body": "@peterborah I don't see how this is different from the current approach of having a proxy contract relay messages from an implementer/owner/controller contract which contains the verification logic. There is not really any assumption of an external account in the structure. \n\nAs I understand it EIP 101 is basically that all messages/transactions now originate from 0x0 and the authentication/verification logic (like digital signatures) are now abstracted away into the data field. Plz correct if I'm wrong!\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/228650197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229205843",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-229205843",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 229205843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTIwNTg0Mw==",
    "user": {
      "login": "aakilfernandes",
      "id": 1577353,
      "node_id": "MDQ6VXNlcjE1NzczNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1577353?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aakilfernandes",
      "html_url": "https://github.com/aakilfernandes",
      "followers_url": "https://api.github.com/users/aakilfernandes/followers",
      "following_url": "https://api.github.com/users/aakilfernandes/following{/other_user}",
      "gists_url": "https://api.github.com/users/aakilfernandes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aakilfernandes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aakilfernandes/subscriptions",
      "organizations_url": "https://api.github.com/users/aakilfernandes/orgs",
      "repos_url": "https://api.github.com/users/aakilfernandes/repos",
      "events_url": "https://api.github.com/users/aakilfernandes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aakilfernandes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T22:39:55Z",
    "updated_at": "2016-06-28T22:39:55Z",
    "author_association": "NONE",
    "body": "I would like to see a way to forward an arbitrary number of transactions in order. This is important from a UX perspective, so dapp developers can make \"all or nothing\" transactions which are dependent on each other.\n\n```\nfunction forward_transactions (address[] _destinations, uint[] _values, bytes[] _bytecodes) {}\n```\n\nFor a larger discussion of why this is necessary, refer to this http://ethereum.stackexchange.com/questions/1561/is-it-possible-to-chain-mulitiple-individual-transactions-into-a-single-all-or/\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229205843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229207573",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-229207573",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 229207573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTIwNzU3Mw==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T22:49:00Z",
    "updated_at": "2016-06-28T22:49:00Z",
    "author_association": "NONE",
    "body": "@aakilfernandes That abstraction can be built out of the simpler standard proposed. If you want to include sequences, I'd counter that we should include an entire interpreted message language.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229207573/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229211818",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-229211818",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 229211818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTIxMTgxOA==",
    "user": {
      "login": "aakilfernandes",
      "id": 1577353,
      "node_id": "MDQ6VXNlcjE1NzczNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1577353?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aakilfernandes",
      "html_url": "https://github.com/aakilfernandes",
      "followers_url": "https://api.github.com/users/aakilfernandes/followers",
      "following_url": "https://api.github.com/users/aakilfernandes/following{/other_user}",
      "gists_url": "https://api.github.com/users/aakilfernandes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aakilfernandes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aakilfernandes/subscriptions",
      "organizations_url": "https://api.github.com/users/aakilfernandes/orgs",
      "repos_url": "https://api.github.com/users/aakilfernandes/repos",
      "events_url": "https://api.github.com/users/aakilfernandes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aakilfernandes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T23:12:34Z",
    "updated_at": "2016-06-28T23:12:34Z",
    "author_association": "NONE",
    "body": "@nmushegian Using another abstraction would make things difficult, since the user would then have to authorize the abstraction to call the proxy. We would need to include authorization functionality in the proxy which would complicate things even further.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229211818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229217432",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-229217432",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 229217432,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTIxNzQzMg==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T23:46:12Z",
    "updated_at": "2016-06-28T23:46:12Z",
    "author_association": "NONE",
    "body": "^ That's the idea behind delegation via proxy, isn't it? I'm imagining a \"keyring manager\" proxied to a \"execute sequence of statements\" proxied to a \"rate-limiting withdrawal actor\" a proxy contract as an example of this pattern.\n\nWhat is the purpose of the proxy contract at all, if it's not intended to be extended/chained? The base implementation doesn't add any extra behavior except the ability to transfer..\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229217432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229218051",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-229218051",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 229218051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTIxODA1MQ==",
    "user": {
      "login": "christianlundkvist",
      "id": 6892901,
      "node_id": "MDQ6VXNlcjY4OTI5MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6892901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christianlundkvist",
      "html_url": "https://github.com/christianlundkvist",
      "followers_url": "https://api.github.com/users/christianlundkvist/followers",
      "following_url": "https://api.github.com/users/christianlundkvist/following{/other_user}",
      "gists_url": "https://api.github.com/users/christianlundkvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christianlundkvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christianlundkvist/subscriptions",
      "organizations_url": "https://api.github.com/users/christianlundkvist/orgs",
      "repos_url": "https://api.github.com/users/christianlundkvist/repos",
      "events_url": "https://api.github.com/users/christianlundkvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christianlundkvist/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-28T23:50:13Z",
    "updated_at": "2016-06-28T23:50:13Z",
    "author_association": "NONE",
    "body": "@aakilfernandes Yeah like @nmushegian said the point of the Proxy is to be very simple so that it can be stable and it's Owner can be a complex contract or constellation of contracts.\n\n> since the user would then have to authorize the abstraction to call the proxy\n\nThat's how it would be set up for the user to begin with. The complexity would be hidden from the user ideally.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229218051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229228812",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-229228812",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 229228812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTIyODgxMg==",
    "user": {
      "login": "aakilfernandes",
      "id": 1577353,
      "node_id": "MDQ6VXNlcjE1NzczNTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1577353?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aakilfernandes",
      "html_url": "https://github.com/aakilfernandes",
      "followers_url": "https://api.github.com/users/aakilfernandes/followers",
      "following_url": "https://api.github.com/users/aakilfernandes/following{/other_user}",
      "gists_url": "https://api.github.com/users/aakilfernandes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aakilfernandes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aakilfernandes/subscriptions",
      "organizations_url": "https://api.github.com/users/aakilfernandes/orgs",
      "repos_url": "https://api.github.com/users/aakilfernandes/repos",
      "events_url": "https://api.github.com/users/aakilfernandes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aakilfernandes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-29T01:05:08Z",
    "updated_at": "2016-06-29T01:05:37Z",
    "author_association": "NONE",
    "body": "@nmushegian @christianlundkvist if we create a different contract capable of forwarding an arbitrary number of transactions, wouldn't that make this contract obsolete? Why would a contract capable of forwarding an arbitrary number of transactions bother calling this contract?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229228812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229230117",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-229230117",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 229230117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTIzMDExNw==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-29T01:15:16Z",
    "updated_at": "2016-06-29T01:15:16Z",
    "author_association": "NONE",
    "body": "yes it would make it obsolete but your version would quickly become obsolete as well. We should go with the simplest future-proof version possible, or we might as well do a whole independent effort to figure out the complete feature set for interpreter contracts\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229230117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229973525",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-229973525",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 229973525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTk3MzUyNQ==",
    "user": {
      "login": "SilentCicero",
      "id": 9806174,
      "node_id": "MDQ6VXNlcjk4MDYxNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9806174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SilentCicero",
      "html_url": "https://github.com/SilentCicero",
      "followers_url": "https://api.github.com/users/SilentCicero/followers",
      "following_url": "https://api.github.com/users/SilentCicero/following{/other_user}",
      "gists_url": "https://api.github.com/users/SilentCicero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SilentCicero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SilentCicero/subscriptions",
      "organizations_url": "https://api.github.com/users/SilentCicero/orgs",
      "repos_url": "https://api.github.com/users/SilentCicero/repos",
      "events_url": "https://api.github.com/users/SilentCicero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SilentCicero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-01T15:16:22Z",
    "updated_at": "2016-07-02T20:39:53Z",
    "author_association": "NONE",
    "body": "```\nimport \"owned.sol\";\n\ncontract Proxy {\n  function forward_transaction(address _destination, uint _value, bytes _calldata) {}\n}\n\ncontract OwnedProxy is owned, Proxy {\n  modifier onlyowner {\n    if(msg.sender == address(this) || msg.sender == owner) _\n  }\n\n  function forward_transaction(address _destination, uint _value, bytes _calldata) onlyowner {\n    if(!_destination.call.value(_value)(_calldata)) {\n      throw;\n    }\n  }\n\n  function transfer_ownership(address _owner) onlyowner {\n    owner = _owner;\n  }\n}\n```\n\nAn OwnedProxy example @nmushegian @flyswatter @aakilfernandes @christianlundkvist thoughts?\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/229973525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231213830",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-231213830",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 231213830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTIxMzgzMA==",
    "user": {
      "login": "ethers",
      "id": 6937903,
      "node_id": "MDQ6VXNlcjY5Mzc5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6937903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethers",
      "html_url": "https://github.com/ethers",
      "followers_url": "https://api.github.com/users/ethers/followers",
      "following_url": "https://api.github.com/users/ethers/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethers/subscriptions",
      "organizations_url": "https://api.github.com/users/ethers/orgs",
      "repos_url": "https://api.github.com/users/ethers/repos",
      "events_url": "https://api.github.com/users/ethers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethers/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T21:32:40Z",
    "updated_at": "2016-07-07T21:32:40Z",
    "author_association": "MEMBER",
    "body": "Good change to name it `_calldata`.  Other suggestions:\n\n```\nimport \"owned.sol\";\n\ncontract Proxy {\n  function proxy(address _to, uint _value, bytes _calldata);\n}\n\ncontract OwnedProxy is owned, Proxy {\n  function proxy(address _to, uint _value, bytes _calldata) onlyowner {\n    if(!_to.call.value(_value)(_calldata)) {\n      throw;\n    }\n  }\n\n  function setOwner(address _owner) onlyowner {\n    owner = _owner;\n  }\n}\n```\n- No need to tweak the onlyowner modifier. \n- Simplified the function names.\n- Using `_to` to mimic current terms of `from` and `to`.  `to` is also more suggestive of potential proxy chaining, instead of a \"destination\" which suggests an end.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231213830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231401248",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-231401248",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 231401248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQwMTI0OA==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T16:08:54Z",
    "updated_at": "2016-07-08T16:08:54Z",
    "author_association": "NONE",
    "body": "Any reason we're not taking gas as an argument too? The proxy implementation is dynamic, so burdening the caller with figuring out the correct limit doesn't seem right. A related discussion is whether we want the proxy to be smart about exceptions or not (see `must_succeed` above).\n\nSimplicity is a good argument to avoid it, but we should then explicitly recognize what usage constraints it adds.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231401248/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231404872",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-231404872",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 231404872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQwNDg3Mg==",
    "user": {
      "login": "PeterBorah",
      "id": 2374327,
      "node_id": "MDQ6VXNlcjIzNzQzMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2374327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PeterBorah",
      "html_url": "https://github.com/PeterBorah",
      "followers_url": "https://api.github.com/users/PeterBorah/followers",
      "following_url": "https://api.github.com/users/PeterBorah/following{/other_user}",
      "gists_url": "https://api.github.com/users/PeterBorah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PeterBorah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PeterBorah/subscriptions",
      "organizations_url": "https://api.github.com/users/PeterBorah/orgs",
      "repos_url": "https://api.github.com/users/PeterBorah/repos",
      "events_url": "https://api.github.com/users/PeterBorah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PeterBorah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T16:23:23Z",
    "updated_at": "2016-07-08T16:23:23Z",
    "author_association": "NONE",
    "body": "@nmushegian I don't think I fully understand your gas suggestion. Is there a substantial difference between:\n\n```\nproxy.execute(to, value, calldata, gas)\n```\n\nand \n\n```\nproxy.execute.gas(gas)(to, value, calldata)\n```\n\n?\n\nAn advantage of the latter is that you don't have to do any work to express \"pass all gas\", which is arguably the default.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231404872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231405663",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-231405663",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 231405663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQwNTY2Mw==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T16:25:56Z",
    "updated_at": "2016-07-08T16:25:56Z",
    "author_association": "NONE",
    "body": "The use case is if I want to execute the action with exactly N gas, but I don't know if the proxy will add 100 or 1m gas.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231405663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231422984",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-231422984",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 231422984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQyMjk4NA==",
    "user": {
      "login": "PeterBorah",
      "id": 2374327,
      "node_id": "MDQ6VXNlcjIzNzQzMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2374327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PeterBorah",
      "html_url": "https://github.com/PeterBorah",
      "followers_url": "https://api.github.com/users/PeterBorah/followers",
      "following_url": "https://api.github.com/users/PeterBorah/following{/other_user}",
      "gists_url": "https://api.github.com/users/PeterBorah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PeterBorah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PeterBorah/subscriptions",
      "organizations_url": "https://api.github.com/users/PeterBorah/orgs",
      "repos_url": "https://api.github.com/users/PeterBorah/repos",
      "events_url": "https://api.github.com/users/PeterBorah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PeterBorah/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T17:35:17Z",
    "updated_at": "2016-07-08T17:35:17Z",
    "author_association": "NONE",
    "body": "I see! I don't think I've ever needed to do that, but I can invent situations where I might. (Though usually I would handle that at some other layer of the stack.)\n\nSolidity's method overloading means that we could easily have both in a proxy contract.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231422984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231495233",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-231495233",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 231495233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQ5NTIzMw==",
    "user": {
      "login": "ethers",
      "id": 6937903,
      "node_id": "MDQ6VXNlcjY5Mzc5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6937903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethers",
      "html_url": "https://github.com/ethers",
      "followers_url": "https://api.github.com/users/ethers/followers",
      "following_url": "https://api.github.com/users/ethers/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethers/subscriptions",
      "organizations_url": "https://api.github.com/users/ethers/orgs",
      "repos_url": "https://api.github.com/users/ethers/repos",
      "events_url": "https://api.github.com/users/ethers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethers/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-08T23:22:22Z",
    "updated_at": "2016-07-08T23:22:22Z",
    "author_association": "MEMBER",
    "body": "@nmushegian I did like your Action struct, with more data like gas, etc.  https://github.com/ethereum/EIPs/issues/121#issuecomment-228151757  Not sure where that got hung up.  The return value?  Or it seems people prefer the simplest.  (A hybrid could have both `proxy` and `proxy_action(Action action)`, but I'm guessing hybrid is even less popular for a \"standard\".)\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/231495233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/279100737",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-279100737",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 279100737,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTEwMDczNw==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-11T00:10:40Z",
    "updated_at": "2017-02-11T00:10:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I now think the `transfer_implementer` method doesn't need to be part of this standard.\r\n\r\nSomeone could inherit from the class, and with only `forward_transaction`, they could implement that method, and mix in their own `onlyowner` or `auth` logic on that method to restrict its access.\r\n\r\nThis allows a smaller standard surface area (a simple contract could proxy without bothering with upgradeability), while being easily compatible with established auth patterns.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/279100737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/279111326",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-279111326",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 279111326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTExMTMyNg==",
    "user": {
      "login": "nmushegian",
      "id": 924397,
      "node_id": "MDQ6VXNlcjkyNDM5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924397?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmushegian",
      "html_url": "https://github.com/nmushegian",
      "followers_url": "https://api.github.com/users/nmushegian/followers",
      "following_url": "https://api.github.com/users/nmushegian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmushegian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmushegian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmushegian/subscriptions",
      "organizations_url": "https://api.github.com/users/nmushegian/orgs",
      "repos_url": "https://api.github.com/users/nmushegian/repos",
      "events_url": "https://api.github.com/users/nmushegian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmushegian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-11T01:49:05Z",
    "updated_at": "2017-02-11T01:49:24Z",
    "author_association": "NONE",
    "body": "@flyswatter has it right!\r\n\r\nAfter ownership logic I think the only thing left to discuss is whether \"interpreter\"/\"atomic sequences\"/\"return threading\" and other proxy power-ups are in scope for this EIP, or if we want to revisit them after some EVM opcode EIPs are addressed to make it cleaner. Thoughts from uport/boardroom teams?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/279111326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013794842",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-1013794842",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 1013794842,
    "node_id": "IC_kwDOAq426M48bUga",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-16T02:06:37Z",
    "updated_at": "2022-01-16T02:06:37Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1013794842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025053092",
    "html_url": "https://github.com/ethereum/EIPs/issues/121#issuecomment-1025053092",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/121",
    "id": 1025053092,
    "node_id": "IC_kwDOAq426M49GRGk",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-01-30T02:24:09Z",
    "updated_at": "2022-01-30T02:24:09Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1025053092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
