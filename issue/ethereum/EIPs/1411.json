{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1411",
  "id": 360071634,
  "node_id": "MDU6SXNzdWUzNjAwNzE2MzQ=",
  "number": 1411,
  "title": "ERC 1400: Security Token Standard",
  "user": {
    "login": "adamdossa",
    "id": 2633913,
    "node_id": "MDQ6VXNlcjI2MzM5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adamdossa",
    "html_url": "https://github.com/adamdossa",
    "followers_url": "https://api.github.com/users/adamdossa/followers",
    "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
    "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
    "organizations_url": "https://api.github.com/users/adamdossa/orgs",
    "repos_url": "https://api.github.com/users/adamdossa/repos",
    "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adamdossa/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 125,
  "created_at": "2018-09-13T21:22:51Z",
  "updated_at": "2022-06-11T07:09:25Z",
  "closed_at": "2022-06-11T07:09:24Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "---\r\n\r\neip: ERC-1400\r\ntitle: Security Token Standards\r\nauthor: Adam Dossa (@adamdossa), Pablo Ruiz (@pabloruiz55), Fabian Vogelsteller (@frozeman), Stephane Gosselin (@thegostep)\r\ndiscussions-to: #1411\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-09-09\r\nrequire: ERC-1410 (#1410), ERC-1594 (#1594), ERC-1644 (#1644), ERC-1643 (#1643), ERC-20 (#20), ERC-1066 (#1066)\r\n\r\n---\r\n\r\n## Simple Summary\r\n\r\nRepresents a library of standards for security tokens on Ethereum.\r\n\r\nIn aggregate provides a suite of standard interfaces for issuing / redeeming security tokens, managing their ownership and transfer restrictions and providing transparency to token holders on how different subsets of their token balance behave with respect to transfer restrictions, rights and obligations.\r\n\r\n## Abstract\r\n\r\nStandards should be backwards compatible with ERC-20 (#20) and easily extended to be compatible with ERC-777 (#777).\r\n\r\nERC-1410 (#1410): differentiated ownership / transparent restrictions\r\nERC-1594 (#1594): on-chain restriction checking with error signalling, off-chain data injection for transfer restrictions and issuance / redemption semantics\r\nERC-1643 (#1643): document / legend management\r\nERC-1644 (#1644): controller operations (force transfer)\r\n\r\n## Motivation\r\n\r\nAccelerate the issuance and management of securities on the Ethereum blockchain by specifying standard interfaces through which security tokens can be operated on and interrogated by all relevant parties.\r\n\r\nTaken together, these security token standards provide document management, error signalling, gate keeper (operator) access control, off-chain data injection, issuance / redemption semantics and expose partially fungible subsets of a token holders balance.\r\n\r\n## Requirements\r\n\r\nMoving the issuance, trading and lifecycle events of a security onto a public ledger requires having a standard way of modelling securities, their ownership and their properties on-chain.\r\n\r\nThe following requirements have been compiled following discussions with parties across the Security Token ecosystem.\r\n\r\n- MUST have a standard interface to query if a transfer would be successful and return a reason for failure.\r\n- MUST be able to perform forced transfer for legal action or fund recovery.\r\n- MUST emit standard events for issuance and redemption.\r\n- MUST be able to attach metadata to a subset of a token holder's balance such as special shareholder rights or data for transfer restrictions.\r\n- MUST be able to modify metadata at time of transfer based on off-chain data, on-chain data and the parameters of the transfer.\r\n- MUST support querying and subscribing to updates on any relevant documentation for the security.\r\n- MAY require signed data to be passed into a transfer transaction in order to validate it on-chain.\r\n- SHOULD NOT restrict the range of asset classes across jurisdictions which can be represented.\r\n- MUST be ERC-20 compatible.\r\n- COULD be ERC-777 compatible.\r\n\r\n## Rationale\r\n\r\n### ERC-1594: Core Security Token Standard\r\n\r\nTransfers of securities can fail for a variety of reasons in contrast to utility tokens which generally only require the sender to have a sufficient balance.\r\n\r\nThese conditions could be related to metadata of the securities being transferred (i.e. whether they are subject to a lock-up period), the identity of the sender and receiver of the securities (i.e. whether they have been through a KYC process, whether they are accredited or an affiliate of the issuer) or for reasons unrelated to the specific transfer but instead set at the token level (i.e. the token contract enforces a maximum number of investors or a cap on the percentage held by any single investor).\r\n\r\nFor ERC-20 tokens, the `balanceOf` and `allowance` functions provide a way to check that a transfer is likely to succeed before executing the transfer, which can be executed both on and off-chain.\r\n\r\nFor tokens representing securities the standard introduces a function `canTransfer` / `canTransferByPartition` which provides a more general purpose way to achieve this when the reasons for failure are more complex; and a function of the whole transfer (i.e. includes any data sent with the transfer and the receiver of the securities).\r\n\r\nIn order to provide a richer result than just true or false, a byte return code is returned. This allows us to give a reason for why the transfer failed, or at least which category of reason the failure was in. The ability to query documents and the expected success of a transfer is included in Security Token section.\r\n\r\nIn order to support off-chain data inputs to transfer functions, transfer functions are extended to `transferWithData` / `transferFromWithData` which can optionally take an additional `bytes _data` parameter.\r\n\r\n### ERC-1410: Partially Fungible Tokens\r\n\r\nThere are many types of securities which, although they represent the same underlying asset, need to have differentiating data tied to them.\r\n\r\nThis additional metadata implicitly renders these securities non-fungible, but in practice this data is usually applied to a subset of the security rather than an individual security. The ability to partition a token holder's balance into partitions, each with separate metadata is addressed in the Partially Fungible Token section.\r\n\r\nFor example a token holder's balance may be split in two: those tokens issued during the primary issuance, and those received through secondary trading.\r\n\r\nSecurity token contracts can reference this metadata in order to apply additional logic to determine whether or not a transfer is valid, and determine the metadata that should be associated with the tokens once transferred into the receiver's balance.\r\n\r\nAlternatively a security token can use this mechanism simply to be able to transparently display to investors how different subsets of their tokens will behave with respect to transfer restrictions. In this case, the balances could be determined programatically.\r\n\r\n### ERC-1643: Document Management Standard\r\n\r\nSecurity tokens usually have documentation associated with them. This could be an offering document, legend details and so on.\r\n\r\nBeing able to set / remove and retrieve these documents, and having events associated with these actions allows investors to stay up to date with documentation on their investments.\r\n\r\nThis standard does not provide any way for an investor to signal on-chain that they have read, or agree, with any of these documents.\r\n\r\n### ERC-1644: Controller Token Operation Standard\r\n\r\nSince security tokens are subject to regulatory and legal oversight (the details of which will vary depending on jurisdiction, regulatory framework and underlying asset) in many instances the issuer (or a party delegated to by the issuer acting as a controller, e.g. a regulator or transfer agent) will need to retain the ability to force transfer tokens between addresses.\r\n\r\nThese controller transfers should be transparent (emit events that flag this as a forced transfer) and the token contract itself should be explicit as to whether or not this is possible.\r\n\r\nExamples of where this may be needed is to reverse fraudulent transactions, resolve lost private keys and responding to a court order.\r\n\r\n## Specification\r\n\r\nThis standard does not specify any additional functions, but references ERC-1410 (#1410), ERC-1594 (#1594), ERC-1643 (#1643) and ERC-1655 (#1644) as an underlying library of security token standards, each covering a different aspect of security token functionality.\r\n\r\nIn order to combine these two standards, the additional constraints are specified.\r\n\r\n### operatorTransferByPartition\r\n\r\nIf the token is controllable (`isControllable` returns `TRUE`) then the controller may use `operatorTransferByPartition` without being explicitly authorised by the token holder.\r\n\r\nIn this instance, the `operatorTransferByPartition` MUST also emit a ControllerTransfer event.\r\n\r\nCorrespondingly, if `isControllable` returns `FALSE` then the controller cannot call `operatorTransferByPartition` unless explicitly authorised by the token holder.\r\n\r\n### operatorRedeemByPartition\r\n\r\nIf the token is controllable (`isControllable` returns `TRUE`) then the controller may use `operatorRedeemByPartition` without being explicitly authorised by the token holder.\r\n\r\nIn this instance, the `operatorRedeemByPartition` MUST also emit a ControllerRedemption event.\r\n\r\nCorrespondingly, if `isControllable` returns `FALSE` then the controller cannot call `operatorRedeemByPartition` unless explicitly authorised by the token holder.\r\n\r\n### Default Partitions\r\n\r\nIn order for `transfer` and `transferWithData` to operate on partially fungible tokens, there needs to be some notion of default partitions that these functions apply to. The details for how these are determined (e.g. either a fixed list, dynamically, or using `partitionsOf`) is left as an implementation detail rather than defined as part of the standard.\r\n\r\nWhen transferring tokens as part of a `transfer` or `transferWithData` operation, these transfers should respect the invariant of partially fungible tokens, namely that the sum of the balances across all partitions should equal to the total balance of a token holder.\r\n\r\n## Interface\r\n\r\n``` solidity\r\n/// @title IERC1400 Security Token Standard\r\n/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\r\n\r\ninterface IERC1400 is IERC20 {\r\n\r\n  // Document Management\r\n  function getDocument(bytes32 _name) external view returns (string, bytes32);\r\n  function setDocument(bytes32 _name, string _uri, bytes32 _documentHash) external;\r\n\r\n  // Token Information\r\n  function balanceOfByPartition(bytes32 _partition, address _tokenHolder) external view returns (uint256);\r\n  function partitionsOf(address _tokenHolder) external view returns (bytes32[]);\r\n\r\n  // Transfers\r\n  function transferWithData(address _to, uint256 _value, bytes _data) external;\r\n  function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) external;\r\n\r\n  // Partition Token Transfers\r\n  function transferByPartition(bytes32 _partition, address _to, uint256 _value, bytes _data) external returns (bytes32);\r\n  function operatorTransferByPartition(bytes32 _partition, address _from, address _to, uint256 _value, bytes _data, bytes _operatorData) external returns (bytes32);\r\n\r\n  // Controller Operation\r\n  function isControllable() external view returns (bool);\r\n  function controllerTransfer(address _from, address _to, uint256 _value, bytes _data, bytes _operatorData) external;\r\n  function controllerRedeem(address _tokenHolder, uint256 _value, bytes _data, bytes _operatorData) external;\r\n\r\n  // Operator Management\r\n  function authorizeOperator(address _operator) external;\r\n  function revokeOperator(address _operator) external;\r\n  function authorizeOperatorByPartition(bytes32 _partition, address _operator) external;\r\n  function revokeOperatorByPartition(bytes32 _partition, address _operator) external;\r\n\r\n  // Operator Information\r\n  function isOperator(address _operator, address _tokenHolder) external view returns (bool);\r\n  function isOperatorForPartition(bytes32 _partition, address _operator, address _tokenHolder) external view returns (bool);\r\n\r\n  // Token Issuance\r\n  function isIssuable() external view returns (bool);\r\n  function issue(address _tokenHolder, uint256 _value, bytes _data) external;\r\n  function issueByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes _data) external;\r\n\r\n  // Token Redemption\r\n  function redeem(uint256 _value, bytes _data) external;\r\n  function redeemFrom(address _tokenHolder, uint256 _value, bytes _data) external;\r\n  function redeemByPartition(bytes32 _partition, uint256 _value, bytes _data) external;\r\n  function operatorRedeemByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes _operatorData) external;\r\n\r\n  // Transfer Validity\r\n  function canTransfer(address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);\r\n  function canTransferFrom(address _from, address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);\r\n  function canTransferByPartition(address _from, address _to, bytes32 _partition, uint256 _value, bytes _data) external view returns (byte, bytes32, bytes32);    \r\n\r\n  // Controller Events\r\n  event ControllerTransfer(\r\n      address _controller,\r\n      address indexed _from,\r\n      address indexed _to,\r\n      uint256 _value,\r\n      bytes _data,\r\n      bytes _operatorData\r\n  );\r\n\r\n  event ControllerRedemption(\r\n      address _controller,\r\n      address indexed _tokenHolder,\r\n      uint256 _value,\r\n      bytes _data,\r\n      bytes _operatorData\r\n  );\r\n\r\n  // Document Events\r\n  event Document(bytes32 indexed _name, string _uri, bytes32 _documentHash);\r\n\r\n  // Transfer Events\r\n  event TransferByPartition(\r\n      bytes32 indexed _fromPartition,\r\n      address _operator,\r\n      address indexed _from,\r\n      address indexed _to,\r\n      uint256 _value,\r\n      bytes _data,\r\n      bytes _operatorData\r\n  );\r\n\r\n  event ChangedPartition(\r\n      bytes32 indexed _fromPartition,\r\n      bytes32 indexed _toPartition,\r\n      uint256 _value\r\n  );\r\n\r\n  // Operator Events\r\n  event AuthorizedOperator(address indexed _operator, address indexed _tokenHolder);\r\n  event RevokedOperator(address indexed _operator, address indexed _tokenHolder);\r\n  event AuthorizedOperatorByPartition(bytes32 indexed _partition, address indexed _operator, address indexed _tokenHolder);\r\n  event RevokedOperatorByPartition(bytes32 indexed _partition, address indexed _operator, address indexed _tokenHolder);\r\n\r\n  // Issuance / Redemption Events\r\n  event Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\r\n  event Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\r\n  event IssuedByPartition(bytes32 indexed _partition, address indexed _operator, address indexed _to, uint256 _value, bytes _data, bytes _operatorData);\r\n  event RedeemedByPartition(bytes32 indexed _partition, address indexed _operator, address indexed _from, uint256 _value, bytes _operatorData);\r\n\r\n\r\n}\r\n```\r\n\r\n### Notes\r\n\r\n#### On-chain vs. Off-chain Transfer Restrictions\r\n\r\nThe rules determining if a security token can be sent may be self-executing (e.g. a rule which limits the maximum number of investors in the security) or require off-chain inputs (e.g. an explicit broker approval for the trade). To facilitate the latter, the `transferByPartition`, `transferWithData`, `transferFromWithData`, `canTransferByPartition` and `canTransfer` functions accept an additional `bytes _data` parameter which can be signed by an approved party and used to validate a transfer.\r\n\r\nThe specification for this data is outside the scope of this standard and would be implementation specific.\r\n\r\n#### Identity\r\n\r\nUnder many jurisdictions, whether a party is able to receive and send security tokens depends on the characteristics of the party's identity. For example, most jurisdictions require some level of KYC / AML process before a party is eligible to purchase or sell a particular security. Additionally, a party may be categorized into an investor qualification category (e.g. accredited investor, qualified purchaser), and their citizenship may also inform restrictions associated with their securities.\r\n\r\nThere are various identity standards (e.g. ERC-725 (#725), Civic, uPort) which can be used to capture the party's identity data, as well as other approaches which are centrally managed (e.g. maintaining a whitelist of addresses that have been approved from a KYC perspective). These identity standards have in common to key off an Ethereum address (which could be a party's wallet, or an identity contract), and as such the `canTransfer` function can use the address of both the sender and receiver of the security token as a proxy for identity in deciding if eligibility requirements are met.\r\n\r\nBeyond this, the standard does not mandate any particular approach to identity.\r\n\r\n#### Reason Codes\r\n\r\nTo improve the token holder experience, `canTransfer` MUST return a reason byte code on success or failure based on the EIP-1066 application-specific status codes specified below. An implementation can also return arbitrary data as a `bytes32` to provide additional information not captured by the reason code.\r\n\r\n| Code   | Reason                                                        |\r\n| ------ | ------------------------------------------------------------- |\r\n| `0x50` | \ttransfer failure                                             |\r\n| `0x51` | \ttransfer success                                             |\r\n| `0x52` | \tinsufficient balance                                         |\r\n| `0x53` | \tinsufficient allowance                                       |\r\n| `0x54` | \ttransfers halted (contract paused)                           |\r\n| `0x55` | \tfunds locked (lockup period)                                 |\r\n| `0x56` | \tinvalid sender                                               |\r\n| `0x57` | \tinvalid receiver                                             |\r\n| `0x58` | \tinvalid operator (transfer agent)                            |\r\n| `0x59` |                                                               |\r\n| `0x5a` |                                                               |\r\n| `0x5b` |                                                               |\r\n| `0x5a` |                                                               |\r\n| `0x5b` |                                                               |\r\n| `0x5c` |                                                               |\r\n| `0x5d` |                                                               |\r\n| `0x5e` |                                                               |\r\n| `0x5f` | \t\ttoken meta or info\r\n\r\nThese codes are being discussed at:  \r\nhttps://ethereum-magicians.org/t/erc-1066-ethereum-status-codes-esc/283/24\r\n\r\n## References\r\n- [EIP 1410: Partially Fungible Token Standard](https://github.com/ethereum/EIPs/issues/1410)\r\n- [EIP 1594: Core Security Token Standard](https://github.com/ethereum/EIPs/issues/1594)\r\n- [EIP 1643: Document Management Standard](https://github.com/ethereum/EIPs/issues/1643)\r\n- [EIP 1644: Controller Token Operation Standard](https://github.com/ethereum/EIPs/issues/1644)\r\n- [EIP Draft](https://github.com/SecurityTokenStandard/EIP-Spec)\r\n\r\n_Copied from original issue_: https://github.com/ethereum/EIPs/issues/1400",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1411/reactions",
    "total_count": 54,
    "+1": 34,
    "-1": 0,
    "laugh": 4,
    "hooray": 6,
    "confused": 0,
    "heart": 6,
    "rocket": 4,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356689",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421356689",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421356689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NjY4OQ==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:22:39Z",
    "updated_at": "2018-09-14T13:22:39Z",
    "author_association": "NONE",
    "body": "From @expede on September 10, 2018 19:55\r\n\r\n> 👍👍👍 This looks super awesome! I previously worked for a security token company, and am very, _very_ happy to see this work being done 🎉 We also did some preliminary open work in this general space with [ERC-902](https://eips.ethereum.org/EIPS/eip-902).\r\n>\r\n> I'm the primary author of [ERC-1066](https://eips.ethereum.org/EIPS/eip-1066) (Hello! 👋) As of Sept 1, we're throwing a ton of time and energy into the ESC project (growing an FOSS team, my time at 100% for at least the next several months, we're in the FOSS track at the [Tachyon Accelerator](https://techcrunch.com/2018/09/07/consensys-details-the-first-cohort-of-companies-to-enter-its-new-accelerator-tachyon/), etc). Expect big things 😉\r\n>\r\n> ## Application-Specific Codes\r\n> > The function will return both a ESC (Ethereum Status Code) following the EIP-1066 standard, and an additional bytes32 parameter that can be used to define application specific reason codes with additional details (for example the transfer restriction rule responsible for making the send operation invalid).\r\n>\r\n> The `0xA*` category range allows people to map their custom codes into the standard. This may or may not fit what you're thinking of using custom codes for. It may warrant more discussion, and at minimum some examples on our end to better describe that system.\r\n>\r\n> ## Use Case Abstraction\r\n> Protocols are essentially abstractions over common use cases. We're doing a _bunch_ of R&D around filling in the currently empty ranges in appropriate, flexible, reusable ways. Security tokens will almost certainly be a widely used standard, and common patterns will inspire other work in the ecosystem (like ERC20 -> ERC721).\r\n>\r\n> We're gathering data from as many people as possible so that we can design the most useful code scheme. I'd love to hop on a [call (phone or video)](https://calendly.com/expede), [email thread](mailto:hello@brooklynzelenka.com), or even over at [EthMagicians](https://ethereum-magicians.org/t/erc-1066-ethereum-status-codes-esc/). We're going to be running regular community hangouts as well. Let me know what works for you!\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-420022084",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356764",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421356764",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421356764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1Njc2NA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:22:54Z",
    "updated_at": "2018-09-14T13:22:54Z",
    "author_association": "NONE",
    "body": "From @darioAnongba on September 11, 2018 10:33\r\n\r\n> Awesome! I am also currently reviewing this EIP, looks good so far.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-420210329",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356820",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421356820",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421356820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NjgyMA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:23:06Z",
    "updated_at": "2018-09-14T13:23:06Z",
    "author_association": "NONE",
    "body": "From @0age on September 11, 2018 15:18\r\n\r\n> Nice work! This is very thorough and addresses many of the most pressing issues concerning compliant securities tokens. One observation (and I doubt I am alone in this determination) is that this EIP comes with a great deal of complexity. Now, much of that is surely inherent to the problem space, but when it comes to ERC proposals in particular it's apparent that keeping it simple is of utmost importance, both for promoting widespread adoption and for encouraging secure best practices (and of course leaving the door open for extensibility). With that in mind, here are a few contrasting viewpoints:\r\n>\r\n> * A ton of the complexity is derived from the logic around **tranches**, and setting, managing and transferring between them. The idea of \"partial fungibility\" seems a bit disingenuous - either an asset is fungible or it is not. Obviously, securities DO often have tranches and so should support it, but in cases where they DON'T, this pattern is going to add a lot of overhead (both gas and extra headaches). Why not just implement tranches as separate tokens (TOKEN-A-CLASS, TOKEN-B-CLASS, etc.) with their own logic, permissions, and balances, then issue, aggregate, and convert between them as needed? Maybe this portion of the EIP could be broken out into its own EIP, and `tranchedSecurityToken` could then attach to a number of tokens representing various classes where applicable and provide the various getters, setters, and view functions laid out in this section, including its own `balanceOf` & `totalSupply` methods that sum each referenced tranche / class.\r\n> * The provision requiring forced transfers could prove a poison pill for the proposal, and at a minimum will tend to politicize the debate around this standard and detract from the technical considerations. It also requires much of the ERC-777 functionality as structured now, but ERC-777 support is designated as optional (and should be - there are not many projects implementing the full spec in the wild as of yet). Why not just split it off into a dedicated EIP for `forceableSecurityToken` or the like?\r\n> * If securities tokens prefer to delegate the management of metadata and transfer permissions to an external contract or outside jurisdiction, there is still a great case for providing `checkSecurityTokenSend` directly from the token (I like `canTransfer` and `canTransferFrom` but that's just one opinion 😉). However, the requirement to be able to set and modify metadata, including at the time of transfer, right from the securities token could prove onerous and inefficient in many of those instances.\r\n>\r\n> Basically, a slimmed-down proposal containing the key sections of this EIP would be much easier to build widespread consensus around. The goal is to promote **interoperability between a diverse ecosystem**, not full compliance for every conceivable securities token in every potential jurisdiction. From there, incremental ERCs could continue to enhance the features (or bugs, according to many crypto-maximalists 🐛) available to protocols around securities tokens - and of course any particular securities token could always go beyond the initial requirements.\r\n>\r\n> _Also, a small aside - unless I'm mistaken, the implementation is currently susceptible to integer overflow & underflow vulnerabilities._\r\n>\r\n> Awesome work and thank you all for putting this proposal together!\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-420290963",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356874",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421356874",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421356874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1Njg3NA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:23:15Z",
    "updated_at": "2018-09-14T13:23:15Z",
    "author_association": "NONE",
    "body": "From @dmdque on September 11, 2018 22:18\r\n\r\n> * I agree with 0age about the complexities of tranches. It's an ambitious effort, but tranches feel like a secondary priority, and would require a base security token standard to be finalized first anyway. I think a simplified version of this EIP will go much further.\r\n> * I love that you included EIP1066 here, they work really well together.\r\n> * Forced transfers are an important topic which needs to be explored further. This is a can of worms from an exploit perspective, but a necessary evil for adoption. Restricted transfers are straight-forward because of `checkSecurityTokenSend` (+1 for `canTransfer`) which allows checking ahead of time. Should we limit the transfers that can be forced to make them more predictable? I think there's value in exploring this.\r\n> * Should transfer freezes be considered as well? The crypto enthusiast in me doesn't want this, but [trading halts](https://en.wikipedia.org/wiki/Trading_halt) are a [common occurence](http://www.nasdaqtrader.com/trader.aspx?id=TradeHalts).\r\n> * A note on the one-way nature of issuance: I consider this a \"soft requirement\" since it's difficult to enforce and impossible to verify on-chain. Soft requirements are too easily avoidable in practice, which causes a rift across implementations.\r\n>\r\n>   * It reminds me of the many ERC20 \"SHOULD\" requirements that weren't implemented across the board, and resulted in tokens being \"mostly\" ERC20. (eg. returning false rather than reverting for transferring with insufficient balance.) This caused annoyances downstream, where token interaction proxies are required to bridge the gap.\r\n>   * There may be value in removing this since projects are likely to walk their own path. Future applications may incorrectly assume that `issuable` is one-way because it's in the standard, resulting in bugs and headaches. Also, there are valid reasons to issue again, such as secondary offerings. (It doesn't suffice to leave `issuable` on because it's hard to predict that a secondary offering will be had.)\r\n>\r\n> Overall this is a great start. Companies are run by people who make mistakes, and need wiggle room. A big challenge for security tokens is the lack of flexibility on the blockchain. I think this EIP addresses this with the forced and restricted transfers.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-420428836",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356951",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421356951",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421356951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1Njk1MQ==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:23:29Z",
    "updated_at": "2018-09-14T13:23:29Z",
    "author_association": "NONE",
    "body": "From @zingleton on September 12, 2018 03:23\r\n\r\n> I think this is great stuff.\r\n>\r\n> I like the tranches. I am new to this discussion and I have no idea what the original use case was, but I can make an informed guess. They are the best way that I have seen to implement US Reg D/Reg S rules. Under the Reg S rule, I can sell US securities to a non-US buyer, and they can trade those securities, but they can't sell them back to a US buyer until one year has passed from the issue date. If the Reg S sale from a particular date is in one tranche, we can track and enforce this rule. Almost any other way to do it is more complicated, and wrong. So, tranches are actually a simplification in this case.\r\n>\r\n> Reg D lockups should also be handled by tranches for a particular issue date. The Reg D rules say that a US buyer of a private security should hold it as \"restricted\" for a year. This is almost always implemented with a lockup on the buyer, where the buyer can't sell the security until one year has passed. However, the lockup implementation is not accurate. A fund with more than $100M in assets under management (QIB or Qualified Institutional buyer) can buy the Reg D securities before the lockup has expired. They get this privilege from \"rule 144a\". The restriction on resale to anyone BUT a QIB continues for the remainder of the year - as measured by the properties of the security issue tranche, not the buyer. These rule 144a privileges are socially offensive, in giving special privileges to wealth, but they are likely to be quite important in the real world of US private market securities.\r\n>\r\n> In this use case, multiple tranches represent the SAME security. That's important. They are not like the tranches of an asset backed security that are designed to be different. They are the same security with different transfer rules. They all add into the same cap table percentages for voting and distributions. So, splitting them into different tokens screws up all the numbers. Some people are splitting one security into different tokens so they can track a Reg S issue. This is a bad solution and a lot more complicated to put back together into relative percentages than just implementing these tranches. The tranches are a simplification.\r\n>\r\n> You do want the ability to collapse two tranches into one. They represent the same security. For example, Reg D and Reg S tranches issued on different dates can often be collapsed when the US restrictions expire in a year.\r\n>\r\n> The tranches can themselves be simplified. If they all represent the same security, then I can't see why you would want different permissions and operators. That feature could be eliminated. It would make sense to go through and remove extra tranche operations and features.\r\n>\r\n> Security tokens need to be pausable (freeze transfers). Under any reasonable disclosure regime, if a company finds out some big news that will affect their traded securities, they should freeze transfers until they can make a public disclosure. If they don't they WILL get sued in the US. Lawyers file thousands of shareholder lawsuits every year alleging they bought securities without knowing some important thing that the company had not revealed yet. That's their standard \"securities fraud\" complaint about anything they don't like. A blockchain mechanism that allows issuers to \"pause\" or block transfers right on the token is a big step forward for securities that are traded in multiple venues and OTC. Maybe this doesn't need to be in this spec but it does need to be somewhere in the implementation. I think \"pausable\" is pretty common in the Zeppelin-derived ERC 20 implementations. So, I guess that shows it doesn't need to be in the standard. The standard needs to describe the functions that would be used by handlers like exchanges and wallets to deal with multiple types of securities. Maybe it doesn't need to describe features (like pause/freeze) that are only used by the issuer.\r\n>\r\n> Forced transfers are required for real security. If an issuer sells securities to grandma, and she dies and leaves no key, the issuer still needs to deliver the securities to her estate under most securities regimes. Issuers have to be able to print up a new stock certificate. Maybe it doesn't have to be in the standard, but it has to be in the implementation. This standard makes it easy to add multisig governance to that, which is how we handle it. However, forced transfer is also something that the issuer does (with multisig arbitrators), and not the exchanges and wallets that rely on a standard.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-420490082",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421356951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357011",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357011",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzAxMQ==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:23:41Z",
    "updated_at": "2018-09-14T13:23:41Z",
    "author_association": "NONE",
    "body": "From @0age on September 12, 2018 08:58\r\n\r\n> Great information, @zingleton - thanks for laying out lots of concrete details related to US Reg D / Reg S. You make a strong case for utilizing tranches to enforce these regulations, but i’m not yet convinced that it should be a mandatory part of the **global** standard - what about all the jurisdictions that don’t require adhering to these regulations?\r\n>\r\n> Maybe a good place to start would be to specify a much simpler `permissionedToken` interface that addresses the following requirements:\r\n> •\tMUST have a standard interface to query if a transfer would be successful and return a reason for failure.\r\n> •\tMAY be able to modify metadata at time of transfer based on off-chain data, on-chain data and the parameters of the transfer.\r\n> •\tMAY require signed data to be passed into a transfer transaction in order to validate it on-chain.\r\n> •\tMUST be ERC20 compatible.\r\n> •\tSHOULD be ERC721 compatible.\r\n> •\tSHOULD be ERC777 compatible.\r\n>\r\n> Then, these interface requirements can be utilized and expanded on by a wide variety of securities tokens (and other projects), including a securities token standard with all of the bells and whistles that a US-compliant securities token would need (and then optionally overloading the transfer check with a tranche argument as required would be a natural choice).\r\n>\r\n> Concerning forced transfers, “grandma loses her key” is a strong analogy as well - i’m just pointing out that this will be a contentious issue that may benefit from isolation from the rest of the proposal.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-420550500",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357011/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357053",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357053",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzA1Mw==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:23:51Z",
    "updated_at": "2018-09-14T13:23:51Z",
    "author_association": "NONE",
    "body": "From @darioAnongba on September 12, 2018 09:30\r\n\r\n> I agree with @zingleton on this:\r\n>\r\n> > The standard needs to describe the functions that would be used by handlers like exchanges and wallets to deal with multiple types of securities. Maybe it doesn't need to describe features (like pause/freeze) that are only used by the issuer.\r\n>\r\n> The standard is needed for interoperability between different entities, potentially all across the globe. Implementation specifics shouldn't be part of the standard. Now, the question is, **are tranches needed in the standard to facilitate interoperability?** (even if using a single `default` tranche for tokens that don't need it). I personally believe that yes, tranches are necessary in the standard. This would ease integration instead of having to deal with multiple token classes.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-420560017",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357095",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357095",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzA5NQ==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:23:59Z",
    "updated_at": "2018-09-14T13:23:59Z",
    "author_association": "NONE",
    "body": "From @fubuloubu on September 12, 2018 13:54\r\n\r\n> I believe the tranches approach is actually better than having separate classes of tokens. Both are equally viable options, but there might significantly complex reclassification rules for a token to change tranches, and the properties of that transfer would be more difficult to evaluate from a (software) security standpoint than if the logic were handled internal to the contract.\r\n>\r\n> I also think this semi-fungible concept is very useful from other standpoints: one could imagine a reputation token that had different subcategories depending on how it was earned. Being able to subcategorize a token based on different properties a subset of holdings should have is very interesting. I think this should be separated into a different, dependent standard and developed separately to reduce the complexity of this proposal.\r\n>\r\n> Just picture a pie chart of your holdings, denominated by tranches. Very useful concept.\r\n>\r\n> I also think there should be a `getAllTranches` or similar that returns all possible tranches any holder in the contract could have. Right now, it is dependent on the holder to delineate what they personally could have, so I could see this as useful.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-420637464",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357138",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357138",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzEzOA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:24:09Z",
    "updated_at": "2018-09-14T13:24:09Z",
    "author_association": "NONE",
    "body": "From @zingleton on September 12, 2018 15:21\r\n\r\n> It might be possible to hide the tranches so that you would have an option to:\r\n>\r\n> * not use them (the default tranche is an implementation of this)\r\n> * include them in the security, but have the token code itself figure out how to use them.  On \"send\", the script would try to figure out what tranche can be sent (has an appropriate balance, passes transfer rules). This would be an extension of the idea of a default tranche to a default send.\r\n> * Use them directly. I think they should appear in the standard because exchanges and wallets will want to understand what tranches are available.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-420666588",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357178",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357178",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzE3OA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:24:15Z",
    "updated_at": "2018-09-14T13:24:15Z",
    "author_association": "NONE",
    "body": "From @seathemc on September 13, 2018 14:11\r\n\r\n> This was really cool to read through. Couple of questions:\r\n>\r\n> 1. Is there no room to include that there must be some kind of consideration/standard for the taxation of these securities - perhaps included in the metadata?\r\n> 2. Also, what about a communication channel between the issuers, and the purchasers? One of the mainstays of public and private securities is that an issuer is meant to build a 'community' with their investors/shareholders - and there should be an open line of communication. In line with the thoughts by @darioAnongba, is it not appropriate to create standards for exchanges to follow to create some kind of communication channel/voting mechanism between issuers and shareholders/STO purchasers?\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421001376",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357217",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357217",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzIxNw==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:24:23Z",
    "updated_at": "2018-09-14T13:24:23Z",
    "author_association": "NONE",
    "body": "From @zingleton on September 13, 2018 14:41\r\n\r\n> I like the idea that the security standard provides some basic support for both public docs (as included) and private messaging.\r\n>\r\n> Messaging would go into a different type of standard with a more general mission. Basically, the messaging that is needed is a global queue where you can post encrypted messages for an Ethereum address, or content hash pointers to encrypted messages. They would be posted for a specific public key, from a specific address. For this to work, you would also need a database that matches an Ethereum address or similar blockchain address to a full public key. Probably you would accept a variety of addresses to go cross-chain. There must be implementations of this since it is such a common need. The security token standard would then only require a way to show the address of an issuer or other party that would send and receive messages.\r\n>\r\n> Voting would probably go into a different but similar queue. What you want is proxy assignment and proxy voting AKA \"liquid democracy\". That would not be part of the standard and it doesn't need to be decentralized.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421011016",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357260",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357260",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzI2MA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:24:32Z",
    "updated_at": "2018-09-14T13:24:32Z",
    "author_association": "NONE",
    "body": "From @darioAnongba on September 13, 2018 16:57\r\n\r\n> > Is there no room to include that there must be some kind of consideration/standard for the taxation of these securities - perhaps included in the metadata?\r\n>\r\n> I think you answered your own question. Taxation cannot be directly written in the standard as it is specific to jurisdictions\r\n>\r\n> > Also, what about a communication channel between the issuers, and the purchasers? One of the mainstays of public and private securities is that an issuer is meant to build a 'community' with their investors/shareholders - and there should be an open line of communication. In line with the thoughts by @darioAnongba, is it not appropriate to create standards for exchanges to follow to create some kind of communication channel/voting mechanism between issuers and shareholders/STO purchasers?\r\n>\r\n> Would be interested to know if an EIP exists for that!\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421058683",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357260/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357300",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357300",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357300,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzMwMA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:24:40Z",
    "updated_at": "2018-09-14T13:24:40Z",
    "author_association": "NONE",
    "body": "From @tomohiro-n on September 13, 2018 17:27\r\n\r\n> Great work!\r\n>\r\n> I like the tranche's extensibility. Even if the token has solely default tranche at first but it may be going to have another.\r\n>\r\n> On the other hand, I'd like to hear secondary markets' thoughts on this tranches-or-tokens discussion.\r\n> One thing which may go very complex is that prices can be set per tranche, per group of tranches, or per token. I don't think It would be necessary to include the practical manner in the standard but we may want to use tranches on the condition that all tranches under the token should have the same price? In other words, issuing another token may be better if we expect them to have different prices.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421068480",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357300/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357423",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357423",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzQyMw==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:25:11Z",
    "updated_at": "2018-09-14T13:25:11Z",
    "author_association": "NONE",
    "body": "From @pakaplace on September 13, 2018 17:28\r\n\r\n> Really high-quality thread here. We at [Meridio](https://www.meridio.co) have been refining our security token contract- an upgradeable security token issued per-asset with modular validation checks on `transfer()`. We actually [tokenized our first asset in Brooklyn](https://www.nytimes.com/2018/05/25/realestate/a-blockchain-building-in-bushwick.html) just a few months ago.\r\n>\r\n> ### Tranches\r\n> There's clearly a strong business case for closely resembling the nuances of security classifications via tranches, but also more complexity on validating transfers and interoperability (e.g. integrating with exchanges). The more I read through this thread (thanks @zingleton), I’m increasingly sold on the benefit of tranches.\r\n>\r\n> While tranches may not be necessary for classes of securities (e.g. common vs preferred equity, which I think would be better served by a separate token issuance), tranches work well for different filings for the same underlying security e.g. Reg D for U.S. investors and Reg S for foreign, when additional securities are offered for the same class, or for allocating pools of tokens within the larger issuance for daily trading limits. The fundamental concept of having a token be “partially fungible” within the same security issuance is important because that’s how they operate in exchanges today.\r\n>\r\n> Given their benefit but also the introduced complexity, I lean towards having one standard that would provide security tokens for individually issued common vs equity securities and one that would include tranches and could be used for Reg D/S securities. Both ERC-20 etc. compatible, of course.\r\n>\r\n> ###Additional data field on `send()`\r\n> I’m leaning against the idea of a `_data` input for an e.g. signed attestation based on off-chain data by the broker-dealer. I fear the coordination effort between exchanges/broker-dealers for reading and validating off-chain data would be too difficult. I’m in favor of keeping transfer validation on-chain whenever possible and limiting the attestor’s potential for error. I would need to see some simple and clever examples in practice of `_data`\r\n>\r\n> ### checkSecurityTokenSend()\r\n> I’m with the other commenters that this is quite the mouthful, but otherwise, it’s great to see various security token projects (e.g. PolyMath, Harbor, Meridio) starting to converge on modular checks on `transfer()`. I would second the recommended language change to `checkTransfer()` or otherwise suggest `validateTransfer()`.\r\n>\r\n> ### Status Codes\r\n> I appreciate the analogy given in ERC-1066 of Ethereum Status Codes resembling HTTP status codes. Our team at [Meridio](https://www.meridio.co) would definitely support more industry convergence on error codes (ERC-1066), application specific codes, and reason coding (defined here).\r\n>\r\n> ### Token Metadata\r\n> Regarding an inheritable metadata interface, I’d support either this (`get/setDocument()`) or a separate registry contract to get/set metadata for each contract address. In addition, perhaps a separate thread is needed for industry-specific metadata coding. At Meridio, we’re currently using traditional industry code standards such as [NAICS](https://www.naics.com/search-naics-codes-by-industry/) and [RESO](https://www.reso.org/)’s data models specifically for real estate assets.\r\n>\r\n> cc @corbinpage, @DavidConroy, @ashadakshi and the rest of the [Meridio Team](https://www.meridio.co/about) team for contributing.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421068786",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357423/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357474",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357474",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzQ3NA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:25:22Z",
    "updated_at": "2018-09-14T13:25:22Z",
    "author_association": "NONE",
    "body": "From @jllaw on September 13, 2018 18:16\r\n\r\n> @0age\r\n>\r\n> \"Why not just split it off into a dedicated EIP for forceableSecurityToken or the like?\" That's interesting; I've long been a begrudging fan of forced transfer (not ideal, but necessary for regulated tokens), so it always seemed like it had to be part of ERC1400. I'm trying to think if there's ever a use case where one wouldn't actually want forced transfer in a regulated token; if there aren't many times where it wouldn't be required, I'd assume we'd leave it in as part of 1400; otherwise, separate might make some sense.\r\n>\r\n> \"Basically, a slimmed-down proposal containing the key sections of this EIP would be much easier to build widespread consensus around.\" True. It's a bit difficult to figure out how slimmed down to go versus not so that those dealing with ERC1400 have reassurance that it supports all the expected functionality of regulated security tokens.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421083943",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357524",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357524",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzUyNA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:25:32Z",
    "updated_at": "2018-09-14T13:25:32Z",
    "author_association": "NONE",
    "body": "From @fubuloubu on September 13, 2018 18:35\r\n\r\n> > It's a bit difficult to figure out how slimmed down to go\r\n>\r\n> I think the partial-fungible token concept is a very clear example of how to reduce complexity. If you separate that, the security aspects of this proposal are easier to evaluate and in fact makes it possible for implementation via a PFT or multiple tokens, or even ERC20, if desired.\r\n>\r\n> I would argue this proposal is really 3 related proposals in one:\r\n>\r\n> 1. Variable supply (ERC20 suggests guidelines but doesn't standardize them IMO)\r\n> 2. Partially Fungible Tokens\r\n> 3. Custodialship (e.g. forced transfers)\r\n>\r\n> Each has their own use cases outside of securities and could benefit from coordinated conversation instead of pushing the security use case into one EIP, leaving the other use cases to implement their own standards without the extra stuff they don't need.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421089662",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357561",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357561",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzU2MQ==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:25:40Z",
    "updated_at": "2018-09-14T13:25:40Z",
    "author_association": "NONE",
    "body": "From @pabloruiz55 on September 13, 2018 19:16\r\n\r\n> First of all, thanks for all the comments. Happy to see all the conversation going on over this proposal.\r\n> @fubuloubu after reading all the feedback, we are seriously considering splitting the EIP in a few pieces and have separate discussions given there are some topics that are more controversial than others (Forced Transfers, looking at you 👀 ).\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421102590",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357632",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357632",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzYzMg==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:25:54Z",
    "updated_at": "2018-09-14T13:25:54Z",
    "author_association": "NONE",
    "body": "From @jllaw on September 14, 2018 08:44\r\n\r\n> @pabloruiz55 There's merit in that, but if we split up into something like 3 EIPs that really need to work together, will we come into the scenario where many in the industry start saying something like, you must be ERC20 and ERC777 and ERC1400 and ERC-XXX and ERC-YYY for us to accept you? If that's the case, then wouldn't we essentially be better off just having it all covered in ERC1400? Taking forced transfer as an example, if essentially all security tokens (and I'm not sure that it is 100%) would require forced transfer, then wouldn't we want to include that in ERC1400 instead of breaking it apart into a separate optional EIP?\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421261294",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357686",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357686",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1NzY4Ng==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:26:04Z",
    "updated_at": "2018-09-14T13:26:04Z",
    "author_association": "NONE",
    "body": "From @0age on September 14, 2018 10:30\r\n\r\n> @jllaw - splitting up this EIP wouldn’t fragment the ultimate canonical securities token EIP. Once the constituent EIPs are well-specified, the specification for ERC1400 compatibility becomes really straightforward: it just needs to state which EIPs it requires and how they intersect. From there, industry members can just require ERC1400 as shorthand for requiring all the EIPs it implements.\r\n>\r\n> However, splitting it up **would** make securities tokens more compatible with a broader ecosystem, particularly with permissioned tokens that don’t have all the requirements of a full-fledged security. There are many interesting applications for utilities tokens that require unique identities, like governance tokens with voting mechanisms that go beyond `1 token : 1 vote`. Some, but not all, of the interfaces needed for securities tokens will overlap with those needed by projects like these, and how cool would it be to have one method for checking if a given token transfer will go through?\r\n>\r\n> (Still like `canTransfer` the best - seems the most like the OG, ERC20 😁)\r\n>\r\n> In the case of securities tokens with tranches, I think this should in the default case check that the transfer is ok from **some** tranche or combination thereof (a default tranche specified by the securities token would be a sane choice) without needing to specify the tranche. To expect every interfacer to know details about all the tranches of all the various securities tokens seems unrealistic. Then, an extension to this method like `canTransferFromTranche` would provide more granular checks for those interfacers who require them.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421292566",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357686/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357746",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421357746",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421357746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1Nzc0Ng==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:26:15Z",
    "updated_at": "2018-09-14T13:26:15Z",
    "author_association": "NONE",
    "body": "From @rudolfix on September 14, 2018 11:32\r\n\r\n> Good to have this discussion started! Security tokens definitely will extend current token ecosystem and some standardization is very needed.\r\n>\r\n> With this particular RFC I have a problem that it packs every required functionality in the token itself. If we are designing a protocol we should decide first what should go to the app layer and should not be mandatory part of standard. Over-defined protocol will be extremely limiting in the future.\r\n>\r\n> Example: different stock classes are listed separately and have different market value on secondary markets because they give different rights to their holders. They are not fungible and naturally they represent separate tokens. Now I get that there could be a need to define something like **token container** that groups tokens form the same issuer that are connected via definable set of rules (like how to convert one token into another) but it's not a part of a token. it is rather part of token controller which represents issuer (for example a limited company with typical governance). Every issuer can deal with it as they wish. Some want one stock class and single token. Some will issue many tokens of different classes. Some may use this tranche proposal. Now we can have a standard token container for this things. However if it is implemented inside with separate tokens or with tranches should be irrelevant. By mandating it to be part of the token we are limiting future developers of apps based on security token standard to particular implementation, while I for example do not even see tranches as essential part of security token ecosystem.\r\n>\r\n> Now what I think we should have as security token is something that is building and extending existing token ecosystem: is lean, simple, ERC-20 compatible, leaves as much as possible in the app layer and is useful beyond security token domain. This is my take on what we should do\r\n>\r\n> * Security tokens must be legally binding tokens. Security tokens give holders off-chain rights and possession of a token should be easily enforceable off-chain. This RFC does a first take on that but it's really a separate domain that should be a separate standard. I totally see something like \"legally binding smart contract\" with standard interface to irrevocably link contracts to legal documents, sign them, retrieve who signed and with which smart contract state.\r\n> * Token controller. Please look at MiniMe token to see how powerful concept it is. We should separate token which is about ownership rights from token governance (like token transferability, vesting, lockins, forced transfers etc.). It's better to standardize simple token - controller interface than trying to define app layer stuff in the token! This way you have endless possibilities how this governance is implemented and you keep your token simple.\r\n> * Security tokens must enforce several rights that are earned via their possession. For example right to dividend, voting rights, information rights etc. are not transferred when you trade your token. You are still legally entitled to your past dividend. There is already extremely elegant and powerful solution to this in the MiniMe token (`balanceOfAt` and `totalSupplyAt`) which also let's you do tons of other things (Aragon is using this for example).\r\n>\r\n> Now the thing I like about current standard is to have `canTransfer` as part of the token because it's simply practical. In scheme above token controller can answer this questions via standard interface but a little shortcut is not bad.\r\n>\r\n> I summarized all of this with some code samples here, you can read this is you have a few minutes: https://blog.neufund.org/good-protocols-how-to-properly-standardize-security-tokens-95ff83c81c4a\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421313614",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421357746/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421358574",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421358574",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421358574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1ODU3NA==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:29:08Z",
    "updated_at": "2018-09-14T13:29:08Z",
    "author_association": "NONE",
    "body": "From @zingleton on September 14, 2018 13:52\r\n\r\n> This discussion has momentum and it is pulling together separate groups to work on a standard. I want to learn more from the people on this thread. Should we schedule some meetups? I have heard that this proposal started with a small meeting that Polymath organized in Barbados. Now we have more participants that are interested in contributing. We can meet up at Ethereum or security token events. Maybe we can start with a meetup in New York around October 5, when some people will go to the \"Security Token Academy\" event. Maybe we can suggest similar meetups in Europe and Asia.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421348809",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421358574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421358783",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421358783",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421358783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1ODc4Mw==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:29:55Z",
    "updated_at": "2018-09-14T13:29:55Z",
    "author_association": "NONE",
    "body": "From @seathemc on September 14, 2018 14:00\r\n\r\n> Can it be virtual? We are working on mobile security tokens based out of Nairobi with mobile money. Happy to lead a session for the community too. Marvin Coleby Founder Raise m: 514 430 1973 w: raiseimpact.io\r\n> […](#)\r\n> On Sep 14, 2018, 3:53 PM +0300, zingleton ***@***.***>, wrote: This discussion has momentum and it is pulling together separate groups to work on a standard. I want to learn more from the people on this thread. Should we schedule some meetups? I have heard that this proposal started with a small meeting that Polymath organized in Barbados. Now we have more participants that are interested in contributing. We can meet up at Ethereum or security token events. Maybe we can start with a meetup in New York around October 5, when some people will go to the \"Security Token Academy\" event. Maybe we can suggest similar meetups in Europe and Asia. — You are receiving this because you commented. Reply to this email directly, view it on GitHub, or mute the thread.\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421350907",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421358783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421358936",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421358936",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421358936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM1ODkzNg==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:30:26Z",
    "updated_at": "2018-09-14T13:30:26Z",
    "author_association": "NONE",
    "body": "From @thegostep on September 14, 2018 14:17\r\n\r\n> Thank you all for the great response! It is thrilling to see hear from so many voices in the space and clear that many are thinking about these issues. My job is to involve a diverse set of opinions from across the ecosystem and shepherd the conversation towards some sort of consensus.\r\n> \r\n> We have scheduled a community call for Monday, Sept 17th with @bmann from ETHMagicians and @expede from ERC-1066 to have a public discussion.\r\n> \r\n> To participate in the call, please sign up [here](https://ethereum-magicians.org/t/community-call-erc1400-introductions-feedback-questions/1333).\r\n\r\nhttps://github.com/ethereum/EIPs/issues/1400#issuecomment-421355311",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421358936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421362721",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421362721",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421362721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM2MjcyMQ==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:43:50Z",
    "updated_at": "2018-09-14T13:47:01Z",
    "author_association": "NONE",
    "body": "@expede\r\n\r\nWith regards to the return values of `checkSecurityTokenSend` we were thinking that in addition to the ERC 1066 byte code, the contract might want to give a more granular response (hence the additional `bytes32` return value).\r\n\r\nAs an example, suppose that transfer failed due to:\r\n`0xA3: Transfer Blocked - Sender lockup period not ended`\r\nthen we may also want to return the actual lockup period end date using this `bytes32` return value.\r\n\r\nSo the `byte` code give the general response (which could be used on-chain for example) and the `bytes32` gives additional data that could be used in e.g. a dApp to show the user more context.\r\n\r\n@zingleton\r\n\r\nThanks for providing so much concrete detail around US regulatory rules - very useful for the discussion!\r\n\r\nIt should be possible to ignore the internals of tranches and instead use the ERC777 (or ERC20) send / transfer functions which would use default tranches and on-chain code to determine how to deal with tranches.\r\n\r\nThis is what we were trying to describe in the \"ERC20 / ERC777 Backwards Compatibility\" section.\r\n\r\nIf you go down this route, then tranches just become an internal implementation detail, but if you want to implement the full ERC 1400 specification you can do which would give users (e.g. token holders, exchanges) more flexibility if they did want to operate on the tranche level.\r\n\r\n@fubuloubu\r\n\r\nRegarding `getAllTranches` there is a `tranchesOf` function that returns the tranches of an individual token holder.\r\n\r\nI can see that getting all tranches (across all users) may have some use cases, although it may make implementations a bit more complex. There is also no guarantee in the standard that the same tranche key across different users would be attached to the same metadata, so tranche keys should generally be interpreted along with the token holder address (there may be implementations where this is not true).\r\n\r\n@seathemc\r\n\r\nTaxation is interesting - possibly this should exist as a separate standard, or as an implementation detail. As an example we recently authored a dividend module which withholds appropriate tax.\r\n\r\nI love the idea of a communication channel, and communication between issuers and their security holders is critical - will think more about this ;-).\r\n\r\n@tomohiro-n\r\n\r\nWe have spoken to some exchanges. Currently they are generally building on top of ERC 20 which makes sense as it is the industry standard for tokens. This EIP is an effort to move the conversation on from ERC 20 to a more specific token specification for securities, but we would expect discussion and adoption to take some time as everyone works through the limitations of ERC 20 and thinks about different ways to address these (of which this EIP is one proposal).\r\n\r\n@rudolfix\r\n\r\nReally appreciate your input on this EIP - there is lots to digest and definitely lots of ways to skin a cat here. We will keep thinking about how best to decompose the standard into more digestible chunks which are less constraining.\r\n\r\nWith regard to using multiple tokens with a container, I guess this could be the way that you implement tranches (i.e. a separate token per tranche) in which case the partially fungible token standard still provides a standardised way to interoperate across a container of tokens.\r\n\r\n@all\r\n\r\nSwitched over to `canSend` from `checkSecurityTokenSend`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421362721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421363425",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421363425",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421363425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM2MzQyNQ==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T13:46:17Z",
    "updated_at": "2018-09-14T13:46:17Z",
    "author_association": "NONE",
    "body": "In case it got lost in the issue migration, as per @thegostep there is a community call to discuss this issue kindly organised by @bmann from ETHMagicians and @expede from ERC-1066 #1066.\r\n\r\nTo participate in the call, please sign up [here](https://ethereum-magicians.org/t/community-call-erc1400-introductions-feedback-questions/1333).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421363425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421390090",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421390090",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421390090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM5MDA5MA==",
    "user": {
      "login": "pabloruiz55",
      "id": 526558,
      "node_id": "MDQ6VXNlcjUyNjU1OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/526558?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pabloruiz55",
      "html_url": "https://github.com/pabloruiz55",
      "followers_url": "https://api.github.com/users/pabloruiz55/followers",
      "following_url": "https://api.github.com/users/pabloruiz55/following{/other_user}",
      "gists_url": "https://api.github.com/users/pabloruiz55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pabloruiz55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pabloruiz55/subscriptions",
      "organizations_url": "https://api.github.com/users/pabloruiz55/orgs",
      "repos_url": "https://api.github.com/users/pabloruiz55/repos",
      "events_url": "https://api.github.com/users/pabloruiz55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pabloruiz55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T15:11:41Z",
    "updated_at": "2018-09-14T15:11:41Z",
    "author_association": "NONE",
    "body": "@zingleton we are going to be at Devcon and proposed a talk around Securities Tokens for the Council of Prague the days prior to the main event. You can join here: https://hackmd.io/DaJhrasLQteUk3IwX5bQAg?view",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421390090/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421417548",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421417548",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421417548,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTQxNzU0OA==",
    "user": {
      "login": "rudolfix",
      "id": 17202864,
      "node_id": "MDQ6VXNlcjE3MjAyODY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17202864?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rudolfix",
      "html_url": "https://github.com/rudolfix",
      "followers_url": "https://api.github.com/users/rudolfix/followers",
      "following_url": "https://api.github.com/users/rudolfix/following{/other_user}",
      "gists_url": "https://api.github.com/users/rudolfix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rudolfix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rudolfix/subscriptions",
      "organizations_url": "https://api.github.com/users/rudolfix/orgs",
      "repos_url": "https://api.github.com/users/rudolfix/repos",
      "events_url": "https://api.github.com/users/rudolfix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rudolfix/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T16:45:58Z",
    "updated_at": "2018-09-14T16:45:58Z",
    "author_association": "NONE",
    "body": "thanks for listening to our feedback. Looking at the many voices that have chimed in here, it's apparent that the security token ecosystem is bigger and more diverse than maybe any of us realize. There are a number of security token issuers and many of them hail from different jurisdictions and are therefore subject to varying regulations. This impacts how securities are issued and traded and makes it even more imperative that we create a globally-accepted standard that is flexible enough to adapt to these changing circumstances. From my perspective, it appears that it's too soon for us to be discussing a particular interface and instead we need to take a step back and consider the various perspectives on the table.\r\n\r\nJust as an example, we at Neufund have been working hard on the issuance of security tokens for more than two years. Naturally, we have certain views as to how it should be standardized, some of which I elaborated on in my comments above. I am sure we are not the only ones, and we need to allow all voices to be represented. That said, we are very excited that this discussion is taking place and we want to push forward a security token standard that is sensible for all parties, regardless of geography or differences in legal jurisdictions. I think there are many other projects on Ethereum that are willing to do the same.\r\n\r\nWhile it sounds like there were some discussions had at the meeting in Barbados a few months ago, many of us learned about this meeting after the fact from the media, similar to how @zingleton described. In fact, my understanding is that the only major security token issuer represented was Polymath. Obviously, if we want to create a global standard we need input from players like Harbor, Securitize and TrustToken in the US, as well as European and Asian issuers like Neufund, Swarm Fund, SmartValor, Own, Blackmoon, just to name a few.\r\n\r\nMy proposition would be as follow:\r\n\r\n1. Create an alliance similar ERC725 alliance (https://erc725alliance.org/) where fundamentals of the standard could be discussed. (what's cool is that the audience seems to be similar including @frozeman, who has been one of our key advisors from the beginning and a prominent Neufund community member). Every project that has commented on this thread, plus everyone else we can think of, should be invited to this alliance.\r\n\r\n2. Organize a satellite event like a workshop at Devcon4 that will be open to all of us and where we can discuss these matters as an alliance, knowing there will be good representation from all sides.\r\n\r\nWe still have time to get this right, and to ensure everyone is heard. Let me know what you think of the above. We will also join for the call on Monday and can discuss there too.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421417548/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421418776",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421418776",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421418776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTQxODc3Ng==",
    "user": {
      "login": "seathemc",
      "id": 31813766,
      "node_id": "MDQ6VXNlcjMxODEzNzY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/31813766?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seathemc",
      "html_url": "https://github.com/seathemc",
      "followers_url": "https://api.github.com/users/seathemc/followers",
      "following_url": "https://api.github.com/users/seathemc/following{/other_user}",
      "gists_url": "https://api.github.com/users/seathemc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seathemc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seathemc/subscriptions",
      "organizations_url": "https://api.github.com/users/seathemc/orgs",
      "repos_url": "https://api.github.com/users/seathemc/repos",
      "events_url": "https://api.github.com/users/seathemc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seathemc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T16:50:24Z",
    "updated_at": "2018-09-14T16:50:24Z",
    "author_association": "NONE",
    "body": "I’m with rudoflix! Here we are working on creating security tokens for the african continent compatible with USSD and mobile money technology. Mobile phones not both a technological and regulatory challenge that change how security tokens should be created for *people* (I.e. mobile money users), and not just institutions like much of the security token space sometimes seems to prioritize.\n\nWe would be eager to contribute our standards to this community as well.\n\nRight on everyone. This is exciting.\n\nMarvin Coleby\nFounder\nRaise\n\nm: 514 430 1973\nw: raiseimpact.io\nOn Sep 14, 2018, 7:46 PM +0300, rudolfix <notifications@github.com>, wrote:\n> thanks for listening to our feedback. Looking at the many voices that have chimed in here, it's apparent that the security token ecosystem is bigger and more diverse than maybe any of us realize. There are a number of security token issuers and many of them hail from different jurisdictions and are therefore subject to varying regulations. This impacts how securities are issued and traded and makes it even more imperative that we create a globally-accepted standard that is flexible enough to adapt to these changing circumstances. From my perspective, it appears that it's too soon for us to be discussing a particular interface and instead we need to take a step back and consider the various perspectives on the table.\n> Just as an example, we at Neufund have been working hard on the issuance of security tokens for more than two years. Naturally, we have certain views as to how it should be standardized, some of which I elaborated on in my comments above. I am sure we are not the only ones, and we need to allow all voices to be represented. That said, we are very excited that this discussion is taking place and we want to push forward a security token standard that is sensible for all parties, regardless of geography or differences in legal jurisdictions. I think there are many other projects on Ethereum that are willing to do the same.\n> While it sounds like there were some discussions had at the meeting in Barbados a few months ago, many of us learned about this meeting after the fact from the media, similar to how @zingleton described. In fact, my understanding is that the only major security token issuer represented was Polymath. Obviously, if we want to create a global standard we need input from players like Harbor, Securitize and TrustToken in the US, as well as European and Asian issuers like Neufund, Swarm Fund, SmartValor, Own, Blackmoon, just to name a few.\n> My proposition would be as follow:\n>\n> 1. > Create an alliance similar ERC725 alliance (https://erc725alliance.org/) where fundamentals of the standard could be discussed. (what's cool is that the audience seems to be similar including @frozeman, who has been one of our key advisors from the beginning and a prominent Neufund community member). Every project that has commented on this thread, plus everyone else we can think of, should be invited to this alliance.\n> 2. > Organize a satellite event like a workshop at Devcon4 that will be open to all of us and where we can discuss these matters as an alliance, knowing there will be good representation from all sides.\n>\n> We still have time to get this right, and to ensure everyone is heard. Let me know what you think of the above. We will also join for the call on Monday and can discuss there too.\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421418776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421420458",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421420458",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421420458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTQyMDQ1OA==",
    "user": {
      "login": "jllaw",
      "id": 5771238,
      "node_id": "MDQ6VXNlcjU3NzEyMzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5771238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jllaw",
      "html_url": "https://github.com/jllaw",
      "followers_url": "https://api.github.com/users/jllaw/followers",
      "following_url": "https://api.github.com/users/jllaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/jllaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jllaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jllaw/subscriptions",
      "organizations_url": "https://api.github.com/users/jllaw/orgs",
      "repos_url": "https://api.github.com/users/jllaw/repos",
      "events_url": "https://api.github.com/users/jllaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jllaw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T16:56:36Z",
    "updated_at": "2018-09-14T16:56:36Z",
    "author_association": "NONE",
    "body": "@rudolfix - Very good points.  For what it's worth, the Barbados event just came together very quickly when a couple like-minded people decided they wanted to meet for a common cause.  Because it was put together so suddenly, there wasn't enough time to conduct a full outreach (and it gets very, very expensive very, very quickly).  I did personally reach out to Harbor (two people there) to invite them (unfortunately, they weren't able to make it), and I believe others tried to reach out to contacts that they had closer relationships with.  As it turns out, having too big of a group might have slowed down the process of getting a draft EIP out.  However, from the very beginning, I understood that this was meant to be an open community effort embracing input from everyone, so I think this is the right community outlet for that.  Having regular calls/meetings for people to participate as well would be nice, especially of those of us who aren't technically oriented.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421420458/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421428231",
    "html_url": "https://github.com/ethereum/EIPs/issues/1411#issuecomment-421428231",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1411",
    "id": 421428231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTQyODIzMQ==",
    "user": {
      "login": "adamdossa",
      "id": 2633913,
      "node_id": "MDQ6VXNlcjI2MzM5MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2633913?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamdossa",
      "html_url": "https://github.com/adamdossa",
      "followers_url": "https://api.github.com/users/adamdossa/followers",
      "following_url": "https://api.github.com/users/adamdossa/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamdossa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamdossa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamdossa/subscriptions",
      "organizations_url": "https://api.github.com/users/adamdossa/orgs",
      "repos_url": "https://api.github.com/users/adamdossa/repos",
      "events_url": "https://api.github.com/users/adamdossa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamdossa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-14T17:25:36Z",
    "updated_at": "2018-09-14T17:25:36Z",
    "author_association": "NONE",
    "body": "@seathemc @rudolfix Completely agree this has to be a broad effort involving all stakeholders in order to get traction / adoption and ultimately advance the space as a whole.\r\n\r\nExcited to discuss this (how best to coordinate across the set of stakeholders) and other topics on the call on Monday - it would be great if as may interested parties can join as possible ;-).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/421428231/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
