{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1332",
  "id": 351646768,
  "node_id": "MDU6SXNzdWUzNTE2NDY3Njg=",
  "number": 1332,
  "title": "ERC-1332: Global Messaging Hub",
  "user": {
    "login": "trigun0x2",
    "id": 3936336,
    "node_id": "MDQ6VXNlcjM5MzYzMzY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3936336?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trigun0x2",
    "html_url": "https://github.com/trigun0x2",
    "followers_url": "https://api.github.com/users/trigun0x2/followers",
    "following_url": "https://api.github.com/users/trigun0x2/following{/other_user}",
    "gists_url": "https://api.github.com/users/trigun0x2/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trigun0x2/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trigun0x2/subscriptions",
    "organizations_url": "https://api.github.com/users/trigun0x2/orgs",
    "repos_url": "https://api.github.com/users/trigun0x2/repos",
    "events_url": "https://api.github.com/users/trigun0x2/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trigun0x2/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2018-08-17T15:51:06Z",
  "updated_at": "2021-12-18T21:12:04Z",
  "closed_at": "2021-12-18T21:12:03Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\neip: 1332\r\ntitle: Global Messaging Hubg\r\nauthor: Jeffrey Tong <hi@itsjefftong.com>\r\ndiscussions-to: this issue\r\nstatus: WIP\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-08-17\r\n```\r\n# Simple Summary\r\nThis a proposal for an open standard for smart contract to user notifications.\r\n# Abstract\r\nSmart contracts will make an external call to the message hub (will now be referred as Shout) with the appropriate data. The initial version of Shout expects these messages to be ephemeral, low cost and does not promise privacy. Third parties can then call Shout functions to retrieve messages and deliver the message to users. Third party integrations can include wallets (Metamask, Toshi), email, SMS or any other service.\r\n\r\n# Specification\r\nSmart contracts should call the Global Messaging Hub with the following:\r\n```\r\naddress to: who the message is for\r\nbyte hash/url: link of data schema. This could be IPFS, Swarm, AWS, etc. (Debatable). Please consider cost of storage, availability, and lifespan.\r\nbyte var_data: replacement of variables in the data schema with on-chain data. \r\nI.e. {name: \"bob\"}\r\n```\r\nShout expects third parties to store a local cached version of messages after they are retrieved.\r\n\r\nThere will be other functions to retrieve messages with filters and delete messages. If there’s any other valuable functions I may have missed, please include them in the comments.\r\n## Off-Chain Integration Details\r\n### Data Schema:\r\nThis is a very preliminary attempt at the schema, would love feedback. Current version is inspired by Apple’s notifications.\r\n**From:** Friendly App Name\r\n**Message:** Text message\r\n**Destination URL:** URL to direct user (i.e. TCR listing, Augur market)\r\n**Optional:** Additional data to provide better UX/UI similar to iOS. This is up to the wallet to create integrations (i.e. badge, sound).\r\n```\r\n{\r\n   \"from\": \"test-app\",\r\n   \"message\": \"Hello ${name}, your Cryptokitty has been challenged in a battle!\",\r\n   \"destination\": \"https://crypto.kitties/12313/mybattles\",\r\n   \"optional\": \"\"\r\n}\r\n\r\n```\r\n## Message Delivery:\r\nThis is heavily optional and will depend on what the user prefers.\r\nSome options:\r\nMetamask/Chrome Extensions\r\nNative wallets\r\nMobile wallets\r\nSMS\r\nEmail\r\n\r\n## User Consent:\r\nThis is up for discussion but I am in favor of user opt-in on the message delivery layer. For example, Metamask can ask an user to opt-in for notifications upon the user’s first transaction with Cryptokitties.\r\n\r\n## Ethereum Ecosystem:\r\nOlder messages will be deleted to help refund gas to the message sender and also help keep the Ethereum blockchain healthy.\r\n# Rationale\r\nCurrently, the best way for Dapps to notify users is through a centralized services that is specific to the Dapp. In truth, most Dapps do not have a method for notifying users of activities. This means users will have to constantly check the Dapps site or user off-chain services to monitor the Ethereum chain.\r\n\r\nI have proposed one central place for all smart contract to pass messages to users. This will reduce redundancy for consumers and for third party services. The Shout contract is agnostic to content and messages as the users/wallet is responsible for censoring/whitelisting messages.\r\nImplementations\r\nIn the works.\r\n# Copyright\r\nCopyright and related rights waived via CC0.\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1332/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413911409",
    "html_url": "https://github.com/ethereum/EIPs/issues/1332#issuecomment-413911409",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
    "id": 413911409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzkxMTQwOQ==",
    "user": {
      "login": "trigun0x2",
      "id": 3936336,
      "node_id": "MDQ6VXNlcjM5MzYzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3936336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trigun0x2",
      "html_url": "https://github.com/trigun0x2",
      "followers_url": "https://api.github.com/users/trigun0x2/followers",
      "following_url": "https://api.github.com/users/trigun0x2/following{/other_user}",
      "gists_url": "https://api.github.com/users/trigun0x2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trigun0x2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trigun0x2/subscriptions",
      "organizations_url": "https://api.github.com/users/trigun0x2/orgs",
      "repos_url": "https://api.github.com/users/trigun0x2/repos",
      "events_url": "https://api.github.com/users/trigun0x2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trigun0x2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T16:00:54Z",
    "updated_at": "2018-08-17T16:00:54Z",
    "author_association": "NONE",
    "body": "Requesting feedback: @danfinlay ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413911409/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413925574",
    "html_url": "https://github.com/ethereum/EIPs/issues/1332#issuecomment-413925574",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
    "id": 413925574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzkyNTU3NA==",
    "user": {
      "login": "danfinlay",
      "id": 542863,
      "node_id": "MDQ6VXNlcjU0Mjg2Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/542863?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danfinlay",
      "html_url": "https://github.com/danfinlay",
      "followers_url": "https://api.github.com/users/danfinlay/followers",
      "following_url": "https://api.github.com/users/danfinlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/danfinlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danfinlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danfinlay/subscriptions",
      "organizations_url": "https://api.github.com/users/danfinlay/orgs",
      "repos_url": "https://api.github.com/users/danfinlay/repos",
      "events_url": "https://api.github.com/users/danfinlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danfinlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-17T16:52:28Z",
    "updated_at": "2018-08-17T16:52:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @trigun0x2!\r\n\r\nI like how you've kept \"what gets delivered\" very open ended, and so I guess a lot of the final spec will fall on different clients to define how they deliver messages. I basically agree with the idea you've laid out, a new permission Dapps can request, for the client to track its messages.\r\n\r\nAs for the message schema, I know platforms can vary a lot as far as what they allow, like some can include an image, and some can include multiple buttons. Maybe this could just mean keeping some optional keys on there, like `image`, where you will hit some of the same challenges [we're addressing in EIP 747, to keep image formats platform agnostic](https://ethereum-magicians.org/t/eip-747-eth-watchtoken/1048).\r\n\r\nI notice you're also using some templating in the message field. I'm wondering where you'd get these variables from. Maybe this would be something like [Aragon's Radspec](https://github.com/aragon/radspec) or [Mist's Moon Language](https://www.ethnews.com/moon-updated-ethereum-browser-unveiled-at-devcon3), but in general I don't think templating on the blockchain has been quite solved yet, so I might leave that for a future extension of the proposal, since I'm not sure there's a great solution right now.\r\n\r\nOther than that, looks good, I think this could add a lot of async interactivity to blockchain applications.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/413925574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/416622315",
    "html_url": "https://github.com/ethereum/EIPs/issues/1332#issuecomment-416622315",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
    "id": 416622315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjYyMjMxNQ==",
    "user": {
      "login": "lsaether",
      "id": 25539605,
      "node_id": "MDQ6VXNlcjI1NTM5NjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/25539605?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsaether",
      "html_url": "https://github.com/lsaether",
      "followers_url": "https://api.github.com/users/lsaether/followers",
      "following_url": "https://api.github.com/users/lsaether/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsaether/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsaether/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsaether/subscriptions",
      "organizations_url": "https://api.github.com/users/lsaether/orgs",
      "repos_url": "https://api.github.com/users/lsaether/repos",
      "events_url": "https://api.github.com/users/lsaether/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsaether/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-28T15:06:08Z",
    "updated_at": "2018-08-28T15:06:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "This reminds me of an old PoC of an[ Emailer smart contract ](https://github.com/lsaether/Emailer.sol/blob/master/Emailer.sol)I put together a while ago. The idea was that it would enable someone to set up a server which would watch for events from the Emailer contract and send an email with the message in the log. The fields that I used for this were `sender`, `recipient` and `msg`. I see that you've included an `optional` filed on top of these which I generally agree with. \r\n\r\nHowever, I'm wondering what the purpose of defining a standard would be instead of allowing DApp developers to implement their own notification systems. Could you provide some examples?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/416622315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/417026906",
    "html_url": "https://github.com/ethereum/EIPs/issues/1332#issuecomment-417026906",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
    "id": 417026906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzAyNjkwNg==",
    "user": {
      "login": "trigun0x2",
      "id": 3936336,
      "node_id": "MDQ6VXNlcjM5MzYzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3936336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trigun0x2",
      "html_url": "https://github.com/trigun0x2",
      "followers_url": "https://api.github.com/users/trigun0x2/followers",
      "following_url": "https://api.github.com/users/trigun0x2/following{/other_user}",
      "gists_url": "https://api.github.com/users/trigun0x2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trigun0x2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trigun0x2/subscriptions",
      "organizations_url": "https://api.github.com/users/trigun0x2/orgs",
      "repos_url": "https://api.github.com/users/trigun0x2/repos",
      "events_url": "https://api.github.com/users/trigun0x2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trigun0x2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-29T16:57:25Z",
    "updated_at": "2018-08-29T16:57:25Z",
    "author_association": "NONE",
    "body": "@lsaether the benefit of a standard if mostly for the third-party services that deliver the message to the user.\r\nFor example: Metamask can now have a central hub for all the messages such that it is much easier to fetch/delete messages.\r\nThe final goal here is that any ETH dev can tap into these last mile notification services by just adding a line into their smart contract code.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/417026906/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/417028489",
    "html_url": "https://github.com/ethereum/EIPs/issues/1332#issuecomment-417028489",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
    "id": 417028489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzAyODQ4OQ==",
    "user": {
      "login": "trigun0x2",
      "id": 3936336,
      "node_id": "MDQ6VXNlcjM5MzYzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3936336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trigun0x2",
      "html_url": "https://github.com/trigun0x2",
      "followers_url": "https://api.github.com/users/trigun0x2/followers",
      "following_url": "https://api.github.com/users/trigun0x2/following{/other_user}",
      "gists_url": "https://api.github.com/users/trigun0x2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trigun0x2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trigun0x2/subscriptions",
      "organizations_url": "https://api.github.com/users/trigun0x2/orgs",
      "repos_url": "https://api.github.com/users/trigun0x2/repos",
      "events_url": "https://api.github.com/users/trigun0x2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trigun0x2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-29T17:01:59Z",
    "updated_at": "2018-08-29T17:01:59Z",
    "author_association": "NONE",
    "body": "@danfinlay Thanks a lot of the feedback!\r\nWith regards to message schema, I was hoping the `optional` field would take care of most app specific cases and I've only included what I believe is core to all messages.\r\nAfter chatting with @expede, I may make some changes on the template storage side of things. Integration with Radspec would be great, I have to chat with Aragon a bit more. My current solution allows the third party \"final mile\" message delivery services (such as MetaMask) to do the final interpolation. On chain templating is doable but I haven't explored the issues yet.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/417028489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/493630992",
    "html_url": "https://github.com/ethereum/EIPs/issues/1332#issuecomment-493630992",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
    "id": 493630992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MzYzMDk5Mg==",
    "user": {
      "login": "fulldecent",
      "id": 382183,
      "node_id": "MDQ6VXNlcjM4MjE4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fulldecent",
      "html_url": "https://github.com/fulldecent",
      "followers_url": "https://api.github.com/users/fulldecent/followers",
      "following_url": "https://api.github.com/users/fulldecent/following{/other_user}",
      "gists_url": "https://api.github.com/users/fulldecent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fulldecent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fulldecent/subscriptions",
      "organizations_url": "https://api.github.com/users/fulldecent/orgs",
      "repos_url": "https://api.github.com/users/fulldecent/repos",
      "events_url": "https://api.github.com/users/fulldecent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fulldecent/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-18T00:05:22Z",
    "updated_at": "2019-05-18T00:05:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here is a much cheaper implementation of the ideas in this proposal.\r\n\r\nStandardize a convention for capturing account-targeted messages. Do this as an event.\r\n\r\n```solidity\r\nemit ShoutToAccount(indexed account recipient, string message);\r\n```\r\n\r\nWhen the client logs in then they can scan the blockchain for all events from any contract that have this type of event. Then they. record the last scanned block number. Then next time they resume searching from that block.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/493630992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/493631725",
    "html_url": "https://github.com/ethereum/EIPs/issues/1332#issuecomment-493631725",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
    "id": 493631725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MzYzMTcyNQ==",
    "user": {
      "login": "trigun0x2",
      "id": 3936336,
      "node_id": "MDQ6VXNlcjM5MzYzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3936336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trigun0x2",
      "html_url": "https://github.com/trigun0x2",
      "followers_url": "https://api.github.com/users/trigun0x2/followers",
      "following_url": "https://api.github.com/users/trigun0x2/following{/other_user}",
      "gists_url": "https://api.github.com/users/trigun0x2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trigun0x2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trigun0x2/subscriptions",
      "organizations_url": "https://api.github.com/users/trigun0x2/orgs",
      "repos_url": "https://api.github.com/users/trigun0x2/repos",
      "events_url": "https://api.github.com/users/trigun0x2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trigun0x2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-18T00:11:42Z",
    "updated_at": "2019-05-18T00:11:42Z",
    "author_association": "NONE",
    "body": "> Here is a much cheaper implementation of the ideas in this proposal.\r\n> \r\n> Standardize a convention for capturing account-targeted messages. Do this as an event.\r\n> \r\n> ```solidity\r\n> emit ShoutToAccount(indexed account recipient, string message);\r\n> ```\r\n> \r\n> When the client logs in then they can scan the blockchain for all events from any contract that have this type of event. Then they. record the last scanned block number. Then next time they resume searching from that block.\r\n\r\nThis was the original implementation but due to the nature of MetaMask at the time, it was not ensured that all events will be accounted for. Therefore the implementation I mentioned above.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/493631725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093455",
    "html_url": "https://github.com/ethereum/EIPs/issues/1332#issuecomment-986093455",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
    "id": 986093455,
    "node_id": "IC_kwDOAq426M46xpeP",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:11:31Z",
    "updated_at": "2021-12-04T21:11:31Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285344",
    "html_url": "https://github.com/ethereum/EIPs/issues/1332#issuecomment-997285344",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1332",
    "id": 997285344,
    "node_id": "IC_kwDOAq426M47cV3g",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T21:12:03Z",
    "updated_at": "2021-12-18T21:12:03Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285344/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
