{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1207",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1207",
  "id": 339813847,
  "node_id": "MDU6SXNzdWUzMzk4MTM4NDc=",
  "number": 1207,
  "title": "ERC-1207 DAuth Access Delegation Standard",
  "user": {
    "login": "wxygeek",
    "id": 5866643,
    "node_id": "MDQ6VXNlcjU4NjY2NDM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5866643?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wxygeek",
    "html_url": "https://github.com/wxygeek",
    "followers_url": "https://api.github.com/users/wxygeek/followers",
    "following_url": "https://api.github.com/users/wxygeek/following{/other_user}",
    "gists_url": "https://api.github.com/users/wxygeek/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wxygeek/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wxygeek/subscriptions",
    "organizations_url": "https://api.github.com/users/wxygeek/orgs",
    "repos_url": "https://api.github.com/users/wxygeek/repos",
    "events_url": "https://api.github.com/users/wxygeek/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wxygeek/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-07-10T12:08:38Z",
  "updated_at": "2021-12-18T21:12:24Z",
  "closed_at": "2021-12-18T21:12:24Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\neip: 1207\r\ntitle: DAuth Access Delegation Standard\r\nauthor: Xiaoyu Wang (@wxygeek), Bicong Wang (@Wangbicong)\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/1207\r\nstatus: Draft\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2018-07-10\r\n```\r\n\r\nDAuth Access Delegation Standard\r\n===\r\n\r\n## Simple Summary\r\nDAuth is a standard interface for accessing authorization delegation between smart contracts and users.\r\n\r\n## Abstract\r\nThe DAuth protocol defines a set of standard API allowing identity delegations between smart contracts without the user's private key.  Identity delegations include accessing and operating a user's data and assets contained in the delegated contracts.\r\n\r\n## Motivation\r\nThe inspiration for designing DAuth comes from OAuth protocol that is extensively used in web applications. But unlike the centralized authorization of OAuth, DAuth works in a  distributed manner, thus providing much more reliability and generality.\r\n\r\n## Specification\r\n![Rationale](https://raw.githubusercontent.com/DIA-Network/ERC-DAuth/master/rationale.png)\r\n\r\n**Resource owner**: the authorizer\r\n\r\n**Resource contract**: the contract providing data and operators\r\n\r\n**API**: the resource contract APIs that the grantee contract can invoke\r\n\r\n**Client contract**: the grantee contract using authorization to access and operate the data\r\n\r\n**Grantee request**: the client contract calls the resource contract with the authorizer authorization\r\n\r\n\r\n**AuthInfo**\r\n``` js\r\nstruct AuthInfo {\r\n    string[] funcNames;\r\n    uint expireAt;\r\n}\r\n```\r\nRequired - The struct contains user authorization information\r\n* `funcNames`: a list of function names callable by the granted contract\r\n* `expireAt`: the authorization expire timestamp in seconds\r\n\r\n**userAuth**\r\n```  js\r\nmapping(address => mapping(address => AuthInfo)) userAuth;\r\n```\r\nRequired - userAuth maps (authorizer address, grantee contract address) pair to the user’s authorization AuthInfo object\r\n\r\n**callableFuncNames**\r\n```  js\r\nstring[] callableFuncNames;\r\n```\r\nRequired - All methods that are allowed other contracts to call\r\n* The callable function MUST verify the grantee’s authorization\r\n\r\n**updateCallableFuncNames**\r\n```  js\r\nfunction updateCallableFuncNames(string _invokes) public returns (bool success);\r\n```\r\nOptional - Update the callable function list for the client contract by the resource contract's administrator\r\n* `_invokes`: the invoke methods that the client contract can call\r\n* return: Whether the callableFuncNames is updated or not\r\n* This method MUST return success or throw, no other outcomes can be possible\r\n\r\n**verify**\r\n```  js\r\nfunction verify(address _authorizer, string _invoke) internal returns (bool success);\r\n```\r\nRequired - check the invoke method authority for the client contract\r\n* `_authorizer`: the user address that the client contract agents\r\n* `_invoke`: the invoke method that the client contract wants to call\r\n* return: Whether the grantee request is authorized or not\r\n* This method MUST return success or throw, no other outcomes can be possible\r\n\r\n**grant**\r\n```  js\r\nfunction grant(address _grantee, string _invokes, uint _expireAt) public returns (bool success);\r\n```\r\nRequired - delegate a client contract to access the user's resource\r\n* `_grantee`: the client contract address\r\n* `_invokes`: the callable methods that the client contract can access. It is a string which contains all function names split by spaces\r\n* `_expireAt`: the authorization expire timestamp in seconds\r\n* return: Whether the grant is successful or not\r\n* This method MUST return success or throw, no other outcomes can be possible\r\n* A successful grant MUST fire the Grant event(defined below)\r\n\r\n**regrant**\r\n```  js\r\nfunction regrant(address _grantee, string _invokes, uint _expireAt) public returns (bool success);\r\n```\r\nOptional - alter a client contract's delegation\r\n\r\n**revoke**\r\n```  js\r\nfunction revoke(address _grantee) public returns (bool success);\r\n```\r\nRequired - delete a client contract's delegation\r\n* `_grantee`: the client contract address\r\n* return: Whether the revoke is successful or not\r\n* A successful revoke MUST fire the Revoke event(defined below).\r\n\r\n**Grant**\r\n```  js\r\nevent Grant(address _authorizer, address _grantee, string _invokes, uint _expireAt);\r\n```\r\n* This event MUST trigger when the authorizer grant a new authorization when `grant` or `regrant` processes successfully\r\n\r\n**Revoke**\r\n```  js\r\nevent Revoke(address _authorizer, address _grantee);\r\n```\r\n* This event MUST trigger when the authorizer revoke a specific authorization successfully\r\n\r\n**Callable Resource Contract Functions**\r\n\r\nAll public or external functions that are allowed the grantee to call MUST use overload to implement two functions: The First one is the standard method that the user invokes directly, the second one is the grantee methods of the same function name with one more authorizer address parameter.\r\n\r\nExample:\r\n```  js\r\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n    return _approve(msg.sender, _spender, _value);\r\n}\r\n\r\nfunction approve(address _spender, uint256 _value, address _authorizer) public returns (bool success) {\r\n    verify(_authorizer, \"approve\");\r\n\r\n    return _approve(_authorizer, _spender, _value);\r\n}\r\n\r\nfunction _approve(address sender, address _spender, uint256 _value) internal returns (bool success) {\r\n    allowed[sender][_spender] = _value;\r\n    emit Approval(sender, _spender, _value);\r\n    return true;\r\n}\r\n```\r\n\r\n## Rationale\r\n\r\n**Current Limitations**\r\n\r\nThe current design of many smart contracts only considers the user invokes the smart contract functions by themselves using the private key. However, in some case, the user wants to delegate other client smart contracts to access and operate their data or assets in the resource smart contract. There isn’t a common protocol to provide a standard delegation approach.\r\n\r\n**Rationale**\r\n\r\nOn the Ethereum platform, all storage is transparent and the `msg.sender` is reliable. Therefore, the DAuth don't need an `access_token` like OAuth. DAuth just recodes the users' authorization for the specific client smart contract's address. It is simple and reliable on the Ethereum platform.\r\n\r\n## Backwards Compatibility\r\nThis EIP introduces no backward compatibility issues.\r\n\r\n## Implementation\r\nFollowing is the DAuth Interface implementation. Furthermore, the example implementations of EIP20 Interface and ERC-DAuth Interface are also provided. Developers can easily implement their own contracts with ERC-DAuth Interface and other EIP.\r\n\r\n* ERC-DAuth Interface implementation is available at:\r\n\r\n  https://github.com/DIA-Network/ERC-DAuth/blob/master/ERC-DAuth-Interface.sol\r\n\r\n* Example implementation with EIP20 Interface and ERC-DAuth Interface is available at:\r\n\r\n  https://github.com/DIA-Network/ERC-DAuth/blob/master/eip20-dauth-example/EIP20DAuth.sol\r\n\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1207/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/403914718",
    "html_url": "https://github.com/ethereum/EIPs/issues/1207#issuecomment-403914718",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207",
    "id": 403914718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzkxNDcxOA==",
    "user": {
      "login": "xinbenlv",
      "id": 640325,
      "node_id": "MDQ6VXNlcjY0MDMyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/640325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xinbenlv",
      "html_url": "https://github.com/xinbenlv",
      "followers_url": "https://api.github.com/users/xinbenlv/followers",
      "following_url": "https://api.github.com/users/xinbenlv/following{/other_user}",
      "gists_url": "https://api.github.com/users/xinbenlv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xinbenlv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xinbenlv/subscriptions",
      "organizations_url": "https://api.github.com/users/xinbenlv/orgs",
      "repos_url": "https://api.github.com/users/xinbenlv/repos",
      "events_url": "https://api.github.com/users/xinbenlv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xinbenlv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-10T18:05:37Z",
    "updated_at": "2018-07-10T18:08:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess you don't have to change to title per PR. But it's fine. \r\n\r\nGood idea. DAuth is a long waited standard~ \r\n\r\n1. I wounder if it should be incorporated with the #721 as an identity can also be considered an individual NFT and by showing and validating the ownership of that NFT, you can grant delegration and access. \r\nThus any rental NFT standards / multi-class NFT standards can be considered.\r\n\r\n2. In section \"backward compatibility\" I will suggest remove the sentence `In the future, the new version protocol has to keep these interfaces.` as it's what all API designer wishes but also very challenging to keep it. It's to the future API standard designer to decide whether their new proposal will adhere to the existing standard.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/403914718/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/404992533",
    "html_url": "https://github.com/ethereum/EIPs/issues/1207#issuecomment-404992533",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207",
    "id": 404992533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk5MjUzMw==",
    "user": {
      "login": "bicongwang",
      "id": 8849919,
      "node_id": "MDQ6VXNlcjg4NDk5MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8849919?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bicongwang",
      "html_url": "https://github.com/bicongwang",
      "followers_url": "https://api.github.com/users/bicongwang/followers",
      "following_url": "https://api.github.com/users/bicongwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/bicongwang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bicongwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bicongwang/subscriptions",
      "organizations_url": "https://api.github.com/users/bicongwang/orgs",
      "repos_url": "https://api.github.com/users/bicongwang/repos",
      "events_url": "https://api.github.com/users/bicongwang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bicongwang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-14T02:32:54Z",
    "updated_at": "2018-07-20T03:31:34Z",
    "author_association": "NONE",
    "body": "@xinbenlv \r\nThanks for your sincere suggestions. And I also have some thoughts about these advice.\r\n\r\n1. I think incorporation with an individual NFT and an authority is a good and fancy idea, and therefore every authority can belong to a token. But I wonder if it is appropriate to equal an authority to a token, because in authorization mechanism, the origin user have the highest (possibly the only) access to his authorization. We maybe not want our authorization to transfer twice or more.\r\n2. It is a fact that section \"backward compatibility\" is a little bit rough,  so we believe your suggestion is useful and will modify this section soon.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/404992533/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/405543933",
    "html_url": "https://github.com/ethereum/EIPs/issues/1207#issuecomment-405543933",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207",
    "id": 405543933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTU0MzkzMw==",
    "user": {
      "login": "Arachnid",
      "id": 17865,
      "node_id": "MDQ6VXNlcjE3ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/17865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arachnid",
      "html_url": "https://github.com/Arachnid",
      "followers_url": "https://api.github.com/users/Arachnid/followers",
      "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
      "organizations_url": "https://api.github.com/users/Arachnid/orgs",
      "repos_url": "https://api.github.com/users/Arachnid/repos",
      "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arachnid/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-17T11:02:19Z",
    "updated_at": "2018-07-17T11:02:19Z",
    "author_association": "MEMBER",
    "body": "Have you looked at https://eips.ethereum.org/EIPS/eip-927?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/405543933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406478496",
    "html_url": "https://github.com/ethereum/EIPs/issues/1207#issuecomment-406478496",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207",
    "id": 406478496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ3ODQ5Ng==",
    "user": {
      "login": "bicongwang",
      "id": 8849919,
      "node_id": "MDQ6VXNlcjg4NDk5MTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8849919?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bicongwang",
      "html_url": "https://github.com/bicongwang",
      "followers_url": "https://api.github.com/users/bicongwang/followers",
      "following_url": "https://api.github.com/users/bicongwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/bicongwang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bicongwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bicongwang/subscriptions",
      "organizations_url": "https://api.github.com/users/bicongwang/orgs",
      "repos_url": "https://api.github.com/users/bicongwang/repos",
      "events_url": "https://api.github.com/users/bicongwang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bicongwang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T03:27:22Z",
    "updated_at": "2018-07-20T03:27:22Z",
    "author_association": "NONE",
    "body": "@Arachnid \r\nI believe we are trying to tackle the same issue here, i.e. generalised authorisations.\r\n\r\nIn eip-927, a metadata registry contract is needed for the verification process. In eip-1207 we take a different approach by coupling functional interface with DAuth interface, as seen in [EIP20DAuth](https://github.com/DIA-Network/ERC-DAuth/blob/master/eip20-dauth-example/EIP20DAuth.sol).\r\n\r\nWe are totally open for discussion and looking forward to hear feedbacks from the community.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406478496/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093566",
    "html_url": "https://github.com/ethereum/EIPs/issues/1207#issuecomment-986093566",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207",
    "id": 986093566,
    "node_id": "IC_kwDOAq426M46xpf-",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-04T21:12:12Z",
    "updated_at": "2021-12-04T21:12:12Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/986093566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285398",
    "html_url": "https://github.com/ethereum/EIPs/issues/1207#issuecomment-997285398",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1207",
    "id": 997285398,
    "node_id": "IC_kwDOAq426M47cV4W",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-12-18T21:12:23Z",
    "updated_at": "2021-12-18T21:12:23Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/997285398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
