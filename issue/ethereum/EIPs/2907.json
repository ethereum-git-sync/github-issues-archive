{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2907",
  "id": 685963804,
  "node_id": "MDU6SXNzdWU2ODU5NjM4MDQ=",
  "number": 2907,
  "title": "Discussion for EIP-2981: NFT Royalty Standard",
  "user": {
    "login": "VexyCats",
    "id": 17414704,
    "node_id": "MDQ6VXNlcjE3NDE0NzA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/VexyCats",
    "html_url": "https://github.com/VexyCats",
    "followers_url": "https://api.github.com/users/VexyCats/followers",
    "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
    "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
    "organizations_url": "https://api.github.com/users/VexyCats/orgs",
    "repos_url": "https://api.github.com/users/VexyCats/repos",
    "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
    "received_events_url": "https://api.github.com/users/VexyCats/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 670,
  "created_at": "2020-08-26T02:53:06Z",
  "updated_at": "2023-02-08T18:30:42Z",
  "closed_at": "2022-06-10T08:32:39Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "TL;DR - ERC721s have a ton of creators and a few marketplaces, but no accepted means for transferring royalties from items being sold multiple times on secondary sales. This EIP is proposing a standard method that can be implemented by all marketplaces easily. \r\n\r\n\r\n```\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC721Royalties {\r\n    \r\n    \r\n    /**\r\n    @notice This event is emitted when royalties are received.\r\n\r\n    @dev The marketplace would call royaltiesRecieved() function so that the NFT contracts emits this event.\r\n\r\n    @param creator The original creator of the NFT entitled to the royalties\r\n    @param buyer The person buying the NFT on a secondary sale\r\n    @param amount The amount being paid to the creator\r\n  */\r\n    event RecievedRoyalties (address indexed creator, address indexed buyer, uint256 indexed amount);\r\n    \r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n    \r\n     /**\r\n     * @dev Returns true if implemented\r\n     * \r\n     * @dev this is how the marketplace can see if the contract has royalties, other than using the supportsInterface() call.\r\n     */\r\n    function hasRoyalties() external view returns (bool);\r\n\r\n     /**\r\n     * @dev Returns uint256 of the amount of percentage the royalty is set to. For example, if 1%, would return \"1\", if 50%, would return \"50\"\r\n     * \r\n     * @dev Marketplaces would need to call this during the purchase function of their marketplace - and then implement the transfer of that amount on their end\r\n     */\r\n    function royaltyAmount() external view returns (uint256);\r\n    \r\n      /**\r\n     * @dev Returns royalty amount as uint256 and address where royalties should go. \r\n     * \r\n     * @dev Marketplaces would need to call this during the purchase function of their marketplace - and then implement the transfer of that amount on their end\r\n     */\r\n    function royaltyInfo() external view returns (uint256, address);\r\n    \r\n      /**\r\n     * @dev Called by the marketplace after the transfer of royalties has happened, so that the contract has a record \r\n     * @dev emits RecievedRoyalties event;\r\n     * \r\n     * @param _creator The original creator of the NFT entitled to the royalties\r\n     * @param _buyer The person buying the NFT on a secondary sale\r\n     * @param _amount The amount being paid to the creator\r\n     */\r\n    function royaltiesRecieved(address _creator, address _buyer, uint256 _amount) external view;\r\n}\r\n```\r\n\r\n\r\nFlow: (just suggestions, can be implemented however you like)\r\n\r\n*Constructor/deployment*\r\n\r\nCreator - the person who gets the royalties for secondary sales is set. \r\nRoyalty Amount - the percentage amount that the creator gets on each sale, is set. \r\n\r\n*NFT sold on marketplace*\r\n\r\nMarketplace checks  if the NFT being sold has royalties implemented - if so, call royaltyInfo() to get the amount and the creator's address. \r\n\r\nCalculates the amount needed to be transferred and then executes that transfer. \r\n\r\nCalls royaltiesRecieved() so that the NFT contract has a record of receiving the funds during a sale. \r\n\r\n\r\n\r\n---\r\n\r\n\r\n\r\nThoughts? Anything that should be added or removed to make it easier to be implemented? \r\n\r\nThe logical code looks something like this: \r\n\r\n```\r\nabstract contract Royalties {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    uint256 private royalty_amount;\r\n    address private creator;\r\n \r\n    /**\r\n    @notice This event is emitted when royalties are transfered.\r\n\r\n    @dev The marketplace would emit this event from their contracts. Or they would call royaltiesRecieved() function.\r\n\r\n    @param creator The original creator of the NFT entitled to the royalties\r\n    @param buyer The person buying the NFT on a secondary sale\r\n    @param amount The amount being paid to the creator\r\n  */\r\n \r\n  event RecievedRoyalties (address indexed creator, address indexed buyer, uint256 indexed amount);\r\n    constructor (uint256 _amount, address _creator) internal {\r\n        royalty_amount = _amount;\r\n        creator = _creator;\r\n    }\r\n\r\n    \r\n    function hasRoyalties() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n\r\n    function royaltyAmount() public view returns (uint256) {\r\n        return royalty_amount;\r\n    }\r\n    \r\n    function royaltyInfo() external view returns (uint256, address){\r\n        return (royalty_amount, creator);\r\n    }\r\n    \r\n    function royaltiesRecieved(address _creator, address _buyer, uint256 _amount) external {\r\n        emit RecievedRoyalties(_creator, _buyer, _amount);\r\n    }\r\n}\r\n```\r\n",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2907/reactions",
    "total_count": 61,
    "+1": 10,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 34,
    "rocket": 17,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680497305",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-680497305",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 680497305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDQ5NzMwNQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T03:26:32Z",
    "updated_at": "2020-08-26T03:26:32Z",
    "author_association": "MEMBER",
    "body": "What stops people from just transferring the asset via a wrapper to avoid paying on-transfer royalties?  Perhaps time based royalties would be better, as those cannot be avoided (essentially, you are renting the asset rather than buying it).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680497305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680522180",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-680522180",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 680522180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDUyMjE4MA==",
    "user": {
      "login": "VexyCats",
      "id": 17414704,
      "node_id": "MDQ6VXNlcjE3NDE0NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VexyCats",
      "html_url": "https://github.com/VexyCats",
      "followers_url": "https://api.github.com/users/VexyCats/followers",
      "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
      "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
      "organizations_url": "https://api.github.com/users/VexyCats/orgs",
      "repos_url": "https://api.github.com/users/VexyCats/repos",
      "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VexyCats/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T03:44:16Z",
    "updated_at": "2020-08-26T03:45:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MicahZoltu there is no implementation for on-transfer royalties. The NFT marketplace that facilities the trade would be the one who is doing the transfer of funds. \r\n\r\nSo the smart contracts for something like Opensea, or Mintable, would facilitate the sell, and during the function handling the sell and transfer from seller to buyer, it would check if there are royalties and if so - send the % of the sale to the creator. \r\n\r\nThis means that using a wrapper doesn't really work, as wrapping a NFT would change the information on most NFT marketplaces - such that your game item from say Gods Unchained, would not be under the same contract as all Gods Unchained items. (although this is mainly for artwork and other content not gods unchained cards, but the example still applies - wrapping an NFT would change how its displayed on marketplaces and most likely deter buyers, and/or be flagged by the marketplace as a scam/fake ). \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680522180/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680528323",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-680528323",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 680528323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDUyODMyMw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T03:48:44Z",
    "updated_at": "2020-08-26T03:48:44Z",
    "author_association": "MEMBER",
    "body": "Would participation be voluntary by OpenSea or Mintable then?  If so, why is a standard necessary?  Is it just to provide a common mechanism by which individual NFTs can advertise their *requested* royalty rate?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680528323/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680531933",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-680531933",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 680531933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDUzMTkzMw==",
    "user": {
      "login": "VexyCats",
      "id": 17414704,
      "node_id": "MDQ6VXNlcjE3NDE0NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VexyCats",
      "html_url": "https://github.com/VexyCats",
      "followers_url": "https://api.github.com/users/VexyCats/followers",
      "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
      "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
      "organizations_url": "https://api.github.com/users/VexyCats/orgs",
      "repos_url": "https://api.github.com/users/VexyCats/repos",
      "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VexyCats/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T03:51:16Z",
    "updated_at": "2020-08-26T03:54:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, participation is voluntary - just as following the ERC165 standard is voluntary. \r\n\r\nCurrently there are 3 NFT marketplaces that all use different formats of royalties and one NFT on one marketplace with royalties, does not get seen/abided by on others. \r\n\r\nThis proposal is simply a standard way to implement royalties that each marketplace can use, so that NFTs with royalties can be accepted across all marketplaces. \r\n\r\nOf course if the marketplace chooses not to accept royalties that have been implemented then there is nothing that creator can do, other than not use that marketplace (but doesn't stop others from selling the NFT on there after purchase). \r\n\r\nHence the need for a standard way to implement royalties that can be accepted across the board. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680531933/reactions",
      "total_count": 10,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680543361",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-680543361",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 680543361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDU0MzM2MQ==",
    "user": {
      "login": "VexyCats",
      "id": 17414704,
      "node_id": "MDQ6VXNlcjE3NDE0NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VexyCats",
      "html_url": "https://github.com/VexyCats",
      "followers_url": "https://api.github.com/users/VexyCats/followers",
      "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
      "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
      "organizations_url": "https://api.github.com/users/VexyCats/orgs",
      "repos_url": "https://api.github.com/users/VexyCats/repos",
      "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VexyCats/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T03:59:14Z",
    "updated_at": "2020-08-26T03:59:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "If anyone has a suggestion on an implementation for \r\n\r\n`function royaltiesRecieved(address _creator, address _buyer, uint256 _amount) external view;`\r\n\r\nPlease let me know - currently, it emits the event `RecievedRoyalties` but on testing, I realized its public and anyone can spam that event with fake data. \r\n\r\nSince most marketplaces do not send ETH via calling the method and sending ETH in the same call - making it payable and checking the `msg.value` also isn't a good way. \r\n\r\nOpen to suggestions.... it doesn't NEED to be included actually, its just a nice way for the creator/others to see that royalties have been received based off secondary sales, which otherwise would be hard to identify ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/680543361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693221234",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-693221234",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 693221234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzIyMTIzNA==",
    "user": {
      "login": "martinkrung",
      "id": 918180,
      "node_id": "MDQ6VXNlcjkxODE4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/918180?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinkrung",
      "html_url": "https://github.com/martinkrung",
      "followers_url": "https://api.github.com/users/martinkrung/followers",
      "following_url": "https://api.github.com/users/martinkrung/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinkrung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinkrung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinkrung/subscriptions",
      "organizations_url": "https://api.github.com/users/martinkrung/orgs",
      "repos_url": "https://api.github.com/users/martinkrung/repos",
      "events_url": "https://api.github.com/users/martinkrung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinkrung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T07:15:12Z",
    "updated_at": "2020-09-16T07:20:44Z",
    "author_association": "NONE",
    "body": "I have background in art, and a standard for royalties would be critical for market adoption. This would be a big shift for artist. Because even successful artist do not get any share if their work is resold in the secondary market. \r\n\r\nThey sell cheap when they are unknown and if they have success all the others are making a fortune out of it. I even think this would lead to better quality. Because many artists tend to get in a loop and produce more of the same: the market wants recognizable art, and they need to make a living out of it, so they end up delivering the same shit over and over again. \r\n\r\nI did some research like 20 years back and this is only partly true. For most small-town artist there is no secondary market anyway. But crypto may change this.\r\n\r\nAnd about wrapping: If NFT are really used in the high roll art market not respect the royalties will not happen, because nobody will buy something with shady legal background.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693221234/reactions",
      "total_count": 6,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693285054",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-693285054",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 693285054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzI4NTA1NA==",
    "user": {
      "login": "jamesmorgan",
      "id": 110869,
      "node_id": "MDQ6VXNlcjExMDg2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/110869?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesmorgan",
      "html_url": "https://github.com/jamesmorgan",
      "followers_url": "https://api.github.com/users/jamesmorgan/followers",
      "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
      "repos_url": "https://api.github.com/users/jamesmorgan/repos",
      "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T09:22:20Z",
    "updated_at": "2020-09-16T09:22:20Z",
    "author_association": "NONE",
    "body": "Hi everyone, a few thoughts on the standard and some use cases which may help:\r\n\r\n- It would be good to open the query methods up to be on a per token basis, some tokens may have different royalties than others and it may not be a platform wide fix %. Also if its per token the recipient address can be defined which may be a multi-sig or another construct which would allow joint access to it if the token is a collaborator. \r\n\r\n- It would be good to allow a list of recipients - often tokens are part of a collaboration and may nee the funds splitting up between a list of people. \r\n\r\nStandards are great, thanks for driving this initiative. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693285054/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693418619",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-693418619",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 693418619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzQxODYxOQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T13:50:05Z",
    "updated_at": "2020-09-16T13:50:05Z",
    "author_association": "MEMBER",
    "body": "> Open to suggestions.... it doesn't NEED to be included actually, its just a nice way for the creator/others to see that royalties have been received based off secondary sales, which otherwise would be hard to identify\r\n\r\nGiven that it can be spoofed maliciously, I would just remove it.  Apps will have to do other things to monitor royalty payments.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693418619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693419360",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-693419360",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 693419360,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzQxOTM2MA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T13:51:14Z",
    "updated_at": "2020-09-16T13:51:14Z",
    "author_association": "MEMBER",
    "body": "Consider renaming `creator` to `royaltyRecipient` in the code for clarity.  Royalty recipient should probably be transferable in most cases, and so `creator` isn't really accurate.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693419360/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693656206",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-693656206",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 693656206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzY1NjIwNg==",
    "user": {
      "login": "dievardump",
      "id": 1753113,
      "node_id": "MDQ6VXNlcjE3NTMxMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1753113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dievardump",
      "html_url": "https://github.com/dievardump",
      "followers_url": "https://api.github.com/users/dievardump/followers",
      "following_url": "https://api.github.com/users/dievardump/following{/other_user}",
      "gists_url": "https://api.github.com/users/dievardump/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dievardump/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dievardump/subscriptions",
      "organizations_url": "https://api.github.com/users/dievardump/orgs",
      "repos_url": "https://api.github.com/users/dievardump/repos",
      "events_url": "https://api.github.com/users/dievardump/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dievardump/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T20:46:52Z",
    "updated_at": "2020-09-16T20:53:00Z",
    "author_association": "NONE",
    "body": "What about a\r\n\r\n`payRoyalties(address _royaltyRecipient, address _buyer) payable` \r\n\r\nthat will actually perform a check that there is a `value` sent and redirect to  `_creator`.\r\nIt would also fire the event `RecievedRoyalties`, to which I would personaly also add the `caller`, helping to identify what contract actually did the royalties payment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693656206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693756662",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-693756662",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 693756662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5Mzc1NjY2Mg==",
    "user": {
      "login": "VexyCats",
      "id": 17414704,
      "node_id": "MDQ6VXNlcjE3NDE0NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VexyCats",
      "html_url": "https://github.com/VexyCats",
      "followers_url": "https://api.github.com/users/VexyCats/followers",
      "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
      "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
      "organizations_url": "https://api.github.com/users/VexyCats/orgs",
      "repos_url": "https://api.github.com/users/VexyCats/repos",
      "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VexyCats/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T01:41:40Z",
    "updated_at": "2020-09-17T01:41:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Will rename creator to `royaltyRecipient. \r\n\r\n@dievardump - there is no way to check for a value other than if that value is over the lowest amount possible. As the contract doesn't know what the NFT sold for, and therefore doesn't know how much royalties should be transferred. Unless you have an alternative suggestion? \r\n\r\nAlso since the marketplace contract is already transferring funds from the buyer to the seller - I believe its best to leave that responsibility on them and not the standard `to transfer the actual royalty payment. \r\n\r\n@MicahZoltu  For the event - what about a requirement that the marketplace must emit that event if they follow the standard? That would be the only requirement that they would need to follow in using this standard? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693756662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693796933",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-693796933",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 693796933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5Mzc5NjkzMw==",
    "user": {
      "login": "VexyCats",
      "id": 17414704,
      "node_id": "MDQ6VXNlcjE3NDE0NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VexyCats",
      "html_url": "https://github.com/VexyCats",
      "followers_url": "https://api.github.com/users/VexyCats/followers",
      "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
      "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
      "organizations_url": "https://api.github.com/users/VexyCats/orgs",
      "repos_url": "https://api.github.com/users/VexyCats/repos",
      "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VexyCats/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T04:10:57Z",
    "updated_at": "2020-09-17T04:10:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've updated the EIP to reflect the comments, and suggestions from everyone. \r\n\r\nIncluding adding independent token royalties, such that one NFT can have a royalty amount different from another. \r\n\r\nI've changed the percentage to a fixed point scaled to 10,000 as well to offer lower percentages possible. \r\n\r\nPlease review and let me know if anyone has any feedback ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693796933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693942233",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-693942233",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 693942233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5Mzk0MjIzMw==",
    "user": {
      "login": "dievardump",
      "id": 1753113,
      "node_id": "MDQ6VXNlcjE3NTMxMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1753113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dievardump",
      "html_url": "https://github.com/dievardump",
      "followers_url": "https://api.github.com/users/dievardump/followers",
      "following_url": "https://api.github.com/users/dievardump/following{/other_user}",
      "gists_url": "https://api.github.com/users/dievardump/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dievardump/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dievardump/subscriptions",
      "organizations_url": "https://api.github.com/users/dievardump/orgs",
      "repos_url": "https://api.github.com/users/dievardump/repos",
      "events_url": "https://api.github.com/users/dievardump/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dievardump/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-17T06:05:25Z",
    "updated_at": "2020-09-17T08:25:54Z",
    "author_association": "NONE",
    "body": "@VexyCats - The problem is, as long as royaltiesRecieved doesn't perform a check if the current call has any value in it, anybody can call it with a fake amount, which will result in a fake event. Or a contract could say \"I paid the fee\" but didn't.\r\nI didn't mean for payRoyalties to check that the value is the right one, I mean for payRoyalties to check that there is any value with the current call (if this NFT has a royalty fee), and that this value is used as the event royalties amount (and also transferred to  `royaltyRecipient`/store for `royaltyRecipient` to claim later). This way, there is no spoof possible, as the event will correspond to a real value transferred.\r\n\r\nWe are currently developing an app that will onboard artists and the royalties question is very present. There are several ways to try to put it in place, but a standard that could be followed by the community and especially the marketplaces would be much welcome.\r\n\r\nTo be honest, a standard where the Marketplace would call a function on the ERC721 contract any time something is bought, even if there is no royalties, would also be very welcome, as this would facilitate for example to activate a lot more different system than just royalties on buy, but also for example royalties in the form of the Hardberger tax (or any other you can name).\r\n\r\nSo a more generic function like the one following (also with a token equivalent as not everything is sold using ETH):\r\n```\r\n /**\r\n     * @dev Called by the marketplace when a sell happened\r\n     * @dev Expects msg.value to be of the amount of the royalties if there are \r\n     * @dev can emit RecievedRoyalties event;\r\n     * \r\n     * @param _index Index of the NFT\r\n     * @param _buyer The person buying the NFT\r\n     * @param _soldAmount The amount this NFT has been bought\r\n     */\r\nfunction marketSell(uint _index, address _buyer, uint256 _soldAmount) external payable;\r\n```\r\n\r\nthen if there are royalties on the specified nft, the contract could verify that the call value correspond to the percentage, send the value to the royaltiesRecipient, and emit the event.\r\n\r\nBut if for example there is a Harbergertax in place (which is also Royalties), it could easily store the sell price, and start the process of getting taxation.\r\nThis would allow a brand new horizon for royalties systems, as long as Marketplaces follow the standard.\r\n\r\nAbout the current implementation :\r\n   - I would also do everything per NFT id\r\n   - I would remove hasRoyalties(), and just use royaltyAmount(uint index), which would return 0 if there is none. That saves one external call.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/693942233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/694618251",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-694618251",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 694618251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDYxODI1MQ==",
    "user": {
      "login": "VexyCats",
      "id": 17414704,
      "node_id": "MDQ6VXNlcjE3NDE0NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VexyCats",
      "html_url": "https://github.com/VexyCats",
      "followers_url": "https://api.github.com/users/VexyCats/followers",
      "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
      "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
      "organizations_url": "https://api.github.com/users/VexyCats/orgs",
      "repos_url": "https://api.github.com/users/VexyCats/repos",
      "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VexyCats/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-18T02:55:45Z",
    "updated_at": "2020-09-18T02:55:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dievardump Thanks for the feedback, here are my thoughts. \r\n\r\nAccepting payment on the function to emit the event, therefore marking the function as payable as your code does - would not work. As the creator should be getting the royalties and not the contract. Implementing a payment to the contract would require all royalty enabled contracts to handle the withdrawal of royalties on their NFT contract. \r\n\r\nAlso - checking for a `msg.value` doesn't really solve anything in terms of spoofing - I can simply send 0.0000000000001 eth as the value (pretty much worthless amount) and it would fire the event. I'd pay more in a gas fee than the amount sent to spoof. \r\n\r\nFinally, all of this comes down to implementation details and not standard specific details. So it really doesn't matter/fit into the scope of the standard itself but rather how someone chooses to implement it. \r\n\r\n\r\nI do understand an event spoofing _might be_ an issue - although.... its not really an issue though?\r\n\r\nHear me out: If an event if fired - it doesn't affect anything, any person.... it would only affect a dapp using the events to log royalties. But even then - the dapp can simply check if there was actual ETH sent to the address specified when that event was fired and if so, log it as a true/successful payment. If it was spoofed and there was no ETH value then it doesn't get logged.\r\n\r\nSo I don't think the royalties event being spoofed is an issue at all - although if it doesn't fit the criteria for a standard then we should discuss a way to rework it. \r\n\r\nAgain - its not technically needed, but its one way to provide a means of notification that says - you received a royalty payment. Otherwise - how would a person be notified? \r\n\r\n@MicahZoltu  you've been quite helpful here - any thoughts? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/694618251/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/694693529",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-694693529",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 694693529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDY5MzUyOQ==",
    "user": {
      "login": "dievardump",
      "id": 1753113,
      "node_id": "MDQ6VXNlcjE3NTMxMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1753113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dievardump",
      "html_url": "https://github.com/dievardump",
      "followers_url": "https://api.github.com/users/dievardump/followers",
      "following_url": "https://api.github.com/users/dievardump/following{/other_user}",
      "gists_url": "https://api.github.com/users/dievardump/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dievardump/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dievardump/subscriptions",
      "organizations_url": "https://api.github.com/users/dievardump/orgs",
      "repos_url": "https://api.github.com/users/dievardump/repos",
      "events_url": "https://api.github.com/users/dievardump/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dievardump/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-18T06:58:08Z",
    "updated_at": "2020-09-18T12:53:40Z",
    "author_association": "NONE",
    "body": "> So I don't think the royalties event being spoofed is an issue at all - although if it doesn't fit the criteria for a standard then we should discuss a way to rework it.\r\n\r\nWhen you say this, you seems to have no idea of the legal implications of royalties. Including taxes. There are tons of things to take into account, and having a NFT contract saying \"this person got paid royalties\" when they didn't is really not something artists can afford. Especially when not all artists are living good from their art. \r\n\r\nAlso, how can the dApp check that royalties were paid? What transaction to look for? When? What Block? \r\n\r\n> Implementing a payment to the contract would require all royalty enabled contracts to handle the withdrawal of royalties on their NFT contract.\r\n\r\nWhich could be added in this standard, `withdrawRoyalties` and make it better.\r\n\r\n> I do understand an event spoofing might be an issue - although.... its not really an issue though?\r\n\r\nEthereum is still not mainstream, and the cool and funny kids are still not on it. Wait for PoS, normal fees, and the democratization of having wallets and sending transactions, and you will always have people playing with what they can. The fact that it is not, but might be is enough to not allow this. We're talking about a standard here.\r\n\r\n> Finally, all of this comes down to implementation details and not standard specific details. So it really doesn't matter/fit into the scope of the standard itself but rather how someone chooses to implement it.\r\n\r\nWhich is why I think a `royaltyAmount` / `marketSell` / `RecievedRoyalties` event fired on actual royalties payment flow would be more fitting for a broader standard that allows all kind of rayalties and not only royalties %age on sell\r\n\r\nAs I said, we are really looking forward a royalties standard, because artists really need it. \r\nBut there are a lot of royalties systems and the royalties payments have to be identified for artists to be able to declare it. \r\nA standard firing an event `RecievedRoyalties` without actually making sure that any amount was sent can't really be trusted\r\n\r\n\r\nAlso it's not only about art, but about the whole NFT ecosystem. Games, Arts, Deeds, everything can then have royalties (games could get a part of any resale, in order for example to create more items etc..), companies need a way to be able to know why a transaction was made to their contract (at least for legal purpose), and having those events being the most trustful possible is of higher importance in a standard",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/694693529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/695550059",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-695550059",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 695550059,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTU1MDA1OQ==",
    "user": {
      "login": "VexyCats",
      "id": 17414704,
      "node_id": "MDQ6VXNlcjE3NDE0NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VexyCats",
      "html_url": "https://github.com/VexyCats",
      "followers_url": "https://api.github.com/users/VexyCats/followers",
      "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
      "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
      "organizations_url": "https://api.github.com/users/VexyCats/orgs",
      "repos_url": "https://api.github.com/users/VexyCats/repos",
      "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VexyCats/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-20T02:43:45Z",
    "updated_at": "2020-09-20T10:39:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dievardump The event being called with zero value - has no legal implications - as there was no royalties paid. Tax organizations don't charge tax from an event being called but a transfer of value. \r\n\r\nIf someone calls the event without sending a value - as a joke or way to troll the person - the person would only be affected by looking at their contract, seeing the event called, and then seeing there was no money transferred. Which is a pretty bad UX for them - but not anything that impacts the artist - as you said - 'something they cannot afford'. Also when you say there are legal implications of royalties - I'm 100% positive there is zero legal implication of an event being fired from a smart contract. Feel free to share the legal standing/law that discusses royalties and smart contract events, but I don't think any law covers events from smart contracts - although royalty payments are covered, an event being fired would not fall into that unless a payment was sent with it.   \r\n\r\nWithdraw system for 1% royalties on a 50 dollar NFT would be more in gas fees to withdrawal than the royalties earned. \r\n\r\n\r\nThere is no way to have the event be fired only with a valid value without having the smart contract hold the funds for each contract using royalties. Even if you checked for a value, as mentioned above, you could still send 0.0000000001 eth as a value and it would pass the checks.\r\n\r\nThe event doesn't need to be included in the standard - it could simply be removed as Micah suggested as well - it only serves the purpose of helping dapps and being a slightly better UX for creators being able to see an event instead of having to look for an internal transaction on their account. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/695550059/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/713500658",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-713500658",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 713500658,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzUwMDY1OA==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T11:25:41Z",
    "updated_at": "2020-10-21T11:25:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @VexyCats great initiative!\r\nI like the voluntary aspect of this proposal that embrace the impossibility to enforce royalty on-chain\r\n\r\nI got few suggestion\r\n\r\nCurrent the contract expect one royaltyReceiver for the whole contract. This is not always how it work. sometime a NFT contract can have multiple \"creators\".\r\n\r\nAs such I would add a tokenID parameter to the functions\r\n\r\nThis is how I would see each functions:\r\n\r\n\r\n`function royaltyAmount(uint256 tokenID) external view returns (uint256);`\r\nThis would allow different rate for different NFT.\r\nAnother thing I would change is the percent. it should be more granular. I would at least go for 10,000th\r\nthis function returns zero when the token has no royalty\r\n\r\n`function royaltyInfo(uint256 tokenID) external view returns (uint256, address);`\r\nThis would allow to have different royalty receiver per token\r\n\r\n\r\nMore comments :\r\n\r\nI would remove both `royaltiesRecieved` function and `RecievedRoyalties` as there is no guaranteed they will be called and as mentioned could be spam.\r\n\r\nI would also remove `hasRoyalties` as the same can be achieved with `royaltyAmount` and ERC165 `supportsInterface`\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/713500658/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/713548148",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-713548148",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 713548148,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzU0ODE0OA==",
    "user": {
      "login": "VexyCats",
      "id": 17414704,
      "node_id": "MDQ6VXNlcjE3NDE0NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VexyCats",
      "html_url": "https://github.com/VexyCats",
      "followers_url": "https://api.github.com/users/VexyCats/followers",
      "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
      "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
      "organizations_url": "https://api.github.com/users/VexyCats/orgs",
      "repos_url": "https://api.github.com/users/VexyCats/repos",
      "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VexyCats/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T12:55:05Z",
    "updated_at": "2020-10-21T12:55:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the feedback @wighawag. \r\n\r\nAs for the percent on royalty - it has been changed to 10,000th in the EIP (atleast I think I updated that), pretty sure it is though. I agree, having ability to do 0.5% fee or something similar is best. \r\n\r\nI think after thinking about it for awhile, removing the event all together is probably best as well. \r\n\r\nAnd agreed that ERC165 can remove the hasRoyalties function. \r\n\r\nWill make these updates and try to get it done shortly. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/713548148/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/713569956",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-713569956",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 713569956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzU2OTk1Ng==",
    "user": {
      "login": "dievardump",
      "id": 1753113,
      "node_id": "MDQ6VXNlcjE3NTMxMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1753113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dievardump",
      "html_url": "https://github.com/dievardump",
      "followers_url": "https://api.github.com/users/dievardump/followers",
      "following_url": "https://api.github.com/users/dievardump/following{/other_user}",
      "gists_url": "https://api.github.com/users/dievardump/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dievardump/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dievardump/subscriptions",
      "organizations_url": "https://api.github.com/users/dievardump/orgs",
      "repos_url": "https://api.github.com/users/dievardump/repos",
      "events_url": "https://api.github.com/users/dievardump/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dievardump/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-21T13:26:11Z",
    "updated_at": "2020-10-21T13:37:18Z",
    "author_association": "NONE",
    "body": "Would you be open to a system that would make this \"direct sales\" royalties work, but also open the door to other types of royalties?\r\n\r\nMarketplaces which will put in place this standard are places that do understand that royalties are important. Why come with a half solution?\r\n\r\nWhat if there are more than one person declared as recipient of the royalties (for artists teaming to do a piece for example)?\r\n-> the ERC721 contract implementing the royalties should handle the dispatch of the fee\r\n\r\nWhat if the royalties amount varies depending on the net sale?\r\n-> the ERC721 contract should be communicated the current amount the token is sold for\r\n\r\nthis could be handled by two functions :\r\n\r\n```\r\n/**\r\n     * @dev Returns the amount of fees that should be paid. (not the pourcentage, the amount)\r\n     *\r\n     * @param _tokenId Index of the NFT\r\n     * @param _soldAmount The amount this NFT would be bought for\r\n     */\r\nfunction royaltyAmount(uint256 _tokenId, uint256 _soldAmount) external view returns (uint256);\r\n\r\n /**\r\n     * @dev Called by the marketplace when a sell happened\r\n     * @dev Expects msg.value to be of the amount of the royalties if there are \r\n     * \r\n     * @param _tokenId Index of the NFT\r\n     * @param _buyer The person buying the NFT\r\n     * @param _soldAmount The amount this NFT has been bought for\r\n     */\r\nfunction marketSell(uint _tokenId, address _buyer, uint256 _soldAmount) external payable;\r\n```\r\n \r\nThis allows to Track for secondary market sell. \r\nThis allows to put in place all sort of Royalties (Direct sale, Harberger Tax, ....)\r\nThis allows a much wieder range of handling of royalties than just one NFT id => one recipient\r\nThis allows varying royalties depending on the amount of the sale. (Royalties are sometimes capped to a maximum)\r\n\r\nThis by considering that the contract implementing the royalties actually knows better how to dispatch them because the Creator actually has contact with it. And so by letting it do the transfer of the royalties paid.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/713569956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/721794896",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-721794896",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 721794896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMTc5NDg5Ng==",
    "user": {
      "login": "jamesmorgan",
      "id": 110869,
      "node_id": "MDQ6VXNlcjExMDg2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/110869?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesmorgan",
      "html_url": "https://github.com/jamesmorgan",
      "followers_url": "https://api.github.com/users/jamesmorgan/followers",
      "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
      "repos_url": "https://api.github.com/users/jamesmorgan/repos",
      "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-04T15:20:39Z",
    "updated_at": "2020-11-04T20:58:21Z",
    "author_association": "NONE",
    "body": "I guess to @dievardump point I also agree that implementers of this will know and understand the concept well. One idea I have been playing with a simple query method allowing for any marketplace to handle royalties correctly based on multiple parties. Providing them an interface to get a list of creators of a token and all fees associated. Also leaving the funds payment part down to the caller. \r\n\r\n```solidity\r\nfunction getRoyalties(uint256 _tokenId) external view returns (uint256[] _percentages, address[] _recipients);\r\n```\r\n\r\nThis sort of things does obviously have problem in terms of `GAS`, a general smell of using arrays and a reliance on the caller to properly adhere to the rules. I know that for example KnownOrigin, which supports multiple collaborators, would not be able to use the single token royalty address/amount concept for many of its tokens due to them having multiple collaborators. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/721794896/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/721849627",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-721849627",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 721849627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMTg0OTYyNw==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-04T16:53:53Z",
    "updated_at": "2020-11-04T16:53:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jamesmorgan this could be handled by the recipient being a contract that then have the rules about percentage and recipient addresses.\r\nThis way marketplace do not need to deal with it. they simply send the fund to that contract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/721849627/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/721887487",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-721887487",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 721887487,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMTg4NzQ4Nw==",
    "user": {
      "login": "dievardump",
      "id": 1753113,
      "node_id": "MDQ6VXNlcjE3NTMxMTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1753113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dievardump",
      "html_url": "https://github.com/dievardump",
      "followers_url": "https://api.github.com/users/dievardump/followers",
      "following_url": "https://api.github.com/users/dievardump/following{/other_user}",
      "gists_url": "https://api.github.com/users/dievardump/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dievardump/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dievardump/subscriptions",
      "organizations_url": "https://api.github.com/users/dievardump/orgs",
      "repos_url": "https://api.github.com/users/dievardump/repos",
      "events_url": "https://api.github.com/users/dievardump/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dievardump/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-04T18:04:19Z",
    "updated_at": "2020-11-04T18:05:55Z",
    "author_association": "NONE",
    "body": "> @jamesmorgan this could be handled by the recipient being a contract that then have the rules about percentage and recipient addresses.\r\n> This way marketplace do not need to deal with it. they simply send the fund to that contract.\r\n\r\nWhich would exactly be like sending to the NFT contract which knows percentages and recipients, except that with your way people would have to deploy a contract every time they make a commune piece. \r\n\r\nI agree with you, marketplace shouldn't have to manage this. they should ask \"how much do you want as royalties if I sell this NFT for this price\", get a value, and send the value to the contract, which decides what it does with it.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/721887487/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/722014768",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-722014768",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 722014768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMjAxNDc2OA==",
    "user": {
      "login": "wighawag",
      "id": 790580,
      "node_id": "MDQ6VXNlcjc5MDU4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/790580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wighawag",
      "html_url": "https://github.com/wighawag",
      "followers_url": "https://api.github.com/users/wighawag/followers",
      "following_url": "https://api.github.com/users/wighawag/following{/other_user}",
      "gists_url": "https://api.github.com/users/wighawag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wighawag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wighawag/subscriptions",
      "organizations_url": "https://api.github.com/users/wighawag/orgs",
      "repos_url": "https://api.github.com/users/wighawag/repos",
      "events_url": "https://api.github.com/users/wighawag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wighawag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-04T22:43:39Z",
    "updated_at": "2020-11-04T22:43:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dievardump if you want to have the logic inside the NFT contract itself, it is fine too. I am just saying that it does not need to be part of the getRoyalties function signature\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/722014768/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/728015406",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-728015406",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 728015406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyODAxNTQwNg==",
    "user": {
      "login": "jamesmorgan",
      "id": 110869,
      "node_id": "MDQ6VXNlcjExMDg2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/110869?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesmorgan",
      "html_url": "https://github.com/jamesmorgan",
      "followers_url": "https://api.github.com/users/jamesmorgan/followers",
      "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
      "repos_url": "https://api.github.com/users/jamesmorgan/repos",
      "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-16T13:29:42Z",
    "updated_at": "2020-11-16T13:29:42Z",
    "author_association": "NONE",
    "body": "Hi all, thought I would pick this back up. \r\n\r\nI have been thinking mainly about a few things in relation to the EIP, those being:\r\n\r\n1. How to handle multiple recipients of royalties - a common use case in art where the the NFT is a collaboration and royalties can be split between them. These collabs are not always 50/50 as well.\r\n\r\n2. How to handle 721 contracts where multiple user mint from the same contract - think of KnownOrigin, SuperRare, AsynArt etc - money cannot simply be sent to the main NFT contract without specifying its purpose i.e. the token ID it relates to, otherwise there is no way of know what the money if for and how to split it.\r\n\r\n3. `GAS` in general needs to be kept to a minimum in order for marketplaces to be able to adopt the standards. \r\n\r\n4. How to deal with bundles - for example `OpenSea` allows the sell of bundles of NFTs - these tokens may all have different creators and royalties amounts. \r\n\r\n5. Not all tokens have royalties\r\n\r\n6. `Events` - is this a necessary requirement?\r\n\r\n-------\r\n\r\nSome ideas on solving this are:\r\n\r\n1. Deploying micro receiver contract/wallet for collaborators of NFTs where the funds can be sent and split accordingly - This will need to be a pull pattern to avoid `GAS` stipend problems unless all `GAS` is forwarded to the receiver. Also adds complexity and costs in relation to the token itself but these can be mitigated somewhat via various implementation types. \r\n\r\n2. This can be mitigated via receiving contracts in point 1 but assumes the sender will adhere to the returned value of the `getRoyalty` or similar.\r\n\r\n3. Keeping GAS low in my mind means keeping this as simple as possible, exposing a single method `getRoyalty(tokenId) returns (address, unit256)` - this way the marketplace can simply determine the amount and then `transfer` x funds to the returned sender. \r\n\r\n4. Transfering funds for a large bundle will get pricey -  unsure of the best approach for this but I fear that it will introduce some batched/reconciliation process/requirements which mean that its less likely to be adopted, but I could be wrong here, its just a guess...\r\n\r\n5. Could use a try/catch or check `0x0000` (zero address) before sending\r\n\r\n6. Eventing is an interesting wrong - I believe this event should come from the receiver of the funds and not the marketplace sending it, this will remove the possibility of emitting an event different than `msg.value`. \r\n\r\nAnyway, let me know your thoughts. These are the main points I have been thinking about in relation to this EIP. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/728015406/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/748689866",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-748689866",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 748689866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODY4OTg2Ng==",
    "user": {
      "login": "bardionson",
      "id": 35011150,
      "node_id": "MDQ6VXNlcjM1MDExMTUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/35011150?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bardionson",
      "html_url": "https://github.com/bardionson",
      "followers_url": "https://api.github.com/users/bardionson/followers",
      "following_url": "https://api.github.com/users/bardionson/following{/other_user}",
      "gists_url": "https://api.github.com/users/bardionson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bardionson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bardionson/subscriptions",
      "organizations_url": "https://api.github.com/users/bardionson/orgs",
      "repos_url": "https://api.github.com/users/bardionson/repos",
      "events_url": "https://api.github.com/users/bardionson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bardionson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-20T23:50:27Z",
    "updated_at": "2020-12-20T23:50:27Z",
    "author_association": "NONE",
    "body": "Is there any more progress on this draft? How can I help?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/748689866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/748938520",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-748938520",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 748938520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODkzODUyMA==",
    "user": {
      "login": "VexyCats",
      "id": 17414704,
      "node_id": "MDQ6VXNlcjE3NDE0NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/17414704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VexyCats",
      "html_url": "https://github.com/VexyCats",
      "followers_url": "https://api.github.com/users/VexyCats/followers",
      "following_url": "https://api.github.com/users/VexyCats/following{/other_user}",
      "gists_url": "https://api.github.com/users/VexyCats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VexyCats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VexyCats/subscriptions",
      "organizations_url": "https://api.github.com/users/VexyCats/orgs",
      "repos_url": "https://api.github.com/users/VexyCats/repos",
      "events_url": "https://api.github.com/users/VexyCats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VexyCats/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-21T12:01:19Z",
    "updated_at": "2020-12-21T12:01:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah! All help is welcomed. \r\n\r\nAny suggestions or code changes you see or would like to add - feel free to do so/discuss here",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/748938520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/748962564",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-748962564",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 748962564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODk2MjU2NA==",
    "user": {
      "login": "wildlifechorus",
      "id": 3536846,
      "node_id": "MDQ6VXNlcjM1MzY4NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3536846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wildlifechorus",
      "html_url": "https://github.com/wildlifechorus",
      "followers_url": "https://api.github.com/users/wildlifechorus/followers",
      "following_url": "https://api.github.com/users/wildlifechorus/following{/other_user}",
      "gists_url": "https://api.github.com/users/wildlifechorus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wildlifechorus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wildlifechorus/subscriptions",
      "organizations_url": "https://api.github.com/users/wildlifechorus/orgs",
      "repos_url": "https://api.github.com/users/wildlifechorus/repos",
      "events_url": "https://api.github.com/users/wildlifechorus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wildlifechorus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-21T13:03:01Z",
    "updated_at": "2020-12-21T13:03:01Z",
    "author_association": "NONE",
    "body": "I just started learning Solidity and blockchain development and I was looking for a proposal for royalties or secondary and tertiary sales and came across this proposal which is an excellent step in the right direction but I would like to ask a few questions, maybe there are some solutions to this.\r\n\r\n1. How can we solve the problem of NFTs that have several royalty recipients with different royalty percentages?\r\n2. How can we solve OTC (over-the-counter) deals or markets that don't want to implement royalties?\r\n3. Why rely on markets for royalty distribution? Can't we change transferFrom function that would receive address payable and handle all distribution of royalties?\r\n4. Assuming that we could add an address payable to the transferFrom that would handle all royalty payments could we set a minimum value on secondary or tertiary sales so we avoid OTC deals where the royalty recipients get nothing or almost nothing?\r\n\r\nMaybe this is not the best place to ask these questions but these are the biggest issues I see right now with NFTs. Is that any other proposal than this one that addresses these issues?\r\n\r\n```\r\nfunction transferFrom(address payable from, address to, uint256 tokenId) public payable {\r\n      super.transferFrom(from, to, tokenId);\r\n\r\n      if (msg.value > 0) {\r\n        // 10% to creator\r\n        uint256 secondaryShare = msg.value.div(100).mul(10);\r\n        _creatorOf(tokenId).transfer(valueToSend)\r\n\r\n        // 90% seller\r\n        from.transfer(msg.value - secondaryShare);\r\n      }\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/748962564/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/748966132",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-748966132",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 748966132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODk2NjEzMg==",
    "user": {
      "login": "jamesmorgan",
      "id": 110869,
      "node_id": "MDQ6VXNlcjExMDg2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/110869?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesmorgan",
      "html_url": "https://github.com/jamesmorgan",
      "followers_url": "https://api.github.com/users/jamesmorgan/followers",
      "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
      "repos_url": "https://api.github.com/users/jamesmorgan/repos",
      "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-21T13:11:30Z",
    "updated_at": "2020-12-21T13:11:30Z",
    "author_association": "NONE",
    "body": "Welcome to the discussion @wildlifechorus and good questions. \r\n\r\nSome thoughts on them from me:\r\n\r\n1. This is solvable if the royalties recipient address is a contract in its own right - meaning the contract that receives the funds can handle splitting between X number of participants. It would need to be a pull pattern as to split automatically would be a GAS heavy operation. \r\n\r\n2. This is harder to solve - you could put restrictions on the `msg.value` being present in the transfer but this may impede how freely a token can move about. \r\n\r\n3. Changing the transfer function could work but would slightly break the existing standards, also this would rely on marketplace passing the \"correct\" value done to the transfer hook.\r\n\r\nJust some of my initial thoughts from your questions. \r\n\r\nFor me any standard like this need to try and not break existing token standards and be a GAS efficient at possible. If not efficient then marketplace are less likely to adopt as it will mean putting the GAS costs/onus back on the seller and may not be welcome. \r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/748966132/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/749007532",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-749007532",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 749007532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTAwNzUzMg==",
    "user": {
      "login": "wildlifechorus",
      "id": 3536846,
      "node_id": "MDQ6VXNlcjM1MzY4NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3536846?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wildlifechorus",
      "html_url": "https://github.com/wildlifechorus",
      "followers_url": "https://api.github.com/users/wildlifechorus/followers",
      "following_url": "https://api.github.com/users/wildlifechorus/following{/other_user}",
      "gists_url": "https://api.github.com/users/wildlifechorus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wildlifechorus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wildlifechorus/subscriptions",
      "organizations_url": "https://api.github.com/users/wildlifechorus/orgs",
      "repos_url": "https://api.github.com/users/wildlifechorus/repos",
      "events_url": "https://api.github.com/users/wildlifechorus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wildlifechorus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-21T14:41:36Z",
    "updated_at": "2020-12-21T14:41:36Z",
    "author_association": "NONE",
    "body": "@jamesmorgan Thanks for all your insights :)\r\n\r\nCould you point me out to some resources on how I can understand better what you mean by this?:\r\n\r\n> 1. This is solvable if the royalties recipient address is a contract in its own right - meaning the contract that receives the funds can handle splitting between X number of participants. It would need to be a pull pattern as to split automatically would be a GAS heavy operation.\r\n\r\nFrom what I understand what you mean is that a separate contract will:\r\n\r\n1. Receive the buy funds\r\n2. Pull the royalty addresses and percentages from a mapping in the NFT\r\n3. Split and transfer the money\r\n\r\nPS: Again I'm sorry if I'm saying something silly, I'm very new to this.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/749007532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/749015355",
    "html_url": "https://github.com/ethereum/EIPs/issues/2907#issuecomment-749015355",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2907",
    "id": 749015355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTAxNTM1NQ==",
    "user": {
      "login": "jamesmorgan",
      "id": 110869,
      "node_id": "MDQ6VXNlcjExMDg2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/110869?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesmorgan",
      "html_url": "https://github.com/jamesmorgan",
      "followers_url": "https://api.github.com/users/jamesmorgan/followers",
      "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
      "repos_url": "https://api.github.com/users/jamesmorgan/repos",
      "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-21T14:57:23Z",
    "updated_at": "2020-12-21T14:57:23Z",
    "author_association": "NONE",
    "body": "Ye kind of like that @wildlifechorus \r\n\r\nThe contract address which receives the royalties funds just needs to know who to allocate them between and what percentages for each address. Each party could then pull out their accumulated royalties. \r\n\r\nAt a high level anyway. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/749015355/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
