{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/3583",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/3583/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/3583/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/3583/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/3583",
  "id": 897913781,
  "node_id": "MDU6SXNzdWU4OTc5MTM3ODE=",
  "number": 3583,
  "title": "[Idea] Alternative contract address assignment scheme as replay protection",
  "user": {
    "login": "Dexaran",
    "id": 26142412,
    "node_id": "MDQ6VXNlcjI2MTQyNDEy",
    "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Dexaran",
    "html_url": "https://github.com/Dexaran",
    "followers_url": "https://api.github.com/users/Dexaran/followers",
    "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
    "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
    "organizations_url": "https://api.github.com/users/Dexaran/orgs",
    "repos_url": "https://api.github.com/users/Dexaran/repos",
    "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Dexaran/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2021-05-21T10:30:33Z",
  "updated_at": "2021-11-07T02:28:38Z",
  "closed_at": "2021-11-07T02:28:38Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "---\r\neip: ?\r\ntitle: Alternative contract address assignment scheme\r\nauthor: Dexaran (@Dexaran) <dexaran@ethereumclassic.org>\r\nstatus: Idea\r\ntype: Core\r\ncategory: ERC\r\ncreated: 2021-05-21\r\n---\r\n\r\n## Abstract\r\n\r\nThe following describes an issue with the method of assigning a contract address during deployment and a proposed solution that might be implemented.\r\n\r\n## Motivation\r\n\r\n**The problem: the addresses on the Ethereum chain are stuck with a lot of funds that were originally supposed to be sent to smart-contracts deployed on other networks.**\r\n\r\nThis is a problem of \"cross chain address collisions\".\r\n\r\nThere are multiple chains that are based on Ethereum code (example: ETC chain) therefore the same address is valid on both chains. [EIP-155](https://eips.ethereum.org/EIPS/eip-155) implements chain IDs to prevent transactions from being replayed to the other chain however this does not solve all the problems.\r\n\r\nThe problem of cross chain collisions is still relevant (here you can see an [example](https://www.reddit.com/r/GolemProject/comments/71lrad/request_for_golem_developers_comments_58000_lost/) of a documented collision that resulted in a loss of $359,708 USD 3 years ago).\r\n\r\nThe funds are sometimes sent to the address of a smart-contract that is deployed on another chain as a result of a user mistake or software fault.\r\n\r\n*Example: a user wants to deposit 1 ETC to some contract at ETC chain but he makes a mistake and sends 1 ETH to the same address at ETH chain.*\r\n\r\nSuch transactions happen periodically and the problem can only be solved by deploying a \"mock\" contract on the other chain (in this case at ETH chain).\r\n\r\nIt is possible to deploy the contract at the same address by using the account that deployed the original contract. The address assigned to the contract upon deployment depends on (1) the address that creates the contract and (2) the `nonce` of the transaction `keccak256(rlp([sender, nonce]))`. As the result, the `nonce` of the account at the ETH chain must not be greater than the `nonce` of the contract creation transaction at the other chain. Otherwise the contract creator is unable to deploy the mock contract at ETH chain.\r\n\r\nIn fact, the address of the contract is absolutely irrelevant except for this particular situation. Therefore, I believe that it would be reasonable to provide the ability to use an arbitrary number instead of \"nonce\", thus allowing the account owner to define the contract address on his own. This can help resolving the problem of cross chain collisions and enable contract developers to extract the users funds that suffered from this issue.\r\n\r\n## Specification\r\n\r\nAdds a new opcode (`CREATE3`), which takes 4 stack arguments: endowment, memory_start, memory_length, salt. Behaves identically to `CREATE (0xf0)` but uses salt instead of nonce to generate address of a new contract `keccak256(rlp([sender, salt]))` and the create-operation fails if the `EXTCODESIZE` at address  `keccak256(rlp([sender, salt]))` is nonzero.\r\n\r\n## Rationale\r\n\r\nThis is the simplest approach of enabling the owner of the original contract to create a copy of it (or a mock contract) at another chain. This is important to consider that only the owner of the original contract must have the ability to deploy contract at this address so this scheme seems to be the most applicable.\r\n\r\n## Backwards Compatibility\r\n\r\nThe proposal introduces a new opcode.\r\n\r\n## Test Cases\r\n\r\nN/A\r\n\r\n## Reference Implementation\r\n\r\nN/A\r\n\r\n## Security Considerations\r\n\r\nThere are no known security considerations with this EIP.\r\n\r\n## Copyright Waiver\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/3583/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/3583/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/845895326",
    "html_url": "https://github.com/ethereum/EIPs/issues/3583#issuecomment-845895326",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3583",
    "id": 845895326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTg5NTMyNg==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-21T11:49:43Z",
    "updated_at": "2021-05-21T11:49:43Z",
    "author_association": "MEMBER",
    "body": "Only commenting on the technical aspect of the specification:\r\n1. Currently contracts created with `CREATE2` are \"resurrectable\", but those created with `CREATE` are not. This would change this property.\r\n2. Need to properly describe what happens to `CREATE` and the external create transaction in case it hits the same address.\r\n\r\nAre you sure there is absolutely no backwards compatibility and security issue at play here?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/845895326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/847183473",
    "html_url": "https://github.com/ethereum/EIPs/issues/3583#issuecomment-847183473",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3583",
    "id": 847183473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NzE4MzQ3Mw==",
    "user": {
      "login": "Dexaran",
      "id": 26142412,
      "node_id": "MDQ6VXNlcjI2MTQyNDEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/26142412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dexaran",
      "html_url": "https://github.com/Dexaran",
      "followers_url": "https://api.github.com/users/Dexaran/followers",
      "following_url": "https://api.github.com/users/Dexaran/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dexaran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dexaran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dexaran/subscriptions",
      "organizations_url": "https://api.github.com/users/Dexaran/orgs",
      "repos_url": "https://api.github.com/users/Dexaran/repos",
      "events_url": "https://api.github.com/users/Dexaran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dexaran/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-24T16:40:37Z",
    "updated_at": "2021-05-24T16:53:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@axic \r\n\r\n>Currently contracts created with `CREATE2` are \"resurrectable\", but those created with CREATE are not. This would change this property.\r\n\r\nDoes \"resurrectable\" refer a situation where the smart-contract owner can cause contract to `SELFDESTRUCT` and nullify ​its code and then deploy a new one at the same address?\r\n\r\nI would say that it will be possible to \"replace\" the contract using `CREATE3`, **if the contract allows for this by implementing a \"suicide\" function the execution of which is not restricted by any internal logic of the contract.**\r\n\r\nI expect that \"code is law\" paradigm fans will hate me however I can argue that the proposal does not change any paradigm here. If you don't want contract to be resurrectable then you don't implement suicide function. Anyways, most contracts are not destructible nor they intended to be. \r\n\r\nPersonally I don't see anything wrong with \"destroy & create3-deploy\" pattern of updating contract code.\r\n\r\n>Need to properly describe what happens to CREATE and the external create transaction in case it hits the same address.\r\n\r\nGood point. \r\n\r\nI'm trying to propose a solution for a problem of cross-chain address collisions. Technically the problem can be solved if we only allow a user to deploy contracts using `CREATE3` if `salt` < `nonce`. In this case a user will be allowed to deploy contracts at addresses that he \"could\" potentially achieve with `CREATE`. At the other hand the situation where `CREATE` deployment will collide with an already-existing `CREATE3`-deployed contract will not be possible.\r\n\r\nAnyway, I would like to hear community feedback on how best to resolve `CREATE` / `CREATE3` relations - possibly there are better ideas.\r\n\r\n>Are you sure there is absolutely no backwards compatibility and security issue at play here?\r\n\r\nIf something relied on the assumption that a contract can be permanently destroyed and once it has zero bytecode size it is no longer viable then this thing can be confused now.\r\n\r\nThis is a weird pattern of interacting between contracts however. I would like to get feedbacks on this as well.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/847183473/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/847190559",
    "html_url": "https://github.com/ethereum/EIPs/issues/3583#issuecomment-847190559",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3583",
    "id": 847190559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NzE5MDU1OQ==",
    "user": {
      "login": "martintychan",
      "id": 84733049,
      "node_id": "MDQ6VXNlcjg0NzMzMDQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/84733049?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martintychan",
      "html_url": "https://github.com/martintychan",
      "followers_url": "https://api.github.com/users/martintychan/followers",
      "following_url": "https://api.github.com/users/martintychan/following{/other_user}",
      "gists_url": "https://api.github.com/users/martintychan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martintychan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martintychan/subscriptions",
      "organizations_url": "https://api.github.com/users/martintychan/orgs",
      "repos_url": "https://api.github.com/users/martintychan/repos",
      "events_url": "https://api.github.com/users/martintychan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martintychan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-24T16:52:31Z",
    "updated_at": "2021-05-24T16:52:31Z",
    "author_association": "NONE",
    "body": "I have suffered from this issue (I had a transaction that was intended for another chain but got it on ETH chain and therefore lost a ETH in the address of a contract which is deployed at the other chain) and I hope that the solution will be implemented, not just for me but also thousands of people like me who suffer from the same issue out there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/847190559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/950248879",
    "html_url": "https://github.com/ethereum/EIPs/issues/3583#issuecomment-950248879",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3583",
    "id": 950248879,
    "node_id": "IC_kwDOAq426M44o6Wv",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-10-24T02:26:33Z",
    "updated_at": "2021-10-24T02:26:33Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/950248879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962541365",
    "html_url": "https://github.com/ethereum/EIPs/issues/3583#issuecomment-962541365",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/3583",
    "id": 962541365,
    "node_id": "IC_kwDOAq426M45Xzc1",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-07T02:28:38Z",
    "updated_at": "2021-11-07T02:28:38Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962541365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
