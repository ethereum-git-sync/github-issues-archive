{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/1155",
  "id": 333091780,
  "node_id": "MDU6SXNzdWUzMzMwOTE3ODA=",
  "number": 1155,
  "title": "ERC: Multi Token Standard",
  "user": {
    "login": "coinfork",
    "id": 2774008,
    "node_id": "MDQ6VXNlcjI3NzQwMDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2774008?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/coinfork",
    "html_url": "https://github.com/coinfork",
    "followers_url": "https://api.github.com/users/coinfork/followers",
    "following_url": "https://api.github.com/users/coinfork/following{/other_user}",
    "gists_url": "https://api.github.com/users/coinfork/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/coinfork/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/coinfork/subscriptions",
    "organizations_url": "https://api.github.com/users/coinfork/orgs",
    "repos_url": "https://api.github.com/users/coinfork/repos",
    "events_url": "https://api.github.com/users/coinfork/events{/privacy}",
    "received_events_url": "https://api.github.com/users/coinfork/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 476,
  "created_at": "2018-06-17T20:48:30Z",
  "updated_at": "2022-12-11T18:02:29Z",
  "closed_at": "2022-05-28T05:09:41Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "```\r\n---\r\neip: 1155\r\ntitle: ERC-1155 Multi Token Standard\r\nauthor: Witek Radomski <witek@enjin.io>, Andrew Cooke <ac0dem0nk3y@gmail.com>, Philippe Castonguay <pc@horizongames.net>, James Therien <james@turing-complete.com>, Eric Binet <eric@enjin.io>, Ronan Sandford <wighawag@gmail.com>\r\ntype: Standards Track\r\ncategory: ERC\r\nstatus: Final\r\ncreated: 2018-06-17\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/1155\r\nrequires: 165\r\n---\r\n```\r\n\r\n## Simple Summary\r\n\r\nA standard interface for contracts that manage multiple token types. A single deployed contract may include any combination of fungible tokens, non-fungible tokens or other configurations (e.g. semi-fungible tokens).\r\n\r\n## Abstract\r\n\r\nThis standard outlines a smart contract interface that can represent any number of fungible and non-fungible token types. Existing standards such as ERC-20 require deployment of separate contracts per token type. The ERC-721 standard's token ID is a single non-fungible index and the group of these non-fungibles is deployed as a single contract with settings for the entire collection. In contrast, the ERC-1155 Multi Token Standard allows for each token ID to represent a new configurable token type, which may have its own metadata, supply and other attributes.\r\n\r\nThe `_id` argument contained in each function's argument set indicates a specific token or token type in a transaction.\r\n\r\n## Motivation\r\n\r\nTokens standards like ERC-20 and ERC-721 require a separate contract to be deployed for each token type or collection. This places a lot of redundant bytecode on the Ethereum blockchain and limits certain functionality by the nature of separating each token contract into its own permissioned address. With the rise of blockchain games and platforms like Enjin Coin, game developers may be creating thousands of token types, and a new type of token standard is needed to support them. However, ERC-1155 is not specific to games and many other applications can benefit from this flexibility.\r\n\r\nNew functionality is possible with this design such as transferring multiple token types at once, saving on transaction costs. Trading (escrow / atomic swaps) of multiple tokens can be built on top of this standard and it removes the need to \"approve\" individual token contracts separately. It is also easy to describe and mix multiple fungible or non-fungible token types in a single contract.\r\n\r\n## Specification\r\n\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.\r\n\r\n**Smart contracts implementing the ERC-1155 standard MUST implement all of the functions in the `ERC1155` interface.**\r\n\r\n**Smart contracts implementing the ERC-1155 standard MUST implement the ERC-165 `supportsInterface` function and MUST return the constant value `true` if `0xd9b67a26` is passed through the `interfaceID` argument.**\r\n\r\n```solidity\r\npragma solidity ^0.5.9;\r\n\r\n/**\r\n    @title ERC-1155 Multi Token Standard\r\n    @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\r\n */\r\ninterface ERC1155 /* is ERC165 */ {\r\n    /**\r\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\r\n        The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\r\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\r\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\r\n        The `_id` argument MUST be the token type being transferred.\r\n        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\r\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\r\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).        \r\n    */\r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\r\n\r\n    /**\r\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).      \r\n        The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\r\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\r\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\r\n        The `_ids` argument MUST be the list of tokens being transferred.\r\n        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\r\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\r\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).                \r\n    */\r\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\r\n\r\n    /**\r\n        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absence of an event assumes disabled).        \r\n    */\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /**\r\n        @dev MUST emit when the URI is updated for a token ID.\r\n        URIs are defined in RFC 3986.\r\n        The URI MUST point to a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\r\n    */\r\n    event URI(string _value, uint256 indexed _id);\r\n\r\n    /**\r\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\r\n        MUST revert on any other error.\r\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\r\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).        \r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _id      ID of the token type\r\n        @param _value   Transfer amount\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if length of `_ids` is not the same as length of `_values`.\r\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\r\n        MUST revert on any other error.        \r\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\r\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\r\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).                      \r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _ids     IDs of each token type (order and length must match _values array)\r\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\r\n    */\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\r\n\r\n    /**\r\n        @notice Get the balance of an account's tokens.\r\n        @param _owner  The address of the token holder\r\n        @param _id     ID of the token\r\n        @return        The _owner's balance of the token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n    /**\r\n        @notice Get the balance of multiple account/token pairs\r\n        @param _owners The addresses of the token holders\r\n        @param _ids    ID of the tokens\r\n        @return        The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)\r\n     */\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n        @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\r\n        @dev MUST emit the ApprovalForAll event on success.\r\n        @param _operator  Address to add to the set of authorized operators\r\n        @param _approved  True if the operator is approved, false to revoke approval\r\n    */\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /**\r\n        @notice Queries the approval status of an operator for a given owner.\r\n        @param _owner     The owner of the tokens\r\n        @param _operator  Address of authorized operator\r\n        @return           True if the operator is approved, false if not\r\n    */\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n```\r\n\r\n### ERC-1155 Token Receiver\r\n\r\n**Smart contracts MUST implement all of the functions in the `ERC1155TokenReceiver` interface to accept transfers. See \"Safe Transfer Rules\" for further detail.**\r\n\r\n**Smart contracts MUST implement the ERC-165 `supportsInterface` function and signify support for the `ERC1155TokenReceiver` interface to accept transfers. See \"ERC1155TokenReceiver ERC-165 rules\" for further detail.**\r\n\r\n```solidity\r\npragma solidity ^0.5.9;\r\n\r\n/**\r\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\r\n*/\r\ninterface ERC1155TokenReceiver {\r\n    /**\r\n        @notice Handle the receipt of a single ERC1155 token type.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \r\n        This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\r\n        This function MUST revert if it rejects the transfer.\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _id        The ID of the token being transferred\r\n        @param _value     The amount of tokens being transferred\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);\r\n\r\n    /**\r\n        @notice Handle the receipt of multiple ERC1155 token types.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \r\n        This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\r\n        This function MUST revert if it rejects the transfer(s).\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\r\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    */\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);       \r\n}\r\n```\r\n\r\n### Safe Transfer Rules\r\n\r\nTo be more explicit about how the standard `safeTransferFrom` and `safeBatchTransferFrom` functions MUST operate with respect to the `ERC1155TokenReceiver` hook functions, a list of scenarios and rules follows.\r\n\r\n#### Scenarios\r\n\r\n**_Scenario#1 :_** The recipient is not a contract.\r\n* `onERC1155Received` and `onERC1155BatchReceived` MUST NOT be called on an EOA (Externally Owned Account).\r\n\r\n**_Scenario#2 :_** The transaction is not a mint/transfer of a token.\r\n* `onERC1155Received` and `onERC1155BatchReceived` MUST NOT be called outside of a mint or transfer process.\r\n\r\n**_Scenario#3 :_** The receiver does not implement the necessary `ERC1155TokenReceiver` interface function(s).\r\n* The transfer MUST be reverted with the one caveat below.\r\n    - If the token(s) being sent are part of a hybrid implementation of another standard, that particular standard's rules on sending to a contract MAY now be followed instead. See \"Compatibility with other standards\" section.\r\n\r\n**_Scenario#4 :_** The receiver implements the necessary `ERC1155TokenReceiver` interface function(s) but returns an unknown value.\r\n* The transfer MUST be reverted.\r\n\r\n**_Scenario#5 :_** The receiver implements the necessary `ERC1155TokenReceiver` interface function(s) but throws an error.\r\n* The transfer MUST be reverted.\r\n\r\n**_Scenario#6 :_** The receiver implements the `ERC1155TokenReceiver` interface and is the recipient of one and only one balance change (e.g. `safeTransferFrom` called).\r\n* The balances for the transfer MUST have been updated before the `ERC1155TokenReceiver` hook is called on a recipient contract.\r\n* The transfer event MUST have been emitted to reflect the balance changes before the `ERC1155TokenReceiver` hook is called on the recipient contract.\r\n* One of `onERC1155Received` or `onERC1155BatchReceived` MUST be called on the recipient contract.\r\n* The `onERC1155Received` hook SHOULD be called on the recipient contract and its rules followed.\r\n    - See \"onERC1155Received rules\" for further rules that MUST be followed.\r\n* The `onERC1155BatchReceived` hook MAY be called on the recipient contract and its rules followed.\r\n    - See \"onERC1155BatchReceived rules\" for further rules that MUST be followed.\r\n\r\n**_Scenario#7 :_** The receiver implements the `ERC1155TokenReceiver` interface and is the recipient of more than one balance change (e.g. `safeBatchTransferFrom` called).\r\n* All balance transfers that are referenced in a call to an `ERC1155TokenReceiver` hook MUST be updated before the `ERC1155TokenReceiver` hook is called on the recipient contract.\r\n* All transfer events MUST have been emitted to reflect current balance changes before an `ERC1155TokenReceiver` hook is called on the recipient contract.\r\n* `onERC1155Received` or `onERC1155BatchReceived` MUST be called on the recipient as many times as necessary such that every balance change for the recipient in the scenario is accounted for.\r\n    - The return magic value for every hook call MUST be checked and acted upon as per \"onERC1155Received rules\" and \"onERC1155BatchReceived rules\".\r\n* The `onERC1155BatchReceived` hook SHOULD be called on the recipient contract and its rules followed.    \r\n    - See \"onERC1155BatchReceived rules\" for further rules that MUST be followed.\r\n* The `onERC1155Received` hook MAY be called on the recipient contract and its rules followed.    \r\n    - See \"onERC1155Received rules\" for further rules that MUST be followed.\r\n    \r\n**_Scenario#8 :_** You are the creator of a contract that implements the `ERC1155TokenReceiver` interface and you forward the token(s) onto another address in one or both of `onERC1155Received` and `onERC1155BatchReceived`.\r\n* Forwarding should be considered acceptance and then initiating a new `safeTransferFrom` or `safeBatchTransferFrom` in a new context.\r\n    - The prescribed keccak256 acceptance value magic for the receiver hook being called MUST be returned after forwarding is successful.\r\n* The `_data` argument MAY be re-purposed for the new context.\r\n* If forwarding fails the transaction MAY be reverted.\r\n    - If the contract logic wishes to keep the ownership of the token(s) itself in this case it MAY do so.\r\n    \r\n**_Scenario#9 :_** You are transferring tokens via a non-standard API call i.e. an implementation specific API and NOT `safeTransferFrom` or `safeBatchTransferFrom`.\r\n* In this scenario all balance updates and events output rules are the same as if a standard transfer function had been called.\r\n    - i.e. an external viewer MUST still be able to query the balance via a standard function and it MUST be identical to the balance as determined by `TransferSingle` and `TransferBatch` events alone.\r\n* If the receiver is a contract the `ERC1155TokenReceiver` hooks still need to be called on it and the return values respected the same as if a standard transfer function had been called. \r\n    - However while the `safeTransferFrom` or `safeBatchTransferFrom` functions MUST revert if a receiving contract does not implement the `ERC1155TokenReceiver` interface, a non-standard function MAY proceed with the transfer.\r\n    - See \"Implementation specific transfer API rules\".\r\n\r\n\r\n#### Rules\r\n\r\n**_safeTransferFrom rules:_**\r\n* Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section).\r\n* MUST revert if `_to` is the zero address.\r\n* MUST revert if balance of holder for token `_id` is lower than the `_value` sent to the recipient.\r\n* MUST revert on any other error.\r\n* MUST emit the `TransferSingle` event to reflect the balance change (see \"TransferSingle and TransferBatch event rules\" section).\r\n* After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"onERC1155Received rules\" section).\r\n    - The `_data` argument provided by the sender for the transfer MUST be passed with its contents unaltered to the `onERC1155Received` hook function via its `_data` argument.\r\n\r\n**_safeBatchTransferFrom rules:_**\r\n* Caller must be approved to manage all the tokens being transferred out of the `_from` account (see \"Approval\" section).\r\n* MUST revert if `_to` is the zero address.\r\n* MUST revert if length of `_ids` is not the same as length of `_values`.\r\n* MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\r\n* MUST revert on any other error.\r\n* MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"TransferSingle and TransferBatch event rules\" section).\r\n* The balance changes and events MUST occur in the array order they were submitted (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\r\n* After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` or `onERC1155BatchReceived` on `_to` and act appropriately (see \"onERC1155Received and onERC1155BatchReceived rules\" section).\r\n    - The `_data` argument provided by the sender for the transfer MUST be passed with its contents unaltered to the `ERC1155TokenReceiver` hook function(s) via their `_data` argument.\r\n\r\n**_TransferSingle and TransferBatch event rules:_**\r\n* `TransferSingle` SHOULD be used to indicate a single balance transfer has occurred between a `_from` and `_to` pair.\r\n    - It MAY be emitted multiple times to indicate multiple balance changes in the transaction, but note that `TransferBatch` is designed for this to reduce gas consumption.\r\n    - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\r\n    - The `_from` argument MUST be the address of the holder whose balance is decreased.\r\n    - The `_to` argument MUST be the address of the recipient whose balance is increased.\r\n    - The `_id` argument MUST be the token type being transferred.\r\n    - The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\r\n    - When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address). See \"Minting/creating and burning/destroying rules\".\r\n    - When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address). See \"Minting/creating and burning/destroying rules\".\r\n* `TransferBatch` SHOULD be used to indicate multiple balance transfers have occurred between a `_from` and `_to` pair.\r\n    - It MAY be emitted with a single element in the list to indicate a singular balance change in the transaction, but note that `TransferSingle` is designed for this to reduce gas consumption.\r\n    - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\r\n    - The `_from` argument MUST be the address of the holder whose balance is decreased for each entry pair in `_ids` and `_values`.\r\n    - The `_to` argument MUST be the address of the recipient whose balance is increased for each entry pair in `_ids` and `_values`.\r\n    - The `_ids` array argument MUST contain the ids of the tokens being transferred.\r\n    - The `_values` array argument MUST contain the number of token to be transferred for each corresponding entry in `_ids`.\r\n    - `_ids` and `_values` MUST have the same length.\r\n    - When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address). See \"Minting/creating and burning/destroying rules\".\r\n    - When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address). See \"Minting/creating and burning/destroying rules\".\r\n* The total value transferred from address `0x0` minus the total value transferred to `0x0` observed via the `TransferSingle` and `TransferBatch` events MAY be used by clients and exchanges to determine the \"circulating supply\" for a given token ID.\r\n* To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the `TransferSingle` event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_value` of 0.\r\n* All `TransferSingle` and `TransferBatch` events MUST be emitted to reflect all the balance changes that have occurred before any call(s) to `onERC1155Received` or `onERC1155BatchReceived`.\r\n    - To make sure event order is correct in the case of valid re-entry (e.g. if a receiver contract forwards tokens on receipt) state balance and events balance MUST match before calling an external contract.\r\n\r\n**_onERC1155Received rules:_**\r\n- The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\r\n* The `_from` argument MUST be the address of the holder whose balance is decreased.\r\n    - `_from` MUST be 0x0 for a mint.\r\n* The `_id` argument MUST be the token type being transferred.\r\n* The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\r\n* The `_data` argument MUST contain the information provided by the sender for the transfer with its contents unaltered.\r\n    - i.e. it MUST pass on the unaltered `_data` argument sent via the `safeTransferFrom` or `safeBatchTransferFrom` call for this transfer.\r\n* The recipient contract MAY accept an increase of its balance by returning the acceptance magic value `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    - If the return value is `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` the transfer MUST be completed or MUST revert if any other conditions are not met for success.\r\n* The recipient contract MAY reject an increase of its balance by calling revert.\r\n    - If the recipient contract throws/reverts the transaction MUST be reverted.\r\n* If the return value is anything other than `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` the transaction MUST be reverted.\r\n* `onERC1155Received` (and/or `onERC1155BatchReceived`) MAY be called multiple times in a single transaction and the following requirements must be met:\r\n    - All callbacks represent mutually exclusive balance changes.\r\n    - The set of all calls to `onERC1155Received` and `onERC1155BatchReceived` describes all balance changes that occurred during the transaction in the order submitted.\r\n* A contract MAY skip calling the `onERC1155Received` hook function if the transfer operation is transferring the token to itself.\r\n\r\n**_onERC1155BatchReceived rules:_**\r\n- The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\r\n* The `_from` argument MUST be the address of the holder whose balance is decreased.\r\n    - `_from` MUST be 0x0 for a mint.    \r\n* The `_ids` argument MUST be the list of tokens being transferred.\r\n* The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in `_ids`) the holder balance is decreased by and match what the recipient balance is increased by.\r\n* The `_data` argument MUST contain the information provided by the sender for the transfer with its contents unaltered.\r\n    - i.e. it MUST pass on the unaltered `_data` argument sent via the `safeBatchTransferFrom` call for this transfer.\r\n* The recipient contract MAY accept an increase of its balance by returning the acceptance magic value `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    - If the return value is `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` the transfer MUST be completed or MUST revert if any other conditions are not met for success.\r\n* The recipient contract MAY reject an increase of its balance by calling revert.\r\n    - If the recipient contract throws/reverts the transaction MUST be reverted.\r\n* If the return value is anything other than `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` the transaction MUST be reverted.\r\n* `onERC1155BatchReceived` (and/or `onERC1155Received`) MAY be called multiple times in a single transaction and the following requirements must be met:\r\n    - All callbacks represent mutually exclusive balance changes.\r\n    - The set of all calls to `onERC1155Received` and `onERC1155BatchReceived` describes all balance changes that occurred during the transaction in the order submitted.\r\n* A contract MAY skip calling the `onERC1155BatchReceived` hook function if the transfer operation is transferring the token(s) to itself.\r\n    \r\n**_ERC1155TokenReceiver ERC-165 rules:_**\r\n* The implementation of the ERC-165 `supportsInterface` function SHOULD be as follows:\r\n    ```solidity\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n        return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\r\n                interfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")) ^ bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`).\r\n    }\r\n    ```\r\n* The implementation MAY differ from the above but:\r\n  - It MUST return the constant value `true` if `0x01ffc9a7` is passed through the `interfaceID` argument. This signifies ERC-165 support.\r\n  - It MUST return the constant value `true` if `0x4e2312e0` is passed through the `interfaceID` argument. This signifies ERC-1155 `ERC1155TokenReceiver` support.\r\n  - It MUST NOT consume more than 10,000 gas.\r\n    - This keeps it below the ERC-165 requirement of 30,000 gas, reduces the gas reserve needs and minimises possible side-effects of gas exhaustion during the call.\r\n\r\n**_Implementation specific transfer API rules:_**\r\n* If an implementation specific API function is used to transfer ERC-1155 token(s) to a contract, the `safeTransferFrom` or `safeBatchTransferFrom` (as appropriate) rules MUST still be followed if the receiver implements the `ERC1155TokenReceiver` interface. If it does not the non-standard implementation SHOULD revert but MAY proceed.    \r\n* An example:\r\n    1. An approved user calls a function such as `function myTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values);`.\r\n    2. `myTransferFrom` updates the balances for `_from` and `_to` addresses for all `_ids` and `_values`.\r\n    3. `myTransferFrom` emits `TransferBatch` with the details of what was transferred from address `_from` to address `_to`.\r\n    4. `myTransferFrom` checks if `_to` is a contract address and determines that it is so (if not, then the transfer can be considered successful).\r\n    5. `myTransferFrom` calls `onERC1155BatchReceived` on `_to` and it reverts or returns an unknown value (if it had returned `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` the transfer can be considered successful).    \r\n    6. At this point `myTransferFrom` SHOULD revert the transaction immediately as receipt of the token(s) was not explicitly accepted by the `onERC1155BatchReceived` function.            \r\n    7. If however `myTransferFrom` wishes to continue it MUST call `supportsInterface(0x4e2312e0)` on `_to` and if it returns the constant value `true` the transaction MUST be reverted, as it is now known to be a valid receiver and the previous acceptance step failed. \r\n        - NOTE: You could have called `supportsInterface(0x4e2312e0)` at a previous step if you wanted to gather and act upon that information earlier, such as in a hybrid standards scenario.\r\n    8. If the above call to `supportsInterface(0x4e2312e0)` on `_to` reverts or returns a value other than the constant value `true` the `myTransferFrom` function MAY consider this transfer successful.\r\n        - __NOTE__: this MAY result in unrecoverable tokens if sent to an address that does not expect to receive ERC-1155 tokens.\r\n* The above example is not exhaustive but illustrates the major points (and shows that most are shared with `safeTransferFrom` and `safeBatchTransferFrom`):\r\n    - Balances that are updated MUST have equivalent transfer events emitted.\r\n    - A receiver address has to be checked if it is a contract and if so relevant `ERC1155TokenReceiver` hook function(s) have to be called on it. \r\n    - Balances (and events associated) that are referenced in a call to an `ERC1155TokenReceiver` hook MUST be updated (and emitted) before the `ERC1155TokenReceiver` hook is called.\r\n    - The return values of the `ERC1155TokenReceiver` hook functions that are called MUST be respected if they are implemented.    \r\n    - Only non-standard transfer functions MAY allow tokens to be sent to a recipient contract that does NOT implement the necessary `ERC1155TokenReceiver` hook functions. `safeTransferFrom` and `safeBatchTransferFrom` MUST revert in that case (unless it is a hybrid standards implementation see \"Compatibility with other standards\").\r\n\r\n**_Minting/creating and burning/destroying rules:_**\r\n* A mint/create operation is essentially a specialized transfer and MUST follow these rules:\r\n    - To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the `TransferSingle` event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_value` of 0.\r\n    - The \"TransferSingle and TransferBatch event rules\" MUST be followed as appropriate for the mint(s) (i.e. singles or batches) however the `_from` argument MUST be set to `0x0` (i.e. zero address) to flag the transfer as a mint to contract observers.\r\n        - __NOTE:__ This includes tokens that are given an initial balance in the contract. The balance of the contract MUST also be able to be determined by events alone meaning initial contract balances (for eg. in construction) MUST emit events to reflect those balances too.            \r\n* A burn/destroy operation is essentially a specialized transfer and MUST follow these rules:\r\n    - The \"TransferSingle and TransferBatch event rules\" MUST be followed as appropriate for the burn(s) (i.e. singles or batches) however the `_to` argument MUST be set to `0x0` (i.e. zero address) to flag the transfer as a burn to contract observers.           \r\n    - When burning/destroying you do not have to actually transfer to `0x0` (that is impl specific), only the `_to` argument in the event MUST be set to `0x0` as above.\r\n* The total value transferred from address `0x0` minus the total value transferred to `0x0` observed via the `TransferSingle` and `TransferBatch` events MAY be used by clients and exchanges to determine the \"circulating supply\" for a given token ID.\r\n* As mentioned above mint/create and burn/destroy operations are specialized transfers and so will likely be accomplished with custom transfer functions rather than `safeTransferFrom` or `safeBatchTransferFrom`. If so the \"Implementation specific transfer API rules\" section would be appropriate.   \r\n    - Even in a non-safe API and/or hybrid standards case the above event rules MUST still be adhered to when minting/creating or burning/destroying.\r\n* A contract MAY skip calling the `ERC1155TokenReceiver` hook function(s) if the mint operation is transferring the token(s) to itself. In all other cases the `ERC1155TokenReceiver` rules MUST be followed as appropriate for the implementation (i.e. safe, custom and/or hybrid). \r\n\r\n\r\n##### A solidity example of the keccak256 generated constants for the various magic values (these MAY be used by implementation):\r\n\r\n```solidity\r\nbytes4 constant public ERC1155_ERC165 = 0xd9b67a26; // ERC-165 identifier for the main token standard.\r\nbytes4 constant public ERC1155_ERC165_TOKENRECEIVER = 0x4e2312e0; // ERC-165 identifier for the `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")) ^ bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`).\r\nbytes4 constant public ERC1155_ACCEPTED = 0xf23a6e61; // Return value from `onERC1155Received` call if a contract accepts receipt (i.e `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`).\r\nbytes4 constant public ERC1155_BATCH_ACCEPTED = 0xbc197c81; // Return value from `onERC1155BatchReceived` call if a contract accepts receipt (i.e `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`).\r\n```\r\n\r\n#### Compatibility with other standards\r\n\r\nThere have been requirements during the design discussions to have this standard be compatible with existing standards when sending to contract addresses, specifically ERC-721 at time of writing.\r\nTo cater for this scenario, there is some leeway with the revert logic should a contract not implement the `ERC1155TokenReceiver` as per \"Safe Transfer Rules\" section above, specifically \"Scenario#3 : The receiver does not implement the necessary `ERC1155TokenReceiver` interface function(s)\".\r\n\r\nHence in a hybrid ERC-1155 contract implementation an extra call MUST be made on the recipient contract and checked before any hook calls to `onERC1155Received` or `onERC1155BatchReceived` are made.\r\nOrder of operation MUST therefore be:\r\n1. The implementation MUST call the function `supportsInterface(0x4e2312e0)` on the recipient contract, providing at least 10,000 gas.\r\n2. If the function call succeeds and the return value is the constant value `true` the implementation proceeds as a regular ERC-1155 implementation, with the call(s) to the `onERC1155Received` or `onERC1155BatchReceived` hooks and rules associated.\r\n3. If the function call fails or the return value is NOT the constant value `true` the implementation can assume the recipient contract is not an `ERC1155TokenReceiver` and follow its other standard's rules for transfers. \r\n   \r\n*__Note that a pure implementation of a single standard is recommended__* rather than a hybrid solution, but an example of a hybrid ERC-1155/ERC-721 contract is linked in the references section under implementations.\r\n\r\nAn important consideration is that even if the tokens are sent with another standard's rules the *__ERC-1155 transfer events MUST still be emitted.__* This is so the balances can still be determined via events alone as per ERC-1155 standard rules.\r\n\r\n\r\n### Metadata\r\n\r\nThe URI value allows for ID substitution by clients. If the string `{id}` exists in any URI, clients MUST replace this with the actual token ID in hexadecimal form. This allows for a large number of tokens to use the same on-chain string by defining a URI once, for that large number of tokens.\r\n\r\n* The string format of the substituted hexadecimal ID MUST be lowercase alphanumeric: `[0-9a-f]` with no 0x prefix.\r\n* The string format of the substituted hexadecimal ID MUST be leading zero padded to 64 hex characters length if necessary.\r\n\r\nExample of such a URI: `https://token-cdn-domain/{id}.json` would be replaced with `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json` if the client is referring to token ID 314592/0x4CCE0.\r\n\r\n#### Metadata Extensions\r\n\r\nThe optional `ERC1155Metadata_URI` extension can be identified with the (ERC-165 Standard Interface Detection)[https://eips.ethereum.org/EIPS/eip-165].\r\n\r\nIf the optional `ERC1155Metadata_URI` extension is included:\r\n* The ERC-165 `supportsInterface` function MUST return the constant value `true` if `0x0e89341c` is passed through the `interfaceID` argument.\r\n* _Changes_ to the URI MUST emit the `URI` event if the change can be expressed with an event (i.e. it isn't dynamic/programmatic).\r\n    - An implementation MAY emit the `URI` event during a mint operation but it is NOT mandatory. An observer MAY fetch the metadata uri at mint time from the `uri` function if it was not emitted.    \r\n* The `uri` function SHOULD be used to retrieve values if no event was emitted. \r\n* The `uri` function MUST return the same value as the latest event for an `_id` if it was emitted.\r\n* The `uri` function MUST NOT be used to check for the existence of a token as it is possible for an implementation to return a valid string even if the token does not exist.\r\n\r\n```solidity\r\npragma solidity ^0.5.9;\r\n\r\n/**\r\n    Note: The ERC-165 identifier for this interface is 0x0e89341c.\r\n*/\r\ninterface ERC1155Metadata_URI {\r\n    /**\r\n        @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n        @dev URIs are defined in RFC 3986.\r\n        The URI MUST point to a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".        \r\n        @return URI string\r\n    */\r\n    function uri(uint256 _id) external view returns (string memory);\r\n}\r\n```\r\n\r\n#### ERC-1155 Metadata URI JSON Schema\r\n\r\nThis JSON schema is loosely based on the \"ERC721 Metadata JSON Schema\", but includes optional formatting to allow for ID substitution by clients. If the string `{id}` exists in any JSON value, it MUST be replaced with the actual token ID, by all client software that follows this standard.\r\n\r\n* The string format of the substituted hexadecimal ID MUST be lowercase alphanumeric: `[0-9a-f]` with no 0x prefix.\r\n* The string format of the substituted hexadecimal ID MUST be leading zero padded to 64 hex characters length if necessary.\r\n\r\n```json\r\n{\r\n    \"title\": \"Token Metadata\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"name\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"Identifies the asset to which this token represents\",\r\n        },\r\n        \"decimals\": {\r\n            \"type\": \"integer\",\r\n            \"description\": \"The number of decimal places that the token amount should display - e.g. 18, means to divide the token amount by 1000000000000000000 to get its user representation.\",\r\n        },\r\n        \"description\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"Describes the asset to which this token represents\",\r\n        },\r\n        \"image\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\",\r\n        },\r\n        \"properties\": {\r\n            \"type\": \"object\",\r\n            \"description\": \"Arbitrary properties. Values may be strings, numbers, object or arrays.\",\r\n        },\r\n    }\r\n}\r\n```\r\n\r\nAn example of an ERC-1155 Metadata JSON file follows. The properties array proposes some SUGGESTED formatting for token-specific display properties and metadata.\r\n\r\n```json\r\n{\r\n\t\"name\": \"Asset Name\",\r\n\t\"description\": \"Lorem ipsum...\",\r\n\t\"image\": \"https:\\/\\/s3.amazonaws.com\\/your-bucket\\/images\\/{id}.png\",\r\n\t\"properties\": {\r\n\t\t\"simple_property\": \"example value\",\r\n\t\t\"rich_property\": {\r\n\t\t\t\"name\": \"Name\",\r\n\t\t\t\"value\": \"123\",\r\n\t\t\t\"display_value\": \"123 Example Value\",\r\n\t\t\t\"class\": \"emphasis\",\r\n\t\t\t\"css\": {\r\n\t\t\t\t\"color\": \"#ffffff\",\r\n\t\t\t\t\"font-weight\": \"bold\",\r\n\t\t\t\t\"text-decoration\": \"underline\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"array_property\": {\r\n\t\t\t\"name\": \"Name\",\r\n\t\t\t\"value\": [1,2,3,4],\r\n\t\t\t\"class\": \"emphasis\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n##### Localization\r\n\r\nMetadata localization should be standardized to increase presentation uniformity across all languages. As such, a simple overlay method is proposed to enable localization. If the metadata JSON file contains a `localization` attribute, its content MAY be used to provide localized values for fields that need it. The `localization` attribute should be a sub-object with three attributes: `uri`, `default` and `locales`. If the string `{locale}` exists in any URI, it MUST be replaced with the chosen locale by all client software.\r\n\r\n##### JSON Schema\r\n\r\n```json\r\n{\r\n    \"title\": \"Token Metadata\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"name\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"Identifies the asset to which this token represents\",\r\n        },\r\n        \"decimals\": {\r\n            \"type\": \"integer\",\r\n            \"description\": \"The number of decimal places that the token amount should display - e.g. 18, means to divide the token amount by 1000000000000000000 to get its user representation.\",\r\n        },\r\n        \"description\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"Describes the asset to which this token represents\",\r\n        },\r\n        \"image\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\",\r\n        },\r\n        \"properties\": {\r\n            \"type\": \"object\",\r\n            \"description\": \"Arbitrary properties. Values may be strings, numbers, object or arrays.\",\r\n        },\r\n        \"localization\": {\r\n            \"type\": \"object\",\r\n            \"required\": [\"uri\", \"default\", \"locales\"],\r\n            \"properties\": {\r\n                \"uri\": {\r\n                    \"type\": \"string\",\r\n                    \"description\": \"The URI pattern to fetch localized data from. This URI should contain the substring `{locale}` which will be replaced with the appropriate locale value before sending the request.\"\r\n                },\r\n                \"default\": {\r\n                    \"type\": \"string\",\r\n                    \"description\": \"The locale of the default data within the base JSON\"\r\n                },\r\n                \"locales\": {\r\n                    \"type\": \"array\",\r\n                    \"description\": \"The list of locales for which data is available. These locales should conform to those defined in the Unicode Common Locale Data Repository (http://cldr.unicode.org/).\"\r\n                }\r\n            }\r\n        },\r\n    }\r\n}\r\n```\r\n\r\n##### Localized Sample\r\n\r\nBase URI:\r\n```json\r\n{\r\n  \"name\": \"Advertising Space\",\r\n  \"description\": \"Each token represents a unique Ad space in the city.\",\r\n  \"localization\": {\r\n    \"uri\": \"ipfs://QmWS1VAdMD353A6SDk9wNyvkT14kyCiZrNDYAad4w1tKqT/{locale}.json\",\r\n    \"default\": \"en\",\r\n    \"locales\": [\"en\", \"es\", \"fr\"]\r\n  }\r\n}\r\n```\r\n\r\nes.json:\r\n```json\r\n{\r\n  \"name\": \"Espacio Publicitario\",\r\n  \"description\": \"Cada token representa un espacio publicitario único en la ciudad.\"\r\n}\r\n```\r\n\r\nfr.json:\r\n```json\r\n{\r\n  \"name\": \"Espace Publicitaire\",\r\n  \"description\": \"Chaque jeton représente un espace publicitaire unique dans la ville.\"\r\n}\r\n```\r\n\r\n### Approval\r\n\r\nThe function `setApprovalForAll` allows an operator to manage one's entire set of tokens on behalf of the approver. To permit approval of a subset of token IDs, an interface such as [ERC-1761 Scoped Approval Interface](https://eips.ethereum.org/EIPS/eip-1761) is suggested.\r\nThe counterpart `isApprovedForAll` provides introspection into any status set by `setApprovalForAll`.\r\n\r\nAn owner SHOULD be assumed to always be able to operate on their own tokens regardless of approval status, so should SHOULD NOT have to call `setApprovalForAll` to approve themselves as an operator before they can operate on them.  \r\n\r\n## Rationale\r\n\r\n### Metadata Choices\r\n\r\nThe `symbol` function (found in the ERC-20 and ERC-721 standards) was not included as we do not believe this is a globally useful piece of data to identify a generic virtual item / asset and are also prone to collisions. Short-hand symbols are used in tickers and currency trading, but they aren't as useful outside of that space.\r\n\r\nThe `name` function (for human-readable asset names, on-chain) was removed from the standard to allow the Metadata JSON to be the definitive asset name and reduce duplication of data. This also allows localization for names, which would otherwise be prohibitively expensive if each language string was stored on-chain, not to mention bloating the standard interface. While this decision may add a small burden on implementers to host a JSON file containing metadata, we believe any serious implementation of ERC-1155 will already utilize JSON Metadata.\r\n\r\n### Upgrades\r\n\r\nThe requirement to emit `TransferSingle` or `TransferBatch` on balance change implies that a valid implementation of ERC-1155 redeploying to a new contract address MUST emit events from the new contract address to replicate the deprecated contract final state. It is valid to only emit a minimal number of events to reflect only the final balance and omit all the transactions that led to that state. The event emit requirement is to ensure that the current state of the contract can always be traced only through events. To alleviate the need to emit events when changing contract address, consider using the proxy pattern, such as described in ERC-1538. This will also have the added benefit of providing a stable contract address for users.\r\n\r\n### Design decision: Supporting non-batch\r\n\r\nThe standard supports `safeTransferFrom` and `onERC1155Received` functions because they are significantly cheaper for single token-type transfers, which is arguably a common use case.\r\n\r\n### Design decision: Safe transfers only\r\n\r\nThe standard only supports safe-style transfers, making it possible for receiver contracts to depend on `onERC1155Received` or `onERC1155BatchReceived` function to be always called at the end of a transfer.\r\n\r\n### Guaranteed log trace\r\n\r\nAs the Ethereum ecosystem continues to grow, many dapps are relying on traditional databases and explorer API services to retrieve and categorize data. The ERC-1155 standard guarantees that event logs emitted by the smart contract will provide enough data to create an accurate record of all current token balances. A database or explorer may listen to events and be able to provide indexed and categorized searches of every ERC-1155 token in the contract.\r\n\r\n### Approval\r\n\r\nThe function `setApprovalForAll` allows an operator to manage one's entire set of tokens on behalf of the approver. It enables frictionless interaction with exchange and trade contracts.\r\n\r\nRestricting approval to a certain set of token IDs, quantities or other rules MAY be done with an additional interface or an external contract. The rationale is to keep the ERC-1155 standard as generic as possible for all use-cases without imposing a specific approval scheme on implementations that may not need it. Standard token approval interfaces can be used, such as the suggested [ERC-1761 Scoped Approval Interface](https://github.com/ethereum/EIPs/issues/1761) which is compatible with ERC-1155.\r\n\r\n## Usage\r\n\r\nThis standard can be used to represent multiple token types for an entire domain. Both fungible and non-fungible tokens can be stored in the same smart-contract.\r\n\r\n### Batch Transfers\r\n\r\nThe `safeBatchTransferFrom` function allows for batch transfers of multiple token IDs and values. The design of ERC-1155 makes batch transfers possible without the need for a wrapper contract, as with existing token standards. This reduces gas costs when more than one token type is included in a batch transfer, as compared to single transfers with multiple transactions.\r\n\r\nAnother advantage of standardized batch transfers is the ability for a smart contract to respond to the batch transfer in a single operation using `onERC1155BatchReceived`.\r\n\r\nIt is RECOMMENDED that clients and wallets sort the token IDs and associated values (in ascending order) when posting a batch transfer, as some ERC-1155 implementations offer significant gas cost savings when IDs are sorted. See [Horizon Games - Multi-Token Standard](https://github.com/horizon-games/multi-token-standard) \"packed balance\" implementation for an example of this.\r\n\r\n### Batch Balance\r\n\r\nThe `balanceOfBatch` function allows clients to retrieve balances of multiple owners and token IDs with a single call.\r\n\r\n### Enumerating from events\r\n\r\nIn order to keep storage requirements light for contracts implementing ERC-1155, enumeration (discovering the IDs and values of tokens) must be done using event logs. It is RECOMMENDED that clients such as exchanges and blockchain explorers maintain a local database containing the token ID, Supply, and URI at the minimum. This can be built from each TransferSingle, TransferBatch, and URI event, starting from the block the smart contract was deployed until the latest block.\r\n\r\nERC-1155 contracts must therefore carefully emit `TransferSingle` or `TransferBatch` events in any instance where tokens are created, minted, transferred or destroyed.\r\n\r\n### Non-Fungible Tokens\r\n\r\nThe following strategies are examples of how you MAY mix fungible and non-fungible tokens together in the same contract. The standard does NOT mandate how an implementation must do this. \r\n\r\n##### Split ID bits\r\n\r\nThe top 128 bits of the uint256 `_id` parameter in any ERC-1155 function MAY represent the base token ID, while the bottom 128 bits MAY represent the index of the non-fungible to make it unique.\r\n\r\nNon-fungible tokens can be interacted with using an index based accessor into the contract/token data set. Therefore to access a particular token set within a mixed data contract and a particular non-fungible within that set, `_id` could be passed as `<uint128: base token id><uint128: index of non-fungible>`.\r\n\r\nTo identify a non-fungible set/category as a whole (or a fungible) you COULD just pass in the base id via the `_id` argument as `<uint128: base token id><uint128: zero>`. If your implementation uses this technique this naturally means the index of a non-fungible SHOULD be 1-based.\r\n\r\nInside the contract code the two pieces of data needed to access the individual non-fungible can be extracted with uint128(~0) and the same mask shifted by 128.\r\n\r\n```solidity\r\nuint256 baseTokenNFT = 12345 << 128;\r\nuint128 indexNFT = 50;\r\n\r\nuint256 baseTokenFT = 54321 << 128;\r\n\r\nbalanceOf(baseTokenNFT, msg.sender); // Get balance of the base token for non-fungible set 12345 (this MAY be used to get balance of the user for all of this token set if the implementation wishes as a convenience).\r\nbalanceOf(baseTokenNFT + indexNFT, msg.sender); // Get balance of the token at index 50 for non-fungible set 12345 (should be 1 if user owns the individual non-fungible token or 0 if they do not).\r\nbalanceOf(baseTokenFT, msg.sender); // Get balance of the fungible base token 54321.\r\n```\r\n\r\nNote that 128 is an arbitrary number, an implementation MAY choose how they would like this split to occur as suitable for their use case. An observer of the contract would simply see events showing balance transfers and mints happening and MAY track the balances using that information alone.\r\nFor an observer to be able to determine type (non-fungible or fungible) from an ID alone they would have to know the split ID bits format on a implementation by implementation basis.\r\n\r\nThe [ERC-1155 Reference Implementation](https://github.com/enjin/erc-1155) is an example of the split ID bits strategy.\r\n\r\n##### Natural Non-Fungible tokens\r\n\r\nAnother simple way to represent non-fungibles is to allow a maximum value of 1 for each non-fungible token. This would naturally mirror the real world, where unique items have a quantity of 1 and fungible items have a quantity greater than 1.\r\n\r\n## References\r\n\r\n**Standards**\r\n- [ERC-721 Non-Fungible Token Standard](https://eips.ethereum.org/EIPS/eip-721)\r\n- [ERC-165 Standard Interface Detection](https://eips.ethereum.org/EIPS/eip-165)\r\n- [ERC-1538 Transparent Contract Standard](https://eips.ethereum.org/EIPS/eip-1538)\r\n- [JSON Schema](https://json-schema.org/)\r\n- [RFC 2119 Key words for use in RFCs to Indicate Requirement Levels](https://www.ietf.org/rfc/rfc2119.txt)\r\n\r\n**Implementations**\r\n- [ERC-1155 Reference Implementation](https://github.com/enjin/erc-1155)\r\n- [Horizon Games - Multi-Token Standard](https://github.com/horizon-games/multi-token-standard)\r\n- [Enjin Coin](https://enjincoin.io) ([GitHub](https://github.com/enjin))\r\n- [The Sandbox - Dual ERC-1155/721 Contract](https://github.com/pixowl/thesandbox-contracts/tree/master/src/Asset)\r\n\r\n**Articles & Discussions**\r\n- [Github - Original Discussion Thread](https://github.com/ethereum/EIPs/issues/1155)\r\n- [ERC-1155 - The Crypto Item Standard](https://blog.enjincoin.io/erc-1155-the-crypto-item-standard-ac9cf1c5a226)\r\n- [Here Be Dragons - Going Beyond ERC-20 and ERC-721 To Reduce Gas Cost by ~80%](https://medium.com/horizongames/going-beyond-erc20-and-erc721-9acebd4ff6ef)\r\n- [Blockonomi - Ethereum ERC-1155 Token Perfect for Online Games, Possibly More](https://blockonomi.com/erc1155-gaming-token/)\r\n- [Beyond Gaming - Exploring the Utility of ERC-1155 Token Standard!](https://blockgeeks.com/erc-1155-token/)\r\n- [ERC-1155: A new standard for The Sandbox](https://medium.com/sandbox-game/erc-1155-a-new-standard-for-the-sandbox-c95ee1e45072)\r\n\r\n## Copyright\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/1155/reactions",
    "total_count": 162,
    "+1": 76,
    "-1": 0,
    "laugh": 0,
    "hooray": 38,
    "confused": 0,
    "heart": 31,
    "rocket": 15,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/398241330",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-398241330",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 398241330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODI0MTMzMA==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T01:01:52Z",
    "updated_at": "2018-06-19T01:07:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Suggestion: Add in some detail of how to encode extra information into the _itemId to facilitate the mixing of different item/token standards.\r\n\r\nAn example strategy to mix Fungible and Non-Fungible items together in the same contract for example may be to pass the base item ID in the top 128 bits of the uint256 _itemID parameter and then use the bottom 128 bits for any extra data you wish to pass to the contract.\r\n\r\nIn the ERC-721 case individual NFTs are interacted with using an index based accessor into the contract/item data set. Therefore to access a particular item set within a mixed data contract and particular NFT within that set, _itemID could be passed as \"<uint128: base item id><uint128: index of NFT>\". \r\n\r\nInside the contract code the two pieces of data needed to access the individual NFT can be extracted with uint128(~0) and the same mask shifted by 128.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/398241330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399777037",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-399777037",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 399777037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTc3NzAzNw==",
    "user": {
      "login": "coinfork",
      "id": 2774008,
      "node_id": "MDQ6VXNlcjI3NzQwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2774008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coinfork",
      "html_url": "https://github.com/coinfork",
      "followers_url": "https://api.github.com/users/coinfork/followers",
      "following_url": "https://api.github.com/users/coinfork/following{/other_user}",
      "gists_url": "https://api.github.com/users/coinfork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coinfork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coinfork/subscriptions",
      "organizations_url": "https://api.github.com/users/coinfork/orgs",
      "repos_url": "https://api.github.com/users/coinfork/repos",
      "events_url": "https://api.github.com/users/coinfork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coinfork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-24T18:28:41Z",
    "updated_at": "2018-06-24T18:28:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Added the split bits strategy to the description, thanks :)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399777037/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399800676",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-399800676",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 399800676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTgwMDY3Ng==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T00:17:57Z",
    "updated_at": "2018-06-27T07:59:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Transfer made using this standard, 2 FTs (10k + 500) and 100 NFTs (100): \r\n\r\nhttps://ropsten.etherscan.io/tx/0xfc924192fb068a6326bc28a2f5762be3a4b1fb6a1ef801bf6bf02c06af929d53\r\n\r\nFT \"ENJ\" ID: 0x54e8b965cee12ac713ee58508b0d07300000000000000000000000000000000\r\nFT \"Gold\" ID: 0x3bf7ded270a4ab1d5e170cc79deb931800000000000000000000000000000000\r\nNFT \"Lots of NFTs\" ID: 0x4362b8ce48bee741861f523a3b91803c00000000000000000000000000000000\r\n\r\n10000, 500 and 100*1 sent in one transaction costing 5480196 gas (~$2.42 at time of tx).\r\n\r\nNote, this was done in an advanced solution with a lot more features than a basic impl. Basic/ref impl and gas as compared to current standards in basic form will be added soon.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399800676/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399841476",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-399841476",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 399841476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg0MTQ3Ng==",
    "user": {
      "login": "aerykk",
      "id": 156768,
      "node_id": "MDQ6VXNlcjE1Njc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/156768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aerykk",
      "html_url": "https://github.com/aerykk",
      "followers_url": "https://api.github.com/users/aerykk/followers",
      "following_url": "https://api.github.com/users/aerykk/following{/other_user}",
      "gists_url": "https://api.github.com/users/aerykk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aerykk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aerykk/subscriptions",
      "organizations_url": "https://api.github.com/users/aerykk/orgs",
      "repos_url": "https://api.github.com/users/aerykk/repos",
      "events_url": "https://api.github.com/users/aerykk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aerykk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T06:05:59Z",
    "updated_at": "2018-06-25T06:06:49Z",
    "author_association": "NONE",
    "body": "Hyperbridge is interested in potentially supporting this standard in our upcoming marketplace. We'd like to see where other organizations stand on this as it's an obvious problem, and if the proposed solution works for you. @coinfork I don't see source code, so I'm going to take to take it that it's currently proprietary. Is there any examples in the wild as of yet?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399841476/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399852164",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-399852164",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 399852164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTg1MjE2NA==",
    "user": {
      "login": "coinfork",
      "id": 2774008,
      "node_id": "MDQ6VXNlcjI3NzQwMDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2774008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coinfork",
      "html_url": "https://github.com/coinfork",
      "followers_url": "https://api.github.com/users/coinfork/followers",
      "following_url": "https://api.github.com/users/coinfork/following{/other_user}",
      "gists_url": "https://api.github.com/users/coinfork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coinfork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coinfork/subscriptions",
      "organizations_url": "https://api.github.com/users/coinfork/orgs",
      "repos_url": "https://api.github.com/users/coinfork/repos",
      "events_url": "https://api.github.com/users/coinfork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coinfork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T07:01:22Z",
    "updated_at": "2018-06-25T07:01:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @ericmuyser thanks for your interest! We currently have a deployed contract on Ropsten (please see AC0DEM0NK3Y's post above) that is specifically tailored to our gaming use-case. We'll consider adding a reference implementation to the standard.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399852164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399926409",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-399926409",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 399926409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTkyNjQwOQ==",
    "user": {
      "login": "powether",
      "id": 36596029,
      "node_id": "MDQ6VXNlcjM2NTk2MDI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36596029?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/powether",
      "html_url": "https://github.com/powether",
      "followers_url": "https://api.github.com/users/powether/followers",
      "following_url": "https://api.github.com/users/powether/following{/other_user}",
      "gists_url": "https://api.github.com/users/powether/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/powether/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powether/subscriptions",
      "organizations_url": "https://api.github.com/users/powether/orgs",
      "repos_url": "https://api.github.com/users/powether/repos",
      "events_url": "https://api.github.com/users/powether/events{/privacy}",
      "received_events_url": "https://api.github.com/users/powether/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T11:57:57Z",
    "updated_at": "2018-06-25T11:57:57Z",
    "author_association": "NONE",
    "body": "I hope you didn't announce this like \"Biggest innovation in the manking\".  5480196 gas is unacceptably high. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399926409/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399969060",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-399969060",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 399969060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTk2OTA2MA==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T14:20:44Z",
    "updated_at": "2018-06-25T14:29:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "\"I hope you didn't announce this like \"Biggest innovation in the manking\". 5480196 gas is unacceptably high.\"\r\n\r\nI think you need to look at the gas cost relative to the alternatives and how this differs from them. If you average this down (even without the fungible transfers that went with it) the above transfer cost ~55K per NFT sent, which compared to many other ERC721 implementations for eg. (seeing numbers 250K+ each) this offers significant savings. A simple ETH transfer costs 21K and ERC20 tokens look to cost anywhere from 35k to 130k each tx after some quick explorer checks in the top 100. So I would say the above cost is quite reasonable.\r\n\r\nOn top of that there is also the reduction of number of contracts necessary to be deployed to the network, the transaction numbers being reduced (in this case 102 : 1) and also the possible features this would bring that wouldn't be possible with separate contracts and incompatible NFT & FT standards.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399969060/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400044803",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400044803",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400044803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA0NDgwMw==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T18:11:21Z",
    "updated_at": "2018-06-25T18:11:21Z",
    "author_association": "NONE",
    "body": "I don't have strong opinions yet, but did y'all explore the option of composing ERC721 and 20/721 to get similar functionality? As in, creating a `AllItems` contract that is 721 but fully controlled by whatever governance mechanism you'd prefer. Then, owners can create a new item set like `createNonFungible(...)` to deploy a 721 contract and add that new contract address as one of the tokens tracked by the contract (owned by the `AllItems` contract itself). Similar for fungible assets. Then clients can get the set of all items via iterating the 721 interface, ERC165 detect fungibility or non-fungibility, and either 1) directly interface with those sub-contracts to manage their items or 2) you could provide similar `multi-send` features by proxying transfer requests through the `AllItems` contract that's either an approved operator of the sub-contract or is just an all-seeing authority (deferring the access-control logic to the `AllItems` contract to verify who owns what before transferring).\r\n\r\nAnyway, it might be a little roundabout, but it _does_ avoid the creation of a new standard by extending and composing existing ones, which is neat.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400044803/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400055870",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400055870",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400055870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA1NTg3MA==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T18:47:50Z",
    "updated_at": "2018-06-25T18:48:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi @shrugs while not getting too far into the implementation details of a system that uses this standard, in the above example where two different fungible types and one non-fungible set were operated on what a user/creator could do is call a \"deployERCAdapter\" function on the particular type if they so wish which will deploy an adapter contract that is either fully ERC721 or ERC20 compatible depending on the base type. This means the individual set is now backwards compatible with those standards and can therefore be used in any current system that supports them.\r\nSo we get the best of both worlds, full compatibility with ERC20 and ERC721 (as an option) but also the ability to mix these two standards together by operating at the 1155 \"main level\" and so can transfer/operate on these together and on multiple of the types, in the same transaction.\r\n\r\nExtending ERC721 rather than making a new standard that can mix different fungibility (and then supporting ERC721 with backwards compatibility) wouldn't have quite worked as ERC721 mandatory standard has certain functions that only make it suitable for a single data set in a single contract such as \"balanceOf(address _owner)\" and \"isApprovedForAll(address _owner, address _operator)\" for example.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400055870/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400058221",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400058221",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400058221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA1ODIyMQ==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T18:55:21Z",
    "updated_at": "2018-06-25T18:57:08Z",
    "author_association": "NONE",
    "body": "@AC0DEM0NK3Y the ERC adaptor is interesting, yeah.\r\n\r\nThe fungible/non-fungible tokens would not be tracked in a single 721; their contract addresses would be.\r\n\r\n```\r\nAllItems (ERC721, tracking contract addresses)\r\n  |__ Sword contract (ERC20)\r\n  |\r\n  |__ Legendary Armor contract (ERC721)\r\n```\r\n\r\nso each individual contract still fulfills 721 and 20 to the best of their ability, and you add additional features like multi-send and factory methods to the `AllItems` parent contract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400058221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400060404",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400060404",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400060404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA2MDQwNA==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T19:01:52Z",
    "updated_at": "2018-06-25T19:13:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "That is a way to track perhaps, but is much less user/network friendly. If I want to send you an NFT A and and NFT B and do that through your tracking contract I'd have to call approve on contract A and B separately to give the tracking contract the allowance, then call the tracking contract to do the transfer.\r\nThat is 3 individual transactions (4 if your tracking contract doesn't support arrays for transfer API).\r\n\r\nBy allowing things to be mixed together and stored in a single contract I can transfer A and B to you in a single tx.\r\n\r\nA and B contract also have to be deployed. It's more data on the chain than is needed and that is not sustainable and/or limiting imho.\r\nIf you consider use cases like a videogames that have lots of different types of NFTs and how many games there are in the market now and will be in the future, having to deploy an ERC20/ERC721 contract to support those types every time is not good for the ETH network as a whole going forward and that is just one use case.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400060404/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400069828",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400069828",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400069828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA2OTgyOA==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T19:35:52Z",
    "updated_at": "2018-06-25T19:35:52Z",
    "author_association": "NONE",
    "body": "I mentioned that above as well, perhaps I wasn't clear enough; you can implement multi-send functionality by making the `AllItems` contract a designated operator (or a super user of sorts) for transferring tokens/items and then implement access control at the `AllItems` layer, allowing you to skip approvals and send multiple items with a single transaction exactly as you do in 1155. Nothing has changed here.\r\n\r\nI agree that composability does come with gas costs, and these should be measured. You can also separate logic and data using proxy patterns and cut down on duplicate logic deployments. (and before someone references the parity wallet, this is very much the same approach that 1155 uses by consolidating the logic and data into a single contract; it's still a single point of failure if there is a show-stopping bug).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400069828/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400078111",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400078111",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400078111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA3ODExMQ==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T20:05:42Z",
    "updated_at": "2018-06-25T20:05:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "It sounds like it _could_ work, but it doesn't fix the wastage/management issue. Deploying a contract for every NFT is not future proof imho.\r\n\r\nYour pattern seems like it would work with 1155 though. The register function that you are proposing could be something someone implements and then this returns an ID to match the contract address when calling the function. The call to transfer A and B in that case would might be to call:\r\n\r\nuint aID = 1155.register(ContractOfA);\r\nuint aIndex = 12345; // NFT index I want to send from contract A\r\nuint bID = 1155.register(ContractOfB);\r\nuint bIndex = 888; // NFT index I want to send from contract B\r\nContractOfA.makeSuperUser(1155);\r\nContractOfB.makeSuperUser(1155);\r\n1155.transfer([aID, aIndex, bID, bIndex], [yourAddr,yourAddr],[1,1]);\r\n\r\nThis now needs an extension to ERC721 to append \"makeSuperUser\" function.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400078111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400086343",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400086343",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400086343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA4NjM0Mw==",
    "user": {
      "login": "shrugs",
      "id": 1535001,
      "node_id": "MDQ6VXNlcjE1MzUwMDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shrugs",
      "html_url": "https://github.com/shrugs",
      "followers_url": "https://api.github.com/users/shrugs/followers",
      "following_url": "https://api.github.com/users/shrugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/shrugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shrugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shrugs/subscriptions",
      "organizations_url": "https://api.github.com/users/shrugs/orgs",
      "repos_url": "https://api.github.com/users/shrugs/repos",
      "events_url": "https://api.github.com/users/shrugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shrugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T20:34:26Z",
    "updated_at": "2018-06-25T20:34:26Z",
    "author_association": "NONE",
    "body": "> ((an aside: using an existing standard is the definition of futureproof))\r\n\r\nsuperuser would need to be added, yes. you could also get away with operator functionality that already exists; simply default to setting the approved operator of every token to the `AllItems` contract. users could revoke, but 1) why would they and 2) to restore previous behavior, they can simply re-approve the operator. compatible with both 20 and 721. \r\n\r\nThe data/logic separation via proxy is a well-known pattern and does indeed work. The only unknown is the gas implications, which could be measured. Having your sub-items be compatible with 20/721 by default is a very powerful effect. We've only just started the whole NFT thing, and fracturing into another standard instead of leveraging existing ones isn't really a strong move, imo. Existing indexers (Toshi, Trust Wallet, etc) would need to have extra logic to monitor this standard as well. And deploying ERC adaptors for every token just gets you back to the point I'm making; it should just be compatible with the existing standard by default.\r\n\r\nAnyway, give it a think and see if it solves the problem you're interested in solving. I'm very familiar with the space and the problems you're facing, specifically around gaming, and have thought about this at length as well. A next step would be profiling the gas costs of a composable approach, which I may mind time to do within the next week or two, but can't guarantee.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400086343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400091515",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400091515",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400091515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA5MTUxNQ==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T20:52:20Z",
    "updated_at": "2018-06-25T20:59:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> an aside: using an existing standard is the definition of futureproof\r\n\r\nI would call that backwards compatible but hey :)\r\n\r\n> The data/logic separation via proxy is a well-known pattern and does indeed work. \r\n\r\nYes, we do this or sorts in our implementation. Storage contract holds all the data, then the rest is an API over the top of it. Many reasons to do this.\r\nSo in the above test, consider that a test of gas costs perhaps.\r\n\r\nThanks for the discussion @shrugs looking forward to more.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400091515/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400100947",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400100947",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400100947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEwMDk0Nw==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T21:25:39Z",
    "updated_at": "2018-06-25T22:18:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello! \r\n\r\nHappy to see other people working on something like this. I personally recommend the following changes ; \r\n\r\n1. Remove `transfer(...)`. It's a special case of `transferFrom()` and is less explicit, which isn't great.\r\n\r\n2. Add `safeTransferFrom(...)` instead of passing data in second 128 bits. Explicit > implicit should be favored in standards imo. \r\n\r\n3. Change arguments order of transferFrom(uint256[] _itemId, address[] _from, address[] _to, uint256[] _value)nt ordering from `transferFrom(uint256[] _itemId, address[] _from, address[] _to, uint256[] _value)` to `transferFrom(address[] _from, address[] _to, uint256[] _itemId, uint256[] _value)` which seems more consistent with current standards. \r\n\r\n4. Change the current approval logic to something like `setApprovalForAll()` or `setOperator()` instead of using specific approvals. Approvals are almost exclusively used to give access to your tokens to a trusted/vetted contract. I have yet to see an example of a specific approval value. Even with erc-721, I have yet to see a use case where giving approval to a single ID is useful. \r\n\r\nWhen it comes to `transfer()` and `transferFrom()`, is the reason for \"not\" throwing and return a bool instead to prevent a single transfer from breaking the entire transfer? What does it mean to return false? That at least one of them was unsuccessful? All of them? Not sure I understand the logic here and would love some extra info.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400100947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400118883",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400118883",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400118883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDExODg4Mw==",
    "user": {
      "login": "amittmahajan",
      "id": 689785,
      "node_id": "MDQ6VXNlcjY4OTc4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/689785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amittmahajan",
      "html_url": "https://github.com/amittmahajan",
      "followers_url": "https://api.github.com/users/amittmahajan/followers",
      "following_url": "https://api.github.com/users/amittmahajan/following{/other_user}",
      "gists_url": "https://api.github.com/users/amittmahajan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amittmahajan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amittmahajan/subscriptions",
      "organizations_url": "https://api.github.com/users/amittmahajan/orgs",
      "repos_url": "https://api.github.com/users/amittmahajan/repos",
      "events_url": "https://api.github.com/users/amittmahajan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amittmahajan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T22:42:56Z",
    "updated_at": "2018-06-25T22:47:36Z",
    "author_association": "NONE",
    "body": "Thanks for putting this together! \r\n\r\nA few folks (@petejkim (Cipher/Toshi), @lsankar4033 (PepeDapp), @pkieltyka (Horizon Games), and myself (Rare Bits/Fan Bits)) were actually bouncing around a Semi Fungible Token standard that may make sense to combine efforts on given the similarities. I've put it below for posterity. That being said, a couple ideological things that may be worth considering:\r\n\r\n1. ERC721 was just approved after a lot of deliberation and it seems like maintaining this as an evolution/superset of ERC721/ERC20 in terms of nomenclature / API compatibility will help with adoption / building to consensus quickly. We took the approach of starting with the ERC721 spec and then evolving from there to ensure we captured all of the hard work and thought that went into that standard.\r\n\r\n2. This is bigger than games and the ecosystem for NFTs is already spreading well beyond virtual items. Switching from Items to Tokens doesn't make a whole lot of sense given the existing ecosystem that exists around these standards already. \r\n\r\n3. We all agreed that having indexing/metadata functions are required versus optional makes life a lot easier for wallet providers and other indexers trying to display the data and interoperate with these contracts.\r\n\r\n```solidity\r\npragma solidity ^0.4.20;\r\n\r\n/// The goal of this spec is to handle a now-common case of having different\r\n/// token types with fungibility within each type.\r\n\r\n/// Many DApps are either using ERC721 with multiple-tokens of the same type or deploying \r\n/// multiple ERC20 contracts to create fungible tokens within a set non-fungible token types.\r\n/// An example would be a trading card game with different types but where \r\n/// each card of a given type is indistinguishable from the other. Or an art \r\n/// token where each print of an art piece is indistinguishable from any other print.\r\n\r\n/// This is a *VERY* draft spec that is modified from the (near) final\r\n/// ERC721-spec. We should evolve it as necessary from here.\r\n\r\n/// @title ERC->>>TBD<<< Semi-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-TBD.md\r\n///  Note: the ERC-165 identifier for this interface is >>>TBD<<<\r\ninterface ERCTBD /* is ERC165 */ {\r\n    /// @dev This emits when ownership of any SFT changes by any mechanism.\r\n    ///  This event emits when SFTs are created (from == 0) and destroyed\r\n    ///  (to == 0). Exception: during contract creation, any number of SFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that SFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenType, uint256 indexed _value);\r\n\r\n    /// @dev This emits when the approved address for an SFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that SFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenType, uint256 indexed _value);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all SFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Returns the total token supply.\r\n    /// @dev Throws if '_tokenType' is not a valid SFT\r\n    /// @param _tokenType The type of SFT to get the totalSupply of. Must be less than the return value of totalTokenTypes\r\n    /// @return The total supply of the given SFT\r\n    function totalSupply(uint256 _tokenType) external view returns (uint256 totalSupply);\r\n\r\n    /// @notice Count all SFTs of a given type owned by _owner\r\n    /// @dev Throws if '_tokenType' is not a valid SFT or if _owner is set to the zero-address\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @param _tokenType The type of SFT to get the balance of. Must be less than the return value of totalTokenTypes\r\n    function balanceOf(address _owner, uint256 _tokenType) external view returns (uint256 balance);\r\n    \r\n    /// @notice Return all token types for a given _owner\r\n    /// @param _owner An address for whom to return token types for\r\n    function tokenTypesOf(address _owner) external view returns (uint256[] tokenTypes);\r\n\r\n    /// @notice Returns the total number of token types for this contract\r\n    /// @dev Can possibly be zero\r\n    /// @return The total number of token types\r\n    function totalTokenTypes() external view returns (uint256 totalTokenTypes);\r\n\r\n    /// @notice Returns the total number of distinct owners who own _tokenType\r\n    /// @dev Can possibly be zero\r\n    /// @return The total number of distinct owners owning _tokenType\r\n    function totalOwners(uint256 _tokenType) external view returns (uint256 totalOwners);\r\n\r\n    /// @notice Returns the owner of _tokenType specified by _ownerIndex\r\n    /// @param _ownerIndex Unique identifier of an owner of _tokenType\r\n    /// @return The address of the ownner of _tokenType specified by _ownerIndex\r\n    function ownerOf(uint256 _tokenType, uint256 _ownerIndex) external view returns (address owner);\r\n\r\n    /// @notice Transfers the ownership of some SFTs from one address to another address\r\n    /// @dev Throws unless 'msg.sender' is the current owner, an authorized\r\n    ///  operator, or the approved address for the SFTs. Throws if '_from' is\r\n    ///  not the current owner. Throws if '_to' is the zero address. Throws if\r\n    ///  '_tokenType' is not a valid SFT type. When transfer is complete, this function\r\n    ///  checks if '_to' is a smart contract (code size > 0). If so, it calls\r\n    ///  'onERCTBDReceived' on '_to' and throws if the return value is not\r\n    ///  'bytes4(keccak256(\"onERCTBDReceived(address,address,uint256,bytes)\"))'.\r\n    /// @param _from The current owner of the SFTs\r\n    /// @param _to The new owner\r\n    /// @param _tokenType The SFT type to transfer. Must be less than the return value of totalTokenTypes\r\n    /// @param _value Amount of SFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to '_to'\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenType, uint256 _value, bytes data) external payable;\r\n\r\n    /// @notice Transfers the ownership of some SFTs from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\".\r\n    /// @param _from The current owner of the SFTs\r\n    /// @param _to The new owner\r\n    /// @param _tokenType The SFT type to transfer. Must be less than the return value of totalTokenTypes\r\n    /// @param _value Amount of SFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenType, uint256 _value) external payable;\r\n\r\n    /// @notice Transfer ownership of some SFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT '_to' IS CAPABLE OF RECEIVING SFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless 'msg.sender' is the current owner, an authorized\r\n    ///  operator, or the approved address for this SFT. Throws if '_from' is\r\n    ///  not the current owner. Throws if '_to' is the zero address. Throws if\r\n    ///  '_tokenType' is not a valid SFT.\r\n    /// @param _from The current owner of the SFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenType The SFT type to transfer. Must be less than the return value of totalTokenTypes\r\n    function transferFrom(address _from, address _to, uint256 _tokenType, uint256 _value) external payable;\r\n\r\n    /// @notice Change or reaffirm the approved address for some SFTs\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless 'msg.sender' is the current owner of the SFTs, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved SFT controller\r\n    /// @param _tokenType The SFT type to approve. Must be less than the return value of totalTokenTypes\r\n    /// @param _value The amount of SFT able to be withdrawn\r\n    function approve(address _approved, uint256 _tokenType, uint256 _value) external payable;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of msg.sender's assets\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the amount of allowance a spender has for a given owner and SFT type\r\n    /// @param _owner The address that owns the SFTs\r\n    /// @param _spender The address that is operating on behalf of the owner\r\n    /// @param _tokenType The type of SFT to find the approved address for. Must be less than the return value of totalTokenTypes\r\n    /// @return The amount able to be spent by the spender for a given owner and type\r\n    function allowance(address _owner, address _spender, uint256 _tokenType) external view returns (uint256);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the SFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if '_operator' is an approved operator for '_owner', false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n\r\n    /// @notice A descriptive name for a collection of SFTs in this contract\r\n    function name() external view returns (string _name);\r\n\r\n    /// @notice An abbreviated name for SFTs of a given type\r\n    function symbol(uint256 _tokenType) external view returns (string _symbol);\r\n\r\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n    /// @dev Throws if '_tokenType' is not a valid SFT. URIs are defined in RFC\r\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n    ///  Metadata JSON Schema\".\r\n    function tokenURI(uint256 _tokenType) external view returns (string);    \r\n}\r\n\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return 'true' if the contract implements 'interfaceID' and\r\n    ///  'interfaceID' is not 0xffffffff, 'false' otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400118883/reactions",
      "total_count": 20,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 13,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400128212",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400128212",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400128212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEyODIxMg==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T23:34:16Z",
    "updated_at": "2018-06-25T23:34:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@amittmahajan Could you explain what `ownerOf` and `totalOwners` are referring to? It's not clear to me what the intentions are with these functions.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400128212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400129013",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400129013",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400129013,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEyOTAxMw==",
    "user": {
      "login": "amittmahajan",
      "id": 689785,
      "node_id": "MDQ6VXNlcjY4OTc4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/689785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amittmahajan",
      "html_url": "https://github.com/amittmahajan",
      "followers_url": "https://api.github.com/users/amittmahajan/followers",
      "following_url": "https://api.github.com/users/amittmahajan/following{/other_user}",
      "gists_url": "https://api.github.com/users/amittmahajan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amittmahajan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amittmahajan/subscriptions",
      "organizations_url": "https://api.github.com/users/amittmahajan/orgs",
      "repos_url": "https://api.github.com/users/amittmahajan/repos",
      "events_url": "https://api.github.com/users/amittmahajan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amittmahajan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T23:39:42Z",
    "updated_at": "2018-06-25T23:39:42Z",
    "author_association": "NONE",
    "body": "@PhABC `totalOwners` is referring to the number of unique addresses that hold a given tokenType. `ownerOf` is one element of that \"owners\" array of a given tokenType. it allows you to enumerate every owner of a given tokenType.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400129013/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400130376",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400130376",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400130376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzMDM3Ng==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T23:47:52Z",
    "updated_at": "2018-06-25T23:47:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for adding that @amittmahajan and we'll discuss it internally. What first springs to mind however is that your proposal standard does not allow for approving/transferring etc. on multiple things in one shot as they do not take array arguments.\r\n\r\nAlso the functions such as @PhABC is talking about like totalOwners sound immediately to me like they would need more storage and so gas costs to maintain. I would advocate for as little as possible on chain storage and this sort of \"metadata\" instead recorded off-chain. \r\nYou could find the owners/track balance via transfer log events for eg. and store that info elsewhere. It isn't necessary for the users to have that info stored and the developers can get this info from a local node.\r\nThe less we bloat ETH while providing great features for the users the better imho.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400130376/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400130682",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400130682",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400130682,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzMDY4Mg==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T23:49:50Z",
    "updated_at": "2018-06-25T23:55:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@amittmahajan Ah I see. How do you keep track of all the owners? I can understand iterating over all token types an user owns if the totsl number of token types is somewhat low, but I can't really see a way to iterate over the owners unless you keep a big array of owners for each token types. Any insights?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400130682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400131562",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400131562",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400131562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzMTU2Mg==",
    "user": {
      "login": "dwking2000",
      "id": 3486215,
      "node_id": "MDQ6VXNlcjM0ODYyMTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3486215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dwking2000",
      "html_url": "https://github.com/dwking2000",
      "followers_url": "https://api.github.com/users/dwking2000/followers",
      "following_url": "https://api.github.com/users/dwking2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/dwking2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dwking2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dwking2000/subscriptions",
      "organizations_url": "https://api.github.com/users/dwking2000/orgs",
      "repos_url": "https://api.github.com/users/dwking2000/repos",
      "events_url": "https://api.github.com/users/dwking2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dwking2000/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T23:55:20Z",
    "updated_at": "2018-06-25T23:55:20Z",
    "author_association": "NONE",
    "body": "Good to see this proposal. <p>Our use case is for ERC-20 tokens. We want to 'color' tokens by community while allowing them to be fungible on exchanges as a 'clear' token. Within communities transfer of colored tokens will be allowed in the community color only, but outside of communities the rest of the world will see the tokens as a single ERC-20 type token. This looks like a similar solution I came up with to solve this. <p>A standard will encourage the creation of tools and potentially wallets will that can deal with this paradigm. My question: is this EIP just for NFTs or is it intended to be used for ERC-20 tokens as well? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400131562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400132333",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400132333",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400132333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzMjMzMw==",
    "user": {
      "login": "amittmahajan",
      "id": 689785,
      "node_id": "MDQ6VXNlcjY4OTc4NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/689785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amittmahajan",
      "html_url": "https://github.com/amittmahajan",
      "followers_url": "https://api.github.com/users/amittmahajan/followers",
      "following_url": "https://api.github.com/users/amittmahajan/following{/other_user}",
      "gists_url": "https://api.github.com/users/amittmahajan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amittmahajan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amittmahajan/subscriptions",
      "organizations_url": "https://api.github.com/users/amittmahajan/orgs",
      "repos_url": "https://api.github.com/users/amittmahajan/repos",
      "events_url": "https://api.github.com/users/amittmahajan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amittmahajan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T00:00:00Z",
    "updated_at": "2018-06-26T00:10:15Z",
    "author_association": "NONE",
    "body": "@PhABC @AC0DEM0NK3Y re: `totalOwners`, `ownerOf`. not married to including these because we've built out the infra already to support it but I included it with the intent of spurring the discussion if there was a more clever way to implement it / see what the community demand for such a feature would be.\r\n\r\nre: multiple token transfer, i think it's a good idea and has a lot of use cases. That being said, I wouldn't be surprised if that function is mostly called with a single type. Perhaps it makes sense to implement that as a new function (`multiTransfer`) to reduce complexity for the most basic use case of transfer. If I were to vote right now, i'd say stick with the current version (one func `transfer` that takes multiple types) but wanted to raise the topic of two funcs to be diligent.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400132333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400133589",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400133589",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400133589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzMzU4OQ==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T00:06:51Z",
    "updated_at": "2018-06-26T14:24:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@amittmahajan batch transfer is critical for these types of tokens, imo, it's really what makes such an interface interesting. I personally vote for `batchTransferFrom(..)` to follow naming conventions. I do agree that some applications might favor single type transfer while others might utilize the batch transfer functionality more often.Convince me :). \r\n\r\nI personally would not include `totalOwners` & `ownerOf` as they add significant gas cost and their on-chain utility seems limited. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400133589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400133616",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400133616",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400133616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzMzYxNg==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T00:07:00Z",
    "updated_at": "2018-06-26T01:33:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "We originally had a transfer (single) and multiTransfer (array) in the standard but after testing gas differences and usability we decided it better to just use the array version and name it transfer for simplicity.\r\n\r\nIf you pass in MEW for eg. as well as other methods, the difference in array vs non-array method is almost identical (it is identical in MEW) and the gas difference is negligible and the power of the feature is huge for gas savings and for functionaility.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400133616/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400134639",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400134639",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400134639,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzNDYzOQ==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T00:13:11Z",
    "updated_at": "2018-06-26T00:32:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "With my implementation, it costs around 400k gas to send 100 token types, but single transfer is about 2k gas more expensive using the `batchTransferFrom` function compared to the `transferFrom()`.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400134639/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400137770",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400137770",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400137770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzNzc3MA==",
    "user": {
      "login": "lsankar4033",
      "id": 451947,
      "node_id": "MDQ6VXNlcjQ1MTk0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsankar4033",
      "html_url": "https://github.com/lsankar4033",
      "followers_url": "https://api.github.com/users/lsankar4033/followers",
      "following_url": "https://api.github.com/users/lsankar4033/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsankar4033/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsankar4033/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsankar4033/subscriptions",
      "organizations_url": "https://api.github.com/users/lsankar4033/orgs",
      "repos_url": "https://api.github.com/users/lsankar4033/repos",
      "events_url": "https://api.github.com/users/lsankar4033/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsankar4033/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T00:29:58Z",
    "updated_at": "2018-06-26T00:31:37Z",
    "author_association": "NONE",
    "body": "@AC0DEM0NK3Y one downside of a single `transfer` method (vs. separate `transfer` and `multiTransfer` methods) is that there's an additional burden on 3rd parties integrating with all standards, as they have to remember that `transfer` has different argument lists (address vs. address[]) for ERC721/20/1155. \r\n\r\nI think the simplicity cost of having two methods is worth the integration win of cleaner unification with existing standards.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400137770/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400147744",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400147744",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400147744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE0Nzc0NA==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T01:31:33Z",
    "updated_at": "2018-06-26T01:31:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@lsankar4033 We'll talk/test about that internally and come back on it.\r\n\r\nMy first thought is that transfer has to change even in singular form to include the token/item type:\r\n\r\n> function transfer(address _to, uint256 _value)\r\n> \r\n> vs\r\n> \r\n> function transfer(uint256 _itemId, address _to, uint256 _value)\r\n> or\r\n> function transfer(uint256[] _itemId, address[] _to, uint256[] _value)\r\n\r\nso if it has to change signature anyway, why not go for the most powerful version if it is just as easy to call, almost as cheap and provides the opportunity for much more functionality?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400147744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400149024",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400149024",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400149024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE0OTAyNA==",
    "user": {
      "login": "AC0DEM0NK3Y",
      "id": 36201133,
      "node_id": "MDQ6VXNlcjM2MjAxMTMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36201133?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AC0DEM0NK3Y",
      "html_url": "https://github.com/AC0DEM0NK3Y",
      "followers_url": "https://api.github.com/users/AC0DEM0NK3Y/followers",
      "following_url": "https://api.github.com/users/AC0DEM0NK3Y/following{/other_user}",
      "gists_url": "https://api.github.com/users/AC0DEM0NK3Y/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AC0DEM0NK3Y/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AC0DEM0NK3Y/subscriptions",
      "organizations_url": "https://api.github.com/users/AC0DEM0NK3Y/orgs",
      "repos_url": "https://api.github.com/users/AC0DEM0NK3Y/repos",
      "events_url": "https://api.github.com/users/AC0DEM0NK3Y/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AC0DEM0NK3Y/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T01:39:17Z",
    "updated_at": "2018-06-26T01:39:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> A standard will encourage the creation of tools and potentially wallets will that can deal with this paradigm. My question: is this EIP just for NFTs or is it intended to be used for ERC-20 tokens as well?\r\n\r\n@dwking2000 we intend it for both. In our implementation we mix erc20 and erc721 style, can transfer (and lots of other ops) both types in the same tx and can deploy an adapter for each type that fully supports ERC20 and ERC721 API on the tokens if the user wishes.\r\n\r\nWe've tried to plan for the future while supporting current standards whilst also trying to keep the on-chain storage as low as possible.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400149024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400150081",
    "html_url": "https://github.com/ethereum/EIPs/issues/1155#issuecomment-400150081",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/1155",
    "id": 400150081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE1MDA4MQ==",
    "user": {
      "login": "PhABC",
      "id": 9306422,
      "node_id": "MDQ6VXNlcjkzMDY0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9306422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhABC",
      "html_url": "https://github.com/PhABC",
      "followers_url": "https://api.github.com/users/PhABC/followers",
      "following_url": "https://api.github.com/users/PhABC/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions",
      "organizations_url": "https://api.github.com/users/PhABC/orgs",
      "repos_url": "https://api.github.com/users/PhABC/repos",
      "events_url": "https://api.github.com/users/PhABC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhABC/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T01:45:20Z",
    "updated_at": "2018-06-26T01:45:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@AC0DEM0NK3Y When you say you tested the gas cost difference of using arrays by default, would you mind sharing the numbers? ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400150081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
