{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/998/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/998/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/998/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/998",
  "id": 314365907,
  "node_id": "MDU6SXNzdWUzMTQzNjU5MDc=",
  "number": 998,
  "title": "ERC-998 Composable Non-Fungible Token Standard",
  "user": {
    "login": "mattlockyer",
    "id": 321340,
    "node_id": "MDQ6VXNlcjMyMTM0MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/321340?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mattlockyer",
    "html_url": "https://github.com/mattlockyer",
    "followers_url": "https://api.github.com/users/mattlockyer/followers",
    "following_url": "https://api.github.com/users/mattlockyer/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattlockyer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mattlockyer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattlockyer/subscriptions",
    "organizations_url": "https://api.github.com/users/mattlockyer/orgs",
    "repos_url": "https://api.github.com/users/mattlockyer/repos",
    "events_url": "https://api.github.com/users/mattlockyer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mattlockyer/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 62,
  "created_at": "2018-04-14T22:07:16Z",
  "updated_at": "2023-01-17T22:04:43Z",
  "closed_at": "2022-05-28T05:07:08Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "> title: ERC-998 Composable Non-Fungible Token Standard\r\n> authors: Matt Lockyer <mattdlockyer@gmail.com>; Nick Mudge <nick@perfectabstractions.com>; Jordan Schalm <jordan.schalm@gmail.com>\r\n> status: Draft\r\n> type: Standards Track\r\n> category: ERC\r\n> created: 2018-04-15\r\n> requires: 721, 20\r\n\r\n**Update**\r\n\r\nThe latest code is in the EIP and reference implementation\r\n\r\n**EIP**\r\n[eip-998.md](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md)\r\n\r\n**Reference Implementation**\r\n[https://github.com/mattlockyer/composables-998](https://github.com/mattlockyer/composables-998)\r\n\r\n**Reading**\r\nOriginal Medium post:\r\n[Introducing Crypto Composables](https://medium.com/@mattdlockyer/introducing-crypto-composables-ee5701fde217)\r\n\r\n[Crypto Composables - Use Cases and Applications](https://medium.com/coinmonks/crypto-composables-building-blocks-and-applications-65902709298c)\r\n\r\n**Abstract**\r\n\r\nA standard extension for any non-fungible token to own another non-fungible ERC-721 or fungible ERC-20 tokens. Transferring the token composition means transferring the entire hierarchy of items. For example, a cryptokitty may own a scratching post and a feeding dish; the dish may contain some amount of fungible “chow” tokens. If I sell the cryptokitty, I sell all of the belongings of the cryptokitty.\r\n\r\n**Specification**\r\nAfter several discussions with the community we settled on providing these 4 extensions to a standard ERC-721 NFT in order to support composable functionality:\r\n\r\nERC998ERC721 top-down composable tokens that receive, hold and transfer ERC721 tokens\r\nERC998ERC20 top-down composable tokens that receive, hold and transfer ERC20 tokens\r\nERC998ERC721 bottom-up composable tokens that attach themselves to other ERC721 tokens.\r\nERC998ERC20 bottom-up composable tokens that attach themselves to ERC721 tokens.\r\n\r\nFor more details on the reference implementation, visit the EIP.\r\n\r\n**Summary**\r\n\r\nI’ve presented a new standard for composable non-fungible tokens, ERC-998, that allows for the ownership of ERC-998, ERC-721 and ERC-20 tokens. This allows standard assets to be composed into complex compositions and traded using a single transfer. The additional functionality that can be added to a non-fungible token based on the presence of specific child tokens is open for exploration. I believe that standard interfaces for non-fungible and fungible assets to be composed and act upon one another is an exciting new area for the Ethereum community to explore and I look forward to seeing the work.\r\n\r\n**LATEST: EIP with reference implementation code**\r\n\r\n[eip-998.md](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md)",
  "closed_by": {
    "login": "MicahZoltu",
    "id": 886059,
    "node_id": "MDQ6VXNlcjg4NjA1OQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MicahZoltu",
    "html_url": "https://github.com/MicahZoltu",
    "followers_url": "https://api.github.com/users/MicahZoltu/followers",
    "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
    "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
    "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
    "repos_url": "https://api.github.com/users/MicahZoltu/repos",
    "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/998/reactions",
    "total_count": 64,
    "+1": 56,
    "-1": 0,
    "laugh": 0,
    "hooray": 6,
    "confused": 0,
    "heart": 1,
    "rocket": 1,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/998/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381382361",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-381382361",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 381382361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM4MjM2MQ==",
    "user": {
      "login": "mattlockyer",
      "id": 321340,
      "node_id": "MDQ6VXNlcjMyMTM0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/321340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattlockyer",
      "html_url": "https://github.com/mattlockyer",
      "followers_url": "https://api.github.com/users/mattlockyer/followers",
      "following_url": "https://api.github.com/users/mattlockyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattlockyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattlockyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattlockyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattlockyer/orgs",
      "repos_url": "https://api.github.com/users/mattlockyer/repos",
      "events_url": "https://api.github.com/users/mattlockyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattlockyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-15T05:58:18Z",
    "updated_at": "2018-04-15T05:58:18Z",
    "author_association": "NONE",
    "body": "It was pointed out to me by [@jeffwalsh](https://github.com/jeffwalsh) that adding an ERC-20 token required it's own method for incrementing the balance rather than replacing it.\r\n\r\nHe's also implemented an example using a basic ERC-721 in [this fiddle](https://ethfiddle.com/InrBR4V-KL). Many thanks Jeff.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381382361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381398481",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-381398481",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 381398481,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM5ODQ4MQ==",
    "user": {
      "login": "Physes",
      "id": 29454910,
      "node_id": "MDQ6VXNlcjI5NDU0OTEw",
      "avatar_url": "https://avatars.githubusercontent.com/u/29454910?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Physes",
      "html_url": "https://github.com/Physes",
      "followers_url": "https://api.github.com/users/Physes/followers",
      "following_url": "https://api.github.com/users/Physes/following{/other_user}",
      "gists_url": "https://api.github.com/users/Physes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Physes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Physes/subscriptions",
      "organizations_url": "https://api.github.com/users/Physes/orgs",
      "repos_url": "https://api.github.com/users/Physes/repos",
      "events_url": "https://api.github.com/users/Physes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Physes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-15T11:17:33Z",
    "updated_at": "2018-04-15T11:17:33Z",
    "author_association": "NONE",
    "body": "You might want to check out Delegated Non-Fungible Tokens: #994 which already sets out the architecture of parent/child NFTs. Whereas a single NFT is considered a \"deed\", a tree of NFTs could be considered a \"zone\".",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381398481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381470978",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-381470978",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 381470978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTQ3MDk3OA==",
    "user": {
      "login": "mryellow",
      "id": 213575,
      "node_id": "MDQ6VXNlcjIxMzU3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/213575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mryellow",
      "html_url": "https://github.com/mryellow",
      "followers_url": "https://api.github.com/users/mryellow/followers",
      "following_url": "https://api.github.com/users/mryellow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mryellow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mryellow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mryellow/subscriptions",
      "organizations_url": "https://api.github.com/users/mryellow/orgs",
      "repos_url": "https://api.github.com/users/mryellow/repos",
      "events_url": "https://api.github.com/users/mryellow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mryellow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T03:34:57Z",
    "updated_at": "2018-04-16T03:59:05Z",
    "author_association": "NONE",
    "body": "> sets out the architecture of parent/child NFTs\r\n\r\n```\r\n// maps child delegate token to parent ID\r\nmapping(uint256 => uint256) private sub;\r\n```\r\n\r\n`sub[_delegate] == _tokenId`, `sub[newTokenId] = _tokenId`\r\n\r\nNot too different from the proposed mapping:\r\n\r\n```\r\n// which asset owns which other assets at which address\r\nmapping(uint256 => mapping(address => uint256)) children;\r\n```\r\n\r\nHowever not dealing with the same contract with parents and children being simply related key to key as is the case with #994.\r\n\r\n`sub[newTokenId] = _tokenId` as described works as it's always the child having a single parent. Where `children[_tokenID][_childContract] = _index` looks to fail as it will over-write the previous child token entry when a new child is added.\r\n\r\nCould it be `isChild[_tokenId][_childContract][_childId] = true` is appropriate mapping instead?\r\n\r\n`mapping(uint256 => mapping(address => mapping(uint256 => bool))`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381470978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381473757",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-381473757",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 381473757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTQ3Mzc1Nw==",
    "user": {
      "login": "mryellow",
      "id": 213575,
      "node_id": "MDQ6VXNlcjIxMzU3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/213575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mryellow",
      "html_url": "https://github.com/mryellow",
      "followers_url": "https://api.github.com/users/mryellow/followers",
      "following_url": "https://api.github.com/users/mryellow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mryellow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mryellow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mryellow/subscriptions",
      "organizations_url": "https://api.github.com/users/mryellow/orgs",
      "repos_url": "https://api.github.com/users/mryellow/repos",
      "events_url": "https://api.github.com/users/mryellow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mryellow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T03:59:48Z",
    "updated_at": "2018-04-16T04:01:38Z",
    "author_association": "NONE",
    "body": "This was an edit, but then grew so I'll post again:\r\n\r\nI guess for fungible you want it to be an integer.\r\n\r\n`mapping(uint256 => mapping(address => mapping(uint256 => uint256))`\r\n\r\nWhere `> 0 == true` for NFTs. i.e. setting it to `1` is sufficient to be recognised as a child.\r\n\r\nAlternatively the whole thing on it's head so that one child has one parent as is the case with #994.\r\n\r\n`parents[_childContract][_childId] = _tokentId` with fungibles using index `0` for `_childId` \r\n\r\nedit: Although that then breaks when you're trying to figure out where a fungible is held.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381473757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381563361",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-381563361",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 381563361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTU2MzM2MQ==",
    "user": {
      "login": "mattlockyer",
      "id": 321340,
      "node_id": "MDQ6VXNlcjMyMTM0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/321340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattlockyer",
      "html_url": "https://github.com/mattlockyer",
      "followers_url": "https://api.github.com/users/mattlockyer/followers",
      "following_url": "https://api.github.com/users/mattlockyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattlockyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattlockyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattlockyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattlockyer/orgs",
      "repos_url": "https://api.github.com/users/mattlockyer/repos",
      "events_url": "https://api.github.com/users/mattlockyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattlockyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T11:08:19Z",
    "updated_at": "2018-04-16T11:25:08Z",
    "author_association": "NONE",
    "body": "I see your point about the child tokenId being overwritten, that's a pain.\r\n\r\nI had several approaches to this and I knew this wasn't perfect. You are right that a child contract will only be able to have one ERC-721 child. Darn.\r\n\r\nA strict requirement of this proposal will be NOT requiring any changes to children that are already ERC-721 or ERC-20, meaning they won't have to upgrade to be a child of a composite.\r\n\r\nAnother approach was to keep the mapping:\r\n```\r\nmapping(uint256 => mapping(address => uint256));\r\n```\r\nAnd upgrade to a pseudo unique address for ERC-721 children:\r\n```\r\n// generate a unique address for ERC-721 child tokens\r\n// from _childContract and _childTokenId\r\naddress childToken = address(keccak256(_childContract, _childTokenId));\r\n// everything successful and you want to add the child token\r\n// use the unique address\r\nchildren[_tokenId][childToken] = _childTokenId;\r\n```\r\nNote: this is actually how the EVM generates smart contract addresses, using the hash of address + nonce as a bytes20 address type.\r\n\r\nIn this way we have a pseudo unique address for every child token.\r\n\r\nWe will have to adopt your bookkeeping method 0 means no child and 1 means child exists.\r\n\r\nI really wanted to reduce the need for a deep mapping as in your proposed solution, although my unique address generation pushes a bit more computation and gas fees onto the miners and users.\r\n\r\nThis would have to be calculated to transfer a child token as well, like so:\r\n```\r\naddress childToken = address(keccak256(_childContract, _childTokenId));\r\n// other conditions\r\nrequire(children[_tokenId][childToken] == 1); //0 is false and 1 is true for non-fungible tokens\r\n// transfer child here if other conditions check out\r\nchildren[_tokenId][childToken] = 0;\r\n```\r\nThoughts on this @mryellow?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381563361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381570418",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-381570418",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 381570418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTU3MDQxOA==",
    "user": {
      "login": "mryellow",
      "id": 213575,
      "node_id": "MDQ6VXNlcjIxMzU3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/213575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mryellow",
      "html_url": "https://github.com/mryellow",
      "followers_url": "https://api.github.com/users/mryellow/followers",
      "following_url": "https://api.github.com/users/mryellow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mryellow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mryellow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mryellow/subscriptions",
      "organizations_url": "https://api.github.com/users/mryellow/orgs",
      "repos_url": "https://api.github.com/users/mryellow/repos",
      "events_url": "https://api.github.com/users/mryellow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mryellow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T11:40:18Z",
    "updated_at": "2018-04-16T11:40:18Z",
    "author_association": "NONE",
    "body": "`address childToken = address(keccak256(_childContract, _childTokenId));`\r\n\r\nInteresting, so it's `keccak256(_childContract)` or just straight `_childContract` address in the case of a fungible?\r\n\r\nI was thinking a lot of the issues go away when dealing with non-fungible or fungibles independently. It's always this bit where you have to start thinking about using \"tokenId\" index `0` or returning \"tokenId\" `1` as \"true\", which all ends up feeling more untidy then was the intention.\r\n\r\nPerhaps the neatest solution is to not attempt to deal with them in the same variable, but storing differently once you know what type you're dealing with. Not sure how best to represent anything like that semantically though. Could add a boolean for `fungible` to any methods where `tokenId/value` appears to select between them, though that's not exactly neat either.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381570418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381580839",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-381580839",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 381580839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTU4MDgzOQ==",
    "user": {
      "login": "mattlockyer",
      "id": 321340,
      "node_id": "MDQ6VXNlcjMyMTM0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/321340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattlockyer",
      "html_url": "https://github.com/mattlockyer",
      "followers_url": "https://api.github.com/users/mattlockyer/followers",
      "following_url": "https://api.github.com/users/mattlockyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattlockyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattlockyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattlockyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattlockyer/orgs",
      "repos_url": "https://api.github.com/users/mattlockyer/repos",
      "events_url": "https://api.github.com/users/mattlockyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattlockyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-16T12:23:56Z",
    "updated_at": "2018-04-16T12:25:00Z",
    "author_association": "NONE",
    "body": "I think you avoid it when dealing with fungibles. So in the fungible functions, simply use the fungible contract address. There's no need for extra computation in the fungibles functions.\r\n\r\nCould be possible to go with a completely new mapping for non-fungibles and deal with them seperately.\r\n```\r\nmapping(uint256 => mapping(address => bool)) childTokens; // NFTs\r\nmapping(uint256 => mapping(address => uint256)) childBalance; // FTs\r\n```\r\nAnd still use the pseudo address construction for dealing with NFTs to ensure a unique address per NFT.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381580839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381793330",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-381793330",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 381793330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTc5MzMzMA==",
    "user": {
      "login": "mryellow",
      "id": 213575,
      "node_id": "MDQ6VXNlcjIxMzU3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/213575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mryellow",
      "html_url": "https://github.com/mryellow",
      "followers_url": "https://api.github.com/users/mryellow/followers",
      "following_url": "https://api.github.com/users/mryellow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mryellow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mryellow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mryellow/subscriptions",
      "organizations_url": "https://api.github.com/users/mryellow/orgs",
      "repos_url": "https://api.github.com/users/mryellow/repos",
      "events_url": "https://api.github.com/users/mryellow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mryellow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T00:42:08Z",
    "updated_at": "2018-04-17T00:42:08Z",
    "author_association": "NONE",
    "body": "> pseudo address construction\r\n\r\nAnother thought on this concept, ERC: Ethereum Claims Registry #780 features some prior work which might be informative:\r\n\r\n> The `key` parameter is intentionally very generic. The ERC does not impose any restrictions saying that certain values for key should only be used for certain things. Rather this is something that the community is free to experiment with. If there is some emerging standard a new EIP can be created for that. There are also a lot of already existing naming conventions for claims that are in use today and coming up with our own standard might limit the ability for these to be used.\r\n\r\nHaving a `key` with a construction recipe for fungibles and non-fungibles which is consistent might be something worth looking at. Perhaps stepping away from `address` type here is nice or opens up more possibilities.\r\n\r\n`bytes32 key = bytes32(keccak256(_childContract, _childTokenId));`\r\n\r\nHowever would this add anything or is the `key` always built the same way?\r\n\r\nWould anyone ever want to use the `key` for anything else other than an \"address\" for a token?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381793330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381904858",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-381904858",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 381904858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTkwNDg1OA==",
    "user": {
      "login": "mattlockyer",
      "id": 321340,
      "node_id": "MDQ6VXNlcjMyMTM0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/321340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattlockyer",
      "html_url": "https://github.com/mattlockyer",
      "followers_url": "https://api.github.com/users/mattlockyer/followers",
      "following_url": "https://api.github.com/users/mattlockyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattlockyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattlockyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattlockyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattlockyer/orgs",
      "repos_url": "https://api.github.com/users/mattlockyer/repos",
      "events_url": "https://api.github.com/users/mattlockyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattlockyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T08:48:29Z",
    "updated_at": "2018-04-17T08:48:29Z",
    "author_association": "NONE",
    "body": "My feeling on this, and why I refer to is at \"pseudo address creation\" is because it is analogous to how smart contract addresses are generated given the nonce of the smart contract.\r\n\r\nSo here we are creating an address for every NFT based on the contract address and tokenId of the NFT. This is exactly the same as if every NFT were deployed as a new contract from the main contract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/381904858/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/383451402",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-383451402",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 383451402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzQ1MTQwMg==",
    "user": {
      "login": "vernon99",
      "id": 667546,
      "node_id": "MDQ6VXNlcjY2NzU0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/667546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vernon99",
      "html_url": "https://github.com/vernon99",
      "followers_url": "https://api.github.com/users/vernon99/followers",
      "following_url": "https://api.github.com/users/vernon99/following{/other_user}",
      "gists_url": "https://api.github.com/users/vernon99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vernon99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vernon99/subscriptions",
      "organizations_url": "https://api.github.com/users/vernon99/orgs",
      "repos_url": "https://api.github.com/users/vernon99/repos",
      "events_url": "https://api.github.com/users/vernon99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vernon99/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T04:31:21Z",
    "updated_at": "2018-04-23T04:31:21Z",
    "author_association": "NONE",
    "body": "This is a great start, thanks. Like the idea of pseudo-addresses for child tokens. Have a bunch of thoughts. Here're three major points.\r\n\r\n1. Mixed token types in one mapping.\r\n\r\n> Could be possible to go with a completely new mapping for non-fungibles and deal with them seperately.\r\n\r\nAs you said, I think this is a preferred solution. I don't think it's a good idea to have one mapping for two different standards. It adds complexity (and fragility), adds unexpected behaviors, makes it harder for the wallets to process two different types. Wallets actually don't know the type beforehand - how would they know what token is that without guessing that through presence of the methods, etc? To me that's the biggest problem that I don't see how to resolve without splitting. Token type needs to be defined very explicitly.\r\n\r\nSo fungiblePossessions and nonfungiblePossessions may be more appropriate, with comments explicitly saying what standards to they support (ERC20+ERC677 and ERC721 respectively).\r\n\r\n2. Currently it requires two transactions to pass ownership. This is very old-school :) ERC721 supports safeTransferFrom with onERC721Received callback (that needs to be implemented by this standard). ERC20 unfortunately doesn't and ERC223 is not backwards compatible with ERC20. But there's a nice [ERC677](https://github.com/ethereum/EIPs/issues/677) addition to ERC20 that keeps it backward compatible while adding transferAndCall and tokenFallback pair similarly to described for 721 above. All the key exchanges already support that and this token should also support the callbacks. This is very critical to avoid two transactions per transfer, a bane of many early tokens.\r\n\r\n3. There has to be a way to enumerate all the children. Otherwise you have the wallets problem again, now for list of possessions. ERC721 actually implementa it, see [ERC721Enumerable](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md) (which should really [not be optional](https://github.com/ethereum/eips/issues/721#issuecomment-383447697)). The way it works is we maintain both the hashing for retrieval/checks (to see if it holds this particular token) but also an array to be able to get a token by index. Then you just iterate till you hit 0. That also gives you numberOfChildren that is missing right now completely from the spec. To avoid loops in the smart contract we will need to smartly update the array and keep indices. See how Decentraland did it [in the storage](https://github.com/decentraland/erc721/blob/master/contracts/AssetRegistryStorage.sol) and then [in enumerable interface](https://github.com/decentraland/erc721/blob/master/contracts/ERC721Enumerable.sol).\r\n\r\nAlso, more like a suggestion. \"children\" naming sounds a bit off for ERC20. It's more like stuff that belongs to this token. Maybe possessions would be better, or something like that. Nit.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/383451402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385069671",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-385069671",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 385069671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTA2OTY3MQ==",
    "user": {
      "login": "mg6maciej",
      "id": 1316369,
      "node_id": "MDQ6VXNlcjEzMTYzNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1316369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mg6maciej",
      "html_url": "https://github.com/mg6maciej",
      "followers_url": "https://api.github.com/users/mg6maciej/followers",
      "following_url": "https://api.github.com/users/mg6maciej/following{/other_user}",
      "gists_url": "https://api.github.com/users/mg6maciej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mg6maciej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mg6maciej/subscriptions",
      "organizations_url": "https://api.github.com/users/mg6maciej/orgs",
      "repos_url": "https://api.github.com/users/mg6maciej/repos",
      "events_url": "https://api.github.com/users/mg6maciej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mg6maciej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T19:23:02Z",
    "updated_at": "2018-04-27T19:23:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hello everybody and thanks @mattlockyer for creating this ERC. I was thinking about something like this for over a month, happy to see it brought to attention of a broader community.\r\n\r\nMy initial idea was very similar to this, that you embed such functionality as an extension to ERC721, and your ERC998 contract would be an owner of some ERC721 tokens (from the perspective of owned token) while keeping information that the true owner is a token this contract itself keeps track of.\r\n\r\nI see some problems with such approach. The most important one being that if you have a chain of tokens from different ERC998 contracts, as a user you will have hard time understanding what contract you need to call to transfer a CryptoKitty that is owned by a DogERC998 token that is owned by PersonERC998 token that you own. I might be wrong here, but my intuition tells me you would have to call PersonERC998 and pass it 2 arrays of all contracts and tokens that are owners (parent, grandparent, ...) of the token to be able to retrieve that poor little Kitty.\r\n\r\nCurrently I'm thinking this is a perfect example where global / master registry could be used. I started drafting it ([code is here](https://github.com/Userfeeds/ERC721ComposableRegistries)) and would like to ask all of you if you also think this might be a good idea. I also agree with all the points @vernon99 mentioned and already partially incorporated them into the codebase.\r\nThe biggest advantage of using registry is that it will support CryptoKitty being owned by another CryptoKitty.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385069671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385120243",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-385120243",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 385120243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTEyMDI0Mw==",
    "user": {
      "login": "mattlockyer",
      "id": 321340,
      "node_id": "MDQ6VXNlcjMyMTM0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/321340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattlockyer",
      "html_url": "https://github.com/mattlockyer",
      "followers_url": "https://api.github.com/users/mattlockyer/followers",
      "following_url": "https://api.github.com/users/mattlockyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattlockyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattlockyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattlockyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattlockyer/orgs",
      "repos_url": "https://api.github.com/users/mattlockyer/repos",
      "events_url": "https://api.github.com/users/mattlockyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattlockyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T23:44:27Z",
    "updated_at": "2018-04-27T23:44:27Z",
    "author_association": "NONE",
    "body": "Thank you everyone for the comments. I have been grinding through an implementation with tests so we have a basis from which to work on finding the most optimal solutions together.\r\n\r\n@vernon99 I have address the first 2 concerns for nonfungible \"possessions\". I like this name.\r\n\r\n```\r\nmapping(uint256 => mapping(address => bool)) nonfungiblePossessions;\r\n  mapping(uint256 => mapping(address => uint256)) fungiblePossessions;\r\n  \r\n  function bytesToUint(bytes b) internal pure returns (uint256 result) {\r\n    result = 0;\r\n    for (uint256 i = 0; i < b.length; i++) {\r\n      uint256 c = uint256(b[i]);\r\n      if (c >= 48 && c <= 57) {\r\n        result = result * 10 + (c - 48);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function _nonfungibleAddress(\r\n    address _childContract, uint256 _childTokenId\r\n  ) internal pure returns (address) {\r\n    return address(keccak256(_childContract, _childTokenId));\r\n  }\r\n  \r\n  /**************************************\r\n  * ERC-721 Non-Fungible Possessions\r\n  **************************************/\r\n  \r\n  //adding nonfungible possessions\r\n  //receives _data which determines which NFT composable of this contract the possession will belong to\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4) {\r\n    //convert _data bytes to uint256, assuming tokens were passed in as string data\r\n    // i.e. tokenId = 5 would be \"5\" coming from web3 or another contract\r\n    uint256 id = bytesToUint(_data);\r\n    nonfungiblePossessions[id][_nonfungibleAddress(msg.sender, _tokenId)] = true;\r\n    return ERC721_RECEIVED;\r\n  }\r\n  \r\n  //transfer the ERC-721\r\n  function transferChild(\r\n    address _to,\r\n    uint256 _tokenId,\r\n    address _childContract,\r\n    uint256 _childTokenId\r\n  ) public {\r\n    // require ownership of parent token &&\r\n    // check parent token owns the child token\r\n    // use the 'pseudo address' for the specific child tokenId\r\n    address childToken = _nonfungibleAddress(_childContract, _childTokenId);\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(nonfungiblePossessions[_tokenId][childToken] == true);\r\n    require(\r\n      _childContract.call(\r\n        // if true, transfer the child token\r\n        // not a delegate call, the child token is owned by this contract\r\n        bytes4(keccak256(\"safeTransferFrom(address,address,uint256)\")),\r\n        this, _to, _childTokenId\r\n      )\r\n    );\r\n    // remove the parent token's ownership of the child token\r\n    nonfungiblePossessions[_tokenId][childToken] = false;\r\n  }\r\n```\r\nThis code is working now, it's [here](https://github.com/mattlockyer/composables-998) if you want to run it yourself.\r\n\r\nI have put ERC-20 on hold for a bit, seems relatively trivial once ERC-721 is working. @vernon99 thanks again for the comments on where to look for that implementation.\r\n\r\n@mg6maciej thanks for dropping in here. I think the global registry is a fantastic solution to a lot of the needs of developers out there.\r\n\r\nI do foresee some issues with functionality, specific implementations that restrict the composability of assets for example. For all basic compositions though, I think it's quite a good approach!",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385120243/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385315913",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-385315913",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 385315913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTMxNTkxMw==",
    "user": {
      "login": "mattlockyer",
      "id": 321340,
      "node_id": "MDQ6VXNlcjMyMTM0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/321340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattlockyer",
      "html_url": "https://github.com/mattlockyer",
      "followers_url": "https://api.github.com/users/mattlockyer/followers",
      "following_url": "https://api.github.com/users/mattlockyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattlockyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattlockyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattlockyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattlockyer/orgs",
      "repos_url": "https://api.github.com/users/mattlockyer/repos",
      "events_url": "https://api.github.com/users/mattlockyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattlockyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-30T05:27:42Z",
    "updated_at": "2018-04-30T05:27:42Z",
    "author_association": "NONE",
    "body": "I've made some updates to the [comment at the top](https://github.com/ethereum/EIPs/issues/998#issue-314365907) to reflect the dramatic changes to the originally proposed code.\r\n\r\nThank you @vernon99 @mg6maciej for the feedback. It motivated me to push forward and get a more comprehensive and elegant solution up.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385315913/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385439209",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-385439209",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 385439209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTQzOTIwOQ==",
    "user": {
      "login": "mg6maciej",
      "id": 1316369,
      "node_id": "MDQ6VXNlcjEzMTYzNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1316369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mg6maciej",
      "html_url": "https://github.com/mg6maciej",
      "followers_url": "https://api.github.com/users/mg6maciej/followers",
      "following_url": "https://api.github.com/users/mg6maciej/following{/other_user}",
      "gists_url": "https://api.github.com/users/mg6maciej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mg6maciej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mg6maciej/subscriptions",
      "organizations_url": "https://api.github.com/users/mg6maciej/orgs",
      "repos_url": "https://api.github.com/users/mg6maciej/repos",
      "events_url": "https://api.github.com/users/mg6maciej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mg6maciej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-30T15:44:30Z",
    "updated_at": "2018-04-30T15:44:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I do foresee some issues with functionality, specific implementations that restrict the composability of assets for example.\r\n\r\nYes, there are things that need to be taken care of in 998. I can think of these cases:\r\n\r\n* once possession is attached to 998, it may want to not be transferable; this can be implemented overriding `ERC721::transferFrom` to always revert and making sure 998 always calls this function even if that meant to transfer 721 token from itself to itself when changing which 998 owns it.\r\n* possession may want to be attached only to certain kinds of 998s. This could be handled with some kind of callback (e.g. `onAttachedTo(address erc998, uint tokenId)`) to extended 721 that is aware of 998 and allowing attachment if function does not exist on 721.\r\n* 998 may want to own only certain kinds of possessions. This is the easiest to implement with local 998, but the global registry could call another callback (e.g. `onAttachedChild(address erc721, uint tokenId)`) and also accept if function is not there.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385439209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385610329",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-385610329",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 385610329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTYxMDMyOQ==",
    "user": {
      "login": "mg6maciej",
      "id": 1316369,
      "node_id": "MDQ6VXNlcjEzMTYzNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1316369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mg6maciej",
      "html_url": "https://github.com/mg6maciej",
      "followers_url": "https://api.github.com/users/mg6maciej/followers",
      "following_url": "https://api.github.com/users/mg6maciej/following{/other_user}",
      "gists_url": "https://api.github.com/users/mg6maciej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mg6maciej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mg6maciej/subscriptions",
      "organizations_url": "https://api.github.com/users/mg6maciej/orgs",
      "repos_url": "https://api.github.com/users/mg6maciej/repos",
      "events_url": "https://api.github.com/users/mg6maciej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mg6maciej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T06:42:00Z",
    "updated_at": "2018-05-01T06:42:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another thing worth discussing is what kind of events these transfers will fire.\r\n\r\n* `Xxxxx(address, address, uint256, address, uint256)` // sending NFT from address to NFT\r\n* `Xxxxx(address, uint256, address, address, uint256)` // sending NFT from NFT to address\r\n* `Xxxxx(address, uint256, address, uint256, address, uint256)` // sending NFT from NFT to another NFT\r\n* `Yyyyy(address, address, uint256, address, uint256)` // sending fungible from address to NFT\r\n* `Yyyyy(address, uint256, address, address, uint256)` // sending fungible from NFT to address\r\n* `Yyyyy(address, uint256, address, uint256, address, uint256)` // sending fungible from NFT to another NFT",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385610329/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385721326",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-385721326",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 385721326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTcyMTMyNg==",
    "user": {
      "login": "mattlockyer",
      "id": 321340,
      "node_id": "MDQ6VXNlcjMyMTM0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/321340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattlockyer",
      "html_url": "https://github.com/mattlockyer",
      "followers_url": "https://api.github.com/users/mattlockyer/followers",
      "following_url": "https://api.github.com/users/mattlockyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattlockyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattlockyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattlockyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattlockyer/orgs",
      "repos_url": "https://api.github.com/users/mattlockyer/repos",
      "events_url": "https://api.github.com/users/mattlockyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattlockyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T16:49:35Z",
    "updated_at": "2018-05-01T23:58:07Z",
    "author_association": "NONE",
    "body": "> Another thing worth discussing is what kind of events these transfers will fire.\r\n\r\nAbsolutely.\r\n\r\nI think this is a great start.\r\n\r\n@mg6maciej What are the thoughts on NFTP as a title for both the non-fungible token possessions and FTP for fungible token possessions?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385721326/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385875288",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-385875288",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 385875288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTg3NTI4OA==",
    "user": {
      "login": "mg6maciej",
      "id": 1316369,
      "node_id": "MDQ6VXNlcjEzMTYzNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1316369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mg6maciej",
      "html_url": "https://github.com/mg6maciej",
      "followers_url": "https://api.github.com/users/mg6maciej/followers",
      "following_url": "https://api.github.com/users/mg6maciej/following{/other_user}",
      "gists_url": "https://api.github.com/users/mg6maciej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mg6maciej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mg6maciej/subscriptions",
      "organizations_url": "https://api.github.com/users/mg6maciej/orgs",
      "repos_url": "https://api.github.com/users/mg6maciej/repos",
      "events_url": "https://api.github.com/users/mg6maciej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mg6maciej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T06:16:00Z",
    "updated_at": "2018-05-02T10:06:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not that interested in choosing names for anything for now. I think it's too early. I'd be more than happy to change names in my implementation at some point.\r\n\r\nI've noticed a potential issue with different implementations of ERC721 tho. There are a couple of ways to interact with them.\r\n* When taking approved token in possession to assign it as child of another one you can call\r\n  * `transferFrom(owner, this, tokenId)` for current ERC721 standard and CryptoKitties/Bots\r\n  * `takeOwnership(tokenId)` for some other tokens, e.g. EthMoji\r\n* When returning a possesion to some address\r\n  * `transferFrom(this, addr, tokenId)` for current ERC721 standard (with OpenZeppelin implementation can't call `approve` on yourself)\r\n  * `approve(this, tokenId)` + `transferFrom(this, addr, tokenId)` for CryptoKitties/Bots\r\n  * `transfer(addr, tokenId)` for CryptoKitties/Bots and some other tokens\r\n\r\nIf you just use `transferFrom`, you will basically lock all old ERC721 tokens as children.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/385875288/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391097646",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-391097646",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 391097646,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTA5NzY0Ng==",
    "user": {
      "login": "7flash",
      "id": 4569866,
      "node_id": "MDQ6VXNlcjQ1Njk4NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4569866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/7flash",
      "html_url": "https://github.com/7flash",
      "followers_url": "https://api.github.com/users/7flash/followers",
      "following_url": "https://api.github.com/users/7flash/following{/other_user}",
      "gists_url": "https://api.github.com/users/7flash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/7flash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/7flash/subscriptions",
      "organizations_url": "https://api.github.com/users/7flash/orgs",
      "repos_url": "https://api.github.com/users/7flash/repos",
      "events_url": "https://api.github.com/users/7flash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/7flash/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-22T18:40:07Z",
    "updated_at": "2018-05-22T18:40:07Z",
    "author_association": "NONE",
    "body": "It looks that ERC-998 is perfect fit for intellectual property tokens. For example, parent contract could reflect the ownership of education course of author. Children tokens could reflect the copies for students. If there is any issues?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391097646/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391374060",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-391374060",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 391374060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTM3NDA2MA==",
    "user": {
      "login": "mattlockyer",
      "id": 321340,
      "node_id": "MDQ6VXNlcjMyMTM0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/321340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattlockyer",
      "html_url": "https://github.com/mattlockyer",
      "followers_url": "https://api.github.com/users/mattlockyer/followers",
      "following_url": "https://api.github.com/users/mattlockyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattlockyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattlockyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattlockyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mattlockyer/orgs",
      "repos_url": "https://api.github.com/users/mattlockyer/repos",
      "events_url": "https://api.github.com/users/mattlockyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattlockyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-23T14:45:03Z",
    "updated_at": "2018-06-04T14:38:58Z",
    "author_association": "NONE",
    "body": "@mg6maciej I'm going to be adding the callbacks and events soon to the implementation\r\n\r\nI know you're but syncing on the composables instances + registry will be crucial, let's touch base about this next week.\r\n\r\nIf anyone has any feedback on how to interop a global composable NFT registry with individual instances of Composable 998 (721 extended) please feel free to chime in!\r\n\r\nAlso there is a Discord for general #buidl chatter around NFTs here: [https://discord.gg/3TtqP2C](https://discord.gg/3TtqP2C)",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/391374060/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/392341826",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-392341826",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 392341826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjM0MTgyNg==",
    "user": {
      "login": "crowdedconscious",
      "id": 29150091,
      "node_id": "MDQ6VXNlcjI5MTUwMDkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/29150091?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowdedconscious",
      "html_url": "https://github.com/crowdedconscious",
      "followers_url": "https://api.github.com/users/crowdedconscious/followers",
      "following_url": "https://api.github.com/users/crowdedconscious/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowdedconscious/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowdedconscious/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowdedconscious/subscriptions",
      "organizations_url": "https://api.github.com/users/crowdedconscious/orgs",
      "repos_url": "https://api.github.com/users/crowdedconscious/repos",
      "events_url": "https://api.github.com/users/crowdedconscious/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowdedconscious/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-27T15:50:18Z",
    "updated_at": "2018-05-27T15:50:18Z",
    "author_association": "NONE",
    "body": "Very interesting work Matt! Following your progress closely - keep it up.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/392341826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399607841",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-399607841",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 399607841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTYwNzg0MQ==",
    "user": {
      "login": "jordanschalm",
      "id": 10557821,
      "node_id": "MDQ6VXNlcjEwNTU3ODIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/10557821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jordanschalm",
      "html_url": "https://github.com/jordanschalm",
      "followers_url": "https://api.github.com/users/jordanschalm/followers",
      "following_url": "https://api.github.com/users/jordanschalm/following{/other_user}",
      "gists_url": "https://api.github.com/users/jordanschalm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jordanschalm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jordanschalm/subscriptions",
      "organizations_url": "https://api.github.com/users/jordanschalm/orgs",
      "repos_url": "https://api.github.com/users/jordanschalm/repos",
      "events_url": "https://api.github.com/users/jordanschalm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jordanschalm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T23:17:44Z",
    "updated_at": "2018-06-23T00:41:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hi everyone! Myself, @flockonus and a few other folks from the CryptoKitties team had the opportunity to meet @mattlockyer a couple days ago to discuss designs for composable NFTs. We primarily discussed a different design than what is currently in this ERC, which I’ll summarize here to get feedback on from all of you fine NFT enthusiasts!\r\n\r\n### Current Design Issues\r\n#### Ownership state is split between child/parent\r\nWhen a token is owned by a composable “parent” NFT, the complete ownership state is split between the child contract and the parent contract. The child contract (which may not know about ERC998) state says that the token is owned by the parent contract address. The parent contract specifies _which_ NFT within the contract _actually_ owns the child token. Similarly, sometimes methods related to ownership are executed from the child contract and other times they are executed from the parent contract.\r\nWith the bottom-up approach, all ownership state and associated methods would be implemented in the child.\r\n#### Implementation Complexity\r\nBasically, the current design requires implementors to maintain a lot of state! Parent contracts would need to track who owns their tokens, which child tokens are owned by the parent contract’s tokens, and reimplement/wrap `transfer`s and the like for these child tokens. With a bottom-up approach, all ownership state and methods would be compartmentalized in the contract responsible for the given token.\r\n#### Ownership terminology overloading\r\nOwnership in Ethereum is currently strongly defined as a mapping from Ethereum addresses to tokens of some kind. Current contracts rely on this relationship for ownership operations (you `transfer` an ERC20 token to a native Ethereum address). Since being backwards-compatible with this existing notion of ownership is not possible for composable tokens, we suggested being explicit about the semantic difference between the two notions of ownership by naming them differently. We suggested maintaining the `own` verb for ERC20/ERC721-style ownership, and using something else (maybe `link` or `attach`?) for when an NFT “owns” some other token.\r\n\r\n### Bottom-up Design Proposal\r\nThe current proposal describes ERC721 tokens with logic added so they can own child tokens. The bottom-up design inverts this, instead proposing an extension to ERC721 *and* ERC20/223 that enables them to be linked/attached to any ERC721 token, in addition to being owned by an Ethereum address (as is the case now). \r\n\r\nSimilarly to the current proposal, the ownership hierarchy for a particular NFT can be thought of as a tree, with an Ethereum address at the root, NFTs in the middle, and either NFTs or fungible tokens at the leaves.\r\n![image](https://user-images.githubusercontent.com/10557821/41802705-a93fb5c4-7637-11e8-9c88-f9cf951afb8d.png)\r\n\r\n\r\n### Rationale\r\nIn addition to the benefits in the next section, the rationale behind this proposal comes from our experience with CryptoKitties. After releasing CryptoKitties, many developers built apps, tools, and tokens that extend the CryptoKitties ecosystem. It doesn’t make much sense for a CryptoKitty to own EOS tokens, but it _does_ make sense (and is super cool!) for a CryptoKitty to own a provably unique cat-hat token (see [KittyHats](https://kittyhats.co/#/)). In general, we see value in NFTs being extended by contextual tokens with semantic meaning, not NFTs being able to own arbitrary tokens. We think the bottom-up approach best fits this ecosystem-extension view of composable tokens.\r\n\r\n### Benefits\r\n*  ownership logic is compartmentalized in the child contract, where the ownership logic already is\r\n* Since ownership logic and state is maintained in one place, implementation complexity is much lower\r\n* any NFTs (including already deployed NFTs) can be parents and “own” child tokens\r\n\r\n### Drawbacks\r\n* generic on-chain enumerability of children is not possible. However, off-chain enumerability is possible using events, and on-chain enumerability is possible for specific child types on a per-contract basis.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399607841/reactions",
      "total_count": 9,
      "+1": 8,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399611379",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-399611379",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 399611379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTYxMTM3OQ==",
    "user": {
      "login": "mryellow",
      "id": 213575,
      "node_id": "MDQ6VXNlcjIxMzU3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/213575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mryellow",
      "html_url": "https://github.com/mryellow",
      "followers_url": "https://api.github.com/users/mryellow/followers",
      "following_url": "https://api.github.com/users/mryellow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mryellow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mryellow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mryellow/subscriptions",
      "organizations_url": "https://api.github.com/users/mryellow/orgs",
      "repos_url": "https://api.github.com/users/mryellow/repos",
      "events_url": "https://api.github.com/users/mryellow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mryellow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T23:47:27Z",
    "updated_at": "2018-06-22T23:47:27Z",
    "author_association": "NONE",
    "body": "> We suggested maintaining the own verb for ERC20/ERC721-style ownership, and using something else (maybe link or attach?) for when an NFT “owns” some other token.\r\n\r\nWonder if there are issues similar to \"approval\" where some \"attachment\" might be orphaned by a chance in \"ownership\" at the child level. \r\n\r\nDoes a cat continue to be attached to a hat after the hat's ownership has changed?\r\n\r\nWho can detach the hat?\r\n\r\n> In general, we see value in NFTs being extended by contextual tokens with semantic meaning, not NFTs being able to own arbitrary tokens.\r\n\r\nI'm rather interested by the possibilities when it comes to arbitrary standard tokens rather than specifically crafted tokens setup to be children. Semantics can be re-imagined in new contexts.\r\n\r\ni.e. Turn the power on for your city in a dApp game by adding `POWR` tokens, or covering your enemy in `GOO`, those tokens contributing value which is then contested and exchanged as part of gameplay. In a non-game contexts this might mean bonded curves and curation market type associations where parent token value is a function of children.\r\n\r\nThis \"composable\" approach may be entirely unsuited for such tasks in the end, the proper approach is probably a lot more custodian and based around \"deposits\", but worth mentioning a use-case for the parent-child ownership style even if I'm not seeing the cleanest way to lay it out.\r\n\r\n> The current proposal describes ERC721 tokens with logic added so they can own child tokens\r\n\r\nPerhaps the best approach is to separate everything. ERC721's go on being themselves, ERC20's do their thing. Then another contract can associate them, perhaps by taking custody and wrapping into a new combined entity.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399611379/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399611965",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-399611965",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 399611965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTYxMTk2NQ==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T23:52:09Z",
    "updated_at": "2018-06-23T00:15:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have been looking into the bottom-up approach.  Some comments:\r\n\r\nUsing the bottom-up approach it is possible for new composable-aware ERC721 parent contracts to have onchain enumeration for any token that is transferred to it. This is done by using the `safeTransferFrom` and the `onERC721Received` functions to pass into the parent contract the child tokenId. And when the child contract transfers itself out of the parent it should make a call to the parent contract to remove itself.\r\n\r\nI really like the idea of doing enumeration off-chain because I don't like the expense and complexity of the bookkeeping on-chain.\r\n\r\nI like the idea of using events to track child tokens of parents. A cache of this info (child tokens) could be included in the JSON file returned by the tokenURI for each parent.\r\n\r\nThere is another issue which is buy/trade/sales verification of state. When selling a parent token the state of the parent token (all the children) can be checked using on-chain enumeration to verify it is all that is expected by the buyer. This verification can be done in the same transaction that the transfer is done. Without this verification it is possible for someone to remove children right before a transfer call and the buyer does not get what he/she paid for.\r\n\r\nSo my question is this: How to securely do state verification of a parent ERC721 token when selling it if there is no on-chain enumeration? \r\n\r\nPerhaps the state verification can be done onchain by passing in an array of child contracts and child token Ids to check for after the transfer function is called. I think that would work.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399611965/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399612439",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-399612439",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 399612439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTYxMjQzOQ==",
    "user": {
      "login": "mryellow",
      "id": 213575,
      "node_id": "MDQ6VXNlcjIxMzU3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/213575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mryellow",
      "html_url": "https://github.com/mryellow",
      "followers_url": "https://api.github.com/users/mryellow/followers",
      "following_url": "https://api.github.com/users/mryellow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mryellow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mryellow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mryellow/subscriptions",
      "organizations_url": "https://api.github.com/users/mryellow/orgs",
      "repos_url": "https://api.github.com/users/mryellow/repos",
      "events_url": "https://api.github.com/users/mryellow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mryellow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-22T23:56:12Z",
    "updated_at": "2018-06-23T00:03:27Z",
    "author_association": "NONE",
    "body": "Related work, haven't dug into it but have seen this mentioned in relation to \"composables\".\r\n\r\n>  We describe a specification for a new primitive that facilitates the lowcost, trustless creation, and exchange of a {Set}, a collateralized basket of ERC20 tokens on the Ethereum Blockchain. {Set}s serve as an abstraction for end users who want to think about higher-level token concepts without\r\ndealing with the details of specific tokens. {Set}s are a superset of the ERC20 token standard with issue and redeem functionality, allowing for the atomic swap of the {Set}s and their underlying tokens. As an investment, {Set}s are similar to index funds (e.g. S&P 500, DJIA) and exchange traded funds (ETFs) in traditional financial services, allowing users to easily get exposure to a multitude of tokens. As {Set}s are ERC20 tokens and composable, it is possible for one token to represent a limitless number of other tokens.\r\n\r\nhttps://setprotocol.com/pdf/set_protocol_whitepaper.pdf\r\n\r\nedit:\r\n\r\nhttps://github.com/SetProtocol/set-protocol-contracts/blob/52260e68651a75adac7e5f1c4add96d8b9c48986/contracts/core/SetToken.sol#L121-L122\r\n\r\nThey create an ERC20 which has a pre-defined set of addresses and quantities associated with it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/399612439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400016201",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-400016201",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 400016201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDAxNjIwMQ==",
    "user": {
      "login": "flockonus",
      "id": 165553,
      "node_id": "MDQ6VXNlcjE2NTU1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/165553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flockonus",
      "html_url": "https://github.com/flockonus",
      "followers_url": "https://api.github.com/users/flockonus/followers",
      "following_url": "https://api.github.com/users/flockonus/following{/other_user}",
      "gists_url": "https://api.github.com/users/flockonus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flockonus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flockonus/subscriptions",
      "organizations_url": "https://api.github.com/users/flockonus/orgs",
      "repos_url": "https://api.github.com/users/flockonus/repos",
      "events_url": "https://api.github.com/users/flockonus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flockonus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T16:37:41Z",
    "updated_at": "2018-06-25T17:30:09Z",
    "author_association": "NONE",
    "body": ">Does a cat continue to be attached to a hat after the hat's ownership has changed?\r\n>Who can detach the hat?\r\n\r\n@mryellow I believe that's the intention, the hat would keep on belonging to the same cat. Who can detach the item is the current owner of the cat.\r\n\r\n> So my question is this: How to securely do state verification of a parent ERC721 token when selling it if there is no on-chain enumeration?\r\n> Perhaps the state verification can be done onchain by passing in an array of child contracts and child token Ids to check for after the transfer function is called. I think that would work.\r\n\r\n@mudgen  I think so too! If the item in case that is for purchase, has attached items that are important for the buyer then it would make sense that the purchase order would pass an array of address+ids to verify the items are indeed attached to the NFT.\r\n\r\nIt would work with signed transactions (similar to 0x style) orders as well, if the seller at the time of the sales creation also bundle the promise of the items in the order.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400016201/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400040810",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-400040810",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 400040810,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDA0MDgxMA==",
    "user": {
      "login": "mg6maciej",
      "id": 1316369,
      "node_id": "MDQ6VXNlcjEzMTYzNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1316369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mg6maciej",
      "html_url": "https://github.com/mg6maciej",
      "followers_url": "https://api.github.com/users/mg6maciej/followers",
      "following_url": "https://api.github.com/users/mg6maciej/following{/other_user}",
      "gists_url": "https://api.github.com/users/mg6maciej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mg6maciej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mg6maciej/subscriptions",
      "organizations_url": "https://api.github.com/users/mg6maciej/orgs",
      "repos_url": "https://api.github.com/users/mg6maciej/repos",
      "events_url": "https://api.github.com/users/mg6maciej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mg6maciej/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-25T17:58:31Z",
    "updated_at": "2018-06-25T17:58:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@flockonus @mudgen https://github.com/ethereum/EIPs/issues/1180 proposes a generic solution for validation when selling NFTs.\r\n\r\n> Using the bottom-up approach it is possible for new composable-aware ERC721 parent contracts to have onchain enumeration for any token that is transferred to it. This is done by using the safeTransferFrom and the onERC721Received functions to pass into the parent contract the child tokenId. And when the child contract transfers itself out of the parent it should make a call to the parent contract to remove itself.\r\n\r\n@mudgen I think your assumptions are wrong here. If I understand this bottom-up concept correctly, child token is never directly transferred to its parent, i.e. `childContract.ownerOf(someTokenId) != parentContract` is true, unless someone just sent a token to a contract using `transferFrom` and basically burned it.\r\n\r\n@jordanschalm @flockonus Are you going to join our next composable call on NFTy Magicians discord? I would like to discuss this concept with you in depth and believe we should schedule a call sooner than planned. Also @jordanschalm I asked you some questions there, but if you want I can move it to GitHub.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/400040810/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406325407",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-406325407",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 406325407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjMyNTQwNw==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-19T15:51:47Z",
    "updated_at": "2018-07-24T16:05:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "I recently did a lot of work on a reference implementation of ERC998 which can be seen here: https://github.com/mattlockyer/composables-998\r\n\r\nI also wrote a draft EIP for ERC998 here: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md  But I have not done a pull request yet for this EIP to get it added because I would like more feedback first.\r\n\r\nSome feed back on the EIP and the reference implementation would be very helpful.\r\n\r\nAlso, here is a blog post where I gave an overview of top-down and bottom-up approaches: https://hackernoon.com/top-down-and-bottom-up-composables-whats-the-difference-and-which-one-should-you-use-db939f6acf1d",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/406325407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407449742",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-407449742",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 407449742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzQ0OTc0Mg==",
    "user": {
      "login": "mudgen",
      "id": 49092,
      "node_id": "MDQ6VXNlcjQ5MDky",
      "avatar_url": "https://avatars.githubusercontent.com/u/49092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mudgen",
      "html_url": "https://github.com/mudgen",
      "followers_url": "https://api.github.com/users/mudgen/followers",
      "following_url": "https://api.github.com/users/mudgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mudgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mudgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mudgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mudgen/orgs",
      "repos_url": "https://api.github.com/users/mudgen/repos",
      "events_url": "https://api.github.com/users/mudgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mudgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-24T15:31:57Z",
    "updated_at": "2018-07-24T15:31:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "An EIP998 draft was recently added: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/407449742/reactions",
      "total_count": 7,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 5,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426585660",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-426585660",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 426585660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjU4NTY2MA==",
    "user": {
      "login": "chiro-hiro",
      "id": 8078873,
      "node_id": "MDQ6VXNlcjgwNzg4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8078873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chiro-hiro",
      "html_url": "https://github.com/chiro-hiro",
      "followers_url": "https://api.github.com/users/chiro-hiro/followers",
      "following_url": "https://api.github.com/users/chiro-hiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/chiro-hiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chiro-hiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chiro-hiro/subscriptions",
      "organizations_url": "https://api.github.com/users/chiro-hiro/orgs",
      "repos_url": "https://api.github.com/users/chiro-hiro/repos",
      "events_url": "https://api.github.com/users/chiro-hiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chiro-hiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T10:24:58Z",
    "updated_at": "2018-10-03T10:24:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mattlockyer @mudgen  It's could raise another issue about gas cost since almost the call is `external call` and increasing the number of token contracts in the long term.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/426585660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/431895519",
    "html_url": "https://github.com/ethereum/EIPs/issues/998#issuecomment-431895519",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/998",
    "id": 431895519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTg5NTUxOQ==",
    "user": {
      "login": "flockonus",
      "id": 165553,
      "node_id": "MDQ6VXNlcjE2NTU1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/165553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flockonus",
      "html_url": "https://github.com/flockonus",
      "followers_url": "https://api.github.com/users/flockonus/followers",
      "following_url": "https://api.github.com/users/flockonus/following{/other_user}",
      "gists_url": "https://api.github.com/users/flockonus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flockonus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flockonus/subscriptions",
      "organizations_url": "https://api.github.com/users/flockonus/orgs",
      "repos_url": "https://api.github.com/users/flockonus/repos",
      "events_url": "https://api.github.com/users/flockonus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flockonus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-22T16:54:05Z",
    "updated_at": "2018-10-22T16:54:05Z",
    "author_association": "NONE",
    "body": "@mudgen Following The discussion on the channel, and commenting on the issue as requested\r\n\r\n<img width=\"881\" alt=\"screen shot 2018-10-22\" src=\"https://user-images.githubusercontent.com/165553/47305802-790b3100-d5df-11e8-8bf0-040ab9a9d013.png\">\r\n\r\n\r\nCurrently there is this structure in the reference contract implementation:\r\n\r\n```solidity\r\nstruct TokenOwner {\r\n    address tokenOwner;\r\n    uint256 parentTokenId;\r\n}\r\n```\r\n\r\nSo I believe the implied idea of ++ `parentTokenId` to store is to account for the case where the token Id is actually 0? And at retrieval decrementing and doing the checks. The problem with is is that 0xff..ff would overflow, or fail the check, so it just transfers the problem?\r\n\r\nIf my assumption is correct I'd suggest we instead have this other struct, that would also cost 2 words (same as now):\r\n\r\n```solidity\r\nstruct TokenOwner {\r\n    address tokenOwner;\r\n    bool ownedByToken;\r\n    uint256 parentTokenId;\r\n}\r\n```\r\n\r\nSo we don't have to overload meaning into `parentTokenId`, does it make sense?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/431895519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
