{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/2665",
  "id": 622415975,
  "node_id": "MDU6SXNzdWU2MjI0MTU5NzU=",
  "number": 2665,
  "title": "ERC-721 Transfer Fee Extension",
  "user": {
    "login": "Nokhal",
    "id": 13810287,
    "node_id": "MDQ6VXNlcjEzODEwMjg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Nokhal",
    "html_url": "https://github.com/Nokhal",
    "followers_url": "https://api.github.com/users/Nokhal/followers",
    "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
    "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
    "organizations_url": "https://api.github.com/users/Nokhal/orgs",
    "repos_url": "https://api.github.com/users/Nokhal/repos",
    "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Nokhal/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 2328627851,
      "node_id": "MDU6TGFiZWwyMzI4NjI3ODUx",
      "url": "https://api.github.com/repos/ethereum/EIPs/labels/stale",
      "name": "stale",
      "color": "000000",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 20,
  "created_at": "2020-05-21T10:48:11Z",
  "updated_at": "2022-05-29T14:02:48Z",
  "closed_at": "2022-05-29T14:02:48Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "---\r\neip: 2665 ?\r\ntitle: ERC-721 Transfer Fee Extension\r\nauthor: Guillaume Gonnaud  <g.gonnaud@perpetual-altruism.org>\r\ndiscussions-to: https://github.com/ethereum/EIPs/issues/2665 [ethereum-magicians Thread](https://ethereum-magicians.org/t/erc-721-transfer-fee-extension/4306)\r\nstatus: WIP\r\ntype: Standards Track\r\ncategory: ERC\r\ncreated: 2020-05-21\r\n---\r\n\r\nIn the following, it is assumed that the attributed EIP number will be 2665, as it is traditionnally the issue number of this thread. However, an EIP number has yet to be formally attributed.\r\n\r\nSimple Summary\r\n===============\r\n\r\nAn ERC-721 extension allowing publishers to specify if a transfer fee should be paid with every transfer. The fee currency is defaulted to ETH, but ERC-20 tokens or even non-crypto currencies are within the scope of the standard. \r\n\r\nAbstract\r\n===============\r\n\r\nThe following standard is an extension of the ERC-721 standard. It exposes a queryable Transfer Fee that needs to be paid for a transfer to be processed.\r\n\r\nIn order to allow for the same transaction flow as a non-payable Transfer ERC-721 implementation, an *eval to 0 remanence guarantee* on the Transfer Fee is introduced, as well as the possibility for an operator/owner to use the `approve` function to pay the Transfer Fee.\r\n\r\n\r\nMotivation\r\n===============\r\n\r\n\r\n\r\nSome processes and products require third parties to be properly incentivized in order to be perennial.  *E.g.* gas fee and block reward paid to miners on the Ethereum blockchain. Content creator remuneration is not a new problem, with multi-billion dollar industries being created and destroyed around the various solutions that have emerged to tackle it. Ethereum, and blockchains in general, are most likely going to be the backbone of the next paradigm shift.\r\n\r\n\r\nPrevious ERC-721 extension EIPs describe new ways to incentivise content creators. However, they often require a fundamental change in the transaction flow of NFTs. The current NFT ecosystem and standards are already proven, and fundamental changes are not needed to solve this issue.\r\n\r\n**A very minor extension of the ERC-721 specification would allow both wide interoperability and strong creator incentivization.**\r\n\r\n*Author's note: As the NFT ecosystem is developing at an astonishing pace, a standard that allows a reliable incentivization structure may be what is needed to unlock a trustless digital ownership revolution pushed by media majors, marketplaces and creators.*\r\n\r\nERC-721 allows for `safeTransferFrom` and `transferFrom` to be *payable* as a weak mutability guarantee; it allows, for example, the creator of the token to collect a fee. However the *payable* being the weakest guarantee and the lack of specification for an explorable fee led to most ERC-721 token ending up being transferrable for free.\r\n`Approve` also has *payable* as the weakest guarantee. While `Approve` has a different use case than `TransferFrom`, sellers could use `Approve` to pay in advance a potential transfer fee on behalf of the operator.\r\n\r\n\r\nSpecification\r\n===============\r\n\r\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as described in RFC 2119.\r\n​\r\n\r\n**Every ERC-2665 compliant contract MUST implement the `ERC721`, `ERC165` and `ERC2665` interfaces** (subject to \"caveats\" below):\r\n\r\n\r\n```solidity    \r\npragma solidity ^0.6.6;\r\n\r\n/// @title ERC-2665 NFT Transfer Fee Extension\r\n/// @dev See https://github.com/ethereum/EIPs/issues/2665\r\n///  Note: the ERC-165 identifier for this interface is 0x509ffea4.\r\n///  Note: you must also implement the ERC-165 identifier of ERC-721, which is 0x80ac58cd.\r\ninterface ERC2665 /* is ERC165, is ERC721 but overide it's Design by contract specifications */ {\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `msg.value` < `getTransferFee(_tokenId)`.\r\n    ///  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the\r\n    ///  fee when calling this function or it's overloads, and throwing if said fee is not paid.\r\n    ///  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.\r\n    ///  When transfer is complete, this function checks if `_to` is a smart\r\n    ///  contract (code size > 0). If so, it calls `onERC2665Received` on `_to`\r\n    ///  and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC2665Received(address,address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\".\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. Throws if `msg.value` < `getTransferFee(_tokenId)`.\r\n    ///  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the\r\n    ///  fee when calling this function and throw if said fee is not paid.\r\n    ///  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Change or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner. After a successful call and if\r\n    ///  `msg.value == getTransferFee(_tokenId)`, then a subsequent atomic call to\r\n    ///  `getTransferFee(_tokenId)` would eval to 0. If the fee is not to be paid in ETH,\r\n    ///  then token publishers MUST provide a way to pay the fee when calling this function,\r\n    ///  and throw if the fee is not paid.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n\r\n    /// @notice Query what is the transfer fee for a specific token\r\n    /// @dev If a call would returns 0, then any subsequent calls witht the same argument\r\n    /// must also return 0 until the Transfer event has been emitted.\r\n    /// @param _tokenId The NFT to find the Transfer Fee amount for\r\n    /// @return The amount of Wei that need to be sent along a call to a transfer function\r\n    function getTransferFee(uint256 _tokenId) external view returns (uint256);\r\n\r\n    /// @notice Query what is the transfer fee for a specific token if the fee is to be paid\r\n    /// @dev If a call would returns 0, then any subsequent calls with the same arguments\r\n    /// must also return 0 until the Transfer event has been emitted. If _currencySymbol == 'ETH',\r\n    /// then this function must return the same result as if `getTransferFee(uint256 _tokenId)` was called.\r\n    /// @param _tokenId The NFT to find the Transfer Fee amount for\r\n    /// @param _currencySymbol The currency in which the fee is to be paid\r\n    /// @return The amount of Currency that need to be sent along a call to a transfer function\r\n    function getTransferFee(uint256 _tokenId, string calldata _currencySymbol) external view returns (uint256);\r\n\r\n}\r\n\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n```\r\n\r\n\r\n**Every ERC-2665 compliant contract SHOULD implement the following interface if they wants to provide a standardized way for marketplaces to provide a royalty fee as a percentage of a sale** :\r\n\r\n```solidity    \r\npragma solidity ^0.6.6;\r\n\r\n/// @title ERC-2665 NFT Transfer Fee as percent of sale Extension \r\n/// @dev See https://github.com/ethereum/EIPs/issues/2665\r\n///  Note: the ERC-165 identifier for this interface is 0xf4bcaa86.\r\ninterface ERC2665PercentOfSale /* is ERC2665 */ {\r\n\r\n    /// @dev This emits when ownership of any NFT changes when following a sale on a trusted marketplace.\r\n    event Sale(uint256 indexed _tokenId, uint256 _price);\r\n\t\r\n    /// @notice Query if an address is an trusted marketplace for NFT sales\r\n    /// @param _marketplace The address that is trusted to report an NFT sale truthfully\r\n    /// @param _tokenId The token ID the marketplace is queried of. \r\n    /// @return True if `_marketplace` is an approved marketplace for the NFT, false otherwise\r\n    function isTrustedMarketplace(address _marketplace, uint256 _tokenId) external view returns (bool);\r\n\t\r\n    /// @notice Query the numerator of sale fee that is a percentage of the sale price for a given token\r\n    /// @param _tokenId The token ID the fee is queried of. \r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @return 0 if no percent fee are defined, the saleFeeNumerator of the fee such as \r\n    /// salePrice * saleFeeNumerator/saleFeeDenominator = TransferFee otherwise.\r\n    function saleFeeNumerator(uint256 _tokenId) external view returns (uint256);\r\n\t\r\n    /// @notice Query the denominator of sale fee that is a percentage of the sale price for a given token\r\n    /// @param _tokenId The token ID the fee is queried of. \r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @return 0 if no percent fee are defined, the saleFeeDenominator of the fee such as \r\n    /// salePrice * saleFeeNumerator/saleFeeDenominator = TransferFee otherwise.\r\n    function saleFeeDenominator(uint256 _tokenId) external view returns (uint256);\r\n\t\r\n    /// @notice callable by a marketPlace once a sale have been agreed but before the NFT transfer.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT. \r\n    /// Throws if isTrustedMarketplace(msg.sender, _tokenId) == false.\r\n    /// Throws if msg.value != _price * saleFeeNumerator / saleFeeDenominator.\r\n    /// May throws if msg.value < getTransferFee(_tokenId) -up to your implementation-\r\n    /// Emit the Sale event.\r\n    /// Once called succesfully, set getTransferFee(uint256 _tokenId) to 0.\r\n    function settleSale(uint256 _tokenId, uint256 _price) external payable;\r\n\r\n}\r\n\r\n```\r\n\r\nA wallet/broker/auction application MUST implement the wallet interface if it will accept safe transfers.\r\n\r\n```solidity    \r\n/// @dev Note: the ERC-165 identifier for this interface is 0xac3cf292.\r\ninterface ERC2665TokenReceiver {\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC2665 smart contract calls this function on the recipient\r\n    ///  after a `transfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. Return of other than the magic value MUST result in the\r\n    ///  transaction being reverted.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _operator The address which called `safeTransferFrom` function\r\n    /// @param _from The address which previously owned the token\r\n    /// @param _tokenId The NFT identifier which is being transferred\r\n    /// @param _data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC2665Received(address,address,uint256,bytes)\"))`\r\n    ///  unless throwing\r\n    function onERC2665Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\r\n}\r\n```\r\n\r\nThe following \"ERC2665 Metadata JSON Schema\" is proposed as an extension to the \"ERC721 Metadata JSON Schema\". ERC-2665 compliant tokens implementing the ERC-721 Metadata extension MUST return this schema instead of the one described in \"ERC721 Metadata JSON Schema\".\r\n\r\n```json\r\n{\r\n    \"title\": \"Asset Metadata\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"name\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"Identifies the asset to which this NFT represents\"\r\n        },\r\n        \"description\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"Describes the asset to which this NFT represents\"\r\n        },\r\n        \"image\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\"\r\n        },\r\n\t\"feeCurrency\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"A comma separated list of the symbol of the currencies accepted as payment of the Transfer Fee\"\r\n        },\r\n\t\"feeDescription\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"Information on the Transfer Fee to be displayed to potential owners of the NFT\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPlease refer to EIP-721 for the **metadata extension** and **enumeration extension**.\r\n\r\nhttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n\r\nDue to the nature of payable fees, the **metadata extension** SHOULD be implemented in order to inform users about the nature and amount of the fees.\r\n\r\n## Caveats\r\n\r\nThe 0.6.6 Solidity interface grammar is not expressive enough to document the ERC-2665 standard. A contract which complies with ERC-2665 MUST also abide by the following:\r\n\r\n- A contract that implements ERC-2665 MUST also abide by the ERC-721 standard. Functions defined in `interface ERC721` are all overridden by the function and specifications defined in `interface ERC2665` above.\r\n\r\n- If `getTransferFee(uint256)` is implemented as something else than a `pure` function always returning `0`, then `safeTransferFrom` (both versions), `transferFrom` and `approve` MUST be implemented as `payable`. This takes precedence over the mutability guarantees of ERC-721.\r\n\r\n- Any function call MUST throw if the conditions described in their interface are met. They MAY throw in other, additional conditions too.\r\n\r\n## Non specified functions in the standard that contracts should implement for full functionality.\r\n\r\nThe interface defined above exist for inter-operability purposes. However, smart contract publishers are reminded to implement the following features in their contracts : \r\n\r\n- Standard ERC-721 features, such as minting, and desirable genric smart contract features, such as an \"owner\" property.\r\n\r\n- A way to set up and modify fixed and percent based trading fee for their tokens. eg : `setPercentSaleFees(uint256 _tokenId, uint256 _saleFeeNumerator,  uint256 _saleFeeDenominator) external`\r\n\r\n- A way to nominate and edit marketplaces trusted to handle royalties are percent of sales. eg :  `function setTrustedMarketplace(address _marketplace) external`\r\n\r\n\r\nRationale\r\n===============\r\n\r\nThis EIP is a first draft on how to give publishers more options on what kind of NFTs can be created and the fees that can be collected whilst still maintaining the same flow of trade for users, platforms and wallet providers. Only minimal changes to existing code would be necessary to implement this EIP to previous ERC-721 compatible software solutions.\r\n\r\n### Summarized additions compared to the ERC-721 Specification\r\n\r\n\r\n1.  A new function : `getTransferFee(uint256 _tokenId) external view returns (uint256)`. It is overloaded with `getTransferFee(uint256 _tokenId, string _currencySymbol) external view returns (uint256)` if the fee need to be paid with a different currency than ETH.\r\n\r\n2.  If a call to `getTransferFee(_tokenId, _currencySymbol)`  would have returned `0` at any point, then any posterior call with the same arguments MUST return `0` until a `Transfer` event has been emitted for `_tokenId`. This is called in the rest of this EIP the *eval to 0 remanence guarantee*.\r\n\r\n3.  Successfully calling `approve{value : getTransferFee(_tokenId)}(address _approved, uint256 _tokenId)` will atomatically make `getTransferFee(_tokenId)` eval to `0`.\r\n\r\n4.  All `safeTransferFrom` variants now call `onERC2665Received` instead of  the ERC-721 specific function. `ERC2665TokenReceiver` is derived from `ERC721TokenReceiver` accordingly.\r\n\r\n5.  Changing the mutability of `safeTransferFrom` & overloads, `transferFrom` and`approve` to always be *payable* if `getTransferFee` can return non-zero values.\r\n\r\n6.  Changing the sufficient throw conditions of the `transferFrom` functions. More specifically adding: `Throws if msg.value < getTransferFee(_tokenId)`.\r\n\r\n7.  \"ERC2665 Metadata JSON Schema\" extended from the \"ERC721 Metadata JSON Schema\" to provide fee information without polluting the description of an NFT.\r\n\r\n8.  Extension compatibility preserved. If something extends ERC-721, it can extend ERC-2665.\r\n\r\n\r\n### Discussion\r\n\r\n\r\n- Whether ERC-2665 follows ERC-721 could be debated because of change #4. This change is important, as some smart contracts designed to only handle free `Transfer` ERC-721 tokens could get an ERC-2665 stuck. The actual consequence of the spec extension is that the `safeTransferFrom` functions will throw more than the minimum required by ERC-721, which is already covered in the ERC-721 spec itself. Therefore, ERC-2665 follows ERC-721 and is simply an extension of it.\r\n\r\n\r\n    >From ERC-721 Specifications:\r\n    >    \r\n    >The transfer and accept functions’ documentation only specify conditions when the transaction MUST throw. Your implementation MAY also throw in other situations.\r\n \r\n \r\n\r\n- The `getTransferFee` function is where most of the engineering work for publishers lies. The function is `view`, meaning no state changes can happen when it's being called. Moreover, the *eval to 0 remanence guarantee* is extremely important in order for an ecosystem to be built around this standard, as it guarantees that the next Transfer can follow feeless ERC-721 behavior and that a Transfer Fee can be paid in advance.\r\n\r\n- A more subtle consequence of `getTransferFee` being `view` is that it shall not depend on `msg.sender`, but rather only of non-manipulable parameters such as the current owner and operators of the token.\r\n\r\n- The *eval to 0 remanence guarantee* is specifically worded so that the change of ownership could be done through a mechanism that is not related to ERC-2665 (e.g. the publisher’s own trading system). However, the specifications of `Transfer` must still be respected even if the change of ownership is not done through a call to an ERC-2665 related function. ERC-2665 does not specify any Transfer Fee refund mechanism should the token change owner through a mechanism other than ERC-2665.\r\n       \r\n- `getTransferFee` can be restricted to pure (e.g : if the fee is static like always 0 wei, aka typical ERC-721 tokens).\r\n\r\n- While publishers are free to implement whatever behavior they want behind the `getTransferFee` function, it is impossible to guarantee a fee calculated as a direct percentage of an actual sale price. The money exchange for that transfer, if any, could simply be happening off-chain. Therefore, rather than implementing a complex \"fee calculation and distribution\" protocol, ERC-2665 is generic enough to be easily interactable by third parties. This gives publishers the freedom to specify the fee, which can be complex, variable and potentially oraclized (e.g. the fee is always 10 USD), and standardized entry-points for the fee to be paid and distributed.\r\n\r\n- `getTransferFee` can be implemented to return 0 if the token is owned/operated by an address owned by a partner of the publisher. This incentivizes publishers and marketplaces to partner-up : The publisher gets more exposure and an UX tailored to its product, and the marketplace becomes cheaper than its competitors for these tokens. **The Transfer Fee could then be supplanted by a real-world commercial contract, or something in chain, like for example, *a direct percentage of the sales proceeds*. This allow token publishers to guarantee a fee in trustless environments while pushing trades to happens on marketplace that is gonna remunerate them fairly.**\r\n\r\n- As long as an ERC-2665 smart contract is accessed in a read-only fashion or that the `safeTransfer` functions are not used, any software designed to interact with feeless ERC-721 can interact with ERC-2665 without any update necessary. However, if the `Transfer` functions were assumed to always be free/non-payable (i.e. if the software implementation was only compatible with a subset of ERC-721), then problems might arise. A few ways to mitigate such issues are suggested in the Backwards Compatibility section below.\r\n\r\n- Due to the addition of `getTransferFee`, the ERC-165 signature of the `ERC2665` interface is different from the one of the `ERC721` interface. However, all of the ERC-721 function signatures are implemented unchanged. Should an ERC-2665 smart contract be declared as implementing `ERC721` when being asked about it through ERC-165 `supportsInterface` ? The answer is yes, as ERC-2665 is fully ERC-721 compliant, and only limitations in the Solidity language *(Namely lack of Interface inheritance and design-by-contract programming abilities)* or the chosen method of computing ERC-165 identifiers could suggest a different answer that ultimately do not have a use case.\r\n\r\n- What should be the gas limit of `getTransferFee`, if any ? Its behaviour needs to be implementable as more complex than an ERC-165 check, but nonetheless gas spending should be kept low to prevent accidental locking in a custodian wallet.\r\n\r\n- Regarding non-ETH currency fees, the Standard is on purpose extremely generic, as there is no limit on what these currencies could be, nor would they need to be in-chain currencies. \r\n\r\n- If the fee is not in ETH, token publishers SHOULD implement the *ERC-721 metadata* extension with the *ERC2665 Metadata Json Schema* and provide informations on how to pay the fee there.\r\n\r\n- Suggested flow for ERC-20 fees is that the fee payer gives an `allowance` of the currency to the ERC-2665 contract, then a subsequent call to `transferFrom` or `approve` will make the ERC-2665 collect the fee from `msg.sender`. An implementation example of a contract requiring such a fee will be provided. \r\n\r\nBackwards Compatibility\r\n===============\r\n\r\nEvery ERC-2665 contract is fully compliant with the ERC-721 standard, meaning backwards compatibility issues can only arise if the software interacting with an ERC-2665 contract was in fact not ERC-721 compliant in the first place.\r\n\r\n## Upgrading from ERC-721 to ERC-2665\r\n\r\n### Token publisher\r\n\r\n- ERC-2665 is an extension of ERC-721, meaning that any ERC-721 contract can be extended to be also ERC-2665. The minimal work necessary is to implement `getTransferFee()`, the relevant ERC-165 codes and the proper handling of the fee in the approval/transfer functions, as well as changing any `onERC721Received` call to `onERC2665Received`.\r\n\r\n- `getTransferFee` could be reading a price oracle smart contract averaging the last transactions on a marketplace, relying on an original price discovery mechanism, be it a fixed wei amount, or be it obtained by calling a smart contract specified by the token creator, depends on a complex interaction with another marketplace, simply set to 0, etc...\r\n\r\n- The fee MUST be able to be paid either using `approve()` or `transferFrom()` if the fee is in ETH, but apart from this you MAY implement any extra fee collection and distribution mechanism you want. e.g : give the ability for a marketplace you trust is gonna give you 10% of the sale the ability to pay 0 wei as an actual transfer fee.\r\n\r\n- No particular behavior for overpaying/refunding a fee is specified in ERC-2665. The only real constraint is the *eval to 0 remanence guarantee*  of `getTransferFee`.\r\n\r\n- ERC-2665 token publishers SHOULD make it so that sending more than the `TransferFee` when transferring a token makes it so that the next TransferFee can be waived. The exact behavior is left to the creativity of the publisher, but atomicity of the `Transfer{value}() => getTransferFee() == 0` sequence is sought after for an ERC-2665 token to be easily traded at custodial third party marketplaces.\r\n\r\n- Similarly, ERC-2665 token publishers SHOULD also make it possible for `Approve()` to pay the subsequent Transfer Fee, so that `Approve{value}() => Transfer(){0} => getTransferFee() == 0` can also be an atomic sequence.\r\n\r\n### Frontend, UX, and other off-chain interactions.\r\n\r\n##### Minimal implementation\r\n\r\nMake users send a `value` of `getTransferFee(_tokenId)` Wei when calling `Transfer` or `Approve` functions if the token is ERC-2665.  \r\n\r\n##### Suggested implementation for Wallet/Broker/Auction applications\r\n\r\nDue to the very nature of a transfer fee, gasless listings would place the burden of paying the transfer fee on the buyer. Informations on the amount and nature of this fee SHOULD be clearly communicated to any potential sellers and buyers. There is no guarantee in the ERC-2665 standard that any two subsequent, non atomic `getTransferFee()` calls will return the same value, except if this value is `0` due to the *eval to 0 remanence guarantee* .\r\n\r\nIf you want for a seller to pay the transfer fee in advance, you might have to simulate a post-transactions state so that a potential future recipient of the token can receive it without having to pay the transfer fee. This is of course non-trivial and varying with ERC-2665 implementations, but some paths are explored below.\r\n\r\n### Wallet/Broker/Auction Smart Contracts\r\n\r\n##### Subsequent Transfer Fee paid by the seller (if any)\r\n\r\nThe simplest way to make your (awesome) decentralized auctioning smart contract that was working just fine with feeless ERC-721 compatible with ERC-2665 is to add an implementation of `onERC2665Received` just like this :\r\n\r\n```solidity    \r\nfunction onERC2665Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4){\r\n    \r\n    // Require the transfer fee to have already been prepaid. Throw if it is not the case.\r\n    require(ERC2665(msg.sender).getTransferFee() == 0);\r\n    \r\n    // Here do whatever you already do for feeless ERC721\r\n    \r\n    returns(bytes4(keccak256(\"onERC2665Received(address,address,uint256,bytes)\")));\r\n\r\n}\r\n```\r\n\r\nKeep in mind though that the safeTransferFunction is now calling `onERC2665Received` on any potential new owners, which might require a few more changes in your code. Do not forget about updating your ERC-165 code either.\r\n\r\n##### Transfer Fee paid by the buyer (if any)\r\n\r\nAssuming you have some `win(uint256 _tokenId, address _tokenContract, address _from, address _to, uint _fee, bytes _data)` function that is used by the buyer to get the token. (Unoptimized code and separated cases for clarity).\r\nThis function signature is just given as an example, and it's parameters could come from other sources such as internal variables/function calls/msg.sender/etc...\r\n\r\n```solidity    \r\nfunction win(uint256 _tokenId, address _tokenContract, address _from, address _to, uint _fee) external{\r\n\r\n    // Do a preliminary check on the recipient being able to properly handle an ERC-721 token\r\n    // 0x150b7a02 is the ERC-165 identifier for the ERC721TokenReceiver interface\r\n    require(!isContract(_to) || ERC165(_to).supportsInterface(0x150b7a02), \"The recipient is not able to handle ERC721 tokens\");\r\n    \r\n    \r\n    //Do your normal winning/paying logic here\r\n\r\n    \r\n    //Time to transfer\r\n    \r\n    // Case where your recipient is a smart contract that does not handle the EIP-2665 extension but implements\r\n    // a feeless ERC-721 just fine\r\n    // 0xac3cf292 is the ERC-165 identifier for the ERC2665TokenReceiver interface\r\n    if(isContract(_to) && !ERC165(_to).supportsInterface(0xac3cf292)){    \r\n    \r\n        // Unsafe transfer to prevent throwing\r\n        ERC2665(_tokenContract).transferFrom{\r\n                value: _fee //Pay the fee\r\n            }(\r\n                _from,\r\n                _to,\r\n                _tokenId\r\n            );\r\n        \r\n        // Call onERC721Received just like a feeless safeTransfer from an ERC-721 would\r\n        assert(ERC721TokenReceiver(_to).onERC721Received(address(this), _from, _tokenId, _data) ==\r\n            bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")));\r\n        \r\n        // Verify that the next transfer is feeless as to not hinder the next Transfer\r\n        assert(ERC2665(_tokenContract).getTransferFee(_tokenId) == 0);\r\n        \r\n        // Please note that the ERC2665 token will not get stuck if the _to contract does not lie about\r\n        // properly implementing the ERC721 standard, as a call to safeTransferFrom() on a non ERC-2665\r\n        // compatible _to will throw\r\n        \r\n    } else{\r\n        // ERC-2665 is properly implemented in this case :\r\n        // _to is either an ERC2665TokenReceiver smart contract or a human\r\n        ERC2665(_tokenContract).safeTransferFrom{\r\n                value: _fee //Pay the fee\r\n            }(\r\n                _from,\r\n                _to,\r\n                _tokenId        \r\n        );\r\n    }\r\n    \r\n    // Do more stuff post transfer if you need to\r\n\r\n}\r\n```\r\n\r\nTest Cases\r\n===============\r\n\r\nTo be provided once sufficient discussion happened\r\n\r\n\r\nImplementations\r\n===============\r\n\r\n-    Cryptograph. A soon to be launched publishing and trading platform of NFTs created by famous individuals and artists called Cryptographs. The platform is centered around the concept that each token generates revenue for its creator and for a charitable cause of the creator’s choice in perpetuity by always collecting fees on transactions and transfers. Cryptograph implements ERC-2665, which was designed specifically to follow the ERC-721 standard whilst enforcing payable transfer fees.\r\n\r\n\r\nReferences\r\n===============\r\n\r\n1.\tThe ERC-721 Standard https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n2.\tThe ERC-165 Standard https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n\r\nCopyright\r\n===============\r\n\r\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\r\n",
  "closed_by": {
    "login": "github-actions[bot]",
    "id": 41898282,
    "node_id": "MDM6Qm90NDE4OTgyODI=",
    "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/github-actions%5Bbot%5D",
    "html_url": "https://github.com/apps/github-actions",
    "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
    "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
    "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
    "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
    "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
    "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
    "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
    "type": "Bot",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/2665/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/632019266",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-632019266",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 632019266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjAxOTI2Ng==",
    "user": {
      "login": "axic",
      "id": 20340,
      "node_id": "MDQ6VXNlcjIwMzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/20340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axic",
      "html_url": "https://github.com/axic",
      "followers_url": "https://api.github.com/users/axic/followers",
      "following_url": "https://api.github.com/users/axic/following{/other_user}",
      "gists_url": "https://api.github.com/users/axic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axic/subscriptions",
      "organizations_url": "https://api.github.com/users/axic/orgs",
      "repos_url": "https://api.github.com/users/axic/repos",
      "events_url": "https://api.github.com/users/axic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T10:50:35Z",
    "updated_at": "2020-05-21T10:50:35Z",
    "author_association": "MEMBER",
    "body": "Why was #2664 opened and closed?",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/632019266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/632075965",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-632075965",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 632075965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjA3NTk2NQ==",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T13:08:33Z",
    "updated_at": "2020-05-21T13:08:33Z",
    "author_association": "NONE",
    "body": "Competing EIP : \r\nhttps://github.com/ethereum/EIPs/issues/2571",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/632075965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/632239248",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-632239248",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 632239248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjIzOTI0OA==",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T17:27:29Z",
    "updated_at": "2020-05-21T17:36:21Z",
    "author_association": "NONE",
    "body": "Updated the OP to include suggestions from the community.\r\nNamely, the ability for the fee to be paid in something else than ETH and an extension of the json metadata schema to allow for a richer fee description.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/632239248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788182954",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-788182954",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 788182954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODE4Mjk1NA==",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-01T18:48:46Z",
    "updated_at": "2021-03-01T18:48:46Z",
    "author_association": "NONE",
    "body": "Added Royalties as percentage of sales.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788182954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788963989",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-788963989",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 788963989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODk2Mzk4OQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-02T14:51:43Z",
    "updated_at": "2021-03-02T14:51:43Z",
    "author_association": "MEMBER",
    "body": "FYI: This will be 2664.  Vanity number inflation is punished by not getting the number you want.  😄\r\n\r\n----\r\n\r\nRecommend simplifying the spec to just extend/implement EIP-721 rather than re-implementing it.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/788963989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/789928659",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-789928659",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 789928659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTkyODY1OQ==",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-03T17:45:35Z",
    "updated_at": "2021-03-03T18:39:01Z",
    "author_association": "NONE",
    "body": "> FYI: This will be 2664. Vanity number inflation is punished by not getting the number you want. 😄            \r\n               \r\nBecause of existing projects already published on-chain, ERC2665 will be kept as an interface name and usage name, even though it refer to what is formally accepted as ERC-2664. If need be and if you want full formalism, ERC-2664 can be rewritten as simply being an alias to something called ERC-2665 (ERC here meaning Ethereum Renaming Circumvention) containing the standard described above. 😄😄😄\r\n             \r\nI would also be very glad if you could point me to where such a consensus for ERC-2665 renaming has been decided, and what the appeal process is as this decision comes nearly a year after initial submission and would just confuse users while seemingly coming from a single voice that had no personal cost associated with taking an unilateral decision. 🤔    \r\n \r\n As an early comment and decision it would be fair, but now that contracts exist implementing it, this causes retrocompatibility issues that are not technically justified.                 \r\n                \r\n>Recommend simplifying the spec to just extend/implement EIP-721 rather than re-implementing it.                    \r\n                   \r\nThen the standard would lose of it's accuracy, as there is no way currently in solidity to describe an \"override\" of already described functions predicates and postulates.  (in that an interface cannot override another interface, as interfaces simply cannot inherit).  \r\nThe standard is exhaustive, as standards should be. Then, in rationale, is provided a shorter and more \"human readable\" version of it.                \r\n                   ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/789928659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790633764",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-790633764",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 790633764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDYzMzc2NA==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T13:53:54Z",
    "updated_at": "2021-03-04T13:53:54Z",
    "author_association": "MEMBER",
    "body": "> a year after initial submission\r\n\r\nThis isn't even EIP yet, it is just an idea for an EIP which generally receives no un-solicitied review.  To create an EIP you need to create a pull request against this repository and add a new EIP file that follows the template.  It will get reviewed for structure, and then you can work it through the review process.  Normally when people start with an idea issue we let them use that number for the follow-up EIP when it is created, but we historically have taken a somewhat hard stance against number squatting.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790633764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790646164",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-790646164",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 790646164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDY0NjE2NA==",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T14:12:19Z",
    "updated_at": "2021-03-04T14:52:24Z",
    "author_association": "NONE",
    "body": "Sorry about that, I was not aware it was frowned upon given the number of issues that were created instead of repoened when talking about the same subject. There is no guideline about it in the given documentation, it's a cultural thing that is unknown to first time contributors. If your comment was shortly after the initial post, when the interface name was still ERCXXXX, there would be no issue with it.\r\n\r\nOutside of formalism, the \"brand\" name of this proposal is ERC-2665 as this is how a layman understand it and a name was necessary for interface naming. Given that published code is using this interface name and associated ERC165 hash, the brand name will stay ERC-2665 to allow for better retro-compatibilities on what is ultimately an administrative formalism.\r\n\r\nThis standard is still under construction as big changes are happening for NFT and more specifically things related to layer 2/Migrations, and hence it is far from ready to be an ERC, which will most likely happen post sharding.\r\n\r\nRecommend adding naming guidelines in documentation on issue/EIP/ERC track, as there is currently a chicken and egg problem if the standard name is used in an ERC165 hash. (Not a problem in other cases)\r\nThe alternative is incentivizing standards to not use an ERC number at all, which goes against the relevance of this repo for pure smart contracts standards.\r\n\r\nDo you have comments/suggestions that are relative to the content rather than the form ? More spefically because I see you are active here and might have good insight related to the interaction between NFT ownership change and shards/layer2.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790646164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790689625",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-790689625",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 790689625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDY4OTYyNQ==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T15:13:17Z",
    "updated_at": "2021-03-04T15:13:17Z",
    "author_association": "MEMBER",
    "body": "I *personally* generally don't review EIPs in the \"idea\" phase, especially ERCs, because I am already *way* too busy just trying to keep up with EIPs going through the EIP process.  Once you are ready to *start* the EIP process an editor will review it, but really just for structural/process compliance.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790689625/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790690807",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-790690807",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 790690807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDY5MDgwNw==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T15:14:47Z",
    "updated_at": "2021-03-04T15:14:47Z",
    "author_association": "MEMBER",
    "body": "Re: How is the number chosen: https://eips.ethereum.org/EIPS/eip-1#eip-header-preamble and https://raw.githubusercontent.com/ethereum/EIPs/master/eip-template.md\r\n\r\nThe EIP number is assigned by an EIP Editor (e.g., me) when the EIP enters the draft stage.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790690807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790701486",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-790701486",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 790701486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDcwMTQ4Ng==",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T15:29:42Z",
    "updated_at": "2021-03-04T15:34:27Z",
    "author_association": "NONE",
    "body": ">The EIP number is assigned by an EIP Editor (e.g., me) when the EIP enters the draft stage.\r\n               \r\nThis is a problem costing real money to innocent third parties when dealing with ERC-165 hash. More transparency or at least an earlier discussion would be appreciated as to not undermine efforts to champion a standard by forcing a rename due to implicit culture. I do believe your goal is to deincentivize number squatting. Lesson learned. However I also believe your goal is to promote ERC as being relevant and clear standards that attract quality contributors.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790701486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790703852",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-790703852",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 790703852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDcwMzg1Mg==",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T15:33:05Z",
    "updated_at": "2021-03-04T15:33:05Z",
    "author_association": "MEMBER",
    "body": "Generally speaking, no one should be implementing \"standards\" until they are actually standardized.  😄  There is value in experimental implementations (as seen in browsers), but they are usually setup in a provisional way so that changes to them are not hard.  In this case, this is just an idea (from a process standpoint) and not a standard at all.  If people are implementing a standard before it has gone through a standardization process, then either the standard bends (usually resulting in a poor standard) or the implementations bend (resulting in non-standard implementations).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790703852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790713199",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-790713199",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 790713199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDcxMzE5OQ==",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T15:46:03Z",
    "updated_at": "2021-03-04T18:02:17Z",
    "author_association": "NONE",
    "body": ">from a process standpoint\r\n\r\nIrrelevant to the championship/naming of it. A standard only has value if people use it. A name is necessary to gather people that are gonna work together on this standardization. Renaming a standard (wip or not) is effectively forking it.\r\n\r\nA standard can bend with additional, optional features that are still retro-compatible (USB...).\r\nYou are wanting to hard kill all previous implementations done exploring this standard (costing real money) and forcing an update and audit of new code (costing real money) for those that have the possibility to update because of an implicit repo culture. I'm personally asking you to reconsider, especially when ethereum is facing competitions from alternatives and hence those cost could push projects on other chains.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790713199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790772043",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-790772043",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 790772043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDc3MjA0Mw==",
    "user": {
      "login": "Mepond",
      "id": 56411999,
      "node_id": "MDQ6VXNlcjU2NDExOTk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56411999?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mepond",
      "html_url": "https://github.com/Mepond",
      "followers_url": "https://api.github.com/users/Mepond/followers",
      "following_url": "https://api.github.com/users/Mepond/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mepond/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mepond/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mepond/subscriptions",
      "organizations_url": "https://api.github.com/users/Mepond/orgs",
      "repos_url": "https://api.github.com/users/Mepond/repos",
      "events_url": "https://api.github.com/users/Mepond/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mepond/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T17:04:45Z",
    "updated_at": "2021-03-04T17:04:45Z",
    "author_association": "NONE",
    "body": "Tôi khong hiểu tiếng anh và cũng hông rành về mảng này? Bạn giup toi nhé\n",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/790772043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/817926286",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-817926286",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 817926286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzkyNjI4Ng==",
    "user": {
      "login": "LongTheSnake",
      "id": 79592067,
      "node_id": "MDQ6VXNlcjc5NTkyMDY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/79592067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LongTheSnake",
      "html_url": "https://github.com/LongTheSnake",
      "followers_url": "https://api.github.com/users/LongTheSnake/followers",
      "following_url": "https://api.github.com/users/LongTheSnake/following{/other_user}",
      "gists_url": "https://api.github.com/users/LongTheSnake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LongTheSnake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LongTheSnake/subscriptions",
      "organizations_url": "https://api.github.com/users/LongTheSnake/orgs",
      "repos_url": "https://api.github.com/users/LongTheSnake/repos",
      "events_url": "https://api.github.com/users/LongTheSnake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LongTheSnake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-12T15:55:05Z",
    "updated_at": "2021-04-12T15:55:05Z",
    "author_association": "NONE",
    "body": "EIP number does not changes function signatures nor deny all the good work put in place to produce this nice proposition. (It's just a pain to rename everything)\r\n\r\nIt seems to be a good alternative to the market locked-in royalties alternative #2907 and superseed #2571 which follow the same idea of embedding the fee calculation within the token contract.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/817926286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/818379656",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-818379656",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 818379656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODM3OTY1Ng==",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-13T02:13:00Z",
    "updated_at": "2021-04-13T02:13:00Z",
    "author_association": "NONE",
    "body": "My bandwidth is currently quite full, but a reformatting of this EIP to make it easy to implement (and working cross chain) is currently in the work. Function would stay the same, except there is gonna be a \"developper readable\" deliverable (with example sample implementation) + a full formal specification. ",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/818379656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962544711",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-962544711",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 962544711,
    "node_id": "IC_kwDOAq426M45X0RH",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-07T03:11:07Z",
    "updated_at": "2021-11-07T03:11:07Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/962544711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/970206261",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-970206261",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 970206261,
    "node_id": "IC_kwDOAq426M451Cw1",
    "user": {
      "login": "Nokhal",
      "id": 13810287,
      "node_id": "MDQ6VXNlcjEzODEwMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13810287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nokhal",
      "html_url": "https://github.com/Nokhal",
      "followers_url": "https://api.github.com/users/Nokhal/followers",
      "following_url": "https://api.github.com/users/Nokhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nokhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nokhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nokhal/subscriptions",
      "organizations_url": "https://api.github.com/users/Nokhal/orgs",
      "repos_url": "https://api.github.com/users/Nokhal/repos",
      "events_url": "https://api.github.com/users/Nokhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nokhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-16T12:05:51Z",
    "updated_at": "2021-11-16T12:06:29Z",
    "author_association": "NONE",
    "body": "A lot of the feedback on it is how to make it both marketplace and chain transfer compatible.\r\n\r\nWe are currently working on bridging NFT from EVM to EVM, which ultimately ties in in this fee feature.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/970206261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1126938852",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-1126938852",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 1126938852,
    "node_id": "IC_kwDOAq426M5DK7jk",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-05-15T13:12:42Z",
    "updated_at": "2022-05-15T13:12:42Z",
    "author_association": "NONE",
    "body": "There has been no activity on this issue for two months. It will be closed in a week if no further activity occurs. If you would like to move this EIP forward, please respond to any outstanding feedback or add a comment indicating that you have addressed all required feedback and are ready for a review.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1126938852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140456112",
    "html_url": "https://github.com/ethereum/EIPs/issues/2665#issuecomment-1140456112",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/2665",
    "id": 1140456112,
    "node_id": "IC_kwDOAq426M5D-fqw",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2022-05-29T14:02:47Z",
    "updated_at": "2022-05-29T14:02:47Z",
    "author_association": "NONE",
    "body": "This issue was closed due to inactivity. If you are still pursuing it, feel free to reopen it and respond to any feedback or request a review in a comment.",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/1140456112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
